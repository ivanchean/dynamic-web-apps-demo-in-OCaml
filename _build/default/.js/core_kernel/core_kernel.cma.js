(function(joo_global_object)
   {"use strict";
    var
     runtime=joo_global_object.jsoo_runtime,
     bigstring_marshal_data_size_stub=runtime.bigstring_marshal_data_size_stub,
     bigstring_memcmp_stub=runtime.bigstring_memcmp_stub,
     caml_ba_dim_1=runtime.caml_ba_dim_1,
     caml_ba_get_1=runtime.caml_ba_get_1,
     caml_ba_set_1=runtime.caml_ba_set_1,
     caml_ba_uint8_get16=runtime.caml_ba_uint8_get16,
     caml_ba_uint8_get32=runtime.caml_ba_uint8_get32,
     caml_ba_uint8_get64=runtime.caml_ba_uint8_get64,
     caml_ba_uint8_set16=runtime.caml_ba_uint8_set16,
     caml_ba_uint8_set32=runtime.caml_ba_uint8_set32,
     caml_ba_uint8_set64=runtime.caml_ba_uint8_set64,
     caml_bswap16=runtime.caml_bswap16,
     caml_bytes_unsafe_get=runtime.caml_bytes_unsafe_get,
     caml_bytes_unsafe_set=runtime.caml_bytes_unsafe_set,
     caml_check_bound=runtime.caml_check_bound,
     caml_compare=runtime.caml_compare,
     caml_equal=runtime.caml_equal,
     caml_float_compare=runtime.caml_float_compare,
     caml_fresh_oo_id=runtime.caml_fresh_oo_id,
     caml_greaterequal=runtime.caml_greaterequal,
     caml_int32_bswap=runtime.caml_int32_bswap,
     caml_int64_add=runtime.caml_int64_add,
     caml_int64_and=runtime.caml_int64_and,
     caml_int64_bswap=runtime.caml_int64_bswap,
     caml_int64_of_int32=runtime.caml_int64_of_int32,
     caml_int64_or=runtime.caml_int64_or,
     caml_int64_shift_left=runtime.caml_int64_shift_left,
     caml_int64_shift_right=runtime.caml_int64_shift_right,
     caml_int64_shift_right_unsigned=runtime.caml_int64_shift_right_unsigned,
     caml_int64_to_int32=runtime.caml_int64_to_int32,
     caml_int_compare=runtime.caml_int_compare,
     caml_lessthan=runtime.caml_lessthan,
     caml_list_of_js_array=runtime.caml_list_of_js_array,
     caml_ml_string_length=runtime.caml_ml_string_length,
     caml_mul=runtime.caml_mul,
     caml_new_string=runtime.caml_new_string,
     caml_notequal=runtime.caml_notequal,
     caml_obj_tag=runtime.caml_obj_tag,
     caml_register_global=runtime.caml_register_global,
     caml_string_compare=runtime.caml_string_compare,
     caml_string_equal=runtime.caml_string_equal,
     caml_string_get=runtime.caml_string_get,
     caml_string_notequal=runtime.caml_string_notequal,
     caml_trampoline=runtime.caml_trampoline,
     caml_trampoline_return=runtime.caml_trampoline_return,
     caml_update_dummy=runtime.caml_update_dummy,
     caml_wrap_exception=runtime.caml_wrap_exception;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4
              ?f(a0,a1,a2,a3)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3])}
    function caml_call5(f,a0,a1,a2,a3,a4)
     {return f.length == 5
              ?f(a0,a1,a2,a3,a4)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4])}
    function caml_call6(f,a0,a1,a2,a3,a4,a5)
     {return f.length == 6
              ?f(a0,a1,a2,a3,a4,a5)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5])}
    function caml_call7(f,a0,a1,a2,a3,a4,a5,a6)
     {return f.length == 7
              ?f(a0,a1,a2,a3,a4,a5,a6)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6])}
    function caml_call8(f,a0,a1,a2,a3,a4,a5,a6,a7)
     {return f.length == 8
              ?f(a0,a1,a2,a3,a4,a5,a6,a7)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6,a7])}
    function caml_call9(f,a0,a1,a2,a3,a4,a5,a6,a7,a8)
     {return f.length == 9
              ?f(a0,a1,a2,a3,a4,a5,a6,a7,a8)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6,a7,a8])}
    function caml_call10(f,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9)
     {return f.length == 10
              ?f(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6,a7,a8,a9])}
    function caml_call11(f,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)
     {return f.length == 11
              ?f(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10])}
    function caml_call12(f,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11)
     {return f.length == 12
              ?f(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11)
              :runtime.caml_call_gen
                (f,[a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11])}
    function caml_call13(f,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12)
     {return f.length == 13
              ?f(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12)
              :runtime.caml_call_gen
                (f,[a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12])}
    function caml_call14(f,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13)
     {return f.length == 14
              ?f(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13)
              :runtime.caml_call_gen
                (f,[a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13])}
    function caml_call15(f,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14)
     {return f.length == 15
              ?f(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14)
              :runtime.caml_call_gen
                (f,[a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14])}
    function caml_call17
     (f,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16)
     {return f.length == 17
              ?f(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16)
              :runtime.caml_call_gen
                (f,
                 [a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16])}
    var
     global_data=runtime.caml_get_global_data(),
     cst_sexp_opaque$0=caml_new_string("sexp_opaque"),
     cst_core_kernel=caml_new_string("core_kernel"),
     cst_src_import_ml=caml_new_string("src/import.ml"),
     cst=caml_new_string(""),
     cst_core_kernel$0=caml_new_string("core_kernel"),
     cst_a=caml_new_string("a"),
     cst_src_import_ml_74_26=caml_new_string("src/import.ml:74:26"),
     cst_a$0=caml_new_string("a"),
     cst_sexp_opaque=caml_new_string("sexp_opaque"),
     cst_src_import_ml_74_4=caml_new_string("src/import.ml:74:4"),
     name=caml_new_string("src/import.ml.sexp_opaque"),
     cst_core_kernel$1=caml_new_string("core_kernel"),
     cst_Sexpable_Of_stringable_t_of_sexp_expected_an_atom_but_got_a_list=
      caml_new_string
       ("Sexpable.Of_stringable.t_of_sexp expected an atom, but got a list"),
     cst_core_kernel$2=caml_new_string("core_kernel"),
     cst_src_sexpable_ml=caml_new_string("src/sexpable.ml"),
     cst$0=caml_new_string(""),
     cst_core_kernel$3=caml_new_string("core_kernel"),
     cst_core_kernel$4=caml_new_string("core_kernel"),
     cst_t$4=caml_new_string("t"),
     cst_src_binable0_ml_159_2=caml_new_string("src/binable0.ml:159:2"),
     cst_t$5=caml_new_string("t"),
     cst_t$2=caml_new_string("t"),
     cst_src_binable0_ml_88_10=caml_new_string("src/binable0.ml:88:10"),
     cst_t$3=caml_new_string("t"),
     cst_Of_binable=caml_new_string("Of_binable"),
     cst_src_binable0_ml_Stable_Of_sexpable_V1_t=
      caml_new_string("src/binable0.ml.Stable.Of_sexpable.V1.t"),
     cst_t=caml_new_string("t"),
     cst_List=caml_new_string("List"),
     cst_Atom=caml_new_string("Atom"),
     cst_t$0=caml_new_string("t"),
     cst_src_binable0_ml_75_10=caml_new_string("src/binable0.ml:75:10"),
     cst_t$1=caml_new_string("t"),
     cst_core_kernel$5=caml_new_string("core_kernel"),
     cst_src_binable0_ml=caml_new_string("src/binable0.ml"),
     cst$1=caml_new_string(""),
     cst_core_kernel$6=caml_new_string("core_kernel"),
     cst_core_kernel$7=caml_new_string("core_kernel"),
     cst_core_kernel$8=caml_new_string("core_kernel"),
     cst_src_printf_ml=caml_new_string("src/printf.ml"),
     cst$2=caml_new_string(""),
     cst_core_kernel$9=caml_new_string("core_kernel"),
     cst_core_kernel$10=caml_new_string("core_kernel"),
     cst_perms$0=caml_new_string("perms"),
     cst_t$27=caml_new_string("t"),
     cst_t$24=caml_new_string("t"),
     cst_src_perms_ml_88_2=caml_new_string("src/perms.ml:88:2"),
     cst_t$25=caml_new_string("t"),
     cst_t$23=caml_new_string("t"),
     cst_a$3=caml_new_string("a"),
     cst_src_perms_ml_71_26=caml_new_string("src/perms.ml:71:26"),
     cst_a$4=caml_new_string("a"),
     cst_t$22=caml_new_string("t"),
     cst_src_perms_ml_71_14=caml_new_string("src/perms.ml:71:14"),
     tp_loc$9=caml_new_string("src/perms.ml.Types.Upper_bound.t"),
     cst_Who_can_write$6=caml_new_string("Who_can_write"),
     cst_Who_can_write$7=caml_new_string("Who_can_write"),
     err$3=[1,caml_new_string("src/perms.ml.Types.Upper_bound.t")],
     cst_t$21=caml_new_string("t"),
     err$2=[1,caml_new_string("src/perms.ml.Types.Read_write.t")],
     cst_Who_can_write$3=caml_new_string("Who_can_write"),
     cst_Who_can_write$4=caml_new_string("Who_can_write"),
     err$1=[1,caml_new_string("src/perms.ml.Types.Immutable.t")],
     cst_Who_can_write$0=caml_new_string("Who_can_write"),
     cst_Who_can_write$1=caml_new_string("Who_can_write"),
     err$0=[1,caml_new_string("src/perms.ml.Types.Write.t")],
     cst_Read$0=caml_new_string("Read"),
     cst_Read$1=caml_new_string("Read"),
     err=[1,caml_new_string("src/perms.ml.Types.Read.t")],
     cst_hash_called_on_the_type_t_which_is_abstract_in_an_implementation$0=
      caml_new_string
       ("hash called on the type t, which is abstract in an implementation."),
     cst_t$11=caml_new_string("t"),
     cst_src_perms_ml_Types_Me_t$1=caml_new_string("src/perms.ml.Types.Me.t"),
     cst_src_perms_ml_Types_Me_t$0=caml_new_string("src/perms.ml.Types.Me.t"),
     cst_src_perms_ml_Types_Me_t=caml_new_string("src/perms.ml.Types.Me.t"),
     cst_hash_called_on_the_type_t_which_is_abstract_in_an_implementation=
      caml_new_string
       ("hash called on the type t, which is abstract in an implementation."),
     cst_t$8=caml_new_string("t"),
     cst_src_perms_ml_Types_Nobody_t$1=
      caml_new_string("src/perms.ml.Types.Nobody.t"),
     cst_src_perms_ml_Types_Nobody_t$0=
      caml_new_string("src/perms.ml.Types.Nobody.t"),
     cst_src_perms_ml_Types_Nobody_t=
      caml_new_string("src/perms.ml.Types.Nobody.t"),
     cst_core_kernel$11=caml_new_string("core_kernel"),
     cst_src_perms_ml=caml_new_string("src/perms.ml"),
     cst$3=caml_new_string(""),
     cst_core_kernel$12=caml_new_string("core_kernel"),
     cst_t$6=caml_new_string("t"),
     cst_src_perms_ml_10_4=caml_new_string("src/perms.ml:10:4"),
     cst_t$7=caml_new_string("t"),
     tp_loc=caml_new_string("src/perms.ml.Types.Nobody.t"),
     name$0=caml_new_string("Nobody"),
     cst_t$9=caml_new_string("t"),
     cst_src_perms_ml_15_4=caml_new_string("src/perms.ml:15:4"),
     cst_t$10=caml_new_string("t"),
     tp_loc$0=caml_new_string("src/perms.ml.Types.Me.t"),
     name$1=caml_new_string("Me"),
     cst_Read=caml_new_string("Read"),
     cst_src_perms_ml_20_13=caml_new_string("src/perms.ml:20:13"),
     cst_t$12=caml_new_string("t"),
     cst_src_perms_ml_20_4=caml_new_string("src/perms.ml:20:4"),
     cst_t$13=caml_new_string("t"),
     tp_loc$1=caml_new_string("src/perms.ml.Types.Read.t"),
     tp_loc$2=caml_new_string("src/perms.ml.Types.Read.t"),
     name$2=caml_new_string("Read"),
     cst_Who_can_write=caml_new_string("Who_can_write"),
     cst_src_perms_ml_26_13=caml_new_string("src/perms.ml:26:13"),
     cst_t$14=caml_new_string("t"),
     cst_src_perms_ml_26_4=caml_new_string("src/perms.ml:26:4"),
     cst_t$15=caml_new_string("t"),
     tp_loc$3=caml_new_string("src/perms.ml.Types.Write.t"),
     tp_loc$4=caml_new_string("src/perms.ml.Types.Write.t"),
     name$3=caml_new_string("Write"),
     cst_Who_can_write$2=caml_new_string("Who_can_write"),
     cst_src_perms_ml_32_15=caml_new_string("src/perms.ml:32:15"),
     cst_src_perms_ml_32_13=caml_new_string("src/perms.ml:32:13"),
     cst_t$16=caml_new_string("t"),
     cst_src_perms_ml_32_4=caml_new_string("src/perms.ml:32:4"),
     cst_t$17=caml_new_string("t"),
     tp_loc$5=caml_new_string("src/perms.ml.Types.Immutable.t"),
     tp_loc$6=caml_new_string("src/perms.ml.Types.Immutable.t"),
     name$4=caml_new_string("Immutable"),
     cst_src_perms_ml_38_24=caml_new_string("src/perms.ml:38:24"),
     cst_src_perms_ml_38_15=caml_new_string("src/perms.ml:38:15"),
     cst_src_perms_ml_38_13=caml_new_string("src/perms.ml:38:13"),
     cst_t$18=caml_new_string("t"),
     cst_src_perms_ml_38_4=caml_new_string("src/perms.ml:38:4"),
     cst_t$19=caml_new_string("t"),
     tp_loc$7=caml_new_string("src/perms.ml.Types.Read_write.t"),
     name$5=caml_new_string("Read_write"),
     cst_a$1=caml_new_string("a"),
     cst_src_perms_ml_44_45=caml_new_string("src/perms.ml:44:45"),
     cst_Who_can_write$5=caml_new_string("Who_can_write"),
     cst_src_perms_ml_44_18=caml_new_string("src/perms.ml:44:18"),
     cst_src_perms_ml_44_16=caml_new_string("src/perms.ml:44:16"),
     cst_a$2=caml_new_string("a"),
     cst_t$20=caml_new_string("t"),
     cst_src_perms_ml_44_4=caml_new_string("src/perms.ml:44:4"),
     tp_loc$8=caml_new_string("src/perms.ml.Types.Upper_bound.t"),
     name$6=caml_new_string("Upper_bound"),
     cst_nobody=caml_new_string("nobody"),
     cst_src_perms_ml_101_4=caml_new_string("src/perms.ml:101:4"),
     cst_nobody$0=caml_new_string("nobody"),
     cst_me=caml_new_string("me"),
     cst_src_perms_ml_102_4=caml_new_string("src/perms.ml:102:4"),
     cst_me$0=caml_new_string("me"),
     cst_a$5=caml_new_string("a"),
     cst_src_perms_ml_106_18=caml_new_string("src/perms.ml:106:18"),
     cst_a$6=caml_new_string("a"),
     cst_t$26=caml_new_string("t"),
     cst_src_perms_ml_106_6=caml_new_string("src/perms.ml:106:6"),
     cst_read=caml_new_string("read"),
     cst_src_perms_ml_112_4=caml_new_string("src/perms.ml:112:4"),
     cst_read$0=caml_new_string("read"),
     cst_immutable=caml_new_string("immutable"),
     cst_src_perms_ml_114_4=caml_new_string("src/perms.ml:114:4"),
     cst_immutable$0=caml_new_string("immutable"),
     cst_read_write=caml_new_string("read_write"),
     cst_src_perms_ml_115_4=caml_new_string("src/perms.ml:115:4"),
     cst_read_write$0=caml_new_string("read_write"),
     cst_a$7=caml_new_string("a"),
     cst_src_perms_ml_116_22=caml_new_string("src/perms.ml:116:22"),
     cst_a$8=caml_new_string("a"),
     cst_perms=caml_new_string("perms"),
     cst_src_perms_ml_116_4=caml_new_string("src/perms.ml:116:4"),
     cst_core_kernel$13=caml_new_string("core_kernel"),
     cst_core_kernel$14=caml_new_string("core_kernel"),
     cst_src_binary_searchable_intf_ml=
      caml_new_string("src/binary_searchable_intf.ml"),
     cst$4=caml_new_string(""),
     cst_core_kernel$15=caml_new_string("core_kernel"),
     cst_core_kernel$16=caml_new_string("core_kernel"),
     cst_core_kernel$17=caml_new_string("core_kernel"),
     cst_src_binary_searchable_ml=caml_new_string("src/binary_searchable.ml"),
     cst$5=caml_new_string(""),
     cst_core_kernel$18=caml_new_string("core_kernel"),
     cst_core_kernel$19=caml_new_string("core_kernel"),
     cst_core_kernel$20=caml_new_string("core_kernel"),
     cst_src_blit_intf_ml=caml_new_string("src/blit_intf.ml"),
     cst$6=caml_new_string(""),
     cst_core_kernel$21=caml_new_string("core_kernel"),
     cst_core_kernel$22=caml_new_string("core_kernel"),
     cst_core_kernel$23=caml_new_string("core_kernel"),
     cst_src_blit_ml=caml_new_string("src/blit.ml"),
     cst$7=caml_new_string(""),
     cst_core_kernel$24=caml_new_string("core_kernel"),
     cst_core_kernel$25=caml_new_string("core_kernel"),
     cst_core_kernel$26=caml_new_string("core_kernel"),
     cst_src_comparator_ml=caml_new_string("src/comparator.ml"),
     cst$8=caml_new_string(""),
     cst_core_kernel$27=caml_new_string("core_kernel"),
     cst_core_kernel$28=caml_new_string("core_kernel"),
     cst_Error$0=caml_new_string("Error"),
     cst_Ok$0=caml_new_string("Ok"),
     cst_error=caml_new_string("error"),
     cst_ok=caml_new_string("ok"),
     cst_Error$1=caml_new_string("Error"),
     cst_Ok$1=caml_new_string("Ok"),
     cst_error$0=caml_new_string("error"),
     cst_ok$0=caml_new_string("ok"),
     cst_src_result_ml_Stable_V1_t=
      caml_new_string("src/result.ml.Stable.V1.t"),
     cst_t$29=caml_new_string("t"),
     cst_core_kernel$29=caml_new_string("core_kernel"),
     cst_src_result_ml=caml_new_string("src/result.ml"),
     cst$9=caml_new_string(""),
     cst_core_kernel$30=caml_new_string("core_kernel"),
     cst_b=caml_new_string("b"),
     cst_src_result_ml_9_17=caml_new_string("src/result.ml:9:17"),
     cst_Error=caml_new_string("Error"),
     cst_a$9=caml_new_string("a"),
     cst_src_result_ml_8_14=caml_new_string("src/result.ml:8:14"),
     cst_Ok=caml_new_string("Ok"),
     cst_b$0=caml_new_string("b"),
     cst_a$10=caml_new_string("a"),
     cst_t$28=caml_new_string("t"),
     cst_src_result_ml_7_4=caml_new_string("src/result.ml:7:4"),
     tp_loc$10=caml_new_string("src/result.ml.Stable.V1.t"),
     cst_t$30=caml_new_string("t"),
     cst_src_result_ml_21_4=caml_new_string("src/result.ml:21:4"),
     cst_t$31=caml_new_string("t"),
     tests=
      [0,
       [0,
        [0,caml_new_string("foo")],
        caml_new_string("(Ok foo)"),
        caml_new_string("\0\x03foo")],
       [0,
        [0,[1,7],caml_new_string("(Error 7)"),caml_new_string("\x01\x07")],
        0]],
     cst_core_kernel$31=caml_new_string("core_kernel"),
     cst_core_kernel$32=caml_new_string("core_kernel"),
     cst_src_stable_module_types_ml=
      caml_new_string("src/stable_module_types.ml"),
     cst$10=caml_new_string(""),
     cst_core_kernel$33=caml_new_string("core_kernel"),
     cst_core_kernel$34=caml_new_string("core_kernel"),
     cst_core_kernel$35=caml_new_string("core_kernel"),
     cst_src_stable_unit_test_intf_ml=
      caml_new_string("src/stable_unit_test_intf.ml"),
     cst$11=caml_new_string(""),
     cst_core_kernel$36=caml_new_string("core_kernel"),
     cst_core_kernel$37=caml_new_string("core_kernel"),
     cst_core_kernel$38=caml_new_string("core_kernel"),
     cst_src_container_intf_ml=caml_new_string("src/container_intf.ml"),
     cst$12=caml_new_string(""),
     cst_core_kernel$39=caml_new_string("core_kernel"),
     cst_core_kernel$40=caml_new_string("core_kernel"),
     cst_core_kernel$41=caml_new_string("core_kernel"),
     cst_src_container_ml=caml_new_string("src/container.ml"),
     cst$13=caml_new_string(""),
     cst_core_kernel$42=caml_new_string("core_kernel"),
     cst_core_kernel$43=caml_new_string("core_kernel"),
     cst_core_kernel$44=caml_new_string("core_kernel"),
     cst_src_deprecate_pipe_bang_ml=
      caml_new_string("src/deprecate_pipe_bang.ml"),
     cst$14=caml_new_string(""),
     cst_core_kernel$45=caml_new_string("core_kernel"),
     cst_core_kernel$46=caml_new_string("core_kernel"),
     cst_core_kernel$47=caml_new_string("core_kernel"),
     cst_src_fn_ml=caml_new_string("src/fn.ml"),
     cst$15=caml_new_string(""),
     cst_core_kernel$48=caml_new_string("core_kernel"),
     cst_core_kernel$49=caml_new_string("core_kernel"),
     cst_core_kernel$50=caml_new_string("core_kernel"),
     cst_src_ordered_collection_common_ml=
      caml_new_string("src/ordered_collection_common.ml"),
     cst$16=caml_new_string(""),
     cst_core_kernel$51=caml_new_string("core_kernel"),
     cst_core_kernel$52=caml_new_string("core_kernel"),
     pos$9=caml_new_string("src/fheap.ml:363:17"),
     pos$8=caml_new_string("src/fheap.ml:361:17"),
     pos$7=caml_new_string("src/fheap.ml:360:17"),
     pos$6=caml_new_string("src/fheap.ml:358:17"),
     pos$5=caml_new_string("src/fheap.ml:355:17"),
     data$0=[0,0,[0,1,[0,2,[0,3,[0,4,[0,5,[0,6,[0,7,0]]]]]]]],
     pos$4=caml_new_string("src/fheap.ml:348:13"),
     pos$3=caml_new_string("src/fheap.ml:347:13"),
     pos$2=caml_new_string("src/fheap.ml:339:17"),
     data=[0,0,[0,1,[0,2,[0,3,[0,4,[0,5,[0,6,[0,7,0]]]]]]]],
     pos$1=caml_new_string("src/fheap.ml:332:17"),
     pos$0=caml_new_string("src/fheap.ml:294:17"),
     pos=caml_new_string("src/fheap.ml:288:17"),
     cst_None$1=caml_new_string("None"),
     cst_None$2=caml_new_string("None"),
     cst_None=caml_new_string("None"),
     cst_None$0=caml_new_string("None"),
     cst_src_fheap_ml$0=caml_new_string("src/fheap.ml"),
     cst_loop_10_000_t=caml_new_string(": <<loop 10_000 t>>"),
     cst_src_fheap_ml$1=caml_new_string("src/fheap.ml"),
     cst_check_dual_let_sum0_check_sum_dual_in_le=
      caml_new_string
       (": <<check dual; (let sum0 = check_sum dual in  le[...]>>"),
     cst_Heap_pop_exn_called_on_an_empty_heap=
      caml_new_string("Heap.pop_exn called on an empty heap"),
     cst_Fheap_top_exn_called_on_an_empty_heap=
      caml_new_string("Fheap.top_exn called on an empty heap"),
     cst_core_kernel$53=caml_new_string("core_kernel"),
     cst_src_fheap_ml=caml_new_string("src/fheap.ml"),
     cst$17=caml_new_string(""),
     cst_core_kernel$54=caml_new_string("core_kernel"),
     cst_src_fheap_ml$2=caml_new_string("src/fheap.ml"),
     cst$18=caml_new_string(""),
     cst_src_fheap_ml$3=caml_new_string("src/fheap.ml"),
     cst_test_result_int_expect_0_top_value_l=
      caml_new_string
       (": <<([%test_result :int]) ~expect:0 top_value; (l[...]>>"),
     cst_src_fheap_ml$4=caml_new_string("src/fheap.ml"),
     cst_test_result_int_expect_28_s_let_t=
      caml_new_string
       (": <<([%test_result :int]) ~expect:28 s; (let t = [...]>>"),
     cst_core_kernel$55=caml_new_string("core_kernel"),
     cst_src_sequence_ml_Merge_with_duplicates_element_t=
      caml_new_string("src/sequence.ml.Merge_with_duplicates_element.t"),
     cst_t$33=caml_new_string("t"),
     cst_core_kernel$56=caml_new_string("core_kernel"),
     cst_src_sequence_ml=caml_new_string("src/sequence.ml"),
     cst$19=caml_new_string(""),
     cst_core_kernel$57=caml_new_string("core_kernel"),
     cst_b$1=caml_new_string("b"),
     cst_src_sequence_ml_7_19=caml_new_string("src/sequence.ml:7:19"),
     cst_a$11=caml_new_string("a"),
     cst_src_sequence_ml_7_14=caml_new_string("src/sequence.ml:7:14"),
     cst_Both=caml_new_string("Both"),
     cst_b$2=caml_new_string("b"),
     cst_src_sequence_ml_6_15=caml_new_string("src/sequence.ml:6:15"),
     cst_Right=caml_new_string("Right"),
     cst_a$12=caml_new_string("a"),
     cst_src_sequence_ml_5_14=caml_new_string("src/sequence.ml:5:14"),
     cst_Left=caml_new_string("Left"),
     cst_b$3=caml_new_string("b"),
     cst_a$13=caml_new_string("a"),
     cst_t$32=caml_new_string("t"),
     cst_src_sequence_ml_4_2=caml_new_string("src/sequence.ml:4:2"),
     cst_core_kernel$58=caml_new_string("core_kernel"),
     cst_t$45=caml_new_string("t"),
     cst_t$43=caml_new_string("t"),
     cst_t$41=caml_new_string("t"),
     cst_t$35=caml_new_string("t"),
     cst_core_kernel$59=caml_new_string("core_kernel"),
     cst_src_array_ml=caml_new_string("src/array.ml"),
     cst$20=caml_new_string(""),
     cst_core_kernel$60=caml_new_string("core_kernel"),
     cst_a$14=caml_new_string("a"),
     cst_src_array_ml_6_12=caml_new_string("src/array.ml:6:12"),
     cst_a$15=caml_new_string("a"),
     cst_t$34=caml_new_string("t"),
     cst_src_array_ml_6_0=caml_new_string("src/array.ml:6:0"),
     name$7=caml_new_string("src/array.ml.t"),
     cst_t$36=caml_new_string("t_"),
     cst_src_array_ml_42_4=caml_new_string("src/array.ml:42:4"),
     cst_t$37=caml_new_string("t_"),
     cst_t$38=caml_new_string("t_"),
     cst_src_array_ml_71_4=caml_new_string("src/array.ml:71:4"),
     cst_t$39=caml_new_string("t_"),
     cst_a$16=caml_new_string("a"),
     cst_src_array_ml_286_25=caml_new_string("src/array.ml:286:25"),
     cst_perms$1=caml_new_string("perms"),
     cst_a$17=caml_new_string("a"),
     cst_t$40=caml_new_string("t"),
     cst_src_array_ml_286_2=caml_new_string("src/array.ml:286:2"),
     name$8=caml_new_string("src/array.ml.Permissioned.t"),
     cst_perms$2=caml_new_string("perms"),
     cst_t$42=caml_new_string("t"),
     cst_src_array_ml_291_4=caml_new_string("src/array.ml:291:4"),
     cst_perms$3=caml_new_string("perms"),
     cst_t$44=caml_new_string("t"),
     cst_src_array_ml_297_4=caml_new_string("src/array.ml:297:4"),
     cst_t$46=caml_new_string("t"),
     cst_src_array_ml_410_2=caml_new_string("src/array.ml:410:2"),
     cst_t$47=caml_new_string("t"),
     cst_t$48=caml_new_string("t"),
     cst_src_array_ml_415_2=caml_new_string("src/array.ml:415:2"),
     cst_t$49=caml_new_string("t"),
     cst_core_kernel$61=caml_new_string("core_kernel"),
     cst_core_kernel$62=caml_new_string("core_kernel"),
     cst_src_info_intf_ml=caml_new_string("src/info_intf.ml"),
     cst$21=caml_new_string(""),
     cst_core_kernel$63=caml_new_string("core_kernel"),
     cst_core_kernel$64=caml_new_string("core_kernel"),
     cst_pos_bol$0=caml_new_string("pos_bol"),
     cst_pos_cnum$0=caml_new_string("pos_cnum"),
     cst_pos_fname$0=caml_new_string("pos_fname"),
     cst_pos_lnum$0=caml_new_string("pos_lnum"),
     cst_pos_cnum$1=caml_new_string("pos_cnum"),
     cst_pos_bol$1=caml_new_string("pos_bol"),
     cst_pos_lnum$1=caml_new_string("pos_lnum"),
     cst_pos_fname$1=caml_new_string("pos_fname"),
     cst_src_source_code_position0_ml_Stable_V1_t=
      caml_new_string("src/source_code_position0.ml.Stable.V1.t"),
     cst_core_kernel$65=caml_new_string("core_kernel"),
     cst_src_source_code_position0_ml=
      caml_new_string("src/source_code_position0.ml"),
     cst$22=caml_new_string(""),
     cst_core_kernel$66=caml_new_string("core_kernel"),
     cst_pos_cnum=caml_new_string("pos_cnum"),
     cst_pos_bol=caml_new_string("pos_bol"),
     cst_pos_lnum=caml_new_string("pos_lnum"),
     cst_pos_fname=caml_new_string("pos_fname"),
     cst_t$50=caml_new_string("t"),
     cst_src_source_code_position0_ml_5_4=
      caml_new_string("src/source_code_position0.ml:5:4"),
     cst_t$51=caml_new_string("t"),
     tp_loc$11=caml_new_string("src/source_code_position0.ml.Stable.V1.t"),
     cst_core_kernel$67=caml_new_string("core_kernel"),
     cst_src_info_ml_Extend_Internal_repr_Stable_V2_t=
      caml_new_string("src/info.ml.Extend.Internal_repr.Stable.V2.t"),
     cst_t$55=caml_new_string("t"),
     cst_src_info_ml_48_10=caml_new_string("src/info.ml:48:10"),
     cst_t$56=caml_new_string("t"),
     cst_t$57=caml_new_string("t"),
     cst_With_backtrace=caml_new_string("With_backtrace"),
     cst_t$58=caml_new_string("t"),
     cst_Of_list=caml_new_string("Of_list"),
     cst_t$59=caml_new_string("t"),
     cst_Tag_arg=caml_new_string("Tag_arg"),
     cst_t$60=caml_new_string("t"),
     cst_Tag_t=caml_new_string("Tag_t"),
     cst_Tag_sexp=caml_new_string("Tag_sexp"),
     cst_Sexp=caml_new_string("Sexp"),
     cst_Exn=caml_new_string("Exn"),
     cst_String=caml_new_string("String"),
     cst_Could_not_construct=caml_new_string("Could_not_construct"),
     cst_t$61=caml_new_string("t"),
     cst_src_info_ml_58_8=caml_new_string("src/info.ml:58:8"),
     cst_t$62=caml_new_string("t"),
     cst_t$63=caml_new_string("t"),
     cst_src_info_ml_116_2=caml_new_string("src/info.ml:116:2"),
     cst_t$64=caml_new_string("t"),
     cst_src_info_ml_Sexp_t=caml_new_string("src/info.ml.Sexp.t"),
     cst_core_kernel$68=caml_new_string("core_kernel"),
     cst_src_info_ml=caml_new_string("src/info.ml"),
     cst$23=caml_new_string(""),
     cst_core_kernel$69=caml_new_string("core_kernel"),
     cst_t$52=caml_new_string("t"),
     cst_List$0=caml_new_string("List"),
     cst_Atom$0=caml_new_string("Atom"),
     cst_t$53=caml_new_string("t"),
     cst_src_info_ml_17_4=caml_new_string("src/info.ml:17:4"),
     cst_t$54=caml_new_string("t"),
     cst_core_kernel$70=caml_new_string("core_kernel"),
     cst_core_kernel$71=caml_new_string("core_kernel"),
     cst_src_error_ml=caml_new_string("src/error.ml"),
     cst$24=caml_new_string(""),
     cst_core_kernel$72=caml_new_string("core_kernel"),
     cst_core_kernel$73=caml_new_string("core_kernel"),
     cst_t$70=caml_new_string("t"),
     cst_t$68=caml_new_string("t"),
     cst_t$66=caml_new_string("t"),
     cst_core_kernel$74=caml_new_string("core_kernel"),
     cst_src_or_error_ml=caml_new_string("src/or_error.ml"),
     cst$25=caml_new_string(""),
     cst_core_kernel$75=caml_new_string("core_kernel"),
     cst_a$18=caml_new_string("a"),
     cst_src_or_error_ml_3_13=caml_new_string("src/or_error.ml:3:13"),
     cst_a$19=caml_new_string("a"),
     cst_t$65=caml_new_string("t"),
     cst_src_or_error_ml_3_0=caml_new_string("src/or_error.ml:3:0"),
     cst_a$20=caml_new_string("a"),
     cst_src_or_error_ml_10_17=caml_new_string("src/or_error.ml:10:17"),
     cst_a$21=caml_new_string("a"),
     cst_t$67=caml_new_string("t"),
     cst_src_or_error_ml_10_4=caml_new_string("src/or_error.ml:10:4"),
     cst_a$22=caml_new_string("a"),
     cst_src_or_error_ml_16_17=caml_new_string("src/or_error.ml:16:17"),
     cst_a$23=caml_new_string("a"),
     cst_t$69=caml_new_string("t"),
     cst_src_or_error_ml_16_4=caml_new_string("src/or_error.ml:16:4"),
     cst_core_kernel$76=caml_new_string("core_kernel"),
     cst_core_kernel$77=caml_new_string("core_kernel"),
     cst_src_quickcheck_intf_ml=caml_new_string("src/quickcheck_intf.ml"),
     cst$26=caml_new_string(""),
     cst_core_kernel$78=caml_new_string("core_kernel"),
     cst_core_kernel$79=caml_new_string("core_kernel"),
     cst_cannot_generate=caml_new_string("cannot generate"),
     cst_cannot_generate$0=caml_new_string("cannot generate"),
     cst_insufficient_distinct_values=
      caml_new_string("insufficient distinct values"),
     cst_random_input$0=caml_new_string("random input"),
     cst_shrunk_random_input=caml_new_string("shrunk random input"),
     cst_random_input=caml_new_string("random input"),
     cst_Quickcheck_sizes_argument_ran_out_of_values=
      caml_new_string("Quickcheck: [~sizes] argument ran out of values"),
     pos$39=caml_new_string("src/quickcheck.ml:1058:23"),
     pos$38=caml_new_string("src/quickcheck.ml:1056:23"),
     pos$37=caml_new_string("src/quickcheck.ml:1054:23"),
     pos$36=caml_new_string("src/quickcheck.ml:1052:23"),
     pos$35=caml_new_string("src/quickcheck.ml:1050:23"),
     pos$34=caml_new_string("src/quickcheck.ml:1048:23"),
     expect$14=[0,[0,65,0],0],
     expect$15=[0,[0,66,1],0],
     expect$16=[0,[0,67,2],0],
     expect$17=[0,[0,68,3],0],
     expect$18=[0,[0,69,4],0],
     expect$19=[0,[0,70,5],0],
     pos$33=caml_new_string("src/quickcheck.ml:1043:23"),
     pos$32=caml_new_string("src/quickcheck.ml:1041:23"),
     pos$31=caml_new_string("src/quickcheck.ml:1039:23"),
     pos$30=caml_new_string("src/quickcheck.ml:1037:23"),
     pos$29=caml_new_string("src/quickcheck.ml:1035:23"),
     expect$9=[0,[0,65,0],0],
     expect$10=[0,[0,66,1],0],
     expect$11=[0,[0,67,2],0],
     expect$12=[0,[0,68,3],0],
     expect$13=[0,[0,69,4],0],
     pos$28=caml_new_string("src/quickcheck.ml:1030:23"),
     pos$27=caml_new_string("src/quickcheck.ml:1028:23"),
     pos$26=caml_new_string("src/quickcheck.ml:1026:23"),
     pos$25=caml_new_string("src/quickcheck.ml:1024:23"),
     expect$5=[0,[0,65,0],0],
     expect$6=[0,[0,66,1],0],
     expect$7=[0,[0,67,2],0],
     expect$8=[0,[0,68,3],0],
     pos$24=caml_new_string("src/quickcheck.ml:1019:23"),
     pos$23=caml_new_string("src/quickcheck.ml:1017:23"),
     pos$22=caml_new_string("src/quickcheck.ml:1015:23"),
     expect$2=[0,[0,65,0],0],
     expect$3=[0,[0,66,1],0],
     expect$4=[0,[0,67,2],0],
     pos$21=caml_new_string("src/quickcheck.ml:1010:23"),
     pos$20=caml_new_string("src/quickcheck.ml:1008:23"),
     expect$0=[0,[0,65,0],0],
     expect$1=[0,[0,66,1],0],
     cst_src_quickcheck_ml$13=caml_new_string("src/quickcheck.ml"),
     cst_variant2_shrinker=caml_new_string(": variant2 shrinker"),
     cst_src_quickcheck_ml$14=caml_new_string("src/quickcheck.ml"),
     cst_variant3_shrinker=caml_new_string(": variant3 shrinker"),
     cst_src_quickcheck_ml$15=caml_new_string("src/quickcheck.ml"),
     cst_variant4_shrinker=caml_new_string(": variant4 shrinker"),
     cst_src_quickcheck_ml$16=caml_new_string("src/quickcheck.ml"),
     cst_variant5_shrinker=caml_new_string(": variant5 shrinker"),
     cst_src_quickcheck_ml$17=caml_new_string("src/quickcheck.ml"),
     cst_variant6_shrinker=caml_new_string(": variant6 shrinker"),
     pos$19=caml_new_string("src/quickcheck.ml:939:23"),
     pos$18=caml_new_string("src/quickcheck.ml:921:23"),
     pos$17=caml_new_string("src/quickcheck.ml:909:23"),
     pos$16=caml_new_string("src/quickcheck.ml:897:23"),
     pos$15=caml_new_string("src/quickcheck.ml:888:23"),
     cst_src_quickcheck_ml$7=caml_new_string("src/quickcheck.ml"),
     cst_tuple2_shrinker=caml_new_string(": tuple2 shrinker"),
     cst_src_quickcheck_ml$8=caml_new_string("src/quickcheck.ml"),
     cst_tuple3_shrinker=caml_new_string(": tuple3 shrinker"),
     cst_src_quickcheck_ml$9=caml_new_string("src/quickcheck.ml"),
     cst_tuple4_shrinker=caml_new_string(": tuple4 shrinker"),
     cst_src_quickcheck_ml$10=caml_new_string("src/quickcheck.ml"),
     cst_tuple5_shrinker=caml_new_string(": tuple5 shrinker"),
     cst_src_quickcheck_ml$11=caml_new_string("src/quickcheck.ml"),
     cst_tuple6_shrinker=caml_new_string(": tuple6 shrinker"),
     pos$14=caml_new_string("src/quickcheck.ml:812:25"),
     pos$13=caml_new_string("src/quickcheck.ml:807:25"),
     expect=[0,42,0],
     cst_src_quickcheck_ml$4=caml_new_string("src/quickcheck.ml"),
     cst_singleton_produces_values=
      caml_new_string(": singleton produces values"),
     cst_src_quickcheck_ml$5=caml_new_string("src/quickcheck.ml"),
     cst_singleton_doesn_t_produce_the_input=
      caml_new_string(": singleton doesn't produce the input"),
     cst_Quickcheck_Make_int_gen_log_uniform_incl=
      caml_new_string("Quickcheck.Make_int().gen_log_uniform_incl"),
     cst_Quickcheck_Make_int_gen_uniform_incl=
      caml_new_string("Quickcheck.Make_int().gen_uniform_incl"),
     cst_Generator_of_sequence_ran_out_of_values=
      caml_new_string("Generator.of_sequence: ran out of values"),
     cst_Quickcheck_Generator_weighted_union_empty_list=
      caml_new_string("Quickcheck.Generator.weighted_union: empty list"),
     cst_Quickcheck_Observer_of_list_value_not_found=
      caml_new_string("Quickcheck.Observer.of_list: value not found"),
     cst_Quickcheck_Observer_observe=
      caml_new_string("Quickcheck.Observer.observe"),
     cst_Quickcheck_Generator_generate=
      caml_new_string("Quickcheck.Generator.generate"),
     pos$12=caml_new_string("src/quickcheck.ml:126:41"),
     pos$11=caml_new_string("src/quickcheck.ml:115:41"),
     pos$10=caml_new_string("src/quickcheck.ml:100:41"),
     cst_src_quickcheck_ml$0=caml_new_string("src/quickcheck.ml"),
     cst_bits_to_represent=caml_new_string(": bits_to_represent"),
     cst_src_quickcheck_ml$1=caml_new_string("src/quickcheck.ml"),
     cst_min_represented_by_n_bits=
      caml_new_string(": min_represented_by_n_bits"),
     cst_src_quickcheck_ml$2=caml_new_string("src/quickcheck.ml"),
     cst_max_represented_by_n_bits=
      caml_new_string(": max_represented_by_n_bits"),
     cst_invalid_bounds=caml_new_string("invalid bounds"),
     cst_size_is_negative=caml_new_string("size is negative"),
     cst_core_kernel$80=caml_new_string("core_kernel"),
     cst_src_quickcheck_ml=caml_new_string("src/quickcheck.ml"),
     cst$27=caml_new_string(""),
     cst_core_kernel$81=caml_new_string("core_kernel"),
     cst_src_quickcheck_ml$3=caml_new_string("src/quickcheck.ml"),
     cst_Make_int_random_bitwise_helpers=
      caml_new_string(": Make_int_random bitwise helpers"),
     cst_src_quickcheck_ml$6=caml_new_string("src/quickcheck.ml"),
     cst_singleton=caml_new_string(": singleton"),
     cst_src_quickcheck_ml$12=caml_new_string("src/quickcheck.ml"),
     cst_tuple_shrinkers=caml_new_string(": tuple shrinkers"),
     cst_src_quickcheck_ml$18=caml_new_string("src/quickcheck.ml"),
     cst_variant_shrinkers=caml_new_string(": variant shrinkers"),
     default_seed=
      [0,-825553486,caml_new_string("an arbitrary but deterministic string")],
     default_shrink_attempts=[0,137269019,1e3],
     cst_core_kernel$82=caml_new_string("core_kernel"),
     cst_First$2=caml_new_string("First"),
     cst_Second$2=caml_new_string("Second"),
     cst_First$0=caml_new_string("First"),
     cst_Second$0=caml_new_string("Second"),
     cst_first=caml_new_string("first"),
     cst_second=caml_new_string("second"),
     cst_First$1=caml_new_string("First"),
     cst_Second$1=caml_new_string("Second"),
     cst_first$0=caml_new_string("first"),
     cst_second$0=caml_new_string("second"),
     cst_src_either_ml_Stable_V1_t=
      caml_new_string("src/either.ml.Stable.V1.t"),
     cst_t$72=caml_new_string("t"),
     cst_core_kernel$83=caml_new_string("core_kernel"),
     cst_src_either_ml=caml_new_string("src/either.ml"),
     cst$28=caml_new_string(""),
     cst_core_kernel$84=caml_new_string("core_kernel"),
     cst_s=caml_new_string("s"),
     cst_src_either_ml_5_18=caml_new_string("src/either.ml:5:18"),
     cst_Second=caml_new_string("Second"),
     cst_f=caml_new_string("f"),
     cst_src_either_ml_4_18=caml_new_string("src/either.ml:4:18"),
     cst_First=caml_new_string("First"),
     cst_s$0=caml_new_string("s"),
     cst_f$0=caml_new_string("f"),
     cst_t$71=caml_new_string("t"),
     cst_src_either_ml_3_4=caml_new_string("src/either.ml:3:4"),
     tp_loc$12=caml_new_string("src/either.ml.Stable.V1.t"),
     name$9=caml_new_string("src/either.ml.Stable.V1.t"),
     cst_core_kernel$85=caml_new_string("core_kernel"),
     cst_core_kernel$86=caml_new_string("core_kernel"),
     cst_src_hashtbl_intf_ml=caml_new_string("src/hashtbl_intf.ml"),
     cst$29=caml_new_string(""),
     cst_core_kernel$87=caml_new_string("core_kernel"),
     cst_core_kernel$88=caml_new_string("core_kernel"),
     cst_core_kernel$89=caml_new_string("core_kernel"),
     cst_src_hash_set_intf_ml=caml_new_string("src/hash_set_intf.ml"),
     cst$30=caml_new_string(""),
     cst_core_kernel$90=caml_new_string("core_kernel"),
     cst_core_kernel$91=caml_new_string("core_kernel"),
     pos$41=caml_new_string("src/list0.ml:111:23"),
     pos$40=caml_new_string("src/list0.ml:104:23"),
     test_list=[0,1,[0,2,[0,3,0]]],
     cst_src_list0_ml$0=caml_new_string("src/list0.ml"),
     cst_shrinker_produces_expected_outputs=
      caml_new_string(": shrinker produces expected outputs"),
     cst_src_list0_ml$1=caml_new_string("src/list0.ml"),
     cst_shrinker_on_infinite_lists_produces_values=
      caml_new_string(": shrinker on infinite lists produces values"),
     cst_t$76=caml_new_string("t"),
     cst_t$74=caml_new_string("t"),
     cst_core_kernel$92=caml_new_string("core_kernel"),
     cst_src_list0_ml=caml_new_string("src/list0.ml"),
     cst$31=caml_new_string(""),
     cst_core_kernel$93=caml_new_string("core_kernel"),
     cst_a$24=caml_new_string("a"),
     cst_src_list0_ml_7_12=caml_new_string("src/list0.ml:7:12"),
     cst_a$25=caml_new_string("a"),
     cst_t$73=caml_new_string("t"),
     cst_src_list0_ml_7_0=caml_new_string("src/list0.ml:7:0"),
     name$10=caml_new_string("src/list0.ml.t"),
     cst_b$4=caml_new_string("b"),
     cst_src_list0_ml_10_26=caml_new_string("src/list0.ml:10:26"),
     cst_a$26=caml_new_string("a"),
     cst_src_list0_ml_10_21=caml_new_string("src/list0.ml:10:21"),
     cst_b$5=caml_new_string("b"),
     cst_a$27=caml_new_string("a"),
     cst_t$75=caml_new_string("t"),
     cst_src_list0_ml_10_2=caml_new_string("src/list0.ml:10:2"),
     cst_src_list0_ml$2=caml_new_string("src/list0.ml"),
     cst_shrinker=caml_new_string(": shrinker"),
     cst_core_kernel$94=caml_new_string("core_kernel"),
     tp_loc$13=caml_new_string("src/hashtbl.ml line 183: (int * unit) list"),
     cst_t$77=caml_new_string("t"),
     cst_src_hashtbl_ml_167_6=caml_new_string("src/hashtbl.ml:167:6"),
     cst_t$78=caml_new_string("t"),
     cst_Hashtbl_bin_read_t_duplicate_key=
      caml_new_string("Hashtbl.bin_read_t: duplicate key"),
     cst_el$2=caml_new_string("el"),
     cst_a$30=caml_new_string("a"),
     cst_src_hashtbl_ml_123_27=caml_new_string("src/hashtbl.ml:123:27"),
     cst_a$31=caml_new_string("a"),
     cst_el$1=caml_new_string("el"),
     cst_src_hashtbl_ml_123_6=caml_new_string("src/hashtbl.ml:123:6"),
     cst_8fabab0a_4992_11e6_8cca_9ba2c4686d9e=
      caml_new_string("8fabab0a-4992-11e6-8cca-9ba2c4686d9e"),
     module_name$0=[0,caml_new_string("Core_kernel.Hashtbl")],
     cst_Core_hashtbl_bin_read_t_duplicate_key=
      caml_new_string("Core_hashtbl.bin_read_t_: duplicate key"),
     cst_el$0=caml_new_string("el"),
     cst_core_kernel$95=caml_new_string("core_kernel"),
     cst_src_hashtbl_ml=caml_new_string("src/hashtbl.ml"),
     cst$32=caml_new_string(""),
     cst_core_kernel$96=caml_new_string("core_kernel"),
     cst_b$6=caml_new_string("b"),
     cst_src_hashtbl_ml_59_30=caml_new_string("src/hashtbl.ml:59:30"),
     cst_a$28=caml_new_string("a"),
     cst_src_hashtbl_ml_59_25=caml_new_string("src/hashtbl.ml:59:25"),
     cst_b$7=caml_new_string("b"),
     cst_a$29=caml_new_string("a"),
     cst_el=caml_new_string("el"),
     cst_src_hashtbl_ml_59_6=caml_new_string("src/hashtbl.ml:59:6"),
     cst_8f3e445c_4992_11e6_a279_3703be311e7b=
      caml_new_string("8f3e445c-4992-11e6-a279-3703be311e7b"),
     module_name=[0,caml_new_string("Core_kernel.Hashtbl")],
     cst_src_hashtbl_ml$0=caml_new_string("src/hashtbl.ml"),
     cst_for_key_10_to_10_do_Table_add_exn_t_key=
      caml_new_string
       (": <<for key = (-10) to 10 do Table.add_exn t ~key[...]>>"),
     cst_core_kernel$97=caml_new_string("core_kernel"),
     cst_el$3=caml_new_string("el"),
     cst_src_hash_set_ml_35_6=caml_new_string("src/hash_set.ml:35:6"),
     cst_el$4=caml_new_string("el"),
     cst_ad381672_4992_11e6_9e36_b76dc8cd466f=
      caml_new_string("ad381672-4992-11e6-9e36-b76dc8cd466f"),
     module_name$1=[0,caml_new_string("Core_kernel.Hash_set")],
     cst_core_kernel$98=caml_new_string("core_kernel"),
     cst_src_hash_set_ml=caml_new_string("src/hash_set.ml"),
     cst$33=caml_new_string(""),
     cst_core_kernel$99=caml_new_string("core_kernel"),
     cst_core_kernel$100=caml_new_string("core_kernel"),
     cst_core_kernel$101=caml_new_string("core_kernel"),
     cst_src_t_ml=caml_new_string("src/t.ml"),
     cst$34=caml_new_string(""),
     cst_core_kernel$102=caml_new_string("core_kernel"),
     cst_core_kernel$103=caml_new_string("core_kernel"),
     cst_Left$1=caml_new_string("Left"),
     cst_Right$1=caml_new_string("Right"),
     cst_Unequal$0=caml_new_string("Unequal"),
     cst_Left$2=caml_new_string("Left"),
     cst_Right$2=caml_new_string("Right"),
     cst_Unequal$1=caml_new_string("Unequal"),
     cst_src_map_intf_ml_Symmetric_diff_element_t$0=
      caml_new_string("src/map_intf.ml.Symmetric_diff_element.t"),
     cst_src_map_intf_ml_Symmetric_diff_element_t=
      caml_new_string("src/map_intf.ml.Symmetric_diff_element.t"),
     cst_t$80=caml_new_string("t"),
     cst_core_kernel$104=caml_new_string("core_kernel"),
     cst_src_map_intf_ml=caml_new_string("src/map_intf.ml"),
     cst$35=caml_new_string(""),
     cst_core_kernel$105=caml_new_string("core_kernel"),
     cst_v=caml_new_string("v"),
     cst_src_map_intf_ml_51_73=caml_new_string("src/map_intf.ml:51:73"),
     cst_v$0=caml_new_string("v"),
     cst_src_map_intf_ml_51_68=caml_new_string("src/map_intf.ml:51:68"),
     cst_Unequal=caml_new_string("Unequal"),
     cst_v$1=caml_new_string("v"),
     cst_src_map_intf_ml_51_51=caml_new_string("src/map_intf.ml:51:51"),
     cst_Right$0=caml_new_string("Right"),
     cst_v$2=caml_new_string("v"),
     cst_src_map_intf_ml_51_36=caml_new_string("src/map_intf.ml:51:36"),
     cst_Left$0=caml_new_string("Left"),
     cst_src_map_intf_ml_51_25=caml_new_string("src/map_intf.ml:51:25"),
     cst_k=caml_new_string("k"),
     cst_src_map_intf_ml_51_20=caml_new_string("src/map_intf.ml:51:20"),
     cst_v$3=caml_new_string("v"),
     cst_k$0=caml_new_string("k"),
     cst_t$79=caml_new_string("t"),
     cst_src_map_intf_ml_51_2=caml_new_string("src/map_intf.ml:51:2"),
     tp_loc$14=caml_new_string("src/map_intf.ml.Symmetric_diff_element.t"),
     cst_core_kernel$106=caml_new_string("core_kernel"),
     cst_el$8=caml_new_string("el"),
     cst_v$4=caml_new_string("v"),
     cst_src_map_ml_407_27=caml_new_string("src/map.ml:407:27"),
     cst_v$5=caml_new_string("v"),
     cst_el$7=caml_new_string("el"),
     cst_src_map_ml_407_6=caml_new_string("src/map.ml:407:6"),
     cst_dfb300f8_4992_11e6_9c15_73a2ac6b815c=
      caml_new_string("dfb300f8-4992-11e6-9c15-73a2ac6b815c"),
     module_name$3=[0,caml_new_string("Core_kernel.Map")],
     cst_el$6=caml_new_string("el"),
     cst_Map_bin_read_t_duplicate_element_in_map=
      caml_new_string("Map.bin_read_t: duplicate element in map"),
     cst_key_not_found=caml_new_string("key not found"),
     cst_Map_of_hashtbl_exn_duplicate_key=
      caml_new_string("Map.of_hashtbl_exn: duplicate key"),
     cst_core_kernel$107=caml_new_string("core_kernel"),
     cst_src_map_ml=caml_new_string("src/map.ml"),
     cst$36=caml_new_string(""),
     cst_core_kernel$108=caml_new_string("core_kernel"),
     cst_b$8=caml_new_string("b"),
     cst_src_map_ml_342_30=caml_new_string("src/map.ml:342:30"),
     cst_a$32=caml_new_string("a"),
     cst_src_map_ml_342_25=caml_new_string("src/map.ml:342:25"),
     cst_b$9=caml_new_string("b"),
     cst_a$33=caml_new_string("a"),
     cst_el$5=caml_new_string("el"),
     cst_src_map_ml_342_6=caml_new_string("src/map.ml:342:6"),
     cst_b7d7b1a0_4992_11e6_8a32_bbb221fa025c=
      caml_new_string("b7d7b1a0-4992-11e6-8a32-bbb221fa025c"),
     module_name$2=[0,caml_new_string("Core_kernel.Map")],
     cst_core_kernel$109=caml_new_string("core_kernel"),
     cst_Excl$0=caml_new_string("Excl"),
     cst_Incl$0=caml_new_string("Incl"),
     cst_Unbounded=caml_new_string("Unbounded"),
     cst_excl=caml_new_string("excl"),
     cst_incl=caml_new_string("incl"),
     cst_unbounded=caml_new_string("unbounded"),
     cst_Excl$1=caml_new_string("Excl"),
     cst_Incl$1=caml_new_string("Incl"),
     cst_Unbounded$0=caml_new_string("Unbounded"),
     cst_excl$0=caml_new_string("excl"),
     cst_incl$0=caml_new_string("incl"),
     cst_unbounded$0=caml_new_string("unbounded"),
     cst_src_maybe_bound_ml_Stable_V1_t=
      caml_new_string("src/maybe_bound.ml.Stable.V1.t"),
     cst_t$82=caml_new_string("t"),
     cst_core_kernel$110=caml_new_string("core_kernel"),
     cst_src_maybe_bound_ml=caml_new_string("src/maybe_bound.ml"),
     cst$37=caml_new_string(""),
     cst_core_kernel$111=caml_new_string("core_kernel"),
     cst_a$34=caml_new_string("a"),
     cst_src_maybe_bound_ml_5_61=caml_new_string("src/maybe_bound.ml:5:61"),
     cst_Excl=caml_new_string("Excl"),
     cst_a$35=caml_new_string("a"),
     cst_src_maybe_bound_ml_5_48=caml_new_string("src/maybe_bound.ml:5:48"),
     cst_Incl=caml_new_string("Incl"),
     cst_a$36=caml_new_string("a"),
     cst_t$81=caml_new_string("t"),
     cst_src_maybe_bound_ml_5_4=caml_new_string("src/maybe_bound.ml:5:4"),
     tp_loc$15=caml_new_string("src/maybe_bound.ml.Stable.V1.t"),
     cst_core_kernel$112=caml_new_string("core_kernel"),
     cst_core_kernel$113=caml_new_string("core_kernel"),
     cst_src_quickcheckable_ml=caml_new_string("src/quickcheckable.ml"),
     cst$38=caml_new_string(""),
     cst_core_kernel$114=caml_new_string("core_kernel"),
     cst_core_kernel$115=caml_new_string("core_kernel"),
     cst_core_kernel$116=caml_new_string("core_kernel"),
     cst_src_set_intf_ml=caml_new_string("src/set_intf.ml"),
     cst$39=caml_new_string(""),
     cst_core_kernel$117=caml_new_string("core_kernel"),
     cst_core_kernel$118=caml_new_string("core_kernel"),
     cst_el$11=caml_new_string("el"),
     cst_src_set_ml_436_6=caml_new_string("src/set.ml:436:6"),
     cst_el$12=caml_new_string("el"),
     cst_8989278e_4992_11e6_8f4a_6b89776b1e53=
      caml_new_string("8989278e-4992-11e6-8f4a-6b89776b1e53"),
     module_name$5=[0,caml_new_string("Core_kernel.Set")],
     cst_src_set_ml$0=caml_new_string("src/set.ml"),
     cst_stable_dedup_list=
      caml_new_string(": <<(stable_dedup_list []) = []>>"),
     cst_src_set_ml$1=caml_new_string("src/set.ml"),
     cst_stable_dedup_list_5_5_5_5_5_5=
      caml_new_string(": <<(stable_dedup_list [5; 5; 5; 5; 5]) = [5]>>"),
     cst_src_set_ml$2=caml_new_string("src/set.ml"),
     cst_stable_dedup_list_5_9_3_5_2_2_5=
      caml_new_string
       (": <<(stable_dedup_list [5; 9; 3; 5; 2; 2]) = [5; [...]>>"),
     cst_el$10=caml_new_string("el"),
     cst_Set_bin_read_t_duplicate_element_in_map=
      caml_new_string("Set.bin_read_t: duplicate element in map"),
     cst_core_kernel$119=caml_new_string("core_kernel"),
     cst_src_set_ml=caml_new_string("src/set.ml"),
     cst$40=caml_new_string(""),
     cst_core_kernel$120=caml_new_string("core_kernel"),
     cst_a$37=caml_new_string("a"),
     cst_src_set_ml_360_19=caml_new_string("src/set.ml:360:19"),
     cst_a$38=caml_new_string("a"),
     cst_el$9=caml_new_string("el"),
     cst_src_set_ml_360_6=caml_new_string("src/set.ml:360:6"),
     cst_88bcc478_4992_11e6_a95d_ff4831acf410=
      caml_new_string("88bcc478-4992-11e6-a95d-ff4831acf410"),
     module_name$4=[0,caml_new_string("Core_kernel.Set")],
     cst_src_set_ml$3=caml_new_string("src/set.ml"),
     cst$41=caml_new_string(""),
     cst_core_kernel$121=caml_new_string("core_kernel"),
     cst_core_kernel$122=caml_new_string("core_kernel"),
     cst_src_comparable_intf_ml=caml_new_string("src/comparable_intf.ml"),
     cst$42=caml_new_string(""),
     cst_core_kernel$123=caml_new_string("core_kernel"),
     cst_core_kernel$124=caml_new_string("core_kernel"),
     cst_core_kernel$125=caml_new_string("core_kernel"),
     cst_src_comparable_ml=caml_new_string("src/comparable.ml"),
     cst$43=caml_new_string(""),
     cst_core_kernel$126=caml_new_string("core_kernel"),
     cst_core_kernel$127=caml_new_string("core_kernel"),
     cst_exn_if_dup=caml_new_string("exn_if_dup"),
     cst_core_kernel$128=caml_new_string("core_kernel"),
     cst_src_list_ml=caml_new_string("src/list.ml"),
     cst$44=caml_new_string(""),
     cst_core_kernel$129=caml_new_string("core_kernel"),
     cst_Core_kernel_List_Duplicate_found=
      caml_new_string("Core_kernel__List.Duplicate_found"),
     cst_core_kernel$130=caml_new_string("core_kernel"),
     pos$43=caml_new_string("src/option.ml:64:23"),
     pos$42=caml_new_string("src/option.ml:49:23"),
     cst_src_option_ml$0=caml_new_string("src/option.ml"),
     cst_test_result_int_option_list_Sequence=
      caml_new_string
       (": <<([%test_result :int option list])   (Sequence[...]>>"),
     cst_src_option_ml$1=caml_new_string("src/option.ml"),
     cst_test_result_int_option_list_expect_results=
      caml_new_string
       (": <<([%test_result :int option list]) ~expect results>>"),
     cst_t$84=caml_new_string("t"),
     cst_core_kernel$131=caml_new_string("core_kernel"),
     cst_src_option_ml=caml_new_string("src/option.ml"),
     cst$45=caml_new_string(""),
     cst_core_kernel$132=caml_new_string("core_kernel"),
     cst_a$39=caml_new_string("a"),
     cst_src_option_ml_3_12=caml_new_string("src/option.ml:3:12"),
     cst_a$40=caml_new_string("a"),
     cst_t$83=caml_new_string("t"),
     cst_src_option_ml_3_0=caml_new_string("src/option.ml:3:0"),
     name$11=caml_new_string("src/option.ml.t"),
     cst_src_option_ml$2=caml_new_string("src/option.ml"),
     cst_shrinker$0=caml_new_string(": shrinker"),
     cst_core_kernel$133=caml_new_string("core_kernel"),
     cst_src_union_find_ml$0=caml_new_string("src/union_find.ml"),
     cst_union=caml_new_string(": union"),
     cst_src_union_find_ml$1=caml_new_string("src/union_find.ml"),
     cst_union$0=caml_new_string(": union"),
     cst_src_union_find_ml$2=caml_new_string("src/union_find.ml"),
     cst_set_get=caml_new_string(": set/get"),
     cst_src_union_find_ml$3=caml_new_string("src/union_find.ml"),
     cst_compressed=caml_new_string(": compressed"),
     cst_src_union_find_ml$4=caml_new_string("src/union_find.ml"),
     cst_balanced=caml_new_string(": balanced"),
     cst_core_kernel$134=caml_new_string("core_kernel"),
     cst_src_union_find_ml=caml_new_string("src/union_find.ml"),
     cst$46=caml_new_string(""),
     cst_core_kernel$135=caml_new_string("core_kernel"),
     cst_src_union_find_ml$5=caml_new_string("src/union_find.ml"),
     cst$47=caml_new_string(""),
     cst_core_kernel$136=caml_new_string("core_kernel"),
     cst_src_doubly_linked_ml$33=caml_new_string("src/doubly_linked.ml"),
     cst_to_list_fun_fun_0_1_2=
      caml_new_string
       (": <<(to_list (fun _ -> fun _ -> ())) = [0; 1; 2; [...]>>"),
     cst_src_doubly_linked_ml$34=caml_new_string("src/doubly_linked.ml"),
     cst_to_list_fun_b_fun_x_if_x_0_then_rem=
      caml_new_string
       (": <<(to_list (fun b -> fun x -> if x = 0 then rem[...]>>"),
     cst_src_doubly_linked_ml$35=caml_new_string("src/doubly_linked.ml"),
     cst_to_list_fun_b_fun_x_if_x_1_then_rem=
      caml_new_string
       (": <<(to_list (fun b -> fun x -> if x = 1 then rem[...]>>"),
     cst_src_doubly_linked_ml$36=caml_new_string("src/doubly_linked.ml"),
     cst_to_list_fun_b_fun_x_if_x_2_then_rem=
      caml_new_string
       (": <<(to_list (fun b -> fun x -> if x = 2 then rem[...]>>"),
     cst_src_doubly_linked_ml$37=caml_new_string("src/doubly_linked.ml"),
     cst_to_list_fun_b_fun_x_if_x_2_then_re=
      caml_new_string
       (": <<(to_list (fun b -> fun x -> if x = 2 then (re[...]>>"),
     cst_src_doubly_linked_ml$38=caml_new_string("src/doubly_linked.ml"),
     cst_to_list_fun_b_fun_x_if_x_2_then_ins=
      caml_new_string
       (": <<(to_list (fun b -> fun x -> if x = 2 then ins[...]>>"),
     cst_src_doubly_linked_ml$39=caml_new_string("src/doubly_linked.ml"),
     cst_to_list_fun_b_fun_x_if_x_2_then_ins$0=
      caml_new_string
       (": <<(to_list (fun b -> fun x -> if x = 2 then ins[...]>>"),
     cst_src_doubly_linked_ml$40=caml_new_string("src/doubly_linked.ml"),
     cst_to_list_fun_b_fun_x_if_x_2_then_ins$1=
      caml_new_string
       (": <<(to_list (fun b -> fun x -> if x = 2 then ins[...]>>"),
     pos$51=caml_new_string("src/doubly_linked.ml:762:17"),
     pos$50=caml_new_string("src/doubly_linked.ml:761:17"),
     pos$49=caml_new_string("src/doubly_linked.ml:759:17"),
     pos$48=caml_new_string("src/doubly_linked.ml:758:17"),
     pos$47=caml_new_string("src/doubly_linked.ml:756:17"),
     pos$46=caml_new_string("src/doubly_linked.ml:755:17"),
     pos$45=caml_new_string("src/doubly_linked.ml:752:17"),
     pos$44=caml_new_string("src/doubly_linked.ml:751:17"),
     cst_mismatch=caml_new_string("mismatch"),
     cst_src_doubly_linked_ml$1=caml_new_string("src/doubly_linked.ml"),
     cst_test_fun_fun_0_1_2_3_4=
      caml_new_string(": <<test (fun _ -> fun _ -> ()) [0; 1; 2; 3; 4]>>"),
     cst_src_doubly_linked_ml$2=caml_new_string("src/doubly_linked.ml"),
     cst_test_fun_t_fun_a_move_to_front_t_a_4=
      caml_new_string
       (": <<test (fun t -> fun a -> move_to_front t (a.(4[...]>>"),
     cst_src_doubly_linked_ml$3=caml_new_string("src/doubly_linked.ml"),
     cst_test_fun_t_fun_a_move_to_front_t_a_3=
      caml_new_string
       (": <<test (fun t -> fun a -> move_to_front t (a.(3[...]>>"),
     cst_src_doubly_linked_ml$4=caml_new_string("src/doubly_linked.ml"),
     cst_test_fun_t_fun_a_move_to_front_t_a_2=
      caml_new_string
       (": <<test (fun t -> fun a -> move_to_front t (a.(2[...]>>"),
     cst_src_doubly_linked_ml$5=caml_new_string("src/doubly_linked.ml"),
     cst_test_fun_t_fun_a_move_to_front_t_a_1=
      caml_new_string
       (": <<test (fun t -> fun a -> move_to_front t (a.(1[...]>>"),
     cst_src_doubly_linked_ml$6=caml_new_string("src/doubly_linked.ml"),
     cst_test_fun_t_fun_a_move_to_front_t_a_0=
      caml_new_string
       (": <<test (fun t -> fun a -> move_to_front t (a.(0[...]>>"),
     cst_src_doubly_linked_ml$7=caml_new_string("src/doubly_linked.ml"),
     cst_test_fun_t_fun_a_move_to_back_t_a_0=
      caml_new_string
       (": <<test (fun t -> fun a -> move_to_back t (a.(0)[...]>>"),
     cst_src_doubly_linked_ml$8=caml_new_string("src/doubly_linked.ml"),
     cst_test_fun_t_fun_a_move_to_back_t_a_1=
      caml_new_string
       (": <<test (fun t -> fun a -> move_to_back t (a.(1)[...]>>"),
     cst_src_doubly_linked_ml$9=caml_new_string("src/doubly_linked.ml"),
     cst_test_fun_t_fun_a_move_to_back_t_a_2=
      caml_new_string
       (": <<test (fun t -> fun a -> move_to_back t (a.(2)[...]>>"),
     cst_src_doubly_linked_ml$10=caml_new_string("src/doubly_linked.ml"),
     cst_test_fun_t_fun_a_move_to_back_t_a_3=
      caml_new_string
       (": <<test (fun t -> fun a -> move_to_back t (a.(3)[...]>>"),
     cst_src_doubly_linked_ml$11=caml_new_string("src/doubly_linked.ml"),
     cst_test_fun_t_fun_a_move_to_back_t_a_4=
      caml_new_string
       (": <<test (fun t -> fun a -> move_to_back t (a.(4)[...]>>"),
     cst_src_doubly_linked_ml$12=caml_new_string("src/doubly_linked.ml"),
     cst_test_fun_t_fun_a_move_before_t_a_2=
      caml_new_string
       (": <<test (fun t -> fun a -> move_before t (a.(2))[...]>>"),
     cst_src_doubly_linked_ml$13=caml_new_string("src/doubly_linked.ml"),
     cst_test_fun_t_fun_a_move_before_t_a_2$0=
      caml_new_string
       (": <<test (fun t -> fun a -> move_before t (a.(2))[...]>>"),
     cst_src_doubly_linked_ml$14=caml_new_string("src/doubly_linked.ml"),
     cst_test_fun_t_fun_a_move_before_t_a_1=
      caml_new_string
       (": <<test (fun t -> fun a -> move_before t (a.(1))[...]>>"),
     cst_src_doubly_linked_ml$15=caml_new_string("src/doubly_linked.ml"),
     cst_test_fun_t_fun_a_move_before_t_a_0=
      caml_new_string
       (": <<test (fun t -> fun a -> move_before t (a.(0))[...]>>"),
     cst_src_doubly_linked_ml$16=caml_new_string("src/doubly_linked.ml"),
     cst_test_fun_t_fun_a_move_before_t_a_0$0=
      caml_new_string
       (": <<test (fun t -> fun a -> move_before t (a.(0))[...]>>"),
     cst_src_doubly_linked_ml$17=caml_new_string("src/doubly_linked.ml"),
     cst_test_fun_t_fun_a_move_before_t_a_3=
      caml_new_string
       (": <<test (fun t -> fun a -> move_before t (a.(3))[...]>>"),
     cst_src_doubly_linked_ml$18=caml_new_string("src/doubly_linked.ml"),
     cst_test_fun_t_fun_a_move_before_t_a_2$1=
      caml_new_string
       (": <<test (fun t -> fun a -> move_before t (a.(2))[...]>>"),
     cst_src_doubly_linked_ml$19=caml_new_string("src/doubly_linked.ml"),
     cst_test_fun_t_fun_a_move_after_t_a_1=
      caml_new_string
       (": <<test (fun t -> fun a -> move_after t (a.(1)) [...]>>"),
     cst_src_doubly_linked_ml$20=caml_new_string("src/doubly_linked.ml"),
     cst_test_fun_t_fun_a_move_after_t_a_0=
      caml_new_string
       (": <<test (fun t -> fun a -> move_after t (a.(0)) [...]>>"),
     cst_src_doubly_linked_ml$21=caml_new_string("src/doubly_linked.ml"),
     cst_test_fun_t_fun_a_move_after_t_a_1$0=
      caml_new_string
       (": <<test (fun t -> fun a -> move_after t (a.(1)) [...]>>"),
     cst_src_doubly_linked_ml$22=caml_new_string("src/doubly_linked.ml"),
     cst_test_fun_t_fun_a_move_after_t_a_3=
      caml_new_string
       (": <<test (fun t -> fun a -> move_after t (a.(3)) [...]>>"),
     cst_src_doubly_linked_ml$23=caml_new_string("src/doubly_linked.ml"),
     cst_test_fun_t_fun_a_move_after_t_a_2=
      caml_new_string
       (": <<test (fun t -> fun a -> move_after t (a.(2)) [...]>>"),
     cst_core_kernel$137=caml_new_string("core_kernel"),
     cst_src_doubly_linked_ml=caml_new_string("src/doubly_linked.ml"),
     cst$48=caml_new_string(""),
     cst_core_kernel$138=caml_new_string("core_kernel"),
     cst_Core_kernel_Doubly_linked_Attempt_to_mutate_list_during_iteration=
      caml_new_string
       ("Core_kernel__Doubly_linked.Attempt_to_mutate_list_during_iteration"),
     cst_src_doubly_linked_ml$0=caml_new_string("src/doubly_linked.ml"),
     cst_List_iter_1_2_3_f_fun_l=
      caml_new_string
       (": <<List.iter [[]; [1]; [2; 3]]   ~f:(fun l ->   [...]>>"),
     cst_Core_kernel_Doubly_linked_Transfer_src_and_dst_are_same_list=
      caml_new_string
       ("Core_kernel__Doubly_linked.Transfer_src_and_dst_are_same_list"),
     cst_Core_kernel_Doubly_linked_Elt_does_not_belong_to_list=
      caml_new_string
       ("Core_kernel__Doubly_linked.Elt_does_not_belong_to_list"),
     cst_Core_kernel_Doubly_linked_Invalid_move_elt_equals_anchor=
      caml_new_string
       ("Core_kernel__Doubly_linked.Invalid_move__elt_equals_anchor"),
     cst_src_doubly_linked_ml$24=caml_new_string("src/doubly_linked.ml"),
     cst_move_functions=caml_new_string(": move functions"),
     cst_src_doubly_linked_ml$25=caml_new_string("src/doubly_linked.ml"),
     cst_to_list_of_list=caml_new_string(": <<(to_list (of_list [])) = []>>"),
     cst_src_doubly_linked_ml$26=caml_new_string("src/doubly_linked.ml"),
     cst_to_list_of_list_1_2_3_1_2_3=
      caml_new_string(": <<(to_list (of_list [1; 2; 3])) = [1; 2; 3]>>"),
     cst_src_doubly_linked_ml$27=caml_new_string("src/doubly_linked.ml"),
     cst_to_array_of_array=
      caml_new_string(": <<(to_array (of_array [||])) = [||]>>"),
     cst_src_doubly_linked_ml$28=caml_new_string("src/doubly_linked.ml"),
     cst_to_array_of_array_1_2_3_1_2_3=
      caml_new_string(": <<(to_array (of_array [|1;2;3|])) = [|1;2;3|]>>"),
     cst_src_doubly_linked_ml$29=caml_new_string("src/doubly_linked.ml"),
     cst_invariant_fun_int_of_list=
      caml_new_string
       (": <<invariant (fun (_ : int) -> ()) (of_list []);[...]>>"),
     cst_src_doubly_linked_ml$30=caml_new_string("src/doubly_linked.ml"),
     cst_try_remove_t2_elt_false_with_Elt_does_not=
      caml_new_string
       (": <<try remove t2 elt; false with | Elt_does_not_[...]>>"),
     cst_src_doubly_linked_ml$31=caml_new_string("src/doubly_linked.ml"),
     cst_try_remove_t2_elt_false_with_Elt_does_not$0=
      caml_new_string
       (": <<try remove t2 elt; false with | Elt_does_not_[...]>>"),
     cst_src_doubly_linked_ml$32=caml_new_string("src/doubly_linked.ml"),
     cst_mem_elt=caml_new_string(": mem_elt"),
     cst_src_doubly_linked_ml$41=caml_new_string("src/doubly_linked.ml"),
     cst_unchecked_iter=caml_new_string(": unchecked_iter"),
     cst_core_kernel$139=caml_new_string("core_kernel"),
     cst_It_is_an_error_to_modify_a_Hash_queue_t_while_iterating_over_it=
      caml_new_string
       ("It is an error to modify a Hash_queue.t while iterating over it."),
     cst_Core_kernel_Hash_queue_Make_Key_Enqueue_duplicate_key=
      caml_new_string
       ("Core_kernel__Hash_queue.Make(Key).Enqueue_duplicate_key"),
     cst_Core_kernel_Hash_queue_Make_Key_Deque_with_key_empty=
      caml_new_string
       ("Core_kernel__Hash_queue.Make(Key).Deque_with_key_empty"),
     cst_Core_kernel_Hash_queue_Make_Key_Deque_empty=
      caml_new_string("Core_kernel__Hash_queue.Make(Key).Deque_empty"),
     cst_Core_kernel_Hash_queue_Make_Key_Remove_unknown_key=
      caml_new_string("Core_kernel__Hash_queue.Make(Key).Remove_unknown_key"),
     cst_Core_kernel_Hash_queue_Make_Key_Replace_unknown_key=
      caml_new_string("Core_kernel__Hash_queue.Make(Key).Replace_unknown_key"),
     cst_core_kernel$140=caml_new_string("core_kernel"),
     cst_src_hash_queue_ml=caml_new_string("src/hash_queue.ml"),
     cst$49=caml_new_string(""),
     cst_core_kernel$141=caml_new_string("core_kernel"),
     cst_core_kernel$142=caml_new_string("core_kernel"),
     cst_core_kernel$143=caml_new_string("core_kernel"),
     cst_src_hashable_ml=caml_new_string("src/hashable.ml"),
     cst$50=caml_new_string(""),
     cst_core_kernel$144=caml_new_string("core_kernel"),
     cst_core_kernel$145=caml_new_string("core_kernel"),
     cst_core_kernel$146=caml_new_string("core_kernel"),
     cst_src_source_code_position_ml=
      caml_new_string("src/source_code_position.ml"),
     cst$51=caml_new_string(""),
     cst_core_kernel$147=caml_new_string("core_kernel"),
     cst_core_kernel$148=caml_new_string("core_kernel"),
     cst_A$1=caml_new_string("A"),
     cst_A$2=caml_new_string("A"),
     cst_A=caml_new_string("A"),
     cst_B=caml_new_string("B"),
     cst_a$41=caml_new_string("a"),
     cst_b$10=caml_new_string("b"),
     cst_A$0=caml_new_string("A"),
     cst_B$0=caml_new_string("B"),
     cst_a$42=caml_new_string("a"),
     cst_b$11=caml_new_string("b"),
     cst_src_identifiable_ml_T_t=caml_new_string("src/identifiable.ml.T.t"),
     cst_mismatch$0=caml_new_string("mismatch"),
     cst_compare=caml_new_string("compare"),
     cst_Compare=caml_new_string("Compare"),
     cst_Hash=caml_new_string("Hash"),
     cst_Of_string=caml_new_string("Of_string"),
     cst_Sexp_of_t=caml_new_string("Sexp_of_t"),
     cst_T_of_sexp=caml_new_string("T_of_sexp"),
     cst_To_string=caml_new_string("To_string"),
     cst_hash=caml_new_string("hash"),
     cst_of_string=caml_new_string("of_string"),
     cst_sexp_of_t=caml_new_string("sexp_of_t"),
     cst_t_of_sexp=caml_new_string("t_of_sexp"),
     cst_to_string=caml_new_string("to_string"),
     cst_compare$0=caml_new_string("compare"),
     cst_Compare$0=caml_new_string("Compare"),
     cst_Hash$0=caml_new_string("Hash"),
     cst_Of_string$0=caml_new_string("Of_string"),
     cst_Sexp_of_t$0=caml_new_string("Sexp_of_t"),
     cst_T_of_sexp$0=caml_new_string("T_of_sexp"),
     cst_To_string$0=caml_new_string("To_string"),
     cst_hash$0=caml_new_string("hash"),
     cst_of_string$0=caml_new_string("of_string"),
     cst_sexp_of_t$0=caml_new_string("sexp_of_t"),
     cst_t_of_sexp$0=caml_new_string("t_of_sexp"),
     cst_to_string$0=caml_new_string("to_string"),
     tp_loc$16=caml_new_string("src/identifiable.ml.Counter.t"),
     module_name$6=caml_new_string("Core_kernel.Identifiable.T"),
     cst_t$85=caml_new_string("t"),
     cst_src_identifiable_ml_143_6=
      caml_new_string("src/identifiable.ml:143:6"),
     cst_t$86=caml_new_string("t"),
     tp_loc$17=caml_new_string("src/identifiable.ml.T.t"),
     cst_src_identifiable_ml$0=caml_new_string("src/identifiable.ml"),
     cst_let_open_T_in_let_open_Id_in_let_check=
      caml_new_string
       (": <<let open T in   let open Id in     let check [...]>>"),
     cst_core_kernel$149=caml_new_string("core_kernel"),
     cst_src_identifiable_ml=caml_new_string("src/identifiable.ml"),
     cst$52=caml_new_string(""),
     cst_core_kernel$150=caml_new_string("core_kernel"),
     cst_src_identifiable_ml$1=caml_new_string("src/identifiable.ml"),
     cst$53=caml_new_string(""),
     cst_core_kernel$151=caml_new_string("core_kernel"),
     cst_core_kernel$152=caml_new_string("core_kernel"),
     cst_src_int_ml=caml_new_string("src/int.ml"),
     cst$54=caml_new_string(""),
     cst_core_kernel$153=caml_new_string("core_kernel"),
     cst_t$87=caml_new_string("t"),
     cst_src_int_ml_6_6=caml_new_string("src/int.ml:6:6"),
     cst_t$88=caml_new_string("t"),
     name$12=caml_new_string("src/int.ml.t"),
     cst_t$89=caml_new_string("t"),
     cst_src_int_ml_20_4=caml_new_string("src/int.ml:20:4"),
     cst_t$90=caml_new_string("t"),
     name$13=caml_new_string("src/int.ml.Hex.t"),
     cst_t$91=caml_new_string("t"),
     cst_src_int_ml_29_2=caml_new_string("src/int.ml:29:2"),
     cst_t$92=caml_new_string("t"),
     cst_core_kernel$154=caml_new_string("core_kernel"),
     cst_core_kernel$155=caml_new_string("core_kernel"),
     cst_src_int64_ml=caml_new_string("src/int64.ml"),
     cst$55=caml_new_string(""),
     cst_core_kernel$156=caml_new_string("core_kernel"),
     name$14=caml_new_string("src/int64.ml.t"),
     cst_t$93=caml_new_string("t"),
     cst_src_int64_ml_6_4=caml_new_string("src/int64.ml:6:4"),
     cst_t$94=caml_new_string("t"),
     name$15=caml_new_string("src/int64.ml.Hex.t"),
     cst_t$95=caml_new_string("t"),
     cst_src_int64_ml_10_2=caml_new_string("src/int64.ml:10:2"),
     cst_t$96=caml_new_string("t"),
     cst_core_kernel$157=caml_new_string("core_kernel"),
     cst_core_kernel$158=caml_new_string("core_kernel"),
     cst_src_stable_comparable_ml=caml_new_string("src/stable_comparable.ml"),
     cst$56=caml_new_string(""),
     cst_core_kernel$159=caml_new_string("core_kernel"),
     cst_core_kernel$160=caml_new_string("core_kernel"),
     cst_core_kernel$161=caml_new_string("core_kernel"),
     cst_src_int_intf_ml=caml_new_string("src/int_intf.ml"),
     cst$57=caml_new_string(""),
     cst_core_kernel$162=caml_new_string("core_kernel"),
     cst_core_kernel$163=caml_new_string("core_kernel"),
     cst_src_int63_ml$0=caml_new_string("src/int63.ml"),
     cst_core_kernel$164=caml_new_string("core_kernel"),
     cst_src_int63_ml=caml_new_string("src/int63.ml"),
     cst$58=caml_new_string(""),
     cst_core_kernel$165=caml_new_string("core_kernel"),
     name$16=caml_new_string("src/int63.ml.Hex.t"),
     cst_t$97=caml_new_string("t"),
     cst_src_int63_ml_50_2=caml_new_string("src/int63.ml:50:2"),
     cst_t$98=caml_new_string("t"),
     cst_src_int63_ml$1=caml_new_string("src/int63.ml"),
     cst_src_int63_ml$2=caml_new_string("src/int63.ml"),
     cst_src_int63_ml$3=caml_new_string("src/int63.ml"),
     cst_src_int63_ml$4=caml_new_string("src/int63.ml"),
     cst_bc3eae4ea7a5ffd8ecbc55e200990c70=
      caml_new_string("bc3eae4ea7a5ffd8ecbc55e200990c70"),
     cst_core_kernel$166=caml_new_string("core_kernel"),
     cst_core_kernel$167=caml_new_string("core_kernel"),
     cst_src_robustly_comparable_ml=
      caml_new_string("src/robustly_comparable.ml"),
     cst$59=caml_new_string(""),
     cst_core_kernel$168=caml_new_string("core_kernel"),
     cst_core_kernel$169=caml_new_string("core_kernel"),
     cst_core_kernel$170=caml_new_string("core_kernel"),
     cst_src_stable_int63able_ml=caml_new_string("src/stable_int63able.ml"),
     cst$60=caml_new_string(""),
     cst_core_kernel$171=caml_new_string("core_kernel"),
     cst_core_kernel$172=caml_new_string("core_kernel"),
     cst_core_kernel$173=caml_new_string("core_kernel"),
     cst_src_unit_ml=caml_new_string("src/unit.ml"),
     cst$61=caml_new_string(""),
     cst_core_kernel$174=caml_new_string("core_kernel"),
     name$17=caml_new_string("src/unit.ml.t"),
     cst_t$99=caml_new_string("t"),
     cst_src_unit_ml_6_4=caml_new_string("src/unit.ml:6:4"),
     cst_t$100=caml_new_string("t"),
     cst_core_kernel$175=caml_new_string("core_kernel"),
     cst_core_kernel$176=caml_new_string("core_kernel"),
     cst_src_interfaces_ml=caml_new_string("src/interfaces.ml"),
     cst$62=caml_new_string(""),
     cst_core_kernel$177=caml_new_string("core_kernel"),
     cst_core_kernel$178=caml_new_string("core_kernel"),
     cst_core_kernel$179=caml_new_string("core_kernel"),
     cst_src_bool_ml=caml_new_string("src/bool.ml"),
     cst$63=caml_new_string(""),
     cst_core_kernel$180=caml_new_string("core_kernel"),
     cst_t$101=caml_new_string("t"),
     cst_src_bool_ml_3_0=caml_new_string("src/bool.ml:3:0"),
     cst_t$102=caml_new_string("t"),
     name$18=caml_new_string("src/bool.ml.t"),
     cst_core_kernel$181=caml_new_string("core_kernel"),
     cst_core_kernel$182=caml_new_string("core_kernel"),
     cst_src_char_ml=caml_new_string("src/char.ml"),
     cst$64=caml_new_string(""),
     cst_core_kernel$183=caml_new_string("core_kernel"),
     name$19=caml_new_string("src/char.ml.t"),
     cst_t$103=caml_new_string("t"),
     cst_src_char_ml_7_4=caml_new_string("src/char.ml:7:4"),
     cst_t$104=caml_new_string("t"),
     cst_core_kernel$184=caml_new_string("core_kernel"),
     cst_core_kernel$185=caml_new_string("core_kernel"),
     cst_src_hexdump_intf_ml=caml_new_string("src/hexdump_intf.ml"),
     cst$65=caml_new_string(""),
     cst_core_kernel$186=caml_new_string("core_kernel"),
     cst_core_kernel$187=caml_new_string("core_kernel"),
     cst$68=caml_new_string("..."),
     partial=
      [12,32,[2,0,[12,32,[2,0,[12,32,[2,0,[12,32,[2,0,[12,32,[2,0,0]]]]]]]]]],
     partial$0=
      [2,
       0,
       [12,
        32,
        [2,
         0,
         [12,
          32,
          [2,
           0,
           [11,
            caml_new_string("  "),
            [2,0,[12,32,[2,0,[12,32,[2,0,partial]]]]]]]]]]],
     cst$67=caml_new_string("  "),
     cst_core_kernel$188=caml_new_string("core_kernel"),
     cst_src_hexdump_ml=caml_new_string("src/hexdump.ml"),
     cst$66=caml_new_string(""),
     cst_core_kernel$189=caml_new_string("core_kernel"),
     cst_core_kernel$190=caml_new_string("core_kernel"),
     cst_core_kernel$191=caml_new_string("core_kernel"),
     cst_src_bytes_ml=caml_new_string("src/bytes.ml"),
     cst$69=caml_new_string(""),
     cst_core_kernel$192=caml_new_string("core_kernel"),
     cst_t$105=caml_new_string("t"),
     cst_src_bytes_ml_5_4=caml_new_string("src/bytes.ml:5:4"),
     cst_t$106=caml_new_string("t"),
     name$20=caml_new_string("src/bytes.ml.Stable.V1.t"),
     cst_core_kernel$193=caml_new_string("core_kernel"),
     cst_core_kernel$194=caml_new_string("core_kernel"),
     cst_src_core_pervasives_ml=caml_new_string("src/core_pervasives.ml"),
     cst$70=caml_new_string(""),
     cst_core_kernel$195=caml_new_string("core_kernel"),
     cst_core_kernel$196=caml_new_string("core_kernel"),
     cst_gc_alarm=caml_new_string("<gc alarm>"),
     cst_allocation_policy$0=caml_new_string("allocation_policy"),
     cst_major_heap_increment$0=caml_new_string("major_heap_increment"),
     cst_max_overhead$0=caml_new_string("max_overhead"),
     cst_minor_heap_size$0=caml_new_string("minor_heap_size"),
     cst_space_overhead$0=caml_new_string("space_overhead"),
     cst_stack_limit$0=caml_new_string("stack_limit"),
     cst_verbose$0=caml_new_string("verbose"),
     cst_window_size$0=caml_new_string("window_size"),
     cst_window_size$1=caml_new_string("window_size"),
     cst_allocation_policy$1=caml_new_string("allocation_policy"),
     cst_stack_limit$1=caml_new_string("stack_limit"),
     cst_max_overhead$1=caml_new_string("max_overhead"),
     cst_verbose$1=caml_new_string("verbose"),
     cst_space_overhead$1=caml_new_string("space_overhead"),
     cst_major_heap_increment$1=caml_new_string("major_heap_increment"),
     cst_minor_heap_size$1=caml_new_string("minor_heap_size"),
     cst_src_gc_ml_Control_T_t=caml_new_string("src/gc.ml.Control.T.t"),
     cst_live_words$0=caml_new_string("live_words"),
     cst_compactions$0=caml_new_string("compactions"),
     cst_fragments$0=caml_new_string("fragments"),
     cst_free_blocks$0=caml_new_string("free_blocks"),
     cst_free_words$0=caml_new_string("free_words"),
     cst_heap_chunks$0=caml_new_string("heap_chunks"),
     cst_heap_words$0=caml_new_string("heap_words"),
     cst_largest_free$0=caml_new_string("largest_free"),
     cst_live_blocks$0=caml_new_string("live_blocks"),
     cst_major_collections$0=caml_new_string("major_collections"),
     cst_major_words$0=caml_new_string("major_words"),
     cst_minor_collections$0=caml_new_string("minor_collections"),
     cst_minor_words$0=caml_new_string("minor_words"),
     cst_promoted_words$0=caml_new_string("promoted_words"),
     cst_stack_size$0=caml_new_string("stack_size"),
     cst_top_heap_words$0=caml_new_string("top_heap_words"),
     cst_stack_size$1=caml_new_string("stack_size"),
     cst_top_heap_words$1=caml_new_string("top_heap_words"),
     cst_compactions$1=caml_new_string("compactions"),
     cst_fragments$1=caml_new_string("fragments"),
     cst_largest_free$1=caml_new_string("largest_free"),
     cst_free_blocks$1=caml_new_string("free_blocks"),
     cst_free_words$1=caml_new_string("free_words"),
     cst_live_blocks$1=caml_new_string("live_blocks"),
     cst_live_words$1=caml_new_string("live_words"),
     cst_heap_chunks$1=caml_new_string("heap_chunks"),
     cst_heap_words$1=caml_new_string("heap_words"),
     cst_major_collections$1=caml_new_string("major_collections"),
     cst_minor_collections$1=caml_new_string("minor_collections"),
     cst_major_words$1=caml_new_string("major_words"),
     cst_promoted_words$1=caml_new_string("promoted_words"),
     cst_minor_words$1=caml_new_string("minor_words"),
     cst_src_gc_ml_Stat_T_t=caml_new_string("src/gc.ml.Stat.T.t"),
     cst_core_kernel$197=caml_new_string("core_kernel"),
     cst_src_gc_ml=caml_new_string("src/gc.ml"),
     cst$71=caml_new_string(""),
     cst_core_kernel$198=caml_new_string("core_kernel"),
     cst_stack_size=caml_new_string("stack_size"),
     cst_top_heap_words=caml_new_string("top_heap_words"),
     cst_compactions=caml_new_string("compactions"),
     cst_fragments=caml_new_string("fragments"),
     cst_largest_free=caml_new_string("largest_free"),
     cst_free_blocks=caml_new_string("free_blocks"),
     cst_free_words=caml_new_string("free_words"),
     cst_live_blocks=caml_new_string("live_blocks"),
     cst_live_words=caml_new_string("live_words"),
     cst_heap_chunks=caml_new_string("heap_chunks"),
     cst_heap_words=caml_new_string("heap_words"),
     cst_major_collections=caml_new_string("major_collections"),
     cst_minor_collections=caml_new_string("minor_collections"),
     cst_major_words=caml_new_string("major_words"),
     cst_promoted_words=caml_new_string("promoted_words"),
     cst_minor_words=caml_new_string("minor_words"),
     cst_t$107=caml_new_string("t"),
     cst_src_gc_ml_7_4=caml_new_string("src/gc.ml:7:4"),
     cst_t$108=caml_new_string("t"),
     tp_loc$18=caml_new_string("src/gc.ml.Stat.T.t"),
     names=
      caml_list_of_js_array
       ([caml_new_string("minor_words"),
         caml_new_string("promoted_words"),
         caml_new_string("major_words"),
         caml_new_string("minor_collections"),
         caml_new_string("major_collections"),
         caml_new_string("heap_words"),
         caml_new_string("heap_chunks"),
         caml_new_string("live_words"),
         caml_new_string("live_blocks"),
         caml_new_string("free_words"),
         caml_new_string("free_blocks"),
         caml_new_string("largest_free"),
         caml_new_string("fragments"),
         caml_new_string("compactions"),
         caml_new_string("top_heap_words"),
         caml_new_string("stack_size")]),
     cst_stack_size$2=caml_new_string("stack_size"),
     cst_top_heap_words$2=caml_new_string("top_heap_words"),
     cst_compactions$2=caml_new_string("compactions"),
     cst_fragments$2=caml_new_string("fragments"),
     cst_largest_free$2=caml_new_string("largest_free"),
     cst_free_blocks$2=caml_new_string("free_blocks"),
     cst_free_words$2=caml_new_string("free_words"),
     cst_live_blocks$2=caml_new_string("live_blocks"),
     cst_live_words$2=caml_new_string("live_words"),
     cst_heap_chunks$2=caml_new_string("heap_chunks"),
     cst_heap_words$2=caml_new_string("heap_words"),
     cst_major_collections$2=caml_new_string("major_collections"),
     cst_minor_collections$2=caml_new_string("minor_collections"),
     cst_major_words$2=caml_new_string("major_words"),
     cst_promoted_words$2=caml_new_string("promoted_words"),
     cst_minor_words$2=caml_new_string("minor_words"),
     cst_window_size=caml_new_string("window_size"),
     cst_allocation_policy=caml_new_string("allocation_policy"),
     cst_stack_limit=caml_new_string("stack_limit"),
     cst_max_overhead=caml_new_string("max_overhead"),
     cst_verbose=caml_new_string("verbose"),
     cst_space_overhead=caml_new_string("space_overhead"),
     cst_major_heap_increment=caml_new_string("major_heap_increment"),
     cst_minor_heap_size=caml_new_string("minor_heap_size"),
     cst_t$109=caml_new_string("t"),
     cst_src_gc_ml_33_4=caml_new_string("src/gc.ml:33:4"),
     cst_t$110=caml_new_string("t"),
     tp_loc$19=caml_new_string("src/gc.ml.Control.T.t"),
     names$0=
      [0,
       caml_new_string("minor_heap_size"),
       [0,
        caml_new_string("major_heap_increment"),
        [0,
         caml_new_string("space_overhead"),
         [0,
          caml_new_string("verbose"),
          [0,
           caml_new_string("max_overhead"),
           [0,
            caml_new_string("stack_limit"),
            [0,
             caml_new_string("allocation_policy"),
             [0,caml_new_string("window_size"),0]]]]]]]],
     cst_window_size$2=caml_new_string("window_size"),
     cst_allocation_policy$2=caml_new_string("allocation_policy"),
     cst_stack_limit$2=caml_new_string("stack_limit"),
     cst_max_overhead$2=caml_new_string("max_overhead"),
     cst_verbose$2=caml_new_string("verbose"),
     cst_space_overhead$2=caml_new_string("space_overhead"),
     cst_major_heap_increment$2=caml_new_string("major_heap_increment"),
     cst_minor_heap_size$2=caml_new_string("minor_heap_size"),
     cst_0=caml_new_string("0"),
     cst_src_gc_ml$0=caml_new_string("src/gc.ml"),
     cst_Caml_Weak_set_weak_0_Some_r_Caml_Gc_compac=
      caml_new_string
       (": <<Caml.Weak.set weak 0 (Some r); Caml.Gc.compac[...]>>"),
     cst_core_kernel$199=caml_new_string("core_kernel"),
     cst_Neg$1=caml_new_string("Neg"),
     cst_Zero$1=caml_new_string("Zero"),
     cst_Pos$1=caml_new_string("Pos"),
     cst_src_sign_ml_Stable_V1_t=caml_new_string("src/sign.ml.Stable.V1.t"),
     cst_Neg=caml_new_string("Neg"),
     cst_Pos=caml_new_string("Pos"),
     cst_Zero=caml_new_string("Zero"),
     cst_neg=caml_new_string("neg"),
     cst_pos=caml_new_string("pos"),
     cst_zero=caml_new_string("zero"),
     cst_Neg$0=caml_new_string("Neg"),
     cst_Pos$0=caml_new_string("Pos"),
     cst_Zero$0=caml_new_string("Zero"),
     cst_neg$0=caml_new_string("neg"),
     cst_pos$0=caml_new_string("pos"),
     cst_zero$0=caml_new_string("zero"),
     cst_core_kernel$200=caml_new_string("core_kernel"),
     cst_src_sign_ml=caml_new_string("src/sign.ml"),
     cst$72=caml_new_string(""),
     cst_core_kernel$201=caml_new_string("core_kernel"),
     tp_loc$20=caml_new_string("src/sign.ml.Stable.V1.t"),
     cst_t$111=caml_new_string("t"),
     cst_src_sign_ml_7_4=caml_new_string("src/sign.ml:7:4"),
     cst_t$112=caml_new_string("t"),
     name$21=caml_new_string("src/sign.ml.Stable.V1.t"),
     cst_src_sign_ml$0=caml_new_string("src/sign.ml"),
     cst_compare_Neg_Zero_0_compare_Zero_Po=
      caml_new_string
       (": <<((compare Neg Zero) < 0) && ((compare Zero Po[...]>>"),
     cst_src_sign_ml$1=caml_new_string("src/sign.ml"),
     cst_List_for_all_all_f_fun_t_t_t_to_i=
      caml_new_string
       (": <<List.for_all all ~f:(fun t -> t = ((t |> to_i[...]>>"),
     cst_src_sign_ml$2=caml_new_string("src/sign.ml"),
     cst_List_for_all_1_0_1_f_fun_i_i=
      caml_new_string
       (": <<List.for_all [(-1); 0; 1] ~f:(fun i -> i = (([...]>>"),
     cst_core_kernel$202=caml_new_string("core_kernel"),
     pos$55=caml_new_string("src/string.ml:126:37"),
     cst_123456$0=caml_new_string("123456"),
     expect$23=caml_new_string("123456"),
     pos$54=caml_new_string("src/string.ml:125:37"),
     cst_123456=caml_new_string("123456"),
     expect$22=caml_new_string("123456"),
     pos$53=caml_new_string("src/string.ml:124:37"),
     cst_123abc456$0=caml_new_string("123abc456"),
     expect$21=caml_new_string("456"),
     pos$52=caml_new_string("src/string.ml:123:37"),
     cst_123abc456=caml_new_string("123abc456"),
     expect$20=caml_new_string("123"),
     cst_src_string_ml$6=caml_new_string("src/string.ml"),
     cst_test_result_t_take_while_123abc456=
      caml_new_string
       (': <<([%test_result :t]) (take_while "123abc456" ~[...]>>'),
     cst_src_string_ml$7=caml_new_string("src/string.ml"),
     cst_test_result_t_rtake_while_123abc456=
      caml_new_string
       (': <<([%test_result :t]) (rtake_while "123abc456" [...]>>'),
     cst_src_string_ml$8=caml_new_string("src/string.ml"),
     cst_test_result_t_take_while_123456_f=
      caml_new_string
       (': <<([%test_result :t]) (take_while "123456" ~f) [...]>>'),
     cst_src_string_ml$9=caml_new_string("src/string.ml"),
     cst_test_result_t_rtake_while_123456_f=
      caml_new_string
       (': <<([%test_result :t]) (rtake_while "123456" ~f)[...]>>'),
     cst_HELLO=caml_new_string("HELLO"),
     cst_Hello=caml_new_string("Hello"),
     cst_src_string_ml$4=caml_new_string("src/string.ml"),
     cst_Int_equal_Caseless_hash_Hello_Caseless_h=
      caml_new_string
       (': <<Int.equal (Caseless.hash "Hello") (Caseless.h[...]>>'),
     cst_heLLO=caml_new_string("heLLO"),
     cst_A$3=caml_new_string("A"),
     cst_src_string_ml$0=caml_new_string("src/string.ml"),
     cst_Int_equal_Core_map_find_exn_Caseless_Map=
      caml_new_string
       (": <<Int.equal   (Core_map.find_exn (Caseless.Map.[...]>>"),
     cst_src_string_ml$1=caml_new_string("src/string.ml"),
     cst_Core_set_mem_Caseless_Set_of_list_hello=
      caml_new_string
       (': <<Core_set.mem (Caseless.Set.of_list ["hello"; [...]>>'),
     cst_src_string_ml$2=caml_new_string("src/string.ml"),
     cst_Int_equal_Core_set_length_Caseless_Set_of_l=
      caml_new_string
       (": <<Int.equal (Core_set.length (Caseless.Set.of_l[...]>>"),
     cst_core_kernel$203=caml_new_string("core_kernel"),
     cst_src_string_ml=caml_new_string("src/string.ml"),
     cst$73=caml_new_string(""),
     cst_core_kernel$204=caml_new_string("core_kernel"),
     cst_t$113=caml_new_string("t"),
     cst_src_string_ml_11_6=caml_new_string("src/string.ml:11:6"),
     cst_t$114=caml_new_string("t"),
     cst_t$115=caml_new_string("t"),
     cst_src_string_ml_22_4=caml_new_string("src/string.ml:22:4"),
     cst_t$116=caml_new_string("t"),
     cst_src_string_ml$3=caml_new_string("src/string.ml"),
     cst_Caseless_Comparable=caml_new_string(": Caseless Comparable"),
     cst_src_string_ml$5=caml_new_string("src/string.ml"),
     cst_Caseless_Hash=caml_new_string(": Caseless Hash"),
     name$22=caml_new_string("src/string.ml.t"),
     cst_t$117=caml_new_string("t"),
     cst_src_string_ml_54_4=caml_new_string("src/string.ml:54:4"),
     cst_t$118=caml_new_string("t"),
     cst_src_string_ml$10=caml_new_string("src/string.ml"),
     cst_take_while=caml_new_string(": take_while"),
     cst_core_kernel$205=caml_new_string("core_kernel"),
     pos$56=caml_new_string("src/float.ml:314:17"),
     cst_Float_gen_uniform_excl_bounds_are_not_finite=
      caml_new_string("Float.gen_uniform_excl: bounds are not finite"),
     cst_Float_gen_uniform_excl_requested_range_is_empty=
      caml_new_string("Float.gen_uniform_excl: requested range is empty"),
     cst_generator_produced_float_in_wrong_class=
      caml_new_string("generator produced float in wrong class"),
     cst_12g=caml_new_string("%.12g"),
     cst$75=caml_new_string("."),
     cst_core_kernel$206=caml_new_string("core_kernel"),
     cst_src_float_ml=caml_new_string("src/float.ml"),
     cst$74=caml_new_string(""),
     cst_core_kernel$207=caml_new_string("core_kernel"),
     cst_t$119=caml_new_string("t"),
     cst_src_float_ml_23_2=caml_new_string("src/float.ml:23:2"),
     cst_t$120=caml_new_string("t"),
     name$23=caml_new_string("src/float.ml.T.t"),
     cst_t$121=caml_new_string("t"),
     cst_src_float_ml_74_2=caml_new_string("src/float.ml:74:2"),
     cst_t$122=caml_new_string("t"),
     cst_src_float_ml$0=caml_new_string("src/float.ml"),
     cst_test_class_gen_zero_Zero=
      caml_new_string(": <<test_class gen_zero Zero>>"),
     cst_src_float_ml$1=caml_new_string("src/float.ml"),
     cst_test_class_gen_subnormal_Subnormal=
      caml_new_string(": <<test_class gen_subnormal Subnormal>>"),
     cst_src_float_ml$2=caml_new_string("src/float.ml"),
     cst_test_class_gen_normal_Normal=
      caml_new_string(": <<test_class gen_normal Normal>>"),
     cst_src_float_ml$3=caml_new_string("src/float.ml"),
     cst_test_class_gen_infinite_Infinite=
      caml_new_string(": <<test_class gen_infinite Infinite>>"),
     cst_src_float_ml$4=caml_new_string("src/float.ml"),
     cst_test_class_gen_nan_Nan=
      caml_new_string(": <<test_class gen_nan Nan>>"),
     cst_src_float_ml$5=caml_new_string("src/float.ml"),
     cst_assert_Int63_equal_int63_round_nearest_exn=
      caml_new_string
       (": <<assert (Int63.equal (int63_round_nearest_exn [...]>>"),
     cst_src_float_ml$6=caml_new_string("src/float.ml"),
     cst_Float_validate_positive_doesn_t_allocate_on_success=
      caml_new_string(": Float.validate_positive doesn't allocate on success"),
     cst_core_kernel$208=caml_new_string("core_kernel"),
     cst_core_kernel$209=caml_new_string("core_kernel"),
     cst_src_int32_ml=caml_new_string("src/int32.ml"),
     cst$76=caml_new_string(""),
     cst_core_kernel$210=caml_new_string("core_kernel"),
     name$24=caml_new_string("src/int32.ml.t"),
     cst_t$123=caml_new_string("t"),
     cst_src_int32_ml_6_4=caml_new_string("src/int32.ml:6:4"),
     cst_t$124=caml_new_string("t"),
     name$25=caml_new_string("src/int32.ml.Hex.t"),
     cst_t$125=caml_new_string("t"),
     cst_src_int32_ml_10_2=caml_new_string("src/int32.ml:10:2"),
     cst_t$126=caml_new_string("t"),
     cst_core_kernel$211=caml_new_string("core_kernel"),
     cst_t$128=caml_new_string("t"),
     cst_core_kernel$212=caml_new_string("core_kernel"),
     cst_src_lazy_ml=caml_new_string("src/lazy.ml"),
     cst$77=caml_new_string(""),
     cst_core_kernel$213=caml_new_string("core_kernel"),
     cst_a$43=caml_new_string("a"),
     cst_src_lazy_ml_6_16=caml_new_string("src/lazy.ml:6:16"),
     cst_a$44=caml_new_string("a"),
     cst_t$127=caml_new_string("t"),
     cst_src_lazy_ml_6_4=caml_new_string("src/lazy.ml:6:4"),
     name$26=caml_new_string("src/lazy.ml.Stable.V1.t"),
     cst_core_kernel$214=caml_new_string("core_kernel"),
     cst_core_kernel$215=caml_new_string("core_kernel"),
     cst_src_nativeint_ml=caml_new_string("src/nativeint.ml"),
     cst$78=caml_new_string(""),
     cst_core_kernel$216=caml_new_string("core_kernel"),
     name$27=caml_new_string("src/nativeint.ml.t"),
     cst_t$129=caml_new_string("t"),
     cst_src_nativeint_ml_6_4=caml_new_string("src/nativeint.ml:6:4"),
     cst_t$130=caml_new_string("t"),
     name$28=caml_new_string("src/nativeint.ml.Hex.t"),
     cst_t$131=caml_new_string("t"),
     cst_src_nativeint_ml_10_2=caml_new_string("src/nativeint.ml:10:2"),
     cst_t$132=caml_new_string("t"),
     cst_core_kernel$217=caml_new_string("core_kernel"),
     cst_Nothing_of_string_not_supported=
      caml_new_string("Nothing.of_string: not supported"),
     cst_core_kernel$218=caml_new_string("core_kernel"),
     cst_src_nothing_ml=caml_new_string("src/nothing.ml"),
     cst$79=caml_new_string(""),
     cst_core_kernel$219=caml_new_string("core_kernel"),
     cst_t$133=caml_new_string("t"),
     cst_src_nothing_ml_11_6=caml_new_string("src/nothing.ml:11:6"),
     cst_t$134=caml_new_string("t"),
     cst_Stable_V1_t=caml_new_string(".Stable.V1.t"),
     module_name$7=caml_new_string("Core_kernel.Nothing"),
     cst_core_kernel$220=caml_new_string("core_kernel"),
     cst_core_kernel$221=caml_new_string("core_kernel"),
     cst_src_never_returns_ml=caml_new_string("src/never_returns.ml"),
     cst$80=caml_new_string(""),
     cst_core_kernel$222=caml_new_string("core_kernel"),
     cst_core_kernel$223=caml_new_string("core_kernel"),
     cst_src_ordering_ml_t=caml_new_string("src/ordering.ml.t"),
     cst_core_kernel$224=caml_new_string("core_kernel"),
     cst_src_ordering_ml=caml_new_string("src/ordering.ml"),
     cst$81=caml_new_string(""),
     cst_core_kernel$225=caml_new_string("core_kernel"),
     cst_t$135=caml_new_string("t"),
     cst_src_ordering_ml_3_0=caml_new_string("src/ordering.ml:3:0"),
     cst_t$136=caml_new_string("t"),
     cst_core_kernel$226=caml_new_string("core_kernel"),
     cst_t$140=caml_new_string("t"),
     cst_t$138=caml_new_string("t"),
     cst_core_kernel$227=caml_new_string("core_kernel"),
     cst_src_ref_ml=caml_new_string("src/ref.ml"),
     cst$82=caml_new_string(""),
     cst_core_kernel$228=caml_new_string("core_kernel"),
     cst_a$45=caml_new_string("a"),
     cst_src_ref_ml_7_16=caml_new_string("src/ref.ml:7:16"),
     cst_a$46=caml_new_string("a"),
     cst_t$137=caml_new_string("t"),
     cst_src_ref_ml_7_4=caml_new_string("src/ref.ml:7:4"),
     name$29=caml_new_string("src/ref.ml.T.t"),
     cst_a$47=caml_new_string("a"),
     cst_src_ref_ml_18_25=caml_new_string("src/ref.ml:18:25"),
     cst_perms$4=caml_new_string("perms"),
     cst_a$48=caml_new_string("a"),
     cst_t$139=caml_new_string("t"),
     cst_src_ref_ml_18_2=caml_new_string("src/ref.ml:18:2"),
     cst_core_kernel$229=caml_new_string("core_kernel"),
     cst_no_raise$0=caml_new_string("no_raise"),
     cst_With_text_t_should_be_stored_as_an_atom_but_instead_a_list_was_found=
      caml_new_string
       ("With_text.t should be stored as an atom, but instead a list was found."),
     cst$84=caml_new_string(""),
     cst_src_sexp_ml_With_text_t=caml_new_string("src/sexp.ml.With_text.t"),
     cst_t$147=caml_new_string("t"),
     cst_sexp_parse_error=caml_new_string("sexp_parse_error"),
     cst_t$145=caml_new_string("t"),
     cst_src_sexp_ml_t=caml_new_string("src/sexp.ml.t"),
     cst_core_kernel$230=caml_new_string("core_kernel"),
     cst_src_sexp_ml=caml_new_string("src/sexp.ml"),
     cst$83=caml_new_string(""),
     cst_core_kernel$231=caml_new_string("core_kernel"),
     cst_t$141=caml_new_string("t"),
     cst_List$1=caml_new_string("List"),
     cst_Atom$1=caml_new_string("Atom"),
     cst_t$142=caml_new_string("t"),
     cst_src_sexp_ml_10_2=caml_new_string("src/sexp.ml:10:2"),
     cst_t$143=caml_new_string("t"),
     cst_sexp=caml_new_string("sexp"),
     cst_src_sexp_ml_21_2=caml_new_string("src/sexp.ml:21:2"),
     cst_sexp$0=caml_new_string("sexp"),
     cst_a$49=caml_new_string("a"),
     cst_src_sexp_ml_29_15=caml_new_string("src/sexp.ml:29:15"),
     cst_a$50=caml_new_string("a"),
     cst_t$144=caml_new_string("t"),
     cst_src_sexp_ml_29_2=caml_new_string("src/sexp.ml:29:2"),
     cst_text=caml_new_string("text"),
     cst_a$51=caml_new_string("a"),
     cst_src_sexp_ml_54_13=caml_new_string("src/sexp.ml:54:13"),
     cst_value=caml_new_string("value"),
     cst_a$52=caml_new_string("a"),
     cst_t$146=caml_new_string("t"),
     cst_src_sexp_ml_53_2=caml_new_string("src/sexp.ml:53:2"),
     cst_a$53=caml_new_string("a"),
     cst_src_sexp_ml_87_19=caml_new_string("src/sexp.ml:87:19"),
     cst_a$54=caml_new_string("a"),
     cst_no_raise=caml_new_string("no_raise"),
     cst_src_sexp_ml_87_0=caml_new_string("src/sexp.ml:87:0"),
     cst_core_kernel$232=caml_new_string("core_kernel"),
     cst_sexp_opaque$2=caml_new_string("sexp_opaque"),
     cst_sexp_option$0=caml_new_string("sexp_option"),
     cst_sexp_list$0=caml_new_string("sexp_list"),
     cst_sexp_array$0=caml_new_string("sexp_array"),
     cst_ref$0=caml_new_string("ref"),
     cst_option$0=caml_new_string("option"),
     cst_list$0=caml_new_string("list"),
     cst_lazy_t$0=caml_new_string("lazy_t"),
     cst_array$0=caml_new_string("array"),
     cst_core_kernel$233=caml_new_string("core_kernel"),
     cst_src_std_internal_ml=caml_new_string("src/std_internal.ml"),
     cst$85=caml_new_string(""),
     cst_core_kernel$234=caml_new_string("core_kernel"),
     cst_Core_kernel_Std_internal_Bug=
      caml_new_string("Core_kernel__Std_internal.Bug"),
     cst_Core_kernel_Std_internal_C_malloc_exn=
      caml_new_string("Core_kernel__Std_internal.C_malloc_exn"),
     cst_C_malloc_exn=caml_new_string("C_malloc_exn"),
     cst_a$55=caml_new_string("a"),
     cst_src_std_internal_ml_99_19=
      caml_new_string("src/std_internal.ml:99:19"),
     cst_a$56=caml_new_string("a"),
     cst_array=caml_new_string("array"),
     cst_src_std_internal_ml_99_2=caml_new_string("src/std_internal.ml:99:2"),
     name$30=caml_new_string("src/std_internal.ml.array"),
     cst_bool=caml_new_string("bool"),
     cst_src_std_internal_ml_100_2=
      caml_new_string("src/std_internal.ml:100:2"),
     cst_bool$0=caml_new_string("bool"),
     name$31=caml_new_string("src/std_internal.ml.bool"),
     cst_char=caml_new_string("char"),
     cst_src_std_internal_ml_101_2=
      caml_new_string("src/std_internal.ml:101:2"),
     cst_char$0=caml_new_string("char"),
     name$32=caml_new_string("src/std_internal.ml.char"),
     cst_float=caml_new_string("float"),
     cst_src_std_internal_ml_102_2=
      caml_new_string("src/std_internal.ml:102:2"),
     cst_float$0=caml_new_string("float"),
     name$33=caml_new_string("src/std_internal.ml.float"),
     cst_int=caml_new_string("int"),
     cst_src_std_internal_ml_103_2=
      caml_new_string("src/std_internal.ml:103:2"),
     cst_int$0=caml_new_string("int"),
     name$34=caml_new_string("src/std_internal.ml.int"),
     cst_int32=caml_new_string("int32"),
     cst_src_std_internal_ml_104_2=
      caml_new_string("src/std_internal.ml:104:2"),
     cst_int32$0=caml_new_string("int32"),
     name$35=caml_new_string("src/std_internal.ml.int32"),
     cst_int64=caml_new_string("int64"),
     cst_src_std_internal_ml_105_2=
      caml_new_string("src/std_internal.ml:105:2"),
     cst_int64$0=caml_new_string("int64"),
     name$36=caml_new_string("src/std_internal.ml.int64"),
     cst_a$57=caml_new_string("a"),
     cst_src_std_internal_ml_106_19=
      caml_new_string("src/std_internal.ml:106:19"),
     cst_a$58=caml_new_string("a"),
     cst_lazy_t=caml_new_string("lazy_t"),
     cst_src_std_internal_ml_106_2=
      caml_new_string("src/std_internal.ml:106:2"),
     name$37=caml_new_string("src/std_internal.ml.lazy_t"),
     cst_a$59=caml_new_string("a"),
     cst_src_std_internal_ml_107_19=
      caml_new_string("src/std_internal.ml:107:19"),
     cst_a$60=caml_new_string("a"),
     cst_list=caml_new_string("list"),
     cst_src_std_internal_ml_107_2=
      caml_new_string("src/std_internal.ml:107:2"),
     name$38=caml_new_string("src/std_internal.ml.list"),
     cst_nativeint=caml_new_string("nativeint"),
     cst_src_std_internal_ml_108_2=
      caml_new_string("src/std_internal.ml:108:2"),
     cst_nativeint$0=caml_new_string("nativeint"),
     name$39=caml_new_string("src/std_internal.ml.nativeint"),
     cst_a$61=caml_new_string("a"),
     cst_src_std_internal_ml_109_19=
      caml_new_string("src/std_internal.ml:109:19"),
     cst_a$62=caml_new_string("a"),
     cst_option=caml_new_string("option"),
     cst_src_std_internal_ml_109_2=
      caml_new_string("src/std_internal.ml:109:2"),
     name$40=caml_new_string("src/std_internal.ml.option"),
     cst_string=caml_new_string("string"),
     cst_src_std_internal_ml_110_2=
      caml_new_string("src/std_internal.ml:110:2"),
     cst_string$0=caml_new_string("string"),
     name$41=caml_new_string("src/std_internal.ml.string"),
     cst_bytes=caml_new_string("bytes"),
     cst_src_std_internal_ml_111_2=
      caml_new_string("src/std_internal.ml:111:2"),
     cst_bytes$0=caml_new_string("bytes"),
     name$42=caml_new_string("src/std_internal.ml.bytes"),
     cst_a$63=caml_new_string("a"),
     cst_src_std_internal_ml_112_19=
      caml_new_string("src/std_internal.ml:112:19"),
     cst_a$64=caml_new_string("a"),
     cst_ref=caml_new_string("ref"),
     cst_src_std_internal_ml_112_2=
      caml_new_string("src/std_internal.ml:112:2"),
     name$43=caml_new_string("src/std_internal.ml.ref"),
     cst_unit=caml_new_string("unit"),
     cst_src_std_internal_ml_113_2=
      caml_new_string("src/std_internal.ml:113:2"),
     cst_unit$0=caml_new_string("unit"),
     name$44=caml_new_string("src/std_internal.ml.unit"),
     cst_float_array=caml_new_string("float_array"),
     cst_src_std_internal_ml_116_2=
      caml_new_string("src/std_internal.ml:116:2"),
     cst_float_array$0=caml_new_string("float_array"),
     name$45=caml_new_string("src/std_internal.ml.float_array"),
     cst_a$65=caml_new_string("a"),
     cst_src_std_internal_ml_165_22=
      caml_new_string("src/std_internal.ml:165:22"),
     cst_a$66=caml_new_string("a"),
     cst_sexp_array=caml_new_string("sexp_array"),
     cst_src_std_internal_ml_165_0=
      caml_new_string("src/std_internal.ml:165:0"),
     name$46=caml_new_string("src/std_internal.ml.sexp_array"),
     cst_sexp_bool=caml_new_string("sexp_bool"),
     cst_src_std_internal_ml_166_0=
      caml_new_string("src/std_internal.ml:166:0"),
     cst_sexp_bool$0=caml_new_string("sexp_bool"),
     name$47=caml_new_string("src/std_internal.ml.sexp_bool"),
     cst_a$67=caml_new_string("a"),
     cst_src_std_internal_ml_167_22=
      caml_new_string("src/std_internal.ml:167:22"),
     cst_a$68=caml_new_string("a"),
     cst_sexp_list=caml_new_string("sexp_list"),
     cst_src_std_internal_ml_167_0=
      caml_new_string("src/std_internal.ml:167:0"),
     name$48=caml_new_string("src/std_internal.ml.sexp_list"),
     cst_a$69=caml_new_string("a"),
     cst_src_std_internal_ml_168_22=
      caml_new_string("src/std_internal.ml:168:22"),
     cst_a$70=caml_new_string("a"),
     cst_sexp_option=caml_new_string("sexp_option"),
     cst_src_std_internal_ml_168_0=
      caml_new_string("src/std_internal.ml:168:0"),
     name$49=caml_new_string("src/std_internal.ml.sexp_option"),
     cst_a$71=caml_new_string("a"),
     cst_src_std_internal_ml_170_22=
      caml_new_string("src/std_internal.ml:170:22"),
     cst_a$72=caml_new_string("a"),
     cst_sexp_opaque$1=caml_new_string("sexp_opaque"),
     cst_src_std_internal_ml_170_0=
      caml_new_string("src/std_internal.ml:170:0"),
     name$50=caml_new_string("src/std_internal.ml.sexp_opaque"),
     cst_core_kernel$235=caml_new_string("core_kernel"),
     cst_3k$6=caml_new_string("3k"),
     cst_2_86102e_06g=caml_new_string("2.86102e-06g"),
     cst_3k$5=caml_new_string("3k"),
     cst_0_00292969m=caml_new_string("0.00292969m"),
     cst_3k$4=caml_new_string("3k"),
     cst_3k$2=caml_new_string("3k"),
     cst_3k$3=caml_new_string("3k"),
     cst_3072b=caml_new_string("3072b"),
     cst_3k$1=caml_new_string("3k"),
     cst_3g=caml_new_string("3g"),
     cst_3g$0=caml_new_string("3g"),
     cst_3m=caml_new_string("3m"),
     cst_3m$0=caml_new_string("3m"),
     cst_3k=caml_new_string("3k"),
     cst_3k$0=caml_new_string("3k"),
     cst_3w=caml_new_string("3w"),
     cst_3b=caml_new_string("3b"),
     cst_3b$0=caml_new_string("3b"),
     cst_src_byte_units_ml$0=caml_new_string("src/byte_units.ml"),
     cst_f_Largest_3b_3b=caml_new_string(': <<f `Largest "3b" "3b">>'),
     cst_src_byte_units_ml$1=caml_new_string("src/byte_units.ml"),
     cst_f_Largest_3w_sprintf_gb_3_0_bytes=
      caml_new_string
       (': <<f `Largest "3w" (sprintf "%gb" (3.0 *. bytes_[...]>>'),
     cst_src_byte_units_ml$2=caml_new_string("src/byte_units.ml"),
     cst_f_Largest_3k_3k=caml_new_string(': <<f `Largest "3k" "3k">>'),
     cst_src_byte_units_ml$3=caml_new_string("src/byte_units.ml"),
     cst_f_Largest_3m_3m=caml_new_string(': <<f `Largest "3m" "3m">>'),
     cst_src_byte_units_ml$4=caml_new_string("src/byte_units.ml"),
     cst_f_Largest_3g_3g=caml_new_string(': <<f `Largest "3g" "3g">>'),
     cst_src_byte_units_ml$5=caml_new_string("src/byte_units.ml"),
     cst_f_Specific_Bytes_3k_3072b=
      caml_new_string(': <<f (`Specific `Bytes) "3k" "3072b">>'),
     cst_src_byte_units_ml$6=caml_new_string("src/byte_units.ml"),
     cst_f_Specific_Kilobytes_3k_3k=
      caml_new_string(': <<f (`Specific `Kilobytes) "3k" "3k">>'),
     cst_src_byte_units_ml$7=caml_new_string("src/byte_units.ml"),
     cst_f_Specific_Megabytes_3k_0_00292969m=
      caml_new_string(': <<f (`Specific `Megabytes) "3k" "0.00292969m">>'),
     cst_src_byte_units_ml$8=caml_new_string("src/byte_units.ml"),
     cst_f_Specific_Gigabytes_3k_2_86102e_06g=
      caml_new_string(': <<f (`Specific `Gigabytes) "3k" "2.86102e-06g">>'),
     cst_src_byte_units_ml$9=caml_new_string("src/byte_units.ml"),
     cst_f_Specific_Words_3k_sprintf_gw_3=
      caml_new_string
       (': <<f (`Specific `Words) "3k" (sprintf "%gw" ((3.[...]>>'),
     err$4=[1,caml_new_string("src/byte_units.ml.Measure.t")],
     cst_Bytes$1=caml_new_string("Bytes"),
     cst_Gigabytes$1=caml_new_string("Gigabytes"),
     cst_Kilobytes$1=caml_new_string("Kilobytes"),
     cst_Megabytes$1=caml_new_string("Megabytes"),
     cst_Words$1=caml_new_string("Words"),
     cst_Bytes$2=caml_new_string("Bytes"),
     cst_Gigabytes$2=caml_new_string("Gigabytes"),
     cst_Kilobytes$2=caml_new_string("Kilobytes"),
     cst_Megabytes$2=caml_new_string("Megabytes"),
     cst_Words$2=caml_new_string("Words"),
     cst_Bytes=caml_new_string("Bytes"),
     cst_Gigabytes=caml_new_string("Gigabytes"),
     cst_Kilobytes=caml_new_string("Kilobytes"),
     cst_Megabytes=caml_new_string("Megabytes"),
     cst_Words=caml_new_string("Words"),
     cst_Bytes$0=caml_new_string("Bytes"),
     cst_Gigabytes$0=caml_new_string("Gigabytes"),
     cst_Kilobytes$0=caml_new_string("Kilobytes"),
     cst_Megabytes$0=caml_new_string("Megabytes"),
     cst_Words$0=caml_new_string("Words"),
     cst_core_kernel$236=caml_new_string("core_kernel"),
     cst_src_byte_units_ml=caml_new_string("src/byte_units.ml"),
     cst$86=caml_new_string(""),
     cst_core_kernel$237=caml_new_string("core_kernel"),
     tp_loc$22=caml_new_string("src/byte_units.ml.External.t"),
     tp_loc$23=caml_new_string("src/byte_units.ml.External.t"),
     tp_loc$24=caml_new_string("src/byte_units.ml.Measure.t"),
     tp_loc$25=caml_new_string("src/byte_units.ml.Measure.t"),
     cst_Words$3=caml_new_string("Words"),
     cst_Gigabytes$3=caml_new_string("Gigabytes"),
     cst_Megabytes$3=caml_new_string("Megabytes"),
     cst_Kilobytes$3=caml_new_string("Kilobytes"),
     cst_Bytes$3=caml_new_string("Bytes"),
     cst_src_byte_units_ml_30_11=caml_new_string("src/byte_units.ml:30:11"),
     cst_t$148=caml_new_string("t"),
     cst_src_byte_units_ml_30_2=caml_new_string("src/byte_units.ml:30:2"),
     cst_t$149=caml_new_string("t"),
     cst_t$150=caml_new_string("t"),
     cst_src_byte_units_ml_44_4=caml_new_string("src/byte_units.ml:44:4"),
     cst_t$151=caml_new_string("t"),
     cst_src_byte_units_ml$10=caml_new_string("src/byte_units.ml"),
     cst_of_to_string=caml_new_string(": {of,to}_string"),
     cst_core_kernel$238=caml_new_string("core_kernel"),
     pos$67=caml_new_string("src/bigstring.ml:1124:27"),
     pos$66=caml_new_string("src/bigstring.ml:1119:27"),
     pos$65=caml_new_string("src/bigstring.ml:1117:27"),
     cst_get_exn=caml_new_string("get_exn"),
     cst_test_int64=caml_new_string("test_int64"),
     cst_src_bigstring_ml$39=caml_new_string("src/bigstring.ml"),
     cst_test_accessor_buf_Int_to_string_fget_unsafe=
      caml_new_string
       (": <<test_accessor ~buf Int.to_string ~fget:unsafe[...]>>"),
     cst_src_bigstring_ml$40=caml_new_string("src/bigstring.ml"),
     cst_test_accessor_buf_Int_to_string_fget_unsafe$0=
      caml_new_string
       (": <<test_accessor ~buf Int.to_string ~fget:unsafe[...]>>"),
     cst_src_bigstring_ml$41=caml_new_string("src/bigstring.ml"),
     cst_test_accessor_buf_Int_to_string_fget_unsafe$1=
      caml_new_string
       (": <<test_accessor ~buf Int.to_string ~fget:unsafe[...]>>"),
     cst_src_bigstring_ml$42=caml_new_string("src/bigstring.ml"),
     cst_test_accessor_buf_Int_to_string_fget_unsafe$2=
      caml_new_string
       (": <<test_accessor ~buf Int.to_string ~fget:unsafe[...]>>"),
     cst_src_bigstring_ml$43=caml_new_string("src/bigstring.ml"),
     cst_test_accessor_buf_Int_to_string_fget_unsafe$3=
      caml_new_string
       (": <<test_accessor ~buf Int.to_string ~fget:unsafe[...]>>"),
     cst_src_bigstring_ml$44=caml_new_string("src/bigstring.ml"),
     cst_test_accessor_buf_Int_to_string_fget_unsafe$4=
      caml_new_string
       (": <<test_accessor ~buf Int.to_string ~fget:unsafe[...]>>"),
     cst_src_bigstring_ml$45=caml_new_string("src/bigstring.ml"),
     cst_test_accessor_buf_Int_to_string_fget_unsafe$5=
      caml_new_string
       (": <<test_accessor ~buf Int.to_string ~fget:unsafe[...]>>"),
     cst_src_bigstring_ml$46=caml_new_string("src/bigstring.ml"),
     cst_test_accessor_buf_Int_to_string_fget_unsafe$6=
      caml_new_string
       (": <<test_accessor ~buf Int.to_string ~fget:unsafe[...]>>"),
     cst_src_bigstring_ml$47=caml_new_string("src/bigstring.ml"),
     cst_List_for_all_unsafe_get_uint64_be_exn_un=
      caml_new_string
       (": <<List.for_all   [(unsafe_get_uint64_be_exn, un[...]>>"),
     cst_src_bigstring_ml$48=caml_new_string("src/bigstring.ml"),
     cst_List_iter_000_000_000_000_000_000_000=
      caml_new_string
       (': <<List.iter   ["@\\000\\000\\000\\000\\000\\000\\000";[...]>>'),
     cst_src_bigstring_ml$49=caml_new_string("src/bigstring.ml"),
     cst_test_accessor_buf_Int64_to_string_fget_unsa=
      caml_new_string
       (": <<test_accessor ~buf Int64.to_string ~fget:unsa[...]>>"),
     cst_src_bigstring_ml$50=caml_new_string("src/bigstring.ml"),
     cst_test_accessor_buf_Int64_to_string_fget_unsa$0=
      caml_new_string
       (": <<test_accessor ~buf Int64.to_string ~fget:unsa[...]>>"),
     cst_src_bigstring_ml$51=caml_new_string("src/bigstring.ml"),
     cst_test_accessor_buf_Int64_to_string_fget_unsa$1=
      caml_new_string
       (": <<test_accessor ~buf Int64.to_string ~fget:unsa[...]>>"),
     cst_src_bigstring_ml$52=caml_new_string("src/bigstring.ml"),
     cst_unsafe_get_int64_le=caml_new_string(": unsafe_get_int64_le"),
     cst_src_bigstring_ml$53=caml_new_string("src/bigstring.ml"),
     cst_unsafe_get_int64_be=caml_new_string(": unsafe_get_int64_be"),
     cst_set_uint32_be=caml_new_string("set_uint32_be"),
     cst_set_uint32_le=caml_new_string("set_uint32_le"),
     loc$0=caml_new_string("set_int8"),
     loc=caml_new_string("set_uint8"),
     cst_set_uint64_le=caml_new_string("set_uint64_le"),
     cst_set_uint64_be=caml_new_string("set_uint64_be"),
     cst_unsafe_read_uint64_value_cannot_be_represented_unboxed=
      caml_new_string
       ("unsafe_read_uint64: value cannot be represented unboxed!"),
     cst_unsafe_read_int64_value_cannot_be_represented_unboxed=
      caml_new_string
       ("unsafe_read_int64: value cannot be represented unboxed!"),
     cst_write_int32_int$0=caml_new_string("write_int32_int"),
     cst_write_int32_int=caml_new_string("write_int32_int"),
     cst_write_uint16$0=caml_new_string("write_uint16"),
     cst_write_uint16=caml_new_string("write_uint16"),
     cst_write_int16$0=caml_new_string("write_int16"),
     cst_write_int16=caml_new_string("write_int16"),
     pos$64=caml_new_string("src/bigstring.ml:513:21"),
     cst_set_64=caml_new_string("set_64"),
     cst_set_32=caml_new_string("set_32"),
     cst_set_16=caml_new_string("set_16"),
     cst_get_64=caml_new_string("get_64"),
     cst_get_32=caml_new_string("get_32"),
     cst_get_16=caml_new_string("get_16"),
     cst_find=caml_new_string("find"),
     cst_test$1=caml_new_string("\x07\0\0\0\0\0\0\0\x01\x01\x04test"),
     cst_test$2=caml_new_string("test"),
     cst$90=caml_new_string("\x01\0\0\0\0\0\0\0{"),
     cst_foo$7=caml_new_string("\x04\0\0\0\0\0\0\0\x03foo"),
     cst_foo$8=caml_new_string("foo"),
     pos$63=caml_new_string("src/bigstring.ml:415:21"),
     cst_src_bigstring_ml$34=caml_new_string("src/bigstring.ml"),
     cst_test_String_bin_writer_t_foo_expect_00=
      caml_new_string
       (': <<test String.bin_writer_t "foo"   ~expect:"\\00[...]>>'),
     cst_src_bigstring_ml$35=caml_new_string("src/bigstring.ml"),
     cst_test_Int_bin_writer_t_123_expect_001_000_0=
      caml_new_string
       (': <<test Int.bin_writer_t 123 ~expect:"\\001\\000\\0[...]>>'),
     cst_src_bigstring_ml$36=caml_new_string("src/bigstring.ml"),
     cst_test_Or_error_bin_writer_t_Unit_bin_writer_t=
      caml_new_string
       (": <<test (Or_error.bin_writer_t Unit.bin_writer_t[...]>>"),
     cst_Bigstring_write_bin_prot_negative_pos=
      caml_new_string("Bigstring.write_bin_prot: negative pos"),
     cst_Bigstring_write_bin_prot_not_enough_room=
      caml_new_string("Bigstring.write_bin_prot: not enough room"),
     cst_Bigstring_write_bin_prot_bug=
      caml_new_string("Bigstring.write_bin_prot bug!"),
     cst_not_enough_data=caml_new_string("not enough data"),
     cst_Invalid_data=caml_new_string("Invalid data"),
     cst_foo$6=caml_new_string("\x03foo"),
     cst_foo$5=caml_new_string("\x03foo"),
     cst_foo$4=caml_new_string("\x07foo"),
     cst_foo$3=caml_new_string("\x03foo"),
     cst_foo$2=caml_new_string("\x03foo"),
     cst_suffix$0=caml_new_string("suffix"),
     cst_foo$1=caml_new_string("\x03foo"),
     cst_prefix=caml_new_string("prefix"),
     cst_foo$0=caml_new_string("\x03foo"),
     cst_foo=caml_new_string("\x03foo"),
     cst_suffix=caml_new_string("*suffix"),
     cst$88=caml_new_string("*"),
     pos$62=caml_new_string("src/bigstring.ml:343:21"),
     cst_src_bigstring_ml$23=caml_new_string("src/bigstring.ml"),
     cst_test_int_size_1_expect_Ok_42=
      caml_new_string(': <<test_int ~size:1 "*" ~expect:(`Ok 42)>>'),
     cst_src_bigstring_ml$24=caml_new_string("src/bigstring.ml"),
     cst_test_int_size_1_suffix_expect_Ok_42=
      caml_new_string(': <<test_int ~size:1 "*suffix" ~expect:(`Ok 42)>>'),
     cst_src_bigstring_ml$25=caml_new_string("src/bigstring.ml"),
     cst_test_string_size_4_003foo_expect_Ok_foo=
      caml_new_string
       (': <<test_string ~size:4 "\\003foo" ~expect:(`Ok "foo")>>'),
     cst_src_bigstring_ml$26=caml_new_string("src/bigstring.ml"),
     cst_test_string_size_4_003foo_len_12_expect=
      caml_new_string
       (': <<test_string ~size:4 "\\003foo" ~len:12 ~expect[...]>>'),
     cst_src_bigstring_ml$27=caml_new_string("src/bigstring.ml"),
     cst_pos_0$0=caml_new_string(": pos <> 0"),
     cst_src_bigstring_ml$28=caml_new_string("src/bigstring.ml"),
     cst_negative_size=caml_new_string(": negative size"),
     cst_src_bigstring_ml$29=caml_new_string("src/bigstring.ml"),
     cst_wrong_size=caml_new_string(": wrong size"),
     cst_src_bigstring_ml$30=caml_new_string("src/bigstring.ml"),
     cst_bad_bin_prot=caml_new_string(": bad bin-prot"),
     cst_src_bigstring_ml$31=caml_new_string("src/bigstring.ml"),
     cst_len_too_short=caml_new_string(": len too short"),
     cst_src_bigstring_ml$32=caml_new_string("src/bigstring.ml"),
     cst_no_header=caml_new_string(": no header"),
     cst_pos_ref_expected_pos=caml_new_string("pos_ref <> expected_pos"),
     cst_read_bin_prot_verbose_errors=
      caml_new_string("read_bin_prot_verbose_errors"),
     cst_negative_element_length_d=
      caml_new_string("negative element length %d"),
     cst_cat$7=caml_new_string("cat"),
     cst_dog$0=caml_new_string("dog"),
     cst_dog=caml_new_string("dog"),
     cst_cat$6=caml_new_string("cat"),
     cst_cat$5=caml_new_string("cat"),
     cst_c$0=caml_new_string("c"),
     cst_c=caml_new_string("c"),
     cst_cat$4=caml_new_string("cat"),
     cst_caz=caml_new_string("caz"),
     cst_cat$3=caml_new_string("cat"),
     cst_cab=caml_new_string("cab"),
     cst_cat$2=caml_new_string("cat"),
     cst_cat$0=caml_new_string("cat"),
     cst_cat$1=caml_new_string("cat"),
     cst_cat=caml_new_string("cat"),
     pos$61=caml_new_string("src/bigstring.ml:275:21"),
     pos$60=caml_new_string("src/bigstring.ml:274:21"),
     cst_src_bigstring_ml$14=caml_new_string("src/bigstring.ml"),
     cst_check_t_t_0=caml_new_string(": <<check t t 0>>"),
     cst_src_bigstring_ml$15=caml_new_string("src/bigstring.ml"),
     cst_check_of_string_cat_of_string_cat_0=
      caml_new_string(': <<check (of_string "cat") (of_string "cat") 0>>'),
     cst_src_bigstring_ml$16=caml_new_string("src/bigstring.ml"),
     cst_check_of_string_cat_of_string_cab_1=
      caml_new_string(': <<check (of_string "cat") (of_string "cab") 1>>'),
     cst_src_bigstring_ml$17=caml_new_string("src/bigstring.ml"),
     cst_check_of_string_cat_of_string_caz_1=
      caml_new_string
       (': <<check (of_string "cat") (of_string "caz") (~- 1)>>'),
     cst_src_bigstring_ml$18=caml_new_string("src/bigstring.ml"),
     cst_check_of_string_cat_of_string_c_1=
      caml_new_string(': <<check (of_string "cat") (of_string "c") 1>>'),
     cst_src_bigstring_ml$19=caml_new_string("src/bigstring.ml"),
     cst_check_of_string_c_of_string_cat_1=
      caml_new_string(': <<check (of_string "c") (of_string "cat") (~- 1)>>'),
     cst_src_bigstring_ml$20=caml_new_string("src/bigstring.ml"),
     cst_check_of_string_cat_of_string_dog_1=
      caml_new_string
       (': <<check (of_string "cat") (of_string "dog") (~- 1)>>'),
     cst_src_bigstring_ml$21=caml_new_string("src/bigstring.ml"),
     cst_check_of_string_dog_of_string_cat_1=
      caml_new_string(': <<check (of_string "dog") (of_string "cat") 1>>'),
     pos$59=caml_new_string("src/bigstring.ml:247:15"),
     pos$58=caml_new_string("src/bigstring.ml:236:15"),
     pos$57=caml_new_string("src/bigstring.ml:188:21"),
     cst_src_bigstring_ml$0=caml_new_string("src/bigstring.ml"),
     cst_test=caml_new_string(": <<test []>>"),
     cst_src_bigstring_ml$1=caml_new_string("src/bigstring.ml"),
     cst_test$0=caml_new_string(': <<test [""]>>'),
     cst_src_bigstring_ml$2=caml_new_string("src/bigstring.ml"),
     cst_test_foo=caml_new_string(': <<test ["foo"]>>'),
     cst_src_bigstring_ml$3=caml_new_string("src/bigstring.ml"),
     cst_test_foo_bar=caml_new_string(': <<test ["foo"; "bar"]>>'),
     cst_src_bigstring_ml$4=caml_new_string("src/bigstring.ml"),
     cst_test_foo_bar_baz=caml_new_string(': <<test ["foo"; "bar"; "baz"]>>'),
     cst_src_bigstring_ml$5=caml_new_string("src/bigstring.ml"),
     cst_test_sep=caml_new_string(': <<test ~sep:"," []>>'),
     cst_src_bigstring_ml$6=caml_new_string("src/bigstring.ml"),
     cst_test_sep$0=caml_new_string(': <<test ~sep:"," [""]>>'),
     cst_src_bigstring_ml$7=caml_new_string("src/bigstring.ml"),
     cst_test_sep_foo=caml_new_string(': <<test ~sep:"," ["foo"]>>'),
     cst_src_bigstring_ml$8=caml_new_string("src/bigstring.ml"),
     cst_test_sep_foo_bar=
      caml_new_string(': <<test ~sep:"," ["foo"; "bar"]>>'),
     cst_src_bigstring_ml$9=caml_new_string("src/bigstring.ml"),
     cst_test_sep_foo_bar_baz=
      caml_new_string(': <<test ~sep:"," ["foo"; "bar"; "baz"]>>'),
     cst_src_bigstring_ml$10=caml_new_string("src/bigstring.ml"),
     cst_test_sep_Strings_of_different=
      caml_new_string
       (': <<test ~sep:",.?" ["Strings"; "of"; "different"[...]>>'),
     cst_pos_0=caml_new_string(": pos < 0"),
     cst_len_0=caml_new_string(": len < 0"),
     cst_core_kernel$239=caml_new_string("core_kernel"),
     cst_src_bigstring_ml=caml_new_string("src/bigstring.ml"),
     cst$87=caml_new_string(""),
     cst_core_kernel$240=caml_new_string("core_kernel"),
     cst_t$152=caml_new_string("t"),
     cst_src_bigstring_ml_10_2=caml_new_string("src/bigstring.ml:10:2"),
     cst_t$153=caml_new_string("t"),
     cst_src_bigstring_ml$11=caml_new_string("src/bigstring.ml"),
     cst_concat=caml_new_string(": concat"),
     cst_src_bigstring_ml$12=caml_new_string("src/bigstring.ml"),
     cst_List_iter_f_check_a_ab_a=
      caml_new_string
       (': <<List.iter ~f:check   ["";   "a";   "ab";   "a[...]>>'),
     cst_src_bigstring_ml$13=caml_new_string("src/bigstring.ml"),
     cst_List_iter_f_check_a_ab_a$0=
      caml_new_string
       (': <<List.iter ~f:check   ["";   "a";   "ab";   "a[...]>>'),
     cst_t_frozen=caml_new_string("t_frozen"),
     cst_src_bigstring_ml_256_0=caml_new_string("src/bigstring.ml:256:0"),
     cst_t_frozen$0=caml_new_string("t_frozen"),
     cst_src_bigstring_ml$22=caml_new_string("src/bigstring.ml"),
     cst_comparison=caml_new_string(": comparison"),
     cst_src_bigstring_ml$33=caml_new_string("src/bigstring.ml"),
     cst$89=caml_new_string(""),
     cst_src_bigstring_ml$37=caml_new_string("src/bigstring.ml"),
     cst$91=caml_new_string(""),
     cst_src_bigstring_ml$38=caml_new_string("src/bigstring.ml"),
     cst_List_iter_0_0_1_1_0x7fff_32767=
      caml_new_string
       (": <<List.iter   [(0, 0); (1, 1); (0x7fff, 32767);[...]>>"),
     cst_src_bigstring_ml$54=caml_new_string("src/bigstring.ml"),
     cst_unsafe_binary_accessors=caml_new_string(": unsafe binary accessors"),
     cst_core_kernel$241=caml_new_string("core_kernel"),
     cst_core_kernel$242=caml_new_string("core_kernel"),
     cst_src_core_bin_prot_ml=caml_new_string("src/core_bin_prot.ml"),
     cst$92=caml_new_string(""),
     cst_core_kernel$243=caml_new_string("core_kernel"),
     cst_core_kernel$244=caml_new_string("core_kernel"),
     pos$68=caml_new_string("src/binable.ml:34:21"),
     cst_string$1=caml_new_string("string"),
     cst_bigstring=caml_new_string("bigstring"),
     cst_t$154=caml_new_string("t"),
     cst_src_binable_ml_11_24=caml_new_string("src/binable.ml:11:24"),
     cst_t$155=caml_new_string("t"),
     cst_core_kernel$245=caml_new_string("core_kernel"),
     cst_src_binable_ml=caml_new_string("src/binable.ml"),
     cst$93=caml_new_string(""),
     cst_core_kernel$246=caml_new_string("core_kernel"),
     cst_src_binable_ml$0=caml_new_string("src/binable.ml"),
     cst_List_iter_min_int_min_int_2_1_0_1=
      caml_new_string
       (": <<List.iter [min_int; min_int / 2; (-1); 0; 1; [...]>>"),
     cst_src_binable_ml$1=caml_new_string("src/binable.ml"),
     cst_Of_sexpable=caml_new_string(": Of_sexpable"),
     cst_core_kernel$247=caml_new_string("core_kernel"),
     cst_bin_io_deserialization_mismatch$0=
      caml_new_string("bin-io deserialization mismatch"),
     cst_serialization_mismatch=caml_new_string("serialization mismatch"),
     cst_sexp_deserialization_msimatch=
      caml_new_string("sexp deserialization msimatch"),
     cst_expected_list_when_serializing_unordered_container=
      caml_new_string("expected list when serializing unordered container"),
     cst_sexp_serialization_mismatch$0=
      caml_new_string("sexp serialization mismatch"),
     cst_src_stable_unit_test_ml$3=caml_new_string("src/stable_unit_test.ml"),
     cst_sexp$1=caml_new_string(": sexp"),
     cst_src_stable_unit_test_ml$4=caml_new_string("src/stable_unit_test.ml"),
     cst_bin_io$0=caml_new_string(": bin_io"),
     cst_bin_io_serialization_mismatch=
      caml_new_string("bin_io serialization mismatch"),
     cst_bin_io_deserialization_mismatch=
      caml_new_string("bin_io deserialization mismatch"),
     cst_src_stable_unit_test_ml$2=caml_new_string("src/stable_unit_test.ml"),
     cst_bin_io=caml_new_string(": bin_io"),
     cst_sexp_serialization_mismatch=
      caml_new_string("sexp serialization mismatch"),
     cst_src_stable_unit_test_ml$1=caml_new_string("src/stable_unit_test.ml"),
     cst_sexp_serialization=caml_new_string(": sexp serialization"),
     cst_sexp_deserialization_mismatch=
      caml_new_string("sexp deserialization mismatch"),
     cst_could_not_deserialize_sexp=
      caml_new_string("could not deserialize sexp"),
     cst_src_stable_unit_test_ml$0=caml_new_string("src/stable_unit_test.ml"),
     cst_sexp_deserialization=caml_new_string(": sexp deserialization"),
     cst_core_kernel$248=caml_new_string("core_kernel"),
     cst_src_stable_unit_test_ml=caml_new_string("src/stable_unit_test.ml"),
     cst$94=caml_new_string(""),
     cst_core_kernel$249=caml_new_string("core_kernel"),
     cst_core_kernel$250=caml_new_string("core_kernel"),
     cst_a_4_VN_g$0=
      caml_new_string("\x9d\xd4\xe4a&\x8c\x804\xf5\xc8VN\x15\\g\xa6"),
     cst_9dd4e461268c8034f5c8564e155c67a6=
      caml_new_string("9dd4e461268c8034f5c8564e155c67a6"),
     cst_x$0=caml_new_string("x"),
     cst_B$2=
      caml_new_string
       ("\xd4\x1d\x8c\xd9\x8f\0\xb2\x04\xe9\x80\t\x98\xec\xf8B~"),
     cst_d41d8cd98f00b204e9800998ecf8427e=
      caml_new_string("d41d8cd98f00b204e9800998ecf8427e"),
     cst$97=caml_new_string(""),
     cst_a_4_VN_g=
      caml_new_string("\x10\x9d\xd4\xe4a&\x8c\x804\xf5\xc8VN\x15\\g\xa6"),
     cst_157_212_228a_140_1284_245_200VN_021_g_166=
      caml_new_string
       ('"\\157\\212\\228a&\\140\\1284\\245\\200VN\\021\\\\g\\166"'),
     cst_x=caml_new_string("x"),
     cst_B$1=
      caml_new_string
       ("\x10\xd4\x1d\x8c\xd9\x8f\0\xb2\x04\xe9\x80\t\x98\xec\xf8B~"),
     cst_212_029_140_217_143_000_178_004_233_128_t_152_236_248B=
      caml_new_string
       ('"\\212\\029\\140\\217\\143\\000\\178\\004\\233\\128\\t\\152\\236\\248B~"'),
     cst$96=caml_new_string(""),
     cst_core_kernel$251=caml_new_string("core_kernel"),
     cst_src_md5_ml=caml_new_string("src/md5.ml"),
     cst$95=caml_new_string(""),
     cst_core_kernel$252=caml_new_string("core_kernel"),
     cst_src_md5_ml$0=caml_new_string("src/md5.ml"),
     cst_Md5_As_binary_string_V1=caml_new_string(": Md5.As_binary_string.V1"),
     cst_src_md5_ml$1=caml_new_string("src/md5.ml"),
     cst_Md5_V1=caml_new_string(": Md5.V1"),
     cst_core_kernel$253=caml_new_string("core_kernel"),
     cst_core_kernel$254=caml_new_string("core_kernel"),
     cst_src_zone_intf_ml=caml_new_string("src/zone_intf.ml"),
     cst$98=caml_new_string(""),
     cst_core_kernel$255=caml_new_string("core_kernel"),
     cst_core_kernel$256=caml_new_string("core_kernel"),
     cst_UTC=caml_new_string("UTC"),
     cst$100=caml_new_string("-"),
     cst$101=caml_new_string("+"),
     cst_TZif=caml_new_string("TZif"),
     cst_magic_characters_TZif_not_present=
      caml_new_string("magic characters TZif not present"),
     cst_expected_version_found_nothing=
      caml_new_string("expected version, found nothing"),
     cst_missing_terminating_character_in_input_abbreviations=
      caml_new_string
       ("missing \0 terminating character in input_abbreviations"),
     cst_default_local_time_type$0=caml_new_string("default_local_time_type"),
     cst_digest$0=caml_new_string("digest"),
     cst_last_regime_index$0=caml_new_string("last_regime_index"),
     cst_leap_seconds$0=caml_new_string("leap_seconds"),
     cst_name$0=caml_new_string("name"),
     cst_original_filename$0=caml_new_string("original_filename"),
     cst_transitions$0=caml_new_string("transitions"),
     cst_leap_seconds$1=caml_new_string("leap_seconds"),
     cst_default_local_time_type$1=caml_new_string("default_local_time_type"),
     cst_last_regime_index$1=caml_new_string("last_regime_index"),
     cst_transitions$1=caml_new_string("transitions"),
     cst_digest$1=caml_new_string("digest"),
     cst_original_filename$1=caml_new_string("original_filename"),
     cst_name$1=caml_new_string("name"),
     cst_src_zone_ml_Stable_Full_data_V1_t=
      caml_new_string("src/zone.ml.Stable.Full_data.V1.t"),
     cst_new_regime$0=caml_new_string("new_regime"),
     cst_start_time_in_seconds_since_epoch$0=
      caml_new_string("start_time_in_seconds_since_epoch"),
     cst_new_regime$1=caml_new_string("new_regime"),
     cst_start_time_in_seconds_since_epoch$1=
      caml_new_string("start_time_in_seconds_since_epoch"),
     cst_seconds$0=caml_new_string("seconds"),
     cst_time_in_seconds_since_epoch$0=
      caml_new_string("time_in_seconds_since_epoch"),
     cst_seconds$1=caml_new_string("seconds"),
     cst_time_in_seconds_since_epoch$1=
      caml_new_string("time_in_seconds_since_epoch"),
     cst_abbrv$0=caml_new_string("abbrv"),
     cst_is_dst$0=caml_new_string("is_dst"),
     cst_utc_offset_in_seconds$0=caml_new_string("utc_offset_in_seconds"),
     cst_abbrv$1=caml_new_string("abbrv"),
     cst_is_dst$1=caml_new_string("is_dst"),
     cst_utc_offset_in_seconds$1=caml_new_string("utc_offset_in_seconds"),
     cst_core_kernel$257=caml_new_string("core_kernel"),
     cst_src_zone_ml=caml_new_string("src/zone.ml"),
     cst$99=caml_new_string(""),
     cst_core_kernel$258=caml_new_string("core_kernel"),
     cst_Core_kernel_Zone_Invalid_file_format=
      caml_new_string("Core_kernel__Zone.Invalid_file_format"),
     cst_abbrv=caml_new_string("abbrv"),
     cst_is_dst=caml_new_string("is_dst"),
     cst_utc_offset_in_seconds=caml_new_string("utc_offset_in_seconds"),
     cst_t$156=caml_new_string("t"),
     cst_src_zone_ml_48_8=caml_new_string("src/zone.ml:48:8"),
     cst_t$157=caml_new_string("t"),
     tp_loc$26=caml_new_string("src/zone.ml.Stable.Full_data.V1.Regime.t"),
     cst_seconds=caml_new_string("seconds"),
     cst_time_in_seconds_since_epoch=
      caml_new_string("time_in_seconds_since_epoch"),
     cst_t$158=caml_new_string("t"),
     cst_src_zone_ml_60_8=caml_new_string("src/zone.ml:60:8"),
     cst_t$159=caml_new_string("t"),
     tp_loc$27=
      caml_new_string("src/zone.ml.Stable.Full_data.V1.Leap_second.t"),
     cst_new_regime=caml_new_string("new_regime"),
     cst_start_time_in_seconds_since_epoch=
      caml_new_string("start_time_in_seconds_since_epoch"),
     cst_t$160=caml_new_string("t"),
     cst_src_zone_ml_68_8=caml_new_string("src/zone.ml:68:8"),
     cst_t$161=caml_new_string("t"),
     tp_loc$28=caml_new_string("src/zone.ml.Stable.Full_data.V1.Transition.t"),
     cst_leap_seconds=caml_new_string("leap_seconds"),
     cst_default_local_time_type=caml_new_string("default_local_time_type"),
     cst_last_regime_index=caml_new_string("last_regime_index"),
     cst_transitions=caml_new_string("transitions"),
     cst_digest=caml_new_string("digest"),
     cst_original_filename=caml_new_string("original_filename"),
     cst_name=caml_new_string("name"),
     cst_t$162=caml_new_string("t"),
     cst_src_zone_ml_75_6=caml_new_string("src/zone.ml:75:6"),
     cst_t$163=caml_new_string("t"),
     tp_loc$29=caml_new_string("src/zone.ml.Stable.Full_data.V1.t"),
     cst_core_kernel$259=caml_new_string("core_kernel"),
     cst_core_kernel$260=caml_new_string("core_kernel"),
     cst_src_weak_ml=caml_new_string("src/weak.ml"),
     cst$102=caml_new_string(""),
     cst_core_kernel$261=caml_new_string("core_kernel"),
     cst_core_kernel$262=caml_new_string("core_kernel"),
     cst_core_kernel$263=caml_new_string("core_kernel"),
     cst_src_weak_pointer_ml=caml_new_string("src/weak_pointer.ml"),
     cst$103=caml_new_string(""),
     cst_core_kernel$264=caml_new_string("core_kernel"),
     cst_core_kernel$265=caml_new_string("core_kernel"),
     cst_core_kernel$266=caml_new_string("core_kernel"),
     cst_src_arg_ml=caml_new_string("src/arg.ml"),
     cst$104=caml_new_string(""),
     cst_core_kernel$267=caml_new_string("core_kernel"),
     cst_core_kernel$268=caml_new_string("core_kernel"),
     cst_sexp_list$2=caml_new_string("sexp_list"),
     cst_sexp_option$2=caml_new_string("sexp_option"),
     cst_core_kernel$269=caml_new_string("core_kernel"),
     cst_src_stable_internal_ml=caml_new_string("src/stable_internal.ml"),
     cst$105=caml_new_string(""),
     cst_core_kernel$270=caml_new_string("core_kernel"),
     cst_a$73=caml_new_string("a"),
     cst_src_stable_internal_ml_39_22=
      caml_new_string("src/stable_internal.ml:39:22"),
     cst_a$74=caml_new_string("a"),
     cst_sexp_option$1=caml_new_string("sexp_option"),
     cst_src_stable_internal_ml_39_0=
      caml_new_string("src/stable_internal.ml:39:0"),
     cst_a$75=caml_new_string("a"),
     cst_src_stable_internal_ml_40_22=
      caml_new_string("src/stable_internal.ml:40:22"),
     cst_a$76=caml_new_string("a"),
     cst_sexp_list$1=caml_new_string("sexp_list"),
     cst_src_stable_internal_ml_40_0=
      caml_new_string("src/stable_internal.ml:40:0"),
     cst_t$164=caml_new_string("t"),
     cst_List$2=caml_new_string("List"),
     cst_Atom$2=caml_new_string("Atom"),
     cst_t$165=caml_new_string("t"),
     cst_src_stable_internal_ml_44_2=
      caml_new_string("src/stable_internal.ml:44:2"),
     cst_t$166=caml_new_string("t"),
     cst_core_kernel$271=caml_new_string("core_kernel"),
     cst$110=caml_new_string("\x01\0"),
     cst_0$0=caml_new_string("(0)"),
     cst$111=caml_new_string("\0"),
     cst$112=caml_new_string("()"),
     cst$113=caml_new_string("\n\0\x01\x02\x03\x04\x05\x06\x07\b\t"),
     cst_0_1_2_3_4_5_6_7_8_9=caml_new_string("(0 1 2 3 4 5 6 7 8 9)"),
     cst_t$169=caml_new_string("t"),
     cst_src_stable_containers_ml_93_6=
      caml_new_string("src/stable_containers.ml:93:6"),
     cst_t$170=caml_new_string("t"),
     cst_foo$9=caml_new_string("\x01\0\x03foo"),
     cst_0_foo=caml_new_string("((0 foo))"),
     cst_foo$10=caml_new_string("foo"),
     cst$108=caml_new_string("\0"),
     cst$109=caml_new_string("()"),
     cst_foo_bar_baz=caml_new_string("\x03\x01\x03foo\x02\x03bar\x03\x03baz"),
     cst_1_foo_2_bar_3_baz=caml_new_string("((1 foo) (2 bar) (3 baz))"),
     cst$107=caml_new_string("\n"),
     cst_t$167=caml_new_string("t"),
     cst_src_stable_containers_ml_17_6=
      caml_new_string("src/stable_containers.ml:17:6"),
     cst_t$168=caml_new_string("t"),
     cst_core_kernel$272=caml_new_string("core_kernel"),
     cst_src_stable_containers_ml=caml_new_string("src/stable_containers.ml"),
     cst$106=caml_new_string(""),
     cst_core_kernel$273=caml_new_string("core_kernel"),
     cst_src_stable_containers_ml$0=
      caml_new_string("src/stable_containers.ml"),
     cst_Hashtbl_V1=caml_new_string(": Hashtbl.V1"),
     cst_src_stable_containers_ml$1=
      caml_new_string("src/stable_containers.ml"),
     cst_Hash_set_V1=caml_new_string(": Hash_set.V1"),
     cst_src_stable_containers_ml$2=
      caml_new_string("src/stable_containers.ml"),
     cst_Map_V1=caml_new_string(": Map.V1"),
     cst_src_stable_containers_ml$3=
      caml_new_string("src/stable_containers.ml"),
     cst_Set_V1=caml_new_string(": Set.V1"),
     cst_core_kernel$274=caml_new_string("core_kernel"),
     all_days=[0,0,[0,1,[0,2,[0,3,[0,4,[0,5,[0,6,0]]]]]]],
     tests$0=
      [0,
       [0,0,caml_new_string("SUN"),caml_new_string("\0")],
       [0,
        [0,1,caml_new_string("MON"),caml_new_string("\x01")],
        [0,
         [0,2,caml_new_string("TUE"),caml_new_string("\x02")],
         [0,
          [0,3,caml_new_string("WED"),caml_new_string("\x03")],
          [0,
           [0,4,caml_new_string("THU"),caml_new_string("\x04")],
           [0,
            [0,5,caml_new_string("FRI"),caml_new_string("\x05")],
            [0,[0,6,caml_new_string("SAT"),caml_new_string("\x06")],0]]]]]]],
     cst_SUNDAY=caml_new_string("SUNDAY"),
     cst_FRI$0=caml_new_string("FRI"),
     cst_FRIDAY=caml_new_string("FRIDAY"),
     cst_MON$0=caml_new_string("MON"),
     cst_MONDAY=caml_new_string("MONDAY"),
     cst_SAT$0=caml_new_string("SAT"),
     cst_SATURDAY=caml_new_string("SATURDAY"),
     cst_SUN$0=caml_new_string("SUN"),
     cst_THU$0=caml_new_string("THU"),
     cst_THURSDAY=caml_new_string("THURSDAY"),
     cst_TUE$0=caml_new_string("TUE"),
     cst_TUESDAY=caml_new_string("TUESDAY"),
     cst_WED$0=caml_new_string("WED"),
     cst_WEDNESDAY=caml_new_string("WEDNESDAY"),
     cst_Sunday=caml_new_string("Sunday"),
     cst_Monday=caml_new_string("Monday"),
     cst_Tuesday=caml_new_string("Tuesday"),
     cst_Wednesday=caml_new_string("Wednesday"),
     cst_Thursday=caml_new_string("Thursday"),
     cst_Friday=caml_new_string("Friday"),
     cst_Saturday=caml_new_string("Saturday"),
     cst_SUN=caml_new_string("SUN"),
     cst_MON=caml_new_string("MON"),
     cst_TUE=caml_new_string("TUE"),
     cst_WED=caml_new_string("WED"),
     cst_THU=caml_new_string("THU"),
     cst_FRI=caml_new_string("FRI"),
     cst_SAT=caml_new_string("SAT"),
     cst_src_day_of_week_ml_Stable_V1_T_t=
      caml_new_string("src/day_of_week.ml.Stable.V1.T.t"),
     cst_core_kernel$275=caml_new_string("core_kernel"),
     cst_src_day_of_week_ml=caml_new_string("src/day_of_week.ml"),
     cst$114=caml_new_string(""),
     cst_core_kernel$276=caml_new_string("core_kernel"),
     cst_t$171=caml_new_string("t"),
     cst_src_day_of_week_ml_8_6=caml_new_string("src/day_of_week.ml:8:6"),
     cst_t$172=caml_new_string("t"),
     cst_src_day_of_week_ml$0=caml_new_string("src/day_of_week.ml"),
     cst_Day_of_week_V1=caml_new_string(": Day_of_week.V1"),
     weekdays=[0,1,[0,2,[0,3,[0,4,[0,5,0]]]]],
     weekends=[0,6,[0,0,0]],
     all$4=[0,0,[0,1,[0,2,[0,3,[0,4,[0,5,[0,6,0]]]]]]],
     cst_src_day_of_week_ml$1=caml_new_string("src/day_of_week.ml"),
     cst_List_is_sorted_all_compare=
      caml_new_string(": <<List.is_sorted all ~compare>>"),
     cst_src_day_of_week_ml$2=caml_new_string("src/day_of_week.ml"),
     cst_to_string_long_output_parses_with_of_string=
      caml_new_string(": to_string_long output parses with of_string"),
     cst_src_day_of_week_ml$3=caml_new_string("src/day_of_week.ml"),
     cst_let_open_Int_in_num_days_from_Mon_to_Tue_1=
      caml_new_string
       (": <<let open Int in (num_days ~from:Mon ~to_:Tue) = 1>>"),
     cst_src_day_of_week_ml$4=caml_new_string("src/day_of_week.ml"),
     cst_let_open_Int_in_num_days_from_Tue_to_Mon_6=
      caml_new_string
       (": <<let open Int in (num_days ~from:Tue ~to_:Mon) = 6>>"),
     cst_src_day_of_week_ml$5=caml_new_string("src/day_of_week.ml"),
     cst_num_days_is_inverse_to_shift=
      caml_new_string(": num_days is inverse to shift"),
     cst_core_kernel$277=caml_new_string("core_kernel"),
     cst_core_kernel$278=caml_new_string("core_kernel"),
     cst_src_day_of_week_intf_ml=caml_new_string("src/day_of_week_intf.ml"),
     cst$115=caml_new_string(""),
     cst_core_kernel$279=caml_new_string("core_kernel"),
     cst_core_kernel$280=caml_new_string("core_kernel"),
     name$53=caml_new_string("read_int63"),
     cst_read_9_digit_int=caml_new_string("read_9_digit_int"),
     cst_read_8_digit_int=caml_new_string("read_8_digit_int"),
     cst_read_7_digit_int=caml_new_string("read_7_digit_int"),
     cst_read_6_digit_int=caml_new_string("read_6_digit_int"),
     cst_read_5_digit_int=caml_new_string("read_5_digit_int"),
     cst_read_4_digit_int=caml_new_string("read_4_digit_int"),
     cst_read_3_digit_int=caml_new_string("read_3_digit_int"),
     cst_read_2_digit_int=caml_new_string("read_2_digit_int"),
     cst_read_1_digit_int=caml_new_string("read_1_digit_int"),
     name$52=caml_new_string("write_int63"),
     cst_write_9_digit_int=caml_new_string("write_9_digit_int"),
     cst_write_8_digit_int=caml_new_string("write_8_digit_int"),
     cst_write_7_digit_int=caml_new_string("write_7_digit_int"),
     cst_write_6_digit_int=caml_new_string("write_6_digit_int"),
     cst_write_5_digit_int=caml_new_string("write_5_digit_int"),
     cst_write_4_digit_int=caml_new_string("write_4_digit_int"),
     cst_write_3_digit_int=caml_new_string("write_3_digit_int"),
     cst_write_2_digit_int=caml_new_string("write_2_digit_int"),
     cst_write_1_digit_int=caml_new_string("write_1_digit_int"),
     cst_s_s_Int63_out_of_range_0_Int63=
      caml_new_string("%s.%s: %{Int63} out of range [0, %{Int63}]"),
     cst_out_of_range_0=caml_new_string(" out of range [0, "),
     cst$117=caml_new_string(": "),
     cst_read_int63=caml_new_string("read_int63"),
     cst_read_int63$0=caml_new_string("read_int63"),
     pos$69=caml_new_string("src/digit_string_helpers.ml:39:17"),
     cst_core_kernel$281=caml_new_string("core_kernel"),
     cst_src_digit_string_helpers_ml=
      caml_new_string("src/digit_string_helpers.ml"),
     cst$116=caml_new_string(""),
     cst_core_kernel$282=caml_new_string("core_kernel"),
     module_name$8=caml_new_string("Digit_string_helpers"),
     cst_src_digit_string_helpers_ml$0=
      caml_new_string("src/digit_string_helpers.ml"),
     cst_max_int63_with=caml_new_string(": max_int63_with"),
     cst_core_kernel$283=caml_new_string("core_kernel"),
     pos$70=caml_new_string("src/month.ml:113:19"),
     cst$119=caml_new_string("\x0b"),
     cst_Dec$2=caml_new_string("Dec"),
     cst$120=caml_new_string("\n"),
     cst_Nov$2=caml_new_string("Nov"),
     cst$121=caml_new_string("\t"),
     cst_Oct$2=caml_new_string("Oct"),
     cst$122=caml_new_string("\b"),
     cst_Sep$2=caml_new_string("Sep"),
     cst$123=caml_new_string("\x07"),
     cst_Aug$2=caml_new_string("Aug"),
     cst$124=caml_new_string("\x06"),
     cst_Jul$2=caml_new_string("Jul"),
     cst$125=caml_new_string("\x05"),
     cst_Jun$2=caml_new_string("Jun"),
     cst$126=caml_new_string("\x04"),
     cst_May$2=caml_new_string("May"),
     cst$127=caml_new_string("\x03"),
     cst_Apr$2=caml_new_string("Apr"),
     cst$128=caml_new_string("\x02"),
     cst_Mar$2=caml_new_string("Mar"),
     cst$129=caml_new_string("\x01"),
     cst_Feb$2=caml_new_string("Feb"),
     cst$130=caml_new_string("\0"),
     cst_Jan$2=caml_new_string("Jan"),
     cst_apr=caml_new_string("apr"),
     cst_Jun=caml_new_string("Jun"),
     cst_Apr=caml_new_string("Apr"),
     cst_Aug=caml_new_string("Aug"),
     cst_Dec=caml_new_string("Dec"),
     cst_Feb=caml_new_string("Feb"),
     cst_Jan=caml_new_string("Jan"),
     cst_Jul=caml_new_string("Jul"),
     cst_Mar=caml_new_string("Mar"),
     cst_May=caml_new_string("May"),
     cst_Nov=caml_new_string("Nov"),
     cst_Oct=caml_new_string("Oct"),
     cst_Sep=caml_new_string("Sep"),
     cst_jun=caml_new_string("jun"),
     cst_aug=caml_new_string("aug"),
     cst_dec=caml_new_string("dec"),
     cst_feb=caml_new_string("feb"),
     cst_jan=caml_new_string("jan"),
     cst_jul=caml_new_string("jul"),
     cst_mar=caml_new_string("mar"),
     cst_may=caml_new_string("may"),
     cst_nov=caml_new_string("nov"),
     cst_oct=caml_new_string("oct"),
     cst_sep=caml_new_string("sep"),
     cst_apr$0=caml_new_string("apr"),
     cst_Jun$0=caml_new_string("Jun"),
     cst_Apr$0=caml_new_string("Apr"),
     cst_Aug$0=caml_new_string("Aug"),
     cst_Dec$0=caml_new_string("Dec"),
     cst_Feb$0=caml_new_string("Feb"),
     cst_Jan$0=caml_new_string("Jan"),
     cst_Jul$0=caml_new_string("Jul"),
     cst_Mar$0=caml_new_string("Mar"),
     cst_May$0=caml_new_string("May"),
     cst_Nov$0=caml_new_string("Nov"),
     cst_Oct$0=caml_new_string("Oct"),
     cst_Sep$0=caml_new_string("Sep"),
     cst_jun$0=caml_new_string("jun"),
     cst_aug$0=caml_new_string("aug"),
     cst_dec$0=caml_new_string("dec"),
     cst_feb$0=caml_new_string("feb"),
     cst_jan$0=caml_new_string("jan"),
     cst_jul$0=caml_new_string("jul"),
     cst_mar$0=caml_new_string("mar"),
     cst_may$0=caml_new_string("may"),
     cst_nov$0=caml_new_string("nov"),
     cst_oct$0=caml_new_string("oct"),
     cst_sep$0=caml_new_string("sep"),
     cst_core_kernel$284=caml_new_string("core_kernel"),
     cst_src_month_ml=caml_new_string("src/month.ml"),
     cst$118=caml_new_string(""),
     cst_core_kernel$285=caml_new_string("core_kernel"),
     tp_loc$30=caml_new_string("src/month.ml.Stable.V1.t"),
     cst_Jan$1=caml_new_string("Jan"),
     cst_Feb$1=caml_new_string("Feb"),
     cst_Mar$1=caml_new_string("Mar"),
     cst_Apr$1=caml_new_string("Apr"),
     cst_May$1=caml_new_string("May"),
     cst_Jun$1=caml_new_string("Jun"),
     cst_Jul$1=caml_new_string("Jul"),
     cst_Aug$1=caml_new_string("Aug"),
     cst_Sep$1=caml_new_string("Sep"),
     cst_Oct$1=caml_new_string("Oct"),
     cst_Nov$1=caml_new_string("Nov"),
     cst_Dec$1=caml_new_string("Dec"),
     cst_src_month_ml$0=caml_new_string("src/month.ml"),
     cst_Month_V1=caml_new_string(": Month.V1"),
     all$5=caml_list_of_js_array([0,1,2,3,4,5,6,7,8,9,10,11]),
     cst_src_month_ml$1=caml_new_string("src/month.ml"),
     cst_List_length_all_num_months=
      caml_new_string(": <<(List.length all) = num_months>>"),
     cst_src_month_ml$2=caml_new_string("src/month.ml"),
     cst_test_result_t_List_fold_List_tl_exn=
      caml_new_string
       (": <<([%test_result :t])   (List.fold (List.tl_exn[...]>>"),
     cst_src_month_ml$3=caml_new_string("src/month.ml"),
     cst_Set_equal_Set_of_list_Jan_Set_t_of_sex=
      caml_new_string
       (": <<Set.equal (Set.of_list [Jan])   (Set.t_of_sex[...]>>"),
     cst_src_month_ml$4=caml_new_string("src/month.ml"),
     cst_Pervasives_sexp_of_t_Jan_Sexp_Atom_Jan=
      caml_new_string
       (': <<Pervasives.(=) (sexp_of_t Jan) (Sexp.Atom "Jan")>>'),
     cst_src_month_ml$5=caml_new_string("src/month.ml"),
     cst_Jan_t_of_sexp_Sexp_Atom_Jan=
      caml_new_string(': <<Jan = (t_of_sexp (Sexp.Atom "Jan"))>>'),
     cst_src_month_ml$6=caml_new_string("src/month.ml"),
     cst_Option_is_none_Option_try_with_fun_t=
      caml_new_string
       (": <<Option.is_none (Option.try_with (fun () -> t_[...]>>"),
     cst_src_month_ml$7=caml_new_string("src/month.ml"),
     cst_shift_Jan_12_Jan=caml_new_string(": <<(shift Jan 12) = Jan>>"),
     cst_src_month_ml$8=caml_new_string("src/month.ml"),
     cst_shift_Jan_12_Jan$0=caml_new_string(": <<(shift Jan (-12)) = Jan>>"),
     cst_src_month_ml$9=caml_new_string("src/month.ml"),
     cst_shift_Jan_16_May=caml_new_string(": <<(shift Jan 16) = May>>"),
     cst_src_month_ml$10=caml_new_string("src/month.ml"),
     cst_shift_Jan_16_Sep=caml_new_string(": <<(shift Jan (-16)) = Sep>>"),
     cst_src_month_ml$11=caml_new_string("src/month.ml"),
     cst_shift_Sep_1_Oct=caml_new_string(": <<(shift Sep 1) = Oct>>"),
     cst_src_month_ml$12=caml_new_string("src/month.ml"),
     cst_shift_Sep_1_Aug=caml_new_string(": <<(shift Sep (-1)) = Aug>>"),
     cst_core_kernel$286=caml_new_string("core_kernel"),
     cst_core_kernel$287=caml_new_string("core_kernel"),
     cst_src_month_intf_ml=caml_new_string("src/month_intf.ml"),
     cst$131=caml_new_string(""),
     cst_core_kernel$288=caml_new_string("core_kernel"),
     cst_core_kernel$289=caml_new_string("core_kernel"),
     cst_1900_01_01$1=caml_new_string("1900-01-01"),
     cst_2100_01_01$1=caml_new_string("2100-01-01"),
     cst_2100_01_01$0=caml_new_string("2100-01-01"),
     cst_1900_01_01$0=caml_new_string("1900-01-01"),
     cst_Date_gen_uniform_incl_bounds_are_crossed=
      caml_new_string("Date.gen_uniform_incl: bounds are crossed"),
     cst_src_date0_ml$54=caml_new_string("src/date0.ml"),
     cst_equal_first_strictly_after_tue1_on_Day_of_w=
      caml_new_string
       (": <<equal (first_strictly_after tue1 ~on:Day_of_w[...]>>"),
     cst_src_date0_ml$55=caml_new_string("src/date0.ml"),
     cst_equal_first_strictly_after_tue1_on_Day_of_w$0=
      caml_new_string
       (": <<equal (first_strictly_after tue1 ~on:Day_of_w[...]>>"),
     cst_src_date0_ml$56=caml_new_string("src/date0.ml"),
     cst_equal_first_strictly_after_tue1_on_Day_of_w$1=
      caml_new_string
       (": <<equal (first_strictly_after tue1 ~on:Day_of_w[...]>>"),
     cst_src_date0_ml$57=caml_new_string("src/date0.ml"),
     cst_equal_first_strictly_after_tue1_on_Day_of_w$2=
      caml_new_string
       (": <<equal (first_strictly_after tue1 ~on:Day_of_w[...]>>"),
     cst_src_date0_ml$58=caml_new_string("src/date0.ml"),
     cst_equal_first_strictly_after_tue1_on_Day_of_w$3=
      caml_new_string
       (": <<equal (first_strictly_after tue1 ~on:Day_of_w[...]>>"),
     cst_src_date0_ml$59=caml_new_string("src/date0.ml"),
     cst_equal_first_strictly_after_tue1_on_Day_of_w$4=
      caml_new_string
       (": <<equal (first_strictly_after tue1 ~on:Day_of_w[...]>>"),
     cst_src_date0_ml$60=caml_new_string("src/date0.ml"),
     cst_equal_first_strictly_after_tue1_on_Day_of_w$5=
      caml_new_string
       (": <<equal (first_strictly_after tue1 ~on:Day_of_w[...]>>"),
     cst_src_date0_ml$61=caml_new_string("src/date0.ml"),
     cst_equal_first_strictly_after_mon1_on_Day_of_w=
      caml_new_string
       (": <<equal (first_strictly_after mon1 ~on:Day_of_w[...]>>"),
     cst_src_date0_ml$62=caml_new_string("src/date0.ml"),
     cst_equal_first_strictly_after_mon1_on_Day_of_w$0=
      caml_new_string
       (": <<equal (first_strictly_after mon1 ~on:Day_of_w[...]>>"),
     cst_src_date0_ml$63=caml_new_string("src/date0.ml"),
     cst_equal_first_strictly_after_mon1_on_Day_of_w$1=
      caml_new_string
       (": <<equal (first_strictly_after mon1 ~on:Day_of_w[...]>>"),
     cst_src_date0_ml$64=caml_new_string("src/date0.ml"),
     cst_equal_first_strictly_after_mon1_on_Day_of_w$2=
      caml_new_string
       (": <<equal (first_strictly_after mon1 ~on:Day_of_w[...]>>"),
     cst_src_date0_ml$65=caml_new_string("src/date0.ml"),
     cst_equal_first_strictly_after_mon1_on_Day_of_w$3=
      caml_new_string
       (": <<equal (first_strictly_after mon1 ~on:Day_of_w[...]>>"),
     cst_src_date0_ml$66=caml_new_string("src/date0.ml"),
     cst_equal_first_strictly_after_mon1_on_Day_of_w$4=
      caml_new_string
       (": <<equal (first_strictly_after mon1 ~on:Day_of_w[...]>>"),
     cst_src_date0_ml$67=caml_new_string("src/date0.ml"),
     cst_equal_first_strictly_after_mon1_on_Day_of_w$5=
      caml_new_string
       (": <<equal (first_strictly_after mon1 ~on:Day_of_w[...]>>"),
     cst_src_date0_ml$52=caml_new_string("src/date0.ml"),
     cst_List_iter_dates_f_fun_date1_Li=
      caml_new_string
       (": <<List.iter dates   ~f:(fun date1 ->         Li[...]>>"),
     pos$77=caml_new_string("src/date0.ml:581:21"),
     pos$76=caml_new_string("src/date0.ml:578:25"),
     pos$75=caml_new_string("src/date0.ml:574:21"),
     cst_src_date0_ml$49=caml_new_string("src/date0.ml"),
     cst_check_table_2015_non_leap_year_table=
      caml_new_string(": <<check_table 2015 non_leap_year_table>>"),
     cst_src_date0_ml$50=caml_new_string("src/date0.ml"),
     cst_check_table_2000_leap_year_table=
      caml_new_string(": <<check_table 2000 leap_year_table>>"),
     cst_src_date0_ml$11=caml_new_string("src/date0.ml"),
     cst_2014_Jan_1_is_a_Wednesday=
      caml_new_string(": 2014 Jan 1 is a Wednesday"),
     cst_src_date0_ml$12=caml_new_string("src/date0.ml"),
     cst_diff_weekdays_c_2014_Jan_1_c_2014_Jan_1_0=
      caml_new_string
       (": <<(diff_weekdays (c 2014 Jan 1) (c 2014 Jan 1)) = 0>>"),
     cst_src_date0_ml$13=caml_new_string("src/date0.ml"),
     cst_diff_weekdays_c_2014_Jan_2_c_2014_Jan_1_1=
      caml_new_string
       (": <<(diff_weekdays (c 2014 Jan 2) (c 2014 Jan 1)) = 1>>"),
     cst_src_date0_ml$14=caml_new_string("src/date0.ml"),
     cst_diff_weekdays_c_2014_Jan_3_c_2014_Jan_1_2=
      caml_new_string
       (": <<(diff_weekdays (c 2014 Jan 3) (c 2014 Jan 1)) = 2>>"),
     cst_src_date0_ml$15=caml_new_string("src/date0.ml"),
     cst_diff_weekdays_c_2014_Jan_4_c_2014_Jan_1_3=
      caml_new_string
       (": <<(diff_weekdays (c 2014 Jan 4) (c 2014 Jan 1)) = 3>>"),
     cst_src_date0_ml$16=caml_new_string("src/date0.ml"),
     cst_diff_weekdays_c_2014_Jan_5_c_2014_Jan_1_3=
      caml_new_string
       (": <<(diff_weekdays (c 2014 Jan 5) (c 2014 Jan 1)) = 3>>"),
     cst_src_date0_ml$17=caml_new_string("src/date0.ml"),
     cst_diff_weekdays_c_2014_Jan_6_c_2014_Jan_1_3=
      caml_new_string
       (": <<(diff_weekdays (c 2014 Jan 6) (c 2014 Jan 1)) = 3>>"),
     cst_src_date0_ml$18=caml_new_string("src/date0.ml"),
     cst_diff_weekdays_c_2014_Jan_7_c_2014_Jan_1_4=
      caml_new_string
       (": <<(diff_weekdays (c 2014 Jan 7) (c 2014 Jan 1)) = 4>>"),
     cst_src_date0_ml$19=caml_new_string("src/date0.ml"),
     cst_diff_weekdays_c_2014_Jan_8_c_2014_Jan_1_5=
      caml_new_string
       (": <<(diff_weekdays (c 2014 Jan 8) (c 2014 Jan 1)) = 5>>"),
     cst_src_date0_ml$20=caml_new_string("src/date0.ml"),
     cst_diff_weekdays_c_2014_Jan_9_c_2014_Jan_1_6=
      caml_new_string
       (": <<(diff_weekdays (c 2014 Jan 9) (c 2014 Jan 1)) = 6>>"),
     cst_src_date0_ml$21=caml_new_string("src/date0.ml"),
     cst_diff_weekdays_c_2014_Jan_10_c_2014_Jan_1=
      caml_new_string
       (": <<(diff_weekdays (c 2014 Jan 10) (c 2014 Jan 1)[...]>>"),
     cst_src_date0_ml$22=caml_new_string("src/date0.ml"),
     cst_diff_weekdays_c_2014_Jan_11_c_2014_Jan_1=
      caml_new_string
       (": <<(diff_weekdays (c 2014 Jan 11) (c 2014 Jan 1)[...]>>"),
     cst_src_date0_ml$23=caml_new_string("src/date0.ml"),
     cst_diff_weekdays_c_2014_Jan_12_c_2014_Jan_1=
      caml_new_string
       (": <<(diff_weekdays (c 2014 Jan 12) (c 2014 Jan 1)[...]>>"),
     cst_src_date0_ml$24=caml_new_string("src/date0.ml"),
     cst_diff_weekdays_c_2014_Jan_13_c_2014_Jan_1=
      caml_new_string
       (": <<(diff_weekdays (c 2014 Jan 13) (c 2014 Jan 1)[...]>>"),
     cst_src_date0_ml$25=caml_new_string("src/date0.ml"),
     cst_diff_weekdays_c_2014_Jan_14_c_2014_Jan_1=
      caml_new_string
       (": <<(diff_weekdays (c 2014 Jan 14) (c 2014 Jan 1)[...]>>"),
     cst_src_date0_ml$26=caml_new_string("src/date0.ml"),
     cst_diff_weekdays_c_2014_Jan_1_c_2014_Jan_2=
      caml_new_string
       (": <<(diff_weekdays (c 2014 Jan 1) (c 2014 Jan 2))[...]>>"),
     cst_src_date0_ml$27=caml_new_string("src/date0.ml"),
     cst_diff_weekdays_c_2014_Jan_1_c_2014_Jan_3=
      caml_new_string
       (": <<(diff_weekdays (c 2014 Jan 1) (c 2014 Jan 3))[...]>>"),
     cst_src_date0_ml$28=caml_new_string("src/date0.ml"),
     cst_diff_weekdays_c_2014_Jan_1_c_2014_Jan_4=
      caml_new_string
       (": <<(diff_weekdays (c 2014 Jan 1) (c 2014 Jan 4))[...]>>"),
     cst_src_date0_ml$29=caml_new_string("src/date0.ml"),
     cst_diff_weekdays_c_2014_Jan_1_c_2014_Jan_5=
      caml_new_string
       (": <<(diff_weekdays (c 2014 Jan 1) (c 2014 Jan 5))[...]>>"),
     cst_src_date0_ml$30=caml_new_string("src/date0.ml"),
     cst_diff_weekdays_c_2014_Jan_1_c_2014_Jan_6=
      caml_new_string
       (": <<(diff_weekdays (c 2014 Jan 1) (c 2014 Jan 6))[...]>>"),
     cst_src_date0_ml$31=caml_new_string("src/date0.ml"),
     cst_diff_weekdays_c_2014_Jan_1_c_2014_Jan_7=
      caml_new_string
       (": <<(diff_weekdays (c 2014 Jan 1) (c 2014 Jan 7))[...]>>"),
     cst_src_date0_ml$32=caml_new_string("src/date0.ml"),
     cst_diff_weekdays_c_2014_Jan_1_c_2014_Jan_8=
      caml_new_string
       (": <<(diff_weekdays (c 2014 Jan 1) (c 2014 Jan 8))[...]>>"),
     cst_src_date0_ml$33=caml_new_string("src/date0.ml"),
     cst_diff_weekdays_c_2014_Jan_1_c_2014_Jan_9=
      caml_new_string
       (": <<(diff_weekdays (c 2014 Jan 1) (c 2014 Jan 9))[...]>>"),
     cst_src_date0_ml$34=caml_new_string("src/date0.ml"),
     cst_diff_weekend_days_c_2014_Jan_1_c_2014_Jan=
      caml_new_string
       (": <<(diff_weekend_days (c 2014 Jan 1) (c 2014 Jan[...]>>"),
     cst_src_date0_ml$35=caml_new_string("src/date0.ml"),
     cst_diff_weekend_days_c_2014_Jan_2_c_2014_Jan=
      caml_new_string
       (": <<(diff_weekend_days (c 2014 Jan 2) (c 2014 Jan[...]>>"),
     cst_src_date0_ml$36=caml_new_string("src/date0.ml"),
     cst_diff_weekend_days_c_2014_Jan_3_c_2014_Jan=
      caml_new_string
       (": <<(diff_weekend_days (c 2014 Jan 3) (c 2014 Jan[...]>>"),
     cst_src_date0_ml$37=caml_new_string("src/date0.ml"),
     cst_diff_weekend_days_c_2014_Jan_4_c_2014_Jan=
      caml_new_string
       (": <<(diff_weekend_days (c 2014 Jan 4) (c 2014 Jan[...]>>"),
     cst_src_date0_ml$38=caml_new_string("src/date0.ml"),
     cst_diff_weekend_days_c_2014_Jan_5_c_2014_Jan=
      caml_new_string
       (": <<(diff_weekend_days (c 2014 Jan 5) (c 2014 Jan[...]>>"),
     cst_src_date0_ml$39=caml_new_string("src/date0.ml"),
     cst_diff_weekend_days_c_2014_Jan_6_c_2014_Jan=
      caml_new_string
       (": <<(diff_weekend_days (c 2014 Jan 6) (c 2014 Jan[...]>>"),
     cst_src_date0_ml$40=caml_new_string("src/date0.ml"),
     cst_diff_weekend_days_c_2014_Jan_7_c_2014_Jan=
      caml_new_string
       (": <<(diff_weekend_days (c 2014 Jan 7) (c 2014 Jan[...]>>"),
     cst_src_date0_ml$41=caml_new_string("src/date0.ml"),
     cst_diff_weekend_days_c_2014_Jan_8_c_2014_Jan=
      caml_new_string
       (": <<(diff_weekend_days (c 2014 Jan 8) (c 2014 Jan[...]>>"),
     cst_src_date0_ml$42=caml_new_string("src/date0.ml"),
     cst_diff_weekend_days_c_2014_Jan_9_c_2014_Jan=
      caml_new_string
       (": <<(diff_weekend_days (c 2014 Jan 9) (c 2014 Jan[...]>>"),
     cst_src_date0_ml$43=caml_new_string("src/date0.ml"),
     cst_diff_weekend_days_c_2014_Jan_10_c_2014_Ja=
      caml_new_string
       (": <<(diff_weekend_days (c 2014 Jan 10) (c 2014 Ja[...]>>"),
     cst_src_date0_ml$44=caml_new_string("src/date0.ml"),
     cst_diff_weekend_days_c_2014_Jan_11_c_2014_Ja=
      caml_new_string
       (": <<(diff_weekend_days (c 2014 Jan 11) (c 2014 Ja[...]>>"),
     cst_src_date0_ml$45=caml_new_string("src/date0.ml"),
     cst_diff_weekend_days_c_2014_Jan_12_c_2014_Ja=
      caml_new_string
       (": <<(diff_weekend_days (c 2014 Jan 12) (c 2014 Ja[...]>>"),
     cst_src_date0_ml$46=caml_new_string("src/date0.ml"),
     cst_diff_weekend_days_c_2014_Jan_13_c_2014_Ja=
      caml_new_string
       (": <<(diff_weekend_days (c 2014 Jan 13) (c 2014 Ja[...]>>"),
     cst_src_date0_ml$47=caml_new_string("src/date0.ml"),
     cst_diff_weekend_days_c_2014_Jan_14_c_2014_Ja=
      caml_new_string
       (": <<(diff_weekend_days (c 2014 Jan 14) (c 2014 Ja[...]>>"),
     pos$74=caml_new_string("src/date0.ml:447:21"),
     pos$73=caml_new_string("src/date0.ml:444:37"),
     pos$72=caml_new_string("src/date0.ml:443:37"),
     pos$71=caml_new_string("src/date0.ml:442:37"),
     cst_src_date0_ml$0=caml_new_string("src/date0.ml"),
     cst_test_result_int_ordinal_date_create_e=
      caml_new_string
       (": <<([%test_result :int]) (ordinal_date (create_e[...]>>"),
     cst_src_date0_ml$1=caml_new_string("src/date0.ml"),
     cst_test_result_int_ordinal_date_create_e$0=
      caml_new_string
       (": <<([%test_result :int]) (ordinal_date (create_e[...]>>"),
     cst_src_date0_ml$2=caml_new_string("src/date0.ml"),
     cst_test_result_int_ordinal_date_create_e$1=
      caml_new_string
       (": <<([%test_result :int]) (ordinal_date (create_e[...]>>"),
     cst_src_date0_ml$3=caml_new_string("src/date0.ml"),
     cst_test_week_number_2014_Jan_1_expect_1=
      caml_new_string(": <<test_week_number 2014 Jan 1 ~expect:1>>"),
     cst_src_date0_ml$4=caml_new_string("src/date0.ml"),
     cst_test_week_number_2014_Dec_31_expect_1=
      caml_new_string(": <<test_week_number 2014 Dec 31 ~expect:1>>"),
     cst_src_date0_ml$5=caml_new_string("src/date0.ml"),
     cst_test_week_number_2010_Jan_1_expect_53=
      caml_new_string(": <<test_week_number 2010 Jan 1 ~expect:53>>"),
     cst_src_date0_ml$6=caml_new_string("src/date0.ml"),
     cst_test_week_number_2017_Jan_1_expect_52=
      caml_new_string(": <<test_week_number 2017 Jan 1 ~expect:52>>"),
     cst_src_date0_ml$7=caml_new_string("src/date0.ml"),
     cst_test_week_number_2014_Jan_10_expect_2=
      caml_new_string(": <<test_week_number 2014 Jan 10 ~expect:2>>"),
     cst_src_date0_ml$8=caml_new_string("src/date0.ml"),
     cst_test_week_number_2012_Jan_1_expect_52=
      caml_new_string(": <<test_week_number 2012 Jan 1 ~expect:52>>"),
     cst_src_date0_ml$9=caml_new_string("src/date0.ml"),
     cst_test_week_number_2012_Dec_31_expect_1=
      caml_new_string(": <<test_week_number 2012 Dec 31 ~expect:1>>"),
     cst_d=caml_new_string("d"),
     cst_m=caml_new_string("m"),
     cst_y=caml_new_string("y"),
     cst_d$0=caml_new_string("d"),
     cst_m$0=caml_new_string("m"),
     cst_y$0=caml_new_string("y"),
     cst_invalid_date=caml_new_string("invalid date: "),
     cst_Date_of_string_iso8601_basic_pos_8_string_length=
      caml_new_string("Date.of_string_iso8601_basic: pos + 8 > string length"),
     cst_Date_t=caml_new_string("Date.t"),
     cst_year_outside_of_0_9999=caml_new_string("year outside of [0..9999]"),
     cst_day_0=caml_new_string("day <= 0"),
     cst_29_day_month_violation=caml_new_string("29 day month violation"),
     cst_28_day_month_violation=caml_new_string("28 day month violation"),
     cst_30_day_month_violation=caml_new_string("30 day month violation"),
     cst_31_day_month_violation=caml_new_string("31 day month violation"),
     cst_core_kernel$290=caml_new_string("core_kernel"),
     cst_src_date0_ml=caml_new_string("src/date0.ml"),
     cst$132=caml_new_string(""),
     cst_core_kernel$291=caml_new_string("core_kernel"),
     cst_899ee3e0_490a_11e6_a10a_a3734f733566=
      caml_new_string("899ee3e0-490a-11e6-a10a-a3734f733566"),
     tp_loc$31=
      caml_new_string
       ("src/date0.ml.Stable.V1.Without_comparable.Sexpable.Old_date.t"),
     module_name$9=caml_new_string("Core_kernel.Date"),
     cst_src_date0_ml$10=caml_new_string("src/date0.ml"),
     cst_week_number=caml_new_string(": week_number"),
     cst_src_date0_ml$48=caml_new_string("src/date0.ml"),
     cst_diff_weekdays=caml_new_string(": diff_weekdays"),
     cst_src_date0_ml$51=caml_new_string("src/date0.ml"),
     cst_ordinal_date=caml_new_string(": ordinal_date"),
     cst_src_date0_ml$53=caml_new_string("src/date0.ml"),
     cst_weekdays_between=caml_new_string(": weekdays_between"),
     cst_src_date0_ml$68=caml_new_string("src/date0.ml"),
     cst_first_strictly_after=caml_new_string(": first_strictly_after"),
     cst_2100_01_01=caml_new_string("2100-01-01"),
     cst_1900_01_01=caml_new_string("1900-01-01"),
     cst_src_date0_ml$69=caml_new_string("src/date0.ml"),
     cst_test_can_generate_gen_sexp_of_sexp_of_t_f=
      caml_new_string
       (": <<test_can_generate gen ~sexp_of:sexp_of_t   ~f[...]>>"),
     cst_src_date0_ml$70=caml_new_string("src/date0.ml"),
     cst_test_can_generate_gen_sexp_of_sexp_of_t_f$0=
      caml_new_string
       (": <<test_can_generate gen ~sexp_of:sexp_of_t   ~f[...]>>"),
     cst_src_date0_ml$71=caml_new_string("src/date0.ml"),
     cst_test_can_generate_gen_sexp_of_sexp_of_t_f$1=
      caml_new_string
       (": <<test_can_generate gen ~sexp_of:sexp_of_t   ~f[...]>>"),
     cst_src_date0_ml$72=caml_new_string("src/date0.ml"),
     cst_test_distinct_values_gen_sexp_of_sexp_of_t=
      caml_new_string
       (": <<test_distinct_values gen ~sexp_of:sexp_of_t ~[...]>>"),
     cst_core_kernel$292=caml_new_string("core_kernel"),
     cst_core_kernel$293=caml_new_string("core_kernel"),
     cst_src_date0_intf_ml=caml_new_string("src/date0_intf.ml"),
     cst$133=caml_new_string(""),
     cst_core_kernel$294=caml_new_string("core_kernel"),
     cst_core_kernel$295=caml_new_string("core_kernel"),
     cst$135=caml_new_string(""),
     cst$136=caml_new_string(""),
     cst$139=caml_new_string(""),
     cst$137=caml_new_string(""),
     cst$138=caml_new_string(""),
     cst_expected_end_of_string_after_minutes=
      caml_new_string("expected end of string after minutes"),
     cst_expected_colon_or_am_pm_suffix_with_optional_space_after_minutes=
      caml_new_string
       ("expected colon or am/pm suffix with optional space after minutes"),
     cst_expected_two_digits_of_seconds=
      caml_new_string("expected two digits of seconds"),
     cst_expected_decimal_point_or_am_pm_suffix_after_seconds=
      caml_new_string("expected decimal point or am/pm suffix after seconds"),
     cst_BUG_did_not_expect_seconds_but_found_them=
      caml_new_string("BUG: did not expect seconds, but found them"),
     cst_hours_out_of_bounds$0=caml_new_string("hours out of bounds"),
     cst_hours_out_of_bounds$1=caml_new_string("hours out of bounds"),
     cst_time_is_past_24_00_00=caml_new_string("time is past 24:00:00"),
     cst_hours_without_minutes_or_AM_PM=
      caml_new_string("hours without minutes or AM/PM"),
     cst_hours_out_of_bounds=caml_new_string("hours out of bounds"),
     cst_minutes_out_of_bounds=caml_new_string("minutes out of bounds"),
     cst_seconds_out_of_bounds=caml_new_string("seconds out of bounds"),
     cst_expected_digits_and_or_underscores_after_decimal_point=
      caml_new_string
       ("expected digits and/or underscores after decimal point"),
     cst_Time_Ofday_invalid_string=
      caml_new_string("Time.Ofday: invalid string"),
     cst_core_kernel$296=caml_new_string("core_kernel"),
     cst_src_ofday_parser_ml=caml_new_string("src/ofday_parser.ml"),
     cst$134=caml_new_string(""),
     cst_core_kernel$297=caml_new_string("core_kernel"),
     cst_core_kernel$298=caml_new_string("core_kernel"),
     cst_Decimal_t_of_sexp_Expected_Atom_found_List=
      caml_new_string("Decimal.t_of_sexp: Expected Atom, found List"),
     cst_core_kernel$299=caml_new_string("core_kernel"),
     cst_src_float_with_finite_only_serialization_ml=
      caml_new_string("src/float_with_finite_only_serialization.ml"),
     cst$140=caml_new_string(""),
     cst_core_kernel$300=caml_new_string("core_kernel"),
     cst_Core_kernel_Float_with_finite_only_serialization_Stable_V1_Nan_or_inf=
      caml_new_string
       ("Core_kernel__Float_with_finite_only_serialization.Stable.V1.Nan_or_inf"),
     cst_core_kernel$301=caml_new_string("core_kernel"),
     cst_3_33bp=caml_new_string("3.33bp"),
     cst_3_3bp=caml_new_string("3.3bp"),
     cst_33_33=caml_new_string("33.33%"),
     cst_33_33$0=caml_new_string("33.33%"),
     cst_33_30=caml_new_string("33.30%"),
     cst_33_3=caml_new_string("33.3%"),
     cst_30_000=caml_new_string("30.000%"),
     cst_30=caml_new_string("30%"),
     pos$78=caml_new_string("src/percent.ml:148:19"),
     tests$1=
      [0,
       [0,0.375,caml_new_string("37.5%"),caml_new_string("\0\0\0\0\0\0\xd8?")],
       [0,
        [0,4.5,caml_new_string("4.5x"),caml_new_string("\0\0\0\0\0\0\x12@")],
        [0,
         [0,
          0.0002,
          caml_new_string("2bp"),
          caml_new_string("-C\x1c\xeb\xe26*?")],
         [0,
          [0,
           7.5e-05,
           caml_new_string("0.75bp"),
           caml_new_string("a2U0*\xa9\x13?")],
          0]]]],
     cst_x$3=caml_new_string("x"),
     cst$144=caml_new_string("%"),
     cst_bp$1=caml_new_string("bp"),
     cst_0x$0=caml_new_string("0x"),
     cst_x$2=caml_new_string("x"),
     cst$143=caml_new_string("%"),
     cst_bp$0=caml_new_string("bp"),
     cst_0x=caml_new_string("0x"),
     cst_x$1=caml_new_string("x"),
     cst$142=caml_new_string("%"),
     cst_bp=caml_new_string("bp"),
     cst_core_kernel$302=caml_new_string("core_kernel"),
     cst_src_percent_ml=caml_new_string("src/percent.ml"),
     cst$141=caml_new_string(""),
     cst_core_kernel$303=caml_new_string("core_kernel"),
     cst_src_percent_ml$0=caml_new_string("src/percent.ml"),
     cst_Percent_V1=caml_new_string(": Percent.V1"),
     cst_src_percent_ml$1=caml_new_string("src/percent.ml"),
     cst_BUG_The_sexp_functions_don_t_roundtrip_In_this_case_problem_is_of_percentage_divides_by_100_and_of_string_scales_by_0_01_which_can_yield_different_results=
      caml_new_string
       (": \n    BUG: The sexp functions don't roundtrip.\n\n    In this case problem is [of_percentage] divides by 100, and [of_string]\n    scales by 0.01, which can yield different results.\n  "),
     cst_src_percent_ml$2=caml_new_string("src/percent.ml"),
     cst_List_iter_f_fun_string_expected=
      caml_new_string
       (": <<List.iter   ~f:(fun (string, expected) ->    [...]>>"),
     cst_src_percent_ml$3=caml_new_string("src/percent.ml"),
     cst_List_iter_f_fun_t1_expected=
      caml_new_string
       (": <<List.iter   ~f:(fun (t1, expected) ->        [...]>>"),
     cst_src_percent_ml$4=caml_new_string("src/percent.ml"),
     cst_List_iter_f_fun_t_precision_format_e=
      caml_new_string
       (": <<List.iter   ~f:(fun (t, precision, format', e[...]>>"),
     cst_core_kernel$304=caml_new_string("core_kernel"),
     pos$84=caml_new_string("src/unit_of_time.ml:19:17"),
     pos$83=caml_new_string("src/unit_of_time.ml:18:17"),
     pos$82=caml_new_string("src/unit_of_time.ml:17:17"),
     pos$81=caml_new_string("src/unit_of_time.ml:16:17"),
     pos$80=caml_new_string("src/unit_of_time.ml:15:17"),
     pos$79=caml_new_string("src/unit_of_time.ml:14:17"),
     cst_day=caml_new_string("day"),
     cst_Day=caml_new_string("Day"),
     cst_Hour=caml_new_string("Hour"),
     cst_Microsecond=caml_new_string("Microsecond"),
     cst_Millisecond=caml_new_string("Millisecond"),
     cst_Minute=caml_new_string("Minute"),
     cst_Nanosecond=caml_new_string("Nanosecond"),
     cst_Second$3=caml_new_string("Second"),
     cst_hour=caml_new_string("hour"),
     cst_microsecond=caml_new_string("microsecond"),
     cst_millisecond=caml_new_string("millisecond"),
     cst_minute=caml_new_string("minute"),
     cst_nanosecond=caml_new_string("nanosecond"),
     cst_second$1=caml_new_string("second"),
     cst_day$0=caml_new_string("day"),
     cst_Day$0=caml_new_string("Day"),
     cst_Hour$0=caml_new_string("Hour"),
     cst_Microsecond$0=caml_new_string("Microsecond"),
     cst_Millisecond$0=caml_new_string("Millisecond"),
     cst_Minute$0=caml_new_string("Minute"),
     cst_Nanosecond$0=caml_new_string("Nanosecond"),
     cst_Second$4=caml_new_string("Second"),
     cst_hour$0=caml_new_string("hour"),
     cst_microsecond$0=caml_new_string("microsecond"),
     cst_millisecond$0=caml_new_string("millisecond"),
     cst_minute$0=caml_new_string("minute"),
     cst_nanosecond$0=caml_new_string("nanosecond"),
     cst_second$2=caml_new_string("second"),
     cst_core_kernel$305=caml_new_string("core_kernel"),
     cst_src_unit_of_time_ml=caml_new_string("src/unit_of_time.ml"),
     cst$145=caml_new_string(""),
     cst_core_kernel$306=caml_new_string("core_kernel"),
     tp_loc$32=caml_new_string("src/unit_of_time.ml.t"),
     cst_src_unit_of_time_ml$0=caml_new_string("src/unit_of_time.ml"),
     cst_Span_Unit_of_time_t=caml_new_string(": Span.Unit_of_time.t"),
     cst_core_kernel$307=caml_new_string("core_kernel"),
     pos$102=caml_new_string("src/span.ml:445:17"),
     pos$101=caml_new_string("src/span.ml:442:17"),
     pos$100=caml_new_string("src/span.ml:439:17"),
     pos$99=caml_new_string("src/span.ml:436:17"),
     pos$98=caml_new_string("src/span.ml:435:17"),
     pos$97=caml_new_string("src/span.ml:434:17"),
     expect$24=caml_new_string("1ns"),
     expect$25=caml_new_string("1d"),
     expect$26=caml_new_string("1d"),
     expect$27=caml_new_string("1d"),
     expect$28=caml_new_string("1.000000d "),
     expect$29=caml_new_string("0.042361d "),
     cst_ns$2=caml_new_string("ns"),
     cst_us$2=caml_new_string("us"),
     cst_ms$3=caml_new_string("ms"),
     cst_s$3=caml_new_string("s"),
     cst_m$3=caml_new_string("m"),
     cst_h$1=caml_new_string("h"),
     cst_d$3=caml_new_string("d"),
     cst$155=caml_new_string(" "),
     pos$96=caml_new_string("src/span.ml:386:25"),
     pos$95=caml_new_string("src/span.ml:385:25"),
     pos$94=caml_new_string("src/span.ml:383:25"),
     pos$93=caml_new_string("src/span.ml:382:25"),
     pos$92=caml_new_string("src/span.ml:380:25"),
     pos$91=caml_new_string("src/span.ml:379:25"),
     pos$90=caml_new_string("src/span.ml:377:25"),
     pos$89=caml_new_string("src/span.ml:376:25"),
     pos$88=caml_new_string("src/span.ml:374:25"),
     pos$87=caml_new_string("src/span.ml:373:25"),
     pos$86=caml_new_string("src/span.ml:371:25"),
     pos$85=caml_new_string("src/span.ml:370:25"),
     cst_src_span_ml$2=caml_new_string("src/span.ml"),
     cst_List_iter_tests_f_fun_t_tes=
      caml_new_string
       (": <<List.iter tests   ~f:(fun t ->         ([%tes[...]>>"),
     cst_A$5=caml_new_string("\x9a\x99\x99\x19\xd0\x12\x93A"),
     cst_925_926d$0=caml_new_string("925.926d"),
     cst$153=caml_new_string("\0\0\0\0\x80\x87\xe3@"),
     cst_11_11h$0=caml_new_string("11.11h"),
     cst_p_J$0=caml_new_string("\n\xd7\xa3p=J\x93@"),
     cst_20_576m$0=caml_new_string("20.576m"),
     cst_E$0=caml_new_string("\0\0\0\0\0\0E@"),
     cst_42s$0=caml_new_string("42s"),
     cst_9_v$0=caml_new_string("9\xb4\xc8v\xbe\x9f\xe6?"),
     cst_707ms$0=caml_new_string("707ms"),
     cst$154=caml_new_string("\x8d\xed\xb5\xa0\xf7\xc6\xb0>"),
     cst_1us=caml_new_string("1us"),
     cst_L_a$0=caml_new_string("L\xcea\xe3\xa7\x9d\x14>"),
     cst_1_2ns=caml_new_string("1.2ns"),
     cst_s_6$0=caml_new_string("\x12\x06\xd3s\x816\xdb="),
     cst_0_098999999999999991ns=caml_new_string("0.098999999999999991ns"),
     cst_A$4=caml_new_string("\x9a\x99\x99\x19\xd0\x12\x93A"),
     cst_925_926d=caml_new_string("925.926d"),
     cst$151=caml_new_string("\0\0\0\0\x80\x87\xe3@"),
     cst_11_11h=caml_new_string("11.11h"),
     cst_p_J=caml_new_string("\n\xd7\xa3p=J\x93@"),
     cst_20_576m=caml_new_string("20.576m"),
     cst_E=caml_new_string("\0\0\0\0\0\0E@"),
     cst_42s=caml_new_string("42s"),
     cst_9_v=caml_new_string("9\xb4\xc8v\xbe\x9f\xe6?"),
     cst_707ms=caml_new_string("707ms"),
     cst$152=caml_new_string("\x8d\xed\xb5\xa0\xf7\xc6\xb0>"),
     cst_0_001ms=caml_new_string("0.001ms"),
     cst_L_a=caml_new_string("L\xcea\xe3\xa7\x9d\x14>"),
     cst_1_2e_06ms=caml_new_string("1.2e-06ms"),
     cst_s_6=caml_new_string("\x12\x06\xd3s\x816\xdb="),
     cst_9_9e_08ms=caml_new_string("9.9e-08ms"),
     cst_inf=caml_new_string("inf"),
     cst_inf$0=caml_new_string("-inf"),
     cst_nan=caml_new_string("nan"),
     cst_ns$1=caml_new_string("ns"),
     cst_us$1=caml_new_string("us"),
     cst_ms$2=caml_new_string("ms"),
     cst_s$2=caml_new_string("s"),
     cst_m$2=caml_new_string("m"),
     cst_h$0=caml_new_string("h"),
     cst_d$2=caml_new_string("d"),
     cst_0s=caml_new_string("0s"),
     cst$150=caml_new_string(""),
     cst_no_number_given=caml_new_string("no number given"),
     cst$149=caml_new_string(""),
     cst_empty_string=caml_new_string("empty string"),
     cst_Time_spans_must_end_in_ns_us_ms_s_m_h_or_d=
      caml_new_string("Time spans must end in ns, us, ms, s, m, h, or d."),
     cst_Time_spans_must_end_in_ms_s_m_h_or_d=
      caml_new_string("Time spans must end in ms, s, m, h, or d."),
     cst_percent_must_be_between_0_and_100_Percent_given=
      caml_new_string
       ("percent must be between 0%% and 100%%, %{Percent} given"),
     cst$148=caml_new_string(", "),
     cst_and_100=caml_new_string(" and 100"),
     cst_percent_must_be_between_0=
      caml_new_string("percent must be between 0"),
     cst_d$1=caml_new_string("d"),
     cst_h=caml_new_string("h"),
     cst_m$1=caml_new_string("m"),
     cst_s$1=caml_new_string("s"),
     cst_ms$1=caml_new_string("ms"),
     cst$147=caml_new_string("-"),
     cst_hr=caml_new_string("hr"),
     cst_min=caml_new_string("min"),
     cst_ms=caml_new_string("ms"),
     cst_ns=caml_new_string("ns"),
     cst_sec=caml_new_string("sec"),
     cst_sign=caml_new_string("sign"),
     cst_us=caml_new_string("us"),
     cst_ns$0=caml_new_string("ns"),
     cst_us$0=caml_new_string("us"),
     cst_ms$0=caml_new_string("ms"),
     cst_sec$0=caml_new_string("sec"),
     cst_min$0=caml_new_string("min"),
     cst_hr$0=caml_new_string("hr"),
     cst_sign$0=caml_new_string("sign"),
     cst_core_kernel$308=caml_new_string("core_kernel"),
     cst_src_span_ml=caml_new_string("src/span.ml"),
     cst$146=caml_new_string(""),
     cst_core_kernel$309=caml_new_string("core_kernel"),
     tp_loc$33=caml_new_string("src/span.ml.Stable.V1.Parts.t"),
     cst_Core_kernel_Span_Stable_V1_T_of_sexp=
      caml_new_string("Core_kernel__Span.Stable.V1.T_of_sexp"),
     cst_Core_kernel_Span_Stable_V1_T_of_sexp_expected_atom_but_got=
      caml_new_string
       ("Core_kernel__Span.Stable.V1.T_of_sexp_expected_atom_but_got"),
     cst_src_span_ml$0=caml_new_string("src/span.ml"),
     cst_Span_V1=caml_new_string(": Span.V1"),
     cst_src_span_ml$1=caml_new_string("src/span.ml"),
     cst_Span_V2=caml_new_string(": Span.V2"),
     cst_src_span_ml$3=caml_new_string("src/span.ml"),
     cst_conversion_compatibility=
      caml_new_string(": conversion compatibility"),
     cst_src_span_ml$4=caml_new_string("src/span.ml"),
     cst_Span_to_string_hum=caml_new_string(": Span.to_string_hum"),
     module_name$10=caml_new_string("Core_kernel.Time.Span"),
     cst_t$173=caml_new_string("t"),
     cst_src_span_ml_457_4=caml_new_string("src/span.ml:457:4"),
     cst_t$174=caml_new_string("t"),
     cst_t$175=caml_new_string("t"),
     cst_src_span_ml_469_2=caml_new_string("src/span.ml:469:2"),
     cst_t$176=caml_new_string("t"),
     cst_src_span_ml$5=caml_new_string("src/span.ml"),
     cst_Set_equal_Set_of_list_hour_Set_t_of_se=
      caml_new_string
       (": <<Set.equal (Set.of_list [hour])   (Set.t_of_se[...]>>"),
     cst_src_span_ml$6=caml_new_string("src/span.ml"),
     cst_zero_microsecond=caml_new_string(": <<zero =. microsecond>>"),
     cst_src_span_ml$7=caml_new_string("src/span.ml"),
     cst_not_zero_of_ns_1001_0=
      caml_new_string(": <<not (zero =. (of_ns 1001.0))>>"),
     cst_core_kernel$310=caml_new_string("core_kernel"),
     cst_core_kernel$311=caml_new_string("core_kernel"),
     cst_src_span_intf_ml=caml_new_string("src/span_intf.ml"),
     cst$156=caml_new_string(""),
     cst_core_kernel$312=caml_new_string("core_kernel"),
     cst_core_kernel$313=caml_new_string("core_kernel"),
     cst_Ofday_t_of_sexp=caml_new_string("Ofday.t_of_sexp: "),
     cst_Ofday_t_of_sexp$0=caml_new_string("Ofday.t_of_sexp"),
     cst_00_00_00_PM=caml_new_string("00:00:00 PM"),
     cst_00_00_00_AM=caml_new_string("00:00:00 AM"),
     cst_00_00$3=caml_new_string(":00:00"),
     cst_00$3=caml_new_string(":00"),
     cst$164=caml_new_string(""),
     cst_00_00$1=caml_new_string(":00:00"),
     cst_00$1=caml_new_string(":00"),
     cst$162=caml_new_string(""),
     cst_00_00$2=caml_new_string(":00:00"),
     cst_00$2=caml_new_string(":00"),
     cst$163=caml_new_string(""),
     cst_00_00=caml_new_string(":00:00"),
     cst_00=caml_new_string(":00"),
     cst$159=caml_new_string(""),
     cst_00_00$0=caml_new_string(":00:00"),
     cst_00$0=caml_new_string(":00"),
     cst$160=caml_new_string(""),
     cst$161=caml_new_string(""),
     cst_expected_success=caml_new_string("expected success"),
     cst$158=caml_new_string(" "),
     suffixes$0=[0,caml_new_string(""),0],
     first_half_of_day_except_0_and_12=
      caml_list_of_js_array([1,2,3,4,5,6,7,8,9,10,11]),
     second_half_of_day=
      caml_list_of_js_array([13,14,15,16,17,18,19,21,21,22,23,24]),
     cst_12_00_00_PM=caml_new_string("12:00:00 PM"),
     cst_12_00_00_AM=caml_new_string("12:00:00 AM"),
     cst_src_ofday_ml$7=caml_new_string("src/ofday.ml"),
     cst_07_21_00=caml_new_string("07:21:00"),
     cst_12_00_00am=caml_new_string("12:00:00am"),
     cst_0o10_0x28_3e1=caml_new_string("0o10:0x28:3e1"),
     cst_1_0_00$0=caml_new_string("1:-0:00"),
     cst_1_0_00=caml_new_string("1:0:00"),
     cst_23_59_61=caml_new_string("23:59:61"),
     cst_len_2=caml_new_string("len < 2"),
     cst_hour_24=caml_new_string("hour > 24"),
     cst_2_len_5=caml_new_string("2 < len < 5"),
     cst_first_colon_missing=caml_new_string("first colon missing"),
     cst_minute_60=caml_new_string("minute > 60"),
     cst_24_hours_and_non_zero_minute=
      caml_new_string("24 hours and non-zero minute"),
     cst_5_len_8=caml_new_string("5 < len < 8"),
     cst_second_colon_missing=caml_new_string("second colon missing"),
     cst_24_hours_and_non_zero_seconds=
      caml_new_string("24 hours and non-zero seconds"),
     cst_length_9=caml_new_string("length = 9"),
     cst_missing_subsecond_separator=
      caml_new_string("missing subsecond separator"),
     cst_24_hours_and_non_zero_subseconds=
      caml_new_string("24 hours and non-zero subseconds"),
     cst_Ofday_of_span_since_start_of_day_infinite_value=
      caml_new_string("Ofday.of_span_since_start_of_day: infinite value"),
     cst_Ofday_of_span_since_start_of_day_NaN_value=
      caml_new_string("Ofday.of_span_since_start_of_day: NaN value"),
     cst_core_kernel$314=caml_new_string("core_kernel"),
     cst_src_ofday_ml=caml_new_string("src/ofday.ml"),
     cst$157=caml_new_string(""),
     cst_core_kernel$315=caml_new_string("core_kernel"),
     cst_src_ofday_ml$0=caml_new_string("src/ofday.ml"),
     cst_create_can_handle_a_leap_second=
      caml_new_string(": create can handle a leap second"),
     cst_src_ofday_ml$1=caml_new_string("src/ofday.ml"),
     cst_of_string_iso8601_extended_supports_leap_seconds=
      caml_new_string(": of_string_iso8601_extended supports leap seconds"),
     cst_src_ofday_ml$2=caml_new_string("src/ofday.ml"),
     cst_of_string_iso8601_extended_doesn_t_support_two_leap_seconds=
      caml_new_string
       (": of_string_iso8601_extended doesn't support two leap seconds"),
     module_name$11=caml_new_string("Core_kernel.Time.Ofday"),
     cst_src_ofday_ml$3=caml_new_string("src/ofday.ml"),
     cst_of_string_does_not_naively_dispatch_to_Int_of_string_and_Float_of_string=
      caml_new_string
       (": of_string does not naively dispatch to [Int.of_string] and [Float.of_string]"),
     cst_src_ofday_ml_Stable_V1=caml_new_string("src/ofday.ml.Stable.V1"),
     cst_src_ofday_ml$4=caml_new_string("src/ofday.ml"),
     cst_of_string_12_00_00am=caml_new_string('of_string "12:00:00am"'),
     cst_Time_Ofday_of_string=caml_new_string("Time.Ofday.of_string"),
     cst_src_ofday_ml$5=caml_new_string("src/ofday.ml"),
     cst_of_string_supports_leap_seconds=
      caml_new_string(": of_string supports leap seconds"),
     cst_src_ofday_ml$6=caml_new_string("src/ofday.ml"),
     cst_of_string_supports_non_meridiem_times=
      caml_new_string(": of_string supports non-meridiem times"),
     cst_src_ofday_ml$8=caml_new_string("src/ofday.ml"),
     cst_src_ofday_ml$9=caml_new_string("src/ofday.ml"),
     cst_src_ofday_ml$10=caml_new_string("src/ofday.ml"),
     cst_src_ofday_ml$11=caml_new_string("src/ofday.ml"),
     cst_42361416b6571d86f5fdc7c660b4153a=
      caml_new_string("42361416b6571d86f5fdc7c660b4153a"),
     cst_src_ofday_ml$12=caml_new_string("src/ofday.ml"),
     cst_of_string_supports_meridiem_times=
      caml_new_string(": of_string supports meridiem times"),
     cst_t$177=caml_new_string("t"),
     cst_src_ofday_ml_428_4=caml_new_string("src/ofday.ml:428:4"),
     cst_t$178=caml_new_string("t"),
     cst_t$179=caml_new_string("t"),
     cst_src_ofday_ml_441_2=caml_new_string("src/ofday.ml:441:2"),
     cst_t$180=caml_new_string("t"),
     cst_src_ofday_ml$13=caml_new_string("src/ofday.ml"),
     cst_Set_equal_Set_of_list_start_of_day_Set=
      caml_new_string
       (": <<Set.equal (Set.of_list [start_of_day])   (Set[...]>>"),
     cst_core_kernel$316=caml_new_string("core_kernel"),
     cst_core_kernel$317=caml_new_string("core_kernel"),
     cst_src_ofday_intf_ml=caml_new_string("src/ofday_intf.ml"),
     cst$165=caml_new_string(""),
     cst_core_kernel$318=caml_new_string("core_kernel"),
     cst_core_kernel$319=caml_new_string("core_kernel"),
     cst_core_kernel$320=caml_new_string("core_kernel"),
     cst_src_time0_intf_ml=caml_new_string("src/time0_intf.ml"),
     cst$166=caml_new_string(""),
     cst_core_kernel$321=caml_new_string("core_kernel"),
     cst_core_kernel$322=caml_new_string("core_kernel"),
     cst_core_kernel$323=caml_new_string("core_kernel"),
     cst_src_time_intf_ml=caml_new_string("src/time_intf.ml"),
     cst$167=caml_new_string(""),
     cst_core_kernel$324=caml_new_string("core_kernel"),
     cst_core_kernel$325=caml_new_string("core_kernel"),
     cst_Time_next_multiple_got_nonpositive_interval=
      caml_new_string("Time.next_multiple got nonpositive interval"),
     cst$175=caml_new_string(" "),
     cst$176=caml_new_string(" "),
     cst_no_spaces_or_T_found=caml_new_string("no spaces or T found"),
     cst_too_many_spaces=caml_new_string("too many spaces"),
     utc_offset=[0,0],
     cst_00$4=caml_new_string(":00"),
     cst$174=caml_new_string(":"),
     cst_Time_of_localized_string=caml_new_string("Time.of_localized_string"),
     cst_no_space_in_filename_string=
      caml_new_string("no space in filename string"),
     cst$173=caml_new_string("_"),
     cst$172=caml_new_string(" "),
     cst$171=caml_new_string(" "),
     cst_Z=caml_new_string("Z"),
     cst$169=caml_new_string("-"),
     cst$170=caml_new_string("+"),
     cst_Time_to_date_ofday_precise=
      caml_new_string("Time.to_date_ofday_precise"),
     cst_Core_kernel_Time_Make_Time0_Time_of_string=
      caml_new_string("Core_kernel__Time.Make(Time0).Time_of_string"),
     cst_core_kernel$326=caml_new_string("core_kernel"),
     cst_src_time_ml=caml_new_string("src/time.ml"),
     cst$168=caml_new_string(""),
     cst_core_kernel$327=caml_new_string("core_kernel"),
     cst_core_kernel$328=caml_new_string("core_kernel"),
     cst_core_kernel$329=caml_new_string("core_kernel"),
     cst_src_time_ns_intf_ml=caml_new_string("src/time_ns_intf.ml"),
     cst$177=caml_new_string(""),
     cst_core_kernel$330=caml_new_string("core_kernel"),
     cst_core_kernel$331=caml_new_string("core_kernel"),
     cst_result_out_of_bounds=caml_new_string("result out of bounds"),
     cst_src_time_ns_ml$31=caml_new_string("src/time_ns.ml"),
     cst_test_true_71_1666750235549516973L=
      caml_new_string(": <<test true 71 1666750235549516973L>>"),
     cst_src_time_ns_ml$32=caml_new_string("src/time_ns.ml"),
     cst_test_true_4398_1232807081547132235L=
      caml_new_string(": <<test true 4398 1232807081547132235L>>"),
     cst_src_time_ns_ml$33=caml_new_string("src/time_ns.ml"),
     cst_test_false_702561_1233263206897519979L=
      caml_new_string(": <<test false 702561 1233263206897519979L>>"),
     cst_src_time_ns_ml$34=caml_new_string("src/time_ns.ml"),
     cst_test_true_65_1813146216102385742L=
      caml_new_string(": <<test true 65 1813146216102385742L>>"),
     cst_src_time_ns_ml$35=caml_new_string("src/time_ns.ml"),
     cst_test_false_3376_1430224273339105389L=
      caml_new_string(": <<test false 3376 1430224273339105389L>>"),
     cst_src_time_ns_ml$36=caml_new_string("src/time_ns.ml"),
     cst_test_true_25_1289744875932860592L=
      caml_new_string(": <<test true 25 1289744875932860592L>>"),
     cst_src_time_ns_ml$37=caml_new_string("src/time_ns.ml"),
     cst_test_true_2640_1289026286379471964L=
      caml_new_string(": <<test true 2640 1289026286379471964L>>"),
     cst_src_time_ns_ml$38=caml_new_string("src/time_ns.ml"),
     cst_test_true_7062861_1582734990009845838L=
      caml_new_string(": <<test true 7062861 1582734990009845838L>>"),
     cst_src_time_ns_ml$39=caml_new_string("src/time_ns.ml"),
     cst_test_false_26123810_1509919129138733390L=
      caml_new_string(": <<test false 26123810 1509919129138733390L>>"),
     cst_src_time_ns_ml$40=caml_new_string("src/time_ns.ml"),
     cst_test_false_1076_1514456253942665045L=
      caml_new_string(": <<test false 1076 1514456253942665045L>>"),
     cst_src_time_ns_ml$41=caml_new_string("src/time_ns.ml"),
     cst_test_false_47873597_1567592770350241609L=
      caml_new_string(": <<test false 47873597 1567592770350241609L>>"),
     cst_src_time_ns_ml$42=caml_new_string("src/time_ns.ml"),
     cst_test_true_147_1794365064173405211L=
      caml_new_string(": <<test true 147 1794365064173405211L>>"),
     cst_src_time_ns_ml$43=caml_new_string("src/time_ns.ml"),
     cst_test_true_37416_1703355717287748172L=
      caml_new_string(": <<test true 37416 1703355717287748172L>>"),
     cst_src_time_ns_ml$44=caml_new_string("src/time_ns.ml"),
     cst_test_false_11_1627963384978464309L=
      caml_new_string(": <<test false 11 1627963384978464309L>>"),
     cst_src_time_ns_ml$45=caml_new_string("src/time_ns.ml"),
     cst_test_true_362857_1477941666514490237L=
      caml_new_string(": <<test true 362857 1477941666514490237L>>"),
     cst_src_time_ns_ml$46=caml_new_string("src/time_ns.ml"),
     cst_test_true_74_1835379421104268809L=
      caml_new_string(": <<test true 74 1835379421104268809L>>"),
     cst_src_time_ns_ml$47=caml_new_string("src/time_ns.ml"),
     cst_test_false_95_1518869409078948499L=
      caml_new_string(": <<test false 95 1518869409078948499L>>"),
     cst_src_time_ns_ml$48=caml_new_string("src/time_ns.ml"),
     cst_test_false_152_1774086601023993329L=
      caml_new_string(": <<test false 152 1774086601023993329L>>"),
     cst_src_time_ns_ml$49=caml_new_string("src/time_ns.ml"),
     cst_test_true_2963474_1177784542849146405L=
      caml_new_string(": <<test true 2963474 1177784542849146405L>>"),
     cst_src_time_ns_ml$50=caml_new_string("src/time_ns.ml"),
     cst_test_false_30_1322037015396216447L=
      caml_new_string(": <<test false 30 1322037015396216447L>>"),
     cst_src_time_ns_ml$51=caml_new_string("src/time_ns.ml"),
     cst_test_true_25_1686952462277171285L=
      caml_new_string(": <<test true 25 1686952462277171285L>>"),
     cst_src_time_ns_ml$52=caml_new_string("src/time_ns.ml"),
     cst_test_false_77747994_1232530693599997021L=
      caml_new_string(": <<test false 77747994 1232530693599997021L>>"),
     cst_src_time_ns_ml$53=caml_new_string("src/time_ns.ml"),
     cst_test_true_39_1418422346766901525L=
      caml_new_string(": <<test true 39 1418422346766901525L>>"),
     cst_src_time_ns_ml$54=caml_new_string("src/time_ns.ml"),
     cst_test_true_20_1164906391254697606L=
      caml_new_string(": <<test true 20 1164906391254697606L>>"),
     cst_src_time_ns_ml$55=caml_new_string("src/time_ns.ml"),
     cst_test_false_492686918_1350478871564364650L=
      caml_new_string(": <<test false 492686918 1350478871564364650L>>"),
     cst_src_time_ns_ml$56=caml_new_string("src/time_ns.ml"),
     cst_test_false_5626939_1254841457643911520L=
      caml_new_string(": <<test false 5626939 1254841457643911520L>>"),
     cst_src_time_ns_ml$57=caml_new_string("src/time_ns.ml"),
     cst_test_true_1189147_1566503665916540724L=
      caml_new_string(": <<test true 1189147 1566503665916540724L>>"),
     cst_src_time_ns_ml$58=caml_new_string("src/time_ns.ml"),
     cst_test_false_97968678_1202922821174442071L=
      caml_new_string(": <<test false 97968678 1202922821174442071L>>"),
     cst_src_time_ns_ml$59=caml_new_string("src/time_ns.ml"),
     cst_test_false_20_1241457243504201837L=
      caml_new_string(": <<test false 20 1241457243504201837L>>"),
     cst_src_time_ns_ml$60=caml_new_string("src/time_ns.ml"),
     cst_test_true_99_1063228554057138547L=
      caml_new_string(": <<test true 99 1063228554057138547L>>"),
     cst_src_time_ns_ml$61=caml_new_string("src/time_ns.ml"),
     cst_test_true_73_1127965283765790199L=
      caml_new_string(": <<test true 73 1127965283765790199L>>"),
     cst_src_time_ns_ml$62=caml_new_string("src/time_ns.ml"),
     cst_test_true_92513_1423525486630794877L=
      caml_new_string(": <<test true 92513 1423525486630794877L>>"),
     cst_src_time_ns_ml$63=caml_new_string("src/time_ns.ml"),
     cst_test_true_208946207_1512896538257529954L=
      caml_new_string(": <<test true 208946207 1512896538257529954L>>"),
     cst_src_time_ns_ml$64=caml_new_string("src/time_ns.ml"),
     cst_test_true_558_1304902428047905868L=
      caml_new_string(": <<test true 558 1304902428047905868L>>"),
     cst_src_time_ns_ml$65=caml_new_string("src/time_ns.ml"),
     cst_test_true_27_1454760325484042946L=
      caml_new_string(": <<test true 27 1454760325484042946L>>"),
     cst_src_time_ns_ml$66=caml_new_string("src/time_ns.ml"),
     cst_test_true_9511417_1224625971869008380L=
      caml_new_string(": <<test true 9511417 1224625971869008380L>>"),
     cst_src_time_ns_ml$67=caml_new_string("src/time_ns.ml"),
     cst_test_true_1112121_1486628785456556405L=
      caml_new_string(": <<test true 1112121 1486628785456556405L>>"),
     cst_src_time_ns_ml$68=caml_new_string("src/time_ns.ml"),
     cst_test_true_36_1226843097592112449L=
      caml_new_string(": <<test true 36 1226843097592112449L>>"),
     cst_src_time_ns_ml$69=caml_new_string("src/time_ns.ml"),
     cst_test_true_60_1299700152825201828L=
      caml_new_string(": <<test true 60 1299700152825201828L>>"),
     cst_src_time_ns_ml$70=caml_new_string("src/time_ns.ml"),
     cst_test_true_114032_1507179377240642938L=
      caml_new_string(": <<test true 114032 1507179377240642938L>>"),
     cst_src_time_ns_ml$71=caml_new_string("src/time_ns.ml"),
     cst_test_true_27905_1379112115218849615L=
      caml_new_string(": <<test true 27905 1379112115218849615L>>"),
     cst_src_time_ns_ml$72=caml_new_string("src/time_ns.ml"),
     cst_test_true_368860702_1318925554630500136L=
      caml_new_string(": <<test true 368860702 1318925554630500136L>>"),
     cst_src_time_ns_ml$73=caml_new_string("src/time_ns.ml"),
     cst_test_true_1636_1670399627434728314L=
      caml_new_string(": <<test true 1636 1670399627434728314L>>"),
     cst_src_time_ns_ml$74=caml_new_string("src/time_ns.ml"),
     cst_test_false_27_1735798120119522136L=
      caml_new_string(": <<test false 27 1735798120119522136L>>"),
     cst_src_time_ns_ml$75=caml_new_string("src/time_ns.ml"),
     cst_test_true_14_1880325938102084694L=
      caml_new_string(": <<test true 14 1880325938102084694L>>"),
     cst_src_time_ns_ml$76=caml_new_string("src/time_ns.ml"),
     cst_test_true_155_1488215974636830525L=
      caml_new_string(": <<test true 155 1488215974636830525L>>"),
     cst_src_time_ns_ml$77=caml_new_string("src/time_ns.ml"),
     cst_test_true_14319914_1298824542911254370L=
      caml_new_string(": <<test true 14319914 1298824542911254370L>>"),
     cst_src_time_ns_ml$78=caml_new_string("src/time_ns.ml"),
     cst_test_true_94_1961333441294309841L=
      caml_new_string(": <<test true 94 1961333441294309841L>>"),
     cst_src_time_ns_ml$79=caml_new_string("src/time_ns.ml"),
     cst_test_true_321_1191344461619096942L=
      caml_new_string(": <<test true 321 1191344461619096942L>>"),
     cst_src_time_ns_ml$80=caml_new_string("src/time_ns.ml"),
     cst_test_true_706626_1179098309603309142L=
      caml_new_string(": <<test true 706626 1179098309603309142L>>"),
     cst_src_time_ns_ml$81=caml_new_string("src/time_ns.ml"),
     cst_test_true_5_1180517413083401326L=
      caml_new_string(": <<test true 5 1180517413083401326L>>"),
     cst_src_time_ns_ml$82=caml_new_string("src/time_ns.ml"),
     cst_test_false_30523434_1471069600394063742L=
      caml_new_string(": <<test false 30523434 1471069600394063742L>>"),
     cst_src_time_ns_ml$83=caml_new_string("src/time_ns.ml"),
     cst_test_false_106875447_1789919428848820069L=
      caml_new_string(": <<test false 106875447 1789919428848820069L>>"),
     cst_src_time_ns_ml$84=caml_new_string("src/time_ns.ml"),
     cst_test_true_28_1013606888178097611L=
      caml_new_string(": <<test true 28 1013606888178097611L>>"),
     cst_src_time_ns_ml$85=caml_new_string("src/time_ns.ml"),
     cst_test_true_5178_1168893256723816286L=
      caml_new_string(": <<test true 5178 1168893256723816286L>>"),
     cst_src_time_ns_ml$86=caml_new_string("src/time_ns.ml"),
     cst_test_true_146907740_1402240657577530746L=
      caml_new_string(": <<test true 146907740 1402240657577530746L>>"),
     cst_src_time_ns_ml$87=caml_new_string("src/time_ns.ml"),
     cst_test_true_127125596_1332881548503325287L=
      caml_new_string(": <<test true 127125596 1332881548503325287L>>"),
     cst_src_time_ns_ml$88=caml_new_string("src/time_ns.ml"),
     cst_test_true_46691_1526532096462597222L=
      caml_new_string(": <<test true 46691 1526532096462597222L>>"),
     cst_src_time_ns_ml$89=caml_new_string("src/time_ns.ml"),
     cst_test_true_1603_1745157292595832416L=
      caml_new_string(": <<test true 1603 1745157292595832416L>>"),
     cst_src_time_ns_ml$90=caml_new_string("src/time_ns.ml"),
     cst_test_true_141650492_1779813912846436672L=
      caml_new_string(": <<test true 141650492 1779813912846436672L>>"),
     cst_src_time_ns_ml$91=caml_new_string("src/time_ns.ml"),
     cst_test_false_20_1916060142837991511L=
      caml_new_string(": <<test false 20 1916060142837991511L>>"),
     cst_src_time_ns_ml$92=caml_new_string("src/time_ns.ml"),
     cst_test_false_27_1366845916494697310L=
      caml_new_string(": <<test false 27 1366845916494697310L>>"),
     cst_src_time_ns_ml$93=caml_new_string("src/time_ns.ml"),
     cst_test_true_61_1572832513125636690L=
      caml_new_string(": <<test true 61 1572832513125636690L>>"),
     cst_src_time_ns_ml$94=caml_new_string("src/time_ns.ml"),
     cst_test_false_11254_1301465801253970270L=
      caml_new_string(": <<test false 11254 1301465801253970270L>>"),
     cst_src_time_ns_ml$95=caml_new_string("src/time_ns.ml"),
     cst_test_true_2817556_1220217790200673585L=
      caml_new_string(": <<test true 2817556 1220217790200673585L>>"),
     cst_src_time_ns_ml$96=caml_new_string("src/time_ns.ml"),
     cst_test_true_46399240_1371834303096963699L=
      caml_new_string(": <<test true 46399240 1371834303096963699L>>"),
     cst_src_time_ns_ml$97=caml_new_string("src/time_ns.ml"),
     cst_test_true_10280275_1199022106578060117L=
      caml_new_string(": <<test true 10280275 1199022106578060117L>>"),
     cst_src_time_ns_ml$98=caml_new_string("src/time_ns.ml"),
     cst_test_true_163667_1277585249492511350L=
      caml_new_string(": <<test true 163667 1277585249492511350L>>"),
     cst_src_time_ns_ml$99=caml_new_string("src/time_ns.ml"),
     cst_test_true_441771131_1865810978398941565L=
      caml_new_string(": <<test true 441771131 1865810978398941565L>>"),
     cst_src_time_ns_ml$100=caml_new_string("src/time_ns.ml"),
     cst_test_true_22561070_1535418639166874210L=
      caml_new_string(": <<test true 22561070 1535418639166874210L>>"),
     cst_src_time_ns_ml$101=caml_new_string("src/time_ns.ml"),
     cst_test_true_677456_1356038574036607058L=
      caml_new_string(": <<test true 677456 1356038574036607058L>>"),
     cst_src_time_ns_ml$102=caml_new_string("src/time_ns.ml"),
     cst_test_true_109_1102385187927169659L=
      caml_new_string(": <<test true 109 1102385187927169659L>>"),
     cst_src_time_ns_ml$103=caml_new_string("src/time_ns.ml"),
     cst_test_true_169_1592923082707947954L=
      caml_new_string(": <<test true 169 1592923082707947954L>>"),
     cst_src_time_ns_ml$104=caml_new_string("src/time_ns.ml"),
     cst_test_false_2150725_1769663126416348286L=
      caml_new_string(": <<test false 2150725 1769663126416348286L>>"),
     cst_src_time_ns_ml$105=caml_new_string("src/time_ns.ml"),
     cst_test_true_159_1051696934142612937L=
      caml_new_string(": <<test true 159 1051696934142612937L>>"),
     cst_src_time_ns_ml$106=caml_new_string("src/time_ns.ml"),
     cst_test_true_29_1844613926625333568L=
      caml_new_string(": <<test true 29 1844613926625333568L>>"),
     cst_src_time_ns_ml$107=caml_new_string("src/time_ns.ml"),
     cst_test_true_30_1361000119652263049L=
      caml_new_string(": <<test true 30 1361000119652263049L>>"),
     cst_src_time_ns_ml$108=caml_new_string("src/time_ns.ml"),
     cst_test_false_21058_1323116357214603127L=
      caml_new_string(": <<test false 21058 1323116357214603127L>>"),
     cst_src_time_ns_ml$109=caml_new_string("src/time_ns.ml"),
     cst_test_true_1163794_1221604356987291502L=
      caml_new_string(": <<test true 1163794 1221604356987291502L>>"),
     cst_src_time_ns_ml$110=caml_new_string("src/time_ns.ml"),
     cst_test_false_30_1040042732593079852L=
      caml_new_string(": <<test false 30 1040042732593079852L>>"),
     cst_src_time_ns_ml$111=caml_new_string("src/time_ns.ml"),
     cst_test_false_106_1997585750801910583L=
      caml_new_string(": <<test false 106 1997585750801910583L>>"),
     cst_src_time_ns_ml$112=caml_new_string("src/time_ns.ml"),
     cst_test_true_78_1292467707712256145L=
      caml_new_string(": <<test true 78 1292467707712256145L>>"),
     cst_src_time_ns_ml$113=caml_new_string("src/time_ns.ml"),
     cst_test_false_882992_1557796972319309155L=
      caml_new_string(": <<test false 882992 1557796972319309155L>>"),
     cst_src_time_ns_ml$114=caml_new_string("src/time_ns.ml"),
     cst_test_false_1821_1973683565069601822L=
      caml_new_string(": <<test false 1821 1973683565069601822L>>"),
     cst_src_time_ns_ml$115=caml_new_string("src/time_ns.ml"),
     cst_test_false_34661_1737515124214074993L=
      caml_new_string(": <<test false 34661 1737515124214074993L>>"),
     cst_src_time_ns_ml$116=caml_new_string("src/time_ns.ml"),
     cst_test_true_91661_1525765679206225703L=
      caml_new_string(": <<test true 91661 1525765679206225703L>>"),
     cst_src_time_ns_ml$117=caml_new_string("src/time_ns.ml"),
     cst_test_false_55_1287656410542943084L=
      caml_new_string(": <<test false 55 1287656410542943084L>>"),
     cst_src_time_ns_ml$118=caml_new_string("src/time_ns.ml"),
     cst_test_true_25_1144756873630117512L=
      caml_new_string(": <<test true 25 1144756873630117512L>>"),
     cst_src_time_ns_ml$119=caml_new_string("src/time_ns.ml"),
     cst_test_true_121625_1374589039260879728L=
      caml_new_string(": <<test true 121625 1374589039260879728L>>"),
     cst_src_time_ns_ml$120=caml_new_string("src/time_ns.ml"),
     cst_test_false_55_1970197704905173942L=
      caml_new_string(": <<test false 55 1970197704905173942L>>"),
     cst_src_time_ns_ml$121=caml_new_string("src/time_ns.ml"),
     cst_test_true_17_1013158341065700634L=
      caml_new_string(": <<test true 17 1013158341065700634L>>"),
     cst_src_time_ns_ml$122=caml_new_string("src/time_ns.ml"),
     cst_test_true_5176_1352936504880492660L=
      caml_new_string(": <<test true 5176 1352936504880492660L>>"),
     cst_src_time_ns_ml$123=caml_new_string("src/time_ns.ml"),
     cst_test_true_12_1955810895023292883L=
      caml_new_string(": <<test true 12 1955810895023292883L>>"),
     cst_src_time_ns_ml$124=caml_new_string("src/time_ns.ml"),
     cst_test_true_67034967_1556142079069258330L=
      caml_new_string(": <<test true 67034967 1556142079069258330L>>"),
     cst_src_time_ns_ml$125=caml_new_string("src/time_ns.ml"),
     cst_test_true_690258_1241013338154557567L=
      caml_new_string(": <<test true 690258 1241013338154557567L>>"),
     cst_src_time_ns_ml$126=caml_new_string("src/time_ns.ml"),
     cst_test_false_5606142_1356689387566170970L=
      caml_new_string(": <<test false 5606142 1356689387566170970L>>"),
     cst_src_time_ns_ml$127=caml_new_string("src/time_ns.ml"),
     cst_test_true_548_1613807159903275820L=
      caml_new_string(": <<test true 548 1613807159903275820L>>"),
     cst_src_time_ns_ml$128=caml_new_string("src/time_ns.ml"),
     cst_test_true_13_1425941806049471918L=
      caml_new_string(": <<test true 13 1425941806049471918L>>"),
     cst_src_time_ns_ml$129=caml_new_string("src/time_ns.ml"),
     cst_test_false_155572024_1398827221896378979L=
      caml_new_string(": <<test false 155572024 1398827221896378979L>>"),
     cst_src_time_ns_ml$130=caml_new_string("src/time_ns.ml"),
     cst_test_true_938925403_1550277848520025471L=
      caml_new_string(": <<test true 938925403 1550277848520025471L>>"),
     cst_src_time_ns_ml$131=caml_new_string("src/time_ns.ml"),
     cst_test_false_13058335_1306567871862304618L=
      caml_new_string(": <<test false 13058335 1306567871862304618L>>"),
     cst_src_time_ns_ml$132=caml_new_string("src/time_ns.ml"),
     cst_test_true_2_1997152439817382933L=
      caml_new_string(": <<test true 2 1997152439817382933L>>"),
     cst_src_time_ns_ml$133=caml_new_string("src/time_ns.ml"),
     cst_test_true_131456077_1809241097498435420L=
      caml_new_string(": <<test true 131456077 1809241097498435420L>>"),
     cst_src_time_ns_ml$134=caml_new_string("src/time_ns.ml"),
     cst_test_true_5_1531223674910420761L=
      caml_new_string(": <<test true 5 1531223674910420761L>>"),
     cst_src_time_ns_ml$135=caml_new_string("src/time_ns.ml"),
     cst_test_false_1125_1175905228832358761L=
      caml_new_string(": <<test false 1125 1175905228832358761L>>"),
     cst_src_time_ns_ml$136=caml_new_string("src/time_ns.ml"),
     cst_test_true_350_1573261556955534963L=
      caml_new_string(": <<test true 350 1573261556955534963L>>"),
     cst_src_time_ns_ml$137=caml_new_string("src/time_ns.ml"),
     cst_test_false_21_1529314545697532312L=
      caml_new_string(": <<test false 21 1529314545697532312L>>"),
     cst_src_time_ns_ml$138=caml_new_string("src/time_ns.ml"),
     cst_test_false_11816_1222083468556908088L=
      caml_new_string(": <<test false 11816 1222083468556908088L>>"),
     cst_src_time_ns_ml$139=caml_new_string("src/time_ns.ml"),
     cst_test_true_86085_1436391155125371248L=
      caml_new_string(": <<test true 86085 1436391155125371248L>>"),
     cst_src_time_ns_ml$140=caml_new_string("src/time_ns.ml"),
     cst_test_true_75063667_1395675403046737786L=
      caml_new_string(": <<test true 75063667 1395675403046737786L>>"),
     cst_src_time_ns_ml$141=caml_new_string("src/time_ns.ml"),
     cst_test_false_67_1765632860861960357L=
      caml_new_string(": <<test false 67 1765632860861960357L>>"),
     cst_src_time_ns_ml$142=caml_new_string("src/time_ns.ml"),
     cst_test_false_184086_1232986716459688821L=
      caml_new_string(": <<test false 184086 1232986716459688821L>>"),
     cst_src_time_ns_ml$143=caml_new_string("src/time_ns.ml"),
     cst_test_true_53_1643034916467763402L=
      caml_new_string(": <<test true 53 1643034916467763402L>>"),
     cst_src_time_ns_ml$144=caml_new_string("src/time_ns.ml"),
     cst_test_true_164_1931973285029689763L=
      caml_new_string(": <<test true 164 1931973285029689763L>>"),
     cst_src_time_ns_ml$145=caml_new_string("src/time_ns.ml"),
     cst_test_true_10_1317304422397637720L=
      caml_new_string(": <<test true 10 1317304422397637720L>>"),
     cst_src_time_ns_ml$146=caml_new_string("src/time_ns.ml"),
     cst_test_true_12566_1421417764422298993L=
      caml_new_string(": <<test true 12566 1421417764422298993L>>"),
     cst_src_time_ns_ml$147=caml_new_string("src/time_ns.ml"),
     cst_test_true_122903121_1389456412090860886L=
      caml_new_string(": <<test true 122903121 1389456412090860886L>>"),
     cst_src_time_ns_ml$148=caml_new_string("src/time_ns.ml"),
     cst_test_false_3831308_1617363073756443917L=
      caml_new_string(": <<test false 3831308 1617363073756443917L>>"),
     cst_src_time_ns_ml$149=caml_new_string("src/time_ns.ml"),
     cst_test_true_2274_1256309428080267889L=
      caml_new_string(": <<test true 2274 1256309428080267889L>>"),
     cst_src_time_ns_ml$150=caml_new_string("src/time_ns.ml"),
     cst_test_true_69_1975893988922224788L=
      caml_new_string(": <<test true 69 1975893988922224788L>>"),
     cst_src_time_ns_ml$151=caml_new_string("src/time_ns.ml"),
     cst_test_true_460408083_1956390486383825465L=
      caml_new_string(": <<test true 460408083 1956390486383825465L>>"),
     cst_src_time_ns_ml$152=caml_new_string("src/time_ns.ml"),
     cst_test_true_20_1294502403828905377L=
      caml_new_string(": <<test true 20 1294502403828905377L>>"),
     cst_src_time_ns_ml$153=caml_new_string("src/time_ns.ml"),
     cst_test_true_75279_1210517500455430679L=
      caml_new_string(": <<test true 75279 1210517500455430679L>>"),
     cst_src_time_ns_ml$154=caml_new_string("src/time_ns.ml"),
     cst_test_false_335_1184433858378833746L=
      caml_new_string(": <<test false 335 1184433858378833746L>>"),
     cst_src_time_ns_ml$155=caml_new_string("src/time_ns.ml"),
     cst_test_false_94523_1420732229891051641L=
      caml_new_string(": <<test false 94523 1420732229891051641L>>"),
     cst_src_time_ns_ml$156=caml_new_string("src/time_ns.ml"),
     cst_test_false_16_1310464979299616987L=
      caml_new_string(": <<test false 16 1310464979299616987L>>"),
     cst_src_time_ns_ml$157=caml_new_string("src/time_ns.ml"),
     cst_test_true_5886_1602668327390189086L=
      caml_new_string(": <<test true 5886 1602668327390189086L>>"),
     cst_src_time_ns_ml$158=caml_new_string("src/time_ns.ml"),
     cst_test_false_9584_1532134444641007990L=
      caml_new_string(": <<test false 9584 1532134444641007990L>>"),
     cst_src_time_ns_ml$159=caml_new_string("src/time_ns.ml"),
     cst_test_true_17_1362463965931411147L=
      caml_new_string(": <<test true 17 1362463965931411147L>>"),
     cst_src_time_ns_ml$160=caml_new_string("src/time_ns.ml"),
     cst_test_false_2_1693027090042722358L=
      caml_new_string(": <<test false 2 1693027090042722358L>>"),
     cst_src_time_ns_ml$161=caml_new_string("src/time_ns.ml"),
     cst_test_false_228135731_1462077890315132778L=
      caml_new_string(": <<test false 228135731 1462077890315132778L>>"),
     cst_src_time_ns_ml$162=caml_new_string("src/time_ns.ml"),
     cst_test_false_11_1018644923234572949L=
      caml_new_string(": <<test false 11 1018644923234572949L>>"),
     cst_src_time_ns_ml$163=caml_new_string("src/time_ns.ml"),
     cst_test_false_132723_1582399817588675962L=
      caml_new_string(": <<test false 132723 1582399817588675962L>>"),
     cst_src_time_ns_ml$164=caml_new_string("src/time_ns.ml"),
     cst_test_false_3667_1506604922540283994L=
      caml_new_string(": <<test false 3667 1506604922540283994L>>"),
     cst_src_time_ns_ml$165=caml_new_string("src/time_ns.ml"),
     cst_test_true_265541944_1695560402922008138L=
      caml_new_string(": <<test true 265541944 1695560402922008138L>>"),
     cst_src_time_ns_ml$166=caml_new_string("src/time_ns.ml"),
     cst_test_true_310_1875190738574556027L=
      caml_new_string(": <<test true 310 1875190738574556027L>>"),
     cst_src_time_ns_ml$167=caml_new_string("src/time_ns.ml"),
     cst_test_true_8570918_1184809728498232683L=
      caml_new_string(": <<test true 8570918 1184809728498232683L>>"),
     cst_src_time_ns_ml$168=caml_new_string("src/time_ns.ml"),
     cst_test_false_16536379_1490415593503829866L=
      caml_new_string(": <<test false 16536379 1490415593503829866L>>"),
     cst_src_time_ns_ml$169=caml_new_string("src/time_ns.ml"),
     cst_test_false_32222516_1519021258420540539L=
      caml_new_string(": <<test false 32222516 1519021258420540539L>>"),
     cst_src_time_ns_ml$170=caml_new_string("src/time_ns.ml"),
     cst_test_true_152467451_1255624172539661165L=
      caml_new_string(": <<test true 152467451 1255624172539661165L>>"),
     cst_src_time_ns_ml$171=caml_new_string("src/time_ns.ml"),
     cst_test_true_13_1803425272409148050L=
      caml_new_string(": <<test true 13 1803425272409148050L>>"),
     cst_src_time_ns_ml$172=caml_new_string("src/time_ns.ml"),
     cst_test_true_26_1021777264383583552L=
      caml_new_string(": <<test true 26 1021777264383583552L>>"),
     cst_src_time_ns_ml$173=caml_new_string("src/time_ns.ml"),
     cst_test_true_11_1400486869768403422L=
      caml_new_string(": <<test true 11 1400486869768403422L>>"),
     cst_src_time_ns_ml$174=caml_new_string("src/time_ns.ml"),
     cst_test_true_229637_1410589173350489612L=
      caml_new_string(": <<test true 229637 1410589173350489612L>>"),
     cst_src_time_ns_ml$175=caml_new_string("src/time_ns.ml"),
     cst_test_true_32_1960302290555348647L=
      caml_new_string(": <<test true 32 1960302290555348647L>>"),
     cst_src_time_ns_ml$176=caml_new_string("src/time_ns.ml"),
     cst_test_false_349881185_1831970413297175407L=
      caml_new_string(": <<test false 349881185 1831970413297175407L>>"),
     cst_src_time_ns_ml$177=caml_new_string("src/time_ns.ml"),
     cst_test_false_35457345_1967569813691929674L=
      caml_new_string(": <<test false 35457345 1967569813691929674L>>"),
     cst_src_time_ns_ml$178=caml_new_string("src/time_ns.ml"),
     cst_test_false_16_1556051447243676249L=
      caml_new_string(": <<test false 16 1556051447243676249L>>"),
     cst_src_time_ns_ml$179=caml_new_string("src/time_ns.ml"),
     cst_test_false_302933078_1816140399596962652L=
      caml_new_string(": <<test false 302933078 1816140399596962652L>>"),
     cst_src_time_ns_ml$180=caml_new_string("src/time_ns.ml"),
     cst_test_true_3609444_1802393395129668217L=
      caml_new_string(": <<test true 3609444 1802393395129668217L>>"),
     cst_Z$1=caml_new_string("Z"),
     cst_Z$0=caml_new_string("Z"),
     cst$184=caml_new_string(" "),
     cst$183=caml_new_string("."),
     cst$182=caml_new_string(""),
     cst_Time_ns_next_multiple_got_nonpositive_interval=
      caml_new_string("Time_ns.next_multiple got nonpositive interval"),
     cst_Time_ns_of_int_ns_since_epoch_unsupported_on_32bit_machines=
      caml_new_string
       ("Time_ns.of_int_ns_since_epoch: unsupported on 32bit machines"),
     cst_Time_ns_to_int_ns_since_epoch_unsupported_on_32bit_machines=
      caml_new_string
       ("Time_ns.to_int_ns_since_epoch: unsupported on 32bit machines"),
     cst_clock_gettime_CLOCK_REALTIME_failed=
      caml_new_string("clock_gettime(CLOCK_REALTIME) failed"),
     expect$30=[0,0,2,3,4,5,6,7],
     pos$109=caml_new_string("src/time_ns.ml:326:21"),
     pos$108=caml_new_string("src/time_ns.ml:325:21"),
     pos$107=caml_new_string("src/time_ns.ml:323:21"),
     pos$106=caml_new_string("src/time_ns.ml:299:21"),
     pos$105=caml_new_string("src/time_ns.ml:298:21"),
     pos$104=caml_new_string("src/time_ns.ml:296:38"),
     cst_src_time_ns_ml$15=caml_new_string("src/time_ns.ml"),
     cst_eq_create_us_2_of_int_2_microsecond=
      caml_new_string(": <<eq (create ~us:2 ()) ((of_int 2) * microsecond)>>"),
     cst_src_time_ns_ml$16=caml_new_string("src/time_ns.ml"),
     cst_eq_create_min_3_of_int_3_minute=
      caml_new_string(": <<eq (create ~min:3 ()) ((of_int 3) * minute)>>"),
     cst_src_time_ns_ml$17=caml_new_string("src/time_ns.ml"),
     cst_eq_create_ms_4_of_int_4_millisecond=
      caml_new_string(": <<eq (create ~ms:4 ()) ((of_int 4) * millisecond)>>"),
     cst_src_time_ns_ml$18=caml_new_string("src/time_ns.ml"),
     cst_eq_create_sec_5_of_int_5_second=
      caml_new_string(": <<eq (create ~sec:5 ()) ((of_int 5) * second)>>"),
     cst_src_time_ns_ml$19=caml_new_string("src/time_ns.ml"),
     cst_eq_create_hr_6_of_int_6_hour=
      caml_new_string(": <<eq (create ~hr:6 ()) ((of_int 6) * hour)>>"),
     cst_src_time_ns_ml$20=caml_new_string("src/time_ns.ml"),
     cst_eq_create_day_7_of_int_7_day=
      caml_new_string(": <<eq (create ~day:7 ()) ((of_int 7) * day)>>"),
     cst_src_time_ns_ml$21=caml_new_string("src/time_ns.ml"),
     cst_eq_create_us_8_sign_Neg_of_int_8=
      caml_new_string
       (": <<eq (create ~us:8 ~sign:Neg ()) ((of_int (-8))[...]>>"),
     cst_src_time_ns_ml$22=caml_new_string("src/time_ns.ml"),
     cst_eq_create_ms_9_sign_Zero_of_int_9=
      caml_new_string
       (": <<eq (create ~ms:9 ~sign:Zero ()) ((of_int 9) *[...]>>"),
     cst_src_time_ns_ml$23=caml_new_string("src/time_ns.ml"),
     cst_eq_create_us_3_ns_242_to_sec=
      caml_new_string
       (": <<eq   (((create ~us:3 ~ns:242 ()) |> to_sec) |[...]>>"),
     cst_src_time_ns_ml$24=caml_new_string("src/time_ns.ml"),
     cst_for_1_to_1_000_000_do_let_t_Int6=
      caml_new_string
       (": <<for _ = 1 to 1_000_000 do   let t =     (Int6[...]>>"),
     cst_src_time_ns_ml$25=caml_new_string("src/time_ns.ml"),
     cst_eq_to_parts_create_sign_Neg_hr_2_min_3=
      caml_new_string
       (": <<eq (to_parts (create ~sign:Neg ~hr:2 ~min:3 ~[...]>>"),
     cst_src_time_ns_ml$26=caml_new_string("src/time_ns.ml"),
     cst_round_trip_to_parts_create_hr_25=
      caml_new_string(": <<round_trip (to_parts (create ~hr:25 ()))>>"),
     cst_src_time_ns_ml$27=caml_new_string("src/time_ns.ml"),
     cst_round_trip_to_parts_create_hr=
      caml_new_string(": <<round_trip (to_parts (create ~hr ()))>>"),
     cst_ns$5=caml_new_string("ns"),
     cst_us$5=caml_new_string("us"),
     cst_ms$6=caml_new_string("ms"),
     cst_s$4=caml_new_string("s"),
     cst_m$4=caml_new_string("m"),
     cst_h$2=caml_new_string("h"),
     cst_d$4=caml_new_string("d"),
     cst_Time_ns_Span_t_of_sexp_sexp_must_be_an_Atom=
      caml_new_string("Time_ns.Span.t_of_sexp sexp must be an Atom"),
     cst$180=caml_new_string(""),
     cst_no_number_given$0=caml_new_string("no number given"),
     cst$179=caml_new_string(""),
     cst_empty_string$0=caml_new_string("empty string"),
     cst_Time_spans_must_end_in_ns_us_ms_s_m_h_or_d$0=
      caml_new_string("Time spans must end in ns, us, ms, s, m, h, or d."),
     pos$103=caml_new_string("src/time_ns.ml:182:25"),
     cst_src_time_ns_ml$9=caml_new_string("src/time_ns.ml"),
     cst_wrap_days=caml_new_string(": wrap_days"),
     cst_src_time_ns_ml$10=caml_new_string("src/time_ns.ml"),
     cst_scale_int63=caml_new_string(": scale_int63"),
     cst_src_time_ns_ml$11=caml_new_string("src/time_ns.ml"),
     cst_scale_int=caml_new_string(": scale_int"),
     cst_src_time_ns_ml$12=caml_new_string("src/time_ns.ml"),
     cst_create=caml_new_string(": create"),
     cst_src_time_ns_ml$1=caml_new_string("src/time_ns.ml"),
     cst_range_up=caml_new_string(": + range up"),
     cst_src_time_ns_ml$2=caml_new_string("src/time_ns.ml"),
     cst_range_down=caml_new_string(": + range down"),
     cst_src_time_ns_ml$3=caml_new_string("src/time_ns.ml"),
     cst_overflow=caml_new_string(": + overflow"),
     cst_src_time_ns_ml$4=caml_new_string("src/time_ns.ml"),
     cst_underflow=caml_new_string(": + underflow"),
     cst_src_time_ns_ml$5=caml_new_string("src/time_ns.ml"),
     cst_range_down$0=caml_new_string(": - range down"),
     cst_src_time_ns_ml$6=caml_new_string("src/time_ns.ml"),
     cst_range_up$0=caml_new_string(": - range up"),
     cst_src_time_ns_ml$7=caml_new_string("src/time_ns.ml"),
     cst_underflow$0=caml_new_string(": - underflow"),
     cst_src_time_ns_ml$8=caml_new_string("src/time_ns.ml"),
     cst_overflow$0=caml_new_string(": - overflow"),
     cst_src_time_ns_ml$13=caml_new_string("src/time_ns.ml"),
     cst_intermediate=caml_new_string(": intermediate ( * )"),
     cst_Time_ns_Span_to_int_ns_unsupported_on_32bit_machines=
      caml_new_string("Time_ns.Span.to_int_ns: unsupported on 32bit machines"),
     cst_Time_ns_Span_of_int_ns_unsupported_on_32bit_machines=
      caml_new_string("Time_ns.Span.of_int_ns: unsupported on 32bit machines"),
     cst_hr$1=caml_new_string("hr"),
     cst_min$1=caml_new_string("min"),
     cst_ms$4=caml_new_string("ms"),
     cst_ns$3=caml_new_string("ns"),
     cst_sec$1=caml_new_string("sec"),
     cst_sign$1=caml_new_string("sign"),
     cst_us$3=caml_new_string("us"),
     cst_ns$4=caml_new_string("ns"),
     cst_us$4=caml_new_string("us"),
     cst_ms$5=caml_new_string("ms"),
     cst_sec$2=caml_new_string("sec"),
     cst_min$2=caml_new_string("min"),
     cst_hr$2=caml_new_string("hr"),
     cst_sign$2=caml_new_string("sign"),
     cst_core_kernel$332=caml_new_string("core_kernel"),
     cst_src_time_ns_ml=caml_new_string("src/time_ns.ml"),
     cst$178=caml_new_string(""),
     cst_core_kernel$333=caml_new_string("core_kernel"),
     cst_t$181=caml_new_string("t"),
     cst_src_time_ns_ml_22_4=caml_new_string("src/time_ns.ml:22:4"),
     cst_t$182=caml_new_string("t"),
     name$54=caml_new_string("src/time_ns.ml.Span.T.t"),
     tp_loc$34=caml_new_string("src/time_ns.ml.Span.Parts.t"),
     cst_src_time_ns_ml$0=caml_new_string("src/time_ns.ml"),
     cst_Int_to_int_sec_Int63_max_value_0=
      caml_new_string(": <<Int.(>) (to_int_sec Int63.max_value) 0>>"),
     cst_src_time_ns_ml$14=caml_new_string("src/time_ns.ml"),
     cst_overflow_silently=caml_new_string(": overflow silently"),
     cst_src_time_ns_ml$28=caml_new_string("src/time_ns.ml"),
     cst$181=caml_new_string(""),
     cst_src_time_ns_ml$29=caml_new_string("src/time_ns.ml"),
     cst_random_smoke=caml_new_string(": random smoke"),
     cst_t$183=caml_new_string("t"),
     cst_src_time_ns_ml_387_0=caml_new_string("src/time_ns.ml:387:0"),
     cst_t$184=caml_new_string("t"),
     name$55=caml_new_string("src/time_ns.ml.t"),
     cst_src_time_ns_ml$30=caml_new_string("src/time_ns.ml"),
     cst_random_smoke$0=caml_new_string(": random smoke"),
     cst_t$185=caml_new_string("t"),
     cst_src_time_ns_ml_611_6=caml_new_string("src/time_ns.ml:611:6"),
     cst_t$186=caml_new_string("t"),
     cst_src_time_ns_ml$181=caml_new_string("src/time_ns.ml"),
     cst_next_multiple=caml_new_string(": next_multiple"),
     cst_core_kernel$334=caml_new_string("core_kernel"),
     cst_core_kernel$335=caml_new_string("core_kernel"),
     cst_src_time_float0_ml=caml_new_string("src/time_float0.ml"),
     cst$185=caml_new_string(""),
     cst_core_kernel$336=caml_new_string("core_kernel"),
     cst_core_kernel$337=caml_new_string("core_kernel"),
     cst$187=caml_new_string(" "),
     cst_Time_Stable_With_utc_V2_t_of_sexp=
      caml_new_string("Time.Stable.With_utc.V2.t_of_sexp"),
     cst_core_kernel$338=caml_new_string("core_kernel"),
     cst_src_time_float_ml=caml_new_string("src/time_float.ml"),
     cst$186=caml_new_string(""),
     cst_core_kernel$339=caml_new_string("core_kernel"),
     cst_t$187=caml_new_string("t"),
     cst_src_time_float_ml_13_6=caml_new_string("src/time_float.ml:13:6"),
     cst_t$188=caml_new_string("t"),
     cst_core_kernel$340=caml_new_string("core_kernel"),
     cst_core_kernel$341=caml_new_string("core_kernel"),
     cst_src_date_ml=caml_new_string("src/date.ml"),
     cst$188=caml_new_string(""),
     cst_core_kernel$342=caml_new_string("core_kernel"),
     cst_core_kernel$343=caml_new_string("core_kernel"),
     cst_core_kernel$344=caml_new_string("core_kernel"),
     cst_src_date_intf_ml=caml_new_string("src/date_intf.ml"),
     cst$189=caml_new_string(""),
     cst_core_kernel$345=caml_new_string("core_kernel"),
     cst_core_kernel$346=caml_new_string("core_kernel"),
     cst_hostname=caml_new_string("hostname"),
     cst_application_specific_fields=
      caml_new_string("application_specific_fields"),
     cst_build_system=caml_new_string("build_system"),
     cst_build_time=caml_new_string("build_time"),
     cst_dynlinkable_code=caml_new_string("dynlinkable_code"),
     cst_executable_path=caml_new_string("executable_path"),
     cst_kernel=caml_new_string("kernel"),
     cst_ocaml_version=caml_new_string("ocaml_version"),
     cst_portable_int63=caml_new_string("portable_int63"),
     cst_username=caml_new_string("username"),
     cst_x_library_inlining=caml_new_string("x_library_inlining"),
     cst_build_system$0=caml_new_string("build_system"),
     cst_executable_path$0=caml_new_string("executable_path"),
     cst_ocaml_version$0=caml_new_string("ocaml_version"),
     cst_dynlinkable_code$0=caml_new_string("dynlinkable_code"),
     cst_portable_int63$0=caml_new_string("portable_int63"),
     cst_x_library_inlining$0=caml_new_string("x_library_inlining"),
     cst_Z$2=caml_new_string("Z"),
     cst_time_must_contain_one_space_between_date_and_ofday=
      caml_new_string("time must contain one space between date and ofday"),
     cst_zone_must_be_Z=caml_new_string("zone must be Z"),
     cst$191=caml_new_string("\n"),
     cst_core_kernel$347=caml_new_string("core_kernel"),
     cst_src_version_util_ml=caml_new_string("src/version_util.ml"),
     cst$190=caml_new_string(""),
     cst_core_kernel$348=caml_new_string("core_kernel"),
     cst_Print_build_info_as_sexp_and_exit=
      caml_new_string(" Print build info as sexp and exit"),
     cst_build_info=caml_new_string("-build_info"),
     cst_Print_the_hg_revision_of_this_build_and_exit=
      caml_new_string(" Print the hg revision of this build and exit"),
     cst_version=caml_new_string("-version"),
     tp_loc$35=caml_new_string("src/version_util.ml.t"),
     cst_core_kernel$349=caml_new_string("core_kernel"),
     cst_core_kernel$350=caml_new_string("core_kernel"),
     cst_src_validated_intf_ml=caml_new_string("src/validated_intf.ml"),
     cst$192=caml_new_string(""),
     cst_core_kernel$351=caml_new_string("core_kernel"),
     cst_core_kernel$352=caml_new_string("core_kernel"),
     cst_must_be_positive=caml_new_string("must be positive"),
     cst_t$189=caml_new_string("t"),
     cst_src_validated_ml_113_6=caml_new_string("src/validated.ml:113:6"),
     cst_t$190=caml_new_string("t"),
     here=[0,caml_new_string("src/validated.ml"),128,2958,2979],
     cst_src_validated_ml$0=caml_new_string("src/validated.ml"),
     cst_assert_does_raise_fun_t_of_sexp_s=
      caml_new_string
       (": <<assert (does_raise (fun () -> t_of_sexp (([%s[...]>>"),
     cst_src_validated_ml$1=caml_new_string("src/validated.ml"),
     cst_assert_sexp_of_t_t_of_sexp_sexp_sexp=
      caml_new_string(": <<assert ((sexp_of_t (t_of_sexp sexp)) = sexp)>>"),
     cst_src_validated_ml$2=caml_new_string("src/validated.ml"),
     cst_assert_does_raise_fun_create_exn_0=
      caml_new_string(": <<assert (does_raise (fun () -> create_exn 0))>>"),
     cst_src_validated_ml$3=caml_new_string("src/validated.ml"),
     cst_match_create_0_with_Error_Ok=
      caml_new_string
       (": <<match create 0 with | Error _ -> () | Ok _ ->[...]>>"),
     cst_src_validated_ml$4=caml_new_string("src/validated.ml"),
     cst_assert_raw_t_n=caml_new_string(": <<assert ((raw t) = n)>>"),
     cst_src_validated_ml$5=caml_new_string("src/validated.ml"),
     cst_match_create_n_with_Error_assert_false=
      caml_new_string
       (": <<match create n with | Error _ -> assert false[...]>>"),
     here$0=[0,caml_new_string("src/validated.ml"),175,3968,3987],
     here$1=[0,caml_new_string("src/validated.ml"),181,4123,4142],
     cst_src_validated_ml$6=caml_new_string("src/validated.ml"),
     cst_does_raise_fun_Binable_of_string_modu=
      caml_new_string
       (": <<does_raise (fun () -> Binable.of_string (modu[...]>>"),
     cst_src_validated_ml$7=caml_new_string("src/validated.ml"),
     cst_Binable_of_string_module_M2_string_int=
      caml_new_string(": <<(Binable.of_string (module M2) string) = int>>"),
     cst_src_validated_ml$8=caml_new_string("src/validated.ml"),
     cst_Binable_of_string_module_M1_string_int=
      caml_new_string(": <<(Binable.of_string (module M1) string) = int>>"),
     cst_src_validated_ml$9=caml_new_string("src/validated.ml"),
     cst_Binable_of_string_module_M2_string_int$0=
      caml_new_string(": <<(Binable.of_string (module M2) string) = int>>"),
     name$56=caml_new_string("src/validated.ml.Add_typerep.t"),
     cst_validation_failed=caml_new_string("validation failed"),
     cst_core_kernel$353=caml_new_string("core_kernel"),
     cst_src_validated_ml=caml_new_string("src/validated.ml"),
     cst$193=caml_new_string(""),
     cst_core_kernel$354=caml_new_string("core_kernel"),
     cst_src_validated_ml$10=caml_new_string("src/validated.ml"),
     cst$194=caml_new_string(""),
     cst_core_kernel$355=caml_new_string("core_kernel"),
     cst_el$14=caml_new_string("el"),
     cst_core_kernel$356=caml_new_string("core_kernel"),
     cst_src_queue_ml=caml_new_string("src/queue.ml"),
     cst$195=caml_new_string(""),
     cst_core_kernel$357=caml_new_string("core_kernel"),
     cst_a$77=caml_new_string("a"),
     cst_src_queue_ml_36_25=caml_new_string("src/queue.ml:36:25"),
     cst_a$78=caml_new_string("a"),
     cst_el$13=caml_new_string("el"),
     cst_src_queue_ml_36_6=caml_new_string("src/queue.ml:36:6"),
     cst_b4c84254_4992_11e6_9ba7_734e154027bd=
      caml_new_string("b4c84254-4992-11e6-9ba7-734e154027bd"),
     module_name$12=[0,caml_new_string("Core_kernel.Queue")],
     cst_core_kernel$358=caml_new_string("core_kernel"),
     cst_unpack_error=caml_new_string("unpack error"),
     cst_partial_unpack_consumed_invalid_amount=
      caml_new_string("partial unpack consumed invalid amount"),
     cst_invalid_data=caml_new_string("invalid data"),
     cst_unpack_consumed_invalid_amount=
      caml_new_string("unpack consumed invalid amount"),
     cst_unpack_returned_a_value_but_consumed_0_bytes_without_partially_unpacked_data=
      caml_new_string
       ("unpack returned a value but consumed 0 bytes without partially unpacked data"),
     cst_f_supplied_to_Unpack_buffer_unpack_iter_raised=
      caml_new_string("~f supplied to Unpack_buffer.unpack_iter raised"),
     cst_invariant_failed=caml_new_string("invariant failed"),
     cst_parsed_does_not_match_expected=
      caml_new_string("parsed does not match expected"),
     cst_negative_element_length_d$0=
      caml_new_string("negative element length %d"),
     cst_pos_ref_pos_len=caml_new_string("pos_ref <> pos + len"),
     not_enough_data=[0,658743757,[0,0,0]],
     cst_core_kernel$359=caml_new_string("core_kernel"),
     cst_src_unpack_buffer_ml=caml_new_string("src/unpack_buffer.ml"),
     cst$196=caml_new_string(""),
     cst_core_kernel$360=caml_new_string("core_kernel"),
     cst_core_kernel$361=caml_new_string("core_kernel"),
     cst_core_kernel$362=caml_new_string("core_kernel"),
     cst_src_type_equal_ml=caml_new_string("src/type_equal.ml"),
     cst$197=caml_new_string(""),
     cst_core_kernel$363=caml_new_string("core_kernel"),
     cst_core_kernel$364=caml_new_string("core_kernel"),
     cst_core_kernel$365=caml_new_string("core_kernel"),
     cst_src_type_equal_intf_ml=caml_new_string("src/type_equal_intf.ml"),
     cst$198=caml_new_string(""),
     cst_core_kernel$366=caml_new_string("core_kernel"),
     cst_core_kernel$367=caml_new_string("core_kernel"),
     cst_core_kernel$368=caml_new_string("core_kernel"),
     cst_src_univ_map_intf_ml=caml_new_string("src/univ_map_intf.ml"),
     cst$199=caml_new_string(""),
     cst_core_kernel$369=caml_new_string("core_kernel"),
     cst_core_kernel$370=caml_new_string("core_kernel"),
     cst_int_list=caml_new_string("int list"),
     cst_don_t_fold_this=caml_new_string("don't fold this"),
     cst_init_5=caml_new_string("init 5"),
     cst_default_1=caml_new_string("default 1"),
     cst_default_0=caml_new_string("default 0"),
     cst_foo_13_25_size_15=caml_new_string("((foo 13.25)(size 15))"),
     cst_hank=caml_new_string("hank"),
     cst_frank=caml_new_string("frank"),
     cst_frank$0=caml_new_string("frank"),
     cst_frank$1=caml_new_string("frank"),
     cst_size=caml_new_string("size"),
     cst_name$2=caml_new_string("name"),
     cst_foo$11=caml_new_string("foo"),
     cst_kids=caml_new_string("kids"),
     cst_src_univ_map_ml$0=caml_new_string("src/univ_map.ml"),
     cst_is_empty_empty=caml_new_string(": <<is_empty empty>>"),
     cst_src_univ_map_ml$1=caml_new_string("src/univ_map.ml"),
     cst_test_t0=caml_new_string(": <<test t0>>"),
     cst_src_univ_map_ml$2=caml_new_string("src/univ_map.ml"),
     cst_test_t1=caml_new_string(": <<test t1>>"),
     cst_src_univ_map_ml$3=caml_new_string("src/univ_map.ml"),
     cst_test_t2=caml_new_string(": <<test t2>>"),
     cst_src_univ_map_ml$4=caml_new_string("src/univ_map.ml"),
     cst_test_t3=caml_new_string(": <<test t3>>"),
     cst_src_univ_map_ml$5=caml_new_string("src/univ_map.ml"),
     cst_sexp_of_t_t3_Sexp_of_string_foo_13_25=
      caml_new_string
       (': <<(sexp_of_t t3) = (Sexp.of_string "((foo 13.25[...]>>'),
     cst_core_kernel$371=caml_new_string("core_kernel"),
     cst_src_univ_map_ml=caml_new_string("src/univ_map.ml"),
     cst$200=caml_new_string(""),
     cst_core_kernel$372=caml_new_string("core_kernel"),
     cst_src_univ_map_ml$6=caml_new_string("src/univ_map.ml"),
     cst$201=caml_new_string(""),
     cst_src_univ_map_ml$7=caml_new_string("src/univ_map.ml"),
     cst_assert_find_empty_key_0_let_t_set_e=
      caml_new_string
       (": <<assert ((find empty key) = 0); (let t = set e[...]>>"),
     cst_src_univ_map_ml$8=caml_new_string("src/univ_map.ml"),
     cst_find_change_empty_key_f_key_1=
      caml_new_string(": <<(find (change empty key ~f:(~-)) key) = (-1)>>"),
     cst_src_univ_map_ml$9=caml_new_string("src/univ_map.ml"),
     cst_assert_find_empty_key_5_let_t_add_e=
      caml_new_string
       (": <<assert ((find empty key) = 5); (let t = add e[...]>>"),
     cst_src_univ_map_ml$10=caml_new_string("src/univ_map.ml"),
     cst_assert_find_empty_key_0_let_t_set_e$0=
      caml_new_string
       (": <<assert ((find empty key) = 0); (let t = set e[...]>>"),
     cst_src_univ_map_ml$11=caml_new_string("src/univ_map.ml"),
     cst_assert_find_empty_key_let_t_add=
      caml_new_string
       (": <<assert ((find empty key) = []); (let t = add [...]>>"),
     cst_core_kernel$373=caml_new_string("core_kernel"),
     cst_c1=caml_new_string("c1"),
     cst_c2=caml_new_string("c2"),
     cst_src_univ_ml$0=caml_new_string("src/univ.ml"),
     cst_ignore_sexp_of_Id_t_c1_Sexp_t=
      caml_new_string(": <<ignore (([%sexp_of :_ Id.t]) c1 : Sexp.t)>>"),
     cst_src_univ_ml$1=caml_new_string("src/univ.ml"),
     cst_ignore_sexp_of_t_t1_Sexp_t=
      caml_new_string(": <<ignore (([%sexp_of :t]) t1 : Sexp.t)>>"),
     cst_src_univ_ml$2=caml_new_string("src/univ.ml"),
     cst_type_id_name_t1_Id_name_c1=
      caml_new_string(": <<(type_id_name t1) = (Id.name c1)>>"),
     cst_src_univ_ml$3=caml_new_string("src/univ.ml"),
     cst_does_match_t1_c1=caml_new_string(": <<does_match t1 c1>>"),
     cst_src_univ_ml$4=caml_new_string("src/univ.ml"),
     cst_not_does_match_t1_c2=caml_new_string(": <<not (does_match t1 c2)>>"),
     cst_src_univ_ml$5=caml_new_string("src/univ.ml"),
     cst_not_does_match_t2_c1=caml_new_string(": <<not (does_match t2 c1)>>"),
     cst_src_univ_ml$6=caml_new_string("src/univ.ml"),
     cst_does_match_t2_c2=caml_new_string(": <<does_match t2 c2>>"),
     cst_src_univ_ml$7=caml_new_string("src/univ.ml"),
     cst_match_match_t1_c1_with_None_false_Som=
      caml_new_string
       (": <<match match_ t1 c1 with | None -> false | Som[...]>>"),
     cst_src_univ_ml$8=caml_new_string("src/univ.ml"),
     cst_Option_is_none_match_t1_c2=
      caml_new_string(": <<Option.is_none (match_ t1 c2)>>"),
     cst_src_univ_ml$9=caml_new_string("src/univ.ml"),
     cst_match_exn_t1_c1_13=caml_new_string(": <<(match_exn t1 c1) = 13>>"),
     cst_src_univ_ml$10=caml_new_string("src/univ.ml"),
     cst_Result_is_error_Result_try_with_fun_m=
      caml_new_string
       (": <<Result.is_error (Result.try_with (fun () -> m[...]>>"),
     cst_Univ_match_exn_called_with_mismatched_value_and_type_id=
      caml_new_string
       ("Univ.match_exn called with mismatched value and type id"),
     cst_core_kernel$374=caml_new_string("core_kernel"),
     cst_src_univ_ml=caml_new_string("src/univ.ml"),
     cst$202=caml_new_string(""),
     cst_core_kernel$375=caml_new_string("core_kernel"),
     cst_src_univ_ml$11=caml_new_string("src/univ.ml"),
     cst$203=caml_new_string(""),
     cst_core_kernel$376=caml_new_string("core_kernel"),
     cst_core_kernel$377=caml_new_string("core_kernel"),
     cst_src_unique_id_intf_ml=caml_new_string("src/unique_id_intf.ml"),
     cst$204=caml_new_string(""),
     cst_core_kernel$378=caml_new_string("core_kernel"),
     cst_core_kernel$379=caml_new_string("core_kernel"),
     cst_core_kernel$380=caml_new_string("core_kernel"),
     cst_src_unique_id_ml=caml_new_string("src/unique_id.ml"),
     cst$205=caml_new_string(""),
     cst_core_kernel$381=caml_new_string("core_kernel"),
     cst_core_kernel$382=caml_new_string("core_kernel"),
     cst_core_kernel$383=caml_new_string("core_kernel"),
     cst_src_uniform_array_ml=caml_new_string("src/uniform_array.ml"),
     cst$206=caml_new_string(""),
     cst_core_kernel$384=caml_new_string("core_kernel"),
     cst_core_kernel$385=caml_new_string("core_kernel"),
     cst_lazy_t$1=caml_new_string("lazy_t"),
     cst_Always=caml_new_string("Always"),
     cst_Sometimes=caml_new_string("Sometimes"),
     cst_Never=caml_new_string("Never"),
     cst_core_kernel$386=caml_new_string("core_kernel"),
     cst_src_type_immediacy_ml=caml_new_string("src/type_immediacy.ml"),
     cst$207=caml_new_string(""),
     cst_core_kernel$387=caml_new_string("core_kernel"),
     cst_option$1=caml_new_string("option"),
     cst_list$1=caml_new_string("list"),
     cst_array$1=caml_new_string("array"),
     cst_ref$1=caml_new_string("ref"),
     cst_tuple2=caml_new_string("tuple2"),
     cst_tuple3=caml_new_string("tuple3"),
     cst_tuple4=caml_new_string("tuple4"),
     cst_tuple5=caml_new_string("tuple5"),
     cst_function=caml_new_string("function"),
     name$58=caml_new_string("is_immediate"),
     cst_core_kernel$388=caml_new_string("core_kernel"),
     cst_core_kernel$389=caml_new_string("core_kernel"),
     cst_src_tuple_type_intf_ml=caml_new_string("src/tuple_type_intf.ml"),
     cst$208=caml_new_string(""),
     cst_core_kernel$390=caml_new_string("core_kernel"),
     cst_core_kernel$391=caml_new_string("core_kernel"),
     cst_core_kernel$392=caml_new_string("core_kernel"),
     cst_src_tuple_type_ml=caml_new_string("src/tuple_type.ml"),
     cst$209=caml_new_string(""),
     cst_core_kernel$393=caml_new_string("core_kernel"),
     t1$0=[0,301584533,[0,1]],
     t2$0=[0,301584533,[0,2]],
     t3$0=[0,301584533,[0,3]],
     t4$0=[0,301584533,[0,4]],
     t5$0=[0,301584533,[0,5]],
     t6=[0,301584533,[0,6]],
     t7=[0,301584533,[0,7]],
     t8=[0,301584533,[0,8]],
     t9=[0,301584533,[0,9]],
     t10=[0,301584533,[0,10]],
     t11=[0,301584533,[0,11]],
     t12=[0,301584533,[0,12]],
     t13=[0,301584533,[0,13]],
     t14=[0,301584533,[0,14]],
     cst_core_kernel$394=caml_new_string("core_kernel"),
     tp_loc$39=caml_new_string("src/tuple.ml.Hasher.T.t"),
     cst_src_tuple_ml_Binable_t=caml_new_string("src/tuple.ml.Binable.t"),
     cst_t$191=caml_new_string("t"),
     cst_src_tuple_ml_97_2=caml_new_string("src/tuple.ml:97:2"),
     cst_t$192=caml_new_string("t"),
     tp_loc$38=caml_new_string("src/tuple.ml.Sexpable.t"),
     cst_core_kernel$395=caml_new_string("core_kernel"),
     cst_src_tuple_ml=caml_new_string("src/tuple.ml"),
     cst$210=caml_new_string(""),
     cst_core_kernel$396=caml_new_string("core_kernel"),
     tp_loc$36=caml_new_string("src/tuple.ml.T2.t"),
     name$59=caml_new_string("src/tuple.ml.T2.t"),
     tp_loc$37=caml_new_string("src/tuple.ml.T3.t"),
     name$60=caml_new_string("src/tuple.ml.T3.t"),
     cst_core_kernel$397=caml_new_string("core_kernel"),
     cst_map_from_serialization_doesn_t_have_keys_it_should_have=
      caml_new_string
       ("map from serialization doesn't have keys it should have"),
     cst_map_from_serialization_has_keys_not_provided_in_the_enumeration=
      caml_new_string
       ("map from serialization has keys not provided in the enumeration"),
     cst_Key_was_not_provided_in_the_enumeration_given_to_Total_map_Make=
      caml_new_string
       ("Key was not provided in the enumeration given to [Total_map.Make]"),
     cst_core_kernel$398=caml_new_string("core_kernel"),
     cst_src_total_map_ml=caml_new_string("src/total_map.ml"),
     cst$211=caml_new_string(""),
     cst_core_kernel$399=caml_new_string("core_kernel"),
     cst_core_kernel$400=caml_new_string("core_kernel"),
     cst_core_kernel$401=caml_new_string("core_kernel"),
     cst_src_timing_wheel_ns_intf_ml=
      caml_new_string("src/timing_wheel_ns_intf.ml"),
     cst$212=caml_new_string(""),
     cst_core_kernel$402=caml_new_string("core_kernel"),
     cst_core_kernel$403=caml_new_string("core_kernel"),
     cst$214=caml_new_string("."),
     cst_invariant_pre_condition_failed=
      caml_new_string("invariant pre-condition failed"),
     cst_invariant_post_condition_failed=
      caml_new_string("invariant post-condition failed"),
     cst$215=caml_new_string("."),
     cst_core_kernel$404=caml_new_string("core_kernel"),
     cst_src_debug_ml=caml_new_string("src/debug.ml"),
     cst$213=caml_new_string(""),
     cst_core_kernel$405=caml_new_string("core_kernel"),
     cst_core_kernel$406=caml_new_string("core_kernel"),
     cst_core_kernel$407=caml_new_string("core_kernel"),
     cst_src_pool_intf_ml=caml_new_string("src/pool_intf.ml"),
     cst$216=caml_new_string(""),
     cst_core_kernel$408=caml_new_string("core_kernel"),
     cst_core_kernel$409=caml_new_string("core_kernel"),
     cst_attempt_to_use_invalid_pointer=
      caml_new_string("attempt to use invalid pointer"),
     cst_is_valid=caml_new_string("is_valid"),
     cst_pointer=caml_new_string("pointer"),
     name$63=caml_new_string("src/pool.ml.Error_check.Pointer.t"),
     cst_unsafe_set=caml_new_string("unsafe_set"),
     cst_set=caml_new_string("set"),
     cst_unsafe_get=caml_new_string("unsafe_get"),
     cst_get=caml_new_string("get"),
     cst_get_tuple=caml_new_string("get_tuple"),
     cst_new=caml_new_string("new"),
     cst_free=caml_new_string("free"),
     cst_unsafe_free=caml_new_string("unsafe_free"),
     cst_is_full=caml_new_string("is_full"),
     cst_grow=caml_new_string("grow"),
     cst_capacity$0=caml_new_string("capacity"),
     cst_max_capacity=caml_new_string("max_capacity"),
     cst_create$0=caml_new_string("create"),
     cst_pointer_is_valid=caml_new_string("pointer_is_valid"),
     cst_pointer_of_id_exn=caml_new_string("pointer_of_id_exn"),
     cst_id_of_pointer=caml_new_string("id_of_pointer"),
     cst_Pointer_Id_to_int63=caml_new_string("Pointer.Id.to_int63"),
     cst_Pointer_Id_of_int63=caml_new_string("Pointer.Id.of_int63"),
     cst_Pointer_is_null=caml_new_string("Pointer.is_null"),
     cst_Pointer_phys_equal=caml_new_string("Pointer.phys_equal"),
     cst_Pointer_phys_compare=caml_new_string("Pointer.phys_compare"),
     prefix=caml_new_string("Pool."),
     name$62=caml_new_string("src/pool.ml.Debug.Pointer.t"),
     cst_t$193=caml_new_string("t"),
     cst_src_pool_ml_937_6=caml_new_string("src/pool.ml:937:6"),
     cst_t$194=caml_new_string("t"),
     cst_Pool_free_of_invalid_pointer=
      caml_new_string("Pool.free of invalid pointer"),
     cst_Pool_malloc_of_full_pool=caml_new_string("Pool.malloc of full pool"),
     cst_Pool_grow_cannot_grow_pool_capacity_already_at_maximum=
      caml_new_string
       ("Pool.grow cannot grow pool; capacity already at maximum"),
     cst_Pool_create_got_invalid_capacity=
      caml_new_string("Pool.create got invalid capacity"),
     cst_Pool_create_got_too_large_capacity=
      caml_new_string("Pool.create got too large capacity"),
     cst_cycle_in_free_list=caml_new_string("cycle in free list"),
     cst_Pool_invariant_failed=caml_new_string("Pool.invariant failed"),
     cst_invalid_header_index=caml_new_string("invalid header index"),
     cst_pointer_not_live=caml_new_string("pointer not live"),
     cst_Pool_pointer_of_id_exn_got_invalid_id=
      caml_new_string("Pool.pointer_of_id_exn got invalid id"),
     cst_should_equal=caml_new_string("should equal"),
     cst_Pointer_of_id_exn_got_strange_id=
      caml_new_string("Pointer.of_id_exn got strange id"),
     cst_Tuple_id_of_int_got_negative_int=
      caml_new_string("Tuple_id.of_int got negative int"),
     cst_Pool_grow_got_too_small_capacity=
      caml_new_string("Pool.grow got too small capacity"),
     cst_core_kernel$410=caml_new_string("core_kernel"),
     cst_src_pool_ml=caml_new_string("src/pool.ml"),
     cst$217=caml_new_string(""),
     cst_core_kernel$411=caml_new_string("core_kernel"),
     cst_src_pool_ml$0=caml_new_string("src/pool.ml"),
     cst_t13_max_slot=caml_new_string(": <<t13 = max_slot>>"),
     cst_src_pool_ml$1=caml_new_string("src/pool.ml"),
     cst_array_index_num_bits_0=
      caml_new_string(": <<array_index_num_bits > 0>>"),
     cst_src_pool_ml$2=caml_new_string("src/pool.ml"),
     cst_masked_tuple_id_num_bits_0=
      caml_new_string(": <<masked_tuple_id_num_bits > 0>>"),
     cst_src_pool_ml$3=caml_new_string("src/pool.ml"),
     cst_array_index_num_bits_masked_tuple_id_num_b=
      caml_new_string
       (": <<(array_index_num_bits + masked_tuple_id_num_b[...]>>"),
     name$61=caml_new_string("src/pool.ml.Pool.Pointer.t"),
     cst_src_pool_ml$4=caml_new_string("src/pool.ml"),
     cst_null_max_slot_0=caml_new_string(": <<((null ()) + max_slot) < 0>>"),
     cst_src_pool_ml$5=caml_new_string("src/pool.ml"),
     cst_invariant_ignore_null=
      caml_new_string(": <<invariant ignore (null ())>>"),
     cst_src_pool_ml$6=caml_new_string("src/pool.ml"),
     cst_List_iter_Tuple_id_examples_f_fun_tuple_i=
      caml_new_string
       (": <<List.iter Tuple_id.examples   ~f:(fun tuple_i[...]>>"),
     cst_src_pool_ml$7=caml_new_string("src/pool.ml"),
     cst_List_iter_Tuple_id_examples_f_fun_id=
      caml_new_string
       (": <<List.iter Tuple_id.examples   ~f:(fun id ->  [...]>>"),
     cst_src_pool_ml$8=caml_new_string("src/pool.ml"),
     cst_for_slots_per_tuple_1_to_max_slot_do_asse=
      caml_new_string
       (": <<for slots_per_tuple = 1 to max_slot do   asse[...]>>"),
     cst_dummy=caml_new_string("dummy"),
     cst_first_free=caml_new_string("first_free"),
     cst_next_id=caml_new_string("next_id"),
     cst_length=caml_new_string("length"),
     cst_capacity=caml_new_string("capacity"),
     cst_slots_per_tuple=caml_new_string("slots_per_tuple"),
     cst_core_kernel$412=caml_new_string("core_kernel"),
     cst_core_kernel$413=caml_new_string("core_kernel"),
     cst_src_time_ns_alternate_sexp_ml=
      caml_new_string("src/time_ns_alternate_sexp.ml"),
     cst$218=caml_new_string(""),
     cst_core_kernel$414=caml_new_string("core_kernel"),
     cst_core_kernel$415=caml_new_string("core_kernel"),
     cst_Timing_wheel_next_alarm_fires_at_exn_of_empty_timing_wheel=
      caml_new_string
       ("Timing_wheel.next_alarm_fires_at_exn of empty timing wheel"),
     cst_Timing_wheel_ns_max_alarm_time_in_min_interval_exn_of_empty_timing_wheel=
      caml_new_string
       ("Timing_wheel_ns.max_alarm_time_in_min_interval_exn of empty timing wheel"),
     cst_Timing_wheel_min_alarm_interval_num_exn_of_empty_timing_wheel=
      caml_new_string
       ("Timing_wheel.min_alarm_interval_num_exn of empty timing_wheel"),
     cst_Timing_wheel_ns_cannot_reschedule_alarm_not_in_timing_wheel=
      caml_new_string
       ("Timing_wheel_ns cannot reschedule alarm not in timing wheel"),
     cst_Timing_wheel_cannot_schedule_alarm_before_start_of_current_interval=
      caml_new_string
       ("Timing_wheel cannot schedule alarm before start of current interval"),
     cst_Timing_wheel_cannot_schedule_alarm_that_far_in_the_future=
      caml_new_string
       ("Timing_wheel cannot schedule alarm that far in the future"),
     cst_Timing_wheel_ns_create_got_start_before_the_epoch=
      caml_new_string("Timing_wheel_ns.create got start before the epoch"),
     cst_Timing_wheel_advance_clock_got_time_too_far_in_the_future=
      caml_new_string
       ("Timing_wheel.advance_clock got time too far in the future"),
     pos$119=caml_new_string("src/timing_wheel_ns.ml:1437:23"),
     pos$118=caml_new_string("src/timing_wheel_ns.ml:1436:23"),
     pos$117=caml_new_string("src/timing_wheel_ns.ml:1445:23"),
     pos$116=caml_new_string("src/timing_wheel_ns.ml:1448:23"),
     cst_Timing_wheel_interval_num_start_got_too_large_interval_num=
      caml_new_string
       ("Timing_wheel.interval_num_start got too large interval_num"),
     cst_Timing_wheel_interval_num_start_got_too_small_interval_num=
      caml_new_string
       ("Timing_wheel.interval_num_start got too small interval_num"),
     cst_Timing_wheel_interval_num_got_time_too_far_in_the_past=
      caml_new_string
       ("Timing_wheel.interval_num got time too far in the past"),
     cst_Timing_wheel_interval_num_got_time_too_far_in_the_future=
      caml_new_string
       ("Timing_wheel.interval_num got time too far in the future"),
     cst_src_timing_wheel_ns_ml$1=caml_new_string("src/timing_wheel_ns.ml"),
     cst_Timing_wheel_increase_min_allowed_key_got_invalid_key=
      caml_new_string("Timing_wheel.increase_min_allowed_key got invalid key"),
     cst_Timing_wheel_Priority_queue_got_invalid_key=
      caml_new_string("Timing_wheel.Priority_queue got invalid key"),
     cst_Priority_queue_add_elt_key_out_of_level_bounds=
      caml_new_string("Priority_queue.add_elt key out of level bounds"),
     cst_Priority_queue_add_elt_key_out_of_bounds=
      caml_new_string("Priority_queue.add_elt key out of bounds"),
     pos$115=caml_new_string("src/timing_wheel_ns.ml:803:29"),
     pos$114=caml_new_string("src/timing_wheel_ns.ml:732:45"),
     pos$113=caml_new_string("src/timing_wheel_ns.ml:737:27"),
     pos$112=caml_new_string("src/timing_wheel_ns.ml:745:27"),
     pos$111=caml_new_string("src/timing_wheel_ns.ml:755:27"),
     pos$110=caml_new_string("src/timing_wheel_ns.ml:760:30"),
     cst_Timing_wheel_Priority_queue_got_invalid_elt=
      caml_new_string("Timing_wheel.Priority_queue got invalid elt"),
     cst_alarm_precision=caml_new_string("alarm_precision"),
     cst_level_bits$0=caml_new_string("level_bits"),
     cst_alarm_precision$0=caml_new_string("alarm_precision"),
     cst_Alarm_precision_of_span_floor_pow2_ns_got_non_positive_span=
      caml_new_string
       ("[Alarm_precision.of_span_floor_pow2_ns] got non-positive span"),
     cst_Alarm_precision_to_span_of_negative_power_of_two_nanoseconds=
      caml_new_string
       ("[Alarm_precision.to_span] of negative power of two nanoseconds"),
     cst_Level_bits_create_exn_requires_a_nonempty_list=
      caml_new_string("Level_bits.create_exn requires a nonempty list"),
     cst_Level_bits_create_exn_got_nonpositive_num_bits=
      caml_new_string("Level_bits.create_exn got nonpositive num bits"),
     cst_Level_bits_create_exn_got_too_many_bits=
      caml_new_string("Level_bits.create_exn got too many bits"),
     cst_core_kernel$416=caml_new_string("core_kernel"),
     cst_src_timing_wheel_ns_ml=caml_new_string("src/timing_wheel_ns.ml"),
     cst$219=caml_new_string(""),
     cst_core_kernel$417=caml_new_string("core_kernel"),
     cst_src_timing_wheel_ns_ml$0=caml_new_string("src/timing_wheel_ns.ml"),
     cst_invariant_zero=caml_new_string(": <<invariant zero>>"),
     cst_level_bits=caml_new_string("level_bits"),
     tp_loc$40=caml_new_string("src/timing_wheel_ns.ml.Config.t"),
     cst_slots=caml_new_string("slots"),
     cst_max_allowed_key=caml_new_string("max_allowed_key"),
     cst_min_allowed_key=caml_new_string("min_allowed_key"),
     cst_length$0=caml_new_string("length"),
     cst_num_allowed_keys=caml_new_string("num_allowed_keys"),
     cst_min_key_in_same_slot_mask=
      caml_new_string("min_key_in_same_slot_mask"),
     cst_keys_per_slot=caml_new_string("keys_per_slot"),
     cst_bits_per_slot=caml_new_string("bits_per_slot"),
     cst_slots_mask=caml_new_string("slots_mask"),
     cst_bits=caml_new_string("bits"),
     cst_index=caml_new_string("index"),
     cst_levels=caml_new_string("levels"),
     cst_elt_key_lower_bound=caml_new_string("elt_key_lower_bound"),
     cst_min_elt=caml_new_string("min_elt"),
     cst_pool=caml_new_string("pool"),
     cst_length$1=caml_new_string("length"),
     cst_priority_queue=caml_new_string("priority_queue"),
     cst_alarm_upper_bound=caml_new_string("alarm_upper_bound"),
     cst_now_interval_num_start=caml_new_string("now_interval_num_start"),
     cst_now=caml_new_string("now"),
     cst_max_interval_num=caml_new_string("max_interval_num"),
     cst_start=caml_new_string("start"),
     cst_config=caml_new_string("config"),
     cst_src_timing_wheel_ns_ml$2=caml_new_string("src/timing_wheel_ns.ml"),
     cst_src_timing_wheel_ns_ml$3=caml_new_string("src/timing_wheel_ns.ml"),
     cst_src_timing_wheel_ns_ml$4=caml_new_string("src/timing_wheel_ns.ml"),
     cst_src_timing_wheel_ns_ml$5=caml_new_string("src/timing_wheel_ns.ml"),
     cst_7e447cca016da4bfdbc04d379a40f0f8=
      caml_new_string("7e447cca016da4bfdbc04d379a40f0f8"),
     cst_core_kernel$418=caml_new_string("core_kernel"),
     cst_Thread_safe_queue_dequeue_exn_of_empty_queue=
      caml_new_string("Thread_safe_queue.dequeue_exn of empty queue"),
     cst_None$3=caml_new_string("None"),
     v0=caml_new_string("Some"),
     cst_Uopt_value_exn=caml_new_string("Uopt.value_exn"),
     cst_core_kernel$419=caml_new_string("core_kernel"),
     cst_src_thread_safe_queue_ml=caml_new_string("src/thread_safe_queue.ml"),
     cst$220=caml_new_string(""),
     cst_core_kernel$420=caml_new_string("core_kernel"),
     none=caml_new_string("Thread_safe_queue.Uopt.none"),
     cst_src_thread_safe_queue_ml$0=
      caml_new_string("src/thread_safe_queue.ml"),
     cst_is_none_none=caml_new_string(": <<is_none none>>"),
     cst_src_thread_safe_queue_ml$1=
      caml_new_string("src/thread_safe_queue.ml"),
     cst_is_some_some=caml_new_string(": <<is_some (some ())>>"),
     cst_unused_elts=caml_new_string("unused_elts"),
     cst_back=caml_new_string("back"),
     cst_front=caml_new_string("front"),
     cst_length$2=caml_new_string("length"),
     cst_core_kernel$421=caml_new_string("core_kernel"),
     cst_core_kernel$422=caml_new_string("core_kernel"),
     cst_src_substring_intf_ml=caml_new_string("src/substring_intf.ml"),
     cst$221=caml_new_string(""),
     cst_core_kernel$423=caml_new_string("core_kernel"),
     cst_core_kernel$424=caml_new_string("core_kernel"),
     cst_Substring_suffix=caml_new_string("Substring.suffix"),
     cst_Substring_prefix=caml_new_string("Substring.prefix"),
     cst_Substring_drop_suffix=caml_new_string("Substring.drop_suffix"),
     cst_Substring_drop_prefix=caml_new_string("Substring.drop_prefix"),
     cst_aeiou=caml_new_string("aeiou"),
     cst_abcdefghijklmno=caml_new_string("abcdefghijklmno "),
     cst_src_make_substring_ml$17=caml_new_string("src/make_substring.ml"),
     cst_find_bcdefghi_f_Char_is_lowercase_Some_b=
      caml_new_string
       (": <<(find bcdefghi ~f:Char.is_lowercase) = (Some 'b')>>"),
     cst_src_make_substring_ml$18=caml_new_string("src/make_substring.ml"),
     cst_find_bcdefghi_f_Char_is_whitespace_None=
      caml_new_string(": <<(find bcdefghi ~f:Char.is_whitespace) = None>>"),
     cst_src_make_substring_ml$19=caml_new_string("src/make_substring.ml"),
     cst_exists_bcdefghi_f_Char_equal_h=
      caml_new_string(": <<exists bcdefghi ~f:(Char.equal 'h')>>"),
     cst_src_make_substring_ml$20=caml_new_string("src/make_substring.ml"),
     cst_not_exists_bcdefghi_f_Char_equal_z=
      caml_new_string(": <<not (exists bcdefghi ~f:(Char.equal 'z'))>>"),
     cst_src_make_substring_ml$21=caml_new_string("src/make_substring.ml"),
     cst_for_all_bcdefghi_f_Char_is_alpha=
      caml_new_string(": <<for_all bcdefghi ~f:Char.is_alpha>>"),
     cst_src_make_substring_ml$22=caml_new_string("src/make_substring.ml"),
     cst_not_for_all_bcdefghi_f_Char_equal_h=
      caml_new_string(": <<not (for_all bcdefghi ~f:(Char.equal 'h'))>>"),
     cst_src_make_substring_ml$23=caml_new_string("src/make_substring.ml"),
     cst_not_mem_bcdefghi_a=caml_new_string(": <<not (mem bcdefghi 'a')>>"),
     cst_src_make_substring_ml$24=caml_new_string("src/make_substring.ml"),
     cst_mem_bcdefghi_b=caml_new_string(": <<mem bcdefghi 'b'>>"),
     cst_src_make_substring_ml$25=caml_new_string("src/make_substring.ml"),
     cst_mem_bcdefghi_i=caml_new_string(": <<mem bcdefghi 'i'>>"),
     cst_src_make_substring_ml$26=caml_new_string("src/make_substring.ml"),
     cst_not_mem_bcdefghi_j=caml_new_string(": <<not (mem bcdefghi 'j')>>"),
     cst_src_make_substring_ml$27=caml_new_string("src/make_substring.ml"),
     cst_count_bcdefghi_f_String_mem_aeiou_2=
      caml_new_string(': <<(count bcdefghi ~f:(String.mem "aeiou")) = 2>>'),
     cst_src_make_substring_ml$28=caml_new_string("src/make_substring.ml"),
     cst_sum_module_Int_bcdefghi_f_fun_c_Char=
      caml_new_string
       (": <<(sum (module Int) bcdefghi ~f:(fun c -> (Char[...]>>"),
     cst_src_make_substring_ml$29=caml_new_string("src/make_substring.ml"),
     cst_min_elt_bcdefghi_compare_Char_compare_S=
      caml_new_string
       (": <<(min_elt bcdefghi ~compare:Char.compare) = (S[...]>>"),
     cst_src_make_substring_ml$30=caml_new_string("src/make_substring.ml"),
     cst_max_elt_bcdefghi_compare_Char_compare_S=
      caml_new_string
       (": <<(max_elt bcdefghi ~compare:Char.compare) = (S[...]>>"),
     cst_hello$0=caml_new_string("hello"),
     cst_src_make_substring_ml$12=caml_new_string("src/make_substring.ml"),
     cst_to_array_ell_e_l_l=
      caml_new_string(": <<(to_array ell) = [|'e';'l';'l'|]>>"),
     cst_src_make_substring_ml$13=caml_new_string("src/make_substring.ml"),
     cst_to_list_ell_e_l_l=
      caml_new_string(": <<(to_list ell) = ['e'; 'l'; 'l']>>"),
     cst_src_make_substring_ml$14=caml_new_string("src/make_substring.ml"),
     cst_fold_ell_init_f_fun_acc_fun_x_x=
      caml_new_string
       (": <<(fold ell ~init:[] ~f:(fun acc -> fun x -> x [...]>>"),
     cst_src_make_substring_ml$15=caml_new_string("src/make_substring.ml"),
     cst_iter_ell_f_fun_c_stuff_c_stuff=
      caml_new_string
       (": <<iter ell ~f:(fun c -> stuff := (c :: (!stuff)[...]>>"),
     cst_4=caml_new_string("4"),
     cst_234=caml_new_string("234"),
     cst_012345=caml_new_string("012345"),
     cst_src_make_substring_ml$4=caml_new_string("src/make_substring.ml"),
     cst_ignore_sub_pos_0_len_4_t_t=
      caml_new_string(": <<ignore (sub ~pos:0 ~len:4 t : t)>>"),
     cst_src_make_substring_ml$5=caml_new_string("src/make_substring.ml"),
     cst_Exn_does_raise_fun_sub_pos_0_len_5_t=
      caml_new_string(": <<Exn.does_raise (fun () -> sub ~pos:0 ~len:5 t)>>"),
     cst_src_make_substring_ml$6=caml_new_string("src/make_substring.ml"),
     cst_Exn_does_raise_fun_sub_pos_1_len_4_t=
      caml_new_string(": <<Exn.does_raise (fun () -> sub ~pos:1 ~len:4 t)>>"),
     cst_src_make_substring_ml$7=caml_new_string("src/make_substring.ml"),
     cst_String_init_length_t2_f_get_t2_234=
      caml_new_string(': <<(String.init (length t2) ~f:(get t2)) = "234">>'),
     cst_src_make_substring_ml$8=caml_new_string("src/make_substring.ml"),
     cst_String_init_length_t2_f_get_t2_4=
      caml_new_string(': <<(String.init (length t2) ~f:(get t2)) = "4">>'),
     cst_src_make_substring_ml$9=caml_new_string("src/make_substring.ml"),
     cst_empty_substring=caml_new_string(": empty substring"),
     cst_src_make_substring_ml$10=caml_new_string("src/make_substring.ml"),
     cst_invalid_empty_substring=caml_new_string(": invalid empty substring"),
     cst_hello=caml_new_string("hello"),
     cst_src_make_substring_ml$0=caml_new_string("src/make_substring.ml"),
     cst_Char_equal_get_lo_1_o=
      caml_new_string(": <<Char.equal (get lo 1) 'o'>>"),
     cst_src_make_substring_ml$1=caml_new_string("src/make_substring.ml"),
     cst_Exn_does_raise_fun_get_create_pos_1=
      caml_new_string
       (": <<Exn.does_raise (fun () -> get (create ~pos:1 [...]>>"),
     cst_src_make_substring_ml$2=caml_new_string("src/make_substring.ml"),
     cst_Exn_does_raise_fun_get_create_hello=
      caml_new_string
       (": <<Exn.does_raise (fun () -> get (create hello) [...]>>"),
     cst_index_out_of_bounds=caml_new_string("index out of bounds"),
     cst_src_make_substring_ml$3=caml_new_string("src/make_substring.ml"),
     cst_get$0=caml_new_string(": get"),
     cst_src_make_substring_ml$11=caml_new_string("src/make_substring.ml"),
     cst_sub=caml_new_string(": sub"),
     cst_src_make_substring_ml$16=caml_new_string("src/make_substring.ml"),
     cst$223=caml_new_string(""),
     cst_src_make_substring_ml$31=caml_new_string("src/make_substring.ml"),
     cst$224=caml_new_string(""),
     cst_string$2=caml_new_string("string"),
     cst_bigstring$0=caml_new_string("bigstring"),
     cst_core_kernel$425=caml_new_string("core_kernel"),
     cst_src_make_substring_ml=caml_new_string("src/make_substring.ml"),
     cst$222=caml_new_string(""),
     cst_core_kernel$426=caml_new_string("core_kernel"),
     cst_core_kernel$427=caml_new_string("core_kernel"),
     cst_core_kernel$428=caml_new_string("core_kernel"),
     cst_src_substring_ml=caml_new_string("src/substring.ml"),
     cst$225=caml_new_string(""),
     cst_core_kernel$429=caml_new_string("core_kernel"),
     cst_core_kernel$430=caml_new_string("core_kernel"),
     cst_core_kernel$431=caml_new_string("core_kernel"),
     cst_src_string_id_intf_ml=caml_new_string("src/string_id_intf.ml"),
     cst$226=caml_new_string(""),
     cst_core_kernel$432=caml_new_string("core_kernel"),
     cst_core_kernel$433=caml_new_string("core_kernel"),
     cst_it_is_empty=caml_new_string("it is empty"),
     cst_it_has_whitespace_on_the_edge=
      caml_new_string("it has whitespace on the edge"),
     cst_core_kernel$434=caml_new_string("core_kernel"),
     cst_src_string_id_ml=caml_new_string("src/string_id.ml"),
     cst$227=caml_new_string(""),
     cst_core_kernel$435=caml_new_string("core_kernel"),
     module_name$13=caml_new_string("Core_kernel.String_id"),
     cst_core_kernel$436=caml_new_string("core_kernel"),
     cst_core_kernel$437=caml_new_string("core_kernel"),
     cst_src_bag_ml=caml_new_string("src/bag.ml"),
     cst$228=caml_new_string(""),
     cst_core_kernel$438=caml_new_string("core_kernel"),
     cst_core_kernel$439=caml_new_string("core_kernel"),
     cst_core_kernel$440=caml_new_string("core_kernel"),
     cst_src_bigsubstring_ml=caml_new_string("src/bigsubstring.ml"),
     cst$229=caml_new_string(""),
     cst_core_kernel$441=caml_new_string("core_kernel"),
     cst_core_kernel$442=caml_new_string("core_kernel"),
     cst_signed_8=caml_new_string("signed_8"),
     cst_signed_16=caml_new_string("signed_16"),
     cst_signed_32=caml_new_string("signed_32"),
     cst_signed_64=caml_new_string("signed_64"),
     cst_1_78$0=caml_new_string("1.....78"),
     cst$236=caml_new_string("..."),
     cst_1_78=caml_new_string("1.....78"),
     cst$235=caml_new_string(""),
     cst_1abcde78=caml_new_string("1abcde78"),
     cst_abcde=caml_new_string("abcde"),
     cst_1abcd_78=caml_new_string("1abcd.78"),
     cst_abcd=caml_new_string("abcd"),
     cst_12345678=caml_new_string("12345678"),
     cst$234=caml_new_string(""),
     cst_x$6=caml_new_string(".....x"),
     cst_x$4=caml_new_string(".....x"),
     cst_x$5=caml_new_string(".....x"),
     cst$233=caml_new_string(""),
     cst_ab_c$6=caml_new_string("ab..c."),
     cst$232=caml_new_string(""),
     cst_ab_cd$0=caml_new_string("ab..cd"),
     cst_c$2=caml_new_string("..c"),
     cst_ab_cd=caml_new_string("ab..cd"),
     cst$231=caml_new_string(""),
     cst_ab_c$5=caml_new_string("ab..c"),
     cst_c$1=caml_new_string("..c"),
     cst_ab_c$4=caml_new_string("ab..c"),
     cst_b$14=caml_new_string("b"),
     cst_ab_c$3=caml_new_string("ab..c."),
     cst_b$13=caml_new_string("b"),
     cst_ab_c$2=caml_new_string("ab..c."),
     cst_b$12=caml_new_string("b"),
     cst_ab_c$1=caml_new_string("ab..c."),
     cst_b_c$0=caml_new_string("b..c"),
     cst_ab_c$0=caml_new_string("ab..c."),
     cst_b_c=caml_new_string("b..c"),
     cst_ab_c=caml_new_string("ab..c."),
     cst_222122221$0=caml_new_string("222122221"),
     cst_222122221=caml_new_string("222122221"),
     cst_222122222$1=caml_new_string("222122222"),
     cst_222122222$0=caml_new_string("222122222"),
     cst_222122222=caml_new_string("222122222"),
     cst_221222222=caml_new_string("221222222"),
     cst_222222222=caml_new_string("222222222"),
     cst_222121222=caml_new_string("222121222"),
     cst_111121212=caml_new_string("111121212"),
     cst_222121212=caml_new_string("222121212"),
     cst_src_binary_packing_ml$17=caml_new_string("src/binary_packing.ml"),
     cst_test_last_nonmatch_plus_one_buf_222121212=
      caml_new_string
       (': <<test_last_nonmatch_plus_one ~buf:"222121212" [...]>>'),
     cst_src_binary_packing_ml$18=caml_new_string("src/binary_packing.ml"),
     cst_test_last_nonmatch_plus_one_buf_111121212=
      caml_new_string
       (': <<test_last_nonmatch_plus_one ~buf:"111121212" [...]>>'),
     cst_src_binary_packing_ml$19=caml_new_string("src/binary_packing.ml"),
     cst_test_last_nonmatch_plus_one_buf_222121222=
      caml_new_string
       (': <<test_last_nonmatch_plus_one ~buf:"222121222" [...]>>'),
     cst_src_binary_packing_ml$20=caml_new_string("src/binary_packing.ml"),
     cst_test_last_nonmatch_plus_one_buf_222222222=
      caml_new_string
       (': <<test_last_nonmatch_plus_one ~buf:"222222222" [...]>>'),
     cst_src_binary_packing_ml$21=caml_new_string("src/binary_packing.ml"),
     cst_test_last_nonmatch_plus_one_buf_221222222=
      caml_new_string
       (': <<test_last_nonmatch_plus_one ~buf:"221222222" [...]>>'),
     cst_src_binary_packing_ml$22=caml_new_string("src/binary_packing.ml"),
     cst_test_last_nonmatch_plus_one_buf_222122222=
      caml_new_string
       (': <<test_last_nonmatch_plus_one ~buf:"222122222" [...]>>'),
     cst_src_binary_packing_ml$23=caml_new_string("src/binary_packing.ml"),
     cst_test_last_nonmatch_plus_one_buf_222122222$0=
      caml_new_string
       (': <<test_last_nonmatch_plus_one ~buf:"222122222" [...]>>'),
     cst_src_binary_packing_ml$24=caml_new_string("src/binary_packing.ml"),
     cst_test_last_nonmatch_plus_one_buf_222122222$1=
      caml_new_string
       (': <<test_last_nonmatch_plus_one ~buf:"222122222" [...]>>'),
     cst_src_binary_packing_ml$25=caml_new_string("src/binary_packing.ml"),
     cst_test_last_nonmatch_plus_one_buf_222122221=
      caml_new_string
       (': <<test_last_nonmatch_plus_one ~buf:"222122221" [...]>>'),
     cst_src_binary_packing_ml$26=caml_new_string("src/binary_packing.ml"),
     cst_test_last_nonmatch_plus_one_buf_222122221$0=
      caml_new_string
       (': <<test_last_nonmatch_plus_one ~buf:"222122221" [...]>>'),
     cst_src_binary_packing_ml$27=caml_new_string("src/binary_packing.ml"),
     cst_test_unpack_tail_padded_fixed_string_padding=
      caml_new_string
       (": <<test_unpack_tail_padded_fixed_string ~padding[...]>>"),
     cst_src_binary_packing_ml$28=caml_new_string("src/binary_packing.ml"),
     cst_test_unpack_tail_padded_fixed_string_padding$0=
      caml_new_string
       (": <<test_unpack_tail_padded_fixed_string ~padding[...]>>"),
     cst_src_binary_packing_ml$29=caml_new_string("src/binary_packing.ml"),
     cst_test_unpack_tail_padded_fixed_string_padding$1=
      caml_new_string
       (": <<test_unpack_tail_padded_fixed_string ~padding[...]>>"),
     cst_src_binary_packing_ml$30=caml_new_string("src/binary_packing.ml"),
     cst_test_unpack_tail_padded_fixed_string_padding$2=
      caml_new_string
       (": <<test_unpack_tail_padded_fixed_string ~padding[...]>>"),
     cst_src_binary_packing_ml$31=caml_new_string("src/binary_packing.ml"),
     cst_test_unpack_tail_padded_fixed_string_padding$3=
      caml_new_string
       (": <<test_unpack_tail_padded_fixed_string ~padding[...]>>"),
     cst_src_binary_packing_ml$32=caml_new_string("src/binary_packing.ml"),
     cst_test_unpack_tail_padded_fixed_string_padding$4=
      caml_new_string
       (": <<test_unpack_tail_padded_fixed_string ~padding[...]>>"),
     cst_src_binary_packing_ml$33=caml_new_string("src/binary_packing.ml"),
     cst_test_unpack_tail_padded_fixed_string_padding$5=
      caml_new_string
       (": <<test_unpack_tail_padded_fixed_string ~padding[...]>>"),
     cst_src_binary_packing_ml$34=caml_new_string("src/binary_packing.ml"),
     cst_test_unpack_tail_padded_fixed_string_padding$6=
      caml_new_string
       (": <<test_unpack_tail_padded_fixed_string ~padding[...]>>"),
     cst_src_binary_packing_ml$35=caml_new_string("src/binary_packing.ml"),
     cst_test_unpack_tail_padded_fixed_string_padding$7=
      caml_new_string
       (": <<test_unpack_tail_padded_fixed_string ~padding[...]>>"),
     cst_src_binary_packing_ml$36=caml_new_string("src/binary_packing.ml"),
     cst_test_unpack_tail_padded_fixed_string_padding$8=
      caml_new_string
       (": <<test_unpack_tail_padded_fixed_string ~padding[...]>>"),
     cst_src_binary_packing_ml$37=caml_new_string("src/binary_packing.ml"),
     cst_test_unpack_tail_padded_fixed_string_padding$9=
      caml_new_string
       (": <<test_unpack_tail_padded_fixed_string ~padding[...]>>"),
     cst_src_binary_packing_ml$38=caml_new_string("src/binary_packing.ml"),
     cst_test_unpack_tail_padded_fixed_string_padding$10=
      caml_new_string
       (": <<test_unpack_tail_padded_fixed_string ~padding[...]>>"),
     cst_src_binary_packing_ml$39=caml_new_string("src/binary_packing.ml"),
     cst_test_pack_tail_padded_fixed_string_expect_1=
      caml_new_string
       (': <<test_pack_tail_padded_fixed_string ~expect:"1[...]>>'),
     cst_src_binary_packing_ml$40=caml_new_string("src/binary_packing.ml"),
     cst_test_pack_tail_padded_fixed_string_expect_1$0=
      caml_new_string
       (': <<test_pack_tail_padded_fixed_string ~expect:"1[...]>>'),
     cst_src_binary_packing_ml$41=caml_new_string("src/binary_packing.ml"),
     cst_test_pack_tail_padded_fixed_string_expect_1$1=
      caml_new_string
       (': <<test_pack_tail_padded_fixed_string ~expect:"1[...]>>'),
     cst_src_binary_packing_ml$42=caml_new_string("src/binary_packing.ml"),
     cst_test_pack_tail_padded_fixed_string_expect_1$2=
      caml_new_string
       (': <<test_pack_tail_padded_fixed_string ~expect:"1[...]>>'),
     v1=[0,caml_new_string("longer_than")],
     ns$1=
      [0,
       [255,6320256,3162192,16160],
       [0,
        [255,6320256,3162192,32544],
        [0,
         [255,10456960,13615023,32991],
         [0,
          [255,16777215,16777215,32767],
          [0,[255,0,0,32768],[0,[255,0,0,0],0]]]]]],
     ns$0=[0,16160,[0,32544,[0,-32544,[0,-32768,[0,0,[0,1,[0,32767,0]]]]]]],
     ns=[0,16160,[0,32544,[0,61216,[0,0,[0,32767,[0,32768,[0,65535,0]]]]]]],
     cst_src_binary_packing_ml$0=caml_new_string("src/binary_packing.ml"),
     cst_ns_List_map_ns_f_fun_n=
      caml_new_string
       (": <<ns =   (List.map ns      ~f:(fun n ->        [...]>>"),
     cst_src_binary_packing_ml$1=caml_new_string("src/binary_packing.ml"),
     cst_ns_List_map_ns_f_fun_n$0=
      caml_new_string
       (": <<ns =   (List.map ns      ~f:(fun n ->        [...]>>"),
     cst_src_binary_packing_ml$2=caml_new_string("src/binary_packing.ml"),
     cst_ns_List_map_ns_f_fun_n$1=
      caml_new_string
       (": <<ns =   (List.map ns      ~f:(fun n ->        [...]>>"),
     cst_src_binary_packing_ml$3=caml_new_string("src/binary_packing.ml"),
     cst_ns_List_map_ns_f_fun_n$2=
      caml_new_string
       (": <<ns =   (List.map ns      ~f:(fun n ->        [...]>>"),
     cst_src_binary_packing_ml$4=caml_new_string("src/binary_packing.ml"),
     cst_ns_rev_List_map_ns_f_fun_n=
      caml_new_string
       (": <<ns_rev =   (List.map ns      ~f:(fun n ->    [...]>>"),
     cst_src_binary_packing_ml$5=caml_new_string("src/binary_packing.ml"),
     cst_ns_rev_List_map_ns_f_fun_n$0=
      caml_new_string
       (": <<ns_rev =   (List.map ns      ~f:(fun n ->    [...]>>"),
     cst_src_binary_packing_ml$6=caml_new_string("src/binary_packing.ml"),
     cst_ns_List_map_ns_f_fun_n$3=
      caml_new_string
       (": <<ns =   (List.map ns      ~f:(fun n ->        [...]>>"),
     cst_src_binary_packing_ml$7=caml_new_string("src/binary_packing.ml"),
     cst_ns_List_map_ns_f_fun_n$4=
      caml_new_string
       (": <<ns =   (List.map ns      ~f:(fun n ->        [...]>>"),
     cst_src_binary_packing_ml$8=caml_new_string("src/binary_packing.ml"),
     cst_ns_List_map_ns_f_fun_n$5=
      caml_new_string
       (": <<ns =   (List.map ns      ~f:(fun n ->        [...]>>"),
     cst_src_binary_packing_ml$9=caml_new_string("src/binary_packing.ml"),
     cst_ns_List_map_ns_f_fun_n$6=
      caml_new_string
       (": <<ns =   (List.map ns      ~f:(fun n ->        [...]>>"),
     cst_Big_endian=caml_new_string("Big_endian"),
     cst_Little_endian=caml_new_string("Little_endian"),
     cst_Big_endian$0=caml_new_string("Big_endian"),
     cst_Little_endian$0=caml_new_string("Little_endian"),
     cst_core_kernel$443=caml_new_string("core_kernel"),
     cst_src_binary_packing_ml=caml_new_string("src/binary_packing.ml"),
     cst$230=caml_new_string(""),
     cst_core_kernel$444=caml_new_string("core_kernel"),
     tp_loc$41=caml_new_string("src/binary_packing.ml.endian"),
     tp_loc$42=caml_new_string("src/binary_packing.ml.endian"),
     cst_Core_kernel_Binary_packing_Binary_packing_invalid_byte_number=
      caml_new_string
       ("Core_kernel__Binary_packing.Binary_packing_invalid_byte_number"),
     cst_Core_kernel_Binary_packing_Pack_unsigned_8_argument_out_of_range=
      caml_new_string
       ("Core_kernel__Binary_packing.Pack_unsigned_8_argument_out_of_range"),
     cst_Core_kernel_Binary_packing_Pack_signed_8_argument_out_of_range=
      caml_new_string
       ("Core_kernel__Binary_packing.Pack_signed_8_argument_out_of_range"),
     cst_Core_kernel_Binary_packing_Pack_unsigned_16_argument_out_of_range=
      caml_new_string
       ("Core_kernel__Binary_packing.Pack_unsigned_16_argument_out_of_range"),
     cst_Core_kernel_Binary_packing_Pack_signed_16_argument_out_of_range=
      caml_new_string
       ("Core_kernel__Binary_packing.Pack_signed_16_argument_out_of_range"),
     cst_src_binary_packing_ml$10=caml_new_string("src/binary_packing.ml"),
     cst_inline_unsigned_16=caml_new_string(": inline_unsigned_16"),
     cst_src_binary_packing_ml$11=caml_new_string("src/binary_packing.ml"),
     cst_inline_signed_16=caml_new_string(": inline_signed_16"),
     cst_Core_kernel_Binary_packing_Pack_unsigned_32_argument_out_of_range=
      caml_new_string
       ("Core_kernel__Binary_packing.Pack_unsigned_32_argument_out_of_range"),
     cst_Core_kernel_Binary_packing_Pack_signed_32_argument_out_of_range=
      caml_new_string
       ("Core_kernel__Binary_packing.Pack_signed_32_argument_out_of_range"),
     cst_src_binary_packing_ml$12=caml_new_string("src/binary_packing.ml"),
     cst_inline_unsigned_32_int=caml_new_string(": inline_unsigned_32_int"),
     cst_src_binary_packing_ml$13=caml_new_string("src/binary_packing.ml"),
     cst_inline_signed_32_int=caml_new_string(": inline_signed_32_int"),
     cst_Core_kernel_Binary_packing_Unpack_signed_64_int_most_significant_byte_too_large=
      caml_new_string
       ("Core_kernel__Binary_packing.Unpack_signed_64_int_most_significant_byte_too_large"),
     cst_src_binary_packing_ml$14=caml_new_string("src/binary_packing.ml"),
     cst_63_bits_overflow=caml_new_string(": 63 bits overflow"),
     cst_src_binary_packing_ml$15=caml_new_string("src/binary_packing.ml"),
     cst_inline_signed_64=caml_new_string(": inline_signed_64"),
     cst_src_binary_packing_ml$16=caml_new_string("src/binary_packing.ml"),
     cst_inline_signed_64_int=caml_new_string(": inline_signed_64_int"),
     cst_Core_kernel_Binary_packing_Pack_tail_padded_fixed_string_argument_too_long=
      caml_new_string
       ("Core_kernel__Binary_packing.Pack_tail_padded_fixed_string_argument_too_long"),
     cst_src_binary_packing_ml$43=caml_new_string("src/binary_packing.ml"),
     cst_inline_tail_padded_fixed_string=
      caml_new_string(": inline_tail_padded_fixed_string"),
     cst_core_kernel$445=caml_new_string("core_kernel"),
     cst_src_memo_ml$0=caml_new_string("src/memo.ml"),
     cst_f_0_0=caml_new_string(": <<(f 0) = 0>>"),
     cst_src_memo_ml$1=caml_new_string("src/memo.ml"),
     cst_count_1=caml_new_string(": <<(!count) = 1>>"),
     cst_src_memo_ml$2=caml_new_string("src/memo.ml"),
     cst_f_1_1=caml_new_string(": <<(f 1) = 1>>"),
     cst_src_memo_ml$3=caml_new_string("src/memo.ml"),
     cst_count_2=caml_new_string(": <<(!count) = 2>>"),
     cst_src_memo_ml$4=caml_new_string("src/memo.ml"),
     cst_f_0_0$0=caml_new_string(": <<(f 0) = 0>>"),
     cst_src_memo_ml$5=caml_new_string("src/memo.ml"),
     cst_count_2$0=caml_new_string(": <<(!count) = 2>>"),
     cst_src_memo_ml$6=caml_new_string("src/memo.ml"),
     cst_f_3_3=caml_new_string(": <<(f 3) = 3>>"),
     cst_src_memo_ml$7=caml_new_string("src/memo.ml"),
     cst_count_3=caml_new_string(": <<(!count) = 3>>"),
     cst_src_memo_ml$8=caml_new_string("src/memo.ml"),
     cst_f_4_4=caml_new_string(": <<(f 4) = 4>>"),
     cst_src_memo_ml$9=caml_new_string("src/memo.ml"),
     cst_count_4=caml_new_string(": <<(!count) = 4>>"),
     cst_src_memo_ml$10=caml_new_string("src/memo.ml"),
     cst_f_0_0$1=caml_new_string(": <<(f 0) = 0>>"),
     cst_src_memo_ml$11=caml_new_string("src/memo.ml"),
     cst_count_4$0=caml_new_string(": <<(!count) = 4>>"),
     cst_src_memo_ml$12=caml_new_string("src/memo.ml"),
     cst_f_1_1$0=caml_new_string(": <<(f 1) = 1>>"),
     cst_src_memo_ml$13=caml_new_string("src/memo.ml"),
     cst_count_5=caml_new_string(": <<(!count) = 5>>"),
     cst_core_kernel$446=caml_new_string("core_kernel"),
     cst_src_memo_ml=caml_new_string("src/memo.ml"),
     cst$237=caml_new_string(""),
     cst_core_kernel$447=caml_new_string("core_kernel"),
     cst_src_memo_ml$14=caml_new_string("src/memo.ml"),
     cst_lru=caml_new_string(": lru"),
     cst_core_kernel$448=caml_new_string("core_kernel"),
     pos$120=caml_new_string("src/blang.ml:672:27"),
     cst_fail_on_expression=caml_new_string("fail on expression"),
     cst_src_blang_ml$57=caml_new_string("src/blang.ml"),
     cst_for_0_to_100_do_run_t_done=
      caml_new_string(": <<for _ = 0 to 100 do run (t ()) done>>"),
     cst_31bb128c352e2569228fbacc590e937a29a8bb8fc4bfe7126504ce3dc400be7f401fa6f5be5dba38=
      caml_new_string
       ("31bb128c352e2569228fbacc590e937a29a8bb8fc4bfe7126504ce3dc400be7f401fa6f5be5dba38"),
     cst_src_blang_ml$53=caml_new_string("src/blang.ml"),
     cst_forall_t_fun_t_specialize_t_fun_U=
      caml_new_string
       (": <<forall_t (fun t -> (specialize t (fun _ -> `U[...]>>"),
     cst_src_blang_ml$54=caml_new_string("src/blang.ml"),
     cst_forall_tf_fun_t_f_specialize_t=
      caml_new_string
       (": <<forall_tf   (fun (t, f) ->      (specialize t[...]>>"),
     cst_src_blang_ml$55=caml_new_string("src/blang.ml"),
     cst_forall_tg_fun_t_g_List_for_all=
      caml_new_string
       (": <<forall_tg   (fun (t, g) ->      List.for_all [...]>>"),
     cst_src_blang_ml$56=caml_new_string("src/blang.ml"),
     cst_forall_tg_fun_t_g_let_f=
      caml_new_string
       (": <<forall_tg   (fun (t, g) ->      let f =      [...]>>"),
     cst_src_blang_ml$58=caml_new_string("src/blang.ml"),
     cst_eval_set=caml_new_string(": eval_set"),
     cst_src_blang_ml$49=caml_new_string("src/blang.ml"),
     cst_test_0_or_not_base_0_base_1=
      caml_new_string(": <<test [0] (or_ [not_ (base 0); base 1])>>"),
     cst_src_blang_ml$50=caml_new_string("src/blang.ml"),
     cst_test_0_1_not_and_not_base_0_base=
      caml_new_string
       (": <<test [0; 1] (not_ (and_ [not_ (base 0); base [...]>>"),
     cst_src_blang_ml$51=caml_new_string("src/blang.ml"),
     cst_test_0_2_if_base_0_base_1_not_bas=
      caml_new_string
       (": <<test [0; 2] (if_ (base 0) (base 1) (not_ (bas[...]>>"),
     cst_src_blang_ml$20=caml_new_string("src/blang.ml"),
     cst_and_a_b_c_andalso_andalso_a_b_c=
      caml_new_string(": <<(and_ [a; b; c]) = (andalso (andalso a b) c)>>"),
     cst_src_blang_ml$21=caml_new_string("src/blang.ml"),
     cst_or_a_b_c_orelse_orelse_a_b_c=
      caml_new_string(": <<(or_ [a; b; c]) = (orelse (orelse a b) c)>>"),
     cst_src_blang_ml$22=caml_new_string("src/blang.ml"),
     cst_test_or=caml_new_string(": <<test_or []>>"),
     cst_src_blang_ml$23=caml_new_string("src/blang.ml"),
     cst_test_or_a=caml_new_string(": <<test_or [a]>>"),
     cst_src_blang_ml$24=caml_new_string("src/blang.ml"),
     cst_test_or_true=caml_new_string(": <<test_or [true_]>>"),
     cst_src_blang_ml$25=caml_new_string("src/blang.ml"),
     cst_test_or_false=caml_new_string(": <<test_or [false_]>>"),
     cst_src_blang_ml$26=caml_new_string("src/blang.ml"),
     cst_test_or_a_true_b=caml_new_string(": <<test_or [a; true_; b]>>"),
     cst_src_blang_ml$27=caml_new_string("src/blang.ml"),
     cst_test_or_a_false_b=caml_new_string(": <<test_or [a; false_; b]>>"),
     cst_src_blang_ml$28=caml_new_string("src/blang.ml"),
     cst_test_and=caml_new_string(": <<test_and []>>"),
     cst_src_blang_ml$29=caml_new_string("src/blang.ml"),
     cst_test_and_a=caml_new_string(": <<test_and [a]>>"),
     cst_src_blang_ml$30=caml_new_string("src/blang.ml"),
     cst_test_and_true=caml_new_string(": <<test_and [true_]>>"),
     cst_src_blang_ml$31=caml_new_string("src/blang.ml"),
     cst_test_and_false=caml_new_string(": <<test_and [false_]>>"),
     cst_src_blang_ml$32=caml_new_string("src/blang.ml"),
     cst_test_and_a_true_b=caml_new_string(": <<test_and [a; true_; b]>>"),
     cst_src_blang_ml$33=caml_new_string("src/blang.ml"),
     cst_test_and_a_false_b=caml_new_string(": <<test_and [a; false_; b]>>"),
     cst_src_blang_ml$1=caml_new_string("src/blang.ml"),
     cst_not_true_false=caml_new_string(": <<(not_ true_) = false_>>"),
     cst_src_blang_ml$2=caml_new_string("src/blang.ml"),
     cst_not_false_true=caml_new_string(": <<(not_ false_) = true_>>"),
     cst_src_blang_ml$3=caml_new_string("src/blang.ml"),
     cst_not_not_a_a=caml_new_string(": <<(not_ (not_ a)) = a>>"),
     cst_src_blang_ml$4=caml_new_string("src/blang.ml"),
     cst_andalso_true_b_b=caml_new_string(": <<(andalso true_ b) = b>>"),
     cst_src_blang_ml$5=caml_new_string("src/blang.ml"),
     cst_andalso_a_true_a=caml_new_string(": <<(andalso a true_) = a>>"),
     cst_src_blang_ml$6=caml_new_string("src/blang.ml"),
     cst_andalso_false_b_false=
      caml_new_string(": <<(andalso false_ b) = false_>>"),
     cst_src_blang_ml$7=caml_new_string("src/blang.ml"),
     cst_andalso_a_false_false=
      caml_new_string(": <<(andalso a false_) = false_>>"),
     cst_src_blang_ml$8=caml_new_string("src/blang.ml"),
     cst_orelse_false_b_b=caml_new_string(": <<(orelse false_ b) = b>>"),
     cst_src_blang_ml$9=caml_new_string("src/blang.ml"),
     cst_orelse_a_false_a=caml_new_string(": <<(orelse a false_) = a>>"),
     cst_src_blang_ml$10=caml_new_string("src/blang.ml"),
     cst_orelse_true_b_true=caml_new_string(": <<(orelse true_ b) = true_>>"),
     cst_src_blang_ml$11=caml_new_string("src/blang.ml"),
     cst_orelse_a_true_true=caml_new_string(": <<(orelse a true_) = true_>>"),
     cst_src_blang_ml$12=caml_new_string("src/blang.ml"),
     cst_if_true_b_c_b=caml_new_string(": <<(if_ true_ b c) = b>>"),
     cst_src_blang_ml$13=caml_new_string("src/blang.ml"),
     cst_if_false_b_c_c=caml_new_string(": <<(if_ false_ b c) = c>>"),
     cst_src_blang_ml$14=caml_new_string("src/blang.ml"),
     cst_if_a_true_c_orelse_a_c=
      caml_new_string(": <<(if_ a true_ c) = (orelse a c)>>"),
     cst_src_blang_ml$15=caml_new_string("src/blang.ml"),
     cst_if_a_b_false_andalso_a_b=
      caml_new_string(": <<(if_ a b false_) = (andalso a b)>>"),
     cst_src_blang_ml$16=caml_new_string("src/blang.ml"),
     cst_if_a_b_true_if_not_a_true_b=
      caml_new_string(": <<(if_ a b true_) = (if_ (not_ a) true_ b)>>"),
     cst_src_blang_ml$17=caml_new_string("src/blang.ml"),
     cst_if_a_b_true_orelse_not_a_b=
      caml_new_string(": <<(if_ a b true_) = (orelse (not_ a) b)>>"),
     cst_src_blang_ml$18=caml_new_string("src/blang.ml"),
     cst_if_a_false_c_if_not_a_c_false=
      caml_new_string(": <<(if_ a false_ c) = (if_ (not_ a) c false_)>>"),
     cst_src_blang_ml$19=caml_new_string("src/blang.ml"),
     cst_if_a_false_c_andalso_not_a_c=
      caml_new_string(": <<(if_ a false_ c) = (andalso (not_ a) c)>>"),
     cst_src_blang_ml$34=caml_new_string("src/blang.ml"),
     cst_n_ary_and_or=caml_new_string(": n-ary-and-or"),
     cst_t$205=caml_new_string("t"),
     cst_src_blang_ml_231_9=caml_new_string("src/blang.ml:231:9"),
     cst_t$206=caml_new_string("t"),
     cst_bazb=caml_new_string("bazb"),
     cst_baza=caml_new_string("baza"),
     cst_barb=caml_new_string("barb"),
     cst_bara=caml_new_string("bara"),
     cst_foo$12=caml_new_string("foo"),
     test_sexp=
      caml_new_string("(if foo (not (or bara barb)) (not (and baza bazb)))"),
     test_bin=
      caml_new_string
       ("\x05\x06\x03foo\x04\x03\x06\x04bara\x06\x04barb\x04\x02\x06\x04baza\x06\x04bazb"),
     cst$239=caml_new_string("\x01"),
     cst_false$0=caml_new_string("false"),
     cst$240=caml_new_string("\0"),
     cst_true$0=caml_new_string("true"),
     cst_false=caml_new_string("false"),
     cst_true=caml_new_string("true"),
     cst_and=caml_new_string("and"),
     cst_if=caml_new_string("if"),
     cst_not=caml_new_string("not"),
     cst_or=caml_new_string("or"),
     name$64=caml_new_string("not"),
     name$65=caml_new_string("if"),
     cst_src_blang_ml_T_t=caml_new_string("src/blang.ml.T.t"),
     cst_t$204=caml_new_string("t"),
     cst_core_kernel$449=caml_new_string("core_kernel"),
     cst_src_blang_ml=caml_new_string("src/blang.ml"),
     cst$238=caml_new_string(""),
     cst_core_kernel$450=caml_new_string("core_kernel"),
     cst_a$79=caml_new_string("a"),
     cst_src_blang_ml_45_14=caml_new_string("src/blang.ml:45:14"),
     cst_Base=caml_new_string("Base"),
     cst_a$80=caml_new_string("a"),
     cst_src_blang_ml_44_26=caml_new_string("src/blang.ml:44:26"),
     cst_t$195=caml_new_string("t"),
     cst_a$81=caml_new_string("a"),
     cst_src_blang_ml_44_19=caml_new_string("src/blang.ml:44:19"),
     cst_t$196=caml_new_string("t"),
     cst_a$82=caml_new_string("a"),
     cst_src_blang_ml_44_12=caml_new_string("src/blang.ml:44:12"),
     cst_t$197=caml_new_string("t"),
     cst_If=caml_new_string("If"),
     cst_a$83=caml_new_string("a"),
     cst_src_blang_ml_43_13=caml_new_string("src/blang.ml:43:13"),
     cst_t$198=caml_new_string("t"),
     cst_Not=caml_new_string("Not"),
     cst_a$84=caml_new_string("a"),
     cst_src_blang_ml_42_19=caml_new_string("src/blang.ml:42:19"),
     cst_t$199=caml_new_string("t"),
     cst_a$85=caml_new_string("a"),
     cst_src_blang_ml_42_12=caml_new_string("src/blang.ml:42:12"),
     cst_t$200=caml_new_string("t"),
     cst_Or=caml_new_string("Or"),
     cst_a$86=caml_new_string("a"),
     cst_src_blang_ml_41_20=caml_new_string("src/blang.ml:41:20"),
     cst_t$201=caml_new_string("t"),
     cst_a$87=caml_new_string("a"),
     cst_src_blang_ml_41_13=caml_new_string("src/blang.ml:41:13"),
     cst_t$202=caml_new_string("t"),
     cst_And=caml_new_string("And"),
     cst_a$88=caml_new_string("a"),
     cst_t$203=caml_new_string("t"),
     cst_src_blang_ml_38_2=caml_new_string("src/blang.ml:38:2"),
     cst_src_blang_ml$0=caml_new_string("src/blang.ml"),
     cst_Blang_V1=caml_new_string(": Blang.V1"),
     cst_src_blang_ml$35=caml_new_string("src/blang.ml"),
     cst_auto_simplification=caml_new_string(": auto-simplification"),
     cst_src_blang_ml$36=caml_new_string("src/blang.ml"),
     cst_1_2_3_4_5_6_7_values_and=
      caml_new_string
       (": <<[1; 2; 3; 4; 5; 6; 7] =   (values      (and_ [...]>>"),
     cst_src_blang_ml$37=caml_new_string("src/blang.ml"),
     cst_gather_conjuncts_base_1_base_1=
      caml_new_string(": <<(gather_conjuncts (base 1)) = [base 1]>>"),
     cst_src_blang_ml$38=caml_new_string("src/blang.ml"),
     cst_gather_conjuncts_and=
      caml_new_string(": <<(gather_conjuncts (and_ [])) = []>>"),
     cst_src_blang_ml$39=caml_new_string("src/blang.ml"),
     cst_gather_conjuncts_and_base_1_base_1=
      caml_new_string(": <<(gather_conjuncts (and_ [base 1])) = [base 1]>>"),
     cst_src_blang_ml$40=caml_new_string("src/blang.ml"),
     cst_gather_conjuncts_and_base_1_base_2=
      caml_new_string
       (": <<(gather_conjuncts (and_ [base 1; base 2])) = [...]>>"),
     cst_src_blang_ml$41=caml_new_string("src/blang.ml"),
     cst_gather_conjuncts_and_base_1_base_2_base=
      caml_new_string
       (": <<(gather_conjuncts (and_ [base 1; base 2; base[...]>>"),
     cst_src_blang_ml$42=caml_new_string("src/blang.ml"),
     cst_gather_conjuncts_and_and_and=
      caml_new_string
       (": <<(gather_conjuncts    (and_       [and_ [and_ [...]>>"),
     cst_src_blang_ml$43=caml_new_string("src/blang.ml"),
     cst_gather_disjuncts_base_1_base_1=
      caml_new_string(": <<(gather_disjuncts (base 1)) = [base 1]>>"),
     cst_src_blang_ml$44=caml_new_string("src/blang.ml"),
     cst_gather_disjuncts_or=
      caml_new_string(": <<(gather_disjuncts (or_ [])) = []>>"),
     cst_src_blang_ml$45=caml_new_string("src/blang.ml"),
     cst_gather_disjuncts_or_base_1_base_1=
      caml_new_string(": <<(gather_disjuncts (or_ [base 1])) = [base 1]>>"),
     cst_src_blang_ml$46=caml_new_string("src/blang.ml"),
     cst_gather_disjuncts_or_base_1_base_2=
      caml_new_string
       (": <<(gather_disjuncts (or_ [base 1; base 2])) = [[...]>>"),
     cst_src_blang_ml$47=caml_new_string("src/blang.ml"),
     cst_gather_disjuncts_or_base_1_base_2_base=
      caml_new_string
       (": <<(gather_disjuncts (or_ [base 1; base 2; base [...]>>"),
     cst_src_blang_ml$48=caml_new_string("src/blang.ml"),
     cst_gather_disjuncts_or_or_or_ba=
      caml_new_string
       (": <<(gather_disjuncts    (or_       [or_ [or_ [ba[...]>>"),
     cst_src_blang_ml$52=caml_new_string("src/blang.ml"),
     cst_bind_short_circuiting=caml_new_string(": bind short-circuiting"),
     cst_src_blang_ml$59=caml_new_string("src/blang.ml"),
     cst_laws=caml_new_string(": laws"),
     cst_core_kernel$451=caml_new_string("core_kernel"),
     cst_core_kernel$452=caml_new_string("core_kernel"),
     cst_src_bounded_index_intf_ml=
      caml_new_string("src/bounded_index_intf.ml"),
     cst$241=caml_new_string(""),
     cst_core_kernel$453=caml_new_string("core_kernel"),
     cst_core_kernel$454=caml_new_string("core_kernel"),
     cst_t$213=caml_new_string("t"),
     cst_src_bounded_index_ml_99_2=
      caml_new_string("src/bounded_index.ml:99:2"),
     cst_t$214=caml_new_string("t"),
     cst_t$215=caml_new_string("t"),
     cst_src_bounded_index_ml_120_6=
      caml_new_string("src/bounded_index.ml:120:6"),
     cst_t$216=caml_new_string("t"),
     label=caml_new_string("index"),
     cst_t$211=caml_new_string("t"),
     cst_src_bounded_index_ml_58_6=
      caml_new_string("src/bounded_index.ml:58:6"),
     cst_t$212=caml_new_string("t"),
     cst_e=caml_new_string("\xfd\0e\xcd\x1d\x01\xfd\0\xca\x9a;"),
     cst_index_500000000_of_1_to_1000000000=
      caml_new_string("(index 500000000 of 1 to 1000000000)"),
     cst_d$5=caml_new_string("\xfd\xffd\xcd\x1d\0\xfd\xff\xc9\x9a;"),
     cst_index_499999999_of_0_to_999999999=
      caml_new_string("(index 499999999 of 0 to 999999999)"),
     cst$243=caml_new_string("\x03\x01\x03"),
     cst_index_3_of_1_to_3=caml_new_string("(index 3 of 1 to 3)"),
     cst$244=caml_new_string("\x02\x01\x03"),
     cst_index_2_of_1_to_3=caml_new_string("(index 2 of 1 to 3)"),
     cst$245=caml_new_string("\x01\x01\x03"),
     cst_index_1_of_1_to_3=caml_new_string("(index 1 of 1 to 3)"),
     cst$246=caml_new_string("\x02\x01\x02"),
     cst_index_2_of_1_to_2=caml_new_string("(index 2 of 1 to 2)"),
     cst$247=caml_new_string("\x01\x01\x02"),
     cst_index_1_of_1_to_2=caml_new_string("(index 1 of 1 to 2)"),
     cst$248=caml_new_string("\x01\x01\x01"),
     cst_index_1_of_1_to_1=caml_new_string("(index 1 of 1 to 1)"),
     cst$249=caml_new_string("\x02\0\x02"),
     cst_index_2_of_0_to_2=caml_new_string("(index 2 of 0 to 2)"),
     cst$250=caml_new_string("\x01\0\x02"),
     cst_index_1_of_0_to_2=caml_new_string("(index 1 of 0 to 2)"),
     cst$251=caml_new_string("\0\0\x02"),
     cst_index_0_of_0_to_2=caml_new_string("(index 0 of 0 to 2)"),
     cst$252=caml_new_string("\x01\0\x01"),
     cst_index_1_of_0_to_1=caml_new_string("(index 1 of 0 to 1)"),
     cst$253=caml_new_string("\0\0\x01"),
     cst_index_0_of_0_to_1=caml_new_string("(index 0 of 0 to 1)"),
     cst$254=caml_new_string("\0\0\0"),
     cst_index_0_of_0_to_0=caml_new_string("(index 0 of 0 to 0)"),
     cst_of$0=caml_new_string("of"),
     cst_to$0=caml_new_string("to"),
     cst_invalid_sexp_for_index=caml_new_string("invalid sexp for index"),
     cst_to=caml_new_string("to"),
     cst_of=caml_new_string("of"),
     cst_index_out_of_bounds$0=caml_new_string("index out of bounds"),
     cst_src_bounded_index_ml_Stable_V1_Make_t=
      caml_new_string("src/bounded_index.ml.Stable.V1.Make.t"),
     cst_max_index=caml_new_string("max_index"),
     cst_min_index=caml_new_string("min_index"),
     cst_index$0=caml_new_string("index"),
     cst_t$207=caml_new_string("t"),
     cst_src_bounded_index_ml_7_6=caml_new_string("src/bounded_index.ml:7:6"),
     cst_t$208=caml_new_string("t"),
     tp_loc$43=
      caml_new_string("src/bounded_index.ml.Stable.V1.Make.For_sexpable.t"),
     cst_t$209=caml_new_string("t"),
     cst_src_bounded_index_ml_48_10=
      caml_new_string("src/bounded_index.ml:48:10"),
     cst_t$210=caml_new_string("t"),
     cst_core_kernel$455=caml_new_string("core_kernel"),
     cst_src_bounded_index_ml=caml_new_string("src/bounded_index.ml"),
     cst$242=caml_new_string(""),
     cst_core_kernel$456=caml_new_string("core_kernel"),
     cst_src_bounded_index_ml$0=caml_new_string("src/bounded_index.ml"),
     cst_V1=caml_new_string(": V1"),
     cst_core_kernel$457=caml_new_string("core_kernel"),
     cst_five=caml_new_string("five"),
     cst_Bounded_int_table_bug=caml_new_string("Bounded_int_table bug"),
     cst_Bounded_int_table_alist_bug=
      caml_new_string("Bounded_int_table alist bug"),
     cst_Bounded_int_table_sexp_bug=
      caml_new_string("Bounded_int_table sexp bug"),
     cst_t_of_sexp$1=caml_new_string("t_of_sexp"),
     cst_filter_mapi=caml_new_string("filter_mapi"),
     cst_filter_map=caml_new_string("filter_map"),
     cst_filter_map_None=caml_new_string("filter_map None"),
     cst_filter_i_true=caml_new_string("filter_i true"),
     cst_filter_i_false=caml_new_string("filter_i false"),
     cst_filter_true=caml_new_string("filter true"),
     cst_filter_false=caml_new_string("filter false"),
     cst_filter_keys_true=caml_new_string("filter_keys true"),
     cst_filter_keys_false=caml_new_string("filter_keys false"),
     cst_map=caml_new_string("map"),
     cst_mapi=caml_new_string("mapi"),
     cst_map_and_mapi=caml_new_string("map and mapi"),
     cst_t$221=caml_new_string("t"),
     cst_src_bounded_int_table_ml_637_10=
      caml_new_string("src/bounded_int_table.ml:637:10"),
     cst_t$222=caml_new_string("t"),
     cst_binio=caml_new_string("binio"),
     data$8=caml_new_string("zero"),
     cst_bad=caml_new_string("bad"),
     data$7=caml_new_string("zero"),
     cst_src_bounded_int_table_ml$29=
      caml_new_string("src/bounded_int_table.ml"),
     cst_set_t_key_13_data_set_t_key_14_data=
      caml_new_string
       (": <<set t ~key:13 ~data:(); set t ~key:14 ~data:([...]>>"),
     cst_src_bounded_int_table_ml$30=
      caml_new_string("src/bounded_int_table.ml"),
     cst_try_ignore_create_num_keys_1_assert_fa=
      caml_new_string
       (": <<try ignore (create ~num_keys:(-1)); assert fa[...]>>"),
     cst_src_bounded_int_table_ml$31=
      caml_new_string("src/bounded_int_table.ml"),
     cst_ignore_create_num_keys_0=
      caml_new_string(": <<ignore (create ~num_keys:0)>>"),
     cst_src_bounded_int_table_ml$32=
      caml_new_string("src/bounded_int_table.ml"),
     cst_ignore_create_num_keys_1=
      caml_new_string(": <<ignore (create ~num_keys:1)>>"),
     cst_src_bounded_int_table_ml$33=
      caml_new_string("src/bounded_int_table.ml"),
     cst_ignore_create_num_keys_10_000=
      caml_new_string(": <<ignore (create ~num_keys:10_000)>>"),
     cst_src_bounded_int_table_ml$34=
      caml_new_string("src/bounded_int_table.ml"),
     cst_assert_not_key_is_valid_1_for_key_0=
      caml_new_string
       (": <<assert (not (key_is_valid (-1))); for key = 0[...]>>"),
     cst_src_bounded_int_table_ml$35=
      caml_new_string("src/bounded_int_table.ml"),
     cst_add_exn_t_key_data_assert_length_t_1=
      caml_new_string
       (": <<add_exn t ~key ~data; assert ((length t) = 1)[...]>>"),
     cst_src_bounded_int_table_ml$36=
      caml_new_string("src/bounded_int_table.ml"),
     cst_add_exn_t_key_data_bad_set_t_key_data=
      caml_new_string
       (': <<add_exn t ~key ~data:"bad"; set t ~key ~data;[...]>>'),
     cst_src_bounded_int_table_ml$37=
      caml_new_string("src/bounded_int_table.ml"),
     cst_for_key_1_to_5_do_add_exn_t_key_data_Int=
      caml_new_string
       (": <<for key = 1 to 5 do add_exn t ~key ~data:(Int[...]>>"),
     cst_src_bounded_int_table_ml$38=
      caml_new_string("src/bounded_int_table.ml"),
     cst_for_key_0_to_num_keys_1_do_add_exn_t_key=
      caml_new_string
       (": <<for key = 0 to num_keys - 1 do add_exn t ~key[...]>>"),
     cst_src_bounded_int_table_ml$39=
      caml_new_string("src/bounded_int_table.ml"),
     cst_let_open_M_in_let_empty_Table_of_alist_ex=
      caml_new_string
       (": <<let open M in   let empty = Table.of_alist_ex[...]>>"),
     cst_src_bounded_int_table_ml$40=
      caml_new_string("src/bounded_int_table.ml"),
     cst_clear_t_add_exn_t_key_5_data_five_asser=
      caml_new_string
       (': <<clear t; add_exn t ~key:5 ~data:"five"; asser[...]>>'),
     cst_src_bounded_int_table_ml$21=
      caml_new_string("src/bounded_int_table.ml"),
     cst_test_filter_map_f_fun_assert_false=
      caml_new_string
       (": <<test_filter_map [] ~f:(fun _ -> assert false) []>>"),
     cst_src_bounded_int_table_ml$22=
      caml_new_string("src/bounded_int_table.ml"),
     cst_test_filter_map_1_2_f_fun_None=
      caml_new_string(": <<test_filter_map [(1, 2)] ~f:(fun _ -> None) []>>"),
     cst_src_bounded_int_table_ml$23=
      caml_new_string("src/bounded_int_table.ml"),
     cst_test_filter_map_1_2_f_fun_x_Some_x=
      caml_new_string
       (": <<test_filter_map [(1, 2)] ~f:(fun x -> Some x)[...]>>"),
     cst_src_bounded_int_table_ml$24=
      caml_new_string("src/bounded_int_table.ml"),
     cst_test_filter_map_1_2_f_fun_x_Some_x$0=
      caml_new_string
       (": <<test_filter_map [(1, 2)] ~f:(fun x -> Some (x[...]>>"),
     cst_src_bounded_int_table_ml$25=
      caml_new_string("src/bounded_int_table.ml"),
     cst_test_filter_map_1_2_3_4_f_fun_x=
      caml_new_string
       (": <<test_filter_map [(1, 2); (3, 4)] ~f:(fun x ->[...]>>"),
     cst_src_bounded_int_table_ml$26=
      caml_new_string("src/bounded_int_table.ml"),
     cst_test_map_like_fun_t_fun_f_mapi_t_f=
      caml_new_string
       (": <<test_map_like   (fun t -> fun ~f -> mapi t ~f[...]>>"),
     cst_src_bounded_int_table_ml$27=
      caml_new_string("src/bounded_int_table.ml"),
     cst_test_map_like_map=caml_new_string(": <<test_map_like map>>"),
     cst_src_bounded_int_table_ml$13=
      caml_new_string("src/bounded_int_table.ml"),
     cst_is_empty_create_num_keys_1=
      caml_new_string(": <<is_empty (create ~num_keys:1)>>"),
     cst_src_bounded_int_table_ml$14=
      caml_new_string("src/bounded_int_table.ml"),
     cst_Result_is_ok_of_alist=
      caml_new_string(": <<Result.is_ok (of_alist [])>>"),
     cst_src_bounded_int_table_ml$15=
      caml_new_string("src/bounded_int_table.ml"),
     cst_Result_is_ok_of_alist_1_1=
      caml_new_string(": <<Result.is_ok (of_alist [(1, 1)])>>"),
     cst_src_bounded_int_table_ml$16=
      caml_new_string("src/bounded_int_table.ml"),
     cst_Result_is_error_of_alist_1_1_1_2=
      caml_new_string(": <<Result.is_error (of_alist [(1, 1); (1, 2)])>>"),
     cst_src_bounded_int_table_ml$17=
      caml_new_string("src/bounded_int_table.ml"),
     cst_is_empty_of_alist_exn=
      caml_new_string(": <<is_empty (of_alist_exn [])>>"),
     cst_src_bounded_int_table_ml$18=
      caml_new_string("src/bounded_int_table.ml"),
     cst_assert_length_t_1_assert_keys_t=
      caml_new_string
       (": <<assert ((length t) = 1); assert ((keys t) = [[...]>>"),
     cst_src_bounded_int_table_ml$19=
      caml_new_string("src/bounded_int_table.ml"),
     cst_assert_length_t_2_assert_keys_t=
      caml_new_string
       (": <<assert ((length t) = 2); assert (((keys t) = [...]>>"),
     cst_t$220=caml_new_string("t"),
     cst_data$1=caml_new_string("data"),
     cst_src_bounded_int_table_ml_381_37=
      caml_new_string("src/bounded_int_table.ml:381:37"),
     cst_data$2=caml_new_string("data"),
     cst_t$219=caml_new_string("t"),
     cst_src_bounded_int_table_ml_381_14=
      caml_new_string("src/bounded_int_table.ml:381:14"),
     cst_src_bounded_int_table_ml$0=
      caml_new_string("src/bounded_int_table.ml"),
     cst_test_exists_like_function_fun_t_fun_f=
      caml_new_string
       (": <<test_exists_like_function   (fun t -> fun ~f [...]>>"),
     cst_src_bounded_int_table_ml$1=
      caml_new_string("src/bounded_int_table.ml"),
     cst_test_exists_like_function_exists=
      caml_new_string(": <<test_exists_like_function exists>>"),
     cst_src_bounded_int_table_ml$2=
      caml_new_string("src/bounded_int_table.ml"),
     cst_test_exists_like_function_fun_t_fu=
      caml_new_string
       (": <<test_exists_like_function   (fun t ->      fu[...]>>"),
     cst_src_bounded_int_table_ml$3=
      caml_new_string("src/bounded_int_table.ml"),
     cst_test_exists_like_function_fun_t_fun_f$0=
      caml_new_string
       (": <<test_exists_like_function   (fun t -> fun ~f [...]>>"),
     cst_src_bounded_int_table_ml$4=
      caml_new_string("src/bounded_int_table.ml"),
     cst_equal_of_list_true=
      caml_new_string(": <<(equal_of_list [] []) = true>>"),
     cst_src_bounded_int_table_ml$5=
      caml_new_string("src/bounded_int_table.ml"),
     cst_equal_of_list_1_false=
      caml_new_string(": <<(equal_of_list [] [1]) = false>>"),
     cst_src_bounded_int_table_ml$6=
      caml_new_string("src/bounded_int_table.ml"),
     cst_equal_of_list_1_false$0=
      caml_new_string(": <<(equal_of_list [1] []) = false>>"),
     cst_src_bounded_int_table_ml$7=
      caml_new_string("src/bounded_int_table.ml"),
     cst_equal_of_list_1_1_true=
      caml_new_string(": <<(equal_of_list [1] [1]) = true>>"),
     cst_src_bounded_int_table_ml$8=
      caml_new_string("src/bounded_int_table.ml"),
     cst_equal_of_list_1_1_2_false=
      caml_new_string(": <<(equal_of_list [1] [1; 2]) = false>>"),
     cst_src_bounded_int_table_ml$9=
      caml_new_string("src/bounded_int_table.ml"),
     cst_equal_of_list_1_2_1_2_true=
      caml_new_string(": <<(equal_of_list [1; 2] [1; 2]) = true>>"),
     cst_src_bounded_int_table_ml$10=
      caml_new_string("src/bounded_int_table.ml"),
     cst_equal_of_list_1_2_2_1_true=
      caml_new_string(": <<(equal_of_list [1; 2] [2; 1]) = true>>"),
     cst_src_bounded_int_table_ml$11=
      caml_new_string("src/bounded_int_table.ml"),
     cst_assert_equal_t0_t1_assert_equal_t0_t2_a=
      caml_new_string
       (": <<assert (equal t0 t1); assert (equal t0 t2); a[...]>>"),
     cst_Bounded_int_table_remove_bug=
      caml_new_string("Bounded_int_table.remove bug"),
     cst_Bounded_int_table_add_exn_of_key_whose_index_is_already_present=
      caml_new_string
       ("Bounded_int_table.add_exn of key whose index is already present"),
     cst_Bounded_int_table_find_exn_got_unknown_key=
      caml_new_string("Bounded_int_table.find_exn got unknown key"),
     cst_key_s_index_out_of_range=caml_new_string("key's index out of range"),
     cst_alist$0=caml_new_string("alist"),
     cst_num_keys$0=caml_new_string("num_keys"),
     cst_alist$1=caml_new_string("alist"),
     cst_num_keys$1=caml_new_string("num_keys"),
     cst_src_bounded_int_table_ml_Serialized_t=
      caml_new_string("src/bounded_int_table.ml.Serialized.t"),
     cst_t$218=caml_new_string("t"),
     cst_num_keys_must_be_nonnegative=
      caml_new_string("num_keys must be nonnegative"),
     cst_invariant_failed$0=caml_new_string("invariant failed"),
     cst_core_kernel$458=caml_new_string("core_kernel"),
     cst_src_bounded_int_table_ml=caml_new_string("src/bounded_int_table.ml"),
     cst$255=caml_new_string(""),
     cst_core_kernel$459=caml_new_string("core_kernel"),
     cst_data=caml_new_string("data"),
     cst_src_bounded_int_table_ml_148_25=
      caml_new_string("src/bounded_int_table.ml:148:25"),
     cst_key=caml_new_string("key"),
     cst_src_bounded_int_table_ml_148_18=
      caml_new_string("src/bounded_int_table.ml:148:18"),
     cst_alist=caml_new_string("alist"),
     cst_num_keys=caml_new_string("num_keys"),
     cst_data$0=caml_new_string("data"),
     cst_key$0=caml_new_string("key"),
     cst_t$217=caml_new_string("t"),
     cst_src_bounded_int_table_ml_146_2=
      caml_new_string("src/bounded_int_table.ml:146:2"),
     tp_loc$44=caml_new_string("src/bounded_int_table.ml.Serialized.t"),
     cst_src_bounded_int_table_ml$12=
      caml_new_string("src/bounded_int_table.ml"),
     cst$256=caml_new_string(""),
     cst_src_bounded_int_table_ml$20=
      caml_new_string("src/bounded_int_table.ml"),
     cst$257=caml_new_string(""),
     cst_src_bounded_int_table_ml$28=
      caml_new_string("src/bounded_int_table.ml"),
     cst$258=caml_new_string(""),
     cst_src_bounded_int_table_ml$41=
      caml_new_string("src/bounded_int_table.ml"),
     cst$259=caml_new_string(""),
     cst_core_kernel$460=caml_new_string("core_kernel"),
     cst_fill=caml_new_string("fill"),
     cst_take_at_most=caml_new_string("take_at_most"),
     cst_take=caml_new_string("take"),
     cst_init_level_negative=caml_new_string("init_level negative"),
     cst_init_level_above_bucket_size=
      caml_new_string("init_level above bucket size"),
     cst_src_bucket_ml_Make_t=caml_new_string("src/bucket.ml.Make.t"),
     cst_level=caml_new_string("level"),
     cst_size$0=caml_new_string("size"),
     cst_size$1=caml_new_string("size"),
     cst_level$0=caml_new_string("level"),
     cst_contents=caml_new_string("contents"),
     cst_src_bucket_ml_45_2=caml_new_string("src/bucket.ml:45:2"),
     cst_contents$0=caml_new_string("contents"),
     tp_loc$45=caml_new_string("src/bucket.ml.Make.t"),
     cst_size$2=caml_new_string("size"),
     cst_level$1=caml_new_string("level"),
     cst_t$223=caml_new_string("t"),
     cst_src_bucket_ml_48_2=caml_new_string("src/bucket.ml:48:2"),
     cst_t$224=caml_new_string("t"),
     cst_core_kernel$461=caml_new_string("core_kernel"),
     cst_src_bucket_ml=caml_new_string("src/bucket.ml"),
     cst$260=caml_new_string(""),
     cst_core_kernel$462=caml_new_string("core_kernel"),
     cst_core_kernel$463=caml_new_string("core_kernel"),
     pos$122=caml_new_string("src/bus.ml:600:21"),
     pos$121=caml_new_string("src/bus.ml:599:21"),
     cst_src_bus_ml$0=caml_new_string("src/bus.ml"),
     cst_write_doesn_t_allocate_when_inlined=
      caml_new_string(": write doesn't allocate when inlined"),
     cst_Bus_fold_exn_called_after_first_write=
      caml_new_string("Bus.fold_exn called after first write"),
     cst_Bus_iter_exn_called_after_first_write=
      caml_new_string("Bus.iter_exn called after first write"),
     cst_Bus_subscribe_exn_called_after_first_write=
      caml_new_string("Bus.subscribe_exn called after first write"),
     cst_Bus_subscriber_raised=caml_new_string("Bus subscriber raised"),
     cst_Bus_subscriber_s_on_callback_raise_raised=
      caml_new_string("Bus subscriber's [on_callback_raise] raised"),
     cst_Bus_write_called_on_closed_bus=
      caml_new_string("[Bus.write] called on closed bus"),
     cst_Bus_write_called_from_callback_on_the_same_bus=
      caml_new_string("[Bus.write] called from callback on the same bus"),
     cst_core_kernel$464=caml_new_string("core_kernel"),
     cst_src_bus_ml=caml_new_string("src/bus.ml"),
     cst$261=caml_new_string(""),
     cst_core_kernel$465=caml_new_string("core_kernel"),
     cst_callback=caml_new_string("callback"),
     cst_subscribers=caml_new_string("subscribers"),
     cst_src_bus_ml$1=caml_new_string("src/bus.ml"),
     cst$262=caml_new_string(""),
     cst_core_kernel$466=caml_new_string("core_kernel"),
     cst_t$226=caml_new_string("t"),
     cst_core_kernel$467=caml_new_string("core_kernel"),
     cst_src_option_array_ml=caml_new_string("src/option_array.ml"),
     cst$263=caml_new_string(""),
     cst_core_kernel$468=caml_new_string("core_kernel"),
     cst_a$89=caml_new_string("a"),
     cst_src_option_array_ml_9_16=caml_new_string("src/option_array.ml:9:16"),
     cst_a$90=caml_new_string("a"),
     cst_t$225=caml_new_string("t"),
     cst_src_option_array_ml_9_4=caml_new_string("src/option_array.ml:9:4"),
     cst_core_kernel$469=caml_new_string("core_kernel"),
     cst_Queue_dequeue_front=caml_new_string("Queue.dequeue_front"),
     cst_src_deque_ml$17=caml_new_string("src/deque.ml"),
     cst_src_deque_ml$18=caml_new_string("src/deque.ml"),
     cst_let_t_create_in_fun_try_assert_not_empty_t_Queue_dequeue_front_with=
      caml_new_string
       ('let t = create () in\nfun () -> try assert_not_empty t "Queue.dequeue_front" with | _ -> ()'),
     cst_assert_not_empty=caml_new_string("assert_not_empty"),
     cst_None$4=caml_new_string("None"),
     cst_None$5=caml_new_string("None"),
     partial$1=[11,caml_new_string(" -> "),[2,0,[12,41,0]]],
     cst_src_deque_ml$14=caml_new_string("src/deque.ml"),
     cst_assert_Int_length_q_0_let_bigstring=
      caml_new_string
       (": <<assert (Int.(=) (length q) 0); (let bigstring[...]>>"),
     cst_src_deque_ml$15=caml_new_string("src/deque.ml"),
     cst_test$3=caml_new_string(": <<test ()>>"),
     cst_src_deque_ml$2=caml_new_string("src/deque.ml"),
     cst_binary_search_t_First_equal_to_2_Some_1=
      caml_new_string(": <<(binary_search t `First_equal_to 2) = (Some 1)>>"),
     cst_src_deque_ml$3=caml_new_string("src/deque.ml"),
     cst_binary_search_t_First_equal_to_5_None=
      caml_new_string(": <<(binary_search t `First_equal_to 5) = None>>"),
     cst_src_deque_ml$4=caml_new_string("src/deque.ml"),
     cst_binary_search_t_First_equal_to_0_None=
      caml_new_string(": <<(binary_search t `First_equal_to 0) = None>>"),
     cst_src_deque_ml$5=caml_new_string("src/deque.ml"),
     cst_binary_search_t_pos_2_First_equal_to_2_None=
      caml_new_string
       (": <<(binary_search t ~pos:2 `First_equal_to 2) = None>>"),
     cst_src_deque_ml$6=caml_new_string("src/deque.ml"),
     cst_binary_search_t_pos_2_First_equal_to_3=
      caml_new_string
       (": <<(binary_search t ~pos:2 `First_equal_to 3) = [...]>>"),
     cst_src_deque_ml$7=caml_new_string("src/deque.ml"),
     cst_binary_search_t_First_equal_to_2_None=
      caml_new_string(": <<(binary_search t `First_equal_to 2) = None>>"),
     cst_src_deque_ml$8=caml_new_string("src/deque.ml"),
     cst_binary_search_t_First_equal_to_3_Some_2=
      caml_new_string(": <<(binary_search t `First_equal_to 3) = (Some 2)>>"),
     cst_src_deque_ml$9=caml_new_string("src/deque.ml"),
     cst_binary_search_t_First_equal_to_5_None$0=
      caml_new_string(": <<(binary_search t `First_equal_to 5) = None>>"),
     cst_src_deque_ml$10=caml_new_string("src/deque.ml"),
     cst_binary_search_t_First_equal_to_0_None$0=
      caml_new_string(": <<(binary_search t `First_equal_to 0) = None>>"),
     cst_src_deque_ml$11=caml_new_string("src/deque.ml"),
     cst_binary_search_t_pos_2_First_equal_to_2_None$0=
      caml_new_string
       (": <<(binary_search t ~pos:2 `First_equal_to 2) = None>>"),
     cst_src_deque_ml$12=caml_new_string("src/deque.ml"),
     cst_binary_search_t_pos_2_First_equal_to_3$0=
      caml_new_string
       (": <<(binary_search t ~pos:2 `First_equal_to 3) = [...]>>"),
     cst_Deque_front_index_exn=caml_new_string("Deque.front_index_exn"),
     cst_Deque_back_index_exn=caml_new_string("Deque.back_index_exn"),
     cst_el$16=caml_new_string("el"),
     cst_Deque_true_index_exn=caml_new_string("Deque.true_index_exn"),
     cst_Deque_dequeue_back_exn_passed_an_empty_queue=
      caml_new_string("Deque.dequeue_back_exn passed an empty queue"),
     cst_Deque_dequeue_front_exn_passed_an_empty_queue=
      caml_new_string("Deque.dequeue_front_exn passed an empty queue"),
     cst_Deque_peek_back_exn_passed_an_empty_queue=
      caml_new_string("Deque.peek_back_exn passed an empty queue"),
     cst_Deque_peek_front_exn_passed_an_empty_queue=
      caml_new_string("Deque.peek_front_exn passed an empty queue"),
     cst_core_kernel$470=caml_new_string("core_kernel"),
     cst_src_deque_ml=caml_new_string("src/deque.ml"),
     cst$264=caml_new_string(""),
     cst_core_kernel$471=caml_new_string("core_kernel"),
     cst_src_deque_ml$0=caml_new_string("src/deque.ml"),
     cst_ignore_create_initial_length_0_t=
      caml_new_string(": <<ignore (create ~initial_length:0 () : _ t)>>"),
     cst_src_deque_ml$1=caml_new_string("src/deque.ml"),
     cst_length_create_0=caml_new_string(": <<(length (create ())) = 0>>"),
     cst_a$91=caml_new_string("a"),
     cst_src_deque_ml_449_17=caml_new_string("src/deque.ml:449:17"),
     cst_a$92=caml_new_string("a"),
     cst_el$15=caml_new_string("el"),
     cst_src_deque_ml_449_4=caml_new_string("src/deque.ml:449:4"),
     cst_34c1e9ca_4992_11e6_a686_8b4bd4f87796=
      caml_new_string("34c1e9ca-4992-11e6-a686-8b4bd4f87796"),
     module_name$14=[0,caml_new_string("Core_kernel.Deque")],
     cst_src_deque_ml$13=caml_new_string("src/deque.ml"),
     cst$265=caml_new_string(""),
     cst_src_deque_ml$16=caml_new_string("src/deque.ml"),
     cst$266=caml_new_string(""),
     cst_src_deque_ml$19=caml_new_string("src/deque.ml"),
     cst_src_deque_ml$20=caml_new_string("src/deque.ml"),
     cst$267=caml_new_string(""),
     cst_Deque=caml_new_string("Deque"),
     cst_core_kernel$472=caml_new_string("core_kernel"),
     cst_core_kernel$473=caml_new_string("core_kernel"),
     cst_src_deriving_hash_intf_ml=
      caml_new_string("src/deriving_hash_intf.ml"),
     cst$268=caml_new_string(""),
     cst_core_kernel$474=caml_new_string("core_kernel"),
     cst_core_kernel$475=caml_new_string("core_kernel"),
     cst_core_kernel$476=caml_new_string("core_kernel"),
     cst_src_deriving_hash_ml=caml_new_string("src/deriving_hash.ml"),
     cst$269=caml_new_string(""),
     cst_core_kernel$477=caml_new_string("core_kernel"),
     cst_core_kernel$478=caml_new_string("core_kernel"),
     cst_core_kernel$479=caml_new_string("core_kernel"),
     cst_src_ephemeron_ml=caml_new_string("src/ephemeron.ml"),
     cst$270=caml_new_string(""),
     cst_core_kernel$480=caml_new_string("core_kernel"),
     cst_core_kernel$481=caml_new_string("core_kernel"),
     cst_el$18=caml_new_string("el"),
     pos$127=caml_new_string("src/fdeque.ml:371:21"),
     expect$36=[0,1,[0,2,[0,3,0]]],
     pos$126=caml_new_string("src/fdeque.ml:341:17"),
     expect$35=[0,2,[0,3,[0,4,[0,5,0]]]],
     pos$125=caml_new_string("src/fdeque.ml:335:17"),
     expect$34=[0,1,[0,2,[0,3,[0,4,0]]]],
     pos$124=caml_new_string("src/fdeque.ml:306:19"),
     expect$33=[0,1,[0,2,[0,3,0]]],
     pos$123=caml_new_string("src/fdeque.ml:292:19"),
     expect$32=[0,1,[0,2,[0,3,0]]],
     cst_src_fdeque_ml_Make=caml_new_string("src/fdeque.ml.Make"),
     cst_src_fdeque_ml$0=caml_new_string("src/fdeque.ml"),
     cst_rev_M_t=caml_new_string("rev M.t"),
     cst_rev=caml_new_string("rev"),
     cst_src_fdeque_ml_Make$0=caml_new_string("src/fdeque.ml.Make"),
     cst_src_fdeque_ml$1=caml_new_string("src/fdeque.ml"),
     cst_enqueue_front_M_t_0=caml_new_string("enqueue_front M.t 0"),
     cst_enqueue_front=caml_new_string("enqueue_front"),
     cst_src_fdeque_ml_Make$1=caml_new_string("src/fdeque.ml.Make"),
     cst_src_fdeque_ml$2=caml_new_string("src/fdeque.ml"),
     cst_enqueue_back_M_t_0=caml_new_string("enqueue_back M.t 0"),
     cst_enqueue_back=caml_new_string("enqueue_back"),
     cst_src_fdeque_ml_Make$2=caml_new_string("src/fdeque.ml.Make"),
     cst_src_fdeque_ml$3=caml_new_string("src/fdeque.ml"),
     cst_peek_front_M_t=caml_new_string("peek_front M.t"),
     cst_peek_front=caml_new_string("peek_front"),
     cst_src_fdeque_ml_Make$3=caml_new_string("src/fdeque.ml.Make"),
     cst_src_fdeque_ml$4=caml_new_string("src/fdeque.ml"),
     cst_peek_back_M_t=caml_new_string("peek_back M.t"),
     cst_peek_back=caml_new_string("peek_back"),
     cst_src_fdeque_ml_Make$4=caml_new_string("src/fdeque.ml.Make"),
     cst_src_fdeque_ml$5=caml_new_string("src/fdeque.ml"),
     cst_peek_front_exn_M_t=caml_new_string("peek_front_exn M.t"),
     cst_peek_front_exn=caml_new_string("peek_front_exn"),
     cst_src_fdeque_ml_Make$5=caml_new_string("src/fdeque.ml.Make"),
     cst_src_fdeque_ml$6=caml_new_string("src/fdeque.ml"),
     cst_peek_back_exn_M_t=caml_new_string("peek_back_exn M.t"),
     cst_peek_back_exn=caml_new_string("peek_back_exn"),
     cst_src_fdeque_ml_Make$6=caml_new_string("src/fdeque.ml.Make"),
     cst_src_fdeque_ml$7=caml_new_string("src/fdeque.ml"),
     cst_drop_front_M_t=caml_new_string("drop_front M.t"),
     cst_drop_front=caml_new_string("drop_front"),
     cst_src_fdeque_ml_Make$7=caml_new_string("src/fdeque.ml.Make"),
     cst_src_fdeque_ml$8=caml_new_string("src/fdeque.ml"),
     cst_drop_back_M_t=caml_new_string("drop_back M.t"),
     cst_drop_back=caml_new_string("drop_back"),
     cst_src_fdeque_ml_Make$8=caml_new_string("src/fdeque.ml.Make"),
     cst_src_fdeque_ml$9=caml_new_string("src/fdeque.ml"),
     cst_drop_front_exn_M_t=caml_new_string("drop_front_exn M.t"),
     cst_drop_front_exn=caml_new_string("drop_front_exn"),
     cst_src_fdeque_ml_Make$9=caml_new_string("src/fdeque.ml.Make"),
     cst_src_fdeque_ml$10=caml_new_string("src/fdeque.ml"),
     cst_drop_back_exn_M_t=caml_new_string("drop_back_exn M.t"),
     cst_drop_back_exn=caml_new_string("drop_back_exn"),
     cst_src_fdeque_ml_Make$10=caml_new_string("src/fdeque.ml.Make"),
     cst_src_fdeque_ml$11=caml_new_string("src/fdeque.ml"),
     cst_dequeue_front_M_t=caml_new_string("dequeue_front M.t"),
     cst_dequeue_front=caml_new_string("dequeue_front"),
     cst_src_fdeque_ml_Make$11=caml_new_string("src/fdeque.ml.Make"),
     cst_src_fdeque_ml$12=caml_new_string("src/fdeque.ml"),
     cst_dequeue_back_M_t=caml_new_string("dequeue_back M.t"),
     cst_dequeue_back=caml_new_string("dequeue_back"),
     cst_src_fdeque_ml_Make$12=caml_new_string("src/fdeque.ml.Make"),
     cst_src_fdeque_ml$13=caml_new_string("src/fdeque.ml"),
     cst_dequeue_front_exn_M_t=caml_new_string("dequeue_front_exn M.t"),
     cst_dequeue_front_exn=caml_new_string("dequeue_front_exn"),
     cst_src_fdeque_ml_Make$13=caml_new_string("src/fdeque.ml.Make"),
     cst_src_fdeque_ml$14=caml_new_string("src/fdeque.ml"),
     cst_dequeue_back_exn_M_t=caml_new_string("dequeue_back_exn M.t"),
     cst_dequeue_back_exn=caml_new_string("dequeue_back_exn"),
     cst_src_fdeque_ml$15=caml_new_string("src/fdeque.ml"),
     cst_src_fdeque_ml$16=caml_new_string("src/fdeque.ml"),
     cst$272=caml_new_string(""),
     cst_balanced$0=caml_new_string("balanced"),
     cst_src_fdeque_ml$17=caml_new_string("src/fdeque.ml"),
     cst_src_fdeque_ml$18=caml_new_string("src/fdeque.ml"),
     cst$273=caml_new_string(""),
     cst_short_back=caml_new_string("short back"),
     cst_src_fdeque_ml$19=caml_new_string("src/fdeque.ml"),
     cst_src_fdeque_ml$20=caml_new_string("src/fdeque.ml"),
     cst$274=caml_new_string(""),
     cst_short_front=caml_new_string("short front"),
     cst_Fdeque_back_0_front_2=
      caml_new_string("Fdeque: |back| = 0, |front| >= 2"),
     cst_Fdeque_front_0_back_2=
      caml_new_string("Fdeque: |front| = 0, |back| >= 2"),
     cst_core_kernel$482=caml_new_string("core_kernel"),
     cst_src_fdeque_ml=caml_new_string("src/fdeque.ml"),
     cst$271=caml_new_string(""),
     cst_core_kernel$483=caml_new_string("core_kernel"),
     cst_Core_kernel_Fdeque_Empty=caml_new_string("Core_kernel__Fdeque.Empty"),
     acc$1=[0,0,0,0],
     cst_src_fdeque_ml$21=caml_new_string("src/fdeque.ml"),
     cst_src_fdeque_ml$22=caml_new_string("src/fdeque.ml"),
     cst$275=caml_new_string(""),
     cst_accessors=caml_new_string("accessors"),
     cst_src_fdeque_ml$23=caml_new_string("src/fdeque.ml"),
     cst_test_result_int_list_expect_1_2_3=
      caml_new_string
       (": <<([%test_result :int list]) ~expect:[1; 2; 3] [...]>>"),
     cst_src_fdeque_ml$24=caml_new_string("src/fdeque.ml"),
     cst_test_result_int_list_expect_1_2_3$0=
      caml_new_string
       (": <<([%test_result :int list]) ~expect:[1; 2; 3] [...]>>"),
     cst_src_fdeque_ml$25=caml_new_string("src/fdeque.ml"),
     cst_test_result_int_list_expect_1_2_3$1=
      caml_new_string
       (": <<([%test_result :int list]) ~expect:[1; 2; 3; [...]>>"),
     cst_src_fdeque_ml$26=caml_new_string("src/fdeque.ml"),
     cst_test_result_int_list_expect_2_3_4=
      caml_new_string
       (": <<([%test_result :int list]) ~expect:[2; 3; 4; [...]>>"),
     cst_src_fdeque_ml$27=caml_new_string("src/fdeque.ml"),
     cst_test_result_int_list_expect_1_2_3$2=
      caml_new_string
       (": <<([%test_result :int list]) ~expect:[1; 2; 3] [...]>>"),
     cst_a$93=caml_new_string("a"),
     cst_src_fdeque_ml_381_21=caml_new_string("src/fdeque.ml:381:21"),
     cst_a$94=caml_new_string("a"),
     cst_el$17=caml_new_string("el"),
     cst_src_fdeque_ml_381_8=caml_new_string("src/fdeque.ml:381:8"),
     cst_83f96982_4992_11e6_919d_fbddcfdca576=
      caml_new_string("83f96982-4992-11e6-919d-fbddcfdca576"),
     module_name$15=[0,caml_new_string("Core_kernel.Fdeque")],
     cst_core_kernel$484=caml_new_string("core_kernel"),
     cst_core_kernel$485=caml_new_string("core_kernel"),
     cst_src_flags_intf_ml=caml_new_string("src/flags_intf.ml"),
     cst$276=caml_new_string(""),
     cst_core_kernel$486=caml_new_string("core_kernel"),
     cst_core_kernel$487=caml_new_string("core_kernel"),
     cst$278=caml_new_string(""),
     cst$279=caml_new_string(""),
     name$66=caml_new_string("src/flags.ml.Make.t"),
     cst_Flags_Make_got_intersecting_flags=
      caml_new_string("Flags.Make got intersecting flags"),
     cst_Flag_Make_got_flags_with_no_bits_set=
      caml_new_string("Flag.Make got flags with no bits set"),
     cst_Flags_create_got_invalid_bit_must_be_between_0_and_62=
      caml_new_string
       ("Flags.create got invalid ~bit (must be between 0 and 62)"),
     cst_core_kernel$488=caml_new_string("core_kernel"),
     cst_src_flags_ml=caml_new_string("src/flags.ml"),
     cst$277=caml_new_string(""),
     cst_core_kernel$489=caml_new_string("core_kernel"),
     cst_src_flags_ml$0=caml_new_string("src/flags.ml"),
     cst_Result_is_error_Result_try_with_fun=
      caml_new_string
       (": <<Result.is_error   (Result.try_with      (fun [...]>>"),
     cst_core_kernel$490=caml_new_string("core_kernel"),
     cst_Force_once_force=caml_new_string("Force_once.force"),
     cst_core_kernel$491=caml_new_string("core_kernel"),
     cst_src_force_once_ml=caml_new_string("src/force_once.ml"),
     cst$280=caml_new_string(""),
     cst_core_kernel$492=caml_new_string("core_kernel"),
     cst_core_kernel$493=caml_new_string("core_kernel"),
     cst_core_kernel$494=caml_new_string("core_kernel"),
     cst_src_fqueue_ml=caml_new_string("src/fqueue.ml"),
     cst$281=caml_new_string(""),
     cst_core_kernel$495=caml_new_string("core_kernel"),
     cst_core_kernel$496=caml_new_string("core_kernel"),
     pos$129=caml_new_string("src/heap.ml:840:13"),
     pos$128=caml_new_string("src/heap.ml:837:13"),
     t2$2=caml_new_string("(1)"),
     t2$3=caml_new_string("()"),
     cst_None$8=caml_new_string("None"),
     cst_None$9=caml_new_string("None"),
     cst_None$6=caml_new_string("None"),
     cst_None$7=caml_new_string("None"),
     cst_src_heap_ml$3=caml_new_string("src/heap.ml"),
     cst_test_dual_ops=caml_new_string(": <<test_dual_ops ()>>"),
     cst_cannot_remove_from_a_different_heap=
      caml_new_string("cannot remove from a different heap"),
     cst_Heap_value_exn_node_was_removed_from_the_heap=
      caml_new_string("Heap.value_exn: node was removed from the heap"),
     data$9=[0,0,[0,1,[0,2,[0,3,[0,4,[0,5,[0,6,[0,7,0]]]]]]]],
     cst_src_heap_ml$0=caml_new_string("src/heap.ml"),
     cst_Int_list_sum_heap_fold_sum=
      caml_new_string(": <<Int.(=) list_sum heap_fold_sum>>"),
     cst_src_heap_ml$1=caml_new_string("src/heap.ml"),
     cst_Int_list_sum_heap_iter_sum=
      caml_new_string(": <<Int.(=) list_sum heap_iter_sum>>"),
     cst_Heap_top_exn_called_on_an_empty_heap=
      caml_new_string("Heap.top_exn called on an empty heap"),
     cst_core_kernel$497=caml_new_string("core_kernel"),
     cst_src_heap_ml=caml_new_string("src/heap.ml"),
     cst$282=caml_new_string(""),
     cst_core_kernel$498=caml_new_string("core_kernel"),
     cst_src_heap_ml$2=caml_new_string("src/heap.ml"),
     cst$283=caml_new_string(""),
     cst_src_heap_ml$4=caml_new_string("src/heap.ml"),
     cst$284=caml_new_string(""),
     cst_src_heap_ml$5=caml_new_string("src/heap.ml"),
     cst_test_copy_add_removable_remove=
      caml_new_string(": <<test_copy ~add_removable ~remove>>"),
     cst_src_heap_ml$6=caml_new_string("src/heap.ml"),
     cst_test_copy_add_removable_Unsafe_add_removable=
      caml_new_string
       (": <<test_copy ~add_removable:Unsafe.add_removable[...]>>"),
     cst_src_heap_ml$7=caml_new_string("src/heap.ml"),
     cst_test_removal_add_removable_remove_elt_va=
      caml_new_string
       (": <<test_removal ~add_removable ~remove   ~elt_va[...]>>"),
     cst_src_heap_ml$8=caml_new_string("src/heap.ml"),
     cst_test_removal_add_removable_Unsafe_add_remova=
      caml_new_string
       (": <<test_removal ~add_removable:Unsafe.add_remova[...]>>"),
     cst_src_heap_ml$9=caml_new_string("src/heap.ml"),
     cst_test_ordering=caml_new_string(": <<test_ordering ()>>"),
     cst_src_heap_ml$10=caml_new_string("src/heap.ml"),
     cst_ignore_of_array_cmp_Int_compare=
      caml_new_string(": <<ignore (of_array [||] ~cmp:Int.compare)>>"),
     cst_src_heap_ml$11=caml_new_string("src/heap.ml"),
     cst_operations_on_removed_elements=
      caml_new_string(": operations on removed elements"),
     cst_core_kernel$499=caml_new_string("core_kernel"),
     cst_Core_kernel_Hash_heap_Make_Key_Key_already_present=
      caml_new_string("Core_kernel__Hash_heap.Make(Key).Key_already_present"),
     cst_Core_kernel_Hash_heap_Make_Key_Key_not_found=
      caml_new_string("Core_kernel__Hash_heap.Make(Key).Key_not_found"),
     cst_core_kernel$500=caml_new_string("core_kernel"),
     cst_src_hash_heap_ml=caml_new_string("src/hash_heap.ml"),
     cst$285=caml_new_string(""),
     cst_core_kernel$501=caml_new_string("core_kernel"),
     cst_core_kernel$502=caml_new_string("core_kernel"),
     cst_src_host_and_port_ml$0=caml_new_string("src/host_and_port.ml"),
     cst_src_host_and_port_ml_Stable_V1_Serializable_t=
      caml_new_string("src/host_and_port.ml.Stable.V1.Serializable.t"),
     cst_core_kernel$503=caml_new_string("core_kernel"),
     cst_src_host_and_port_ml=caml_new_string("src/host_and_port.ml"),
     cst$286=caml_new_string(""),
     cst_core_kernel$504=caml_new_string("core_kernel"),
     tp_loc$46=
      caml_new_string("src/host_and_port.ml.Stable.V1.Serializable.t"),
     cst_t$227=caml_new_string("t"),
     cst_src_host_and_port_ml_8_6=caml_new_string("src/host_and_port.ml:8:6"),
     cst_t$228=caml_new_string("t"),
     cst_src_host_and_port_ml$1=caml_new_string("src/host_and_port.ml"),
     cst_src_host_and_port_ml$2=caml_new_string("src/host_and_port.ml"),
     cst_src_host_and_port_ml$3=caml_new_string("src/host_and_port.ml"),
     cst_src_host_and_port_ml$4=caml_new_string("src/host_and_port.ml"),
     cst_ac83fbfcde6c83663161ac4adc05ff5f=
      caml_new_string("ac83fbfcde6c83663161ac4adc05ff5f"),
     module_name$16=caml_new_string("Core_kernel.Host_and_port"),
     cst_Host_and_port=caml_new_string("Host_and_port"),
     cst_core_kernel$505=caml_new_string("core_kernel"),
     cst_core_kernel$506=caml_new_string("core_kernel"),
     cst_src_optional_syntax_intf_ml=
      caml_new_string("src/optional_syntax_intf.ml"),
     cst$287=caml_new_string(""),
     cst_core_kernel$507=caml_new_string("core_kernel"),
     cst_core_kernel$508=caml_new_string("core_kernel"),
     cst_core_kernel$509=caml_new_string("core_kernel"),
     cst_src_optional_syntax_ml=caml_new_string("src/optional_syntax.ml"),
     cst$288=caml_new_string(""),
     cst_core_kernel$510=caml_new_string("core_kernel"),
     cst_core_kernel$511=caml_new_string("core_kernel"),
     cst_core_kernel$512=caml_new_string("core_kernel"),
     cst_src_immediate_option_intf_ml=
      caml_new_string("src/immediate_option_intf.ml"),
     cst$289=caml_new_string(""),
     cst_core_kernel$513=caml_new_string("core_kernel"),
     cst_core_kernel$514=caml_new_string("core_kernel"),
     cst_core_kernel$515=caml_new_string("core_kernel"),
     cst_src_immediate_option_ml=caml_new_string("src/immediate_option.ml"),
     cst$290=caml_new_string(""),
     cst_core_kernel$516=caml_new_string("core_kernel"),
     cst_core_kernel$517=caml_new_string("core_kernel"),
     cst_core_kernel$518=caml_new_string("core_kernel"),
     cst_src_int_set_ml=caml_new_string("src/int_set.ml"),
     cst$291=caml_new_string(""),
     cst_core_kernel$519=caml_new_string("core_kernel"),
     cst_core_kernel$520=caml_new_string("core_kernel"),
     cst_Moption_get_some_exn=caml_new_string("Moption.get_some_exn"),
     cst_core_kernel$521=caml_new_string("core_kernel"),
     cst_src_moption_ml=caml_new_string("src/moption.ml"),
     cst$292=caml_new_string(""),
     cst_core_kernel$522=caml_new_string("core_kernel"),
     cst_core_kernel$523=caml_new_string("core_kernel"),
     cst_return_to_hopper_passed_a_negative_amount_Int=
      caml_new_string("return_to_hopper passed a negative amount (%{Int})"),
     cst_return_to_hopper_passed_a_negative_amount=
      caml_new_string("return_to_hopper passed a negative amount ("),
     cst_return_to_hopper_passed_an_amount_Int_in_flight_Int=
      caml_new_string
       ("return_to_hopper passed an amount (%{Int}) > in_flight (%{Int})"),
     cst_in_flight$0=caml_new_string(") > in_flight ("),
     cst_return_to_hopper_passed_an_amount=
      caml_new_string("return_to_hopper passed an amount ("),
     cst_amount_in_bucket_Int_cannot_be_greater_than_bucket_limit_Int=
      caml_new_string
       ("amount in_bucket (%{Int}) cannot be greater than bucket_limit (%{Int})"),
     cst_cannot_be_greater_than_bucket_limit=
      caml_new_string(") cannot be greater than bucket_limit ("),
     cst_amount_in_bucket=caml_new_string("amount in_bucket ("),
     cst_bucket_limit_burst_size_Int_must_be_0=
      caml_new_string("bucket_limit (burst_size) (%{Int}) must be > 0"),
     cst_bucket_limit_burst_size=
      caml_new_string("bucket_limit (burst_size) ("),
     cst_in_bucket_Int_must_be_0=
      caml_new_string("in_bucket (%{Int}) must be >= 0."),
     cst_in_bucket=caml_new_string("in_bucket ("),
     cst_in_hopper_Int_must_be_0=
      caml_new_string("in_hopper (%{Int}) must be >= 0."),
     cst_in_hopper=caml_new_string("in_hopper ("),
     cst_in_flight_Int_must_be_0=
      caml_new_string("in_flight (%{Int}) must be >= 0."),
     cst_in_flight=caml_new_string("in_flight ("),
     cst_hopper_to_bucket_rate_per_sec_can_only_be_infinite_if_time_in_token_space_is_infinite=
      caml_new_string
       ("hopper_to_bucket_rate_per_sec can only be infinite if time_in_token_space is infinite"),
     cst_hopper_to_bucket_rate_per_ns_must_be_0=
      caml_new_string("hopper_to_bucket_rate_per_ns must be >= 0"),
     cst_src_limiter_ml_Infinite_or_finite_T_t=
      caml_new_string("src/limiter.ml.Infinite_or_finite.T.t"),
     cst_t$230=caml_new_string("t"),
     cst_Finite=caml_new_string("Finite"),
     cst_Infinite=caml_new_string("Infinite"),
     cst_finite=caml_new_string("finite"),
     cst_infinite=caml_new_string("infinite"),
     cst_Finite$0=caml_new_string("Finite"),
     cst_Infinite$0=caml_new_string("Infinite"),
     cst_finite$0=caml_new_string("finite"),
     cst_infinite$0=caml_new_string("infinite"),
     cst_core_kernel$524=caml_new_string("core_kernel"),
     cst_src_limiter_ml=caml_new_string("src/limiter.ml"),
     cst$293=caml_new_string(""),
     cst_core_kernel$525=caml_new_string("core_kernel"),
     tp_loc$47=caml_new_string("src/limiter.ml.Infinite_or_finite.T.t"),
     cst_a$95=caml_new_string("a"),
     cst_src_limiter_ml_8_18=caml_new_string("src/limiter.ml:8:18"),
     cst_Finite$1=caml_new_string("Finite"),
     cst_a$96=caml_new_string("a"),
     cst_t$229=caml_new_string("t"),
     cst_src_limiter_ml_6_4=caml_new_string("src/limiter.ml:6:4"),
     cst_core_kernel$526=caml_new_string("core_kernel"),
     cst_el$20=caml_new_string("el"),
     cst_core_kernel$527=caml_new_string("core_kernel"),
     cst_src_linked_queue_ml=caml_new_string("src/linked_queue.ml"),
     cst$294=caml_new_string(""),
     cst_core_kernel$528=caml_new_string("core_kernel"),
     cst_a$97=caml_new_string("a"),
     cst_src_linked_queue_ml_13_17=
      caml_new_string("src/linked_queue.ml:13:17"),
     cst_a$98=caml_new_string("a"),
     cst_el$19=caml_new_string("el"),
     cst_src_linked_queue_ml_13_4=caml_new_string("src/linked_queue.ml:13:4"),
     cst_800df9a0_4992_11e6_881d_ffe1a5c8aced=
      caml_new_string("800df9a0-4992-11e6-881d-ffe1a5c8aced"),
     module_name$17=[0,caml_new_string("Core_kernel.Linked_queue")],
     cst_core_kernel$529=caml_new_string("core_kernel"),
     cst_Linked_stack_invariant_failed=
      caml_new_string("Linked_stack.invariant failed"),
     cst_src_linked_stack_ml_t=caml_new_string("src/linked_stack.ml.t"),
     cst_t$232=caml_new_string("t"),
     cst_core_kernel$530=caml_new_string("core_kernel"),
     cst_src_linked_stack_ml=caml_new_string("src/linked_stack.ml"),
     cst$295=caml_new_string(""),
     cst_core_kernel$531=caml_new_string("core_kernel"),
     cst_length$3=caml_new_string("length"),
     cst_a$99=caml_new_string("a"),
     cst_src_linked_stack_ml_5_19=caml_new_string("src/linked_stack.ml:5:19"),
     cst_elts=caml_new_string("elts"),
     cst_a$100=caml_new_string("a"),
     cst_t$231=caml_new_string("t"),
     cst_src_linked_stack_ml_4_0=caml_new_string("src/linked_stack.ml:4:0"),
     cst_length$4=caml_new_string("length"),
     cst_elts$0=caml_new_string("elts"),
     cst_Stack_pop_of_empty_stack=caml_new_string("Stack.pop of empty stack"),
     cst_Stack_top_of_empty_stack=caml_new_string("Stack.top of empty stack"),
     cst_core_kernel$532=caml_new_string("core_kernel"),
     cst_core_kernel$533=caml_new_string("core_kernel"),
     cst_src_no_polymorphic_compare_ml=
      caml_new_string("src/no_polymorphic_compare.ml"),
     cst$296=caml_new_string(""),
     cst_core_kernel$534=caml_new_string("core_kernel"),
     cst_core_kernel$535=caml_new_string("core_kernel"),
     cst_core_kernel$536=caml_new_string("core_kernel"),
     cst_src_only_in_test_ml=caml_new_string("src/only_in_test.ml"),
     cst$297=caml_new_string(""),
     cst_core_kernel$537=caml_new_string("core_kernel"),
     cst_core_kernel$538=caml_new_string("core_kernel"),
     cst_core_kernel$539=caml_new_string("core_kernel"),
     cst_src_pid_ml=caml_new_string("src/pid.ml"),
     cst$298=caml_new_string(""),
     cst_core_kernel$540=caml_new_string("core_kernel"),
     cst_Core_kernel_Pid_Stable_V1_Without_containers_Pid_must_be_positive=
      caml_new_string
       ("Core_kernel__Pid.Stable.V1.Without_containers.Pid_must_be_positive"),
     cst_t$233=caml_new_string("t"),
     cst_src_pid_ml_47_4=caml_new_string("src/pid.ml:47:4"),
     cst_t$234=caml_new_string("t"),
     module_name$18=caml_new_string("Core_kernel.Pid"),
     cst_core_kernel$541=caml_new_string("core_kernel"),
     cst_Pooled_hashtbl_bin_read_t_duplicate_key$0=
      caml_new_string("Pooled_hashtbl.bin_read_t: duplicate key"),
     cst_el$24=caml_new_string("el"),
     cst_a$103=caml_new_string("a"),
     cst_src_pooled_hashtbl_ml_1109_27=
      caml_new_string("src/pooled_hashtbl.ml:1109:27"),
     cst_a$104=caml_new_string("a"),
     cst_el$23=caml_new_string("el"),
     cst_src_pooled_hashtbl_ml_1109_6=
      caml_new_string("src/pooled_hashtbl.ml:1109:6"),
     cst_aa942e1a_4992_11e6_8f73_876922b0953c=
      caml_new_string("aa942e1a-4992-11e6-8f73-876922b0953c"),
     module_name$20=[0,caml_new_string("Pooled_hashtbl")],
     cst_Pooled_hashtbl_bin_read_t_duplicate_key=
      caml_new_string("Pooled_hashtbl.bin_read_t_: duplicate key"),
     cst_el$22=caml_new_string("el"),
     tp_loc$48=
      caml_new_string
       ("src/pooled_hashtbl.ml.Creators line 1003: (k * d) list"),
     cst_Pooled_hashtbl_merge_different_hashable_values=
      caml_new_string("Pooled_hashtbl.merge: different 'hashable' values"),
     cst_Pooled_hashtbl_create_with_key_duplicate_keys=
      caml_new_string("Pooled_hashtbl.create_with_key: duplicate keys"),
     cst_Pooled_hashtbl_of_alist_exn_duplicate_key=
      caml_new_string("Pooled_hashtbl.of_alist_exn: duplicate key"),
     cst_Pooled_hashtbl_add_exn_got_key_already_present=
      caml_new_string("Pooled_hashtbl.add_exn got key already present"),
     cst_Hashtbl_mutation_not_allowed_during_iteration=
      caml_new_string("Hashtbl: mutation not allowed during iteration"),
     cst_core_kernel$542=caml_new_string("core_kernel"),
     cst_src_pooled_hashtbl_ml=caml_new_string("src/pooled_hashtbl.ml"),
     cst$299=caml_new_string(""),
     cst_core_kernel$543=caml_new_string("core_kernel"),
     cst_b$15=caml_new_string("b"),
     cst_src_pooled_hashtbl_ml_1054_30=
      caml_new_string("src/pooled_hashtbl.ml:1054:30"),
     cst_a$101=caml_new_string("a"),
     cst_src_pooled_hashtbl_ml_1054_25=
      caml_new_string("src/pooled_hashtbl.ml:1054:25"),
     cst_b$16=caml_new_string("b"),
     cst_a$102=caml_new_string("a"),
     cst_el$21=caml_new_string("el"),
     cst_src_pooled_hashtbl_ml_1054_6=
      caml_new_string("src/pooled_hashtbl.ml:1054:6"),
     cst_a9b0d5e8_4992_11e6_a717_dfe192342aee=
      caml_new_string("a9b0d5e8-4992-11e6-a717-dfe192342aee"),
     module_name$19=[0,caml_new_string("Pooled_hashtbl")],
     cst_core_kernel$544=caml_new_string("core_kernel"),
     cst_core_kernel$545=caml_new_string("core_kernel"),
     cst_src_printexc_ml=caml_new_string("src/printexc.ml"),
     cst$300=caml_new_string(""),
     cst_core_kernel$546=caml_new_string("core_kernel"),
     cst_core_kernel$547=caml_new_string("core_kernel"),
     cst_0$1=caml_new_string("0"),
     pos$137=caml_new_string("src/rope.ml:117:17"),
     expect$43=caml_new_string("0102010301020104010201030102010"),
     pos$136=caml_new_string("src/rope.ml:109:33"),
     cst_efg=caml_new_string("efg"),
     cst_cd=caml_new_string("cd"),
     cst_ab=caml_new_string("ab"),
     expect$42=caml_new_string("abcdefg"),
     pos$135=caml_new_string("src/rope.ml:108:33"),
     cst_x$9=caml_new_string("x"),
     expect$41=caml_new_string("x"),
     pos$134=caml_new_string("src/rope.ml:107:33"),
     cst$306=caml_new_string(""),
     expect$40=caml_new_string(""),
     pos$133=caml_new_string("src/rope.ml:100:17"),
     cst_x$8=caml_new_string("x"),
     cst$305=caml_new_string(""),
     pos$132=caml_new_string("src/rope.ml:96:17"),
     cst_jkl=caml_new_string("jkl"),
     cst_ghi=caml_new_string("ghi"),
     cst_def=caml_new_string("def"),
     cst_abc=caml_new_string("abc"),
     expect$39=caml_new_string("abcdefghijkl"),
     pos$131=caml_new_string("src/rope.ml:72:17"),
     pos$130=caml_new_string("src/rope.ml:69:17"),
     cst$303=caml_new_string(", "),
     expect$37=caml_new_string(""),
     cst_three=caml_new_string("three"),
     cst_two=caml_new_string("two"),
     cst_one=caml_new_string("one"),
     cst$304=caml_new_string(", "),
     expect$38=caml_new_string("one, two, three"),
     cst_x$7=caml_new_string("x"),
     cst_Rope_a_b_would_be_longer_than_String_max_length=
      caml_new_string("Rope.(a ^ b) would be longer than String.max_length"),
     cst_non_empty=caml_new_string("non-empty"),
     cst_core_kernel$548=caml_new_string("core_kernel"),
     cst_src_rope_ml=caml_new_string("src/rope.ml"),
     cst$301=caml_new_string(""),
     cst_core_kernel$549=caml_new_string("core_kernel"),
     cst$302=caml_new_string(""),
     cst_src_rope_ml$0=caml_new_string("src/rope.ml"),
     cst_is_empty_empty$0=caml_new_string(": <<is_empty empty>>"),
     cst_src_rope_ml$1=caml_new_string("src/rope.ml"),
     cst_not_is_empty_of_string_non_empty=
      caml_new_string(': <<not (is_empty (of_string "non-empty"))>>'),
     cst_src_rope_ml$2=caml_new_string("src/rope.ml"),
     cst_length_overflow=caml_new_string(": length overflow"),
     cst_src_rope_ml$3=caml_new_string("src/rope.ml"),
     cst_test_result_string_expect_conca=
      caml_new_string
       (': <<([%test_result :string]) ~expect:""   ((conca[...]>>'),
     cst_src_rope_ml$4=caml_new_string("src/rope.ml"),
     cst_add_to_buffer_r_buffer_test_result_Strin=
      caml_new_string
       (": <<add_to_buffer r buffer; ([%test_result :Strin[...]>>"),
     cst_src_rope_ml$5=caml_new_string("src/rope.ml"),
     cst_no_stack_overflow=caml_new_string(": no stack overflow"),
     cst_src_rope_ml$6=caml_new_string("src/rope.ml"),
     cst_test_result_string_to_string_of_strin=
      caml_new_string
       (": <<([%test_result :string]) (to_string (of_strin[...]>>"),
     cst_src_rope_ml$7=caml_new_string("src/rope.ml"),
     cst_test_result_string_to_string_of_strin$0=
      caml_new_string
       (": <<([%test_result :string]) (to_string (of_strin[...]>>"),
     cst_src_rope_ml$8=caml_new_string("src/rope.ml"),
     cst_test_result_string_to_string_of_st=
      caml_new_string
       (": <<([%test_result :string])   (to_string ((of_st[...]>>"),
     cst_src_rope_ml$9=caml_new_string("src/rope.ml"),
     cst_test_result_string_to_string_go_4=
      caml_new_string
       (": <<([%test_result :string]) (to_string (go 4))  [...]>>"),
     cst_core_kernel$550=caml_new_string("core_kernel"),
     cst_Set_once_get_exn_unset=caml_new_string("[Set_once.get_exn] unset"),
     cst_Set_once_set_exn_already_set=
      caml_new_string("[Set_once.set_exn] already set"),
     cst_unset=caml_new_string("unset"),
     cst_t$236=caml_new_string("t"),
     cst_core_kernel$551=caml_new_string("core_kernel"),
     cst_src_set_once_ml=caml_new_string("src/set_once.ml"),
     cst$307=caml_new_string(""),
     cst_core_kernel$552=caml_new_string("core_kernel"),
     cst_a$105=caml_new_string("a"),
     cst_src_set_once_ml_14_18=caml_new_string("src/set_once.ml:14:18"),
     cst_a$106=caml_new_string("a"),
     cst_t$235=caml_new_string("t"),
     cst_src_set_once_ml_14_6=caml_new_string("src/set_once.ml:14:6"),
     cst_core_kernel$553=caml_new_string("core_kernel"),
     cst_Stack_invariant_failed=caml_new_string("Stack.invariant failed"),
     cst_core_kernel$554=caml_new_string("core_kernel"),
     cst_src_stack_ml=caml_new_string("src/stack.ml"),
     cst$308=caml_new_string(""),
     cst_core_kernel$555=caml_new_string("core_kernel"),
     cst_elts$1=caml_new_string("elts"),
     cst_length$5=caml_new_string("length"),
     cst_Stack_pop_of_empty_stack$0=
      caml_new_string("Stack.pop of empty stack"),
     cst_Stack_top_of_empty_stack$0=
      caml_new_string("Stack.top of empty stack"),
     cst_core_kernel$556=caml_new_string("core_kernel"),
     cst_core_kernel$557=caml_new_string("core_kernel"),
     cst_src_stack_intf_ml=caml_new_string("src/stack_intf.ml"),
     cst$309=caml_new_string(""),
     cst_core_kernel$558=caml_new_string("core_kernel"),
     cst_core_kernel$559=caml_new_string("core_kernel"),
     cst_core_kernel$560=caml_new_string("core_kernel"),
     cst_src_std_kernel_ml=caml_new_string("src/std_kernel.ml"),
     cst$310=caml_new_string(""),
     cst_core_kernel$561=caml_new_string("core_kernel"),
     cst_core_kernel$562=caml_new_string("core_kernel"),
     cst_core_kernel$563=caml_new_string("core_kernel"),
     cst_src_make_stable_ml=caml_new_string("src/make_stable.ml"),
     cst$311=caml_new_string(""),
     cst_core_kernel$564=caml_new_string("core_kernel"),
     cst_core_kernel$565=caml_new_string("core_kernel"),
     cst_core_kernel$566=caml_new_string("core_kernel"),
     cst_src_stable_ml=caml_new_string("src/stable.ml"),
     cst$312=caml_new_string(""),
     cst_core_kernel$567=caml_new_string("core_kernel"),
     cst_src_stable_ml$0=caml_new_string("src/stable.ml"),
     cst_Result_V1=caml_new_string(": Result.V1"),
     cst_core_kernel$568=caml_new_string("core_kernel"),
     cst_core_kernel$569=caml_new_string("core_kernel"),
     cst_src_queue_intf_ml=caml_new_string("src/queue_intf.ml"),
     cst$313=caml_new_string(""),
     cst_core_kernel$570=caml_new_string("core_kernel"),
     cst_core_kernel$571=caml_new_string("core_kernel"),
     cst_core_kernel$572=caml_new_string("core_kernel"),
     cst_src_int_replace_polymorphic_compare_ml=
      caml_new_string("src/int_replace_polymorphic_compare.ml"),
     cst$314=caml_new_string(""),
     cst_core_kernel$573=caml_new_string("core_kernel"),
     cst_core_kernel$574=caml_new_string("core_kernel"),
     cst_core_kernel$575=caml_new_string("core_kernel"),
     cst_src_bigbuffer_internal_ml=
      caml_new_string("src/bigbuffer_internal.ml"),
     cst$315=caml_new_string(""),
     cst_core_kernel$576=caml_new_string("core_kernel"),
     cst_core_kernel$577=caml_new_string("core_kernel"),
     cst_Bigbuffer_add_subbytes=caml_new_string("Bigbuffer.add_subbytes"),
     cst_Bigbuffer_add_substring=caml_new_string("Bigbuffer.add_substring"),
     cst_Bigbuffer_nth=caml_new_string("Bigbuffer.nth"),
     cst_core_kernel$578=caml_new_string("core_kernel"),
     cst_src_bigbuffer_ml=caml_new_string("src/bigbuffer.ml"),
     cst$316=caml_new_string(""),
     cst_core_kernel$579=caml_new_string("core_kernel"),
     cst_core_kernel$580=caml_new_string("core_kernel"),
     cst_Bigstring_skip_pos_0=caml_new_string("Bigstring.skip: pos < 0"),
     cst_Bigstring_skip_pos_len_header=
      caml_new_string("Bigstring.skip: pos > len - header"),
     cst_Bigstring_skip_pos_block_len_len=
      caml_new_string("Bigstring.skip: pos + block_len > len"),
     cst_Bigstring_unmarshal_pos_0=
      caml_new_string("Bigstring.unmarshal: pos < 0"),
     cst_Bigstring_unmarshal_pos_len_header=
      caml_new_string("Bigstring.unmarshal: pos > len - header"),
     cst_Bigstring_unmarshal_pos_block_len_len=
      caml_new_string("Bigstring.unmarshal: pos + block_len > len"),
     cst_Bigstring_marshal_data_size=
      caml_new_string("Bigstring.marshal_data_size"),
     cst_marshal=caml_new_string("marshal"),
     cst_core_kernel$581=caml_new_string("core_kernel"),
     cst_src_bigstring_marshal_ml=caml_new_string("src/bigstring_marshal.ml"),
     cst$317=caml_new_string(""),
     cst_core_kernel$582=caml_new_string("core_kernel"),
     cst_core_kernel$583=caml_new_string("core_kernel"),
     cst_Expected_fold_to_stop_early=
      caml_new_string("Expected fold to stop early"),
     cst_src_container_unit_tests_ml$0=
      caml_new_string("src/container_unit_tests.ml"),
     cst_List_iter_0_1_2_3_4_8_1024_f_fun=
      caml_new_string
       (": <<List.iter [0; 1; 2; 3; 4; 8; 1024]   ~f:(fun [...]>>"),
     cst_src_container_unit_tests_ml$1=
      caml_new_string("src/container_unit_tests.ml"),
     cst_List_iter_true_false_fals=
      caml_new_string
       (": <<List.iter   [[];   [true];   [false];   [fals[...]>>"),
     cst_core_kernel$584=caml_new_string("core_kernel"),
     cst_src_container_unit_tests_ml=
      caml_new_string("src/container_unit_tests.ml"),
     cst$318=caml_new_string(""),
     cst_core_kernel$585=caml_new_string("core_kernel"),
     cst_core_kernel$586=caml_new_string("core_kernel"),
     cst_core_kernel$587=caml_new_string("core_kernel"),
     cst_src_core_kernel_ml=caml_new_string("src/core_kernel.ml"),
     cst$319=caml_new_string(""),
     cst_core_kernel$588=caml_new_string("core_kernel"),
     cst_core_kernel$589=caml_new_string("core_kernel"),
     cst_core_kernel$590=caml_new_string("core_kernel"),
     cst_src_constrained_float_ml=caml_new_string("src/constrained_float.ml"),
     cst$320=caml_new_string(""),
     cst_core_kernel$591=caml_new_string("core_kernel"),
     cst_core_kernel$592=caml_new_string("core_kernel"),
     Bin_prot_Common=global_data.Bin_prot__Common,
     Bin_shape_lib_Bin_shape=global_data.Bin_shape_lib__Bin_shape,
     Bin_prot_Shape=global_data.Bin_prot__Shape,
     Ppx_bench_lib_Benchmark_accumulator=
      global_data.Ppx_bench_lib__Benchmark_accumulator,
     Expect_test_collector=global_data.Expect_test_collector,
     Ppx_inline_test_lib_Runtime=global_data.Ppx_inline_test_lib__Runtime,
     Base=global_data.Base,
     Stdio=global_data.Stdio,
     Base_for_tests=global_data.Base_for_tests,
     Bin_prot_Std=global_data.Bin_prot__Std,
     Sexplib_Conv=global_data.Sexplib__Conv,
     Typerep_lib_Make_typename=global_data.Typerep_lib__Make_typename,
     Typerep_lib_Std=global_data.Typerep_lib__Std,
     Base_With_return=global_data.Base__With_return,
     Not_found=global_data.Not_found,
     include$1=global_data.Base__Sexpable,
     Bin_prot_Write=global_data.Bin_prot__Write,
     Assert_failure=global_data.Assert_failure,
     Bigarray=global_data.Bigarray,
     Sexplib0_Sexp_conv=global_data.Sexplib0__Sexp_conv,
     Bin_prot_Utils=global_data.Bin_prot__Utils,
     Bin_prot_Read=global_data.Bin_prot__Read,
     include$2=global_data.Bin_prot__Binable,
     Stdlib=global_data.Stdlib,
     include$4=global_data.Base__Printf,
     Stdio_Out_channel=global_data.Stdio__Out_channel,
     Base_Hash=global_data.Base__Hash,
     Sexplib0_Sexp_conv_error=global_data.Sexplib0__Sexp_conv_error,
     Ppx_compare_lib=global_data.Ppx_compare_lib,
     include$5=global_data.Base__Binary_searchable,
     include$6=global_data.Base__Blit,
     include$7=global_data.Base__Comparator,
     include$8=global_data.Base__Result,
     include$9=global_data.Base__Container,
     Base_Fn=global_data.Base__Fn,
     include$10=global_data.Base__Ordered_collection_common,
     Ppx_assert_lib_Runtime=global_data.Ppx_assert_lib__Runtime,
     Base_Int=global_data.Base__Int,
     Base_List=global_data.Base__List,
     Base_Random=global_data.Base__Random,
     include$11=global_data.Base__Option,
     Inline_test_config=global_data.Inline_test_config,
     Base_Sequence=global_data.Base__Sequence,
     include$12=global_data.Base__Array,
     Base_Comparable=global_data.Base__Comparable,
     Base_for_tests_Test_blit=global_data.Base_for_tests__Test_blit,
     Base_Float=global_data.Base__Float,
     Stdlib_sys=global_data.Stdlib__sys,
     Base_Source_code_position=global_data.Base__Source_code_position,
     include$16=global_data.Sexplib__Sexp,
     Base_Exn=global_data.Base__Exn,
     Base_Info=global_data.Base__Info,
     Base_Error=global_data.Base__Error,
     include$20=global_data.Base__Or_error,
     Stdlib_set=global_data.Stdlib__set,
     CamlinternalLazy=global_data.CamlinternalLazy,
     Match_failure=global_data.Match_failure,
     Splittable_random=global_data.Splittable_random,
     Base_Staged=global_data.Base__Staged,
     include$21=global_data.Base__Char,
     Base_Bool=global_data.Base__Bool,
     Base_Monad=global_data.Base__Monad,
     Base_Applicative=global_data.Base__Applicative,
     Base_Word_size=global_data.Base__Word_size,
     Typerep_lib_Typename=global_data.Typerep_lib__Typename,
     include$26=global_data.Typerep_lib__Std_internal,
     include$27=global_data.Base__Either,
     include$29=global_data.Base__Hash_set,
     Base_Hashtbl=global_data.Base__Hashtbl,
     Base_Hashable=global_data.Base__Hashable,
     Base_Map=global_data.Base__Map,
     include$37=global_data.Base__Maybe_bound,
     Base_Set=global_data.Base__Set,
     Base_String=global_data.Base__String,
     Base_Pretty_printer=global_data.Base__Pretty_printer,
     Base_Int64=global_data.Base__Int64,
     Expect_test_common_File=global_data.Expect_test_common__File,
     Base_Int63_emul=global_data.Base__Int63_emul,
     Base_Int63=global_data.Base__Int63,
     Expect_test_config=global_data.Expect_test_config,
     include$56=global_data.Base__Unit,
     Base_Bytes=global_data.Base__Bytes,
     include$62=global_data.Stdlib__gc,
     Invalid_argument=global_data.Invalid_argument,
     Base_Heap_block=global_data.Base__Heap_block,
     Stdlib_weak=global_data.Stdlib__weak,
     Base_Field=global_data.Base__Field,
     Base_Sign=global_data.Base__Sign,
     Base_Int32=global_data.Base__Int32,
     Sexplib_Std=global_data.Sexplib__Std,
     include$75=global_data.Base__Lazy,
     Base_Nativeint=global_data.Base__Nativeint,
     Sexplib_Conv_error=global_data.Sexplib__Conv_error,
     include$80=global_data.Base__Ordering,
     include$81=global_data.Base__Ref,
     Caml=global_data.Caml,
     Stdlib_callback=global_data.Stdlib__callback,
     include$87=global_data.Bin_prot,
     Stdlib_digest=global_data.Stdlib__digest,
     Md5_lib=global_data.Md5_lib,
     Bin_prot_Md5=global_data.Bin_prot__Md5,
     Stdio_In_channel=global_data.Stdio__In_channel,
     Stdlib_buffer=global_data.Stdlib__buffer,
     include$95=global_data.Stdlib__arg,
     Base_Ppx_compare_lib=global_data.Base__Ppx_compare_lib,
     Base_Validate=global_data.Base__Validate,
     include$120=global_data.Base__Queue,
     Base_for_tests_Test_binary_searchable=
      global_data.Base_for_tests__Test_binary_searchable,
     Bin_prot_Blob=global_data.Bin_prot__Blob,
     Base_Type_equal=global_data.Base__Type_equal,
     Base_Invariant=global_data.Base__Invariant,
     include$128=global_data.Base__Uniform_array,
     Typerep_lib_Type_generic=global_data.Typerep_lib__Type_generic,
     Base_Backtrace=global_data.Base__Backtrace,
     Typerep_lib_Typerep_obj=global_data.Typerep_lib__Typerep_obj,
     Base_Obj_array=global_data.Base__Obj_array,
     Stdlib_int32=global_data.Stdlib__int32,
     Stdlib_int64=global_data.Stdlib__int64,
     include$138=global_data.Base__Option_array,
     Stdlib_ephemeron=global_data.Stdlib__ephemeron,
     Failure=global_data.Failure,
     Stdlib_obj=global_data.Stdlib__obj,
     include$149=global_data.Base__Linked_queue,
     Stdlib_printexc=global_data.Stdlib__printexc,
     Base_Import0=global_data.Base__Import0,
     Stdlib_format=global_data.Stdlib__format,
     Stdlib_marshal=global_data.Stdlib__marshal,
     Core_kernel=
      [0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0];
    caml_register_global(7286,Core_kernel,"Core_kernel__");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel);
    caml_call1(Expect_test_collector[4][1],cst_src_import_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$0,cst);
    var
     _a_=Base[194],
     _b_=_a_[1],
     _c_=_a_[2],
     _d_=_a_[3],
     _e_=_a_[4],
     _i_=_a_[8],
     sexp_of_t=_a_[14],
     _o_=_a_[15],
     _r_=_a_[18],
     _s_=_a_[19],
     _t_=_a_[20],
     hash_fold_t=_a_[21],
     _u_=_a_[22],
     t_of_sexp=_a_[23],
     sexp_of_t$0=_a_[24],
     _F_=_a_[35],
     _G_=_a_[36],
     _H_=_a_[37],
     _I_=_a_[38],
     _O_=_a_[44],
     _R_=_a_[47],
     _U_=_a_[50],
     _V_=_a_[51],
     _W_=_a_[52],
     _X_=_a_[53],
     _Y_=_a_[54],
     _Z_=_a_[55],
     _ae_=_a_[62],
     _af_=_a_[63],
     _ag_=_a_[64],
     _ah_=_a_[65],
     _ai_=_a_[66],
     _aj_=_a_[67],
     _ak_=_a_[68],
     _al_=_a_[69],
     _at_=_a_[77],
     _au_=_a_[78],
     _ax_=_a_[81],
     _az_=_a_[83],
     _aA_=_a_[84],
     _aB_=_a_[85],
     _aC_=_a_[86],
     _aD_=_a_[87],
     _aE_=_a_[88],
     _aF_=_a_[89],
     _aI_=_a_[92],
     _aK_=_a_[94],
     _aL_=_a_[95],
     _aM_=_a_[96],
     _aN_=_a_[97],
     _aO_=_a_[98],
     _aP_=_a_[99],
     _aR_=_a_[101],
     _aS_=_a_[102],
     _aT_=_a_[103],
     _aU_=_a_[104],
     _aV_=_a_[105],
     _aW_=_a_[106],
     _aX_=_a_[107],
     _aY_=_a_[108],
     _ba_=Bin_prot_Std[1],
     _bb_=Bin_prot_Std[2],
     bin_size_t=Bin_prot_Std[3],
     bin_size_t$0=Bin_prot_Std[4],
     _bc_=Bin_prot_Std[5],
     bin_size_t$1=Bin_prot_Std[6],
     bin_size_t$2=Bin_prot_Std[7],
     _bd_=Bin_prot_Std[8],
     _be_=Bin_prot_Std[9],
     _bf_=Bin_prot_Std[10],
     _bh_=Bin_prot_Std[12],
     _bi_=Bin_prot_Std[13],
     _bk_=Bin_prot_Std[15],
     _bn_=Bin_prot_Std[18],
     _bo_=Bin_prot_Std[19],
     bin_size_t$3=Bin_prot_Std[27],
     _bN_=Bin_prot_Std[45],
     _bP_=Bin_prot_Std[47],
     _bR_=Bin_prot_Std[49],
     _bS_=Bin_prot_Std[50],
     _bU_=Bin_prot_Std[52],
     _bW_=Bin_prot_Std[54],
     _bY_=Bin_prot_Std[56],
     _bZ_=Bin_prot_Std[57],
     _b1_=Bin_prot_Std[59],
     bin_write_t=Bin_prot_Std[61],
     bin_read_t=Bin_prot_Std[63],
     bin_read_t$0=Bin_prot_Std[64],
     _b5_=Bin_prot_Std[66],
     bin_write_t$0=Bin_prot_Std[68],
     bin_read_t$1=Bin_prot_Std[70],
     bin_read_t$2=Bin_prot_Std[71],
     _b9_=Bin_prot_Std[73],
     _b$_=Bin_prot_Std[75],
     _cb_=Bin_prot_Std[77],
     _cc_=Bin_prot_Std[78],
     _ce_=Bin_prot_Std[80],
     bin_write_t$1=Bin_prot_Std[82],
     bin_read_t$3=Bin_prot_Std[84],
     bin_read_t$4=Bin_prot_Std[85],
     _ci_=Bin_prot_Std[87],
     bin_write_t$2=Bin_prot_Std[89],
     bin_read_t$5=Bin_prot_Std[91],
     bin_read_t$6=Bin_prot_Std[92],
     _ct_=Bin_prot_Std[101],
     _cv_=Bin_prot_Std[103],
     _cx_=Bin_prot_Std[105],
     _cy_=Bin_prot_Std[106],
     _cA_=Bin_prot_Std[108],
     _cC_=Bin_prot_Std[110],
     _cE_=Bin_prot_Std[112],
     _cF_=Bin_prot_Std[113],
     _cH_=Bin_prot_Std[115],
     _cJ_=Bin_prot_Std[117],
     _cL_=Bin_prot_Std[119],
     _cM_=Bin_prot_Std[120],
     _cO_=Bin_prot_Std[122],
     _cQ_=Bin_prot_Std[124],
     _cS_=Bin_prot_Std[126],
     _cT_=Bin_prot_Std[127],
     _cV_=Bin_prot_Std[129],
     _cX_=Bin_prot_Std[131],
     _cZ_=Bin_prot_Std[133],
     _c0_=Bin_prot_Std[134],
     _c9_=Bin_prot_Std[143],
     _c$_=Bin_prot_Std[145],
     _db_=Bin_prot_Std[147],
     _dc_=Bin_prot_Std[148],
     _de_=Bin_prot_Std[150],
     _dg_=Bin_prot_Std[152],
     _di_=Bin_prot_Std[154],
     _dj_=Bin_prot_Std[155],
     _dl_=Bin_prot_Std[157],
     _dn_=Bin_prot_Std[159],
     _dp_=Bin_prot_Std[161],
     _dq_=Bin_prot_Std[162],
     _dz_=Bin_prot_Std[171],
     bin_write_t$3=Bin_prot_Std[173],
     bin_read_t$7=Bin_prot_Std[175],
     bin_read_t$8=Bin_prot_Std[176],
     include=
      [0,
       Sexplib_Conv[60],
       Sexplib_Conv[52],
       Sexplib_Conv[66],
       Sexplib_Conv[58],
       Sexplib_Conv[63],
       Sexplib_Conv[55],
       Sexplib_Conv[23],
       Sexplib_Conv[47],
       Sexplib_Conv[18],
       Sexplib_Conv[42],
       Sexplib_Conv[25],
       Sexplib_Conv[27],
       Sexplib_Conv[28]],
     _er_=include[12],
     _es_=include[13],
     _f_=_a_[5],
     _g_=_a_[6],
     _h_=_a_[7],
     _j_=_a_[9],
     _k_=_a_[10],
     _l_=_a_[11],
     _m_=_a_[12],
     _n_=_a_[13],
     _p_=_a_[16],
     _q_=_a_[17],
     _v_=_a_[25],
     _w_=_a_[26],
     _x_=_a_[27],
     _y_=_a_[28],
     _z_=_a_[29],
     _A_=_a_[30],
     _B_=_a_[31],
     _C_=_a_[32],
     _D_=_a_[33],
     _E_=_a_[34],
     _J_=_a_[39],
     _K_=_a_[40],
     _L_=_a_[41],
     _M_=_a_[42],
     _N_=_a_[43],
     _P_=_a_[45],
     _Q_=_a_[46],
     _S_=_a_[48],
     _T_=_a_[49],
     ___=_a_[56],
     _$_=_a_[57],
     _aa_=_a_[58],
     _ab_=_a_[59],
     _ac_=_a_[60],
     _ad_=_a_[61],
     _am_=_a_[70],
     _an_=_a_[71],
     _ao_=_a_[72],
     _ap_=_a_[73],
     _aq_=_a_[74],
     _ar_=_a_[75],
     _as_=_a_[76],
     _av_=_a_[79],
     _aw_=_a_[80],
     _ay_=_a_[82],
     _aG_=_a_[90],
     _aH_=_a_[91],
     _aJ_=_a_[93],
     _aQ_=_a_[100],
     _aZ_=Stdio[1],
     _a0_=Stdio[2],
     _a1_=Stdio[3],
     _a2_=Stdio[4],
     _a3_=Stdio[5],
     _a4_=Stdio[6],
     _a5_=Stdio[7],
     _a6_=Stdio[8],
     _a7_=Stdio[9],
     _a8_=Base_for_tests[1],
     _a9_=Base_for_tests[2],
     _a__=Base_for_tests[3],
     _a$_=Base_for_tests[4],
     _bg_=Bin_prot_Std[11],
     _bj_=Bin_prot_Std[14],
     _bl_=Bin_prot_Std[16],
     _bm_=Bin_prot_Std[17],
     _bp_=Bin_prot_Std[20],
     _bq_=Bin_prot_Std[21],
     _br_=Bin_prot_Std[22],
     _bs_=Bin_prot_Std[23],
     _bt_=Bin_prot_Std[24],
     _bu_=Bin_prot_Std[25],
     _bv_=Bin_prot_Std[26],
     _bw_=Bin_prot_Std[28],
     _bx_=Bin_prot_Std[29],
     _by_=Bin_prot_Std[30],
     _bz_=Bin_prot_Std[31],
     _bA_=Bin_prot_Std[32],
     _bB_=Bin_prot_Std[33],
     _bC_=Bin_prot_Std[34],
     _bD_=Bin_prot_Std[35],
     _bE_=Bin_prot_Std[36],
     _bF_=Bin_prot_Std[37],
     _bG_=Bin_prot_Std[38],
     _bH_=Bin_prot_Std[39],
     _bI_=Bin_prot_Std[40],
     _bJ_=Bin_prot_Std[41],
     _bK_=Bin_prot_Std[42],
     _bL_=Bin_prot_Std[43],
     _bM_=Bin_prot_Std[44],
     _bO_=Bin_prot_Std[46],
     _bQ_=Bin_prot_Std[48],
     _bT_=Bin_prot_Std[51],
     _bV_=Bin_prot_Std[53],
     _bX_=Bin_prot_Std[55],
     _b0_=Bin_prot_Std[58],
     _b2_=Bin_prot_Std[60],
     _b3_=Bin_prot_Std[62],
     _b4_=Bin_prot_Std[65],
     _b6_=Bin_prot_Std[67],
     _b7_=Bin_prot_Std[69],
     _b8_=Bin_prot_Std[72],
     _b__=Bin_prot_Std[74],
     _ca_=Bin_prot_Std[76],
     _cd_=Bin_prot_Std[79],
     _cf_=Bin_prot_Std[81],
     _cg_=Bin_prot_Std[83],
     _ch_=Bin_prot_Std[86],
     _cj_=Bin_prot_Std[88],
     _ck_=Bin_prot_Std[90],
     _cl_=Bin_prot_Std[93],
     _cm_=Bin_prot_Std[94],
     _cn_=Bin_prot_Std[95],
     _co_=Bin_prot_Std[96],
     _cp_=Bin_prot_Std[97],
     _cq_=Bin_prot_Std[98],
     _cr_=Bin_prot_Std[99],
     _cs_=Bin_prot_Std[100],
     _cu_=Bin_prot_Std[102],
     _cw_=Bin_prot_Std[104],
     _cz_=Bin_prot_Std[107],
     _cB_=Bin_prot_Std[109],
     _cD_=Bin_prot_Std[111],
     _cG_=Bin_prot_Std[114],
     _cI_=Bin_prot_Std[116],
     _cK_=Bin_prot_Std[118],
     _cN_=Bin_prot_Std[121],
     _cP_=Bin_prot_Std[123],
     _cR_=Bin_prot_Std[125],
     _cU_=Bin_prot_Std[128],
     _cW_=Bin_prot_Std[130],
     _cY_=Bin_prot_Std[132],
     _c1_=Bin_prot_Std[135],
     _c2_=Bin_prot_Std[136],
     _c3_=Bin_prot_Std[137],
     _c4_=Bin_prot_Std[138],
     _c5_=Bin_prot_Std[139],
     _c6_=Bin_prot_Std[140],
     _c7_=Bin_prot_Std[141],
     _c8_=Bin_prot_Std[142],
     _c__=Bin_prot_Std[144],
     _da_=Bin_prot_Std[146],
     _dd_=Bin_prot_Std[149],
     _df_=Bin_prot_Std[151],
     _dh_=Bin_prot_Std[153],
     _dk_=Bin_prot_Std[156],
     _dm_=Bin_prot_Std[158],
     _do_=Bin_prot_Std[160],
     _dr_=Bin_prot_Std[163],
     _ds_=Bin_prot_Std[164],
     _dt_=Bin_prot_Std[165],
     _du_=Bin_prot_Std[166],
     _dv_=Bin_prot_Std[167],
     _dw_=Bin_prot_Std[168],
     _dx_=Bin_prot_Std[169],
     _dy_=Bin_prot_Std[170],
     _dA_=Bin_prot_Std[172],
     _dB_=Bin_prot_Std[174],
     _dC_=Bin_prot_Std[177],
     _dD_=Bin_prot_Std[178],
     _dE_=Bin_prot_Std[179],
     _dF_=Bin_prot_Std[180],
     _dG_=Bin_prot_Std[181],
     _dH_=Bin_prot_Std[182],
     _dI_=Bin_prot_Std[183],
     _dJ_=Bin_prot_Std[184],
     _dK_=Bin_prot_Std[185],
     _dL_=Bin_prot_Std[186],
     _dM_=Bin_prot_Std[187],
     _dN_=Bin_prot_Std[188],
     _dO_=Bin_prot_Std[189],
     _dP_=Bin_prot_Std[190],
     _dQ_=Bin_prot_Std[191],
     _dR_=Bin_prot_Std[192],
     _dS_=Bin_prot_Std[193],
     _dT_=Bin_prot_Std[194],
     _dU_=Bin_prot_Std[195],
     _dV_=Bin_prot_Std[196],
     _dW_=Bin_prot_Std[197],
     _dX_=Bin_prot_Std[198],
     _dY_=Bin_prot_Std[199],
     _dZ_=Bin_prot_Std[200],
     _d0_=Bin_prot_Std[201],
     _d1_=Bin_prot_Std[202],
     _d2_=Bin_prot_Std[203],
     _d3_=Bin_prot_Std[204],
     _d4_=Bin_prot_Std[205],
     _d5_=Bin_prot_Std[206],
     _d6_=Bin_prot_Std[207],
     _d7_=Bin_prot_Std[208],
     _d8_=Bin_prot_Std[209],
     _d9_=Bin_prot_Std[210],
     _d__=Bin_prot_Std[211],
     _d$_=Bin_prot_Std[212],
     _ea_=Bin_prot_Std[213],
     _eb_=Bin_prot_Std[214],
     _ec_=Bin_prot_Std[215],
     _ed_=Bin_prot_Std[216],
     _ee_=Bin_prot_Std[217],
     _ef_=Bin_prot_Std[218],
     _eg_=include[1],
     _eh_=include[2],
     _ei_=include[3],
     _ej_=include[4],
     _ek_=include[5],
     _el_=include[6],
     _em_=include[7],
     _en_=include[8],
     _eo_=include[9],
     _ep_=include[10],
     _eq_=include[11],
     _et_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a),
     _eu_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_import_ml_74_26),
     _ev_=caml_call2(Bin_prot_Shape[15],_eu_,_et_),
     _ew_=[0,caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$0),0],
     _ex_=
      [0,
       [0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_sexp_opaque),_ew_,_ev_],
       0],
     _ey_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_import_ml_74_4),
     group=caml_call2(Bin_prot_Shape[6],_ey_,_ex_),
     _ez_=[4,caml_new_string("src/import.ml.sexp_opaque")],
     _eH_=[0,caml_new_string("src/binable0.ml"),141,2],
     _eG_=[0,caml_new_string("src/binable0.ml"),117,2],
     _eE_=
      [0,
       caml_new_string("src/binable0.ml.Stable.Of_stringable.V1.Of_binable")],
     _eF_=[0,caml_new_string("src/binable0.ml"),95,18],
     _eD_=[0,caml_new_string("src/binable0.ml.Stable.Of_sexpable.V1.t")],
     _eS_=[0,[2,0,[12,10,[10,0]]],caml_new_string("%s\n%!")],
     _fT_=[4,caml_new_string("src/perms.ml.Only_used_as_phantom_type1.t")],
     _fS_=
      [0,
       [11,
        caml_new_string("Unexpectedly used "),
        [2,0,[11,caml_new_string(" bin_io deserialization"),0]]],
       caml_new_string("Unexpectedly used %s bin_io deserialization")],
     _fR_=
      [0,
       [11,
        caml_new_string("Unexpectedly used "),
        [2,0,[11,caml_new_string(" bin_io serialization"),0]]],
       caml_new_string("Unexpectedly used %s bin_io serialization")],
     _fQ_=
      [0,
       [11,
        caml_new_string("Unexpectedly called ["),
        [2,0,[11,caml_new_string(".hash_fold_t]"),0]]],
       caml_new_string("Unexpectedly called [%s.hash_fold_t]")],
     _fP_=
      [0,
       [11,
        caml_new_string("Unexpectedly called ["),
        [2,0,[11,caml_new_string(".compare]"),0]]],
       caml_new_string("Unexpectedly called [%s.compare]")],
     _fO_=
      [0,
       [11,
        caml_new_string("Unexpectedly called ["),
        [2,0,[11,caml_new_string(".t_of_sexp]"),0]]],
       caml_new_string("Unexpectedly called [%s.t_of_sexp]")],
     _fN_=
      [0,
       [11,
        caml_new_string("Unexpectedly called ["),
        [2,0,[11,caml_new_string(".sexp_of_t]"),0]]],
       caml_new_string("Unexpectedly called [%s.sexp_of_t]")],
     _fM_=[0,caml_new_string("Who_can_write")],
     _fp_=[0,caml_new_string("Who_can_write")],
     _fg_=[0,caml_new_string("Who_can_write")],
     _e$_=[0,caml_new_string("Read")],
     _e4_=[0,caml_new_string("src/perms.ml"),15,4],
     _e3_=[5,caml_new_string("src/perms.ml.Types.Me.t")],
     _eY_=[0,caml_new_string("src/perms.ml"),10,4],
     _eX_=[5,caml_new_string("src/perms.ml.Types.Nobody.t")],
     _gT_=[0,caml_new_string("Ok")],
     _gU_=[0,caml_new_string("Error")],
     _gS_=[0,caml_new_string("src/result.ml.Stable.V1.t")],
     _ie_=
      [0,
       [11,
        caml_new_string("top results differ ("),
        [2,0,[11,caml_new_string(", "),[2,0,[12,41,0]]]]],
       caml_new_string("top results differ (%s, %s)")],
     _id_=
      [0,
       [11,
        caml_new_string("pop results differ ("),
        [2,0,[11,caml_new_string(", "),[2,0,[12,41,0]]]]],
       caml_new_string("pop results differ (%s, %s)")],
     _ic_=
      [0,
       [11,
        caml_new_string("error in length: "),
        [4,
         3,
         0,
         0,
         [11,
          caml_new_string(" (for "),
          [2,
           0,
           [11,
            caml_new_string(") <> "),
            [4,3,0,0,[11,caml_new_string(" (for "),[2,0,[12,41,0]]]]]]]]],
       caml_new_string("error in length: %i (for %s) <> %i (for %s)")],
     _iy_=
      [0,caml_new_string("src/sequence.ml.Merge_with_duplicates_element.t")],
     _jj_=[0,caml_new_string("pos_cnum")],
     _jk_=[0,caml_new_string("pos_bol")],
     _jl_=[0,caml_new_string("pos_lnum")],
     _jm_=[0,caml_new_string("pos_fname")],
     _jM_=[0,caml_new_string("src/info.ml.Extend.Internal_repr.Stable.V2.t")],
     _jN_=[0,caml_new_string("Could_not_construct")],
     _jO_=[0,caml_new_string("String")],
     _jP_=[0,caml_new_string("Exn")],
     _jQ_=[0,caml_new_string("Sexp")],
     _jR_=[0,caml_new_string("Tag_sexp")],
     _jS_=[0,caml_new_string("Tag_t")],
     _jT_=[0,caml_new_string("Tag_arg")],
     _jU_=[0,caml_new_string("Of_list")],
     _jV_=[0,caml_new_string("With_backtrace")],
     _jL_=[0,caml_new_string("src/info.ml.Sexp.t")],
     _ny_=[0,caml_new_string("attempts")],
     _nu_=[0,caml_new_string("values")],
     _nv_=[0,caml_new_string("actual_count")],
     _nw_=[0,caml_new_string("expect_count")],
     _nx_=[0,caml_new_string("trials")],
     _nt_=[0,1],
     _nq_=[0,0],
     _nr_=[0,caml_new_string("error")],
     _ns_=[0,caml_new_string("value")],
     _np_=[0,0],
     _nm_=[0,caml_new_string("_")],
     _ni_=[0,caml_new_string("original_error")],
     _nj_=[0,caml_new_string("original_value")],
     _nk_=[0,caml_new_string("shrunk_error")],
     _nl_=[0,caml_new_string("shrunk_value")],
     _nn_=[0,caml_new_string("error")],
     _no_=[0,caml_new_string("value")],
     _nh_=[0,caml_new_string("src/quickcheck.ml"),1135,22],
     _m$_=[0,65,1],
     _na_=[0,66,0],
     _nb_=[0,67,1],
     _nc_=[0,68,1],
     _nd_=[0,69,1],
     _ne_=[0,70,1],
     _m6_=[0,65,1],
     _m7_=[0,66,0],
     _m8_=[0,67,1],
     _m9_=[0,68,1],
     _m__=[0,69,1],
     _m2_=[0,65,1],
     _m3_=[0,66,0],
     _m4_=[0,67,1],
     _m5_=[0,68,1],
     _mZ_=[0,65,1],
     _m0_=[0,66,0],
     _m1_=[0,67,1],
     _mX_=[0,65,1],
     _mY_=[0,66,0],
     _mR_=[0,caml_new_string("A")],
     _mS_=[0,caml_new_string("B")],
     _mT_=[0,caml_new_string("C")],
     _mU_=[0,caml_new_string("D")],
     _mV_=[0,caml_new_string("E")],
     _mW_=[0,caml_new_string("F")],
     _mM_=[0,caml_new_string("A")],
     _mN_=[0,caml_new_string("B")],
     _mO_=[0,caml_new_string("C")],
     _mP_=[0,caml_new_string("D")],
     _mQ_=[0,caml_new_string("E")],
     _mI_=[0,caml_new_string("A")],
     _mJ_=[0,caml_new_string("B")],
     _mK_=[0,caml_new_string("C")],
     _mL_=[0,caml_new_string("D")],
     _mF_=[0,caml_new_string("A")],
     _mG_=[0,caml_new_string("B")],
     _mH_=[0,caml_new_string("C")],
     _mD_=[0,caml_new_string("B")],
     _mE_=[0,caml_new_string("A")],
     _mA_=
      [0,
       [0,0,9,9,9,9,9],
       [0,
        [0,9,1,9,9,9,9],
        [0,
         [0,9,9,2,9,9,9],
         [0,[0,9,9,9,3,9,9],[0,[0,9,9,9,9,4,9],[0,[0,9,9,9,9,9,5],0]]]]]],
     _mB_=[0,9,9,9,9,9,9],
     _my_=
      [0,
       [0,0,5,5,5,5],
       [0,
        [0,5,1,5,5,5],
        [0,[0,5,5,2,5,5],[0,[0,5,5,5,3,5],[0,[0,5,5,5,5,4],0]]]]],
     _mz_=[0,5,5,5,5,5],
     _mw_=[0,[0,0,5,5,5],[0,[0,5,1,5,5],[0,[0,5,5,2,5],[0,[0,5,5,5,3],0]]]],
     _mx_=[0,5,5,5,5],
     _mu_=[0,[0,0,5,5],[0,[0,5,1,5],[0,[0,5,5,2],0]]],
     _mv_=[0,5,5,5],
     _ms_=[0,[0,0,5],[0,[0,5,1],0]],
     _mt_=[0,5,5],
     _mj_=[0,1],
     _mi_=
      [0,
       [11,
        caml_new_string("Generator.of_sequence: probability ["),
        [8,0,0,0,[11,caml_new_string("] out of bounds"),0]]],
       caml_new_string
        ("Generator.of_sequence: probability [%f] out of bounds")],
     _mh_=[0,caml_new_string("src/quickcheck.ml"),464,22],
     _l6_=[0,caml_new_string("src/quickcheck.ml"),167,4],
     _l5_=[0,caml_new_string("src/quickcheck.ml"),192,6],
     _l3_=[0,caml_new_string("src/quickcheck.ml"),61,6],
     _l1_=[0,caml_new_string("upper_bound")],
     _l2_=[0,caml_new_string("lower_bound")],
     _l0_=[0,caml_new_string("size")],
     _nA_=[0,104758188],
     _n3_=[0,caml_new_string("First")],
     _n4_=[0,caml_new_string("Second")],
     _n2_=[0,caml_new_string("src/either.ml.Stable.V1.t")],
     _o9_=
      [0,
       [0,2,[0,3,0]],
       [0,
        [0,0,[0,2,[0,3,0]]],
        [0,
         [0,1,[0,3,0]],
         [0,[0,1,[0,0,[0,3,0]]],[0,[0,1,[0,2,0]],[0,[0,1,[0,2,[0,0,0]]],0]]]]]],
     _o7_=[0,65,0],
     _qP_=[0,caml_new_string("src/hashtbl.ml"),185,6],
     _qM_=[0,[0,caml_new_string("src/hashtbl.ml"),136,5163,5185]],
     _rp_=[0,caml_new_string("Unequal")],
     _rq_=[0,caml_new_string("Right")],
     _ro_=[0,caml_new_string("Left")],
     _r1_=[0,caml_new_string("_")],
     _r0_=[0,caml_new_string("_")],
     _rZ_=[0,caml_new_string("_")],
     _rM_=[0,caml_new_string("_")],
     _sm_=[0,caml_new_string("Unbounded")],
     _sn_=[0,caml_new_string("Incl")],
     _so_=[0,caml_new_string("Excl")],
     _sl_=[0,caml_new_string("src/maybe_bound.ml.Stable.V1.t")],
     _sa_=[0,[0,caml_new_string("Unbounded"),0],0],
     _sX_=[0,caml_new_string("_")],
     _sW_=[0,caml_new_string("_")],
     _sU_=[0,5,[0,9,[0,3,[0,2,0]]]],
     _sV_=[0,5,[0,9,[0,3,[0,5,[0,2,[0,2,0]]]]]],
     _sS_=[0,5,0],
     _sT_=[0,5,[0,5,[0,5,[0,5,[0,5,0]]]]],
     _sQ_=[0,caml_new_string("_")],
     _sJ_=[0,caml_new_string("_")],
     _tj_=[0,caml_new_string("src/list.ml.Duplicate_found")],
     _tk_=[0,caml_new_string("src/list.ml"),26,10],
     _th_=[0,caml_new_string("src/list.ml"),18,24],
     _tg_=[0,caml_new_string("src/list.ml"),17,24],
     _tw_=[0,0,[0,[0,1],0]],
     _tx_=[0,5],
     _tu_=[0,65,0],
     _tZ_=[0,caml_new_string("src/union_find.ml"),225,6],
     _tY_=[0,caml_new_string("src/union_find.ml"),227,6],
     _tX_=[0,caml_new_string("src/union_find.ml"),229,6],
     _tW_=[0,caml_new_string("src/union_find.ml"),230,6],
     _tV_=[0,caml_new_string("src/union_find.ml"),203,6],
     _tU_=[0,caml_new_string("src/union_find.ml"),205,6],
     _tT_=[0,caml_new_string("src/union_find.ml"),190,6],
     _tS_=[0,caml_new_string("src/union_find.ml"),191,6],
     _tR_=[0,caml_new_string("src/union_find.ml"),194,6],
     _tQ_=[0,caml_new_string("src/union_find.ml"),195,6],
     _tP_=[0,caml_new_string("src/union_find.ml"),184,6],
     _tG_=[0,caml_new_string("src/union_find.ml"),157,6],
     _tO_=[0,caml_new_string("src/union_find.ml"),159,6],
     _tH_=[0,caml_new_string("src/union_find.ml"),161,6],
     _tI_=[0,caml_new_string("src/union_find.ml"),162,6],
     _tN_=[0,caml_new_string("src/union_find.ml"),164,6],
     _tM_=[0,caml_new_string("src/union_find.ml"),165,6],
     _tL_=[0,caml_new_string("src/union_find.ml"),171,6],
     _tK_=[0,caml_new_string("src/union_find.ml"),172,6],
     _tJ_=[0,caml_new_string("src/union_find.ml"),173,6],
     _tF_=[0,caml_new_string("src/union_find.ml"),149,6],
     _tE_=[0,caml_new_string("src/union_find.ml"),150,6],
     _tD_=[0,caml_new_string("src/union_find.ml"),144,6],
     _tC_=[0,caml_new_string("src/union_find.ml"),138,6],
     _tB_=[0,caml_new_string("src/union_find.ml"),133,6],
     _tA_=[0,caml_new_string("src/union_find.ml"),126,6],
     _ty_=[0,caml_new_string("src/union_find.ml"),61,16],
     _u2_=[0,0,[0,1,[0,2,[0,3,[0,5,[0,4,0]]]]]],
     _u1_=[0,0,[0,1,[0,2,[0,5,[0,3,[0,4,0]]]]]],
     _u0_=[0,0,[0,1,[0,2,[0,3,[0,4,0]]]]],
     _uZ_=[0,0,[0,1,[0,2,0]]],
     _uY_=[0,0,[0,1,[0,2,[0,3,[0,4,0]]]]],
     _uX_=[0,0,[0,1,[0,2,[0,3,[0,4,0]]]]],
     _uW_=[0,0,[0,2,[0,3,[0,4,0]]]],
     _uV_=[0,0,[0,1,[0,2,[0,3,[0,4,0]]]]],
     _uU_=[0,0,[0,1,[0,2,[0,3,[0,4,0]]]]],
     _uP_=[0,1,[0,2,[0,3,0]]],
     _uK_=[0,1,[0,2,[0,3,0]]],
     _uL_=[0,1,[0,2,[0,3,0]]],
     _uH_=[0,0,[0,1,[0,3,[0,2,[0,4,0]]]]],
     _uG_=[0,0,[0,1,[0,2,[0,3,[0,4,0]]]]],
     _uF_=[0,0,[0,2,[0,3,[0,4,[0,1,0]]]]],
     _uE_=[0,1,[0,2,[0,0,[0,3,[0,4,0]]]]],
     _uD_=[0,0,[0,2,[0,3,[0,1,[0,4,0]]]]],
     _uC_=[0,0,[0,1,[0,2,[0,3,[0,4,0]]]]],
     _uB_=[0,0,[0,1,[0,3,[0,2,[0,4,0]]]]],
     _uA_=[0,0,[0,1,[0,2,[0,3,[0,4,0]]]]],
     _uz_=[0,1,[0,0,[0,2,[0,3,[0,4,0]]]]],
     _uy_=[0,1,[0,0,[0,2,[0,3,[0,4,0]]]]],
     _ux_=[0,2,[0,0,[0,1,[0,3,[0,4,0]]]]],
     _uw_=[0,0,[0,2,[0,1,[0,3,[0,4,0]]]]],
     _uv_=[0,0,[0,1,[0,2,[0,3,[0,4,0]]]]],
     _uu_=[0,0,[0,1,[0,2,[0,4,[0,3,0]]]]],
     _ut_=[0,0,[0,1,[0,3,[0,4,[0,2,0]]]]],
     _us_=[0,0,[0,2,[0,3,[0,4,[0,1,0]]]]],
     _ur_=[0,1,[0,2,[0,3,[0,4,[0,0,0]]]]],
     _uq_=[0,0,[0,1,[0,2,[0,3,[0,4,0]]]]],
     _up_=[0,1,[0,0,[0,2,[0,3,[0,4,0]]]]],
     _uo_=[0,2,[0,0,[0,1,[0,3,[0,4,0]]]]],
     _un_=[0,3,[0,0,[0,1,[0,2,[0,4,0]]]]],
     _um_=[0,4,[0,0,[0,1,[0,2,[0,3,0]]]]],
     _ul_=[0,0,[0,1,[0,2,[0,3,[0,4,0]]]]],
     _ui_=[0,caml_new_string("Expected")],
     _uj_=[0,caml_new_string("Observed")],
     _uk_=[0,caml_new_string("src/doubly_linked.ml"),678,6],
     _t5_=[0,caml_new_string("src/doubly_linked.ml"),353,6],
     _t6_=[0,0,[0,[0,1,0],[0,[0,2,[0,3,0]],0]]],
     _t2_=[0,caml_new_string("src/doubly_linked.ml"),279,6],
     _t1_=[0,caml_new_string("src/doubly_linked.ml"),280,6],
     _t0_=[0,caml_new_string("src/doubly_linked.ml"),281,6],
     _t3_=[0,caml_new_string("src/doubly_linked.ml"),286,4],
     _vc_=[0,caml_new_string("src/hash_queue.ml.Make.Replace_unknown_key")],
     _vd_=[0,caml_new_string("src/hash_queue.ml"),361,12],
     _va_=[0,caml_new_string("src/hash_queue.ml.Make.Remove_unknown_key")],
     _vb_=[0,caml_new_string("src/hash_queue.ml"),343,12],
     _u__=[0,caml_new_string("src/hash_queue.ml.Make.Deque_empty")],
     _u$_=[0,caml_new_string("src/hash_queue.ml"),290,12],
     _u8_=[0,caml_new_string("src/hash_queue.ml.Make.Deque_with_key_empty")],
     _u9_=[0,caml_new_string("src/hash_queue.ml"),264,12],
     _u6_=[0,caml_new_string("src/hash_queue.ml.Make.Enqueue_duplicate_key")],
     _u7_=[0,caml_new_string("src/hash_queue.ml"),232,12],
     _u3_=[0,caml_new_string("src/hash_queue.ml"),155,8],
     _u4_=[0,caml_new_string("src/hash_queue.ml"),153,16],
     _u5_=[0,caml_new_string("src/hash_queue.ml"),144,4],
     _vV_=[0,caml_new_string("src/identifiable.ml"),166,4567,4579],
     _vW_=[0,caml_new_string("src/identifiable.ml"),169,4647,4659],
     _vX_=[0,caml_new_string("src/identifiable.ml"),172,4724,4736],
     _vY_=[0,caml_new_string("src/identifiable.ml"),175,4826,4838],
     _vZ_=[0,caml_new_string("src/identifiable.ml"),178,4911,4923],
     _v__=[0,caml_new_string("src/identifiable.ml"),179,6],
     _v0_=[0,caml_new_string("src/identifiable.ml"),181,4994,5006],
     _v9_=[0,caml_new_string("src/identifiable.ml"),182,6],
     _v1_=[0,caml_new_string("src/identifiable.ml"),184,5080,5092],
     _v8_=[0,caml_new_string("src/identifiable.ml"),185,6],
     _v2_=[0,caml_new_string("src/identifiable.ml"),187,5163,5175],
     _v3_=[0,2],
     _v4_=[0,caml_new_string("src/identifiable.ml"),190,5257,5269],
     _v5_=[0,caml_new_string("src/identifiable.ml"),192,5337,5349],
     _v7_=[0,caml_new_string("src/identifiable.ml"),193,6],
     _v6_=[0,caml_new_string("src/identifiable.ml"),194,5431,5443],
     _vU_=[0,caml_new_string("B")],
     _vT_=[0,caml_new_string("A")],
     _vS_=[0,caml_new_string("src/identifiable.ml.T.t")],
     _vO_=[0,caml_new_string("actual")],
     _vP_=[0,caml_new_string("expected")],
     _vQ_=[0,[0,caml_new_string("src/identifiable.ml"),134,3534,3544]],
     _vI_=[0,caml_new_string("Compare")],
     _vJ_=[0,caml_new_string("Hash")],
     _vK_=[0,caml_new_string("Of_string")],
     _vL_=[0,caml_new_string("Sexp_of_t")],
     _vM_=[0,caml_new_string("T_of_sexp")],
     _vN_=[0,caml_new_string("To_string")],
     _vR_=[0,[0,caml_new_string("A"),0],[0,[0,caml_new_string("B"),0],0]],
     _AI_=[1,caml_new_string(" 2b528f4b22f08e28876ffe0239315ac2 ")],
     _AJ_=[0,caml_new_string("")],
     _Df_=[0,caml_new_string("\n")],
     _De_=
      [0,
       [2,
        0,
        [11,
         caml_new_string("  "),
         [2,0,[11,caml_new_string("  |"),[2,0,[12,124,0]]]]]],
       caml_new_string("%s  %s  |%s|")],
     _Dd_=
      [0,
       [2,
        0,
        [12,
         32,
         [2,0,[12,32,[2,0,[12,32,[2,0,[12,32,[2,0,[12,32,partial$0]]]]]]]]]],
       caml_new_string("%s %s %s %s %s %s %s %s  %s %s %s %s %s %s %s %s")],
     _Dc_=[0,[4,6,[0,2,2],0,0],caml_new_string("%02x")],
     _Db_=[0,[4,6,[0,2,8],0,0],caml_new_string("%08x")],
     _E4_=[0,caml_new_string("src/gc.ml"),122,2],
     _E2_=[0,1e6],
     _E1_=
      [0,
       [11,
        caml_new_string("Gc.Control."),
        [2,
         0,
         [11,caml_new_string(": "),[2,0,[11,caml_new_string(" -> "),[2,0,0]]]]]],
       caml_new_string("Gc.Control.%s: %s -> %s")],
     _Ex_=[0,caml_new_string("window_size")],
     _Ey_=[0,caml_new_string("allocation_policy")],
     _Ez_=[0,caml_new_string("stack_limit")],
     _EA_=[0,caml_new_string("max_overhead")],
     _EB_=[0,caml_new_string("verbose")],
     _EC_=[0,caml_new_string("space_overhead")],
     _ED_=[0,caml_new_string("major_heap_increment")],
     _EE_=[0,caml_new_string("minor_heap_size")],
     _DD_=[0,caml_new_string("stack_size")],
     _DE_=[0,caml_new_string("top_heap_words")],
     _DF_=[0,caml_new_string("compactions")],
     _DG_=[0,caml_new_string("fragments")],
     _DH_=[0,caml_new_string("largest_free")],
     _DI_=[0,caml_new_string("free_blocks")],
     _DJ_=[0,caml_new_string("free_words")],
     _DK_=[0,caml_new_string("live_blocks")],
     _DL_=[0,caml_new_string("live_words")],
     _DM_=[0,caml_new_string("heap_chunks")],
     _DN_=[0,caml_new_string("heap_words")],
     _DO_=[0,caml_new_string("major_collections")],
     _DP_=[0,caml_new_string("minor_collections")],
     _DQ_=[0,caml_new_string("major_words")],
     _DR_=[0,caml_new_string("promoted_words")],
     _DS_=[0,caml_new_string("minor_words")],
     _F3_=[0,-1,[0,0,[0,1,0]]],
     _Fc_=[1,0],
     _Fd_=[1,1],
     _Fe_=[1,2],
     _Fb_=[0,caml_new_string("src/sign.ml.Stable.V1.t")],
     _E5_=[0,caml_new_string("Neg")],
     _E6_=[0,caml_new_string("Zero")],
     _E7_=[0,caml_new_string("Pos")],
     _E8_=
      [0,
       [0,caml_new_string("Neg"),0],
       [0,[0,caml_new_string("Zero"),0],[0,[0,caml_new_string("Pos"),0],0]]],
     _Gi_=[0,caml_new_string("a"),[0,caml_new_string("A"),0]],
     _Gh_=[0,caml_new_string("hello"),[0,caml_new_string("world"),0]],
     _Gg_=[0,[0,caml_new_string("a"),4],[0,[0,caml_new_string("b"),5],0]],
     _JA_=[0,caml_new_string("src/float.ml"),306,2],
     _Jv_=[0,caml_new_string("upper_bound")],
     _Jw_=[0,caml_new_string("lower_bound")],
     _Jx_=[0,caml_new_string("upper_bound")],
     _Jy_=[0,caml_new_string("lower_bound")],
     _I3_=[0,caml_new_string("actual")],
     _I4_=[0,caml_new_string("expect")],
     _I5_=[0,caml_new_string("float")],
     _JB_=[0,caml_new_string("64-bits-only"),0],
     _Np_=[0,caml_new_string("src/nothing.ml"),51,27],
     _Nj_=[0,caml_new_string("src/nothing.ml"),4,71],
     _No_=[0,caml_new_string("src/nothing.ml"),15,378,395],
     _N__=[0,caml_new_string("src/ordering.ml.t")],
     _N5_=
      [0,
       [0,caml_new_string("Less"),0],
       [0,
        [0,caml_new_string("Equal"),0],
        [0,[0,caml_new_string("Greater"),0],0]]],
     _Qs_=[0,caml_new_string("failure building sexp")],
     _Qr_=
      [0,
       caml_new_string
        ("could not build sexp for exn raised when building sexp for value")],
     _Qq_=[4,caml_new_string("src/sexp.ml.no_raise")],
     _Qc_=[0,caml_new_string("sexp_parse_error")],
     _P4_=[0,caml_new_string("src/sexp.ml.t")],
     _T0_=[4,caml_new_string("src/std_internal.ml.sexp_opaque")],
     _R1_=[0,caml_new_string("src/std_internal.ml.Bug")],
     _R2_=[0,caml_new_string("src/std_internal.ml"),24,10],
     _U2_=[0,[8,9,0,0,[12,119,0]],caml_new_string("%gw")],
     _U3_=[0,-450167598,-510525623],
     _U1_=[0,-450167598,939376143],
     _U0_=[0,-450167598,-992187495],
     _UZ_=[0,-450167598,-324157174],
     _UY_=[0,-450167598,-792364981],
     _UX_=[0,[8,9,0,0,[12,98,0]],caml_new_string("%gb")],
     _UU_=[0,caml_new_string("Largest")],
     _UV_=[0,caml_new_string("Specific")],
     _UW_=
      [0,
       [11,
        caml_new_string("\n("),
        [2,
         0,
         [11,
          caml_new_string(") "),
          [2,
           0,
           [11,
            caml_new_string(" -> "),
            [2,0,[11,caml_new_string(" != "),[2,0,[12,10,[10,0]]]]]]]]]],
       caml_new_string("\n(%s) %s -> %s != %s\n%!")],
     _Up_=[0,[8,9,0,0,[0,0]],caml_new_string("%g%c")],
     _Um_=
      [0,
       [12,
        39,
        [2,
         0,
         [11,
          caml_new_string("' passed to Byte_units.of_string - too short"),
          0]]],
       caml_new_string("'%s' passed to Byte_units.of_string - too short")],
     _Un_=
      [0,
       [12,
        39,
        [2,
         0,
         [11,
          caml_new_string("' passed to Byte_units.of_string - "),
          [2,0,[11,caml_new_string(" cannot be converted to float "),0]]]]],
       caml_new_string
        ("'%s' passed to Byte_units.of_string - %s cannot be converted to float ")],
     _Uo_=
      [0,
       [12,
        39,
        [2,
         0,
         [11,
          caml_new_string
           ("' passed to Byte_units.of_string - illegal extension "),
          [0,0]]]],
       caml_new_string
        ("'%s' passed to Byte_units.of_string - illegal extension %c")],
     _T7_=[0,caml_new_string("Gigabytes")],
     _T8_=[0,caml_new_string("Kilobytes")],
     _T9_=[0,caml_new_string("Words")],
     _T__=[0,caml_new_string("Megabytes")],
     _T6_=[0,caml_new_string("Bytes")],
     _T2_=[0,caml_new_string("Gigabytes")],
     _T3_=[0,caml_new_string("Kilobytes")],
     _T4_=[0,caml_new_string("Words")],
     _T5_=[0,caml_new_string("Megabytes")],
     _T1_=[0,caml_new_string("Bytes")],
     _WY_=
      [0,
       [11,
        caml_new_string("Bigstring.set_head_padded_fixed_string: "),
        [3,0,[11,caml_new_string(" is longer than "),[4,0,0,0,0]]]],
       caml_new_string
        ("Bigstring.set_head_padded_fixed_string: %S is longer than %d")],
     _WX_=
      [0,
       [11,
        caml_new_string("Bigstring.set_tail_padded_fixed_string: "),
        [3,0,[11,caml_new_string(" is longer than "),[4,0,0,0,0]]]],
       caml_new_string
        ("Bigstring.set_tail_padded_fixed_string: %S is longer than %d")],
     _WU_=
      [0,
       [4,0,0,0,[11,caml_new_string(" = 0x"),[4,6,0,0,0]]],
       caml_new_string("%d = 0x%x")],
     _WV_=[0,caml_new_string("get_trunc")],
     _WR_=
      [0,
       [11,
        caml_new_string("trunc = "),
        [4,0,0,0,[11,caml_new_string(" = 0x"),[4,6,0,0,0]]]],
       caml_new_string("trunc = %d = 0x%x")],
     _WS_=
      [0,
       [11,
        caml_new_string("too_big = "),
        [7,0,0,0,[11,caml_new_string("L = 0x"),[7,6,0,0,[12,76,0]]]]],
       caml_new_string("too_big = %LdL = 0x%LxL")],
     _WT_=[0,[0,caml_new_string("src/bigstring.ml"),1127,36317,36329]],
     _WW_=[255,0,0,16384],
     _WN_=[0,[255,1193046,12377840,30874],[0,[255,16777215,16777215,32767],0]],
     _WO_=[255,16776961,16777215,65535],
     _WP_=[255,15584170,4399375,34661],
     _WQ_=[255,0,0,32768],
     _WJ_=[0,[255,1193046,12377840,30874],[0,[255,16777215,16777215,32767],0]],
     _WK_=[255,16776961,16777215,65535],
     _WL_=[255,15584170,4399375,34661],
     _WM_=[255,0,0,32768],
     _WF_=[0,[255,1193046,12377840,30874],[0,[255,16777215,16777215,32767],0]],
     _WG_=[255,16776961,16777215,65535],
     _WH_=[255,15584170,4399375,34661],
     _WI_=[255,0,0,32768],
     _WD_=[0,caml_new_string("src/bigstring.ml"),1055,10],
     _WC_=[0,caml_new_string("src/bigstring.ml"),1056,10],
     _WE_=
      [0,
       caml_new_string("@\0\0\0\0\0\0\0"),
       [0,
        caml_new_string("\x80\0\0\0\0\0\0\0"),
        [0,
         caml_new_string("\xa0\0\0\0\0\0\0\0"),
         [0,
          caml_new_string("\xf0\0\0\0\0\0\0\0"),
          [0,
           caml_new_string("O\xff\xff\xff\xff\xff\xff\xff"),
           [0,caml_new_string("\xff\xff\xff\xff\xff\xff\xff\xff"),0]]]]]],
     _WA_=
      [0,
       [255,0,0,0],
       [0,
        [255,1,0,0],
        [0,[255,16777215,255,0],[0,[255,16777215,16777215,16383],0]]]],
     _Wv_=[255,16777215,16777215,16383],
     _Ww_=[255,16777215,127,0],
     _Wx_=[255,0,16777088,65535],
     _Wy_=[255,0,0,49152],
     _Ws_=[255,16777215,127,0],
     _Wt_=[255,0,16777088,65535],
     _Wp_=[255,16777215,127,0],
     _Wq_=[255,0,16777088,65535],
     _Wm_=[255,16777215,127,0],
     _Wn_=[255,0,16777088,65535],
     _Wl_=[0,0,[0,1,[0,65535,0]]],
     _Wk_=[0,-32768,[0,-1,[0,0,[0,1,[0,32767,0]]]]],
     _Wj_=[0,0,[0,1,[0,65535,0]]],
     _Wi_=[0,-32768,[0,-1,[0,0,[0,1,[0,32767,0]]]]],
     _Wh_=
      [0,
       [11,
        caml_new_string("Value "),
        [4,
         0,
         0,
         0,
         [11,
          caml_new_string(": expected "),
          [2,0,[11,caml_new_string(", got "),[2,0,[12,10,0]]]]]]],
       caml_new_string("Value %d: expected %s, got %s\n")],
     _Wo_=[0,caml_new_string("64-bits-only"),0],
     _Wr_=[0,caml_new_string("64-bits-only"),0],
     _Wu_=[0,caml_new_string("64-bits-only"),0],
     _Wz_=[0,caml_new_string("64-bits-only"),0],
     _WB_=[0,caml_new_string("64-bits-only"),0],
     _Wc_=[255,0,0,0],
     _Wd_=[255,0,0,16384],
     _We_=[255,0,0,0],
     _Wf_=[255,0,64,0],
     _V__=[255,0,0,49152],
     _V$_=[255,0,0,16384],
     _Wa_=[255,0,16777152,65535],
     _Wb_=[255,0,64,0],
     _V9_=
      [0,
       [11,
        caml_new_string("Bigstring."),
        [2,
         0,
         [11,
          caml_new_string(": "),
          [4,
           0,
           0,
           0,
           [11,caml_new_string(" is not a valid unsigned 64-bit integer"),0]]]]],
       caml_new_string
        ("Bigstring.%s: %d is not a valid unsigned 64-bit integer")],
     _V7_=
      [0,
       [11,
        caml_new_string("Bigstring."),
        [2,
         0,
         [11,
          caml_new_string(": "),
          [4,
           0,
           0,
           0,
           [11,caml_new_string(" is not a valid unsigned 32-bit integer"),0]]]]],
       caml_new_string
        ("Bigstring.%s: %d is not a valid unsigned 32-bit integer")],
     _aYD_=
      [0,
       [11,
        caml_new_string("Bigstring."),
        [2,
         0,
         [11,
          caml_new_string(": "),
          [4,
           0,
           0,
           0,
           [11,caml_new_string(" is not a valid unsigned 32-bit integer"),0]]]]],
       caml_new_string
        ("Bigstring.%s: %d is not a valid unsigned 32-bit integer")],
     _V5_=
      [0,
       [11,
        caml_new_string("Bigstring."),
        [2,
         0,
         [11,
          caml_new_string(": "),
          [4,0,0,0,[11,caml_new_string(" is not a valid 32-bit integer"),0]]]]],
       caml_new_string("Bigstring.%s: %d is not a valid 32-bit integer")],
     _V4_=
      [0,
       [11,
        caml_new_string("Bigstring."),
        [2,
         0,
         [11,
          caml_new_string(": "),
          [4,0,0,0,[11,caml_new_string(" is not a valid 8-bit integer"),0]]]]],
       caml_new_string("Bigstring.%s: %d is not a valid 8-bit integer")],
     _V3_=
      [0,
       [11,
        caml_new_string("Bigstring."),
        [2,
         0,
         [11,
          caml_new_string(": "),
          [4,
           0,
           0,
           0,
           [11,caml_new_string(" is not a valid unsigned 8-bit integer"),0]]]]],
       caml_new_string
        ("Bigstring.%s: %d is not a valid unsigned 8-bit integer")],
     _V2_=
      [0,
       [11,
        caml_new_string("Bigstring."),
        [2,
         0,
         [11,
          caml_new_string(": "),
          [4,0,0,0,[11,caml_new_string(" is not a valid 16-bit integer"),0]]]]],
       caml_new_string("Bigstring.%s: %d is not a valid 16-bit integer")],
     _V1_=
      [0,
       [11,
        caml_new_string("Bigstring."),
        [2,
         0,
         [11,
          caml_new_string(": "),
          [4,
           0,
           0,
           0,
           [11,caml_new_string(" is not a valid unsigned 16-bit integer"),0]]]]],
       caml_new_string
        ("Bigstring.%s: %d is not a valid unsigned 16-bit integer")],
     _VZ_=[0,caml_new_string("src/bigstring.ml"),512,6],
     _V0_=
      [0,
       [0,0,0],
       [0,[0,1,1],[0,[0,32767,32767],[0,[0,65535,-1],[0,[0,32768,-32768],0]]]]],
     _VQ_=[0,caml_new_string("pos_after_data")],
     _VR_=[0,caml_new_string("start_pos")],
     _VS_=[0,caml_new_string("bin_prot_size_header_length")],
     _VT_=[0,caml_new_string("data_len")],
     _VU_=[0,caml_new_string("total_len")],
     _VM_=[0,caml_new_string("pos")],
     _VN_=[0,caml_new_string("pos_after_writing")],
     _VO_=[0,caml_new_string("bigstring_length")],
     _VL_=[0,[0,caml_new_string("src/bigstring.ml"),386,12172,12176]],
     _VP_=[0,[0,caml_new_string("src/bigstring.ml"),388,12285,12289]],
     _VV_=[0,[0,caml_new_string("src/bigstring.ml"),396,12752,12756]],
     _VK_=[0,3],
     _VI_=[0,17724,[0,caml_new_string("foo"),18]],
     _VJ_=[0,6],
     _VG_=[0,17724,caml_new_string("foo")],
     _VH_=[0,12],
     _VF_=[0,17724,caml_new_string("foo")],
     _VE_=[0,17724,42],
     _VD_=[0,17724,42],
     _VA_=[0,caml_new_string("Not_enough_data")],
     _VB_=[0,caml_new_string("Invalid_data")],
     _VC_=[0,caml_new_string("Ok")],
     _Vu_=
      [0,
       caml_new_string(""),
       [0,
        caml_new_string("a"),
        [0,
         caml_new_string("ab"),
         [0,
          caml_new_string("abc"),
          [0,
           caml_new_string("abcd"),
           [0,
            caml_new_string
             ("string hashing for bigstrings is the same as for standard strings"),
            0]]]]]],
     _Vr_=
      [0,
       caml_new_string(""),
       [0,
        caml_new_string("a"),
        [0,
         caml_new_string("ab"),
         [0,
          caml_new_string("abc"),
          [0,
           caml_new_string("abcd"),
           [0,
            caml_new_string
             ("string hashing for bigstrings is the same as for standard strings"),
            0]]]]]],
     _Vo_=
      [0,
       caml_new_string("Strings"),
       [0,
        caml_new_string("of"),
        [0,caml_new_string("different"),[0,caml_new_string("lengths."),0]]]],
     _Vp_=[0,caml_new_string(",.?")],
     _Vm_=
      [0,
       caml_new_string("foo"),
       [0,caml_new_string("bar"),[0,caml_new_string("baz"),0]]],
     _Vn_=[0,caml_new_string(",")],
     _Vk_=[0,caml_new_string("foo"),[0,caml_new_string("bar"),0]],
     _Vl_=[0,caml_new_string(",")],
     _Vi_=[0,caml_new_string("foo"),0],
     _Vj_=[0,caml_new_string(",")],
     _Vg_=[0,caml_new_string(""),0],
     _Vh_=[0,caml_new_string(",")],
     _Vf_=[0,caml_new_string(",")],
     _Ve_=
      [0,
       caml_new_string("foo"),
       [0,caml_new_string("bar"),[0,caml_new_string("baz"),0]]],
     _Vd_=[0,caml_new_string("foo"),[0,caml_new_string("bar"),0]],
     _Vc_=[0,caml_new_string("foo"),0],
     _Vb_=[0,caml_new_string(""),0],
     _U$_=[0,caml_new_string("src/bigstring.ml"),181,6],
     _U8_=
      [0,
       [11,
        caml_new_string("Bigstring."),
        [2,0,[11,caml_new_string(": length(bstr) < pos + len"),0]]],
       caml_new_string("Bigstring.%s: length(bstr) < pos + len")],
     _U7_=
      [0,
       [11,
        caml_new_string("create: size = "),
        [4,0,0,0,[11,caml_new_string(" < 0"),0]]],
       caml_new_string("create: size = %d < 0")],
     _Vs_=[0,caml_new_string("64-bits-only"),0],
     _WZ_=[0,caml_new_string("src/core_bin_prot.ml"),15,4],
     _W1_=[0,caml_new_string("Round_tripped_to")],
     _W2_=
      [0,
       [11,
        caml_new_string("Binable.{of,to}_"),
        [2,0,[11,caml_new_string(" failure"),0]]],
       caml_new_string("Binable.{of,to}_%s failure")],
     _Xr_=[0,caml_new_string("Expected")],
     _Xs_=[0,caml_new_string("But_got")],
     _Xt_=[0,[0,caml_new_string("src/stable_unit_test.ml"),137,5602,5614]],
     _Xo_=[0,caml_new_string("Expected")],
     _Xp_=[0,caml_new_string("But_got")],
     _Xq_=[0,[0,caml_new_string("src/stable_unit_test.ml"),130,5149,5159]],
     _Xl_=[0,caml_new_string("Expected")],
     _Xm_=[0,caml_new_string("But_got")],
     _Xn_=[0,[0,caml_new_string("src/stable_unit_test.ml"),93,3762,3774]],
     _Xi_=[0,caml_new_string("Expected")],
     _Xj_=[0,caml_new_string("But_got")],
     _Xh_=[0,[0,caml_new_string("src/stable_unit_test.ml"),80,3027,3039]],
     _Xk_=[0,[0,caml_new_string("src/stable_unit_test.ml"),86,3345,3355]],
     _Xe_=[0,caml_new_string("Expected")],
     _Xf_=[0,caml_new_string("But_got")],
     _Xb_=[0,caml_new_string("Expected")],
     _Xc_=[0,caml_new_string("But_got")],
     _Xd_=[0,[0,caml_new_string("src/stable_unit_test.ml"),52,1931,1941]],
     _Xg_=[0,[0,caml_new_string("src/stable_unit_test.ml"),57,2237,2247]],
     _W__=[0,caml_new_string("Expected")],
     _W$_=[0,caml_new_string("But_got")],
     _Xa_=[0,[0,caml_new_string("src/stable_unit_test.ml"),37,1311,1326]],
     _W9_=[0,caml_new_string("Expected")],
     _W7_=[0,caml_new_string("Expected")],
     _W8_=[0,caml_new_string("But_got")],
     _W6_=[0,0],
     _YN_=[0,caml_new_string("src/zone.ml"),361,8],
     _YM_=
      [0,
       [11,caml_new_string("UTC"),[2,0,[4,0,0,0,0]]],
       caml_new_string("UTC%s%d")],
     _YL_=
      [0,[2,0,[11,caml_new_string(" - "),[2,0,0]]],caml_new_string("%s - %s")],
     _YK_=[0,caml_new_string("src/zone.ml"),333,10],
     _YJ_=
      [0,
       [11,
        caml_new_string("version ("),
        [0,[11,caml_new_string(") is invalid"),0]]],
       caml_new_string("version (%c) is invalid")],
     _YC_=[0,caml_new_string("leap_seconds")],
     _YD_=[0,caml_new_string("default_local_time_type")],
     _YE_=[0,caml_new_string("last_regime_index")],
     _YF_=[0,caml_new_string("transitions")],
     _YG_=[0,caml_new_string("digest")],
     _YH_=[0,caml_new_string("original_filename")],
     _YI_=[0,caml_new_string("name")],
     _Ys_=[0,caml_new_string("new_regime")],
     _Yt_=[0,caml_new_string("start_time_in_seconds_since_epoch")],
     _Ym_=[0,caml_new_string("seconds")],
     _Yn_=[0,caml_new_string("time_in_seconds_since_epoch")],
     _Yf_=[0,caml_new_string("abbrv")],
     _Yg_=[0,caml_new_string("is_dst")],
     _Yh_=[0,caml_new_string("utc_offset_in_seconds")],
     _X$_=[0,caml_new_string("src/zone.ml.Invalid_file_format")],
     _Ya_=[0,caml_new_string("src/zone.ml"),16,10],
     _YO_=
      [0,
       caml_new_string("America/New_York"),
       [0,
        caml_new_string("Europe/London"),
        [0,
         caml_new_string("Asia/Hong_Kong"),
         [0,caml_new_string("America/Chicago"),0]]]],
     _abP_=
      [0,
       [0,1,caml_new_string("foo")],
       [0,[0,2,caml_new_string("bar")],[0,[0,3,caml_new_string("baz")],0]]],
     _abK_=[0,32],
     _abL_=[0,0,0],
     _abM_=
      [0,
       [0,caml_new_string("0"),0],
       caml_new_string("\x01"),
       [0,caml_new_string("\0"),0]],
     _abN_=[0,0,caml_new_string("\0"),0],
     _abD_=
      [0,
       [0,1,caml_new_string("foo")],
       [0,[0,2,caml_new_string("bar")],[0,[0,3,caml_new_string("baz")],0]]],
     _abE_=[0,16],
     _abF_=[0,[0,0,caml_new_string("foo")],0],
     _abG_=
      [0,
       [0,caml_new_string("(0 foo)"),0],
       caml_new_string("\x01"),
       [0,caml_new_string("\0\x03foo"),0]],
     _abH_=[0,0,caml_new_string("\0"),0],
     _abI_=
      [0,
       [0,
        caml_new_string("(1 foo)"),
        [0,caml_new_string("(2 bar)"),[0,caml_new_string("(3 baz)"),0]]],
       caml_new_string("\x03"),
       [0,
        caml_new_string("\x01\x03foo"),
        [0,
         caml_new_string("\x02\x03bar"),
         [0,caml_new_string("\x03\x03baz"),0]]]],
     _abZ_=
      [0,
       [11,caml_new_string("Day_of_week.of_string: "),[3,0,0]],
       caml_new_string("Day_of_week.of_string: %S")],
     _abY_=
      [0,
       [11,caml_new_string("Day_of_week.of_int_exn: "),[4,0,0,0,0]],
       caml_new_string("Day_of_week.of_int_exn: %d")],
     _abX_=
      [0,
       [11,caml_new_string("Day_of_week.of_string: "),[3,0,0]],
       caml_new_string("Day_of_week.of_string: %S")],
     _abW_=[0,caml_new_string("src/day_of_week.ml.Stable.V1.T.t")],
     _abR_=
      [0,
       [0,caml_new_string("Sun"),0],
       [0,
        [0,caml_new_string("Mon"),0],
        [0,
         [0,caml_new_string("Tue"),0],
         [0,
          [0,caml_new_string("Wed"),0],
          [0,
           [0,caml_new_string("Thu"),0],
           [0,[0,caml_new_string("Fri"),0],[0,[0,caml_new_string("Sat"),0],0]]]]]]],
     _aci_=[12,93,0],
     _acj_=[0,0],
     _ack_=[0,0],
     _ach_=
      [0,
       [2,
        0,
        [12,
         46,
         [2,
          0,
          [11,
           caml_new_string(": "),
           [4,
            0,
            0,
            0,
            [11,caml_new_string(" out of range [0, "),[4,0,0,0,[12,93,0]]]]]]]],
       caml_new_string("%s.%s: %d out of range [0, %d]")],
     _acf_=
      [0,
       [2,
        0,
        [12,
         46,
         [2,
          0,
          [11,
           caml_new_string(": pos="),
           [4,
            0,
            0,
            0,
            [11,
             caml_new_string(" out of range for string of length "),
             [4,0,0,0,0]]]]]]],
       caml_new_string("%s.%s: pos=%d out of range for string of length %d")],
     _acg_=
      [0,
       [2,
        0,
        [12,
         46,
         [2,
          0,
          [11,
           caml_new_string(": "),
           [4,
            0,
            0,
            0,
            [11,
             caml_new_string(" digits do not fit at pos "),
             [4,
              0,
              0,
              0,
              [11,caml_new_string(" in string of length "),[4,0,0,0,0]]]]]]]]],
       caml_new_string
        ("%s.%s: %d digits do not fit at pos %d in string of length %d")],
     _ace_=
      [0,
       [2,
        0,
        [12,
         46,
         [2,
          0,
          [11,
           caml_new_string(": digits="),
           [4,0,0,0,[11,caml_new_string(" is not a positive number"),0]]]]]],
       caml_new_string("%s.%s: digits=%d is not a positive number")],
     _acd_=
      [0,
       [2,0,[12,46,[2,0,[11,caml_new_string(": overflow reading int63"),0]]]],
       caml_new_string("%s.%s: overflow reading int63")],
     _add_=
      [0,
       [11,caml_new_string("Invalid month: "),[2,0,0]],
       caml_new_string("Invalid month: %s")],
     _ac8_=[0,caml_new_string("0")],
     _ac6_=[0,caml_new_string("Jan")],
     _ac4_=[0,caml_new_string("Jan")],
     _ac1_=[1,[0,[0,caml_new_string("0")],0]],
     _ac2_=[0,0,0],
     _acC_=[0,caml_new_string("src/month.ml"),115,9],
     _acz_=[0,caml_new_string("src/month.ml"),72,10],
     _acx_=
      [0,
       [11,caml_new_string("Month.of_int_exn "),[4,0,0,0,0]],
       caml_new_string("Month.of_int_exn %d")],
     _acl_=[0,caml_new_string("Jan")],
     _acm_=[0,caml_new_string("Feb")],
     _acn_=[0,caml_new_string("Mar")],
     _aco_=[0,caml_new_string("Apr")],
     _acp_=[0,caml_new_string("May")],
     _acq_=[0,caml_new_string("Jun")],
     _acr_=[0,caml_new_string("Jul")],
     _acs_=[0,caml_new_string("Aug")],
     _act_=[0,caml_new_string("Sep")],
     _acu_=[0,caml_new_string("Oct")],
     _acv_=[0,caml_new_string("Nov")],
     _acw_=[0,caml_new_string("Dec")],
     _adB_=[0,caml_new_string("upper_bound")],
     _adC_=[0,caml_new_string("lower_bound")],
     _adz_=[0,caml_new_string("src/date0.ml"),634,15],
     _adr_=[0,caml_new_string("src/date0.ml"),383,6],
     _adi_=
      [0,
       [11,
        caml_new_string("Date.of_string ("),
        [2,0,[11,caml_new_string("): "),[2,0,0]]]],
       caml_new_string("Date.of_string (%s): %s")],
     _adg_=
      [0,
       [11,
        caml_new_string("Date.create_exn ~y:"),
        [4,
         0,
         0,
         0,
         [11,
          caml_new_string(" ~m:"),
          [2,
           0,
           [11,
            caml_new_string(" ~d:"),
            [4,0,0,0,[11,caml_new_string(" error: "),[2,0,0]]]]]]]],
       caml_new_string("Date.create_exn ~y:%d ~m:%s ~d:%d error: %s")],
     _ads_=[0,0,3,2,5,0,3,5,1,4,6,2,4],
     _adt_=[0,0,31,59,90,120,151,181,212,243,273,304,334],
     _adu_=[0,0,31,60,91,121,152,182,213,244,274,305,335],
     _adN_=[0,caml_new_string("src/ofday_parser.ml"),68,24],
     _adJ_=[0,[0,[11,caml_new_string(".M."),0]],caml_new_string("%c.M.")],
     _adK_=[0,[0,[11,caml_new_string(".M"),0]],caml_new_string("%c.M")],
     _adL_=[0,[0,[12,77,0]],caml_new_string("%cM")],
     _adM_=[0,[0,0],caml_new_string("%c")],
     _adP_=
      [0,
       caml_new_string
        ("src/float_with_finite_only_serialization.ml.Stable.V1.Nan_or_inf")],
     _adQ_=
      [0,caml_new_string("src/float_with_finite_only_serialization.ml"),8,14],
     _aep_=[0,caml_new_string("src/percent.ml"),242,4],
     _aeo_=[0,caml_new_string("src/percent.ml"),244,4],
     _ael_=[0,caml_new_string("src/percent.ml"),220,4],
     _aek_=[0,caml_new_string("src/percent.ml"),222,4],
     _aem_=
      caml_list_of_js_array
       ([[0,0.3,caml_new_string("30%")],
         [0,0.335,caml_new_string("33.5%")],
         [0,0.00335,caml_new_string("33.5bp")],
         [0,33.46,caml_new_string("33.46x")],
         [0,0.1,caml_new_string("10%")],
         [0,0.99,caml_new_string("99%")],
         [0,1,caml_new_string("1x")],
         [0,10,caml_new_string("10x")],
         [0,0.001,caml_new_string("10bp")],
         [0,0.0001,caml_new_string("1bp")],
         [0,1e-05,caml_new_string("0.1bp")],
         [0,0.5,caml_new_string("50%")]]),
     _aeh_=[0,caml_new_string("src/percent.ml"),187,4],
     _aei_=
      caml_list_of_js_array
       ([[0,caml_new_string("30%"),0.3],
         [0,caml_new_string("3123bp"),0.3123],
         [0,caml_new_string("3.17x"),3.17],
         [0,caml_new_string("0.0003x"),0.0003],
         [0,caml_new_string("0%"),0],
         [0,caml_new_string("0bp"),0],
         [0,caml_new_string("0x"),0],
         [0,caml_new_string("0.000%"),0],
         [0,caml_new_string("0.00bp"),0],
         [0,caml_new_string("0.00x"),0],
         [0,caml_new_string("3.1e5%"),3100],
         [0,caml_new_string("3.1e5bp"),31],
         [0,caml_new_string("3.1e5x"),31e4],
         [0,caml_new_string("10%"),0.1],
         [0,caml_new_string("110%"),1.1],
         [0,caml_new_string("0.1x"),0.1],
         [0,caml_new_string("1.1x"),1.1],
         [0,caml_new_string("0.001x"),0.001],
         [0,caml_new_string("1bp"),0.0001],
         [0,caml_new_string("10bp"),0.001],
         [0,caml_new_string("100bp"),0.01],
         [0,caml_new_string("1000bp"),0.1],
         [0,caml_new_string("11000bp"),1.1],
         [0,caml_new_string("1.1e4bp"),1.1],
         [0,caml_new_string("50%"),0.5]]),
     _ad8_=
      [0,
       [11,
        caml_new_string("Percent.of_string: must end in x, "),
        [12,37,[11,caml_new_string(", or bp: "),[2,0,0]]]],
       caml_new_string("Percent.of_string: must end in x, %%, or bp: %s")],
     _ad7_=[0,[8,12,0,[0,6],0],caml_new_string("%.6G")],
     _adZ_=[0,[8,15,0,0,0],caml_new_string("%F")],
     _ad0_=[0,[8,3,0,1,0],caml_new_string("%.*e")],
     _ad1_=[0,[8,6,0,1,0],caml_new_string("%.*E")],
     _ad2_=[0,[8,0,0,1,0],caml_new_string("%.*f")],
     _ad3_=[0,[8,9,0,1,0],caml_new_string("%.*g")],
     _ad4_=[0,[8,12,0,1,0],caml_new_string("%.*G")],
     _ad5_=[0,[8,16,0,1,0],caml_new_string("%.*h")],
     _ad6_=[0,[8,19,0,1,0],caml_new_string("%.*H")],
     _adR_=[0,caml_new_string("Ocaml")],
     _adS_=[0,caml_new_string("Exponent")],
     _adT_=[0,caml_new_string("Exponent_E")],
     _adU_=[0,caml_new_string("Decimal")],
     _adV_=[0,caml_new_string("Compact")],
     _adW_=[0,caml_new_string("Compact_E")],
     _adX_=[0,caml_new_string("Hex")],
     _adY_=[0,caml_new_string("Hex_E")],
     _aeq_=[0,caml_new_string("Nanosecond")],
     _aer_=[0,caml_new_string("Microsecond")],
     _aes_=[0,caml_new_string("Millisecond")],
     _aet_=[0,caml_new_string("Second")],
     _aeu_=[0,caml_new_string("Minute")],
     _aev_=[0,caml_new_string("Hour")],
     _aew_=[0,caml_new_string("Day")],
     _ae6_=[0,6],
     _ae7_=[0,0],
     _ae8_=[0,6],
     _ae9_=[0,1],
     _ae__=[0,6],
     _ae$_=[0,6],
     _afa_=[0,1],
     _afb_=[0,6],
     _ae1_=[0,[8,9,0,0,[2,0,0]],caml_new_string("%g%s")],
     _aeZ_=
      [0,
       caml_new_string
        ("src/span.ml.Stable.V1.T_of_sexp_expected_atom_but_got")],
     _ae0_=[0,caml_new_string("src/span.ml"),248,14],
     _aeW_=[0,caml_new_string("src/span.ml.Stable.V1.T_of_sexp")],
     _aeX_=[0,caml_new_string("src/span.ml"),247,14],
     _aeU_=
      [0,
       [11,
        caml_new_string("Span.of_string could not parse '"),
        [2,0,[11,caml_new_string("': "),[2,0,0]]]],
       caml_new_string("Span.of_string could not parse '%s': %s")],
     _aeS_=[11,caml_new_string(" given"),0],
     _aeT_=[0,0],
     _aeO_=[0,[4,3,0,0,[11,caml_new_string("us"),0]],caml_new_string("%ius")],
     _aeN_=[0,caml_new_string("src/span.ml"),118,6],
     _aeL_=[0,[4,0,0,0,[12,46,[4,0,0,0,[2,0,0]]]],caml_new_string("%d.%d%s")],
     _aeM_=[0,[4,0,0,0,[2,0,0]],caml_new_string("%d%s")],
     _aey_=[0,caml_new_string("ns")],
     _aez_=[0,caml_new_string("us")],
     _aeA_=[0,caml_new_string("ms")],
     _aeB_=[0,caml_new_string("sec")],
     _aeC_=[0,caml_new_string("min")],
     _aeD_=[0,caml_new_string("hr")],
     _aeE_=[0,caml_new_string("sign")],
     _agC_=[0,14572],
     _agD_=[0,14572],
     _agE_=[0,14572],
     _agF_=[0,17917],
     _agG_=[0,17917],
     _agH_=[0,17917],
     _agw_=[0,14572],
     _agx_=[0,14572],
     _agy_=[0,14572],
     _agz_=[0,14572],
     _agA_=[0,17917],
     _agB_=[0,17917],
     _agv_=[0,caml_new_string("src/ofday.ml"),365,22],
     _agt_=[0,[4,0,0,0,[2,0,[2,0,0]]],caml_new_string("%d%s%s")],
     _agu_=[0,caml_new_string("src/ofday.ml"),363,10],
     _agI_=[0,0,[0,12,0]],
     _agJ_=[0,12],
     _agM_=[0,caml_new_string("src/ofday.ml"),403,6],
     _agK_=[0,0],
     _agL_=[0,caml_new_string("src/ofday.ml"),404,6],
     _agh_=[0,caml_new_string(" ")],
     _agi_=[0,[2,0,[12,10,0]],caml_new_string("%s\n")],
     _agj_=[0,caml_new_string(" ")],
     _agk_=[0,[2,0,[12,10,0]],caml_new_string("%s\n")],
     _agc_=[0,0],
     _agd_=[0,21],
     _age_=[0,7],
     _agf_=[0,caml_new_string("src/ofday.ml"),338,6],
     _af$_=[0,21],
     _aga_=
      [0,
       caml_new_string("20:59:60"),
       [0,
        caml_new_string("20:59:60.500"),
        [0,caml_new_string("20:59:60.000"),0]]],
     _af9_=[0,caml_new_string("src/ofday.ml"),321,6],
     _af8_=[0,caml_new_string("src/ofday.ml"),322,6],
     _af7_=[0,caml_new_string("src/ofday.ml"),323,6],
     _af2_=[0,21],
     _af3_=
      [0,
       caml_new_string("20:59:60"),
       [0,
        caml_new_string("20:59:60.500"),
        [0,caml_new_string("20:59:60.000"),0]]],
     _af0_=
      [0,
       [11,caml_new_string("Ofday.of_string_iso8601_extended: "),[2,0,0]],
       caml_new_string("Ofday.of_string_iso8601_extended: %s")],
     _afZ_=
      [0,
       [11,caml_new_string("invalid second: "),[4,3,0,0,0]],
       caml_new_string("invalid second: %i")],
     _afY_=
      [0,
       [11,
        caml_new_string("Ofday.of_string_iso8601_extended("),
        [2,0,[11,caml_new_string("): "),[2,0,0]]]],
       caml_new_string("Ofday.of_string_iso8601_extended(%s): %s")],
     _afX_=[0,caml_new_string("src/ofday.ml"),147,6],
     _afF_=[0,21],
     _afG_=[0,500],
     _afH_=[0,0],
     _afI_=[0,60],
     _afJ_=[0,59],
     _afK_=[0,20],
     _afL_=[0,500],
     _afM_=[0,500],
     _afN_=[0,60],
     _afO_=[0,59],
     _afP_=[0,20],
     _afQ_=[0,500],
     _afR_=[0,60],
     _afS_=[0,59],
     _afT_=[0,20],
     _afU_=[0,60],
     _afV_=[0,59],
     _afW_=[0,20],
     _afB_=[0,0],
     _afC_=[0,0],
     _afD_=[0,0],
     _afA_=
      [0,
       [11,caml_new_string("Ofday out of range: "),[8,0,0,0,0]],
       caml_new_string("Ofday out of range: %f")],
     _agm_=
      [1,
       caml_new_string
        ("\n        a A am AM a.m A.M a.m. A.M.\n        p P pm PM p.m P.M p.m. P.M.\n      ")],
     _agn_=[0,caml_new_string("")],
     _agp_=[0,caml_new_string("the permissible suffixes are reasonable")],
     _ahd_=[0,[0,caml_new_string("src/time.ml"),463,16899,16908]],
     _ahe_=[0,759637122],
     _ahc_=
      [0,
       [11,
        caml_new_string("unable to lookup Zone "),
        [2,0,[11,caml_new_string(".  Try using Core.Time.of_string"),0]]],
       caml_new_string
        ("unable to lookup Zone %s.  Try using Core.Time.of_string")],
     _aha_=[0,caml_new_string("src/time.ml.Make.Time_of_string")],
     _ahb_=[0,caml_new_string("src/time.ml"),399,12],
     _ag$_=
      [0,
       [11,caml_new_string("invalid offset "),[2,0,0]],
       caml_new_string("invalid offset %s")],
     _ag__=
      [0,
       [11,caml_new_string("no space in date_ofday string: "),[2,0,0]],
       caml_new_string("no space in date_ofday string: %s")],
     _ag9_=
      [0,
       [11,
        caml_new_string("Time.of_filename_string ("),
        [2,0,[11,caml_new_string("): "),[2,0,0]]]],
       caml_new_string("Time.of_filename_string (%s): %s")],
     _ag8_=[0,caml_new_string("T")],
     _ag7_=[0,caml_new_string(" ")],
     _ag6_=[0,caml_new_string(" ")],
     _ag5_=[0,caml_new_string("")],
     _ag1_=[0,caml_new_string("zone")],
     _ag2_=[0,caml_new_string("span_since_epoch")],
     _ag3_=[0,caml_new_string("src/time.ml"),254,10],
     _ag4_=[0,caml_new_string("src/time.ml"),264,10],
     _ak6_=[255,3592825,6504014,6403],
     _ak5_=[255,3572572,3805748,6452],
     _ak4_=[255,3218009,3443717,5528],
     _ak3_=[255,14914634,3559975,6990],
     _ak2_=[255,10128239,7823995,6508],
     _ak1_=[255,15705767,6589456,6964],
     _ak0_=[255,9526796,7037225,5011],
     _akZ_=[255,2423262,8872785,4975],
     _akY_=[255,2581824,1376803,3630],
     _akX_=[255,15256210,899828,6407],
     _akW_=[255,10406765,14649415,4460],
     _akV_=[255,7099515,10864978,5396],
     _akU_=[255,8367978,333298,5295],
     _akT_=[255,9465195,4860849,4209],
     _akS_=[255,14072699,264866,6662],
     _akR_=[255,6450762,14103543,6023],
     _akQ_=[255,14571610,8991192,5352],
     _akP_=[255,267642,13647884,5621],
     _akO_=[255,10934933,16001313,3618],
     _akN_=[255,3121002,5773382,5194],
     _akM_=[255,1841206,14101273,6014],
     _akL_=[255,10262219,7455268,4840],
     _akK_=[255,16234870,3942632,5443],
     _akJ_=[255,14456350,13785658,5693],
     _akI_=[255,12470491,11859101,4655],
     _akH_=[255,10145913,7630731,5047],
     _akG_=[255,10329938,16011676,4207],
     _akF_=[255,666135,10436809,4300],
     _akE_=[255,1865121,16716773,4598],
     _akD_=[255,14455353,8308782,6950],
     _akC_=[255,9040020,13180219,7019],
     _akB_=[255,11719281,5162180,4463],
     _akA_=[255,1455373,468348,5746],
     _akz_=[255,9471318,5717697,4936],
     _aky_=[255,13774193,14937341,5049],
     _akx_=[255,1045592,91278,4680],
     _akw_=[255,12401059,12547961,6863],
     _akv_=[255,10479818,3902757,5837],
     _aku_=[255,5956469,7529167,4380],
     _akt_=[255,7278757,13220723,6272],
     _aks_=[255,5887866,7299692,4958],
     _akr_=[255,12763504,1451311,5103],
     _akq_=[255,3552824,11956373,4341],
     _akp_=[255,2337176,3635718,5433],
     _ako_=[255,1889907,5836017,5589],
     _akn_=[255,1294697,10982222,4177],
     _akm_=[255,11808537,16765390,5439],
     _akl_=[255,7249756,12005697,6427],
     _akk_=[255,10398741,5214217,7095],
     _akj_=[255,4878186,14454421,4641],
     _aki_=[255,3237247,11631952,5507],
     _akh_=[255,4700771,10613359,4969],
     _akg_=[255,16068014,16155779,5065],
     _akf_=[255,281388,6623174,5733],
     _ake_=[255,7111514,15585112,4819],
     _akd_=[255,3760255,16191054,4408],
     _akc_=[255,16122458,8845794,5528],
     _akb_=[255,11780563,7316877,6948],
     _aka_=[255,1011828,9999681,4806],
     _aj$_=[255,7468314,7742636,3599],
     _aj__=[255,2730934,9199554,6999],
     _aj9_=[255,4868976,8745669,4883],
     _aj8_=[255,15265416,16666550,4066],
     _aj7_=[255,2796396,11316959,4574],
     _aj6_=[255,9557799,10210599,5420],
     _aj5_=[255,10882673,14994618,6172],
     _aj4_=[255,3102,15646419,7011],
     _aj3_=[255,4554083,6821823,5534],
     _aj2_=[255,14301329,12879945,4591],
     _aj1_=[255,15600439,14264348,7096],
     _aj0_=[255,7333420,16341723,3694],
     _ajZ_=[255,4982638,176314,4340],
     _ajY_=[255,4786039,10965268,4700],
     _ajX_=[255,2303113,4089311,4835],
     _ajW_=[255,4051264,6461396,6553],
     _ajV_=[255,15734217,6343194,3736],
     _ajU_=[255,2577534,1785030,6287],
     _ajT_=[255,5493170,3349155,5659],
     _ajS_=[255,858747,7699676,3916],
     _ajR_=[255,3006546,10348035,4817],
     _ajQ_=[255,926306,15146505,5454],
     _ajP_=[255,8270205,11612937,6628],
     _ajO_=[255,4696694,15008758,4538],
     _ajN_=[255,7144277,13123796,4259],
     _ajM_=[255,13255283,12322758,4873],
     _ajL_=[255,8779057,1416573,4335],
     _ajK_=[255,1040734,12337203,4623],
     _ajJ_=[255,645714,13817444,5587],
     _ajI_=[255,6034270,204419,4856],
     _ajH_=[255,2394199,3574870,6807],
     _ajG_=[255,8554816,2839273,6323],
     _ajF_=[255,5989984,741302,6200],
     _ajE_=[255,14855270,5560979,5423],
     _ajD_=[255,3578471,5813466,4735],
     _ajC_=[255,8705402,12743388,4981],
     _ajB_=[255,6250334,12466515,4152],
     _ajA_=[255,12492235,923695,3601],
     _ajz_=[255,1744741,1195189,6359],
     _ajy_=[255,6107006,4850155,5226],
     _ajx_=[255,16764014,677153,4194],
     _ajw_=[255,2831958,16755291,4188],
     _ajv_=[255,15691118,8485327,4232],
     _aju_=[255,7412177,941966,6968],
     _ajt_=[255,13160290,5900881,4614],
     _ajs_=[255,4865853,3443525,5287],
     _ajr_=[255,8856662,4356722,6680],
     _ajq_=[255,8639320,13316495,6166],
     _ajp_=[255,3218298,7576682,5934],
     _ajo_=[255,15703848,12832208,4685],
     _ajn_=[255,958287,9906549,4899],
     _ajm_=[255,3741050,9676929,5354],
     _ajl_=[255,11191460,7759651,4617],
     _ajk_=[255,1975617,10439699,4358],
     _ajj_=[255,141685,9502974,5281],
     _aji_=[255,16269820,12506435,4350],
     _ajh_=[255,13556418,5820145,5168],
     _ajg_=[255,5706828,15849530,4635],
     _ajf_=[255,12721250,14901960,5374],
     _aje_=[255,5764733,6349647,5057],
     _ajd_=[255,13968887,5665545,4007],
     _ajc_=[255,10535283,5815447,3777],
     _ajb_=[255,15159405,9095442,4410],
     _aja_=[255,5257303,10743480,4273],
     _ai$_=[255,5076788,5687506,5565],
     _ai__=[255,5011808,1550404,4458],
     _ai9_=[255,4434794,14508264,4797],
     _ai8_=[255,5342854,9711839,4138],
     _ai7_=[255,8675605,4168696,5039],
     _ai6_=[255,13315165,13902518,4378],
     _ai5_=[255,22613,4346779,5993],
     _ai4_=[255,10219135,13740346,4696],
     _ai3_=[255,7872037,5557554,4184],
     _ai2_=[255,13678065,13786422,6302],
     _ai1_=[255,6009491,1814052,5396],
     _ai0_=[255,16475657,9690102,6520],
     _aiZ_=[255,5788541,11804031,5250],
     _aiY_=[255,16506421,11539140,5783],
     _aiX_=[255,1122892,8978439,6051],
     _aiW_=[255,7160859,14517463,6374],
     _aiV_=[255,3299145,3494325,5569],
     _aiU_=[255,2035541,7204964,5380],
     _aiT_=[255,14786894,5206707,5364],
     _aiS_=[255,1984590,71285,5623],
     _aiR_=[255,13243484,9081841,4579],
     _aiQ_=[255,14401712,1581468,4582],
     _aiP_=[255,8700013,2975265,5081],
     _aiO_=[255,10508366,9887880,6441],
     _aiN_=[255,11505003,7232065,4381],
     _aiM_=[255,3403083,13599308,4379],
     _aiL_=[255,3818669,8159783,5921],
     _aiE_=[0,caml_new_string("upper_bound")],
     _aiF_=[0,caml_new_string("lower_bound")],
     _aiG_=[0,caml_new_string("result")],
     _aiH_=[0,caml_new_string("after")],
     _aiI_=[0,caml_new_string("base")],
     _aiJ_=[0,caml_new_string("interval")],
     _aiK_=[0,caml_new_string("can_equal_after")],
     _aix_=[0,caml_new_string("src/time_ns.ml"),568,6],
     _aiw_=[0,caml_new_string("src/time_ns.ml"),550,8],
     _aiv_=[0,caml_new_string("src/time_ns.ml"),562,17],
     _aim_=[0,[12,46,[4,0,[0,2,1],0,0]],caml_new_string(".%01d")],
     _ain_=[0,[12,46,[4,0,[0,2,2],0,0]],caml_new_string(".%02d")],
     _aio_=[0,[12,46,[4,0,[0,2,3],0,0]],caml_new_string(".%03d")],
     _aip_=[0,[12,46,[4,0,[0,2,4],0,0]],caml_new_string(".%04d")],
     _aiq_=[0,[12,46,[4,0,[0,2,5],0,0]],caml_new_string(".%05d")],
     _air_=[0,[12,46,[4,0,[0,2,6],0,0]],caml_new_string(".%06d")],
     _ais_=[0,[12,46,[4,0,[0,2,7],0,0]],caml_new_string(".%07d")],
     _ait_=[0,[12,46,[4,0,[0,2,8],0,0]],caml_new_string(".%08d")],
     _aiu_=[0,[12,46,[4,0,[0,2,9],0,0]],caml_new_string(".%09d")],
     _ail_=[0,caml_new_string("src/time_ns.ml"),516,13],
     _aik_=[0,caml_new_string("src/time_ns.ml"),505,6],
     _aij_=
      [0,
       [4,0,[0,2,2],0,[12,58,[4,0,[0,2,2],0,[12,58,[4,0,[0,2,2],0,0]]]]],
       caml_new_string("%02d:%02d:%02d")],
     _aii_=[0,caml_new_string("src/time_ns.ml"),480,4],
     _aig_=[0,[0,caml_new_string("src/time_ns.ml"),424,15090,15092]],
     _ah5_=[255,14725029,14809269,7879],
     _ah4_=[0,25],
     _ahX_=[0,7],
     _ahY_=[0,6],
     _ahZ_=[0,5],
     _ah0_=[0,4],
     _ah1_=[0,3],
     _ah2_=[0,2],
     _ah3_=[0,0],
     _ahV_=[0,242],
     _ahW_=[0,3],
     _ahT_=[0,9],
     _ahU_=[0,1],
     _ahR_=[0,8],
     _ahS_=[0,0],
     _ahQ_=[0,7],
     _ahP_=[0,6],
     _ahO_=[0,5],
     _ahN_=[0,4],
     _ahM_=[0,3],
     _ahL_=[0,2],
     _ahx_=
      [0,
       [11,
        caml_new_string("Span.of_string could not parse '"),
        [2,0,[11,caml_new_string("': "),[2,0,0]]]],
       caml_new_string("Span.of_string could not parse '%s': %s")],
     _ahj_=[0,caml_new_string("ns")],
     _ahk_=[0,caml_new_string("us")],
     _ahl_=[0,caml_new_string("ms")],
     _ahm_=[0,caml_new_string("sec")],
     _ahn_=[0,caml_new_string("min")],
     _aho_=[0,caml_new_string("hr")],
     _ahp_=[0,caml_new_string("sign")],
     _ahs_=[0,caml_new_string("64-bits-only"),0],
     _alb_=
      [0,
       [11,caml_new_string("Time.gmtime: out of range ("),[8,0,0,0,[12,41,0]]],
       caml_new_string("Time.gmtime: out of range (%f)")],
     _all_=
      [0,
       [11,caml_new_string("Time.Stable.With_utc.V2.t_of_sexp: "),[2,0,0]],
       caml_new_string("Time.Stable.With_utc.V2.t_of_sexp: %s")],
     _amC_=[0,caml_new_string("application_specific_fields")],
     _amD_=[0,caml_new_string("build_system")],
     _amE_=[0,caml_new_string("executable_path")],
     _amF_=[0,caml_new_string("ocaml_version")],
     _amG_=[0,caml_new_string("dynlinkable_code")],
     _amH_=[0,caml_new_string("portable_int63")],
     _amI_=[0,caml_new_string("x_library_inlining")],
     _amJ_=[0,caml_new_string("build_time")],
     _amK_=[0,caml_new_string("kernel")],
     _amL_=[0,caml_new_string("hostname")],
     _amM_=[0,caml_new_string("username")],
     _am8_=[0,caml_new_string("src/validated.ml"),170,18],
     _am9_=[0,caml_new_string("src/validated.ml"),169,21],
     _am7_=[0,caml_new_string("src/validated.ml"),163,8],
     _am6_=[0,caml_new_string("src/validated.ml"),157,18],
     _am5_=[0,caml_new_string("src/validated.ml"),152,24],
     _am4_=[0,caml_new_string("src/validated.ml"),145,8],
     _am3_=[0,caml_new_string("src/validated.ml"),141,24],
     _anQ_=[0,0],
     _anR_=[0,0],
     _anP_=[0,0],
     _anO_=[0,caml_new_string("src/unpack_buffer.ml"),259,4],
     _anI_=[0,caml_new_string("_")],
     _anN_=[0,caml_new_string("src/unpack_buffer.ml"),215,6],
     _anM_=[0,caml_new_string("src/unpack_buffer.ml"),216,6],
     _anL_=[0,caml_new_string("src/unpack_buffer.ml"),217,24],
     _anK_=[0,caml_new_string("src/unpack_buffer.ml"),218,6],
     _anJ_=[0,[0,caml_new_string("src/unpack_buffer.ml"),220,7192,7196]],
     _anH_=[0,caml_new_string("state")],
     _anE_=[0,caml_new_string("_")],
     _anF_=[0,caml_new_string("Alive")],
     _anG_=[0,caml_new_string("Dead")],
     _anz_=[0,caml_new_string("len")],
     _anA_=[0,caml_new_string("pos")],
     _anB_=[0,caml_new_string("buf")],
     _anC_=[0,caml_new_string("unpack_one")],
     _anD_=[0,caml_new_string("partial_unpack")],
     _anw_=[0,caml_new_string("expected")],
     _anx_=[0,caml_new_string("parsed")],
     _anv_=[0,658743757,[0,0,0]],
     _ao0_=[0,caml_new_string("src/univ_map.ml"),293,4],
     _aoT_=[0,1,0],
     _aoZ_=[0,caml_new_string("src/univ_map.ml"),295,4],
     _aoU_=[0,2,[0,3,0]],
     _aoV_=[0,2,[0,3,0]],
     _aoY_=[0,caml_new_string("src/univ_map.ml"),297,4],
     _aoW_=[0,-2,[0,-3,0]],
     _aoX_=[0,caml_new_string("src/univ_map.ml"),299,4],
     _aoO_=[0,caml_new_string("src/univ_map.ml"),269,38],
     _aoR_=[0,caml_new_string("src/univ_map.ml"),271,4],
     _aoQ_=[0,caml_new_string("src/univ_map.ml"),273,4],
     _aoP_=[0,caml_new_string("src/univ_map.ml"),275,4],
     _aoM_=[0,caml_new_string("src/univ_map.ml"),261,4],
     _aoL_=[0,caml_new_string("src/univ_map.ml"),263,4],
     _aoK_=[0,caml_new_string("src/univ_map.ml"),265,4],
     _aoH_=[0,caml_new_string("src/univ_map.ml"),229,4],
     _aoG_=[0,caml_new_string("src/univ_map.ml"),231,4],
     _aoF_=[0,caml_new_string("src/univ_map.ml"),233,4],
     _aoE_=[0,caml_new_string("src/univ_map.ml"),235,4],
     _aoB_=[0,caml_new_string("src/univ_map.ml"),170,6],
     _aoC_=[0,caml_new_string("src/univ_map.ml"),174,6],
     _aoz_=[0,caml_new_string("src/univ_map.ml"),162,6],
     _aoA_=[0,caml_new_string("src/univ_map.ml"),166,6],
     _aoy_=[0,caml_new_string("src/univ_map.ml"),155,6],
     _aov_=[0,caml_new_string("src/univ_map.ml"),149,30],
     _aow_=[0,caml_new_string("src/univ_map.ml"),150,30],
     _aox_=[0,caml_new_string("src/univ_map.ml"),151,30],
     _aor_=[0,caml_new_string("src/univ_map.ml"),136,48],
     _aoq_=[0,caml_new_string("src/univ_map.ml"),132,6],
     _aou_=[0,caml_new_string("src/univ_map.ml"),133,6],
     _aos_=[0,caml_new_string("src/univ_map.ml"),140,19],
     _aot_=[0,caml_new_string("src/univ_map.ml"),139,16],
     _an8_=
      [0,
       [11,caml_new_string("Univ_map.change_exn on unknown key "),[2,0,0]],
       caml_new_string("Univ_map.change_exn on unknown key %s")],
     _an7_=
      [0,
       [11,caml_new_string("Univ_map.add_exn on existing key "),[2,0,0]],
       caml_new_string("Univ_map.add_exn on existing key %s")],
     _an6_=
      [0,
       [11,caml_new_string("Univ_map.find_exn on unknown key "),[2,0,0]],
       caml_new_string("Univ_map.find_exn on unknown key %s")],
     _an4_=[0,caml_new_string("_")],
     _an3_=[0,caml_new_string("src/univ_map.ml"),33,8],
     _an5_=[0,caml_new_string("src/univ_map.ml"),31,772,796],
     _ao7_=[0,caml_new_string("_")],
     _ao4_=[0,caml_new_string("_")],
     _ao5_=[0,[0,caml_new_string("src/univ.ml"),34,677,681]],
     _app_=
      [0,
       [11,caml_new_string("Immediate.value_as_int_exn: typename:"),[3,0,0]],
       caml_new_string("Immediate.value_as_int_exn: typename:%S")],
     _apo_=
      [0,
       [11,
        caml_new_string("Immediate.int_as_value_exn: typename:"),
        [3,0,[11,caml_new_string(" int:"),[4,0,0,0,0]]]],
       caml_new_string("Immediate.int_as_value_exn: typename:%S int:%d")],
     _apn_=
      [0,
       [11,
        caml_new_string("type "),
        [2,0,[11,caml_new_string(" is not independent of its arguments"),0]]],
       caml_new_string("type %s is not independent of its arguments")],
     _apm_=
      [0,
       [11,
        caml_new_string("type "),
        [2,
         0,
         [11,
          caml_new_string(" does not have desired immediacy: wanted "),
          [2,0,[11,caml_new_string(" but got "),[2,0,0]]]]]],
       caml_new_string
        ("type %s does not have desired immediacy: wanted %s but got %s")],
     _apl_=[0,caml_new_string("src/type_immediacy.ml"),208,30],
     _apf_=[1,0],
     _apg_=[1,0],
     _aph_=[1,0],
     _api_=[1,1],
     _apj_=[1,255],
     _apG_=[0,caml_new_string("Slots")],
     _apF_=[0,caml_new_string("slots_per_tuple")],
     _apM_=[0,[0,caml_new_string("src/total_map.ml"),9,142,144]],
     _apU_=[0,[2,0,[11,caml_new_string(":\n"),0]],caml_new_string("%s:\n")],
     _apV_=[0,[2,0,[12,10,0]],caml_new_string("%s\n")],
     _apW_=[0,[2,0,[12,10,0]],caml_new_string("%s\n")],
     _apX_=[0,[10,0],caml_new_string("%!")],
     _apP_=[0,caml_new_string("")],
     _apQ_=[0,[0,caml_new_string("src/debug.ml"),27,728,738]],
     _apR_=[0,[0,caml_new_string("src/debug.ml"),34,981,991]],
     _apS_=[0,caml_new_string("-result"),0],
     _apT_=[0,caml_new_string("")],
     _apO_=[0,[2,0,[12,10,[10,0]]],caml_new_string("%s\n%!")],
     _arr_=[0,caml_new_string("_")],
     _ars_=[0,[0,caml_new_string("src/pool.ml"),1089,36292,36303]],
     _arp_=[0,caml_new_string("pointer")],
     _arq_=[0,caml_new_string("is_valid")],
     _aro_=[0,caml_new_string("_")],
     _arn_=[0,caml_new_string("_")],
     _arm_=[0,caml_new_string("_")],
     _arl_=[0,caml_new_string("_")],
     _ark_=[0,caml_new_string("_")],
     _arj_=[0,caml_new_string("_")],
     _ari_=[0,caml_new_string("_")],
     _arh_=[0,caml_new_string("_")],
     _arg_=[0,caml_new_string("_")],
     _arf_=[0,caml_new_string("capacity")],
     _are_=[0,caml_new_string("_")],
     _ard_=[0,caml_new_string("_")],
     _arc_=[0,caml_new_string("_")],
     _arb_=[0,caml_new_string("_")],
     _ara_=[0,caml_new_string("_")],
     _aq$_=[0,caml_new_string("_")],
     _aq__=[0,caml_new_string("_")],
     _aq9_=[0,caml_new_string("_")],
     _aq8_=[0,caml_new_string("_")],
     _aq7_=[0,caml_new_string("_")],
     _aq6_=[0,caml_new_string("_")],
     _aq5_=[0,caml_new_string(" result"),0],
     _aq3_=[0,caml_new_string("_")],
     _aq2_=[0,caml_new_string("_")],
     _aq4_=[0,[0,caml_new_string("src/pool.ml"),671,21399,21408]],
     _aq0_=[0,caml_new_string("_")],
     _aq1_=[0,[0,caml_new_string("src/pool.ml"),632,19815,19819]],
     _aqZ_=[0,[0,caml_new_string("src/pool.ml"),603,18886,18895]],
     _aqX_=[0,caml_new_string("max")],
     _aqW_=[0,[0,caml_new_string("src/pool.ml"),539,16935,16944]],
     _aqY_=[0,[0,caml_new_string("src/pool.ml"),543,17159,17168]],
     _aqK_=[0,caml_new_string("_")],
     _aqV_=[0,caml_new_string("src/pool.ml"),457,56],
     _aqU_=[0,caml_new_string("src/pool.ml"),459,10],
     _aqT_=[0,caml_new_string("src/pool.ml"),460,10],
     _aqS_=[0,caml_new_string("src/pool.ml"),462,10],
     _aqR_=[0,caml_new_string("src/pool.ml"),463,10],
     _aqQ_=[0,caml_new_string("src/pool.ml"),470,12],
     _aqP_=[0,caml_new_string("src/pool.ml"),472,12],
     _aqO_=[0,[0,caml_new_string("src/pool.ml"),475,14592,14609]],
     _aqM_=[0,caml_new_string("src/pool.ml"),480,26],
     _aqN_=[0,caml_new_string("src/pool.ml"),489,18],
     _aqL_=[0,[0,caml_new_string("src/pool.ml"),493,15449,15455]],
     _aqH_=[0,caml_new_string("_")],
     _aqJ_=[0,[0,caml_new_string("src/pool.ml"),443,13193,13206]],
     _aqI_=[0,[0,caml_new_string("src/pool.ml"),448,13394,13400]],
     _aqB_=[0,caml_new_string("dummy")],
     _aqC_=[0,caml_new_string("first_free")],
     _aqD_=[0,caml_new_string("next_id")],
     _aqE_=[0,caml_new_string("length")],
     _aqF_=[0,caml_new_string("capacity")],
     _aqG_=[0,caml_new_string("slots_per_tuple")],
     _aqo_=[0,caml_new_string("src/pool.ml"),344,6],
     _aqk_=[0,caml_new_string("null")],
     _aql_=[0,caml_new_string("Free")],
     _aqm_=[0,caml_new_string("Used")],
     _aqj_=[0,caml_new_string("src/pool.ml"),320,8],
     _aqi_=[0,caml_new_string("src/pool.ml"),321,8],
     _aqe_=[0,caml_new_string("_")],
     _aqf_=[0,[0,caml_new_string("src/pool.ml"),271,7701,7716]],
     _aqd_=[0,[0,caml_new_string("src/pool.ml"),273,7788,7796]],
     _aqa_=[0,caml_new_string("src/pool.ml"),237,30],
     _ap__=
      [0,
       [11,
        caml_new_string("<Obj_array.Pointer.t: 0x"),
        [4,6,[0,2,8],0,[12,62,0]]],
       caml_new_string("<Obj_array.Pointer.t: 0x%08x>")],
     _ap8_=[0,[0,caml_new_string("src/pool.ml"),157,4385,4405]],
     _ap7_=[0,caml_new_string("src/pool.ml"),140,22],
     _apZ_=[0,caml_new_string("capacity")],
     _ap0_=[0,caml_new_string("old_capacity")],
     _ap1_=[0,[0,caml_new_string("src/pool.ml"),29,593,604]],
     _apY_=[0,caml_new_string("")],
     _aYB_=[0,caml_new_string("src/pool.ml"),104,6],
     _aYC_=[0,caml_new_string("src/pool.ml"),107,6],
     _aux_=[0,caml_new_string("_")],
     _auy_=[0,caml_new_string("timing_wheel")],
     _auv_=[0,caml_new_string("_")],
     _auw_=[0,caml_new_string("timing_wheel")],
     _aut_=[0,caml_new_string("_")],
     _auu_=[0,caml_new_string("timing_wheel")],
     _aur_=[0,caml_new_string("now_interval_num_start")],
     _aus_=[0,caml_new_string("at")],
     _aup_=[0,caml_new_string("alarm_upper_bound")],
     _auq_=[0,caml_new_string("at")],
     _auo_=[0,caml_new_string("src/timing_wheel_ns.ml"),1495,53],
     _aun_=[0,caml_new_string("start")],
     _aul_=[0,caml_new_string("max_time")],
     _aum_=[0,caml_new_string("to_")],
     _auj_=[0,caml_new_string("_")],
     _aui_=[0,caml_new_string("src/timing_wheel_ns.ml"),1451,6],
     _auh_=[0,caml_new_string("src/timing_wheel_ns.ml"),1453,6],
     _aug_=[0,caml_new_string("src/timing_wheel_ns.ml"),1456,6],
     _auf_=[0,caml_new_string("src/timing_wheel_ns.ml"),1433,8],
     _aue_=[0,caml_new_string("src/timing_wheel_ns.ml"),1434,8],
     _aud_=[0,caml_new_string("src/timing_wheel_ns.ml"),1440,8],
     _auc_=[0,caml_new_string("src/timing_wheel_ns.ml"),1441,8],
     _aub_=[0,caml_new_string("src/timing_wheel_ns.ml"),1442,8],
     _auk_=[0,caml_new_string("src/timing_wheel_ns.ml"),1428,50293,50315],
     _at$_=[0,caml_new_string("t.max_interval_num")],
     _aua_=[0,caml_new_string("interval_num")],
     _at9_=[0,caml_new_string("min_interval_num")],
     _at__=[0,caml_new_string("interval_num")],
     _at7_=[0,caml_new_string("time")],
     _at8_=[0,caml_new_string("time")],
     _atY_=[0,caml_new_string("interval_num")],
     _atZ_=[0,caml_new_string("time")],
     _atS_=[0,caml_new_string("alarms")],
     _atT_=[0,caml_new_string("now")],
     _atU_=[0,caml_new_string("max_interval_num")],
     _atV_=[0,caml_new_string("start")],
     _atW_=[0,caml_new_string("config")],
     _atQ_=[0,caml_new_string("value")],
     _atR_=[0,caml_new_string("at")],
     _atz_=[0,caml_new_string("_")],
     _atA_=[0,caml_new_string("timing_wheel")],
     _atB_=[0,caml_new_string("key")],
     _aty_=[0,caml_new_string("src/timing_wheel_ns.ml"),1018,4],
     _atx_=[0,caml_new_string("src/timing_wheel_ns.ml"),1042,4],
     _atw_=[0,caml_new_string("src/timing_wheel_ns.ml"),1043,4],
     _att_=[0,caml_new_string("_")],
     _atu_=[0,caml_new_string("timing_wheel")],
     _atv_=[0,caml_new_string("key")],
     _atq_=[0,caml_new_string("_")],
     _atr_=[0,caml_new_string("level")],
     _ats_=[0,caml_new_string("key")],
     _atl_=[0,caml_new_string("_")],
     _atm_=[0,caml_new_string("priority_queue")],
     _atn_=[0,caml_new_string("max_allowed_key t")],
     _ato_=[0,caml_new_string("min_allowed_key t")],
     _atp_=[0,caml_new_string("key")],
     _atj_=[0,caml_new_string("_")],
     _ate_=[0,caml_new_string("src/timing_wheel_ns.ml"),782,38],
     _atd_=[0,caml_new_string("src/timing_wheel_ns.ml"),787,12],
     _atc_=[0,caml_new_string("src/timing_wheel_ns.ml"),788,12],
     _atb_=[0,caml_new_string("src/timing_wheel_ns.ml"),790,10],
     _ata_=[0,caml_new_string("src/timing_wheel_ns.ml"),791,10],
     _as$_=[0,caml_new_string("src/timing_wheel_ns.ml"),793,15],
     _as9_=[0,caml_new_string("src/timing_wheel_ns.ml"),797,12],
     _as8_=[0,caml_new_string("src/timing_wheel_ns.ml"),806,14],
     _as7_=[0,caml_new_string("src/timing_wheel_ns.ml"),807,14],
     _as__=[0,caml_new_string("src/timing_wheel_ns.ml"),795,10],
     _ati_=[0,caml_new_string("src/timing_wheel_ns.ml"),777,6],
     _ath_=[0,caml_new_string("src/timing_wheel_ns.ml"),778,6],
     _atg_=[0,caml_new_string("src/timing_wheel_ns.ml"),779,6],
     _atf_=[0,caml_new_string("src/timing_wheel_ns.ml"),780,6],
     _as5_=[0,caml_new_string("_")],
     _as4_=[0,caml_new_string("src/timing_wheel_ns.ml"),730,38],
     _as3_=[0,caml_new_string("src/timing_wheel_ns.ml"),731,36],
     _as2_=[0,caml_new_string("src/timing_wheel_ns.ml"),735,12],
     _as1_=[0,caml_new_string("src/timing_wheel_ns.ml"),740,12],
     _as0_=[0,caml_new_string("src/timing_wheel_ns.ml"),748,12],
     _asZ_=[0,caml_new_string("src/timing_wheel_ns.ml"),754,12],
     _asY_=[0,caml_new_string("src/timing_wheel_ns.ml"),769,18],
     _asX_=[0,caml_new_string("src/timing_wheel_ns.ml"),770,18],
     _asW_=[0,caml_new_string("src/timing_wheel_ns.ml"),771,18],
     _asV_=[0,caml_new_string("src/timing_wheel_ns.ml"),772,18],
     _as6_=[0,caml_new_string("src/timing_wheel_ns.ml"),727,23603,23629],
     _atk_=[0,caml_new_string("src/timing_wheel_ns.ml"),775,26317,26341],
     _asS_=[0,caml_new_string("elts")],
     _asT_=[0,caml_new_string("max_allowed_key")],
     _asU_=[0,caml_new_string("min_allowed_key")],
     _asQ_=[0,caml_new_string("value")],
     _asR_=[0,caml_new_string("key")],
     _asL_=[0,caml_new_string("levels")],
     _asM_=[0,caml_new_string("elt_key_lower_bound")],
     _asN_=[0,caml_new_string("min_elt")],
     _asO_=[0,caml_new_string("pool")],
     _asP_=[0,caml_new_string("length")],
     _asq_=[0,caml_new_string("slots")],
     _asr_=[0,caml_new_string("max_allowed_key")],
     _ass_=[0,caml_new_string("min_allowed_key")],
     _ast_=[0,caml_new_string("length")],
     _asu_=[0,caml_new_string("num_allowed_keys")],
     _asv_=[0,caml_new_string("min_key_in_same_slot_mask")],
     _asw_=[0,caml_new_string("keys_per_slot")],
     _asx_=[0,caml_new_string("bits_per_slot")],
     _asy_=[0,caml_new_string("slots_mask")],
     _asz_=[0,caml_new_string("bits")],
     _asA_=[0,caml_new_string("index")],
     _ar4_=[0,caml_new_string("_")],
     _ar5_=[0,caml_new_string("elt")],
     _ar2_=[0,caml_new_string("_")],
     _ar1_=[0,caml_new_string("src/timing_wheel_ns.ml"),489,8],
     _ar0_=[0,caml_new_string("src/timing_wheel_ns.ml"),492,8],
     _arZ_=[0,caml_new_string("src/timing_wheel_ns.ml"),494,8],
     _ar3_=[0,caml_new_string("src/timing_wheel_ns.ml"),488,15737,15763],
     _arP_=[0,10,[0,10,[0,6,[0,6,[0,5,0]]]]],
     _arO_=[0,caml_new_string("src/timing_wheel_ns.ml"),220,6865,6889],
     _arN_=[0,caml_new_string("level_bits")],
     _arM_=[0,caml_new_string("alarm_precision")],
     _arH_=[0,caml_new_string("span")],
     _arE_=[0,caml_new_string("max_num_bits")],
     _arF_=[0,caml_new_string("got")],
     _arD_=[0,caml_new_string("src/timing_wheel_ns.ml"),108,6],
     _arC_=[0,caml_new_string("src/timing_wheel_ns.ml"),105,4],
     _arz_=[0,caml_new_string("src/timing_wheel_ns.ml"),78,4],
     _ary_=[0,caml_new_string("src/timing_wheel_ns.ml"),79,4],
     _arG_=[0,11,[0,10,[0,10,[0,10,[0,10,[0,10,0]]]]]],
     _at1_=
      [1,
       caml_new_string
        ("\n    ((time -5) (interval_num -2))\n    ((time -4) (interval_num -1))\n    ((time -3) (interval_num -1))\n    ((time -2) (interval_num -1))\n    ((time -1) (interval_num -1))\n    ((time 0) (interval_num 0))\n    ((time 1) (interval_num 0))\n    ((time 2) (interval_num 0))\n    ((time 3) (interval_num 0))\n    ((time 4) (interval_num 1)) ")],
     _at2_=[0,caml_new_string("")],
     _at4_=[0,caml_new_string("[interval_num_internal]")],
     _auW_=[0,caml_new_string("_")],
     _auX_=[0,[0,caml_new_string("src/thread_safe_queue.ml"),153,4210,4212]],
     _auU_=[0,caml_new_string("_")],
     _auT_=[0,caml_new_string("src/thread_safe_queue.ml"),91,8],
     _auR_=[0,caml_new_string("src/thread_safe_queue.ml"),99,10],
     _auS_=[0,caml_new_string("src/thread_safe_queue.ml"),101,8],
     _auQ_=[0,caml_new_string("src/thread_safe_queue.ml"),103,8],
     _auP_=[0,caml_new_string("src/thread_safe_queue.ml"),109,10],
     _auV_=[0,caml_new_string("src/thread_safe_queue.ml"),87,2494,2516],
     _auL_=[0,caml_new_string("unused_elts")],
     _auM_=[0,caml_new_string("back")],
     _auN_=[0,caml_new_string("front")],
     _auO_=[0,caml_new_string("length")],
     _auB_=[0,caml_new_string("next")],
     _auC_=[0,caml_new_string("value")],
     _avq_=[0,0],
     _avp_=
      [0,
       [11,
        caml_new_string("Substring.blit_from_"),
        [2,
         0,
         [11,
          caml_new_string(" len > substring length : "),
          [4,0,0,0,[11,caml_new_string(" > "),[4,0,0,0,0]]]]]],
       caml_new_string
        ("Substring.blit_from_%s len > substring length : %d > %d")],
     _avo_=[0,105],
     _avn_=[0,98],
     _avm_=[0,98],
     _avk_=[0,8],
     _avl_=[0,1],
     _avj_=[0,108,[0,108,[0,101,0]]],
     _avi_=[0,108,[0,108,[0,101,0]]],
     _avh_=[0,101,[0,108,[0,108,0]]],
     _avf_=[0,3],
     _avg_=[0,1],
     _avd_=[0,0],
     _ave_=[0,5],
     _avb_=[0,0],
     _avc_=[0,2],
     _ava_=[0,3],
     _au__=[0,3],
     _au$_=[0,1],
     _au8_=[0,4],
     _au9_=[0,1],
     _au6_=[0,5],
     _au7_=[0,0],
     _au4_=[0,4],
     _au5_=[0,0],
     _au2_=[0,4],
     _au3_=[0,1],
     _au0_=[0,3],
     _au1_=[0,1],
     _auY_=[0,2],
     _auZ_=[0,3],
     _av5_=[0,0],
     _av4_=[0,0],
     _av3_=
      [0,
       [12,
        39,
        [2,
         0,
         [11,
          caml_new_string("' is not a valid "),
          [2,0,[11,caml_new_string(" because "),[2,0,0]]]]]],
       caml_new_string("'%s' is not a valid %s because %s")],
     _ayL_=
      [0,
       [2,
        0,
        [11,
         caml_new_string(" = unpack_"),
         [2,0,[11,caml_new_string(" (pack_"),[2,0,[12,32,[2,0,[12,41,0]]]]]]]],
       caml_new_string("%s = unpack_%s (pack_%s %s)")],
     _ayM_=[0,-128,[0,-127,[0,-15,[0,-1,[0,0,[0,1,[0,15,[0,127,0]]]]]]]],
     _ayN_=
      [0,
       -32768,
       [0,-31420,[0,-255,[0,-1,[0,0,[0,1,[0,255,[0,31420,[0,32767,0]]]]]]]]],
     _ayO_=[0,1985229328,[0,2147483647,0]],
     _ayP_=
      [0,[255,1193046,12377840,30874],[0,[255,16777215,16777215,32767],0]],
     _ayQ_=[255,16776961,16777215,65535],
     _ayR_=[255,15584170,4399375,34661],
     _ayS_=[255,0,0,32768],
     _ayF_=[0,caml_new_string("s")],
     _ayG_=[0,caml_new_string("len")],
     _ayH_=
      [0,
       caml_new_string
        ("src/binary_packing.ml.Pack_tail_padded_fixed_string_argument_too_long")],
     _ayI_=[0,caml_new_string("src/binary_packing.ml"),752,10],
     _ayC_=
      [0,
       caml_new_string("0x3f20_3040_5060_0708"),
       [0,
        caml_new_string("0x7f20_3040_5060_0708"),
        [0,
         caml_new_string("-0x7f20_3040_5060_0708"),
         [0,
          caml_new_string("0x7fff_ffff_ffff_0000"),
          [0,caml_new_string("0"),0]]]]],
     _ays_=[0,caml_new_string("src/binary_packing.ml"),680,45],
     _ayt_=[0,191],
     _ayu_=[255,16777215,16777215,65535],
     _ayv_=[0,64],
     _ayw_=[255,1,0,0],
     _ayx_=[0,128],
     _ayy_=[0,127],
     _ayq_=[0,caml_new_string("src/binary_packing.ml"),644,2],
     _ayp_=[0,caml_new_string("src/binary_packing.ml"),623,2],
     _ayn_=
      [0,
       caml_new_string
        ("src/binary_packing.ml.Unpack_signed_64_int_most_significant_byte_too_large")],
     _ayo_=[0,caml_new_string("src/binary_packing.ml"),616,10],
     _ayl_=[0,caml_new_string("src/binary_packing.ml"),605,2],
     _ayk_=[0,caml_new_string("src/binary_packing.ml"),561,2],
     _ayc_=[255,255,0,0],
     _ayd_=[255,255,0,0],
     _aye_=[255,255,0,0],
     _ayf_=[255,255,0,0],
     _ayg_=[255,255,0,0],
     _ayh_=[255,255,0,0],
     _ayi_=[255,255,0,0],
     _ayj_=[255,255,0,0],
     _ax6_=[255,255,0,0],
     _ax7_=[255,255,0,0],
     _ax8_=[255,255,0,0],
     _ax9_=[255,255,0,0],
     _ax__=[255,255,0,0],
     _ax$_=[255,255,0,0],
     _aya_=[255,255,0,0],
     _ayb_=[255,255,0,0],
     _ax2_=[0,0,0],
     _ax3_=[255,14667712,16777088,65535],
     _ax4_=[255,2109504,127,0],
     _axY_=[0,0,0],
     _axZ_=[255,2109504,127,0],
     _axW_=[0,caml_new_string("src/binary_packing.ml"),369,2],
     _axV_=[0,caml_new_string("src/binary_packing.ml"),327,2],
     _axT_=
      [0,
       caml_new_string
        ("src/binary_packing.ml.Pack_signed_32_argument_out_of_range")],
     _axU_=[0,caml_new_string("src/binary_packing.ml"),318,10],
     _axR_=[0,caml_new_string("src/binary_packing.ml"),294,2],
     _axP_=
      [0,
       caml_new_string
        ("src/binary_packing.ml.Pack_unsigned_32_argument_out_of_range")],
     _axQ_=[0,caml_new_string("src/binary_packing.ml"),282,10],
     _axL_=[0,caml_new_string("src/binary_packing.ml"),187,8],
     _axI_=[255,255,0,0],
     _axJ_=[255,1,0,0],
     _axK_=[255,0,0,0],
     _axG_=
      [0,
       caml_new_string
        ("src/binary_packing.ml.Pack_signed_16_argument_out_of_range")],
     _axH_=[0,caml_new_string("src/binary_packing.ml"),83,10],
     _axD_=
      [0,
       caml_new_string
        ("src/binary_packing.ml.Pack_unsigned_16_argument_out_of_range")],
     _axE_=[0,caml_new_string("src/binary_packing.ml"),55,10],
     _axA_=
      [0,
       caml_new_string
        ("src/binary_packing.ml.Pack_signed_8_argument_out_of_range")],
     _axB_=[0,caml_new_string("src/binary_packing.ml"),40,10],
     _axx_=
      [0,
       caml_new_string
        ("src/binary_packing.ml.Pack_unsigned_8_argument_out_of_range")],
     _axy_=[0,caml_new_string("src/binary_packing.ml"),31,10],
     _axu_=
      [0,
       caml_new_string
        ("src/binary_packing.ml.Binary_packing_invalid_byte_number")],
     _axv_=[0,caml_new_string("src/binary_packing.ml"),22,10],
     _axr_=[0,caml_new_string("Little_endian")],
     _axs_=[0,caml_new_string("Big_endian")],
     _axq_=[255,16777215,255,0],
     _ax0_=[0,caml_new_string("64-bits-only"),0],
     _ax5_=[0,caml_new_string("64-bits-only"),0],
     _ayz_=[0,caml_new_string("64-bits-only"),0],
     _ayD_=[0,caml_new_string("64-bits-only"),0],
     _ayU_=
      [0,
       [11,
        caml_new_string("Memo.lru: max_cache_size of "),
        [4,3,0,0,[11,caml_new_string(" <= 0"),0]]],
       caml_new_string("Memo.lru: max_cache_size of %i <= 0")],
     _ayT_=[0,0],
     _aAH_=[0,[0,caml_new_string("src/blang.ml"),675,19741,19760]],
     _aAD_=[0,caml_new_string("Odd")],
     _aAE_=[0,caml_new_string("Even")],
     _aAF_=[0,caml_new_string("Greater_than")],
     _aAG_=[0,caml_new_string("Smaller_than")],
     _aAB_=[0,caml_new_string("Unknown")],
     _aAC_=[0,caml_new_string("Known")],
     _aAs_=[0,caml_new_string("->")],
     _aAt_=[0,caml_new_string("C")],
     _aAu_=[0,caml_new_string("->")],
     _aAv_=[0,caml_new_string("B")],
     _aAw_=[0,caml_new_string("->")],
     _aAx_=[0,caml_new_string("A")],
     _aAy_=[0,caml_new_string("function")],
     _aAp_=[0,caml_new_string("A")],
     _aAq_=[0,caml_new_string("B")],
     _aAr_=[0,caml_new_string("C")],
     _aAz_=[0,-132670365,0],
     _aAA_=[0,-132670365,1],
     _aAn_=[0,0,[0,2,0]],
     _aAm_=[0,0,[0,1,0]],
     _aAl_=[0,0,0],
     _azX_=[0,1,[0,2,[0,3,[0,4,[0,5,[0,6,[0,7,0]]]]]]],
     _azV_=[0,0],
     _azU_=[0,1],
     _azL_=[0,caml_new_string("true")],
     _azM_=[0,caml_new_string("false")],
     _azN_=[0,caml_new_string("and")],
     _azO_=[0,caml_new_string("or")],
     _azP_=[0,caml_new_string("not")],
     _azQ_=[0,caml_new_string("if")],
     _azK_=
      [0,
       [2,
        0,
        [11,
         caml_new_string(" expects three arguments, "),
         [4,0,0,0,[11,caml_new_string(" found"),0]]]],
       caml_new_string("%s expects three arguments, %d found")],
     _azJ_=
      [0,
       [2,
        0,
        [11,
         caml_new_string(" expects one argument, "),
         [4,0,0,0,[11,caml_new_string(" found"),0]]]],
       caml_new_string("%s expects one argument, %d found")],
     _azH_=[0,caml_new_string("src/blang.ml.T.t")],
     _azI_=[0,caml_new_string("src/blang.ml"),56,24],
     _azA_=[0,caml_new_string("False"),0],
     _azB_=[0,caml_new_string("True"),0],
     _aAL_=[0,caml_new_string("label")],
     _aAI_=[0,caml_new_string("max")],
     _aAJ_=[0,caml_new_string("min")],
     _aAK_=[0,caml_new_string("index")],
     _aC1_=[0,caml_new_string("src/bounded_int_table.ml"),650,6],
     _aCY_=[0,caml_new_string("five")],
     _aC0_=[0,caml_new_string("src/bounded_int_table.ml"),651,6],
     _aCZ_=[0,caml_new_string("src/bounded_int_table.ml"),657,6],
     _aCU_=[0,[0,caml_new_string("src/bounded_int_table.ml"),618,18390,18405]],
     _aCR_=[0,caml_new_string("src/bounded_int_table.ml"),602,10],
     _aCQ_=[0,caml_new_string("src/bounded_int_table.ml"),603,10],
     _aCX_=[0,caml_new_string("src/bounded_int_table.ml"),600,8],
     _aCW_=[0,caml_new_string("src/bounded_int_table.ml"),604,8],
     _aCV_=[0,caml_new_string("src/bounded_int_table.ml"),605,8],
     _aCS_=[0,[0,caml_new_string("src/bounded_int_table.ml"),609,17957,17970]],
     _aCT_=[0,[0,caml_new_string("src/bounded_int_table.ml"),614,18203,18216]],
     _aCP_=[0,caml_new_string("src/bounded_int_table.ml"),578,6],
     _aCO_=[0,caml_new_string("src/bounded_int_table.ml"),565,6],
     _aCN_=[0,caml_new_string("src/bounded_int_table.ml"),550,6],
     _aCM_=[0,caml_new_string("src/bounded_int_table.ml"),552,8],
     _aCL_=[0,caml_new_string("src/bounded_int_table.ml"),554,6],
     _aCK_=[0,caml_new_string("src/bounded_int_table.ml"),555,6],
     _aCJ_=[0,caml_new_string("src/bounded_int_table.ml"),556,6],
     _aCI_=[0,caml_new_string("src/bounded_int_table.ml"),531,6],
     _aCH_=[0,caml_new_string("src/bounded_int_table.ml"),532,6],
     _aCG_=[0,caml_new_string("src/bounded_int_table.ml"),534,8],
     _aCF_=[0,caml_new_string("src/bounded_int_table.ml"),536,6],
     _aCE_=[0,caml_new_string("src/bounded_int_table.ml"),537,6],
     _aCD_=[0,caml_new_string("src/bounded_int_table.ml"),538,6],
     _aCz_=[0,caml_new_string("src/bounded_int_table.ml"),514,6],
     _aCC_=[0,caml_new_string("src/bounded_int_table.ml"),516,8],
     _aCB_=[0,caml_new_string("src/bounded_int_table.ml"),517,8],
     _aCA_=[0,caml_new_string("src/bounded_int_table.ml"),519,6],
     _aCy_=[0,caml_new_string("src/bounded_int_table.ml"),503,44],
     _aCx_=[0,caml_new_string("src/bounded_int_table.ml"),491,6],
     _aCw_=[0,caml_new_string("src/bounded_int_table.ml"),492,6],
     _aCv_=[0,caml_new_string("src/bounded_int_table.ml"),493,6],
     _aCu_=[0,caml_new_string("src/bounded_int_table.ml"),494,6],
     _aCt_=[0,caml_new_string("src/bounded_int_table.ml"),496,8],
     _aCs_=[0,caml_new_string("src/bounded_int_table.ml"),497,8],
     _aCq_=[0,14,0],
     _aCr_=[0,caml_new_string("src/bounded_int_table.ml"),485,6],
     _aCk_=[0,caml_new_string("src/bounded_int_table.ml"),467,27],
     _aCl_=[0,[0,1,5],0],
     _aCm_=[0,[0,1,2],0],
     _aCn_=[0,[0,1,7],[0,[0,3,9],0]],
     _aCo_=[0,[0,1,2],[0,[0,3,4],0]],
     _aCi_=[0,[0,1,2],0],
     _aCj_=[0,[0,1,2],[0,[0,3,4],0]],
     _aCg_=[0,[0,1,3],0],
     _aCh_=[0,[0,1,2],0],
     _aCe_=[0,[0,1,2],0],
     _aCf_=[0,[0,1,2],0],
     _aCd_=[0,[0,1,2],0],
     _aCc_=[0,caml_new_string("src/bounded_int_table.ml"),455,49],
     _aB5_=[0,[0,1,2],[0,[0,3,4],0]],
     _aCa_=[0,caml_new_string("src/bounded_int_table.ml"),413,6],
     _aB6_=[0,1,[0,3,0]],
     _aB__=[0,3,[0,1,0]],
     _aB$_=[0,caml_new_string("src/bounded_int_table.ml"),414,6],
     _aB7_=[0,2,[0,4,0]],
     _aB8_=[0,4,[0,2,0]],
     _aB9_=[0,caml_new_string("src/bounded_int_table.ml"),415,6],
     _aBZ_=[0,[0,1,2],0],
     _aB4_=[0,caml_new_string("src/bounded_int_table.ml"),406,6],
     _aB0_=[0,1,0],
     _aB3_=[0,caml_new_string("src/bounded_int_table.ml"),407,6],
     _aB1_=[0,2,0],
     _aB2_=[0,caml_new_string("src/bounded_int_table.ml"),408,6],
     _aBY_=[0,[0,1,1],[0,[0,1,2],0]],
     _aBX_=[0,[0,1,1],0],
     _aBM_=[0,1,[0,2,0]],
     _aBN_=[0,1,[0,2,0]],
     _aBO_=[0,1,[0,2,0]],
     _aBP_=[0,2,[0,3,0]],
     _aBV_=[0,caml_new_string("src/bounded_int_table.ml"),336,6],
     _aBU_=[0,caml_new_string("src/bounded_int_table.ml"),337,6],
     _aBT_=[0,caml_new_string("src/bounded_int_table.ml"),338,6],
     _aBQ_=[0,caml_new_string("src/bounded_int_table.ml"),339,6],
     _aBR_=[0,caml_new_string("src/bounded_int_table.ml"),340,6],
     _aBS_=[0,caml_new_string("src/bounded_int_table.ml"),341,6],
     _aBK_=[0,2,[0,1,0]],
     _aBL_=[0,1,[0,2,0]],
     _aBI_=[0,1,[0,2,0]],
     _aBJ_=[0,1,[0,2,0]],
     _aBG_=[0,1,[0,2,0]],
     _aBH_=[0,1,0],
     _aBE_=[0,1,0],
     _aBF_=[0,1,0],
     _aBD_=[0,1,0],
     _aBC_=[0,1,0],
     _aBv_=[0,caml_new_string("src/bounded_int_table.ml"),292,39],
     _aBw_=[0,1,0],
     _aBx_=[0,1,0],
     _aBy_=[0,1,0],
     _aBz_=[0,1,[0,2,[0,3,0]]],
     _aBA_=[0,1,[0,2,[0,3,0]]],
     _aBB_=[0,1,[0,2,[0,3,0]]],
     _aBs_=[0,caml_new_string("_")],
     _aBt_=[0,[0,caml_new_string("src/bounded_int_table.ml"),249,7036,7044]],
     _aBr_=[0,[0,caml_new_string("src/bounded_int_table.ml"),232,6522,6526]],
     _aBp_=[0,caml_new_string("_")],
     _aBq_=[0,[0,caml_new_string("src/bounded_int_table.ml"),189,5346,5350]],
     _aBn_=[0,caml_new_string("Should_be_between_0_and")],
     _aBo_=[0,[0,caml_new_string("src/bounded_int_table.ml"),173,4934,4938]],
     _aBl_=[0,caml_new_string("alist")],
     _aBm_=[0,caml_new_string("num_keys")],
     _aA__=[0,caml_new_string("src/bounded_int_table.ml"),137,14],
     _aA9_=[0,caml_new_string("src/bounded_int_table.ml"),118,16],
     _aA8_=[0,[0,caml_new_string("src/bounded_int_table.ml"),87,2878,2885]],
     _aAW_=[0,caml_new_string("_")],
     _aA2_=[0,caml_new_string("src/bounded_int_table.ml"),62,28],
     _aA1_=[0,caml_new_string("src/bounded_int_table.ml"),63,13],
     _aA0_=[0,caml_new_string("src/bounded_int_table.ml"),55,8],
     _aAY_=[0,caml_new_string("src/bounded_int_table.ml"),58,25],
     _aAZ_=[0,caml_new_string("src/bounded_int_table.ml"),57,18],
     _aA7_=[0,caml_new_string("src/bounded_int_table.ml"),47,4],
     _aA6_=[0,caml_new_string("src/bounded_int_table.ml"),48,4],
     _aA5_=[0,caml_new_string("src/bounded_int_table.ml"),49,4],
     _aA4_=[0,caml_new_string("src/bounded_int_table.ml"),72,4],
     _aA3_=[0,caml_new_string("src/bounded_int_table.ml"),73,4],
     _aAX_=[0,[0,caml_new_string("src/bounded_int_table.ml"),76,2605,2609]],
     _aAQ_=[0,caml_new_string("defined_entries")],
     _aAR_=[0,caml_new_string("entries_by_key")],
     _aAS_=[0,caml_new_string("length")],
     _aAT_=[0,caml_new_string("key_to_int")],
     _aAU_=[0,caml_new_string("sexp_of_key")],
     _aAV_=[0,caml_new_string("num_keys")],
     _aAN_=[0,caml_new_string("defined_entries_index")],
     _aAO_=[0,caml_new_string("data")],
     _aAP_=[0,caml_new_string("key")],
     _aC5_=
      [0,
       [11,
        caml_new_string("Bucket."),
        [2,0,[12,32,[2,0,[11,caml_new_string(" < 0"),0]]]]],
       caml_new_string("Bucket.%s %s < 0")],
     _aC4_=
      [0,
       [11,
        caml_new_string("Bucket.create ~size:"),
        [2,
         0,
         [11,
          caml_new_string(" ~init_level:"),
          [2,0,[11,caml_new_string(": "),[2,0,0]]]]]],
       caml_new_string("Bucket.create ~size:%s ~init_level:%s: %s")],
     _aC2_=[0,caml_new_string("size")],
     _aC3_=[0,caml_new_string("level")],
     _aEd_=[0,caml_new_string("src/bus.ml"),611,19168,19192],
     _aEe_=[0,caml_new_string("src/bus.ml"),612,19210,19234],
     _aEf_=[0,caml_new_string("src/bus.ml"),613,19252,19276],
     _aEg_=[0,caml_new_string("src/bus.ml"),614,19294,19318],
     _aEc_=[0,caml_new_string("src/bus.ml"),593,18240,18274],
     _aD$_=[0,caml_new_string("_")],
     _aD__=[0,caml_new_string("_")],
     _aEa_=[0,[0,caml_new_string("src/bus.ml"),575,17561,17568]],
     _aD6_=[0,caml_new_string("Arity1")],
     _aD7_=[0,caml_new_string("Arity2")],
     _aD8_=[0,caml_new_string("Arity3")],
     _aD9_=[0,caml_new_string("Arity4")],
     _aD4_=[0,caml_new_string("_")],
     _aD3_=[0,caml_new_string("_")],
     _aD5_=[0,[0,caml_new_string("src/bus.ml"),552,16769,16776]],
     _aDZ_=[0,caml_new_string("_")],
     _aDY_=[0,caml_new_string("_")],
     _aD0_=[0,caml_new_string("bus")],
     _aD1_=[0,caml_new_string("subscribed_from")],
     _aD2_=[0,[0,caml_new_string("src/bus.ml"),531,16157,16164]],
     _aDX_=[0,caml_new_string("src/bus.ml"),519,57],
     _aDQ_=[0,caml_new_string("_")],
     _aDR_=[0,caml_new_string("subscriber")],
     _aDS_=[0,caml_new_string("backtrace")],
     _aDT_=[0,caml_new_string("exn")],
     _aDU_=[0,caml_new_string("original_error")],
     _aDV_=[0,caml_new_string("backtrace")],
     _aDW_=[0,caml_new_string("exn")],
     _aDP_=[0,caml_new_string("src/bus.ml"),272,19],
     _aDM_=[0,caml_new_string("_")],
     _aDL_=[0,caml_new_string("_")],
     _aDJ_=[0,caml_new_string("_")],
     _aDI_=[0,caml_new_string("_")],
     _aDK_=[0,[0,caml_new_string("src/bus.ml"),262,7584,7588]],
     _aDN_=[0,[0,caml_new_string("src/bus.ml"),264,7682,7686]],
     _aDO_=[0,caml_new_string("src/bus.ml"),266,4],
     _aDG_=[0,caml_new_string("_")],
     _aDF_=[0,caml_new_string("_")],
     _aDH_=[0,caml_new_string("src/bus.ml"),225,6505,6527],
     _aDC_=[0,caml_new_string("_")],
     _aDw_=[0,caml_new_string("_")],
     _aDx_=[0,caml_new_string("subscribers")],
     _aDy_=[0,caml_new_string("write_ever_called")],
     _aDz_=[0,caml_new_string("state")],
     _aDA_=[0,caml_new_string("on_subscription_after_first_write")],
     _aDB_=[0,caml_new_string("created_from")],
     _aDD_=[0,caml_new_string("callback_arity")],
     _aDE_=[0,caml_new_string("name")],
     _aDs_=[0,caml_new_string("_")],
     _aDt_=[0,caml_new_string("src/bus.ml"),161,4192,4216],
     _aDm_=[0,1],
     _aDn_=[0,caml_new_string("subscribed_from")],
     _aDo_=[0,caml_new_string("extract_exn")],
     _aDp_=[0,caml_new_string("on_callback_raise")],
     _aDq_=[0,caml_new_string("id")],
     _aDr_=[0,caml_new_string("Bus.Subscriber.t")],
     _aDh_=[0,caml_new_string("Allow")],
     _aDi_=[0,caml_new_string("Allow_and_send_last_value")],
     _aDj_=[0,caml_new_string("Raise")],
     _aDd_=[0,caml_new_string("Arity1")],
     _aDe_=[0,caml_new_string("Arity2")],
     _aDf_=[0,caml_new_string("Arity3")],
     _aDg_=[0,caml_new_string("Arity4")],
     _aDa_=[0,caml_new_string("Closed")],
     _aDb_=[0,caml_new_string("Write_in_progress")],
     _aDc_=[0,caml_new_string("Ok_to_write")],
     _aFd_=
      [0,
       [11,
        caml_new_string("dequeue final states not equal: "),
        [2,0,[11,caml_new_string(" vs. "),[2,0,0]]]],
       caml_new_string("dequeue final states not equal: %s vs. %s")],
     _aFc_=
      [0,
       [11,
        caml_new_string("error in length: "),
        [4,
         3,
         0,
         0,
         [11,
          caml_new_string(" (for "),
          [2,
           0,
           [11,
            caml_new_string(") <> "),
            [4,3,0,0,[11,caml_new_string(" (for "),[2,0,[12,41,0]]]]]]]]],
       caml_new_string("error in length: %i (for %s) <> %i (for %s)")],
     _aFb_=
      [0,
       [11,
        caml_new_string("error in iter:  "),
        [2,
         0,
         [11,
          caml_new_string(" (from "),
          [2,
           0,
           [11,
            caml_new_string(") <> "),
            [2,0,[11,caml_new_string(" (from "),[2,0,[12,41,0]]]]]]]]],
       caml_new_string("error in iter:  %s (from %s) <> %s (from %s)")],
     _aFa_=
      [0,
       [11,
        caml_new_string("error in fold:  "),
        [2,
         0,
         [11,
          caml_new_string(" (from "),
          [2,
           0,
           [11,
            caml_new_string(") <> "),
            [2,0,[11,caml_new_string(" (from "),[2,0,[12,41,0]]]]]]]]],
       caml_new_string("error in fold:  %s (from %s) <> %s (from %s)")],
     _aE$_=
      [0,
       [11,
        caml_new_string("error in dequeue: "),
        [2,
         0,
         [11,
          caml_new_string(" ("),
          [2,
           0,
           [11,
            caml_new_string(" -> "),
            [2,
             0,
             [11,
              caml_new_string(") <> "),
              [2,0,[11,caml_new_string(" ("),[2,0,partial$1]]]]]]]]]],
       caml_new_string("error in dequeue: %s (%s -> %s) <> %s (%s -> %s)")],
     _aE__=
      [0,
       [11,
        caml_new_string("enqueue transition failure of: "),
        [2,
         0,
         [11,
          caml_new_string(" -> "),
          [2,
           0,
           [11,
            caml_new_string(" vs. "),
            [2,0,[11,caml_new_string(" -> "),[2,0,0]]]]]]]],
       caml_new_string("enqueue transition failure of: %s -> %s vs. %s -> %s")],
     _aE7_=[0,caml_new_string("src/deque.ml"),541,24],
     _aE9_=[0,caml_new_string("src/deque.ml"),543,6],
     _aE8_=[0,caml_new_string("src/deque.ml"),547,6],
     _aE4_=[0,2],
     _aE5_=[0,2],
     _aE3_=[0,2],
     _aE2_=[0,2],
     _aE0_=[0,2],
     _aE1_=[0,2],
     _aEZ_=[0,2],
     _aEY_=[0,1],
     _aEQ_=
      [0,
       [11,
        caml_new_string("invalid index: "),
        [4,
         3,
         0,
         0,
         [11,
          caml_new_string(" for array with indices ("),
          [4,3,0,0,[12,44,[4,3,0,0,[12,41,0]]]]]]],
       caml_new_string("invalid index: %i for array with indices (%i,%i)")],
     _aEP_=
      [0,
       [2,0,[11,caml_new_string(": Deque.t is empty"),0]],
       caml_new_string("%s: Deque.t is empty")],
     _aEO_=
      [0,
       [11,
        caml_new_string("Deque.drop:  negative input ("),
        [4,0,0,0,[12,41,0]]],
       caml_new_string("Deque.drop:  negative input (%d)")],
     _aEM_=[0,caml_new_string("src/deque.ml"),225,2],
     _aEN_=[0,caml_new_string("src/deque.ml"),250,2],
     _aEy_=[0,0],
     _aEw_=
      [0,
       [11,
        caml_new_string("passed negative initial_length to Deque.create: "),
        [4,3,0,0,0]],
       caml_new_string("passed negative initial_length to Deque.create: %i")],
     _aFQ_=[0,caml_new_string("src/fdeque.ml"),393,16],
     _aFJ_=[0,1,[0,2,[0,3,0]]],
     _aFH_=[0,1,[0,2,[0,3,[0,4,0]]]],
     _aFF_=[0,[0,1,[0,2,0]],[0,[0,3,[0,4,0]],0]],
     _aFr_=[0,1,[0,2,[0,3,0]]],
     _aFp_=[0,1,[0,2,[0,3,0]]],
     _aFm_=[0,caml_new_string("src/fdeque.ml"),22,2],
     _aFl_=[0,caml_new_string("src/fdeque.ml"),23,2],
     _aFj_=[0,caml_new_string("src/fdeque.ml.Empty")],
     _aFk_=[0,caml_new_string("src/fdeque.ml"),11,10],
     _aFV_=
      [0,
       [11,caml_new_string("Flags.t_of_sexp got unknown name: "),[2,0,0]],
       caml_new_string("Flags.t_of_sexp got unknown name: %s")],
     _aFU_=[0,caml_new_string("unrecognized_bits")],
     _aFT_=[0,[11,caml_new_string("0x"),[7,6,0,0,0]],caml_new_string("0x%Lx")],
     _aFS_=[0,[2,0,[12,10,[10,0]]],caml_new_string("%s\n%!")],
     _aFR_=[0,[0,caml_new_string("src/flags.ml"),8,98,102]],
     _aFX_=[0,caml_new_string("<Not_forced>")],
     _aFY_=[0,caml_new_string("<Forced>")],
     _aGx_=[0,caml_new_string("src/heap.ml"),839,2],
     _aGt_=[0,caml_new_string("src/heap.ml"),825,6],
     _aGp_=[0,caml_new_string("src/heap.ml"),804,6],
     _aGq_=[0,caml_new_string("src/heap.ml"),802,16],
     _aGm_=[0,caml_new_string("src/heap.ml"),780,2],
     _aGl_=[0,caml_new_string("src/heap.ml"),781,2],
     _aGk_=[0,caml_new_string("src/heap.ml"),783,2],
     _aGj_=[0,caml_new_string("src/heap.ml"),729,6],
     _aGi_=
      [0,
       [11,
        caml_new_string("top results differ ("),
        [2,0,[11,caml_new_string(", "),[2,0,[12,41,0]]]]],
       caml_new_string("top results differ (%s, %s)")],
     _aGh_=
      [0,
       [11,
        caml_new_string("pop results differ ("),
        [2,0,[11,caml_new_string(", "),[2,0,[12,41,0]]]]],
       caml_new_string("pop results differ (%s, %s)")],
     _aGg_=
      [0,
       [11,
        caml_new_string("error in length: "),
        [4,
         3,
         0,
         0,
         [11,
          caml_new_string(" (for "),
          [2,
           0,
           [11,
            caml_new_string(") <> "),
            [4,3,0,0,[11,caml_new_string(" (for "),[2,0,[12,41,0]]]]]]]]],
       caml_new_string("error in length: %i (for %s) <> %i (for %s)")],
     _aF0_=[0,caml_new_string("src/heap.ml"),242,10],
     _aF1_=[0,caml_new_string("src/heap.ml"),240,8],
     _aF2_=[0,caml_new_string("src/heap.ml"),250,2],
     _aFZ_=[0,caml_new_string("src/heap.ml"),116,4],
     _aGD_=[0,caml_new_string("src/hash_heap.ml"),186,4],
     _aGB_=[0,caml_new_string("src/hash_heap.ml.Make.Key_not_found")],
     _aGC_=[0,caml_new_string("src/hash_heap.ml"),157,12],
     _aGz_=[0,caml_new_string("src/hash_heap.ml.Make.Key_already_present")],
     _aGA_=[0,caml_new_string("src/hash_heap.ml"),84,12],
     _aGS_=
      [0,
       [11,caml_new_string("Host_and_port.of_string: bad port: "),[2,0,0]],
       caml_new_string("Host_and_port.of_string: bad port: %s")],
     _aGR_=
      [0,
       [11,caml_new_string("Host_and_port.of_string: "),[2,0,0]],
       caml_new_string("Host_and_port.of_string: %s")],
     _aGQ_=[0,[2,0,[12,58,[4,0,0,0,0]]],caml_new_string("%s:%d")],
     _aGK_=
      [1,
       caml_new_string
        ("\n                  957990f0fc4161fb874e66872550fb40\n                  957990f0fc4161fb874e66872550fb40 ")],
     _aGL_=[0,caml_new_string("")],
     _aGN_=[0,caml_new_string("stable")],
     _aHm_=[0,caml_new_string(",")],
     _aHl_=[0,[4,0,0,0,[12,45,[4,0,0,0,0]]],caml_new_string("%d-%d")],
     _aHn_=[0,caml_new_string("_")],
     _aHo_=[0,caml_new_string("src/moption.ml"),44,866,888],
     _aH4_=[0,caml_new_string("src/limiter.ml"),483,38],
     _aH0_=[0,caml_new_string("src/limiter.ml"),448,51],
     _aH1_=[0,caml_new_string("src/limiter.ml"),444,42],
     _aHV_=[12,41,0],
     _aHW_=[0,0],
     _aHX_=[12,41,0],
     _aHY_=[0,0],
     _aHZ_=[0,0],
     _aHK_=[12,41,0],
     _aHL_=[0,0],
     _aHM_=[0,0],
     _aHN_=[11,caml_new_string(") must be > 0"),0],
     _aHO_=[0,0],
     _aHP_=[11,caml_new_string(") must be >= 0."),0],
     _aHQ_=[0,0],
     _aHR_=[11,caml_new_string(") must be >= 0."),0],
     _aHS_=[0,0],
     _aHT_=[11,caml_new_string(") must be >= 0."),0],
     _aHU_=[0,0],
     _aHJ_=[0,caml_new_string("rate")],
     _aHA_=[0,caml_new_string("hopper_to_bucket_rate_per_ns")],
     _aHB_=[0,caml_new_string("in_flight_limit")],
     _aHC_=[0,caml_new_string("bucket_limit")],
     _aHD_=[0,caml_new_string("in_flight")],
     _aHE_=[0,caml_new_string("in_hopper")],
     _aHF_=[0,caml_new_string("in_bucket")],
     _aHG_=[0,caml_new_string("time_in_token_space")],
     _aHH_=[0,caml_new_string("time")],
     _aHI_=[0,caml_new_string("start_time")],
     _aHz_=[0,caml_new_string("src/limiter.ml.Infinite_or_finite.T.t")],
     _aHp_=[0,caml_new_string("Finite")],
     _aHq_=[0,caml_new_string("Infinite")],
     _aHt_=[0,caml_new_string("Infinite"),0],
     _aJg_=[0,caml_new_string("_")],
     _aJi_=[0,caml_new_string("src/linked_stack.ml"),19,36],
     _aJh_=[0,[0,caml_new_string("src/linked_stack.ml"),21,486,490]],
     _aJe_=[0,caml_new_string("length")],
     _aJf_=[0,caml_new_string("elts")],
     _aJq_=
      [0,
       caml_new_string
        ("src/pid.ml.Stable.V1.Without_containers.Pid_must_be_positive")],
     _aJr_=[0,caml_new_string("src/pid.ml"),6,16],
     _aKG_=[0,[0,caml_new_string("src/pooled_hashtbl.ml"),1121,33260,33282]],
     _aKh_=[0,caml_new_string("src/pooled_hashtbl.ml"),577,4],
     _aKg_=[0,caml_new_string("src/pooled_hashtbl.ml"),586,2],
     _aKf_=[0,caml_new_string("src/pooled_hashtbl.ml"),587,2],
     _aKR_=[0,caml_new_string("String.max_length")],
     _aKS_=[0,caml_new_string("length b")],
     _aKT_=[0,caml_new_string("length a")],
     _aKP_=[0,caml_new_string("src/rope.ml"),37,17],
     _aLf_=[0,caml_new_string("src/set_once.ml"),103,2154,2189],
     _aLe_=[0,caml_new_string("at")],
     _aLb_=[0,0],
     _aLc_=[0,caml_new_string("previously_set_at")],
     _aLd_=[0,caml_new_string("setting_at")],
     _aLa_=[0,caml_new_string("src/set_once.ml"),68,1285,1326],
     _aK__=[0,caml_new_string("set_at")],
     _aK$_=[0,caml_new_string("value")],
     _aK8_=[0,caml_new_string("src/set_once.ml"),22,449,468],
     _aLr_=[0,caml_new_string("src/stack.ml"),96,14],
     _aLn_=[0,caml_new_string("_")],
     _aLq_=[0,caml_new_string("src/stack.ml"),25,8],
     _aLp_=[0,caml_new_string("src/stack.ml"),33,10],
     _aLo_=[0,[0,caml_new_string("src/stack.ml"),37,1200,1204]],
     _aLl_=[0,caml_new_string("elts")],
     _aLm_=[0,caml_new_string("length")],
     _aM2_=[0,caml_new_string("init")],
     _aM3_=[0,caml_new_string("len")],
     _aM4_=[0,caml_new_string("pos")],
     _aM5_=[0,caml_new_string("bstr")],
     _aM8_=[0,caml_new_string("src/bigbuffer.ml"),134,9],
     _aND_=[0,caml_new_string("src/container_unit_tests.ml"),126,8],
     _aNC_=[0,caml_new_string("src/container_unit_tests.ml"),127,8],
     _aNB_=[0,caml_new_string("src/container_unit_tests.ml"),128,8],
     _aNE_=
      [0,
       0,
       [0,
        [0,1,0],
        [0,
         [0,0,0],
         [0,
          [0,0,[0,0,0]],
          [0,[0,1,[0,0,0]],[0,[0,0,[0,1,0]],[0,[0,1,[0,1,0]],0]]]]]]],
     _aNa_=[0,0],
     _aM$_=[0,0],
     _aM__=[0,0],
     _aNz_=[0,caml_new_string("src/container_unit_tests.ml"),52,6],
     _aNy_=[0,caml_new_string("src/container_unit_tests.ml"),53,6],
     _aNx_=[0,caml_new_string("src/container_unit_tests.ml"),54,6],
     _aNw_=[0,caml_new_string("src/container_unit_tests.ml"),56,6],
     _aNv_=[0,caml_new_string("src/container_unit_tests.ml"),57,6],
     _aNu_=[0,caml_new_string("src/container_unit_tests.ml"),58,6],
     _aNt_=[0,caml_new_string("src/container_unit_tests.ml"),59,6],
     _aNs_=[0,caml_new_string("src/container_unit_tests.ml"),60,6],
     _aNr_=[0,caml_new_string("src/container_unit_tests.ml"),61,6],
     _aNq_=[0,caml_new_string("src/container_unit_tests.ml"),62,6],
     _aM9_=[0,caml_new_string("src/container_unit_tests.ml"),63,6],
     _aNp_=[0,caml_new_string("src/container_unit_tests.ml"),64,6],
     _aNo_=[0,caml_new_string("src/container_unit_tests.ml"),66,6],
     _aNn_=[0,caml_new_string("src/container_unit_tests.ml"),68,6],
     _aNm_=[0,caml_new_string("src/container_unit_tests.ml"),72,6],
     _aNl_=[0,caml_new_string("src/container_unit_tests.ml"),73,6],
     _aNk_=[0,caml_new_string("src/container_unit_tests.ml"),75,6],
     _aNf_=[0,caml_new_string("src/container_unit_tests.ml"),78,8],
     _aNe_=[0,caml_new_string("src/container_unit_tests.ml"),79,8],
     _aNd_=[0,caml_new_string("src/container_unit_tests.ml"),80,8],
     _aNj_=[0,caml_new_string("src/container_unit_tests.ml"),82,8],
     _aNg_=[0,0],
     _aNi_=[0,caml_new_string("src/container_unit_tests.ml"),83,8],
     _aNh_=[0,caml_new_string("src/container_unit_tests.ml"),84,8],
     _aNb_=[0,caml_new_string("src/container_unit_tests.ml"),92,16],
     _aNc_=[0,caml_new_string("src/container_unit_tests.ml"),94,19],
     _aNA_=[0,0,[0,1,[0,2,[0,3,[0,4,[0,8,[0,1024,0]]]]]]],
     Applicative=0,
     Avltree=0,
     Backtrace=0,
     Binary_search=0,
     Commutative_group=0,
     Comparisons=0,
     Equal=0,
     Exn=0,
     Floatable=0,
     Hash=0,
     Hasher=0,
     Heap_block=0,
     Indexed_container=0,
     Invariant=0,
     Intable=0,
     Monad=0,
     Obj_array=0,
     Poly=0,
     Polymorphic_compare=0,
     Popcount=0,
     Pretty_printer=0,
     Random=0,
     Staged=0,
     Stringable=0,
     Validate=0,
     With_return=0,
     Word_size=0,
     Field=0;
    function bin_shape_sexp_opaque(a)
     {var _b78_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_sexp_opaque$0);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group,_b78_),[0,a,0])}
    function bin_size_sexp_opaque(size_of_a){return size_of_a}
    function bin_write_sexp_opaque(write_a){return write_a}
    function bin_writer_sexp_opaque(bin_writer_a)
     {function _b77_(v){return caml_call1(bin_writer_a[2],v)}
      return [0,function(v){return caml_call1(bin_writer_a[1],v)},_b77_]}
    function bin_read_sexp_opaque(of_a,buf,pos_ref,vint)
     {return caml_call2(Bin_prot_Common[18],_ez_,pos_ref[1])}
    function bin_read_sexp_opaque$0(of_a){return of_a}
    function bin_reader_sexp_opaque(bin_reader_a)
     {function _b76_(buf,pos_ref,vtag)
       {return bin_read_sexp_opaque(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return caml_call2(bin_reader_a[1],buf,pos_ref)},
              _b76_]}
    function bin_sexp_opaque(bin_a)
     {var
       _b74_=bin_reader_sexp_opaque(bin_a[3]),
       _b75_=bin_writer_sexp_opaque(bin_a[2]);
      return [0,bin_shape_sexp_opaque(bin_a[1]),_b75_,_b74_]}
    function compare_sexp_opaque(cmp_a,a_001,b_002)
     {return caml_call2(cmp_a,a_001,b_002)}
    function hash_fold_sexp_opaque(hash_fold_a,hsv,arg)
     {return caml_call2(hash_fold_a,hsv,arg)}
    var
     Typename_of_sexp_opaque=caml_call1(Typerep_lib_Make_typename[2],[0,name]),
     typename_of_sexp_opaque=Typename_of_sexp_opaque[2];
    function typerep_of_sexp_opaque(of_a)
     {var name_of_sexp_opaque=caml_call1(Typename_of_sexp_opaque[1],of_a);
      return [9,[0,name_of_sexp_opaque,[0,of_a]]]}
    var
     typename_of_tuple5=Typerep_lib_Std[52],
     typename_of_tuple4=Typerep_lib_Std[51],
     typename_of_tuple3=Typerep_lib_Std[50],
     typename_of_tuple2=Typerep_lib_Std[49],
     typename_of_tuple0=Typerep_lib_Std[48],
     typename_of_function=Typerep_lib_Std[47],
     typename_of_ref=Typerep_lib_Std[46],
     typename_of_lazy_t=Typerep_lib_Std[45],
     typename_of_array=Typerep_lib_Std[44],
     typename_of_list=Typerep_lib_Std[43],
     typename_of_option=Typerep_lib_Std[42],
     typename_of_unit=Typerep_lib_Std[41],
     typename_of_bool=Typerep_lib_Std[40],
     typename_of_bytes=Typerep_lib_Std[39],
     typename_of_string=Typerep_lib_Std[38],
     typename_of_float=Typerep_lib_Std[37],
     typename_of_char=Typerep_lib_Std[36],
     typename_of_nativeint=Typerep_lib_Std[35],
     typename_of_int64=Typerep_lib_Std[34],
     typename_of_int32=Typerep_lib_Std[33],
     typename_of_int=Typerep_lib_Std[32],
     typerep_of_tuple5=Typerep_lib_Std[31],
     typerep_of_tuple4=Typerep_lib_Std[30],
     typerep_of_tuple3=Typerep_lib_Std[29],
     typerep_of_tuple2=Typerep_lib_Std[28],
     typerep_of_tuple0=Typerep_lib_Std[27],
     typerep_of_function=Typerep_lib_Std[26],
     typerep_of_ref=Typerep_lib_Std[25],
     typerep_of_lazy_t=Typerep_lib_Std[24],
     typerep_of_array=Typerep_lib_Std[23],
     typerep_of_list=Typerep_lib_Std[22],
     typerep_of_option=Typerep_lib_Std[21],
     value_tuple0=Typerep_lib_Std[20],
     typerep_of_unit=Typerep_lib_Std[19],
     typerep_of_bool=Typerep_lib_Std[18],
     typerep_of_bytes=Typerep_lib_Std[17],
     typerep_of_string=Typerep_lib_Std[16],
     typerep_of_float=Typerep_lib_Std[15],
     typerep_of_char=Typerep_lib_Std[14],
     typerep_of_nativeint=Typerep_lib_Std[13],
     typerep_of_int64=Typerep_lib_Std[12],
     typerep_of_int32=Typerep_lib_Std[11],
     typerep_of_int=Typerep_lib_Std[10],
     Typerep=Typerep_lib_Std[9],
     Typerep_obj=Typerep_lib_Std[8],
     Typerepable=Typerep_lib_Std[7],
     Type_named_intf=Typerep_lib_Std[6],
     Make_typename=Typerep_lib_Std[5],
     Typename=Typerep_lib_Std[4],
     Type_generic=Typerep_lib_Std[3],
     Type_abstract=Typerep_lib_Std[1],
     with_return=Base_With_return[1],
     am_running_inline_test=Ppx_inline_test_lib_Runtime[15],
     Not_found_s=Base[304],
     include$0=[0,Not_found,Not_found_s],
     _eA_=include$0[1],
     _eB_=include$0[2];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$1);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Import=
      [0,
       Applicative,
       Avltree,
       Backtrace,
       Binary_search,
       Commutative_group,
       Comparisons,
       Equal,
       Exn,
       Floatable,
       Hash,
       Hasher,
       Heap_block,
       Indexed_container,
       Invariant,
       Intable,
       Monad,
       Obj_array,
       Poly,
       Polymorphic_compare,
       Popcount,
       Pretty_printer,
       Random,
       Staged,
       Stringable,
       Validate,
       With_return,
       Word_size,
       _b_,
       _c_,
       _d_,
       _e_,
       _f_,
       _g_,
       _h_,
       _i_,
       _j_,
       _k_,
       _l_,
       _m_,
       _n_,
       sexp_of_t,
       _o_,
       _p_,
       _q_,
       _r_,
       _s_,
       _t_,
       hash_fold_t,
       _u_,
       t_of_sexp,
       sexp_of_t$0,
       _v_,
       _w_,
       _x_,
       _y_,
       _z_,
       _A_,
       _B_,
       _C_,
       _D_,
       _E_,
       _F_,
       _G_,
       _H_,
       _I_,
       _J_,
       _K_,
       _L_,
       _M_,
       _N_,
       _O_,
       _P_,
       _Q_,
       _R_,
       _S_,
       _T_,
       _U_,
       _V_,
       _W_,
       _X_,
       _Y_,
       _Z_,
       ___,
       _$_,
       _aa_,
       _ab_,
       _ac_,
       _ad_,
       _ae_,
       _af_,
       _ag_,
       _ah_,
       _ai_,
       _aj_,
       _ak_,
       _al_,
       _am_,
       _an_,
       _ao_,
       _ap_,
       _aq_,
       _ar_,
       _as_,
       _at_,
       _au_,
       _av_,
       _aw_,
       _ax_,
       _ay_,
       _az_,
       _aA_,
       _aB_,
       _aC_,
       _aD_,
       _aE_,
       _aF_,
       _aG_,
       _aH_,
       _aI_,
       _aJ_,
       _aK_,
       _aL_,
       _aM_,
       _aN_,
       _aO_,
       _aP_,
       _aQ_,
       _aR_,
       _aS_,
       _aT_,
       _aU_,
       _aV_,
       _aW_,
       _aX_,
       _aY_,
       _aZ_,
       _a0_,
       _a1_,
       _a2_,
       _a3_,
       _a4_,
       _a5_,
       _a6_,
       _a7_,
       _a8_,
       _a9_,
       _a__,
       _a$_,
       _ba_,
       _bb_,
       bin_size_t,
       bin_size_t$0,
       _bc_,
       bin_size_t$1,
       bin_size_t$2,
       _bd_,
       _be_,
       _bf_,
       _bg_,
       _bh_,
       _bi_,
       _bj_,
       _bk_,
       _bl_,
       _bm_,
       _bn_,
       _bo_,
       _bp_,
       _bq_,
       _br_,
       _bs_,
       _bt_,
       _bu_,
       _bv_,
       bin_size_t$3,
       _bw_,
       _bx_,
       _by_,
       _bz_,
       _bA_,
       _bB_,
       _bC_,
       _bD_,
       _bE_,
       _bF_,
       _bG_,
       _bH_,
       _bI_,
       _bJ_,
       _bK_,
       _bL_,
       _bM_,
       _bN_,
       _bO_,
       _bP_,
       _bQ_,
       _bR_,
       _bS_,
       _bT_,
       _bU_,
       _bV_,
       _bW_,
       _bX_,
       _bY_,
       _bZ_,
       _b0_,
       _b1_,
       _b2_,
       bin_write_t,
       _b3_,
       bin_read_t,
       bin_read_t$0,
       _b4_,
       _b5_,
       _b6_,
       bin_write_t$0,
       _b7_,
       bin_read_t$1,
       bin_read_t$2,
       _b8_,
       _b9_,
       _b__,
       _b$_,
       _ca_,
       _cb_,
       _cc_,
       _cd_,
       _ce_,
       _cf_,
       bin_write_t$1,
       _cg_,
       bin_read_t$3,
       bin_read_t$4,
       _ch_,
       _ci_,
       _cj_,
       bin_write_t$2,
       _ck_,
       bin_read_t$5,
       bin_read_t$6,
       _cl_,
       _cm_,
       _cn_,
       _co_,
       _cp_,
       _cq_,
       _cr_,
       _cs_,
       _ct_,
       _cu_,
       _cv_,
       _cw_,
       _cx_,
       _cy_,
       _cz_,
       _cA_,
       _cB_,
       _cC_,
       _cD_,
       _cE_,
       _cF_,
       _cG_,
       _cH_,
       _cI_,
       _cJ_,
       _cK_,
       _cL_,
       _cM_,
       _cN_,
       _cO_,
       _cP_,
       _cQ_,
       _cR_,
       _cS_,
       _cT_,
       _cU_,
       _cV_,
       _cW_,
       _cX_,
       _cY_,
       _cZ_,
       _c0_,
       _c1_,
       _c2_,
       _c3_,
       _c4_,
       _c5_,
       _c6_,
       _c7_,
       _c8_,
       _c9_,
       _c__,
       _c$_,
       _da_,
       _db_,
       _dc_,
       _dd_,
       _de_,
       _df_,
       _dg_,
       _dh_,
       _di_,
       _dj_,
       _dk_,
       _dl_,
       _dm_,
       _dn_,
       _do_,
       _dp_,
       _dq_,
       _dr_,
       _ds_,
       _dt_,
       _du_,
       _dv_,
       _dw_,
       _dx_,
       _dy_,
       _dz_,
       _dA_,
       bin_write_t$3,
       _dB_,
       bin_read_t$7,
       bin_read_t$8,
       _dC_,
       _dD_,
       _dE_,
       _dF_,
       _dG_,
       _dH_,
       _dI_,
       _dJ_,
       _dK_,
       _dL_,
       _dM_,
       _dN_,
       _dO_,
       _dP_,
       _dQ_,
       _dR_,
       _dS_,
       _dT_,
       _dU_,
       _dV_,
       _dW_,
       _dX_,
       _dY_,
       _dZ_,
       _d0_,
       _d1_,
       _d2_,
       _d3_,
       _d4_,
       _d5_,
       _d6_,
       _d7_,
       _d8_,
       _d9_,
       _d__,
       _d$_,
       _ea_,
       _eb_,
       _ec_,
       _ed_,
       _ee_,
       _ef_,
       Field,
       include,
       _eg_,
       _eh_,
       _ei_,
       _ej_,
       _ek_,
       _el_,
       _em_,
       _en_,
       _eo_,
       _ep_,
       _eq_,
       _er_,
       _es_,
       bin_sexp_opaque,
       bin_read_sexp_opaque$0,
       bin_read_sexp_opaque,
       bin_reader_sexp_opaque,
       bin_size_sexp_opaque,
       bin_write_sexp_opaque,
       bin_writer_sexp_opaque,
       bin_shape_sexp_opaque,
       compare_sexp_opaque,
       hash_fold_sexp_opaque,
       typerep_of_sexp_opaque,
       typename_of_sexp_opaque,
       Type_abstract,
       Type_generic,
       Typename,
       Make_typename,
       Type_named_intf,
       Typerepable,
       Typerep_obj,
       Typerep,
       typerep_of_int,
       typerep_of_int32,
       typerep_of_int64,
       typerep_of_nativeint,
       typerep_of_char,
       typerep_of_float,
       typerep_of_string,
       typerep_of_bytes,
       typerep_of_bool,
       typerep_of_unit,
       value_tuple0,
       typerep_of_option,
       typerep_of_list,
       typerep_of_array,
       typerep_of_lazy_t,
       typerep_of_ref,
       typerep_of_function,
       typerep_of_tuple0,
       typerep_of_tuple2,
       typerep_of_tuple3,
       typerep_of_tuple4,
       typerep_of_tuple5,
       typename_of_int,
       typename_of_int32,
       typename_of_int64,
       typename_of_nativeint,
       typename_of_char,
       typename_of_float,
       typename_of_string,
       typename_of_bytes,
       typename_of_bool,
       typename_of_unit,
       typename_of_option,
       typename_of_list,
       typename_of_array,
       typename_of_lazy_t,
       typename_of_ref,
       typename_of_function,
       typename_of_tuple0,
       typename_of_tuple2,
       typename_of_tuple3,
       typename_of_tuple4,
       typename_of_tuple5,
       0,
       with_return,
       am_running_inline_test,
       include$0,
       _eA_,
       _eB_];
    caml_register_global(7302,Core_kernel_Import,"Core_kernel__Import");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$2);
    caml_call1(Expect_test_collector[4][1],cst_src_sexpable_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$3,cst$0);
    var
     Of_sexpable=include$1[1],
     Of_sexpable1=include$1[2],
     Of_sexpable2=include$1[3],
     Of_sexpable3=include$1[4],
     Of_stringable=include$1[5];
    function V1(Sexpable,M)
     {function t_of_sexp(sexp)
       {var s=caml_call1(Sexpable[1],sexp);
        try
         {var _b73_=caml_call1(M[2],s);return _b73_}
        catch(exn)
         {exn = caml_wrap_exception(exn);return caml_call2(_es_,exn,sexp)}}
      function sexp_of_t(t)
       {var _b72_=caml_call1(M[1],t);return caml_call1(Sexpable[2],_b72_)}
      return [0,t_of_sexp,sexp_of_t]}
    var Of_sexpable$0=[0,V1];
    function V1$0(Sexpable,M)
     {function t_of_sexp(a_of_sexp,sexp)
       {var s=caml_call2(Sexpable[1],a_of_sexp,sexp);
        try
         {var _b71_=caml_call1(M[2],s);return _b71_}
        catch(exn)
         {exn = caml_wrap_exception(exn);return caml_call2(_es_,exn,sexp)}}
      function sexp_of_t(sexp_of_a,t)
       {var _b70_=caml_call1(M[1],t);
        return caml_call2(Sexpable[2],sexp_of_a,_b70_)}
      return [0,t_of_sexp,sexp_of_t]}
    var Of_sexpable1$0=[0,V1$0];
    function V1$1(Sexpable,M)
     {function t_of_sexp(a_of_sexp,b_of_sexp,sexp)
       {var s=caml_call3(Sexpable[1],a_of_sexp,b_of_sexp,sexp);
        try
         {var _b7Z_=caml_call1(M[2],s);return _b7Z_}
        catch(exn)
         {exn = caml_wrap_exception(exn);return caml_call2(_es_,exn,sexp)}}
      function sexp_of_t(sexp_of_a,sexp_of_b,t)
       {var _b7Y_=caml_call1(M[1],t);
        return caml_call3(Sexpable[2],sexp_of_a,sexp_of_b,_b7Y_)}
      return [0,t_of_sexp,sexp_of_t]}
    var Of_sexpable2$0=[0,V1$1];
    function V1$2(Sexpable,M)
     {function t_of_sexp(a_of_sexp,b_of_sexp,c_of_sexp,sexp)
       {var s=caml_call4(Sexpable[1],a_of_sexp,b_of_sexp,c_of_sexp,sexp);
        try
         {var _b7X_=caml_call1(M[2],s);return _b7X_}
        catch(exn)
         {exn = caml_wrap_exception(exn);return caml_call2(_es_,exn,sexp)}}
      function sexp_of_t(sexp_of_a,sexp_of_b,sexp_of_c,t)
       {var _b7W_=caml_call1(M[1],t);
        return caml_call4(Sexpable[2],sexp_of_a,sexp_of_b,sexp_of_c,_b7W_)}
      return [0,t_of_sexp,sexp_of_t]}
    var Of_sexpable3$0=[0,V1$2];
    function V1$3(M)
     {function t_of_sexp(sexp)
       {if(0 === sexp[0])
         {var s=sexp[1];
          try
           {var _b7V_=caml_call1(M[1],s);return _b7V_}
          catch(exn)
           {exn = caml_wrap_exception(exn);return caml_call2(_es_,exn,sexp)}}
        return caml_call2
                (_er_,
                 cst_Sexpable_Of_stringable_t_of_sexp_expected_an_atom_but_got_a_list,
                 sexp)}
      function sexp_of_t(t){return [0,caml_call1(M[2],t)]}
      return [0,t_of_sexp,sexp_of_t]}
    var Of_stringable$0=[0,V1$3];
    function V1$4(M)
     {function of_string(x){return caml_call2(Sexplib_Conv[67],M[1],x)}
      function to_string(x){return caml_call2(Sexplib_Conv[59],M[2],x)}
      return [0,of_string,to_string]}
    var
     To_stringable=[0,V1$4],
     Stable=
      [0,
       Of_sexpable$0,
       Of_sexpable1$0,
       Of_sexpable2$0,
       Of_sexpable3$0,
       Of_stringable$0,
       To_stringable];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$4);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     _eC_=Stable[6][1],
     Core_kernel_Sexpable=
      [0,
       Of_sexpable,
       Of_sexpable1,
       Of_sexpable2,
       Of_sexpable3,
       Of_stringable,
       _eC_,
       Stable];
    caml_register_global(7304,Core_kernel_Sexpable,"Core_kernel__Sexpable");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$5);
    caml_call1(Expect_test_collector[4][1],cst_src_binable0_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$6,cst$1);
    var Minimal=include$2[1],Shape=0,List=0;
    function V1$5(Binable,M)
     {var to_binable=M[1],of_binable=M[2];
      return caml_call1(Bin_prot_Utils[7],[0,Binable,to_binable,of_binable])}
    var Of_binable=[0,V1$5];
    function V1$6(Binable,M)
     {var to_binable=M[1],of_binable=M[2];
      return caml_call1(Bin_prot_Utils[8],[0,Binable,to_binable,of_binable])}
    var Of_binable1=[0,V1$6];
    function V1$7(Binable,M)
     {var to_binable=M[1],of_binable=M[2];
      return caml_call1(Bin_prot_Utils[9],[0,Binable,to_binable,of_binable])}
    var Of_binable2=[0,V1$7];
    function V1$8(Binable,M)
     {var to_binable=M[1],of_binable=M[2];
      return caml_call1(Bin_prot_Utils[10],[0,Binable,to_binable,of_binable])}
    var Of_binable3=[0,V1$8];
    function V1$9(M)
     {var
       to_binable=M[2],
       of_binable=M[1],
       _b7P_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t),
       _b7Q_=
        [0,
         [0,cst_Atom,[0,_b1_,0]],
         [0,
          [0,
           cst_List,
           [0,
            caml_call1
             (_de_,caml_call1(caml_call1(Bin_prot_Shape[13],_b7P_),0)),
            0]],
          0]],
       _b7R_=caml_call1(Bin_prot_Shape[9],_b7Q_),
       _b7S_=
        [0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$0),0,_b7R_],0],
       _b7T_=
        caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_binable0_ml_75_10),
       group=caml_call2(Bin_prot_Shape[6],_b7T_,_b7S_),
       _b7U_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$1),
       bin_shape_t=caml_call1(caml_call2(Bin_prot_Shape[14],group,_b7U_),0),
       _b7O_=[0,to_binable,of_binable];
      function bin_size_t$0(param)
       {if(0 === param[0])
         {var v1=param[1];return 1 + caml_call1(bin_size_t,v1) | 0}
        var v1$0=param[1];
        return 1 + caml_call2(_bn_,bin_size_t$0,v1$0) | 0}
      function bin_write_t$0(buf,pos,param)
       {if(0 === param[0])
         {var v1=param[1],pos$0=caml_call3(Bin_prot_Write[30],buf,pos,0);
          return caml_call3(bin_write_t,buf,pos$0,v1)}
        var v1$0=param[1],pos$1=caml_call3(Bin_prot_Write[30],buf,pos,1);
        return caml_call3(caml_call1(_dg_,bin_write_t$0),buf,pos$1,v1$0)}
      function bin_read_t$0(buf,pos_ref,vint)
       {return caml_call2
                (Bin_prot_Common[19],
                 cst_src_binable0_ml_Stable_Of_sexpable_V1_t,
                 pos_ref[1])}
      function bin_read_t$1(buf,pos_ref)
       {var match=caml_call2(Bin_prot_Read[29],buf,pos_ref);
        if(0 === match)
         {var arg_1=caml_call2(bin_read_t,buf,pos_ref);return [0,arg_1]}
        if(1 === match)
         {var arg_1$0=caml_call2(caml_call1(_di_,bin_read_t$1),buf,pos_ref);
          return [1,arg_1$0]}
        return caml_call2(Bin_prot_Common[18],_eD_,pos_ref[1])}
      return caml_call1
              (caml_call1
                (Of_binable[1],
                 [0,
                  bin_shape_t,
                  bin_size_t$0,
                  bin_write_t$0,
                  bin_read_t$1,
                  bin_read_t$0]),
               _b7O_)}
    var Of_sexpable$1=[0,V1$9];
    function V1$10(M)
     {var
       _b7I_=
        [0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$2),0,_b1_],0],
       _b7J_=
        caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_binable0_ml_88_10),
       group=caml_call2(Bin_prot_Shape[6],_b7J_,_b7I_),
       _b7K_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$3),
       bin_shape_t=caml_call1(caml_call2(Bin_prot_Shape[14],group,_b7K_),0),
       _b7L_=M[2],
       Of_binable=[248,cst_Of_binable,caml_fresh_oo_id(0)];
      function _b7M_(param)
       {if(param[1] === Of_binable)
         {var
           v1=param[3],
           v0=param[2],
           v0$0=caml_call1(_Z_,v0),
           v1$0=caml_call1(sexp_of_t,v1);
          return [1,[0,_eE_,[0,v0$0,[0,v1$0,0]]]]}
        throw [0,Assert_failure,_eF_]}
      caml_call3(Sexplib0_Sexp_conv[51][2],0,Of_binable,_b7M_);
      function of_binable(s)
       {try
         {var _b7N_=caml_call1(M[1],s);return _b7N_}
        catch(x){x = caml_wrap_exception(x);throw [0,Of_binable,s,x]}}
      return caml_call1
              (Bin_prot_Utils[7],
               [0,
                [0,bin_shape_t,bin_size_t,bin_write_t,bin_read_t,bin_read_t$0],
                _b7L_,
                of_binable])}
    var
     Of_stringable$1=[0,V1$10],
     Stable$0=
      [0,
       Of_binable,
       Of_binable1,
       Of_binable2,
       Of_binable3,
       Of_sexpable$1,
       Of_stringable$1];
    function of_bigstring(m,bigstring)
     {var
       pos_ref=[0,0],
       t=caml_call2(m[3],bigstring,pos_ref),
       _b7H_=caml_ba_dim_1(bigstring);
      if(caml_call2(_aD_,pos_ref[1],_b7H_))return t;
      throw [0,Assert_failure,_eG_]}
    function create_bigstring(size)
     {return caml_call3(Bigarray[28][1],Bigarray[13],Bigarray[15],size)}
    function to_bigstring(opt,m,t)
     {if(opt)
       var sth=opt[1],prefix_with_length=sth;
      else
       var prefix_with_length=0;
      var
       t_length=caml_call1(m[1],t),
       bigstring_length=
        prefix_with_length?caml_call2(_ah_,t_length,8):t_length,
       bigstring=create_bigstring(bigstring_length),
       pos=
        prefix_with_length
         ?caml_call3(Bin_prot_Write[33],bigstring,0,t_length)
         :0,
       pos$0=caml_call3(m[2],bigstring,pos,t);
      if(caml_call2(_aD_,pos$0,bigstring_length))return bigstring;
      throw [0,Assert_failure,_eH_]}
    var
     Of_binable$0=0,
     Of_binable1$0=0,
     Of_binable2$0=0,
     Of_binable3$0=0,
     Of_sexpable$2=0,
     Of_stringable$2=0;
    function Of_only_functions_and_shape(X)
     {var
       _b7D_=X[5],
       _b7E_=
        [0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$4),0,_b7D_],0],
       _b7F_=
        caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_binable0_ml_159_2),
       group=caml_call2(Bin_prot_Shape[6],_b7F_,_b7E_),
       _b7G_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$5),
       bin_shape_t=caml_call1(caml_call2(Bin_prot_Shape[14],group,_b7G_),0),
       bin_size_t=X[1],
       bin_write_t=X[2],
       bin_writer_t=[0,bin_size_t,bin_write_t],
       bin_read_t=X[4],
       bin_read_t$0=X[3],
       bin_reader_t=[0,bin_read_t$0,bin_read_t],
       bin_t=[0,bin_shape_t,bin_writer_t,bin_reader_t];
      return [0,
              bin_size_t,
              bin_write_t,
              bin_read_t$0,
              bin_read_t,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$7);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     include$3=
      [0,
       Minimal,
       Shape,
       List,
       Stable$0,
       of_bigstring,
       create_bigstring,
       to_bigstring,
       Of_binable$0,
       Of_binable1$0,
       Of_binable2$0,
       Of_binable3$0,
       Of_sexpable$2,
       Of_stringable$2,
       Of_only_functions_and_shape];
    caml_register_global(7312,include$3,"Core_kernel__Binable0");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$8);
    caml_call1(Expect_test_collector[4][1],cst_src_printf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$9,cst$2);
    var
     _eI_=include$4[1],
     _eJ_=include$4[2],
     _eK_=include$4[3],
     _eL_=include$4[4],
     failwithf=include$4[6],
     _eO_=Stdio_Out_channel[24],
     _eP_=Stdio_Out_channel[22],
     _eR_=Stdio_Out_channel[23],
     _eM_=include$4[5],
     _eN_=include$4[7],
     _eQ_=Stdio_Out_channel[25];
    function exitf(fmt)
     {return caml_call2
              (_eL_,
               function(s,param)
                {caml_call2(_eO_,_eS_,s);return caml_call1(Stdlib[88],1)},
               fmt)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$10);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Printf=
      [0,_eI_,_eJ_,_eK_,_eL_,_eM_,failwithf,_eN_,_eO_,_eP_,_eQ_,_eR_,exitf];
    caml_register_global(7316,Core_kernel_Printf,"Core_kernel__Printf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$11);
    caml_call1(Expect_test_collector[4][1],cst_src_perms_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$12,cst$3);
    var
     _eT_=caml_call1(Bin_prot_Shape[9],0),
     _eU_=[0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$6),0,_eT_],0],
     _eV_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_perms_ml_10_4),
     group$0=caml_call2(Bin_prot_Shape[6],_eV_,_eU_),
     _eW_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$7),
     bin_shape_t=caml_call1(caml_call2(Bin_prot_Shape[14],group$0,_eW_),0);
    function bin_size_t$4(v)
     {throw [0,Bin_prot_Common[17],cst_src_perms_ml_Types_Nobody_t]}
    function bin_write_t$4(buf,param,v)
     {throw [0,Bin_prot_Common[17],cst_src_perms_ml_Types_Nobody_t$0]}
    var bin_writer_t=[0,bin_size_t$4,bin_write_t$4];
    function bin_read_t$9(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],
               cst_src_perms_ml_Types_Nobody_t$1,
               pos_ref[1])}
    function bin_read_t$10(buf,pos_ref)
     {return caml_call2(Bin_prot_Common[18],_eX_,pos_ref[1])}
    var
     bin_reader_t=[0,bin_read_t$10,bin_read_t$9],
     bin_t=[0,bin_shape_t,bin_writer_t,bin_reader_t];
    function compare(a_001,b_002)
     {return caml_call3(Ppx_compare_lib[2],cst_t$8,a_001,b_002)}
    function hash_fold_t$0(hsv,arg)
     {return caml_call1
              (_aV_,
               cst_hash_called_on_the_type_t_which_is_abstract_in_an_implementation)}
    function hash(x)
     {var hsv=caml_call2(Base_Hash[11],0,0),_b7C_=hash_fold_t$0(hsv,x);
      return caml_call1(Base_Hash[9],_b7C_)}
    function t_of_sexp$0(sexp)
     {return caml_call2(Sexplib0_Sexp_conv_error[26],tp_loc,sexp)}
    function sexp_of_t$1(v){throw [0,Assert_failure,_eY_]}
    var
     _eZ_=caml_call1(Bin_prot_Shape[9],0),
     _e0_=[0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$9),0,_eZ_],0],
     _e1_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_perms_ml_15_4),
     group$1=caml_call2(Bin_prot_Shape[6],_e1_,_e0_),
     _e2_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$10),
     bin_shape_t$0=caml_call1(caml_call2(Bin_prot_Shape[14],group$1,_e2_),0);
    function bin_size_t$5(v)
     {throw [0,Bin_prot_Common[17],cst_src_perms_ml_Types_Me_t]}
    function bin_write_t$5(buf,param,v)
     {throw [0,Bin_prot_Common[17],cst_src_perms_ml_Types_Me_t$0]}
    var bin_writer_t$0=[0,bin_size_t$5,bin_write_t$5];
    function bin_read_t$11(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_src_perms_ml_Types_Me_t$1,pos_ref[1])}
    function bin_read_t$12(buf,pos_ref)
     {return caml_call2(Bin_prot_Common[18],_e3_,pos_ref[1])}
    var
     bin_reader_t$0=[0,bin_read_t$12,bin_read_t$11],
     bin_t$0=[0,bin_shape_t$0,bin_writer_t$0,bin_reader_t$0];
    function compare$0(a_003,b_004)
     {return caml_call3(Ppx_compare_lib[2],cst_t$11,a_003,b_004)}
    function hash_fold_t$1(hsv,arg)
     {return caml_call1
              (_aV_,
               cst_hash_called_on_the_type_t_which_is_abstract_in_an_implementation$0)}
    function hash$0(x)
     {var hsv=caml_call2(Base_Hash[11],0,0),_b7B_=hash_fold_t$1(hsv,x);
      return caml_call1(Base_Hash[9],_b7B_)}
    function t_of_sexp$1(sexp)
     {return caml_call2(Sexplib0_Sexp_conv_error[26],tp_loc$0,sexp)}
    function sexp_of_t$2(v){throw [0,Assert_failure,_e4_]}
    var
     _e5_=[0,caml_call2(Bin_prot_Shape[10],cst_Read,0),0],
     _e6_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_perms_ml_20_13),
     _e7_=caml_call2(Bin_prot_Shape[12],_e6_,_e5_),
     _e8_=[0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$12),0,_e7_],0],
     _e9_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_perms_ml_20_4),
     group$2=caml_call2(Bin_prot_Shape[6],_e9_,_e8_),
     _e__=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$13),
     bin_shape_t$1=caml_call1(caml_call2(Bin_prot_Shape[14],group$2,_e__),0);
    function bin_size_t$6(param){return 4}
    function bin_write_t$6(buf,pos,param)
     {return caml_call3(Bin_prot_Write[29],buf,pos,914388854)}
    var bin_writer_t$1=[0,bin_size_t$6,bin_write_t$6];
    function bin_read_t$13(buf,param,vint)
     {if(914388854 === vint)return 914388854;throw Bin_prot_Common[13]}
    function bin_read_t$14(buf,pos_ref)
     {var vint=caml_call2(Bin_prot_Read[28],buf,pos_ref);
      try
       {var _b7z_=bin_read_t$13(buf,pos_ref,vint);return _b7z_}
      catch(_b7A_)
       {_b7A_ = caml_wrap_exception(_b7A_);
        if(_b7A_ === Bin_prot_Common[13])
         return caml_call2(Bin_prot_Common[18],err,pos_ref[1]);
        throw _b7A_}}
    var
     bin_reader_t$1=[0,bin_read_t$14,bin_read_t$13],
     bin_t$1=[0,bin_shape_t$1,bin_writer_t$1,bin_reader_t$1];
    function compare$1(a_005,b_006)
     {return caml_call2(Ppx_compare_lib[1],a_005,b_006)?0:0}
    function hash_fold_t$2(hsv,arg)
     {return caml_call2(Base_Hash[3],hsv,914388854)}
    function hash$1(x)
     {var hsv=caml_call2(Base_Hash[11],0,0),_b7y_=hash_fold_t$2(hsv,x);
      return caml_call1(Base_Hash[9],_b7y_)}
    function t_of_sexp$2(sexp)
     {if(0 === sexp[0])
       {var atom=sexp[1];
        return caml_string_notequal(atom,cst_Read$0)
                ?caml_call1(Sexplib0_Sexp_conv_error[18],0)
                :914388854}
      var _b7w_=sexp[1];
      if(_b7w_)
       {var _b7x_=_b7w_[1];
        if(0 === _b7x_[0])
         {var atom$0=_b7x_[1];
          return caml_string_notequal(atom$0,cst_Read$1)
                  ?caml_call1(Sexplib0_Sexp_conv_error[18],0)
                  :caml_call2(Sexplib0_Sexp_conv_error[20],tp_loc$1,sexp)}
        return caml_call2(Sexplib0_Sexp_conv_error[23],tp_loc$1,sexp)}
      return caml_call2(Sexplib0_Sexp_conv_error[24],tp_loc$1,sexp)}
    function t_of_sexp$3(sexp)
     {try
       {var _b7u_=t_of_sexp$2(sexp);return _b7u_}
      catch(_b7v_)
       {_b7v_ = caml_wrap_exception(_b7v_);
        if(_b7v_ === Sexplib0_Sexp_conv_error[17])
         return caml_call2(Sexplib0_Sexp_conv_error[19],tp_loc$2,sexp);
        throw _b7v_}}
    function sexp_of_t$3(param){return _e$_}
    var
     _fa_=
      [0,caml_call2(Bin_prot_Shape[10],cst_Who_can_write,[0,bin_shape_t$0]),0],
     _fb_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_perms_ml_26_13),
     _fc_=caml_call2(Bin_prot_Shape[12],_fb_,_fa_),
     _fd_=[0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$14),0,_fc_],0],
     _fe_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_perms_ml_26_4),
     group$3=caml_call2(Bin_prot_Shape[6],_fe_,_fd_),
     _ff_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$15),
     bin_shape_t$2=caml_call1(caml_call2(Bin_prot_Shape[14],group$3,_ff_),0);
    function bin_size_t$7(param)
     {var args=param[2],size_args=bin_size_t$5(args);return size_args + 4 | 0}
    function bin_write_t$7(buf,pos,param)
     {var
       args=param[2],
       pos$0=caml_call3(Bin_prot_Write[29],buf,pos,271892623);
      return bin_write_t$5(buf,pos$0,args)}
    var bin_writer_t$2=[0,bin_size_t$7,bin_write_t$7];
    function bin_read_t$15(buf,pos_ref,vint)
     {if(271892623 === vint)
       {var arg_1=bin_read_t$12(buf,pos_ref);return [0,271892623,arg_1]}
      throw Bin_prot_Common[13]}
    function bin_read_t$16(buf,pos_ref)
     {var vint=caml_call2(Bin_prot_Read[28],buf,pos_ref);
      try
       {var _b7s_=bin_read_t$15(buf,pos_ref,vint);return _b7s_}
      catch(_b7t_)
       {_b7t_ = caml_wrap_exception(_b7t_);
        if(_b7t_ === Bin_prot_Common[13])
         return caml_call2(Bin_prot_Common[18],err$0,pos_ref[1]);
        throw _b7t_}}
    var
     bin_reader_t$2=[0,bin_read_t$16,bin_read_t$15],
     bin_t$2=[0,bin_shape_t$2,bin_writer_t$2,bin_reader_t$2];
    function compare$2(a_007,b_008)
     {if(caml_call2(Ppx_compare_lib[1],a_007,b_008))return 0;
      var right_010=b_008[2],left_009=a_007[2];
      return compare$0(left_009,right_010)}
    function hash_fold_t$3(hsv,arg)
     {var v=arg[2],hsv$0=caml_call2(Base_Hash[3],hsv,271892623);
      return hash_fold_t$1(hsv$0,v)}
    function hash$2(x)
     {var hsv=caml_call2(Base_Hash[11],0,0),_b7r_=hash_fold_t$3(hsv,x);
      return caml_call1(Base_Hash[9],_b7r_)}
    function t_of_sexp$4(sexp)
     {if(0 === sexp[0])
       {var atom=sexp[1];
        return caml_string_notequal(atom,cst_Who_can_write$0)
                ?caml_call1(Sexplib0_Sexp_conv_error[18],0)
                :caml_call2(Sexplib0_Sexp_conv_error[22],tp_loc$3,sexp)}
      var _b7p_=sexp[1];
      if(_b7p_)
       {var _b7q_=_b7p_[1];
        if(0 === _b7q_[0])
         {var sexp_args=_b7p_[2],atom$0=_b7q_[1];
          if(caml_string_notequal(atom$0,cst_Who_can_write$1))
           return caml_call1(Sexplib0_Sexp_conv_error[18],0);
          if(sexp_args)
           if(! sexp_args[2])
            {var v0=sexp_args[1],v0$0=t_of_sexp$1(v0);
             return [0,271892623,v0$0]}
          return caml_call3(Sexplib0_Sexp_conv_error[21],tp_loc$3,atom$0,sexp)}
        return caml_call2(Sexplib0_Sexp_conv_error[23],tp_loc$3,sexp)}
      return caml_call2(Sexplib0_Sexp_conv_error[24],tp_loc$3,sexp)}
    function t_of_sexp$5(sexp)
     {try
       {var _b7n_=t_of_sexp$4(sexp);return _b7n_}
      catch(_b7o_)
       {_b7o_ = caml_wrap_exception(_b7o_);
        if(_b7o_ === Sexplib0_Sexp_conv_error[17])
         return caml_call2(Sexplib0_Sexp_conv_error[19],tp_loc$4,sexp);
        throw _b7o_}}
    function sexp_of_t$4(param)
     {var v0=param[2];return [1,[0,_fg_,[0,sexp_of_t$2(v0),0]]]}
    var
     _fh_=
      [0,caml_call2(Bin_prot_Shape[10],cst_Who_can_write$2,[0,bin_shape_t]),0],
     _fi_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_perms_ml_32_15),
     _fj_=[0,caml_call2(Bin_prot_Shape[11],_fi_,bin_shape_t$1),_fh_],
     _fk_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_perms_ml_32_13),
     _fl_=caml_call2(Bin_prot_Shape[12],_fk_,_fj_),
     _fm_=[0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$16),0,_fl_],0],
     _fn_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_perms_ml_32_4),
     group$4=caml_call2(Bin_prot_Shape[6],_fn_,_fm_),
     _fo_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$17),
     bin_shape_t$3=caml_call1(caml_call2(Bin_prot_Shape[14],group$4,_fo_),0);
    function bin_size_t$8(v)
     {if(typeof v === "number")return 4;
      var args=v[2],size_args=bin_size_t$4(args);
      return size_args + 4 | 0}
    function bin_write_t$8(buf,pos,v)
     {if(typeof v === "number")return bin_write_t$6(buf,pos,v);
      var args=v[2],pos$0=caml_call3(Bin_prot_Write[29],buf,pos,271892623);
      return bin_write_t$4(buf,pos$0,args)}
    var bin_writer_t$3=[0,bin_size_t$8,bin_write_t$8];
    function bin_read_t$17(buf,pos_ref,vint)
     {try
       {var _b7l_=bin_read_t$13(buf,pos_ref,vint);return _b7l_}
      catch(_b7m_)
       {_b7m_ = caml_wrap_exception(_b7m_);
        if(_b7m_ === Bin_prot_Common[13])
         {if(271892623 === vint)
           {var arg_1=bin_read_t$10(buf,pos_ref);return [0,271892623,arg_1]}
          throw Bin_prot_Common[13]}
        throw _b7m_}}
    function bin_read_t$18(buf,pos_ref)
     {var vint=caml_call2(Bin_prot_Read[28],buf,pos_ref);
      try
       {var _b7j_=bin_read_t$17(buf,pos_ref,vint);return _b7j_}
      catch(_b7k_)
       {_b7k_ = caml_wrap_exception(_b7k_);
        if(_b7k_ === Bin_prot_Common[13])
         return caml_call2(Bin_prot_Common[18],err$1,pos_ref[1]);
        throw _b7k_}}
    var
     bin_reader_t$3=[0,bin_read_t$18,bin_read_t$17],
     bin_t$3=[0,bin_shape_t$3,bin_writer_t$3,bin_reader_t$3];
    function compare$3(a_011,b_012)
     {if(caml_call2(Ppx_compare_lib[1],a_011,b_012))return 0;
      if(typeof a_011 === "number")
       {if(914388854 === b_012)return compare$1(a_011,b_012)}
      else
       if(typeof b_012 !== "number")
        if(271892623 === b_012[1])
         {var right_016=b_012[2],left_015=a_011[2];
          return compare(left_015,right_016)}
      return caml_compare(a_011,b_012)}
    function hash_fold_t$4(hsv,arg)
     {if(typeof arg === "number")return hash_fold_t$2(hsv,arg);
      var v=arg[2],hsv$0=caml_call2(Base_Hash[3],hsv,271892623);
      return hash_fold_t$0(hsv$0,v)}
    function hash$3(x)
     {var hsv=caml_call2(Base_Hash[11],0,0),_b7i_=hash_fold_t$4(hsv,x);
      return caml_call1(Base_Hash[9],_b7i_)}
    function t_of_sexp$6(sexp)
     {try
       {try
         {var _b7e_=t_of_sexp$2(sexp),_b7f_=_b7e_}
        catch(_b7h_)
         {_b7h_ = caml_wrap_exception(_b7h_);
          if(_b7h_ !== Sexplib0_Sexp_conv_error[17])throw _b7h_;
          if(0 === sexp[0])
           var
            atom=sexp[1],
            _b7f_=
             caml_string_notequal(atom,cst_Who_can_write$3)
              ?caml_call1(Sexplib0_Sexp_conv_error[18],0)
              :caml_call2(Sexplib0_Sexp_conv_error[22],tp_loc$5,sexp);
          else
           {var _b7c_=sexp[1];
            if(_b7c_)
             {var _b7d_=_b7c_[1];
              if(0 === _b7d_[0])
               {var sexp_args=_b7c_[2],atom$0=_b7d_[1];
                if(caml_string_notequal(atom$0,cst_Who_can_write$4))
                 var _b7f_=caml_call1(Sexplib0_Sexp_conv_error[18],0);
                else
                 {if(sexp_args)
                   if(sexp_args[2])
                    var switch$0=0;
                   else
                    var
                     v0=sexp_args[1],
                     v0$0=t_of_sexp$0(v0),
                     _b7f_=[0,271892623,v0$0],
                     switch$0=1;
                  else
                   var switch$0=0;
                  if(! switch$0)
                   var
                    _b7f_=
                     caml_call3
                      (Sexplib0_Sexp_conv_error[21],tp_loc$5,atom$0,sexp)}}
              else
               var
                _b7f_=
                 caml_call2(Sexplib0_Sexp_conv_error[23],tp_loc$5,sexp)}
            else
             var _b7f_=caml_call2(Sexplib0_Sexp_conv_error[24],tp_loc$5,sexp)}}
        return _b7f_}
      catch(_b7g_)
       {_b7g_ = caml_wrap_exception(_b7g_);
        if(_b7g_ === Sexplib0_Sexp_conv_error[17])
         return caml_call2(Sexplib0_Sexp_conv_error[19],tp_loc$6,sexp);
        throw _b7g_}}
    function sexp_of_t$5(v)
     {if(typeof v === "number")return sexp_of_t$3(v);
      var v0=v[2];
      return [1,[0,_fp_,[0,sexp_of_t$1(v0),0]]]}
    var
     _fq_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_perms_ml_38_24),
     _fr_=[0,caml_call2(Bin_prot_Shape[11],_fq_,bin_shape_t$2),0],
     _fs_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_perms_ml_38_15),
     _ft_=[0,caml_call2(Bin_prot_Shape[11],_fs_,bin_shape_t$1),_fr_],
     _fu_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_perms_ml_38_13),
     _fv_=caml_call2(Bin_prot_Shape[12],_fu_,_ft_),
     _fw_=[0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$18),0,_fv_],0],
     _fx_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_perms_ml_38_4),
     group$5=caml_call2(Bin_prot_Shape[6],_fx_,_fw_),
     _fy_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$19),
     bin_shape_t$4=caml_call1(caml_call2(Bin_prot_Shape[14],group$5,_fy_),0);
    function bin_size_t$9(v){return typeof v === "number"?4:bin_size_t$7(v)}
    function bin_write_t$9(buf,pos,v)
     {return typeof v === "number"
              ?bin_write_t$6(buf,pos,v)
              :bin_write_t$7(buf,pos,v)}
    var bin_writer_t$4=[0,bin_size_t$9,bin_write_t$9];
    function bin_read_t$19(buf,pos_ref,vint)
     {try
       {var _b7a_=bin_read_t$13(buf,pos_ref,vint);return _b7a_}
      catch(_b7b_)
       {_b7b_ = caml_wrap_exception(_b7b_);
        if(_b7b_ === Bin_prot_Common[13])
         return bin_read_t$15(buf,pos_ref,vint);
        throw _b7b_}}
    function bin_read_t$20(buf,pos_ref)
     {var vint=caml_call2(Bin_prot_Read[28],buf,pos_ref);
      try
       {var _b6__=bin_read_t$19(buf,pos_ref,vint);return _b6__}
      catch(_b6$_)
       {_b6$_ = caml_wrap_exception(_b6$_);
        if(_b6$_ === Bin_prot_Common[13])
         return caml_call2(Bin_prot_Common[18],err$2,pos_ref[1]);
        throw _b6$_}}
    var
     bin_reader_t$4=[0,bin_read_t$20,bin_read_t$19],
     bin_t$4=[0,bin_shape_t$4,bin_writer_t$4,bin_reader_t$4];
    function compare$4(a_017,b_018)
     {if(caml_call2(Ppx_compare_lib[1],a_017,b_018))return 0;
      if(typeof a_017 === "number")
       {if(914388854 === b_018)return compare$1(a_017,b_018)}
      else
       if(typeof b_018 !== "number")
        if(271892623 === b_018[1])return compare$2(a_017,b_018);
      return caml_compare(a_017,b_018)}
    function hash_fold_t$5(hsv,arg)
     {return typeof arg === "number"
              ?hash_fold_t$2(hsv,arg)
              :hash_fold_t$3(hsv,arg)}
    function hash$4(x)
     {var hsv=caml_call2(Base_Hash[11],0,0),_b69_=hash_fold_t$5(hsv,x);
      return caml_call1(Base_Hash[9],_b69_)}
    function t_of_sexp$7(sexp)
     {try
       {try
         {var _b65_=t_of_sexp$2(sexp),_b66_=_b65_}
        catch(_b68_)
         {_b68_ = caml_wrap_exception(_b68_);
          if(_b68_ !== Sexplib0_Sexp_conv_error[17])throw _b68_;
          var _b66_=t_of_sexp$4(sexp)}
        return _b66_}
      catch(_b67_)
       {_b67_ = caml_wrap_exception(_b67_);
        if(_b67_ === Sexplib0_Sexp_conv_error[17])
         return caml_call2(Sexplib0_Sexp_conv_error[19],tp_loc$7,sexp);
        throw _b67_}}
    function sexp_of_t$6(v)
     {return typeof v === "number"?sexp_of_t$3(v):sexp_of_t$4(v)}
    var
     _fz_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$1),
     _fA_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_perms_ml_44_45),
     _fB_=[0,caml_call2(Bin_prot_Shape[15],_fA_,_fz_)],
     _fC_=[0,caml_call2(Bin_prot_Shape[10],cst_Who_can_write$5,_fB_),0],
     _fD_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_perms_ml_44_18),
     _fE_=[0,caml_call2(Bin_prot_Shape[11],_fD_,bin_shape_t$1),_fC_],
     _fF_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_perms_ml_44_16),
     _fG_=caml_call2(Bin_prot_Shape[12],_fF_,_fE_),
     _fH_=[0,caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$2),0],
     _fI_=
      [0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$20),_fH_,_fG_],0],
     _fJ_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_perms_ml_44_4),
     group$6=caml_call2(Bin_prot_Shape[6],_fJ_,_fI_);
    function bin_read_t$21(of_a,buf,pos_ref,vint)
     {try
       {var _b63_=bin_read_t$13(buf,pos_ref,vint);return _b63_}
      catch(_b64_)
       {_b64_ = caml_wrap_exception(_b64_);
        if(_b64_ === Bin_prot_Common[13])
         {if(271892623 === vint)
           {var arg_1=caml_call2(of_a,buf,pos_ref);return [0,271892623,arg_1]}
          throw Bin_prot_Common[13]}
        throw _b64_}}
    function bin_read_t$22(of_a,buf,pos_ref)
     {var vint=caml_call2(Bin_prot_Read[28],buf,pos_ref);
      try
       {var
         _b6Y_=
          function(_b60_,_b61_,_b62_)
            {return bin_read_t$21(of_a,_b60_,_b61_,_b62_)}
           (buf,pos_ref,vint);
        return _b6Y_}
      catch(_b6Z_)
       {_b6Z_ = caml_wrap_exception(_b6Z_);
        if(_b6Z_ === Bin_prot_Common[13])
         return caml_call2(Bin_prot_Common[18],err$3,pos_ref[1]);
        throw _b6Z_}}
    function Only_used_as_phantom_type1(Name)
     {function sexp_of_t(param,_b6X_)
       {return caml_call3(failwithf,_fN_,Name[1],0)}
      function t_of_sexp(param,_b6W_)
       {return caml_call3(failwithf,_fO_,Name[1],0)}
      function compare(param,_b6V_,_b6U_)
       {return caml_call3(failwithf,_fP_,Name[1],0)}
      function hash_fold_t(param,_b6T_,_b6S_)
       {return caml_call3(failwithf,_fQ_,Name[1],0)}
      function to_binable(param){return caml_call3(failwithf,_fR_,Name[1],0)}
      function of_binable(param){return caml_call3(failwithf,_fS_,Name[1],0)}
      var
       _b6L_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$3),
       _b6M_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_perms_ml_71_26),
       _b6N_=caml_call2(Bin_prot_Shape[15],_b6M_,_b6L_),
       _b6O_=[0,caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$4),0],
       _b6P_=
        [0,
         [0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$22),_b6O_,_b6N_],
         0],
       _b6Q_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_perms_ml_71_14),
       group=caml_call2(Bin_prot_Shape[6],_b6Q_,_b6P_),
       _b6K_=[0,to_binable,of_binable];
      function bin_shape_t(a)
       {var _b6R_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$23);
        return caml_call1(caml_call2(Bin_prot_Shape[14],group,_b6R_),[0,a,0])}
      function bin_size_t(size_of_a){return size_of_a}
      function bin_write_t(write_a){return write_a}
      function bin_read_t(of_a,buf,pos_ref,vint)
       {return caml_call2(Bin_prot_Common[18],_fT_,pos_ref[1])}
      function bin_read_t$0(of_a){return of_a}
      var
       include=
        caml_call1
         (caml_call1
           (Stable$0[2][1],
            [0,bin_shape_t,bin_size_t,bin_write_t,bin_read_t$0,bin_read_t]),
          _b6K_),
       bin_shape_t$0=include[1],
       bin_size_t$0=include[2],
       bin_write_t$0=include[3],
       bin_read_t$1=include[4],
       bin_read_t$2=include[5],
       bin_writer_t=include[6],
       bin_reader_t=include[7],
       bin_t=include[8];
      return [0,
              bin_t,
              bin_read_t$1,
              bin_read_t$2,
              bin_reader_t,
              bin_size_t$0,
              bin_write_t$0,
              bin_writer_t,
              bin_shape_t$0,
              compare,
              hash_fold_t,
              t_of_sexp,
              sexp_of_t]}
    function Only_used_as_phantom_type0(T)
     {var
       M=Only_used_as_phantom_type1([0,T[14]]),
       _b6F_=caml_call1(M[8],T[8]),
       _b6G_=
        [0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$24),0,_b6F_],0],
       _b6H_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_perms_ml_88_2),
       group=caml_call2(Bin_prot_Shape[6],_b6H_,_b6G_),
       _b6I_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$25),
       bin_shape_t=caml_call1(caml_call2(Bin_prot_Shape[14],group,_b6I_),0);
      function bin_size_t(v){return caml_call2(M[5],T[5],v)}
      function bin_write_t(buf,pos,v)
       {return caml_call3(caml_call1(M[6],T[6]),buf,pos,v)}
      var bin_writer_t=[0,bin_size_t,bin_write_t];
      function bin_read_t(buf,pos_ref,vint)
       {return caml_call3(caml_call1(M[3],T[2]),buf,pos_ref,vint)}
      function bin_read_t$0(buf,pos_ref)
       {return caml_call2(caml_call1(M[2],T[2]),buf,pos_ref)}
      var
       bin_reader_t=[0,bin_read_t$0,bin_read_t],
       bin_t=[0,bin_shape_t,bin_writer_t,bin_reader_t];
      function compare(a_029,b_030){return caml_call3(M[9],T[9],a_029,b_030)}
      function hash_fold_t(hsv,arg){return caml_call3(M[10],T[10],hsv,arg)}
      function hash(x)
       {var hsv=caml_call2(Base_Hash[11],0,0),_b6J_=hash_fold_t(hsv,x);
        return caml_call1(Base_Hash[9],_b6J_)}
      function t_of_sexp(t){return caml_call2(M[11],T[12],t)}
      function sexp_of_t(v){return caml_call2(M[12],T[13],v)}
      return [0,
              bin_t,
              bin_read_t$0,
              bin_read_t,
              bin_reader_t,
              bin_size_t,
              bin_write_t,
              bin_writer_t,
              bin_shape_t,
              compare,
              hash_fold_t,
              hash,
              t_of_sexp,
              t_of_sexp,
              sexp_of_t]}
    var
     Nobody=
      Only_used_as_phantom_type0
       ([0,
         bin_t,
         bin_read_t$10,
         bin_read_t$9,
         bin_reader_t,
         bin_size_t$4,
         bin_write_t$4,
         bin_writer_t,
         bin_shape_t,
         compare,
         hash_fold_t$0,
         hash,
         t_of_sexp$0,
         sexp_of_t$1,
         name$0]),
     Me=
      Only_used_as_phantom_type0
       ([0,
         bin_t$0,
         bin_read_t$12,
         bin_read_t$11,
         bin_reader_t$0,
         bin_size_t$5,
         bin_write_t$5,
         bin_writer_t$0,
         bin_shape_t$0,
         compare$0,
         hash_fold_t$1,
         hash$0,
         t_of_sexp$1,
         sexp_of_t$2,
         name$1]),
     Read=
      Only_used_as_phantom_type0
       ([0,
         bin_t$1,
         bin_read_t$14,
         bin_read_t$13,
         bin_reader_t$1,
         bin_size_t$6,
         bin_write_t$6,
         bin_writer_t$1,
         bin_shape_t$1,
         compare$1,
         hash_fold_t$2,
         hash$1,
         t_of_sexp$3,
         sexp_of_t$3,
         name$2]),
     Write=
      Only_used_as_phantom_type0
       ([0,
         bin_t$2,
         bin_read_t$16,
         bin_read_t$15,
         bin_reader_t$2,
         bin_size_t$7,
         bin_write_t$7,
         bin_writer_t$2,
         bin_shape_t$2,
         compare$2,
         hash_fold_t$3,
         hash$2,
         t_of_sexp$5,
         sexp_of_t$4,
         name$3]),
     Read_write=
      Only_used_as_phantom_type0
       ([0,
         bin_t$4,
         bin_read_t$20,
         bin_read_t$19,
         bin_reader_t$4,
         bin_size_t$9,
         bin_write_t$9,
         bin_writer_t$4,
         bin_shape_t$4,
         compare$4,
         hash_fold_t$5,
         hash$4,
         t_of_sexp$7,
         sexp_of_t$6,
         name$5]),
     Immutable=
      Only_used_as_phantom_type0
       ([0,
         bin_t$3,
         bin_read_t$18,
         bin_read_t$17,
         bin_reader_t$3,
         bin_size_t$8,
         bin_write_t$8,
         bin_writer_t$3,
         bin_shape_t$3,
         compare$3,
         hash_fold_t$4,
         hash$3,
         t_of_sexp$6,
         sexp_of_t$5,
         name$4]),
     _fU_=Nobody[8],
     _fV_=
      [0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_nobody),0,_fU_],0],
     _fW_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_perms_ml_101_4),
     group$7=caml_call2(Bin_prot_Shape[6],_fW_,_fV_),
     _fX_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_nobody$0),
     bin_shape_nobody=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$7,_fX_),0),
     bin_size_nobody=Nobody[5],
     bin_write_nobody=Nobody[6],
     bin_writer_nobody=[0,bin_size_nobody,bin_write_nobody],
     bin_read_nobody=Nobody[3],
     bin_read_nobody$0=Nobody[2],
     bin_reader_nobody=[0,bin_read_nobody$0,bin_read_nobody],
     bin_nobody=[0,bin_shape_nobody,bin_writer_nobody,bin_reader_nobody],
     compare_nobody=Nobody[9],
     hash_fold_nobody=Nobody[10],
     func=Nobody[11];
    function hash_nobody(x){return caml_call1(func,x)}
    var
     _fY_=Nobody[12],
     _fZ_=Nobody[14],
     _f0_=Me[8],
     _f1_=[0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_me),0,_f0_],0],
     _f2_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_perms_ml_102_4),
     group$8=caml_call2(Bin_prot_Shape[6],_f2_,_f1_),
     _f3_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_me$0),
     bin_shape_me=caml_call1(caml_call2(Bin_prot_Shape[14],group$8,_f3_),0),
     bin_size_me=Me[5],
     bin_write_me=Me[6],
     bin_writer_me=[0,bin_size_me,bin_write_me],
     bin_read_me=Me[3],
     bin_read_me$0=Me[2],
     bin_reader_me=[0,bin_read_me$0,bin_read_me],
     bin_me=[0,bin_shape_me,bin_writer_me,bin_reader_me],
     compare_me=Me[9],
     hash_fold_me=Me[10],
     func$0=Me[11];
    function hash_me(x){return caml_call1(func$0,x)}
    var
     _f4_=Me[12],
     _f5_=Me[14],
     M=Only_used_as_phantom_type1([0,name$6]),
     _f6_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$5),
     _f7_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_perms_ml_106_18),
     a=caml_call2(Bin_prot_Shape[15],_f7_,_f6_),
     _fK_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$21),
     _fL_=caml_call1(caml_call2(Bin_prot_Shape[14],group$6,_fK_),[0,a,0]),
     _f8_=caml_call1(M[8],_fL_),
     _f9_=[0,caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$6),0],
     _f__=
      [0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$26),_f9_,_f8_],0],
     _f$_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_perms_ml_106_6),
     group$9=caml_call2(Bin_prot_Shape[6],_f$_,_f__);
    function bin_shape_t$5(a)
     {var _b6E_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$27);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$9,_b6E_),[0,a,0])}
    function bin_size_t$10(size_of_a,v)
     {function _b6D_(v)
       {if(typeof v === "number")return 4;
        var args=v[2],size_args=caml_call1(size_of_a,args);
        return size_args + 4 | 0}
      return caml_call2(M[5],_b6D_,v)}
    function bin_write_t$10(write_a,buf,pos,v)
     {function _b6C_(buf,pos$0,v)
       {if(typeof v === "number")return bin_write_t$6(buf,pos$0,v);
        var args=v[2],pos=caml_call3(Bin_prot_Write[29],buf,pos$0,271892623);
        return caml_call3(write_a,buf,pos,args)}
      return caml_call3(caml_call1(M[6],_b6C_),buf,pos,v)}
    function bin_writer_t$5(bin_writer_a)
     {function _b6y_(v)
       {var _b6z_=bin_writer_a[2];
        return function(_b6A_,_b6B_)
         {return bin_write_t$10(_b6z_,v,_b6A_,_b6B_)}}
      return [0,function(v){return bin_size_t$10(bin_writer_a[1],v)},_b6y_]}
    function bin_read_t$23(of_a,buf,pos_ref,vint)
     {function _b6v_(_b6w_,_b6x_){return bin_read_t$22(of_a,_b6w_,_b6x_)}
      return caml_call3(caml_call1(M[3],_b6v_),buf,pos_ref,vint)}
    function bin_read_t$24(of_a,buf,pos_ref)
     {function _b6s_(_b6t_,_b6u_){return bin_read_t$22(of_a,_b6t_,_b6u_)}
      return caml_call2(caml_call1(M[2],_b6s_),buf,pos_ref)}
    function bin_reader_t$5(bin_reader_a)
     {function _b6r_(buf,pos_ref,vtag)
       {return bin_read_t$23(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$24(bin_reader_a[1],buf,pos_ref)},
              _b6r_]}
    function bin_t$5(bin_a)
     {var _b6p_=bin_reader_t$5(bin_a[3]),_b6q_=bin_writer_t$5(bin_a[2]);
      return [0,bin_shape_t$5(bin_a[1]),_b6q_,_b6p_]}
    function compare_perms(cmp_a,a_037,b_038)
     {function _b6o_(a_039,b_040)
       {if(caml_call2(Ppx_compare_lib[1],a_039,b_040))return 0;
        if(typeof a_039 === "number")
         {if(914388854 === b_040)return compare$1(a_039,b_040)}
        else
         if(typeof b_040 !== "number")
          if(271892623 === b_040[1])
           {var right_028=b_040[2],left_027=a_039[2];
            return caml_call2(cmp_a,left_027,right_028)}
        return caml_compare(a_039,b_040)}
      return caml_call3(M[9],_b6o_,a_037,b_038)}
    function hash_fold_perms(hash_fold_a,hsv,arg)
     {function _b6n_(hsv$0,arg)
       {if(typeof arg === "number")return hash_fold_t$2(hsv$0,arg);
        var v=arg[2],hsv=caml_call2(Base_Hash[3],hsv$0,271892623);
        return caml_call2(hash_fold_a,hsv,v)}
      return caml_call3(M[10],_b6n_,hsv,arg)}
    function perms_of_sexp(of_a,t)
     {function _b6g_(sexp)
       {try
         {try
           {var _b6j_=t_of_sexp$2(sexp),_b6k_=_b6j_}
          catch(_b6m_)
           {_b6m_ = caml_wrap_exception(_b6m_);
            if(_b6m_ !== Sexplib0_Sexp_conv_error[17])throw _b6m_;
            if(0 === sexp[0])
             var
              atom=sexp[1],
              _b6k_=
               caml_string_notequal(atom,cst_Who_can_write$6)
                ?caml_call1(Sexplib0_Sexp_conv_error[18],0)
                :caml_call2(Sexplib0_Sexp_conv_error[22],tp_loc$8,sexp);
            else
             {var _b6h_=sexp[1];
              if(_b6h_)
               {var _b6i_=_b6h_[1];
                if(0 === _b6i_[0])
                 {var sexp_args=_b6h_[2],atom$0=_b6i_[1];
                  if(caml_string_notequal(atom$0,cst_Who_can_write$7))
                   var _b6k_=caml_call1(Sexplib0_Sexp_conv_error[18],0);
                  else
                   {if(sexp_args)
                     if(sexp_args[2])
                      var switch$0=0;
                     else
                      var
                       v0=sexp_args[1],
                       v0$0=caml_call1(of_a,v0),
                       _b6k_=[0,271892623,v0$0],
                       switch$0=1;
                    else
                     var switch$0=0;
                    if(! switch$0)
                     var
                      _b6k_=
                       caml_call3
                        (Sexplib0_Sexp_conv_error[21],tp_loc$8,atom$0,sexp)}}
                else
                 var
                  _b6k_=
                   caml_call2(Sexplib0_Sexp_conv_error[23],tp_loc$8,sexp)}
              else
               var
                _b6k_=
                 caml_call2(Sexplib0_Sexp_conv_error[24],tp_loc$8,sexp)}}
          return _b6k_}
        catch(_b6l_)
         {_b6l_ = caml_wrap_exception(_b6l_);
          if(_b6l_ === Sexplib0_Sexp_conv_error[17])
           return caml_call2(Sexplib0_Sexp_conv_error[19],tp_loc$9,sexp);
          throw _b6l_}}
      return caml_call2(M[11],_b6g_,t)}
    function sexp_of_perms(of_a,v)
     {function _b6f_(v)
       {if(typeof v === "number")return sexp_of_t$3(v);
        var v0=v[2];
        return [1,[0,_fM_,[0,caml_call1(of_a,v0),0]]]}
      return caml_call2(M[12],_b6f_,v)}
    var
     _ga_=Read[8],
     _gb_=[0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_read),0,_ga_],0],
     _gc_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_perms_ml_112_4),
     group$10=caml_call2(Bin_prot_Shape[6],_gc_,_gb_),
     _gd_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_read$0),
     bin_shape_read=caml_call1(caml_call2(Bin_prot_Shape[14],group$10,_gd_),0),
     bin_size_read=Read[5],
     bin_write_read=Read[6],
     bin_writer_read=[0,bin_size_read,bin_write_read],
     bin_read_read=Read[3],
     bin_read_read$0=Read[2],
     bin_reader_read=[0,bin_read_read$0,bin_read_read],
     bin_read=[0,bin_shape_read,bin_writer_read,bin_reader_read],
     compare_read=Read[9],
     hash_fold_read=Read[10],
     func$1=Read[11];
    function hash_read(x){return caml_call1(func$1,x)}
    var
     read_of_sexp=Read[12],
     sexp_of_read=Read[14],
     compare_write=Write[9],
     hash_fold_write=Write[10],
     func$2=Write[11];
    function hash_write(x){return caml_call1(func$2,x)}
    var
     _ge_=Write[12],
     _gf_=Write[14],
     _gg_=Immutable[8],
     _gh_=
      [0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_immutable),0,_gg_],0],
     _gi_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_perms_ml_114_4),
     group$11=caml_call2(Bin_prot_Shape[6],_gi_,_gh_),
     _gj_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_immutable$0),
     bin_shape_immutable=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$11,_gj_),0),
     bin_size_immutable=Immutable[5],
     bin_write_immutable=Immutable[6],
     bin_writer_immutable=[0,bin_size_immutable,bin_write_immutable],
     bin_read_immutable=Immutable[3],
     bin_read_immutable$0=Immutable[2],
     bin_reader_immutable=[0,bin_read_immutable$0,bin_read_immutable],
     bin_immutable=
      [0,bin_shape_immutable,bin_writer_immutable,bin_reader_immutable],
     compare_immutable=Immutable[9],
     hash_fold_immutable=Immutable[10],
     func$3=Immutable[11];
    function hash_immutable(x){return caml_call1(func$3,x)}
    var
     _gk_=Immutable[12],
     _gl_=Immutable[14],
     _gm_=Read_write[8],
     _gn_=
      [0,
       [0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_read_write),0,_gm_],
       0],
     _go_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_perms_ml_115_4),
     group$12=caml_call2(Bin_prot_Shape[6],_go_,_gn_),
     _gp_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_read_write$0),
     bin_shape_read_write=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$12,_gp_),0),
     bin_size_read_write=Read_write[5],
     bin_write_read_write=Read_write[6],
     bin_writer_read_write=[0,bin_size_read_write,bin_write_read_write],
     bin_read_read_write=Read_write[3],
     bin_read_read_write$0=Read_write[2],
     bin_reader_read_write=[0,bin_read_read_write$0,bin_read_read_write],
     bin_read_write=
      [0,bin_shape_read_write,bin_writer_read_write,bin_reader_read_write],
     compare_read_write=Read_write[9],
     hash_fold_read_write=Read_write[10],
     func$4=Read_write[11];
    function hash_read_write(x){return caml_call1(func$4,x)}
    var
     _gq_=Read_write[12],
     _gr_=Read_write[14],
     _gs_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$7),
     _gt_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_perms_ml_116_22),
     _gu_=bin_shape_t$5(caml_call2(Bin_prot_Shape[15],_gt_,_gs_)),
     _gv_=[0,caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$8),0],
     _gw_=
      [0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_perms),_gv_,_gu_],0],
     _gx_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_perms_ml_116_4),
     group$13=caml_call2(Bin_prot_Shape[6],_gx_,_gw_);
    function bin_shape_perms(a)
     {var _b6e_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_perms$0);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$13,_b6e_),[0,a,0])}
    function bin_size_perms(size_of_a,v){return bin_size_t$10(size_of_a,v)}
    function bin_write_perms(write_a,buf,pos,v)
     {return bin_write_t$10(write_a,buf,pos,v)}
    function bin_writer_perms(bin_writer_a)
     {function _b6a_(v)
       {var _b6b_=bin_writer_a[2];
        return function(_b6c_,_b6d_)
         {return bin_write_perms(_b6b_,v,_b6c_,_b6d_)}}
      return [0,function(v){return bin_size_perms(bin_writer_a[1],v)},_b6a_]}
    function bin_read_perms(of_a,buf,pos_ref,vint)
     {return bin_read_t$23(of_a,buf,pos_ref,vint)}
    function bin_read_perms$0(of_a,buf,pos_ref)
     {return bin_read_t$24(of_a,buf,pos_ref)}
    function bin_reader_perms(bin_reader_a)
     {function _b5$_(buf,pos_ref,vtag)
       {return bin_read_perms(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_perms$0(bin_reader_a[1],buf,pos_ref)},
              _b5$_]}
    function bin_perms(bin_a)
     {var _b59_=bin_reader_perms(bin_a[3]),_b5__=bin_writer_perms(bin_a[2]);
      return [0,bin_shape_perms(bin_a[1]),_b5__,_b59_]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$13);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     _gy_=
      [0,
       [0,
        bin_nobody,
        bin_read_nobody$0,
        bin_read_nobody,
        bin_reader_nobody,
        bin_size_nobody,
        bin_write_nobody,
        bin_writer_nobody,
        bin_shape_nobody,
        compare_nobody,
        hash_fold_nobody,
        hash_nobody,
        _fY_,
        _fZ_,
        bin_me,
        bin_read_me$0,
        bin_read_me,
        bin_reader_me,
        bin_size_me,
        bin_write_me,
        bin_writer_me,
        bin_shape_me,
        compare_me,
        hash_fold_me,
        hash_me,
        _f4_,
        _f5_,
        [0,
         Read[1],
         Read[2],
         Read[3],
         Read[4],
         Read[5],
         Read[6],
         Read[7],
         Read[8],
         Read[9],
         Read[10],
         Read[11],
         Read[12],
         Read[14]],
        [0,
         Write[1],
         Write[2],
         Write[3],
         Write[4],
         Write[5],
         Write[6],
         Write[7],
         Write[8],
         Write[9],
         Write[10],
         Write[11],
         Write[12],
         Write[14]],
        [0,
         Immutable[1],
         Immutable[2],
         Immutable[3],
         Immutable[4],
         Immutable[5],
         Immutable[6],
         Immutable[7],
         Immutable[8],
         Immutable[9],
         Immutable[10],
         Immutable[11],
         Immutable[12],
         Immutable[14]],
        [0,
         Read_write[1],
         Read_write[2],
         Read_write[3],
         Read_write[4],
         Read_write[5],
         Read_write[6],
         Read_write[7],
         Read_write[8],
         Read_write[9],
         Read_write[10],
         Read_write[11],
         Read_write[12],
         Read_write[14]],
        [0,
         bin_t$5,
         bin_read_t$24,
         bin_read_t$23,
         bin_reader_t$5,
         bin_size_t$10,
         bin_write_t$10,
         bin_writer_t$5,
         bin_shape_t$5,
         compare_perms,
         hash_fold_perms,
         perms_of_sexp,
         sexp_of_perms]],
       [0,
        bin_read,
        bin_read_read$0,
        bin_read_read,
        bin_reader_read,
        bin_size_read,
        bin_write_read,
        bin_writer_read,
        bin_shape_read,
        compare_read,
        hash_fold_read,
        hash_read,
        read_of_sexp,
        sexp_of_read,
        compare_write,
        hash_fold_write,
        hash_write,
        _ge_,
        _gf_,
        bin_immutable,
        bin_read_immutable$0,
        bin_read_immutable,
        bin_reader_immutable,
        bin_size_immutable,
        bin_write_immutable,
        bin_writer_immutable,
        bin_shape_immutable,
        compare_immutable,
        hash_fold_immutable,
        hash_immutable,
        _gk_,
        _gl_,
        bin_read_write,
        bin_read_read_write$0,
        bin_read_read_write,
        bin_reader_read_write,
        bin_size_read_write,
        bin_write_read_write,
        bin_writer_read_write,
        bin_shape_read_write,
        compare_read_write,
        hash_fold_read_write,
        hash_read_write,
        _gq_,
        _gr_,
        bin_perms,
        bin_read_perms$0,
        bin_read_perms,
        bin_reader_perms,
        bin_size_perms,
        bin_write_perms,
        bin_writer_perms,
        bin_shape_perms,
        compare_perms,
        hash_fold_perms,
        perms_of_sexp,
        sexp_of_perms]],
     _gz_=
      [0,
       bin_read,
       bin_read_read$0,
       bin_read_read,
       bin_reader_read,
       bin_size_read,
       bin_write_read,
       bin_writer_read,
       bin_shape_read,
       compare_read,
       hash_fold_read,
       hash_read,
       read_of_sexp,
       sexp_of_read,
       compare_write,
       hash_fold_write,
       hash_write,
       _ge_,
       _gf_,
       bin_immutable,
       bin_read_immutable$0,
       bin_read_immutable,
       bin_reader_immutable,
       bin_size_immutable,
       bin_write_immutable,
       bin_writer_immutable,
       bin_shape_immutable,
       compare_immutable,
       hash_fold_immutable,
       hash_immutable,
       _gk_,
       _gl_,
       bin_read_write,
       bin_read_read_write$0,
       bin_read_read_write,
       bin_reader_read_write,
       bin_size_read_write,
       bin_write_read_write,
       bin_writer_read_write,
       bin_shape_read_write,
       compare_read_write,
       hash_fold_read_write,
       hash_read_write,
       _gq_,
       _gr_,
       bin_perms,
       bin_read_perms$0,
       bin_read_perms,
       bin_reader_perms,
       bin_size_perms,
       bin_write_perms,
       bin_writer_perms,
       bin_shape_perms,
       compare_perms,
       hash_fold_perms,
       perms_of_sexp,
       sexp_of_perms],
     Core_kernel_Perms=
      [0,
       bin_nobody,
       bin_read_nobody$0,
       bin_read_nobody,
       bin_reader_nobody,
       bin_size_nobody,
       bin_write_nobody,
       bin_writer_nobody,
       bin_shape_nobody,
       compare_nobody,
       hash_fold_nobody,
       hash_nobody,
       _fY_,
       _fZ_,
       bin_me,
       bin_read_me$0,
       bin_read_me,
       bin_reader_me,
       bin_size_me,
       bin_write_me,
       bin_writer_me,
       bin_shape_me,
       compare_me,
       hash_fold_me,
       hash_me,
       _f4_,
       _f5_,
       Read,
       Write,
       Immutable,
       Read_write,
       [0,
        bin_t$5,
        bin_read_t$24,
        bin_read_t$23,
        bin_reader_t$5,
        bin_size_t$10,
        bin_write_t$10,
        bin_writer_t$5,
        bin_shape_t$5,
        compare_perms,
        hash_fold_perms,
        perms_of_sexp,
        perms_of_sexp,
        sexp_of_perms],
       _gz_,
       _gy_];
    caml_register_global(7320,Core_kernel_Perms,"Core_kernel__Perms");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$14);
    caml_call1(Expect_test_collector[4][1],cst_src_binary_searchable_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$15,cst$4);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$16);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Binary_searchable_intf=[0];
    caml_register_global
     (7321,
      Core_kernel_Binary_searchable_intf,
      "Core_kernel__Binary_searchable_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$17);
    caml_call1(Expect_test_collector[4][1],cst_src_binary_searchable_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$18,cst$5);
    var _gA_=include$5[1],_gB_=include$5[2];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$19);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Binary_searchable=[0,_gA_,_gB_];
    caml_register_global
     (7323,Core_kernel_Binary_searchable,"Core_kernel__Binary_searchable");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$20);
    caml_call1(Expect_test_collector[4][1],cst_src_blit_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$21,cst$6);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$22);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Blit_intf=[0];
    caml_register_global(7324,Core_kernel_Blit_intf,"Core_kernel__Blit_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$23);
    caml_call1(Expect_test_collector[4][1],cst_src_blit_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$24,cst$7);
    var
     _gC_=include$6[1],
     _gD_=include$6[2],
     _gE_=include$6[3],
     _gF_=include$6[4];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$25);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Blit=[0,_gC_,_gD_,_gE_,_gF_];
    caml_register_global(7326,Core_kernel_Blit,"Core_kernel__Blit");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$26);
    caml_call1(Expect_test_collector[4][1],cst_src_comparator_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$27,cst$8);
    var
     make=include$7[1],
     Poly$0=include$7[2],
     S_to_S1=include$7[3],
     Make=include$7[4],
     Make1=include$7[5],
     Derived=include$7[6],
     Derived2=include$7[7];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$28);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     _gG_=[0,[0,make,Make,Make1]],
     Core_kernel_Comparator=
      [0,make,Poly$0,S_to_S1,Make,Make1,Derived,Derived2,_gG_];
    caml_register_global
     (7328,Core_kernel_Comparator,"Core_kernel__Comparator");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$29);
    caml_call1(Expect_test_collector[4][1],cst_src_result_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$30,cst$9);
    var
     _gH_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_b),
     _gI_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_result_ml_9_17),
     _gJ_=[0,[0,cst_Error,[0,caml_call2(Bin_prot_Shape[15],_gI_,_gH_),0]],0],
     _gK_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$9),
     _gL_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_result_ml_8_14),
     _gM_=[0,[0,cst_Ok,[0,caml_call2(Bin_prot_Shape[15],_gL_,_gK_),0]],_gJ_],
     _gN_=caml_call1(Bin_prot_Shape[9],_gM_),
     _gO_=[0,caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_b$0),0],
     _gP_=[0,caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$10),_gO_],
     _gQ_=
      [0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$28),_gP_,_gN_],0],
     _gR_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_result_ml_7_4),
     group$14=caml_call2(Bin_prot_Shape[6],_gR_,_gQ_);
    function bin_shape_t$6(a,b)
     {var _b58_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$29);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$14,_b58_),[0,a,[0,b,0]])}
    function bin_size_t$11(size_of_a,size_of_b,param)
     {if(0 === param[0])
       {var v1=param[1];return 1 + caml_call1(size_of_a,v1) | 0}
      var v1$0=param[1];
      return 1 + caml_call1(size_of_b,v1$0) | 0}
    function bin_write_t$11(write_a,write_b,buf,pos,param)
     {if(0 === param[0])
       {var v1=param[1],pos$0=caml_call3(Bin_prot_Write[30],buf,pos,0);
        return caml_call3(write_a,buf,pos$0,v1)}
      var v1$0=param[1],pos$1=caml_call3(Bin_prot_Write[30],buf,pos,1);
      return caml_call3(write_b,buf,pos$1,v1$0)}
    function bin_writer_t$6(bin_writer_a,bin_writer_b)
     {function _b53_(v)
       {var _b54_=bin_writer_b[2],_b55_=bin_writer_a[2];
        return function(_b56_,_b57_)
         {return bin_write_t$11(_b55_,_b54_,v,_b56_,_b57_)}}
      return [0,
              function(v)
               {return bin_size_t$11(bin_writer_a[1],bin_writer_b[1],v)},
              _b53_]}
    function bin_read_t$25(of_a,of_b,buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_src_result_ml_Stable_V1_t,pos_ref[1])}
    function bin_read_t$26(of_a,of_b,buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[29],buf,pos_ref);
      if(0 === match){var arg_1=caml_call2(of_a,buf,pos_ref);return [0,arg_1]}
      if(1 === match)
       {var arg_1$0=caml_call2(of_b,buf,pos_ref);return [1,arg_1$0]}
      return caml_call2(Bin_prot_Common[18],_gS_,pos_ref[1])}
    function bin_reader_t$6(bin_reader_a,bin_reader_b)
     {function _b52_(buf,pos_ref,vtag)
       {return bin_read_t$25(bin_reader_a[1],bin_reader_b[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$26
                        (bin_reader_a[1],bin_reader_b[1],buf,pos_ref)},
              _b52_]}
    function bin_t$6(bin_a,bin_b)
     {var
       _b50_=bin_reader_t$6(bin_a[3],bin_b[3]),
       _b51_=bin_writer_t$6(bin_a[2],bin_b[2]);
      return [0,bin_shape_t$6(bin_a[1],bin_b[1]),_b51_,_b50_]}
    function compare$5(cmp_a,cmp_b,a_001,match)
     {if(caml_call2(Ppx_compare_lib[1],a_001,match))return 0;
      if(0 === a_001[0])
       {var _b5Y_=a_001[1];
        if(0 === match[0])
         {var b_004=match[1];return caml_call2(cmp_a,_b5Y_,b_004)}
        return -1}
      var _b5Z_=a_001[1];
      if(0 === match[0])return 1;
      var b_006=match[1];
      return caml_call2(cmp_b,_b5Z_,b_006)}
    function t_of_sexp$8(of_a,of_b,sexp)
     {if(0 === sexp[0])
       {var _b5U_=sexp[1];
        if(caml_string_notequal(_b5U_,cst_Error$0))
         {if(caml_string_notequal(_b5U_,cst_Ok$0))
           if(caml_string_notequal(_b5U_,cst_error))
            if(caml_string_notequal(_b5U_,cst_ok))
             var switch$0=1,switch$1=0;
            else
             var switch$1=1;
           else
            var switch$0=0,switch$1=0;
          else
           var switch$1=1;
          if(switch$1)
           return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$10,sexp)}
        else
         var switch$0=0;
        if(! switch$0)
         return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$10,sexp)}
      else
       {var _b5V_=sexp[1];
        if(! _b5V_)
         return caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc$10,sexp);
        var _b5W_=_b5V_[1];
        if(0 !== _b5W_[0])
         return caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc$10,sexp);
        var _b5X_=_b5W_[1];
        if(caml_string_notequal(_b5X_,cst_Error$1))
         {if(caml_string_notequal(_b5X_,cst_Ok$1))
           if(caml_string_notequal(_b5X_,cst_error$0))
            if(caml_string_notequal(_b5X_,cst_ok$0))
             var switch$2=1,switch$3=0;
            else
             var switch$3=1;
           else
            var switch$2=0,switch$3=0;
          else
           var switch$3=1;
          if(switch$3)
           {var sexp_args=_b5V_[2];
            if(sexp_args)
             if(! sexp_args[2])
              {var v0=sexp_args[1],v0$0=caml_call1(of_a,v0);return [0,v0$0]}
            return caml_call3
                    (Sexplib0_Sexp_conv_error[4],tp_loc$10,_b5X_,sexp)}}
        else
         var switch$2=0;
        if(! switch$2)
         {var sexp_args$0=_b5V_[2];
          if(sexp_args$0)
           if(! sexp_args$0[2])
            {var v0$1=sexp_args$0[1],v0$2=caml_call1(of_b,v0$1);
             return [1,v0$2]}
          return caml_call3(Sexplib0_Sexp_conv_error[4],tp_loc$10,_b5X_,sexp)}}
      return caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc$10,sexp)}
    function sexp_of_t$7(of_a,of_b,param)
     {if(0 === param[0])
       {var v0=param[1],v0$0=caml_call1(of_a,v0);
        return [1,[0,_gT_,[0,v0$0,0]]]}
      var v0$1=param[1],v0$2=caml_call1(of_b,v0$1);
      return [1,[0,_gU_,[0,v0$2,0]]]}
    function map(x,f1,f2)
     {if(0 === x[0]){var x$0=x[1];return [0,caml_call1(f1,x$0)]}
      var err=x[1];
      return [1,caml_call1(f2,err)]}
    var
     _aYE_=bin_shape_t$6(_b1_,_ce_),
     _gV_=[0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$30),0,_aYE_],0],
     _gW_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_result_ml_21_4),
     group$15=caml_call2(Bin_prot_Shape[6],_gW_,_gV_),
     _gX_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$31),
     bin_shape_t$7=caml_call1(caml_call2(Bin_prot_Shape[14],group$15,_gX_),0);
    function bin_size_t$12(v){return bin_size_t$11(bin_size_t,bin_size_t$1,v)}
    function bin_write_t$12(buf,pos,v)
     {return bin_write_t$11(bin_write_t,bin_write_t$1,buf,pos,v)}
    var bin_writer_t$7=[0,bin_size_t$12,bin_write_t$12];
    function bin_read_t$27(buf,pos_ref,vint)
     {return bin_read_t$25(bin_read_t,bin_read_t$3,buf,pos_ref,vint)}
    function bin_read_t$28(buf,pos_ref)
     {return bin_read_t$26(bin_read_t,bin_read_t$3,buf,pos_ref)}
    var
     bin_reader_t$7=[0,bin_read_t$28,bin_read_t$27],
     bin_t$7=[0,bin_shape_t$7,bin_writer_t$7,bin_reader_t$7];
    function t_of_sexp$9(t){return t_of_sexp$8(_Y_,t_of_sexp,t)}
    function sexp_of_t$8(v){return sexp_of_t$7(_Z_,sexp_of_t$0,v)}
    function equal(x_013,x_014)
     {var match=compare$5(_V_,_t_,x_013,x_014);return 0 === match?1:0}
    var
     _gZ_=include$8[2],
     _g0_=include$8[3],
     _g1_=include$8[4],
     _he_=include$8[19],
     _hf_=include$8[20],
     _hh_=include$8[22],
     _ho_=include$8[29],
     _hu_=include$8[35],
     _hw_=include$8[37],
     _gY_=include$8[1],
     _g2_=include$8[5],
     _g3_=include$8[6],
     _g4_=include$8[7],
     _g5_=include$8[8],
     _g6_=include$8[9],
     _g7_=include$8[10],
     _g8_=include$8[11],
     _g9_=include$8[12],
     _g__=include$8[13],
     _g$_=include$8[14],
     _ha_=include$8[15],
     _hb_=include$8[16],
     _hc_=include$8[17],
     _hd_=include$8[18],
     _hg_=include$8[21],
     _hi_=include$8[23],
     _hj_=include$8[24],
     _hk_=include$8[25],
     _hl_=include$8[26],
     _hm_=include$8[27],
     _hn_=include$8[28],
     _hp_=include$8[30],
     _hq_=include$8[31],
     _hr_=include$8[32],
     _hs_=include$8[33],
     _ht_=include$8[34],
     _hv_=include$8[36];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$31);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     _hx_=
      [0,
       [0,
        bin_t$6,
        bin_read_t$26,
        bin_read_t$25,
        bin_reader_t$6,
        bin_size_t$11,
        bin_write_t$11,
        bin_writer_t$6,
        bin_shape_t$6,
        compare$5,
        t_of_sexp$8,
        sexp_of_t$7,
        map],
       [0,
        t_of_sexp$9,
        sexp_of_t$8,
        bin_t$7,
        bin_read_t$28,
        bin_read_t$27,
        bin_reader_t$7,
        bin_size_t$12,
        bin_write_t$12,
        bin_writer_t$7,
        bin_shape_t$7,
        equal,
        tests]],
     Core_kernel_Result=
      [0,
       bin_t$6,
       bin_read_t$26,
       bin_read_t$25,
       bin_reader_t$6,
       bin_size_t$11,
       bin_write_t$11,
       bin_writer_t$6,
       bin_shape_t$6,
       _gY_,
       _gZ_,
       _g0_,
       _g1_,
       _g2_,
       _g3_,
       _g4_,
       _g5_,
       _g6_,
       _g7_,
       _g8_,
       _g9_,
       _g__,
       _g$_,
       _ha_,
       _hb_,
       _hc_,
       _hd_,
       _he_,
       _hf_,
       _hg_,
       _hh_,
       _hi_,
       _hj_,
       _hk_,
       _hl_,
       _hm_,
       _hn_,
       _ho_,
       _hp_,
       _hq_,
       _hr_,
       _hs_,
       _ht_,
       _hu_,
       _hv_,
       _hw_,
       _hx_];
    caml_register_global(7330,Core_kernel_Result,"Core_kernel__Result");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$32);
    caml_call1(Expect_test_collector[4][1],cst_src_stable_module_types_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$33,cst$10);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$34);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Stable_module_types=[0];
    caml_register_global
     (7331,Core_kernel_Stable_module_types,"Core_kernel__Stable_module_types");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$35);
    caml_call1(Expect_test_collector[4][1],cst_src_stable_unit_test_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$36,cst$11);
    var Unordered_container_test=[0];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$37);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Stable_unit_test_intf=[0,Unordered_container_test];
    caml_register_global
     (7332,
      Core_kernel_Stable_unit_test_intf,
      "Core_kernel__Stable_unit_test_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$38);
    caml_call1(Expect_test_collector[4][1],cst_src_container_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$39,cst$12);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$40);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Container_intf=[0,0];
    caml_register_global
     (7333,Core_kernel_Container_intf,"Core_kernel__Container_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$41);
    caml_call1(Expect_test_collector[4][1],cst_src_container_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$42,cst$13);
    var
     _hA_=include$9[3],
     _hB_=include$9[4],
     _hC_=include$9[5],
     _hG_=include$9[9],
     _hH_=include$9[10],
     _hI_=include$9[11],
     _hy_=include$9[1],
     _hz_=include$9[2],
     _hD_=include$9[6],
     _hE_=include$9[7],
     _hF_=include$9[8],
     _hJ_=include$9[12],
     _hK_=include$9[13],
     _hL_=include$9[14],
     _hM_=include$9[15],
     _hN_=include$9[16],
     _hO_=include$9[17],
     _hP_=include$9[18];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$43);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Container=
      [0,
       _hy_,
       _hz_,
       _hA_,
       _hB_,
       _hC_,
       _hD_,
       _hE_,
       _hF_,
       _hG_,
       _hH_,
       _hI_,
       _hJ_,
       _hK_,
       _hL_,
       _hM_,
       _hN_,
       _hO_,
       _hP_];
    caml_register_global(7335,Core_kernel_Container,"Core_kernel__Container");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$44);
    caml_call1(Expect_test_collector[4][1],cst_src_deprecate_pipe_bang_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$45,cst$14);
    function _hQ_(x,y){return caml_call1(y,x)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$46);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Deprecate_pipe_bang=[0,_hQ_];
    caml_register_global
     (7336,Core_kernel_Deprecate_pipe_bang,"Core_kernel__Deprecate_pipe_bang");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$47);
    caml_call1(Expect_test_collector[4][1],cst_src_fn_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$48,cst$15);
    var
     _hR_=Base_Fn[1],
     _hS_=Base_Fn[2],
     _hU_=Base_Fn[4],
     _hT_=Base_Fn[3],
     _hV_=Base_Fn[5],
     _hW_=Base_Fn[6];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$49);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Fn=[0,_hR_,_hS_,_hT_,_hU_,_hV_,_hW_,_hQ_];
    caml_register_global(7338,Core_kernel_Fn,"Core_kernel__Fn");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$50);
    caml_call1
     (Expect_test_collector[4][1],cst_src_ordered_collection_common_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$51,cst$16);
    var
     _hX_=include$10[1],
     _hY_=include$10[2],
     _hZ_=include$10[3],
     _h0_=include$10[4];
    function normalize(length_fun,t,i)
     {return 0 <= i?i:i + caml_call1(length_fun,t) | 0}
    function slice(length_fun,sub_fun,t,start,stop)
     {var
       stop$0=0 === stop?caml_call1(length_fun,t):stop,
       pos=normalize(length_fun,t,start),
       len=normalize(length_fun,t,stop$0) - pos | 0;
      return caml_call3(sub_fun,t,pos,len)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$52);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Ordered_collection_common=
      [0,_hX_,_hY_,_hZ_,_h0_,normalize,slice];
    caml_register_global
     (7340,
      Core_kernel_Ordered_collection_common,
      "Core_kernel__Ordered_collection_common");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$53);
    caml_call1(Expect_test_collector[4][1],cst_src_fheap_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$54,cst$17);
    var failwithf$0=include$4[6];
    function create(cmp){return [0,cmp,0,0]}
    function merge(cmp,n1,n2)
     {var nl2=n2[2],e2=n2[1],nl1=n1[2],e1=n1[1];
      return caml_call2(_aA_,caml_call2(cmp,e1,e2),0)
              ?[0,e1,[0,n2,nl1]]
              :[0,e2,[0,n1,nl2]]}
    function add(param,e)
     {var heap=param[3],length=param[2],cmp=param[1],new_node=[0,e,0];
      if(heap)
       var heap$0=heap[1],heap$1=merge(cmp,new_node,heap$0);
      else
       var heap$1=new_node;
      return [0,cmp,caml_call2(_ah_,length,1),[0,heap$1]]}
    function top_exn(t)
     {var _b5T_=t[3];
      if(_b5T_){var match=_b5T_[1],value=match[1];return value}
      return caml_call1(_aV_,cst_Fheap_top_exn_called_on_an_empty_heap)}
    function top(t)
     {try {var _b5R_=[0,top_exn(t)];return _b5R_}catch(_b5S_){return 0}}
    function pop_exn(param)
     {var heap=param[3],length=param[2],cmp=param[1];
      if(heap)
       {var
         match$0=heap[1],
         children=match$0[2],
         value=match$0[1],
         acc=0,
         t=children;
        for(;;)
         {if(t)
           {var _b5K_=t[2],_b5L_=t[1];
            if(_b5K_)
             {var
               next2=_b5K_[2],
               next1=_b5K_[1],
               acc$0=[0,merge(cmp,_b5L_,next1),acc],
               acc=acc$0,
               t=next2;
              continue}
            var match=[0,_b5L_,acc]}
          else
           var match=acc;
          if(match)
           {var _b5M_=match[2],_b5N_=match[1];
            if(_b5M_)
             var
              _b5O_=function(_b5P_,_b5Q_){return merge(cmp,_b5P_,_b5Q_)},
              new_heap=[0,caml_call3(Base_List[9],_b5M_,_b5N_,_b5O_)];
            else
             var new_heap=[0,_b5N_]}
          else
           var new_heap=0;
          var t$0=[0,cmp,caml_call2(_ai_,length,1),new_heap];
          return [0,value,t$0]}}
      return caml_call1(_aV_,cst_Heap_pop_exn_called_on_an_empty_heap)}
    function pop(t)
     {try {var _b5I_=[0,pop_exn(t)];return _b5I_}catch(_b5J_){return 0}}
    function remove_top(t)
     {try
       {var match=pop_exn(t),t$0=match[2],_b5G_=[0,t$0];return _b5G_}
      catch(_b5H_){return 0}}
    function pop_if(t,f)
     {var match=top(t);
      if(match){var v=match[1];return caml_call1(f,v)?pop(t):0}
      return 0}
    function fold(t,init,f)
     {var _b5F_=t[3];
      if(_b5F_)
       {var node=_b5F_[1],to_visit$1=[0,node,0],acc=init,to_visit=to_visit$1;
        for(;;)
         {if(to_visit)
           {var
             rest=to_visit[2],
             match=to_visit[1],
             children=match[2],
             value=match[1],
             acc$0=caml_call2(f,acc,value),
             to_visit$0=caml_call2(Base_List[38],children,rest),
             acc=acc$0,
             to_visit=to_visit$0;
            continue}
          return acc}}
      return init}
    var C=caml_call1(include$9[17],[0,fold,-304398144]);
    function length(t){return t[2]}
    function is_empty(t){return caml_call1(include$11[36],t[3])}
    var
     _h1_=C[4],
     sum=C[11],
     to_list=C[14],
     _h2_=C[1],
     _h3_=C[16],
     _h4_=C[17],
     _h5_=C[12],
     _h6_=C[13],
     _h7_=C[9],
     _h8_=C[8],
     _h9_=C[10],
     _h__=C[6],
     _h$_=C[7],
     _ia_=C[15];
    function of_fold(c,cmp,fold)
     {var h=create(cmp);return caml_call3(fold,c,h,add)}
    function of_list(l,cmp){return of_fold(l,cmp,Base_List[9])}
    function of_array(arr,cmp){return of_fold(arr,cmp,include$12[10])}
    function sexp_of_t$9(sexp_of_a,t)
     {var _b5E_=caml_call1(to_list,t);
      return caml_call2(Base_List[4],sexp_of_a,_b5E_)}
    function to_sequence(t){return caml_call2(Base_Sequence[42],t,pop)}
    function _ib_(param)
     {function create$0(cmp){return [0,cmp,0]}
      function create$1(cmp){return create(cmp)}
      function length_check(param)
       {var
         t_b=param[2],
         t_a=param[1],
         this_len=t_a[2],
         that_len=caml_call1(Base_List[6],t_b[2]);
        if(caml_call2(_aC_,this_len,that_len))
         {var
           _b5B_=caml_call2(Base_List[4],Base_Int[8],t_b[2]),
           _b5D_=caml_call1(Base[192][15],_b5B_),
           _b5C_=sexp_of_t$9(Base_Int[8],t_a);
          return caml_call6
                  (failwithf$0,
                   _ic_,
                   this_len,
                   caml_call1(Base[192][15],_b5C_),
                   that_len,
                   _b5D_,
                   0)}
        return [0,t_a,t_b]}
      function create$2(param)
       {var cmp=Base_Int[18],_b5A_=create$0(cmp);
        return [0,create$1(cmp),_b5A_]}
      function add$0(param,v)
       {var
         that_t$0=param[2],
         this_t=param[1],
         this_t$0=add(this_t,v),
         _b5z_=caml_call2(Base_List[60],that_t$0[1],[0,v,that_t$0[2]]),
         that_t=[0,that_t$0[1],_b5z_];
        return length_check([0,this_t$0,that_t])}
      function check(param)
       {var
         that_t=param[2],
         this_t=param[1],
         _b5y_=caml_call1(to_list,this_t),
         t1=caml_call2(Base_List[60],Base_Int[18],_b5y_),
         t2=caml_call2(Base_List[60],Base_Int[18],that_t[2]),
         sexpifier=caml_call1(_I_,sexp_of_t$0),
         equal=0,
         message=0,
         here=0;
        function comparator(a_001,b_002)
         {return caml_call3(_F_,_t_,a_001,b_002)}
        return caml_call8
                (Ppx_assert_lib_Runtime[2],
                 pos,
                 sexpifier,
                 comparator,
                 here,
                 message,
                 equal,
                 t1,
                 t2)}
      function check_sum(param)
       {var that_t=param[2],this_t=param[1];
        function _b5v_(_b5x_){return _b5x_}
        var
         t1=
          caml_call3
           (sum,
            [0,Base_Int[7],Base_Int[8],Base_Int[42],Base_Int[45],Base_Int[46]],
            this_t,
            _b5v_);
        function f(_b5w_){return _b5w_}
        var
         m=[0,Base_Int[7],Base_Int[8],Base_Int[42],Base_Int[45],Base_Int[46]],
         t2=caml_call3(Base_List[14],m,that_t[2],f);
        caml_call8
         (Ppx_assert_lib_Runtime[2],pos$0,sexp_of_t$0,_t_,0,0,0,t1,t2);
        return t1}
      function _b5l_(param)
       {var
         dual=create$2(0),
         random=caml_call1(Base_Random[16][2],[0,4]),
         ops=1e4,
         dual$0=dual;
        for(;;)
         {if(caml_call2(_aD_,ops,0))return 0;
          var r=caml_call2(Base_Random[16][6],random,100);
          if(caml_call2(_aA_,r,30))
           var
            new_dual=
             add$0(dual$0,caml_call2(Base_Random[16][6],random,1e5));
          else
           if(caml_call2(_aA_,r,70))
            {var
              that_t=dual$0[2],
              this_t=dual$0[1],
              res1=pop(this_t),
              _b5p_=that_t[2];
             if(_b5p_)
              var xs=_b5p_[2],x=_b5p_[1],res2$0=[0,[0,x,[0,that_t[1],xs]]];
             else
              var res2$0=0;
             var
              f=
               function(r,default$0)
                {if(r)
                  {var match=r[1],t=match[2],r$0=match[1];
                   return [0,[0,r$0],t]}
                 return [0,0,default$0]},
              defaults=create$2(0),
              match=f(res1,caml_call1(_aT_,defaults)),
              this_t$0=match[2],
              res1$0=match[1],
              match$0=f(res2$0,caml_call1(_aU_,defaults)),
              that_t$0=match$0[2],
              res2$1=match$0[1];
             if(caml_notequal(res1$0,res2$1))
              var
               _b5r_=caml_call3(include$11[38],res2$1,cst_None,Base_Int[10]),
               _b5t_=
                caml_call4
                 (failwithf$0,
                  _id_,
                  caml_call3(include$11[38],res1$0,cst_None$0,Base_Int[10]),
                  _b5r_,
                  0);
             else
              var _b5t_=[0,this_t$0,that_t$0];
             var new_dual=_b5t_}
           else
            if(caml_call2(_aA_,r,80))
             {var
               that_t$1=dual$0[2],
               this_t$1=dual$0[1],
               res1$1=top(this_t$1),
               res2=caml_call1(Base_List[63],that_t$1[2]);
              if(caml_notequal(res1$1,res2))
               var
                _b5s_=caml_call3(include$11[38],res2,cst_None$1,Base_Int[10]),
                _b5u_=
                 caml_call4
                  (failwithf$0,
                   _ie_,
                   caml_call3(include$11[38],res1$1,cst_None$2,Base_Int[10]),
                   _b5s_,
                   0);
              else
               var _b5u_=[0,this_t$1,that_t$1];
              var new_dual=_b5u_}
            else
             if(caml_call2(_aA_,r,90))
              {var
                that_t$2=dual$0[2],
                this_t$2=dual$0[1],
                this_t$3=remove_top(this_t$2),
                _b5q_=that_t$2[2];
               if(_b5q_)
                var xs$0=_b5q_[2],that_t$3=[0,[0,that_t$2[1],xs$0]];
               else
                var that_t$3=0;
               var
                cmp=Base_Int[18],
                this_default=create$1(cmp),
                that_default=create$0(cmp),
                this_t$4=caml_call2(include$11[41],this_t$3,this_default),
                that_t$4=caml_call2(include$11[41],that_t$3,that_default),
                new_dual=length_check([0,this_t$4,that_t$4])}
             else
              {check(dual$0);var new_dual=dual$0}
          var ops$0=caml_call2(_ai_,ops,1),ops=ops$0,dual$0=new_dual;
          continue}}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_loop_10_000_t,
        0,
        cst_src_fheap_ml$0,
        298,
        4,
        686,
        _b5l_);
      function _b5m_(param)
       {function _b5n_(param){return caml_call1(Base_Random[5],1e5)}
        var
         l=caml_call2(Base_List[117],1e4,_b5n_),
         _b5o_=Base_Int[18],
         this_t=of_list(l,_b5o_),
         that_t=[0,_b5o_,caml_call2(Base_List[60],_b5o_,l)],
         dual=length_check([0,this_t,that_t]);
        check(dual);
        var
         sum0=check_sum(dual),
         dual$0=add$0(dual,-100),
         t2=check_sum(dual$0),
         t1=caml_call2(_ai_,sum0,100);
        return caml_call8
                (Ppx_assert_lib_Runtime[2],pos$1,sexp_of_t$0,_t_,0,0,0,t1,t2)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_check_dual_let_sum0_check_sum_dual_in_le,
        0,
        cst_src_fheap_ml$1,
        325,
        4,
        299,
        _b5m_);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst$18,
      0,
      cst_src_fheap_ml$2,
      157,
      0,
      5668,
      _ib_);
    function _if_(param)
     {var
       h=of_list(data,Base_Int[18]),
       match=pop_exn(h),
       t=match[2],
       top_value=match[1];
      caml_call8
       (Ppx_assert_lib_Runtime[3],pos$2,sexp_of_t$0,_t_,0,0,0,0,top_value);
      function _b5j_(_b5k_){return _b5k_}
      var
       t1=
        caml_call3
         (Base_List[14],
          [0,Base_Int[7],Base_Int[8],Base_Int[42],Base_Int[45],Base_Int[46]],
          data,
          _b5j_),
       t2=fold(t,0,function(sum,v){return caml_call2(_ah_,sum,v)}),
       r=[0,0];
      caml_call2(_h1_,t,function(v){r[1] = caml_call2(_ah_,r[1],v);return 0});
      var heap_iter_sum=r[1];
      caml_call8(Ppx_assert_lib_Runtime[2],pos$3,sexp_of_t$0,_t_,0,0,0,t1,t2);
      return caml_call8
              (Ppx_assert_lib_Runtime[2],
               pos$4,
               sexp_of_t$0,
               _t_,
               0,
               0,
               0,
               t1,
               heap_iter_sum)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_test_result_int_expect_0_top_value_l,
      0,
      cst_src_fheap_ml$3,
      335,
      0,
      480,
      _if_);
    function _ig_(param)
     {var t=of_list(data$0,Base_Int[18]);
      function _b5h_(_b5i_){return _b5i_}
      var
       got=
        caml_call3
         (sum,
          [0,Base_Int[7],Base_Int[8],Base_Int[42],Base_Int[45],Base_Int[46]],
          t,
          _b5h_);
      caml_call8(Ppx_assert_lib_Runtime[3],pos$5,sexp_of_t$0,_t_,0,0,0,28,got);
      var t$0=add(t,8),got$0=top_exn(t$0);
      caml_call8
       (Ppx_assert_lib_Runtime[3],pos$6,sexp_of_t$0,_t_,0,0,0,0,got$0);
      var match=pop_exn(t$0),t$1=match[2],top_value=match[1];
      caml_call8
       (Ppx_assert_lib_Runtime[3],pos$7,sexp_of_t$0,_t_,0,0,0,0,top_value);
      var got$1=top_exn(t$1);
      caml_call8
       (Ppx_assert_lib_Runtime[3],pos$8,sexp_of_t$0,_t_,0,0,0,1,got$1);
      var len=t$1[2];
      return caml_call8
              (Ppx_assert_lib_Runtime[3],pos$9,sexp_of_t$0,_t_,0,0,0,8,len)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_test_result_int_expect_28_s_let_t,
      0,
      cst_src_fheap_ml$4,
      351,
      0,
      457,
      _ig_);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$55);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Fheap=
      [0,
       sexp_of_t$9,
       _h2_,
       length,
       is_empty,
       _h1_,
       fold,
       _h__,
       _h$_,
       _h8_,
       _h7_,
       _h9_,
       sum,
       _h5_,
       _h6_,
       _ia_,
       _h3_,
       _h4_,
       to_list,
       create,
       of_array,
       of_list,
       add,
       top,
       top_exn,
       remove_top,
       pop,
       pop_exn,
       pop_if,
       to_sequence];
    caml_register_global(7349,Core_kernel_Fheap,"Core_kernel__Fheap");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$56);
    caml_call1(Expect_test_collector[4][1],cst_src_sequence_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$57,cst$19);
    var
     _ih_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_b$1),
     _ii_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_sequence_ml_7_19),
     _ij_=[0,caml_call2(Bin_prot_Shape[15],_ii_,_ih_),0],
     _ik_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$11),
     _il_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_sequence_ml_7_14),
     _im_=[0,[0,cst_Both,[0,caml_call2(Bin_prot_Shape[15],_il_,_ik_),_ij_]],0],
     _in_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_b$2),
     _io_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_sequence_ml_6_15),
     _ip_=
      [0,[0,cst_Right,[0,caml_call2(Bin_prot_Shape[15],_io_,_in_),0]],_im_],
     _iq_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$12),
     _ir_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_sequence_ml_5_14),
     _is_=[0,[0,cst_Left,[0,caml_call2(Bin_prot_Shape[15],_ir_,_iq_),0]],_ip_],
     _it_=caml_call1(Bin_prot_Shape[9],_is_),
     _iu_=[0,caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_b$3),0],
     _iv_=[0,caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$13),_iu_],
     _iw_=
      [0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$32),_iv_,_it_],0],
     _ix_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_sequence_ml_4_2),
     group$16=caml_call2(Bin_prot_Shape[6],_ix_,_iw_);
    function bin_shape_t$8(a,b)
     {var _b5g_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$33);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$16,_b5g_),[0,a,[0,b,0]])}
    function bin_size_t$13(size_of_a,size_of_b,param)
     {switch(param[0])
       {case 0:var v1=param[1];return 1 + caml_call1(size_of_a,v1) | 0;
        case 1:var v1$0=param[1];return 1 + caml_call1(size_of_b,v1$0) | 0;
        default:
         var
          v2=param[2],
          v1$1=param[1],
          size=1 + caml_call1(size_of_a,v1$1) | 0;
         return size + caml_call1(size_of_b,v2) | 0}}
    function bin_write_t$13(write_a,write_b,buf,pos,param)
     {switch(param[0])
       {case 0:
         var v1=param[1],pos$0=caml_call3(Bin_prot_Write[30],buf,pos,0);
         return caml_call3(write_a,buf,pos$0,v1);
        case 1:
         var v1$0=param[1],pos$1=caml_call3(Bin_prot_Write[30],buf,pos,1);
         return caml_call3(write_b,buf,pos$1,v1$0);
        default:
         var
          v2=param[2],
          v1$1=param[1],
          pos$2=caml_call3(Bin_prot_Write[30],buf,pos,2),
          pos$3=caml_call3(write_a,buf,pos$2,v1$1);
         return caml_call3(write_b,buf,pos$3,v2)}}
    function bin_writer_t$8(bin_writer_a,bin_writer_b)
     {function _b5b_(v)
       {var _b5c_=bin_writer_b[2],_b5d_=bin_writer_a[2];
        return function(_b5e_,_b5f_)
         {return bin_write_t$13(_b5d_,_b5c_,v,_b5e_,_b5f_)}}
      return [0,
              function(v)
               {return bin_size_t$13(bin_writer_a[1],bin_writer_b[1],v)},
              _b5b_]}
    function bin_read_t$29(of_a,of_b,buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],
               cst_src_sequence_ml_Merge_with_duplicates_element_t,
               pos_ref[1])}
    function bin_read_t$30(of_a,of_b,buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[29],buf,pos_ref);
      if(2 < match >>> 0)
       return caml_call2(Bin_prot_Common[18],_iy_,pos_ref[1]);
      switch(match)
       {case 0:var arg_1=caml_call2(of_a,buf,pos_ref);return [0,arg_1];
        case 1:var arg_1$0=caml_call2(of_b,buf,pos_ref);return [1,arg_1$0];
        default:
         var
          arg_1$1=caml_call2(of_a,buf,pos_ref),
          arg_2=caml_call2(of_b,buf,pos_ref);
         return [2,arg_1$1,arg_2]}}
    function bin_reader_t$8(bin_reader_a,bin_reader_b)
     {function _b5a_(buf,pos_ref,vtag)
       {return bin_read_t$29(bin_reader_a[1],bin_reader_b[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$30
                        (bin_reader_a[1],bin_reader_b[1],buf,pos_ref)},
              _b5a_]}
    function bin_t$8(bin_a,bin_b)
     {var
       _b4__=bin_reader_t$8(bin_a[3],bin_b[3]),
       _b4$_=bin_writer_t$8(bin_a[2],bin_b[2]);
      return [0,bin_shape_t$8(bin_a[1],bin_b[1]),_b4$_,_b4__]}
    var
     include$13=Base_Sequence[53],
     compare$6=include$13[1],
     hash_fold_t$6=include$13[2],
     t_of_sexp$10=include$13[3],
     sexp_of_t$10=include$13[4],
     Expert=Base_Sequence[110],
     Generator=Base_Sequence[109],
     length_is_bounded_by=Base_Sequence[108],
     bounded_length=Base_Sequence[107],
     force_eagerly=Base_Sequence[106],
     memoize=Base_Sequence[105],
     of_lazy=Base_Sequence[104],
     of_list$0=Base_Sequence[103],
     to_list_rev=Base_Sequence[102],
     iter_m=Base_Sequence[101],
     fold_m=Base_Sequence[100],
     delayed_fold=Base_Sequence[99],
     singleton=Base_Sequence[98],
     repeat=Base_Sequence[97],
     cycle_list_exn=Base_Sequence[96],
     intersperse=Base_Sequence[95],
     interleaved_cartesian_product=Base_Sequence[94],
     cartesian_product=Base_Sequence[93],
     Infix=Base_Sequence[92],
     shift_left=Base_Sequence[91],
     shift_right_with_list=Base_Sequence[90],
     shift_right=Base_Sequence[89],
     chunks_exn=Base_Sequence[88],
     split_n_eagerly=Base_Sequence[87],
     split_n=Base_Sequence[86],
     drop_while_option=Base_Sequence[85],
     drop_while=Base_Sequence[84],
     take_while=Base_Sequence[83],
     drop_eagerly=Base_Sequence[82],
     drop=Base_Sequence[81],
     take=Base_Sequence[80],
     sub=Base_Sequence[79],
     filter_opt=Base_Sequence[78],
     filter_mapi=Base_Sequence[77],
     filter_map=Base_Sequence[76],
     init=Base_Sequence[75],
     range=Base_Sequence[74],
     remove_consecutive_duplicates=Base_Sequence[73],
     find_consecutive_duplicate=Base_Sequence[72],
     group$17=Base_Sequence[71],
     reduce=Base_Sequence[70],
     reduce_exn=Base_Sequence[69],
     zip_full=Base_Sequence[68],
     zip=Base_Sequence[67],
     round_robin=Base_Sequence[66],
     interleave=Base_Sequence[65],
     concat_mapi=Base_Sequence[64],
     concat_map=Base_Sequence[63],
     concat=Base_Sequence[62],
     append=Base_Sequence[61],
     for_alli=Base_Sequence[60],
     find_exn=Base_Sequence[59],
     tl_eagerly_exn=Base_Sequence[58],
     tl=Base_Sequence[57],
     hd_exn=Base_Sequence[56],
     hd=Base_Sequence[55],
     merge_with_duplicates=Base_Sequence[54],
     merge$0=Base_Sequence[52],
     filter=Base_Sequence[51],
     filteri=Base_Sequence[50],
     mapi=Base_Sequence[49],
     folding_mapi=Base_Sequence[48],
     folding_map=Base_Sequence[47],
     nth_exn=Base_Sequence[46],
     nth=Base_Sequence[45],
     unfold_with_and_finish=Base_Sequence[44],
     unfold_with=Base_Sequence[43],
     unfold=Base_Sequence[42],
     unfold_step=Base_Sequence[41],
     Step=Base_Sequence[40],
     next=Base_Sequence[39],
     empty=Base_Sequence[38],
     Let_syntax=Base_Sequence[37],
     all_ignore=Base_Sequence[36],
     all_unit=Base_Sequence[35],
     all=Base_Sequence[34],
     ignore_m=Base_Sequence[33],
     join=Base_Sequence[32],
     map$0=Base_Sequence[31],
     return$0=Base_Sequence[30],
     bind=Base_Sequence[29],
     Monad_infix=Base_Sequence[28],
     find_mapi=Base_Sequence[25],
     findi=Base_Sequence[24],
     counti=Base_Sequence[23],
     existsi=Base_Sequence[22],
     iteri=Base_Sequence[21],
     foldi=Base_Sequence[20],
     max_elt=Base_Sequence[19],
     min_elt=Base_Sequence[18],
     to_array=Base_Sequence[17],
     to_list$0=Base_Sequence[16],
     find_map=Base_Sequence[15],
     find=Base_Sequence[14],
     sum$0=Base_Sequence[13],
     count=Base_Sequence[12],
     for_all=Base_Sequence[11],
     exists=Base_Sequence[10],
     fold_until=Base_Sequence[9],
     fold_result=Base_Sequence[8],
     fold$0=Base_Sequence[7],
     iter=Base_Sequence[6],
     is_empty$0=Base_Sequence[5],
     length$0=Base_Sequence[4],
     mem=Base_Sequence[3],
     sexp_of_t$11=Base_Sequence[2],
     compare$7=Base_Sequence[1],
     _iz_=Base_Sequence[27],
     _iA_=Base_Sequence[26];
    function merge_all(seqs,compare)
     {function _b48_(param)
       {var not_yet_in_heap=param[2],heap=param[1];
        if(not_yet_in_heap)
         {var
           not_yet_in_heap$0=not_yet_in_heap[2],
           seq=not_yet_in_heap[1],
           match=caml_call1(Base_Sequence[110][1],seq);
          if(typeof match === "number")
           return [0,[0,heap,not_yet_in_heap$0]];
          else
           {if(0 === match[0])
             {var seq$0=match[1];
              return [0,[0,heap,[0,seq$0,not_yet_in_heap$0]]]}
            var seq$1=match[2],elt=match[1];
            return [0,[0,add(heap,[0,elt,seq$1]),not_yet_in_heap$0]]}}
        var match$0=pop(heap);
        if(match$0)
         {var
           _b49_=match$0[1],
           heap$0=_b49_[2],
           match$1=_b49_[1],
           seq$2=match$1[2],
           elt$0=match$1[1];
          return [1,elt$0,[0,heap$0,[0,seq$2,0]]]}
        return 0}
      return caml_call2
              (unfold_step,
               [0,create(caml_call2(Base_Comparable[2],compare,_aT_)),seqs],
               _b48_)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$58);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     _iB_=
      [0,
       bin_t$8,
       bin_read_t$30,
       bin_read_t$29,
       bin_reader_t$8,
       bin_size_t$13,
       bin_write_t$13,
       bin_writer_t$8,
       bin_shape_t$8,
       compare$6,
       hash_fold_t$6,
       t_of_sexp$10,
       sexp_of_t$10],
     Core_kernel_Sequence=
      [0,
       _iB_,
       compare$7,
       sexp_of_t$11,
       mem,
       length$0,
       is_empty$0,
       iter,
       fold$0,
       fold_result,
       fold_until,
       exists,
       for_all,
       count,
       sum$0,
       find,
       find_map,
       to_list$0,
       to_array,
       min_elt,
       max_elt,
       foldi,
       iteri,
       existsi,
       counti,
       findi,
       find_mapi,
       _iA_,
       _iz_,
       Monad_infix,
       bind,
       return$0,
       map$0,
       join,
       ignore_m,
       all,
       all_unit,
       all_ignore,
       Let_syntax,
       empty,
       next,
       Step,
       unfold_step,
       unfold,
       unfold_with,
       unfold_with_and_finish,
       nth,
       nth_exn,
       folding_map,
       folding_mapi,
       mapi,
       filteri,
       filter,
       merge$0,
       merge_with_duplicates,
       hd,
       hd_exn,
       tl,
       tl_eagerly_exn,
       find_exn,
       for_alli,
       append,
       concat,
       concat_map,
       concat_mapi,
       interleave,
       round_robin,
       zip,
       zip_full,
       reduce_exn,
       reduce,
       group$17,
       find_consecutive_duplicate,
       remove_consecutive_duplicates,
       range,
       init,
       filter_map,
       filter_mapi,
       filter_opt,
       sub,
       take,
       drop,
       drop_eagerly,
       take_while,
       drop_while,
       drop_while_option,
       split_n,
       split_n_eagerly,
       chunks_exn,
       shift_right,
       shift_right_with_list,
       shift_left,
       Infix,
       cartesian_product,
       interleaved_cartesian_product,
       intersperse,
       cycle_list_exn,
       repeat,
       singleton,
       delayed_fold,
       fold_m,
       iter_m,
       to_list_rev,
       of_list$0,
       of_lazy,
       memoize,
       force_eagerly,
       bounded_length,
       length_is_bounded_by,
       Generator,
       Expert,
       merge_all];
    caml_register_global(7351,Core_kernel_Sequence,"Core_kernel__Sequence");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$59);
    caml_call1(Expect_test_collector[4][1],cst_src_array_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$60,cst$20);
    var
     _iC_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$14),
     _iD_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_array_ml_6_12),
     _iE_=caml_call1(_dl_,caml_call2(Bin_prot_Shape[15],_iD_,_iC_)),
     _iF_=[0,caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$15),0],
     _iG_=
      [0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$34),_iF_,_iE_],0],
     _iH_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_array_ml_6_0),
     group$18=caml_call2(Bin_prot_Shape[6],_iH_,_iG_);
    function bin_shape_t$9(a)
     {var _b47_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$35);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$18,_b47_),[0,a,0])}
    function bin_size_t$14(size_of_a,v){return caml_call2(_bo_,size_of_a,v)}
    function bin_write_t$14(write_a,buf,pos,v)
     {return caml_call3(caml_call1(_dn_,write_a),buf,pos,v)}
    function bin_writer_t$9(bin_writer_a)
     {function _b43_(v)
       {var _b44_=bin_writer_a[2];
        return function(_b45_,_b46_)
         {return bin_write_t$14(_b44_,v,_b45_,_b46_)}}
      return [0,function(v){return bin_size_t$14(bin_writer_a[1],v)},_b43_]}
    function bin_read_t$31(of_a,buf,pos_ref,vint)
     {return caml_call3(caml_call1(_dq_,of_a),buf,pos_ref,vint)}
    function bin_read_t$32(of_a,buf,pos_ref)
     {return caml_call2(caml_call1(_dp_,of_a),buf,pos_ref)}
    function bin_reader_t$9(bin_reader_a)
     {function _b42_(buf,pos_ref,vtag)
       {return bin_read_t$31(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$32(bin_reader_a[1],buf,pos_ref)},
              _b42_]}
    function bin_t$9(bin_a)
     {var _b40_=bin_reader_t$9(bin_a[3]),_b41_=bin_writer_t$9(bin_a[2]);
      return [0,bin_shape_t$9(bin_a[1]),_b41_,_b40_]}
    var
     Typename_of_t=caml_call1(Typerep_lib_Make_typename[2],[0,name$7]),
     typename_of_t=Typename_of_t[2];
    function typerep_of_t(of_a)
     {var name_of_t=caml_call1(Typename_of_t[1],of_a);
      return [9,
              [0,
               name_of_t,
               [0,
                [246,
                 function(_b4Z_){return caml_call1(typerep_of_array,of_a)}]]]]}
    var
     _iI_=include$12[1],
     _iJ_=include$12[3],
     _iK_=include$12[2],
     binary_search=include$12[4],
     binary_search_segmented=include$12[5],
     mem$0=include$12[6],
     length$1=include$12[7],
     is_empty$1=include$12[8],
     iter$0=include$12[9],
     fold$1=include$12[10],
     fold_result$0=include$12[11],
     fold_until$0=include$12[12],
     exists$0=include$12[13],
     for_all$0=include$12[14],
     count$0=include$12[15],
     sum$1=include$12[16],
     find$0=include$12[17],
     find_map$0=include$12[18],
     to_list$1=include$12[19],
     to_array$0=include$12[20],
     min_elt$0=include$12[21],
     max_elt$0=include$12[22],
     create$0=include$12[25],
     init$0=include$12[26],
     make_matrix=include$12[27],
     append$0=include$12[28],
     concat$0=include$12[29],
     copy=include$12[30],
     fill=include$12[31],
     blit=include$12[32],
     blito=include$12[33],
     unsafe_blit=include$12[34],
     sub$0=include$12[35],
     subo=include$12[36],
     of_list$1=include$12[37],
     map$1=include$12[38],
     folding_map$0=include$12[39],
     folding_mapi$0=include$12[40],
     fold_map=include$12[41],
     fold_mapi=include$12[42],
     iteri$0=include$12[43],
     mapi$0=include$12[44],
     foldi$0=include$12[45],
     fold_right=include$12[46],
     sort=include$12[47],
     stable_sort=include$12[48],
     is_sorted=include$12[49],
     is_sorted_strictly=include$12[50],
     concat_map$0=include$12[51],
     concat_mapi$0=include$12[52],
     partition_tf=include$12[53],
     partitioni_tf=include$12[54],
     cartesian_product$0=include$12[55],
     transpose=include$12[56],
     transpose_exn=include$12[57],
     filter_opt$0=include$12[58],
     filter_map$0=include$12[59],
     filter_mapi$0=include$12[60],
     for_alli$0=include$12[61],
     existsi$0=include$12[62],
     counti$0=include$12[63],
     iter2_exn=include$12[64],
     map2_exn=include$12[65],
     fold2_exn=include$12[66],
     for_all2_exn=include$12[67],
     exists2_exn=include$12[68],
     filter$0=include$12[69],
     filteri$0=include$12[70],
     swap=include$12[71],
     rev_inplace=include$12[72],
     of_list_rev=include$12[73],
     of_list_map=include$12[74],
     of_list_rev_map=include$12[75],
     replace=include$12[76],
     replace_all=include$12[77],
     map_inplace=include$12[78],
     find_exn$0=include$12[79],
     find_map_exn=include$12[80],
     findi$0=include$12[81],
     findi_exn=include$12[82],
     find_mapi$0=include$12[83],
     find_mapi_exn=include$12[84],
     find_consecutive_duplicate$0=include$12[85],
     reduce$0=include$12[86],
     reduce_exn$0=include$12[87],
     permute=include$12[88],
     random_element=include$12[89],
     random_element_exn=include$12[90],
     zip$0=include$12[91],
     zip_exn=include$12[92],
     unzip=include$12[93],
     sorted_copy=include$12[94],
     last=include$12[95],
     empty$0=include$12[96],
     equal$0=include$12[97],
     unsafe_truncate=include$12[98],
     to_sequence$0=include$12[99],
     to_sequence_mutable=include$12[100],
     Private=0;
    function normalize$0(t,i){return normalize(length$1,t,i)}
    function slice$0(t,start,stop){return slice(length$1,sub$0,t,start,stop)}
    function nget(t,i)
     {var _b4Y_=normalize$0(t,i);return caml_check_bound(t,_b4Y_)[_b4Y_ + 1]}
    function nset(t,i,v)
     {var _b4X_=normalize$0(t,i);
      return caml_check_bound(t,_b4X_)[_b4X_ + 1] = v}
    var length$2=include$12[7];
    function get(_b4W_,_b4V_){return caml_check_bound(_b4W_,_b4V_)[_b4V_ + 1]}
    function set(_b4U_,_b4T_,_b4S_)
     {return caml_check_bound(_b4U_,_b4T_)[_b4T_ + 1] = _b4S_}
    var
     _iL_=caml_call1(_dl_,_ce_),
     _iM_=[0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$36),0,_iL_],0],
     _iN_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_array_ml_42_4),
     group$19=caml_call2(Bin_prot_Shape[6],_iN_,_iM_),
     _iO_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$37),
     bin_shape_t$10=caml_call1(caml_call2(Bin_prot_Shape[14],group$19,_iO_),0);
    function bin_size_t$15(v){return caml_call2(_bo_,bin_size_t$1,v)}
    function bin_write_t$15(buf,pos,v)
     {return caml_call3(caml_call1(_dn_,bin_write_t$1),buf,pos,v)}
    function bin_read_t$33(buf,pos_ref,vint)
     {return caml_call3(caml_call1(_dq_,bin_read_t$3),buf,pos_ref,vint)}
    function bin_read_t$34(buf,pos_ref)
     {return caml_call2(caml_call1(_dp_,bin_read_t$3),buf,pos_ref)}
    function compare_t(a_001,b_002){return caml_call3(_b_,_t_,a_001,b_002)}
    function t_of_sexp$11(t){return caml_call2(_c_,t_of_sexp,t)}
    function sexp_of_t$12(v){return caml_call2(_d_,sexp_of_t$0,v)}
    function create$1(len){return caml_call2(create$0,len,0)}
    var
     _iP_=
      [0,
       create$1,
       length$2,
       get,
       set,
       function(_b4R_,_b4Q_,_b4P_,_b4O_,_b4N_)
        {return runtime.core_array_unsafe_int_blit
                 (_b4R_,_b4Q_,_b4P_,_b4O_,_b4N_)}];
    function of_bool(b){return b?1:0}
    var
     include$14=
      caml_call1
       (caml_call1(Base_for_tests_Test_blit[5],[0,_aD_,of_bool]),_iP_),
     blit$0=include$14[1],
     blito$0=include$14[2],
     sub$1=include$14[4],
     subo$0=include$14[5],
     _iQ_=caml_call1(_dl_,_ci_),
     _iR_=[0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$38),0,_iQ_],0],
     _iS_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_array_ml_71_4),
     group$20=caml_call2(Bin_prot_Shape[6],_iS_,_iR_),
     _iT_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$39),
     bin_shape_t$11=caml_call1(caml_call2(Bin_prot_Shape[14],group$20,_iT_),0);
    function bin_size_t$16(v){return caml_call2(_bo_,bin_size_t$2,v)}
    function bin_write_t$16(buf,pos,v)
     {return caml_call3(caml_call1(_dn_,bin_write_t$2),buf,pos,v)}
    function bin_read_t$35(buf,pos_ref,vint)
     {return caml_call3(caml_call1(_dq_,bin_read_t$5),buf,pos_ref,vint)}
    function bin_read_t$36(buf,pos_ref)
     {return caml_call2(caml_call1(_dp_,bin_read_t$5),buf,pos_ref)}
    function compare_t$0(a_005,b_006){return caml_call3(_b_,_o_,a_005,b_006)}
    function t_of_sexp$12(t){return caml_call2(_c_,_r_,t)}
    function sexp_of_t$13(v){return caml_call2(_d_,_s_,v)}
    function create$2(len){return caml_call2(create$0,len,0)}
    var
     _iU_=
      [0,
       create$2,
       length$2,
       get,
       set,
       function(_b4M_,_b4L_,_b4K_,_b4J_,_b4I_)
        {return runtime.core_array_unsafe_float_blit
                 (_b4M_,_b4L_,_b4K_,_b4J_,_b4I_)}],
     equal$1=Base_Float[14];
    function of_bool$0(b){return b?1:0}
    var
     include$15=
      caml_call1
       (caml_call1(Base_for_tests_Test_blit[5],[0,equal$1,of_bool$0]),_iU_),
     blit$1=include$15[1],
     blito$1=include$15[2],
     sub$2=include$15[4],
     subo$1=include$15[5],
     _iV_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$16),
     _iW_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_array_ml_286_25),
     _iX_=caml_call1(_dl_,caml_call2(Bin_prot_Shape[15],_iW_,_iV_)),
     _iY_=[0,caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_perms$1),0],
     _iZ_=[0,caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$17),_iY_],
     _i0_=
      [0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$40),_iZ_,_iX_],0],
     _i1_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_array_ml_286_2),
     group$21=caml_call2(Bin_prot_Shape[6],_i1_,_i0_);
    function bin_shape_t$12(a,perms)
     {var _b4H_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$41);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$21,_b4H_),
               [0,a,[0,perms,0]])}
    function bin_size_t$17(size_of_a,size_of_perms,v)
     {return caml_call2(_bo_,size_of_a,v)}
    function bin_write_t$17(write_a,write_perms,buf,pos,v)
     {return caml_call3(caml_call1(_dn_,write_a),buf,pos,v)}
    function bin_writer_t$10(bin_writer_a,bin_writer_perms)
     {function _b4C_(v)
       {var _b4D_=bin_writer_perms[2],_b4E_=bin_writer_a[2];
        return function(_b4F_,_b4G_)
         {return bin_write_t$17(_b4E_,_b4D_,v,_b4F_,_b4G_)}}
      return [0,
              function(v)
               {return bin_size_t$17(bin_writer_a[1],bin_writer_perms[1],v)},
              _b4C_]}
    function bin_read_t$37(of_a,of_perms,buf,pos_ref,vint)
     {return caml_call3(caml_call1(_dq_,of_a),buf,pos_ref,vint)}
    function bin_read_t$38(of_a,of_perms,buf,pos_ref)
     {return caml_call2(caml_call1(_dp_,of_a),buf,pos_ref)}
    function bin_reader_t$10(bin_reader_a,bin_reader_perms)
     {function _b4B_(buf,pos_ref,vtag)
       {return bin_read_t$37
                (bin_reader_a[1],bin_reader_perms[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$38
                        (bin_reader_a[1],bin_reader_perms[1],buf,pos_ref)},
              _b4B_]}
    function bin_t$10(bin_a,bin_perms)
     {var
       _b4z_=bin_reader_t$10(bin_a[3],bin_perms[3]),
       _b4A_=bin_writer_t$10(bin_a[2],bin_perms[2]);
      return [0,bin_shape_t$12(bin_a[1],bin_perms[1]),_b4A_,_b4z_]}
    function compare$8(cmp_a,cmp_perms,a_009,b_010)
     {return caml_call3(_b_,cmp_a,a_009,b_010)}
    function t_of_sexp$13(of_a,of_perms,t){return caml_call2(_c_,of_a,t)}
    function sexp_of_t$14(of_a,of_perms,v){return caml_call2(_d_,of_a,v)}
    caml_call1(Typerep_lib_Make_typename[3],[0,name$8]);
    var
     _i2_=[0,caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_perms$2),0],
     _i3_=
      [0,
       [0,
        caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$42),
        _i2_,
        bin_shape_t$10],
       0],
     _i4_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_array_ml_291_4),
     group$22=caml_call2(Bin_prot_Shape[6],_i4_,_i3_);
    function bin_shape_t$13(perms)
     {var _b4y_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$43);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$22,_b4y_),[0,perms,0])}
    function bin_size_t$18(size_of_perms){return bin_size_t$15}
    function bin_write_t$18(write_perms){return bin_write_t$15}
    function bin_writer_t$11(bin_writer_perms)
     {function _b4x_(v)
       {return caml_call1(bin_write_t$18(bin_writer_perms[2]),v)}
      return [0,
              function(v)
               {return caml_call1(bin_size_t$18(bin_writer_perms[1]),v)},
              _b4x_]}
    function bin_read_t$39(of_perms){return bin_read_t$33}
    function bin_read_t$40(of_perms){return bin_read_t$34}
    function bin_reader_t$11(bin_reader_perms)
     {function _b4w_(buf,pos_ref,vtag)
       {return caml_call3(bin_read_t$39(bin_reader_perms[1]),buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return caml_call2
                        (bin_read_t$40(bin_reader_perms[1]),buf,pos_ref)},
              _b4w_]}
    function bin_t$11(bin_perms)
     {var
       _b4u_=bin_reader_t$11(bin_perms[3]),
       _b4v_=bin_writer_t$11(bin_perms[2]);
      return [0,bin_shape_t$13(bin_perms[1]),_b4v_,_b4u_]}
    function compare$9(cmp_perms,a_013,b_014){return compare_t(a_013,b_014)}
    function t_of_sexp$14(of_perms,t){return t_of_sexp$11(t)}
    function sexp_of_t$15(of_perms,v){return sexp_of_t$12(v)}
    var
     _i5_=[0,caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_perms$3),0],
     _i6_=
      [0,
       [0,
        caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$44),
        _i5_,
        bin_shape_t$11],
       0],
     _i7_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_array_ml_297_4),
     group$23=caml_call2(Bin_prot_Shape[6],_i7_,_i6_);
    function bin_shape_t$14(perms)
     {var _b4t_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$45);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$23,_b4t_),[0,perms,0])}
    function bin_size_t$19(size_of_perms){return bin_size_t$16}
    function bin_write_t$19(write_perms){return bin_write_t$16}
    function bin_writer_t$12(bin_writer_perms)
     {function _b4s_(v)
       {return caml_call1(bin_write_t$19(bin_writer_perms[2]),v)}
      return [0,
              function(v)
               {return caml_call1(bin_size_t$19(bin_writer_perms[1]),v)},
              _b4s_]}
    function bin_read_t$41(of_perms){return bin_read_t$35}
    function bin_read_t$42(of_perms){return bin_read_t$36}
    function bin_reader_t$12(bin_reader_perms)
     {function _b4r_(buf,pos_ref,vtag)
       {return caml_call3(bin_read_t$41(bin_reader_perms[1]),buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return caml_call2
                        (bin_read_t$42(bin_reader_perms[1]),buf,pos_ref)},
              _b4r_]}
    function bin_t$12(bin_perms)
     {var
       _b4p_=bin_reader_t$12(bin_perms[3]),
       _b4q_=bin_writer_t$12(bin_perms[2]);
      return [0,bin_shape_t$14(bin_perms[1]),_b4q_,_b4p_]}
    function compare$10(cmp_perms,a_015,b_016)
     {return compare_t$0(a_015,b_016)}
    function t_of_sexp$15(of_perms,t){return t_of_sexp$12(t)}
    function sexp_of_t$16(of_perms,v){return sexp_of_t$13(v)}
    function to_array_id(_b4o_){return _b4o_}
    function of_array_id(_b4n_){return _b4n_}
    var
     _i8_=
      [0,
       bin_t$12,
       bin_read_t$42,
       bin_read_t$41,
       bin_reader_t$12,
       bin_size_t$19,
       bin_write_t$19,
       bin_writer_t$12,
       bin_shape_t$14,
       compare$10,
       t_of_sexp$15,
       sexp_of_t$16,
       blit$1,
       blito$1,
       sub$2,
       subo$1],
     _i9_=
      [0,
       bin_t$11,
       bin_read_t$40,
       bin_read_t$39,
       bin_reader_t$11,
       bin_size_t$18,
       bin_write_t$18,
       bin_writer_t$11,
       bin_shape_t$13,
       compare$9,
       t_of_sexp$14,
       sexp_of_t$15,
       blit$0,
       blito$0,
       sub$1,
       subo$0];
    function invariant(invariant_a,t){return caml_call2(iter$0,t,invariant_a)}
    var
     _i__=Stdlib_sys[14],
     _i$_=
      [0,
       [0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$46),0,bin_shape_t$10],
       0],
     _ja_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_array_ml_410_2),
     group$24=caml_call2(Bin_prot_Shape[6],_ja_,_i$_),
     _jb_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$47),
     bin_shape_t$15=caml_call1(caml_call2(Bin_prot_Shape[14],group$24,_jb_),0),
     bin_writer_t$13=[0,bin_size_t$15,bin_write_t$15],
     bin_reader_t$13=[0,bin_read_t$34,bin_read_t$33],
     bin_t$13=[0,bin_shape_t$15,bin_writer_t$13,bin_reader_t$13],
     _jc_=
      [0,
       [0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$48),0,bin_shape_t$11],
       0],
     _jd_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_array_ml_415_2),
     group$25=caml_call2(Bin_prot_Shape[6],_jd_,_jc_),
     _je_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$49),
     bin_shape_t$16=caml_call1(caml_call2(Bin_prot_Shape[14],group$25,_je_),0),
     bin_writer_t$14=[0,bin_size_t$16,bin_write_t$16],
     bin_reader_t$14=[0,bin_read_t$36,bin_read_t$35],
     bin_t$14=[0,bin_shape_t$16,bin_writer_t$14,bin_reader_t$14];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$61);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Array=
      [0,
       bin_t$9,
       bin_read_t$32,
       bin_read_t$31,
       bin_reader_t$9,
       bin_size_t$14,
       bin_write_t$14,
       bin_writer_t$9,
       bin_shape_t$9,
       typerep_of_t,
       typename_of_t,
       _iI_,
       _iK_,
       _iJ_,
       binary_search,
       binary_search_segmented,
       mem$0,
       length$1,
       is_empty$1,
       iter$0,
       fold$1,
       fold_result$0,
       fold_until$0,
       exists$0,
       for_all$0,
       count$0,
       sum$1,
       find$0,
       find_map$0,
       to_list$1,
       to_array$0,
       min_elt$0,
       max_elt$0,
       invariant,
       _i__,
       create$0,
       init$0,
       make_matrix,
       append$0,
       concat$0,
       copy,
       fill,
       blit,
       blito,
       unsafe_blit,
       sub$0,
       subo,
       of_list$1,
       map$1,
       folding_map$0,
       folding_mapi$0,
       fold_map,
       fold_mapi,
       iteri$0,
       mapi$0,
       foldi$0,
       fold_right,
       sort,
       stable_sort,
       is_sorted,
       is_sorted_strictly,
       concat_map$0,
       concat_mapi$0,
       partition_tf,
       partitioni_tf,
       cartesian_product$0,
       transpose,
       transpose_exn,
       filter_opt$0,
       filter_map$0,
       filter_mapi$0,
       for_alli$0,
       existsi$0,
       counti$0,
       iter2_exn,
       map2_exn,
       fold2_exn,
       for_all2_exn,
       exists2_exn,
       filter$0,
       filteri$0,
       swap,
       rev_inplace,
       of_list_rev,
       of_list_map,
       of_list_rev_map,
       replace,
       replace_all,
       map_inplace,
       find_exn$0,
       find_map_exn,
       findi$0,
       findi_exn,
       find_mapi$0,
       find_mapi_exn,
       find_consecutive_duplicate$0,
       reduce$0,
       reduce_exn$0,
       permute,
       random_element,
       random_element_exn,
       zip$0,
       zip_exn,
       unzip,
       sorted_copy,
       last,
       empty$0,
       equal$0,
       unsafe_truncate,
       to_sequence$0,
       to_sequence_mutable,
       Private,
       [0,
        bin_t$13,
        bin_read_t$34,
        bin_read_t$33,
        bin_reader_t$13,
        bin_size_t$15,
        bin_write_t$15,
        bin_writer_t$13,
        bin_shape_t$15,
        compare_t,
        t_of_sexp$11,
        sexp_of_t$12,
        blit$0,
        blito$0,
        sub$1,
        subo$0],
       [0,
        bin_t$14,
        bin_read_t$36,
        bin_read_t$35,
        bin_reader_t$14,
        bin_size_t$16,
        bin_write_t$16,
        bin_writer_t$14,
        bin_shape_t$16,
        compare_t$0,
        t_of_sexp$12,
        sexp_of_t$13,
        blit$1,
        blito$1,
        sub$2,
        subo$1],
       normalize$0,
       slice$0,
       nget,
       nset,
       [0,
        bin_t$10,
        bin_read_t$38,
        bin_read_t$37,
        bin_reader_t$10,
        bin_size_t$17,
        bin_write_t$17,
        bin_writer_t$10,
        bin_shape_t$12,
        compare$8,
        t_of_sexp$13,
        sexp_of_t$14,
        _i9_,
        _i8_,
        of_array_id,
        to_array_id,
        to_sequence_mutable,
        mem$0,
        iter$0,
        fold$1,
        fold_result$0,
        fold_until$0,
        exists$0,
        for_all$0,
        count$0,
        sum$1,
        find$0,
        find_map$0,
        to_list$1,
        copy,
        min_elt$0,
        max_elt$0,
        blit,
        blito,
        unsafe_blit,
        sub$0,
        subo,
        binary_search,
        binary_search_segmented,
        length$1,
        is_empty$1,
        create$0,
        init$0,
        make_matrix,
        append$0,
        concat$0,
        copy,
        fill,
        of_list$1,
        map$1,
        mapi$0,
        folding_map$0,
        iteri$0,
        foldi$0,
        folding_mapi$0,
        fold_right,
        sort,
        stable_sort,
        is_sorted,
        is_sorted_strictly,
        concat_map$0,
        concat_mapi$0,
        partition_tf,
        partitioni_tf,
        cartesian_product$0,
        transpose,
        transpose_exn,
        normalize$0,
        slice$0,
        nget,
        nset,
        filter_opt$0,
        filter_map$0,
        filter_mapi$0,
        for_alli$0,
        existsi$0,
        counti$0,
        iter2_exn,
        map2_exn,
        fold2_exn,
        for_all2_exn,
        exists2_exn,
        filter$0,
        filteri$0,
        swap,
        rev_inplace,
        of_list_rev,
        of_list_map,
        of_list_rev_map,
        replace,
        replace_all,
        map_inplace,
        find_exn$0,
        find_map_exn,
        findi$0,
        findi_exn,
        find_mapi$0,
        find_mapi_exn,
        find_consecutive_duplicate$0,
        reduce$0,
        reduce_exn$0,
        permute,
        zip$0,
        zip_exn,
        unzip,
        sorted_copy,
        last,
        empty$0,
        equal$0,
        unsafe_truncate,
        to_sequence$0,
        to_sequence_mutable]];
    caml_register_global(7355,Core_kernel_Array,"Core_kernel__Array");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$62);
    caml_call1(Expect_test_collector[4][1],cst_src_info_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$63,cst$21);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$64);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Info_intf=[0];
    caml_register_global(7356,Core_kernel_Info_intf,"Core_kernel__Info_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$65);
    caml_call1(Expect_test_collector[4][1],cst_src_source_code_position0_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$66,cst$22);
    var
     _jf_=
      caml_call1
       (Bin_prot_Shape[8],
        [0,
         [0,cst_pos_fname,_b1_],
         [0,
          [0,cst_pos_lnum,_ce_],
          [0,[0,cst_pos_bol,_ce_],[0,[0,cst_pos_cnum,_ce_],0]]]]),
     _jg_=[0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$50),0,_jf_],0],
     _jh_=
      caml_call1
       (Bin_shape_lib_Bin_shape[4][1],cst_src_source_code_position0_ml_5_4),
     group$26=caml_call2(Bin_prot_Shape[6],_jh_,_jg_),
     _ji_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$51),
     bin_shape_t$17=caml_call1(caml_call2(Bin_prot_Shape[14],group$26,_ji_),0);
    function bin_size_t$20(param)
     {var
       v4=param[4],
       v3=param[3],
       v2=param[2],
       v1=param[1],
       size=caml_call1(bin_size_t,v1) | 0,
       size$0=size + caml_call1(bin_size_t$1,v2) | 0,
       size$1=size$0 + caml_call1(bin_size_t$1,v3) | 0;
      return size$1 + caml_call1(bin_size_t$1,v4) | 0}
    function bin_write_t$20(buf,pos,param)
     {var
       v4=param[4],
       v3=param[3],
       v2=param[2],
       v1=param[1],
       pos$0=caml_call3(bin_write_t,buf,pos,v1),
       pos$1=caml_call3(bin_write_t$1,buf,pos$0,v2),
       pos$2=caml_call3(bin_write_t$1,buf,pos$1,v3);
      return caml_call3(bin_write_t$1,buf,pos$2,v4)}
    var bin_writer_t$15=[0,bin_size_t$20,bin_write_t$20];
    function bin_read_t$43(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],
               cst_src_source_code_position0_ml_Stable_V1_t,
               pos_ref[1])}
    function bin_read_t$44(buf,pos_ref)
     {var
       v_pos_fname=caml_call2(bin_read_t,buf,pos_ref),
       v_pos_lnum=caml_call2(bin_read_t$3,buf,pos_ref),
       v_pos_bol=caml_call2(bin_read_t$3,buf,pos_ref),
       v_pos_cnum=caml_call2(bin_read_t$3,buf,pos_ref);
      return [0,v_pos_fname,v_pos_lnum,v_pos_bol,v_pos_cnum]}
    var
     bin_reader_t$15=[0,bin_read_t$44,bin_read_t$43],
     bin_t$15=[0,bin_shape_t$17,bin_writer_t$15,bin_reader_t$15];
    function compare$11(a_001,b_002)
     {if(caml_call2(Ppx_compare_lib[1],a_001,b_002))return 0;
      var n=caml_call2(_V_,a_001[1],b_002[1]);
      if(0 === n)
       {var n$0=caml_call2(_t_,a_001[2],b_002[2]);
        if(0 === n$0)
         {var n$1=caml_call2(_t_,a_001[3],b_002[3]);
          return 0 === n$1?caml_call2(_t_,a_001[4],b_002[4]):n$1}
        return n$0}
      return n}
    function hash_fold_t$7(hsv,arg)
     {var
       hsv$0=caml_call2(_W_,hsv,arg[1]),
       hsv$1=caml_call2(hash_fold_t,hsv$0,arg[2]),
       hsv$2=caml_call2(hash_fold_t,hsv$1,arg[3]);
      return caml_call2(hash_fold_t,hsv$2,arg[4])}
    function hash$5(x)
     {var hsv=caml_call2(Base_Hash[11],0,0),_b4m_=hash_fold_t$7(hsv,x);
      return caml_call1(Base_Hash[9],_b4m_)}
    function t_of_sexp$16(sexp)
     {if(0 === sexp[0])
       return caml_call2(Sexplib0_Sexp_conv_error[15],tp_loc$11,sexp);
      var
       field_sexps=sexp[1],
       pos_fname_field=[0,0],
       pos_lnum_field=[0,0],
       pos_bol_field=[0,0],
       pos_cnum_field=[0,0],
       duplicates=[0,0],
       extra=[0,0],
       param=field_sexps;
      for(;;)
       {if(param)
         {var _b4d_=param[1];
          if(1 === _b4d_[0])
           {var _b4e_=_b4d_[1];
            if(_b4e_)
             {var _b4f_=_b4e_[1];
              if(0 === _b4f_[0])
               {var _b4g_=_b4e_[2],_b4h_=_b4f_[1];
                if(! _b4g_)
                 {var tail$0=param[2];
                  if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_b4h_,extra[1]];
                  var param=tail$0;
                  continue}
                if(! _b4g_[2])
                 {var tail=param[2],field_sexp=_b4g_[1];
                  if(caml_string_notequal(_b4h_,cst_pos_bol$0))
                   if(caml_string_notequal(_b4h_,cst_pos_cnum$0))
                    if(caml_string_notequal(_b4h_,cst_pos_fname$0))
                     if(caml_string_notequal(_b4h_,cst_pos_lnum$0))
                      {if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_b4h_,extra[1]]}
                     else
                      if(pos_lnum_field[1])
                       duplicates[1] = [0,_b4h_,duplicates[1]];
                      else
                       {var fvalue=caml_call1(t_of_sexp,field_sexp);
                        pos_lnum_field[1] = [0,fvalue]}
                    else
                     if(pos_fname_field[1])
                      duplicates[1] = [0,_b4h_,duplicates[1]];
                     else
                      {var fvalue$0=caml_call1(_Y_,field_sexp);
                       pos_fname_field[1] = [0,fvalue$0]}
                   else
                    if(pos_cnum_field[1])
                     duplicates[1] = [0,_b4h_,duplicates[1]];
                    else
                     {var fvalue$1=caml_call1(t_of_sexp,field_sexp);
                      pos_cnum_field[1] = [0,fvalue$1]}
                  else
                   if(pos_bol_field[1])
                    duplicates[1] = [0,_b4h_,duplicates[1]];
                   else
                    {var fvalue$2=caml_call1(t_of_sexp,field_sexp);
                     pos_bol_field[1] = [0,fvalue$2]}
                  var param=tail;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[9],tp_loc$11,_b4d_)}
        if(duplicates[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[11],tp_loc$11,duplicates[1],sexp);
        if(extra[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],tp_loc$11,extra[1],sexp);
        var
         _b4i_=pos_fname_field[1],
         _b4j_=pos_lnum_field[1],
         _b4k_=pos_bol_field[1],
         _b4l_=pos_cnum_field[1];
        if(_b4i_)
         if(_b4j_)
          if(_b4k_)
           if(_b4l_)
            {var
              pos_cnum_value=_b4l_[1],
              pos_bol_value=_b4k_[1],
              pos_lnum_value=_b4j_[1],
              pos_fname_value=_b4i_[1];
             return [0,
                     pos_fname_value,
                     pos_lnum_value,
                     pos_bol_value,
                     pos_cnum_value]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[14],
                 tp_loc$11,
                 sexp,
                 [0,
                  [0,0 === pos_fname_field[1]?1:0,cst_pos_fname$1],
                  [0,
                   [0,0 === pos_lnum_field[1]?1:0,cst_pos_lnum$1],
                   [0,
                    [0,0 === pos_bol_field[1]?1:0,cst_pos_bol$1],
                    [0,[0,0 === pos_cnum_field[1]?1:0,cst_pos_cnum$1],0]]]])}}
    function sexp_of_t$17(param)
     {var
       v_pos_cnum=param[4],
       v_pos_bol=param[3],
       v_pos_lnum=param[2],
       v_pos_fname=param[1],
       arg=caml_call1(sexp_of_t$0,v_pos_cnum),
       bnds=[0,[1,[0,_jj_,[0,arg,0]]],0],
       arg$0=caml_call1(sexp_of_t$0,v_pos_bol),
       bnds$0=[0,[1,[0,_jk_,[0,arg$0,0]]],bnds],
       arg$1=caml_call1(sexp_of_t$0,v_pos_lnum),
       bnds$1=[0,[1,[0,_jl_,[0,arg$1,0]]],bnds$0],
       arg$2=caml_call1(_Z_,v_pos_fname),
       bnds$2=[0,[1,[0,_jm_,[0,arg$2,0]]],bnds$1];
      return [1,bnds$2]}
    var
     comparator=Base_Source_code_position[19],
     V1$11=
      [0,
       bin_shape_t$17,
       bin_size_t$20,
       bin_write_t$20,
       bin_writer_t$15,
       bin_read_t$43,
       bin_read_t$44,
       bin_reader_t$15,
       bin_t$15,
       compare$11,
       hash_fold_t$7,
       hash$5,
       t_of_sexp$16,
       sexp_of_t$17,
       comparator],
     Stable$1=[0,V1$11],
     _jn_=Stable$1[1],
     _jw_=_jn_[9],
     _jx_=_jn_[10],
     _jy_=_jn_[11],
     _jz_=_jn_[12],
     _jB_=Base_Source_code_position[23],
     _jC_=Base_Source_code_position[3],
     _jo_=_jn_[1],
     _jp_=_jn_[2],
     _jq_=_jn_[3],
     _jr_=_jn_[4],
     _js_=_jn_[5],
     _jt_=_jn_[6],
     _ju_=_jn_[7],
     _jv_=_jn_[8],
     _jA_=_jn_[14];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$67);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Source_code_position0=
      [0,
       Stable$1,
       _jo_,
       _jp_,
       _jq_,
       _jr_,
       _js_,
       _jt_,
       _ju_,
       _jv_,
       _jw_,
       _jx_,
       _jy_,
       _jz_,
       _jA_,
       _jB_,
       _jC_];
    caml_register_global
     (7358,
      Core_kernel_Source_code_position0,
      "Core_kernel__Source_code_position0");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$68);
    caml_call1(Expect_test_collector[4][1],cst_src_info_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$69,cst$23);
    var
     _jD_=include$16[57],
     _jE_=include$16[58],
     _jF_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$52),
     _jG_=
      [0,
       [0,cst_Atom$0,[0,_b1_,0]],
       [0,
        [0,
         cst_List$0,
         [0,
          caml_call1(_de_,caml_call1(caml_call1(Bin_prot_Shape[13],_jF_),0)),
          0]],
        0]],
     _jH_=caml_call1(Bin_prot_Shape[9],_jG_),
     _jI_=[0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$53),0,_jH_],0],
     _jJ_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_info_ml_17_4),
     group$27=caml_call2(Bin_prot_Shape[6],_jJ_,_jI_),
     _jK_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$54),
     bin_shape_t$18=caml_call1(caml_call2(Bin_prot_Shape[14],group$27,_jK_),0);
    function bin_size_t$21(param)
     {if(0 === param[0])
       {var v1=param[1];return 1 + caml_call1(bin_size_t,v1) | 0}
      var v1$0=param[1];
      return 1 + caml_call2(_bn_,bin_size_t$21,v1$0) | 0}
    function bin_write_t$21(buf,pos,param)
     {if(0 === param[0])
       {var v1=param[1],pos$0=caml_call3(Bin_prot_Write[30],buf,pos,0);
        return caml_call3(bin_write_t,buf,pos$0,v1)}
      var v1$0=param[1],pos$1=caml_call3(Bin_prot_Write[30],buf,pos,1);
      return caml_call3(caml_call1(_dg_,bin_write_t$21),buf,pos$1,v1$0)}
    function bin_read_t$45(buf,pos_ref,vint)
     {return caml_call2(Bin_prot_Common[19],cst_src_info_ml_Sexp_t,pos_ref[1])}
    function bin_read_t$46(buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[29],buf,pos_ref);
      if(0 === match)
       {var arg_1=caml_call2(bin_read_t,buf,pos_ref);return [0,arg_1]}
      if(1 === match)
       {var arg_1$0=caml_call2(caml_call1(_di_,bin_read_t$46),buf,pos_ref);
        return [1,arg_1$0]}
      return caml_call2(Bin_prot_Common[18],_jL_,pos_ref[1])}
    var
     hash_fold_t$8=function _b4c_(_b4a_,_b4b_){return _b4c_.fun(_b4a_,_b4b_)},
     hash$6=function _b3$_(_b3__){return _b3$_.fun(_b3__)};
    caml_update_dummy
     (hash_fold_t$8,
      function(hsv,arg)
       {if(0 === arg[0])
         {var a0=arg[1],hsv$0=caml_call2(Base_Hash[3],hsv,0);
          return caml_call2(_W_,hsv$0,a0)}
        var a0$0=arg[1],hsv$1=caml_call2(Base_Hash[3],hsv,1);
        return caml_call3(_G_,hash_fold_t$8,hsv$1,a0$0)});
    caml_update_dummy
     (hash$6,
      function(x)
       {var
         hsv=caml_call2(Base_Hash[11],0,0),
         _b39_=caml_call2(hash_fold_t$8,hsv,x);
        return caml_call1(Base_Hash[9],_b39_)});
    function to_binable(t){return caml_call1(sexp_of_t,t)}
    var
     of_binable=Base_Exn[5],
     include$17=
      caml_call1
       (caml_call1
         (Stable$0[1][1],
          [0,
           bin_shape_t$18,
           bin_size_t$21,
           bin_write_t$21,
           bin_read_t$46,
           bin_read_t$45]),
        [0,to_binable,of_binable]),
     bin_size_t$22=include$17[1],
     bin_write_t$22=include$17[2],
     bin_read_t$47=include$17[3],
     bin_shape_t$19=include$17[5];
    function Extend(Info)
     {var
       _b3M_=Stable$1[1][1],
       _b3N_=
        [0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$55),0,_b3M_],0],
       _b3O_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_info_ml_48_10),
       group=caml_call2(Bin_prot_Shape[6],_b3O_,_b3N_),
       _b3P_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$56),
       bin_shape_t=caml_call1(caml_call2(Bin_prot_Shape[14],group,_b3P_),0),
       bin_size_t$0=Stable$1[1][2],
       bin_write_t$0=Stable$1[1][3],
       bin_writer_t=[0,bin_size_t$0,bin_write_t$0],
       bin_read_t$0=Stable$1[1][5],
       bin_read_t$1=Stable$1[1][6],
       bin_reader_t=[0,bin_read_t$1,bin_read_t$0],
       bin_t=[0,bin_shape_t,bin_writer_t,bin_reader_t],
       V1=
        [0,
         bin_shape_t,
         bin_size_t$0,
         bin_write_t$0,
         bin_writer_t,
         bin_read_t$0,
         bin_read_t$1,
         bin_reader_t,
         bin_t,
         _jC_],
       Source_code_position=[0,V1],
       _b3Q_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$57),
       _b3R_=
        [0,
         [0,
          cst_With_backtrace,
          [0,caml_call1(caml_call1(Bin_prot_Shape[13],_b3Q_),0),[0,_b1_,0]]],
         0],
       _b3S_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$58),
       _b3T_=
        [0,
         caml_call1(_de_,caml_call1(caml_call1(Bin_prot_Shape[13],_b3S_),0)),
         0],
       _b3U_=[0,[0,cst_Of_list,[0,caml_call1(_c9_,_ce_),_b3T_]],_b3R_],
       _b3V_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$59),
       _b3W_=
        [0,
         [0,
          cst_Tag_arg,
          [0,
           _b1_,
           [0,
            bin_shape_t$18,
            [0,caml_call1(caml_call1(Bin_prot_Shape[13],_b3V_),0),0]]]],
         _b3U_],
       _b3X_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$60),
       _b3Y_=
        [0,
         [0,
          cst_Tag_t,
          [0,_b1_,[0,caml_call1(caml_call1(Bin_prot_Shape[13],_b3X_),0),0]]],
         _b3W_],
       _b3Z_=
        [0,
         [0,cst_Could_not_construct,[0,bin_shape_t$18,0]],
         [0,
          [0,cst_String,[0,_b1_,0]],
          [0,
           [0,cst_Exn,[0,bin_shape_t$19,0]],
           [0,
            [0,cst_Sexp,[0,bin_shape_t$18,0]],
            [0,
             [0,
              cst_Tag_sexp,
              [0,
               _b1_,
               [0,
                bin_shape_t$18,
                [0,caml_call1(_c9_,Source_code_position[1][1]),0]]]],
             _b3Y_]]]]],
       _b30_=caml_call1(Bin_prot_Shape[9],_b3Z_),
       _b31_=
        [0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$61),0,_b30_],0],
       _b32_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_info_ml_58_8),
       group$0=caml_call2(Bin_prot_Shape[6],_b32_,_b31_),
       _b33_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$62),
       bin_shape_t$0=
        caml_call1(caml_call2(Bin_prot_Shape[14],group$0,_b33_),0),
       Binable_exn=0;
      function bin_size_t$2(param)
       {switch(param[0])
         {case 0:var v1=param[1];return 1 + bin_size_t$21(v1) | 0;
          case 1:var v1$0=param[1];return 1 + caml_call1(bin_size_t,v1$0) | 0;
          case 2:
           var v1$1=param[1];return 1 + caml_call1(bin_size_t$22,v1$1) | 0;
          case 3:var v1$2=param[1];return 1 + bin_size_t$21(v1$2) | 0;
          case 4:
           var
            v3=param[3],
            v2=param[2],
            v1$3=param[1],
            size=1 + caml_call1(bin_size_t,v1$3) | 0,
            size$0=size + bin_size_t$21(v2) | 0;
           return size$0 + caml_call2(_bk_,Source_code_position[1][2],v3) | 0;
          case 5:
           var
            v2$0=param[2],
            v1$4=param[1],
            size$1=1 + caml_call1(bin_size_t,v1$4) | 0;
           return size$1 + bin_size_t$2(v2$0) | 0;
          case 6:
           var
            v3$0=param[3],
            v2$1=param[2],
            v1$5=param[1],
            size$2=1 + caml_call1(bin_size_t,v1$5) | 0,
            size$3=size$2 + bin_size_t$21(v2$1) | 0;
           return size$3 + bin_size_t$2(v3$0) | 0;
          case 7:
           var
            v2$2=param[2],
            v1$6=param[1],
            size$4=1 + caml_call2(_bk_,bin_size_t$1,v1$6) | 0;
           return size$4 + caml_call2(_bn_,bin_size_t$2,v2$2) | 0;
          default:
           var v2$3=param[2],v1$7=param[1],size$5=1 + bin_size_t$2(v1$7) | 0;
           return size$5 + caml_call1(bin_size_t,v2$3) | 0}}
      function bin_write_t$2(buf,pos,param)
       {var pos$0=pos,param$0=param;
        for(;;)
         switch(param$0[0])
          {case 0:
            var
             v1=param$0[1],
             pos$1=caml_call3(Bin_prot_Write[30],buf,pos$0,0);
            return bin_write_t$21(buf,pos$1,v1);
           case 1:
            var
             v1$0=param$0[1],
             pos$2=caml_call3(Bin_prot_Write[30],buf,pos$0,1);
            return caml_call3(bin_write_t,buf,pos$2,v1$0);
           case 2:
            var
             v1$1=param$0[1],
             pos$3=caml_call3(Bin_prot_Write[30],buf,pos$0,2);
            return caml_call3(bin_write_t$22,buf,pos$3,v1$1);
           case 3:
            var
             v1$2=param$0[1],
             pos$4=caml_call3(Bin_prot_Write[30],buf,pos$0,3);
            return bin_write_t$21(buf,pos$4,v1$2);
           case 4:
            var
             v3=param$0[3],
             v2=param$0[2],
             v1$3=param$0[1],
             pos$5=caml_call3(Bin_prot_Write[30],buf,pos$0,4),
             pos$6=caml_call3(bin_write_t,buf,pos$5,v1$3),
             pos$7=bin_write_t$21(buf,pos$6,v2);
            return caml_call3
                    (caml_call1(_c$_,Source_code_position[1][3]),buf,pos$7,v3);
           case 5:
            var
             v2$0=param$0[2],
             v1$4=param$0[1],
             pos$8=caml_call3(Bin_prot_Write[30],buf,pos$0,5),
             pos$9=caml_call3(bin_write_t,buf,pos$8,v1$4),
             pos$0=pos$9,
             param$0=v2$0;
            continue;
           case 6:
            var
             v3$0=param$0[3],
             v2$1=param$0[2],
             v1$5=param$0[1],
             pos$10=caml_call3(Bin_prot_Write[30],buf,pos$0,6),
             pos$11=caml_call3(bin_write_t,buf,pos$10,v1$5),
             pos$12=bin_write_t$21(buf,pos$11,v2$1),
             pos$0=pos$12,
             param$0=v3$0;
            continue;
           case 7:
            var
             v2$2=param$0[2],
             v1$6=param$0[1],
             pos$13=caml_call3(Bin_prot_Write[30],buf,pos$0,7),
             pos$14=caml_call3(caml_call1(_c$_,bin_write_t$1),buf,pos$13,v1$6);
            return caml_call3(caml_call1(_dg_,bin_write_t$2),buf,pos$14,v2$2);
           default:
            var
             v2$3=param$0[2],
             v1$7=param$0[1],
             pos$15=caml_call3(Bin_prot_Write[30],buf,pos$0,8),
             pos$16=bin_write_t$2(buf,pos$15,v1$7);
            return caml_call3(bin_write_t,buf,pos$16,v2$3)}}
      var bin_writer_t$0=[0,bin_size_t$2,bin_write_t$2];
      function bin_read_t$2(buf,pos_ref,vint)
       {return caml_call2
                (Bin_prot_Common[19],
                 cst_src_info_ml_Extend_Internal_repr_Stable_V2_t,
                 pos_ref[1])}
      function bin_read_t$4(buf,pos_ref)
       {var match=caml_call2(Bin_prot_Read[29],buf,pos_ref);
        if(8 < match >>> 0)
         return caml_call2(Bin_prot_Common[18],_jM_,pos_ref[1]);
        switch(match)
         {case 0:var arg_1=bin_read_t$46(buf,pos_ref);return [0,arg_1];
          case 1:
           var arg_1$0=caml_call2(bin_read_t,buf,pos_ref);return [1,arg_1$0];
          case 2:
           var arg_1$1=caml_call2(bin_read_t$47,buf,pos_ref);
           return [2,arg_1$1];
          case 3:var arg_1$2=bin_read_t$46(buf,pos_ref);return [3,arg_1$2];
          case 4:
           var
            arg_1$3=caml_call2(bin_read_t,buf,pos_ref),
            arg_2=bin_read_t$46(buf,pos_ref),
            arg_3=
             caml_call2
              (caml_call1(_db_,Source_code_position[1][6]),buf,pos_ref);
           return [4,arg_1$3,arg_2,arg_3];
          case 5:
           var
            arg_1$4=caml_call2(bin_read_t,buf,pos_ref),
            arg_2$0=bin_read_t$4(buf,pos_ref);
           return [5,arg_1$4,arg_2$0];
          case 6:
           var
            arg_1$5=caml_call2(bin_read_t,buf,pos_ref),
            arg_2$1=bin_read_t$46(buf,pos_ref),
            arg_3$0=bin_read_t$4(buf,pos_ref);
           return [6,arg_1$5,arg_2$1,arg_3$0];
          case 7:
           var
            arg_1$6=caml_call2(caml_call1(_db_,bin_read_t$3),buf,pos_ref),
            arg_2$2=caml_call2(caml_call1(_di_,bin_read_t$4),buf,pos_ref);
           return [7,arg_1$6,arg_2$2];
          default:
           var
            arg_1$7=bin_read_t$4(buf,pos_ref),
            arg_2$3=caml_call2(bin_read_t,buf,pos_ref);
           return [8,arg_1$7,arg_2$3]}}
      var
       bin_reader_t$0=[0,bin_read_t$4,bin_read_t$2],
       bin_t$0=[0,bin_shape_t$0,bin_writer_t$0,bin_reader_t$0];
      function sexp_of_t$1(param)
       {switch(param[0])
         {case 0:
           var v0=param[1],v0$0=caml_call1(_jD_,v0);
           return [1,[0,_jN_,[0,v0$0,0]]];
          case 1:
           var v0$1=param[1],v0$2=caml_call1(_Z_,v0$1);
           return [1,[0,_jO_,[0,v0$2,0]]];
          case 2:
           var v0$3=param[1],v0$4=caml_call1(sexp_of_t,v0$3);
           return [1,[0,_jP_,[0,v0$4,0]]];
          case 3:
           var v0$5=param[1],v0$6=caml_call1(_jD_,v0$5);
           return [1,[0,_jQ_,[0,v0$6,0]]];
          case 4:
           var
            v2=param[3],
            v1=param[2],
            v0$7=param[1],
            v0$8=caml_call1(_Z_,v0$7),
            v1$0=caml_call1(_jD_,v1),
            v2$0=caml_call2(_R_,Source_code_position[1][9],v2);
           return [1,[0,_jR_,[0,v0$8,[0,v1$0,[0,v2$0,0]]]]];
          case 5:
           var
            v1$1=param[2],
            v0$9=param[1],
            v0$10=caml_call1(_Z_,v0$9),
            v1$2=sexp_of_t$1(v1$1);
           return [1,[0,_jS_,[0,v0$10,[0,v1$2,0]]]];
          case 6:
           var
            v2$1=param[3],
            v1$3=param[2],
            v0$11=param[1],
            v0$12=caml_call1(_Z_,v0$11),
            v1$4=caml_call1(_jD_,v1$3),
            v2$2=sexp_of_t$1(v2$1);
           return [1,[0,_jT_,[0,v0$12,[0,v1$4,[0,v2$2,0]]]]];
          case 7:
           var
            v1$5=param[2],
            v0$13=param[1],
            v0$14=caml_call2(_R_,sexp_of_t$0,v0$13),
            v1$6=caml_call2(_I_,sexp_of_t$1,v1$5);
           return [1,[0,_jU_,[0,v0$14,[0,v1$6,0]]]];
          default:
           var
            v1$7=param[2],
            v0$15=param[1],
            v0$16=sexp_of_t$1(v0$15),
            v1$8=caml_call1(_Z_,v1$7);
           return [1,[0,_jV_,[0,v0$16,[0,v1$8,0]]]]}}
      var
       V2=
        [0,
         bin_shape_t$0,
         bin_size_t$2,
         bin_write_t$2,
         bin_writer_t$0,
         bin_read_t$2,
         bin_read_t$4,
         bin_reader_t$0,
         bin_t$0,
         sexp_of_t$1],
       Stable$2=[0,Binable_exn,Source_code_position,V2],
       include=Stable$2[3],
       bin_shape_t$1=include[1],
       bin_size_t$3=include[2],
       bin_write_t$3=include[3],
       bin_writer_t$1=include[4],
       bin_read_t$5=include[5],
       bin_read_t$6=include[6],
       bin_reader_t$1=include[7],
       bin_t$1=include[8],
       sexp_of_t$2=include[9],
       to_info=Info[22][3],
       of_info=Info[22][2],
       Internal_repr=
        [0,
         Stable$2,
         bin_shape_t$1,
         bin_size_t$3,
         bin_write_t$3,
         bin_writer_t$1,
         bin_read_t$5,
         bin_read_t$6,
         bin_reader_t$1,
         bin_t$1,
         sexp_of_t$2,
         to_info,
         of_info],
       t_of_sexp=Info[4],
       sexp_of_t$3=Info[5],
       compare=Info[1],
       hash_fold_t=Info[2],
       func=Info[3];
      function hash(x){return caml_call1(func,x)}
      var
       T=[0,t_of_sexp,sexp_of_t$3,compare,hash_fold_t,hash],
       t_of_sexp$0=T[1],
       sexp_of_t$4=T[2],
       compare$0=T[3],
       hash_fold_t$0=T[4],
       hash$0=T[5],
       include$0=caml_call1(_gG_[1][2],[0,T[3],T[2]]),
       comparator=include$0[1],
       to_binable=Info[22][2],
       of_binable=Info[22][3],
       _b34_=Internal_repr[1][3],
       include$1=
        caml_call1
         (caml_call1
           (Stable$0[1][1],[0,_b34_[1],_b34_[2],_b34_[3],_b34_[6],_b34_[5]]),
          [0,to_binable,of_binable]),
       bin_size_t$4=include$1[1],
       bin_write_t$4=include$1[2],
       bin_read_t$7=include$1[3],
       bin_read_t$8=include$1[4],
       bin_shape_t$2=include$1[5],
       bin_writer_t$2=include$1[6],
       bin_reader_t$2=include$1[7],
       bin_t$2=include$1[8],
       V2$0=
        [0,
         T,
         t_of_sexp$0,
         sexp_of_t$4,
         compare$0,
         hash_fold_t$0,
         hash$0,
         comparator,
         bin_size_t$4,
         bin_write_t$4,
         bin_read_t$7,
         bin_read_t$8,
         bin_shape_t$2,
         bin_writer_t$2,
         bin_reader_t$2,
         bin_t$2],
       compare$1=Info[1],
       to_sexpable=Info[5],
       of_sexpable=Info[4],
       include$2=
        caml_call1
         (caml_call1(Stable[1][1],[0,_jE_,_jD_]),[0,to_sexpable,of_sexpable]),
       t_of_sexp$1=include$2[1],
       sexp_of_t$5=include$2[2],
       T$0=[0,t_of_sexp$1,sexp_of_t$5,compare$1],
       t_of_sexp$2=T$0[1],
       sexp_of_t$6=T$0[2],
       compare$2=T$0[3],
       include$3=caml_call1(_gG_[1][2],[0,T$0[3],T$0[2]]),
       comparator$0=include$3[1],
       include$4=
        caml_call1
         (caml_call1
           (Stable$0[1][1],
            [0,
             bin_shape_t$18,
             bin_size_t$21,
             bin_write_t$21,
             bin_read_t$46,
             bin_read_t$45]),
          [0,sexp_of_t$6,t_of_sexp$2]),
       bin_size_t$5=include$4[1],
       bin_write_t$5=include$4[2],
       bin_read_t$9=include$4[3],
       bin_read_t$10=include$4[4],
       bin_shape_t$3=include$4[5],
       bin_writer_t$3=include$4[6],
       bin_reader_t$3=include$4[7],
       bin_t$3=include$4[8],
       V1$0=
        [0,
         T$0,
         t_of_sexp$2,
         sexp_of_t$6,
         compare$2,
         comparator$0,
         bin_size_t$5,
         bin_write_t$5,
         bin_read_t$9,
         bin_read_t$10,
         bin_shape_t$3,
         bin_writer_t$3,
         bin_reader_t$3,
         bin_t$3],
       Stable$3=[0,V2$0,V1$0],
       _b35_=Stable$3[1][12],
       _b36_=
        [0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$63),0,_b35_],0],
       _b37_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_info_ml_116_2),
       group$1=caml_call2(Bin_prot_Shape[6],_b37_,_b36_),
       _b38_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$64),
       bin_shape_t$4=
        caml_call1(caml_call2(Bin_prot_Shape[14],group$1,_b38_),0),
       bin_size_t$6=Stable$3[1][8],
       bin_write_t$6=Stable$3[1][9],
       bin_writer_t$4=[0,bin_size_t$6,bin_write_t$6],
       bin_read_t$11=Stable$3[1][11],
       bin_read_t$12=Stable$3[1][10],
       bin_reader_t$4=[0,bin_read_t$12,bin_read_t$11],
       bin_t$4=[0,bin_shape_t$4,bin_writer_t$4,bin_reader_t$4],
       pp=Info[21],
       to_exn=Info[20],
       of_exn=Info[19],
       of_list=Info[18],
       tag_arg=Info[17],
       tag=Info[16],
       createf=Info[15],
       create_s=Info[14],
       create=Info[13],
       of_thunk=Info[12],
       of_lazy=Info[11],
       of_string=Info[10],
       to_string_hum_deprecated=Info[9],
       to_string_mach=Info[8],
       to_string_hum=Info[7],
       invariant=Info[6],
       sexp_of_t$7=Info[5],
       t_of_sexp$3=Info[4],
       hash$1=Info[3],
       hash_fold_t$1=Info[2],
       compare$3=Info[1];
      return [0,
              Internal_repr,
              Stable$3,
              bin_shape_t$4,
              bin_size_t$6,
              bin_write_t$6,
              bin_writer_t$4,
              bin_read_t$11,
              bin_read_t$12,
              bin_reader_t$4,
              bin_t$4,
              compare$3,
              hash_fold_t$1,
              hash$1,
              t_of_sexp$3,
              sexp_of_t$7,
              invariant,
              to_string_hum,
              to_string_mach,
              to_string_hum_deprecated,
              of_string,
              of_lazy,
              of_thunk,
              create,
              create_s,
              createf,
              tag,
              tag_arg,
              of_list,
              of_exn,
              to_exn,
              pp]}
    var
     include$18=Extend(Base_Info),
     _jW_=include$18[1],
     _jX_=include$18[2],
     _j__=include$18[15],
     _jY_=include$18[3],
     _jZ_=include$18[4],
     _j0_=include$18[5],
     _j1_=include$18[6],
     _j2_=include$18[7],
     _j3_=include$18[8],
     _j4_=include$18[9],
     _j5_=include$18[10],
     _j6_=include$18[11],
     _j7_=include$18[12],
     _j8_=include$18[13],
     _j9_=include$18[14],
     _j$_=include$18[16],
     _ka_=include$18[17],
     _kb_=include$18[18],
     _kc_=include$18[19],
     _kd_=include$18[20],
     _ke_=include$18[21],
     _kf_=include$18[22],
     _kg_=include$18[23],
     _kh_=include$18[24],
     _ki_=include$18[25],
     _kj_=include$18[26],
     _kk_=include$18[27],
     _kl_=include$18[28],
     _km_=include$18[29],
     _kn_=include$18[30],
     _ko_=include$18[31];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$70);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    function _kp_(_b3H_)
     {var _b3I_=Extend(_b3H_),_b3J_=_b3I_[2],_b3K_=_b3J_[1],_b3L_=_b3J_[2];
      return [0,
              _b3I_[10],
              _b3I_[8],
              _b3I_[7],
              _b3I_[9],
              _b3I_[4],
              _b3I_[5],
              _b3I_[6],
              _b3I_[3],
              [0,
               [0,
                _b3L_[13],
                _b3L_[8],
                _b3L_[9],
                _b3L_[12],
                _b3L_[6],
                _b3L_[7],
                _b3L_[11],
                _b3L_[10],
                _b3L_[4],
                _b3L_[2],
                _b3L_[3],
                _b3L_[5]],
               [0,
                _b3K_[15],
                _b3K_[10],
                _b3K_[11],
                _b3K_[14],
                _b3K_[8],
                _b3K_[9],
                _b3K_[13],
                _b3K_[12],
                _b3K_[4],
                _b3K_[2],
                _b3K_[3],
                _b3K_[7]]]]}
    var
     _kq_=_jX_[1],
     _kr_=_jX_[2],
     Core_kernel_Info=
      [0,
       _j6_,
       _j7_,
       _j8_,
       _j9_,
       _j__,
       _j$_,
       _ka_,
       _kb_,
       _kc_,
       _kd_,
       _ke_,
       _kf_,
       _kg_,
       _kh_,
       _ki_,
       _kj_,
       _kk_,
       _kl_,
       _km_,
       _kn_,
       _ko_,
       [0,_jW_[10],_jW_[12],_jW_[11]],
       _j5_,
       _j3_,
       _j2_,
       _j4_,
       _jZ_,
       _j0_,
       _j1_,
       _jY_,
       [0,
        [0,
         _kr_[13],
         _kr_[8],
         _kr_[9],
         _kr_[12],
         _kr_[6],
         _kr_[7],
         _kr_[11],
         _kr_[10],
         _kr_[4],
         _kr_[2],
         _kr_[3],
         _kr_[5]],
        [0,
         _kq_[15],
         _kq_[10],
         _kq_[11],
         _kq_[14],
         _kq_[8],
         _kq_[9],
         _kq_[13],
         _kq_[12],
         _kq_[4],
         _kq_[2],
         _kq_[3],
         _kq_[7]]],
       _kp_];
    caml_register_global(7362,Core_kernel_Info,"Core_kernel__Info");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$71);
    caml_call1(Expect_test_collector[4][1],cst_src_error_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$72,cst$24);
    var
     hash_fold_t$9=Base_Error[2],
     _ku_=Base_Error[4],
     sexp_of_t$18=Base_Error[5],
     _kx_=Base_Error[8],
     _kz_=Base_Error[10],
     _kC_=Base_Error[13],
     _kD_=Base_Error[14],
     _kF_=Base_Error[16],
     of_exn=Base_Error[19],
     _kL_=Base_Error[23],
     _kM_=Base_Error[24],
     _ks_=Base_Error[1],
     _kt_=Base_Error[3],
     _kv_=Base_Error[6],
     _kw_=Base_Error[7],
     _ky_=Base_Error[9],
     _kA_=Base_Error[11],
     _kB_=Base_Error[12],
     _kE_=Base_Error[15],
     _kG_=Base_Error[17],
     _kH_=Base_Error[18],
     _kI_=Base_Error[20],
     _kJ_=Base_Error[21],
     _kK_=Base_Error[22],
     _kN_=Base_Error[25],
     _kO_=Base_Error[26],
     include$19=
      _kp_
       ([0,
         Base_Error[1],
         Base_Error[2],
         Base_Error[3],
         Base_Error[4],
         Base_Error[5],
         Base_Error[6],
         Base_Error[7],
         Base_Error[8],
         Base_Error[9],
         Base_Error[10],
         Base_Error[11],
         Base_Error[12],
         Base_Error[13],
         Base_Error[14],
         Base_Error[15],
         Base_Error[16],
         Base_Error[17],
         Base_Error[18],
         Base_Error[19],
         Base_Error[20],
         Base_Error[21],
         Base_Error[22]]),
     bin_read_t$48=include$19[2],
     bin_size_t$23=include$19[5],
     bin_write_t$23=include$19[6],
     bin_shape_t$20=include$19[8],
     _kT_=include$19[9],
     _kP_=include$19[1],
     _kQ_=include$19[3],
     _kR_=include$19[4],
     _kS_=include$19[7];
    function failwiths(strict,here,message,a,sexp_of_a)
     {return caml_call1(_kL_,caml_call5(_kC_,here,strict,message,a,sexp_of_a))}
    function failwithp(strict,here,message,a,sexp_of_a)
     {return caml_call1
              (_kL_,caml_call5(_kC_,[0,here],strict,message,a,sexp_of_a))}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$73);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Error=
      [0,
       _ks_,
       hash_fold_t$9,
       _kt_,
       _ku_,
       sexp_of_t$18,
       _kv_,
       _kw_,
       _kx_,
       _ky_,
       _kz_,
       _kA_,
       _kB_,
       _kC_,
       _kD_,
       _kE_,
       _kF_,
       _kG_,
       _kH_,
       of_exn,
       _kI_,
       _kJ_,
       _kK_,
       _kL_,
       _kM_,
       _kN_,
       _kO_,
       _kP_,
       bin_read_t$48,
       _kQ_,
       _kR_,
       bin_size_t$23,
       bin_write_t$23,
       _kS_,
       bin_shape_t$20,
       _kT_,
       failwiths,
       failwithp];
    caml_register_global(7364,Core_kernel_Error,"Core_kernel__Error");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$74);
    caml_call1(Expect_test_collector[4][1],cst_src_or_error_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$75,cst$25);
    var
     _kU_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$18),
     _kV_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_or_error_ml_3_13),
     _aYF_=
      bin_shape_t$6(caml_call2(Bin_prot_Shape[15],_kV_,_kU_),bin_shape_t$20),
     _kW_=[0,caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$19),0],
     _kX_=
      [0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$65),_kW_,_aYF_],0],
     _kY_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_or_error_ml_3_0),
     group$28=caml_call2(Bin_prot_Shape[6],_kY_,_kX_);
    function bin_shape_t$21(a)
     {var _b3G_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$66);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$28,_b3G_),[0,a,0])}
    function bin_size_t$24(size_of_a,v)
     {return bin_size_t$11(size_of_a,bin_size_t$23,v)}
    function bin_write_t$24(write_a,buf,pos,v)
     {return bin_write_t$11(write_a,bin_write_t$23,buf,pos,v)}
    function bin_writer_t$16(bin_writer_a)
     {function _b3C_(v)
       {var _b3D_=bin_writer_a[2];
        return function(_b3E_,_b3F_)
         {return bin_write_t$24(_b3D_,v,_b3E_,_b3F_)}}
      return [0,function(v){return bin_size_t$24(bin_writer_a[1],v)},_b3C_]}
    function bin_read_t$49(of_a,buf,pos_ref,vint)
     {return bin_read_t$25(of_a,bin_read_t$48,buf,pos_ref,vint)}
    function bin_read_t$50(of_a,buf,pos_ref)
     {return bin_read_t$26(of_a,bin_read_t$48,buf,pos_ref)}
    function bin_reader_t$16(bin_reader_a)
     {function _b3B_(buf,pos_ref,vtag)
       {return bin_read_t$49(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$50(bin_reader_a[1],buf,pos_ref)},
              _b3B_]}
    function bin_t$16(bin_a)
     {var _b3z_=bin_reader_t$16(bin_a[3]),_b3A_=bin_writer_t$16(bin_a[2]);
      return [0,bin_shape_t$21(bin_a[1]),_b3A_,_b3z_]}
    var
     _k2_=include$20[4],
     _lp_=include$20[29],
     _ls_=include$20[32],
     _lv_=include$20[35],
     _lw_=include$20[36],
     _lx_=include$20[37],
     _lA_=include$20[40],
     _lC_=include$20[42],
     _lG_=include$20[46],
     _kZ_=include$20[1],
     _k0_=include$20[2],
     _k1_=include$20[3],
     _k3_=include$20[5],
     _k4_=include$20[6],
     _k5_=include$20[7],
     _k6_=include$20[8],
     _k7_=include$20[9],
     _k8_=include$20[10],
     _k9_=include$20[11],
     _k__=include$20[12],
     _k$_=include$20[13],
     _la_=include$20[14],
     _lb_=include$20[15],
     _lc_=include$20[16],
     _ld_=include$20[17],
     _le_=include$20[18],
     _lf_=include$20[19],
     _lg_=include$20[20],
     _lh_=include$20[21],
     _li_=include$20[22],
     _lj_=include$20[23],
     _lk_=include$20[24],
     _ll_=include$20[25],
     _lm_=include$20[26],
     _ln_=include$20[27],
     _lo_=include$20[28],
     _lq_=include$20[30],
     _lr_=include$20[31],
     _lt_=include$20[33],
     _lu_=include$20[34],
     _ly_=include$20[38],
     _lz_=include$20[39],
     _lB_=include$20[41],
     _lD_=include$20[43],
     _lE_=include$20[44],
     _lF_=include$20[45],
     _lH_=include$20[47],
     _lI_=include$20[48],
     _lJ_=include$20[49],
     _lK_=_kT_[1][8],
     _lL_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$20),
     _lM_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_or_error_ml_10_17),
     _lN_=caml_call2(Bin_prot_Shape[15],_lM_,_lL_),
     _lO_=caml_call1(caml_call1(_hx_[1][8],_lN_),_lK_),
     _lP_=[0,caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$21),0],
     _lQ_=
      [0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$67),_lP_,_lO_],0],
     _lR_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_or_error_ml_10_4),
     group$29=caml_call2(Bin_prot_Shape[6],_lR_,_lQ_);
    function bin_shape_t$22(a)
     {var _b3y_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$68);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$29,_b3y_),[0,a,0])}
    function bin_size_t$25(size_of_a,v)
     {return caml_call3(_hx_[1][5],size_of_a,_kT_[1][5],v)}
    function bin_write_t$25(write_a,buf,pos,v)
     {return caml_call3(caml_call2(_hx_[1][6],write_a,_kT_[1][6]),buf,pos,v)}
    function bin_writer_t$17(bin_writer_a)
     {function _b3u_(v)
       {var _b3v_=bin_writer_a[2];
        return function(_b3w_,_b3x_)
         {return bin_write_t$25(_b3v_,v,_b3w_,_b3x_)}}
      return [0,function(v){return bin_size_t$25(bin_writer_a[1],v)},_b3u_]}
    function bin_read_t$51(of_a,buf,pos_ref,vint)
     {return caml_call3
              (caml_call2(_hx_[1][3],of_a,_kT_[1][2]),buf,pos_ref,vint)}
    function bin_read_t$52(of_a,buf,pos_ref)
     {return caml_call2(caml_call2(_hx_[1][2],of_a,_kT_[1][2]),buf,pos_ref)}
    function bin_reader_t$17(bin_reader_a)
     {function _b3t_(buf,pos_ref,vtag)
       {return bin_read_t$51(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$52(bin_reader_a[1],buf,pos_ref)},
              _b3t_]}
    function bin_t$17(bin_a)
     {var _b3r_=bin_reader_t$17(bin_a[3]),_b3s_=bin_writer_t$17(bin_a[2]);
      return [0,bin_shape_t$22(bin_a[1]),_b3s_,_b3r_]}
    function compare$12(cmp_a,a_001,b_002)
     {return caml_call4(_hx_[1][9],cmp_a,_kT_[1][9],a_001,b_002)}
    function t_of_sexp$17(of_a,t)
     {return caml_call3(_hx_[1][10],of_a,_kT_[1][10],t)}
    function sexp_of_t$19(of_a,v)
     {return caml_call3(_hx_[1][11],of_a,_kT_[1][11],v)}
    function map$2(x,f)
     {function _b3p_(_b3q_){return _b3q_}
      return caml_call3(_hx_[1][12],x,f,_b3p_)}
    var
     _lS_=_kT_[2][8],
     _lT_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$22),
     _lU_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_or_error_ml_16_17),
     _lV_=caml_call2(Bin_prot_Shape[15],_lU_,_lT_),
     _lW_=caml_call1(caml_call1(_hx_[1][8],_lV_),_lS_),
     _lX_=[0,caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$23),0],
     _lY_=
      [0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$69),_lX_,_lW_],0],
     _lZ_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_or_error_ml_16_4),
     group$30=caml_call2(Bin_prot_Shape[6],_lZ_,_lY_);
    function bin_shape_t$23(a)
     {var _b3o_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$70);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$30,_b3o_),[0,a,0])}
    function bin_size_t$26(size_of_a,v)
     {return caml_call3(_hx_[1][5],size_of_a,_kT_[2][5],v)}
    function bin_write_t$26(write_a,buf,pos,v)
     {return caml_call3(caml_call2(_hx_[1][6],write_a,_kT_[2][6]),buf,pos,v)}
    function bin_writer_t$18(bin_writer_a)
     {function _b3k_(v)
       {var _b3l_=bin_writer_a[2];
        return function(_b3m_,_b3n_)
         {return bin_write_t$26(_b3l_,v,_b3m_,_b3n_)}}
      return [0,function(v){return bin_size_t$26(bin_writer_a[1],v)},_b3k_]}
    function bin_read_t$53(of_a,buf,pos_ref,vint)
     {return caml_call3
              (caml_call2(_hx_[1][3],of_a,_kT_[2][2]),buf,pos_ref,vint)}
    function bin_read_t$54(of_a,buf,pos_ref)
     {return caml_call2(caml_call2(_hx_[1][2],of_a,_kT_[2][2]),buf,pos_ref)}
    function bin_reader_t$18(bin_reader_a)
     {function _b3j_(buf,pos_ref,vtag)
       {return bin_read_t$53(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$54(bin_reader_a[1],buf,pos_ref)},
              _b3j_]}
    function bin_t$18(bin_a)
     {var _b3h_=bin_reader_t$18(bin_a[3]),_b3i_=bin_writer_t$18(bin_a[2]);
      return [0,bin_shape_t$23(bin_a[1]),_b3i_,_b3h_]}
    function compare$13(cmp_a,a_007,b_008)
     {return caml_call4(_hx_[1][9],cmp_a,_kT_[2][9],a_007,b_008)}
    function t_of_sexp$18(of_a,t)
     {return caml_call3(_hx_[1][10],of_a,_kT_[2][10],t)}
    function sexp_of_t$20(of_a,v)
     {return caml_call3(_hx_[1][11],of_a,_kT_[2][11],v)}
    function map$3(x,f)
     {function _b3f_(_b3g_){return _b3g_}
      return caml_call3(_hx_[1][12],x,f,_b3f_)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$76);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Or_error=
      [0,
       bin_t$16,
       bin_read_t$50,
       bin_read_t$49,
       bin_reader_t$16,
       bin_size_t$24,
       bin_write_t$24,
       bin_writer_t$16,
       bin_shape_t$21,
       _kZ_,
       _k0_,
       _k1_,
       _k2_,
       _k3_,
       _k4_,
       _k5_,
       _k6_,
       _k7_,
       _k8_,
       _k9_,
       _k__,
       _k$_,
       _la_,
       _lb_,
       _lc_,
       _ld_,
       _le_,
       _lf_,
       _lg_,
       _lh_,
       _li_,
       _lj_,
       _lk_,
       _ll_,
       _lm_,
       _ln_,
       _lo_,
       _lp_,
       _lq_,
       _lr_,
       _ls_,
       _lt_,
       _lu_,
       _lv_,
       _lw_,
       _lx_,
       _ly_,
       _lz_,
       _lA_,
       _lB_,
       _lC_,
       _lD_,
       _lE_,
       _lF_,
       _lG_,
       _lH_,
       _lI_,
       _lJ_,
       [0,
        [0,
         bin_t$17,
         bin_read_t$52,
         bin_read_t$51,
         bin_reader_t$17,
         bin_size_t$25,
         bin_write_t$25,
         bin_writer_t$17,
         bin_shape_t$22,
         compare$12,
         t_of_sexp$17,
         sexp_of_t$19,
         map$2],
        [0,
         bin_t$18,
         bin_read_t$54,
         bin_read_t$53,
         bin_reader_t$18,
         bin_size_t$26,
         bin_write_t$26,
         bin_writer_t$18,
         bin_shape_t$23,
         compare$13,
         t_of_sexp$18,
         sexp_of_t$20,
         map$3]]];
    caml_register_global(7366,Core_kernel_Or_error,"Core_kernel__Or_error");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$77);
    caml_call1(Expect_test_collector[4][1],cst_src_quickcheck_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$78,cst$26);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$79);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Quickcheck_intf=[0];
    caml_register_global
     (7367,Core_kernel_Quickcheck_intf,"Core_kernel__Quickcheck_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$80);
    caml_call1(Expect_test_collector[4][1],cst_src_quickcheck_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$81,cst$27);
    var
     compare$14=caml_float_compare,
     of_float=Base_Int[1],
     to_float=Base_Int[2],
     of_int_exn=Base_Int[3],
     to_int_exn=Base_Int[4],
     hash_fold_t$10=Base_Int[5],
     hash$7=Base_Int[6],
     t_of_sexp$19=Base_Int[7],
     sexp_of_t$21=Base_Int[8],
     of_string=Base_Int[9],
     to_string=Base_Int[10],
     equal$2=Base_Int[17],
     compare$15=Base_Int[18],
     min=Base_Int[19],
     max=Base_Int[20],
     ascending=Base_Int[21],
     descending=Base_Int[22],
     between=Base_Int[23],
     clamp_exn=Base_Int[24],
     clamp=Base_Int[25],
     comparator$0=Base_Int[26],
     validate_lbound=Base_Int[27],
     validate_ubound=Base_Int[28],
     validate_bound=Base_Int[29],
     pp=Base_Int[30],
     validate_positive=Base_Int[31],
     validate_non_negative=Base_Int[32],
     validate_negative=Base_Int[33],
     validate_non_positive=Base_Int[34],
     is_positive=Base_Int[35],
     is_non_negative=Base_Int[36],
     is_negative=Base_Int[37],
     is_non_positive=Base_Int[38],
     sign=Base_Int[39],
     Hex=Base_Int[40],
     to_string_hum=Base_Int[41],
     zero=Base_Int[42],
     one=Base_Int[43],
     minus_one=Base_Int[44],
     neg=Base_Int[49],
     rem=Base_Int[54],
     land=Base_Int[56],
     lor=Base_Int[57],
     lxor=Base_Int[58],
     lnot=Base_Int[59],
     lsl=Base_Int[60],
     asr=Base_Int[61],
     succ=Base_Int[62],
     pred=Base_Int[63],
     round=Base_Int[64],
     round_towards_zero=Base_Int[65],
     round_down=Base_Int[66],
     round_up=Base_Int[67],
     round_nearest=Base_Int[68],
     abs=Base_Int[69],
     pow=Base_Int[70],
     bit_and=Base_Int[71],
     bit_or=Base_Int[72],
     bit_xor=Base_Int[73],
     bit_not=Base_Int[74],
     popcount=Base_Int[75],
     shift_left$0=Base_Int[76],
     shift_right$0=Base_Int[77],
     decr=Base_Int[78],
     incr=Base_Int[79],
     of_int32_exn=Base_Int[80],
     to_int32_exn=Base_Int[81],
     of_int64_exn=Base_Int[82],
     to_int64=Base_Int[83],
     of_nativeint_exn=Base_Int[84],
     to_nativeint_exn=Base_Int[85],
     of_float_unchecked=Base_Int[86],
     num_bits=Base_Int[87],
     max_value=Base_Int[88],
     min_value=Base_Int[89],
     lsr=Base_Int[90],
     shift_right_logical=Base_Int[91],
     O=Base_Int[92],
     splittable_random=Splittable_random[3],
     Pre_int=
      [0,
       of_float,
       to_float,
       of_int_exn,
       to_int_exn,
       hash_fold_t$10,
       hash$7,
       t_of_sexp$19,
       sexp_of_t$21,
       of_string,
       to_string,
       Base_Int[11],
       Base_Int[12],
       Base_Int[13],
       Base_Int[14],
       Base_Int[15],
       Base_Int[16],
       equal$2,
       compare$15,
       min,
       max,
       ascending,
       descending,
       between,
       clamp_exn,
       clamp,
       comparator$0,
       validate_lbound,
       validate_ubound,
       validate_bound,
       pp,
       validate_positive,
       validate_non_negative,
       validate_negative,
       validate_non_positive,
       is_positive,
       is_non_negative,
       is_negative,
       is_non_positive,
       sign,
       Hex,
       to_string_hum,
       zero,
       one,
       minus_one,
       Base_Int[45],
       Base_Int[46],
       Base_Int[47],
       Base_Int[48],
       neg,
       Base_Int[50],
       Base_Int[51],
       Base_Int[52],
       Base_Int[53],
       rem,
       Base_Int[55],
       land,
       lor,
       lxor,
       lnot,
       lsl,
       asr,
       succ,
       pred,
       round,
       round_towards_zero,
       round_down,
       round_up,
       round_nearest,
       abs,
       pow,
       bit_and,
       bit_or,
       bit_xor,
       bit_not,
       popcount,
       shift_left$0,
       shift_right$0,
       decr,
       incr,
       of_int32_exn,
       to_int32_exn,
       of_int64_exn,
       to_int64,
       of_nativeint_exn,
       to_nativeint_exn,
       of_float_unchecked,
       num_bits,
       max_value,
       min_value,
       lsr,
       shift_right_logical,
       O,
       splittable_random];
    function check_size(str,size)
     {var _b3c_=caml_call2(_aA_,size,0);
      if(_b3c_)
       {var
         _b3d_=[0,[1,[0,_l0_,[0,caml_call1(sexp_of_t$0,size),0]]],0],
         _b3e_=
          [0,caml_call1(Sexplib0_Sexp_conv[7],cst_size_is_negative),_b3d_];
        return caml_call1
                (_kM_,[1,[0,caml_call1(Sexplib0_Sexp_conv[7],str),_b3e_]])}
      return _b3c_}
    function bounds_error(name,lower_bound,upper_bound,sexp_of_bound)
     {var
       _b2$_=[0,[1,[0,_l1_,[0,caml_call1(sexp_of_bound,upper_bound),0]]],0],
       _b3a_=
        [0,[1,[0,_l2_,[0,caml_call1(sexp_of_bound,lower_bound),0]]],_b2$_],
       _b3b_=[0,caml_call1(Sexplib0_Sexp_conv[7],cst_invalid_bounds),_b3a_];
      return caml_call1
              (_aX_,[1,[0,caml_call1(Sexplib0_Sexp_conv[7],name),_b3b_]])}
    function Make_int_random(M)
     {function bits_to_represent(t)
       {if(caml_call2(M[11],t,M[42]))
         {var t$0=[0,t],n=[0,0];
          for(;;)
           {if(caml_call2(M[14],t$0[1],M[42]))
             {t$0[1] = caml_call2(M[77],t$0[1],1);
              caml_call1(Base_Int[79],n);
              continue}
            return n[1]}}
        throw [0,Assert_failure,_l3_]}
      function min_represented_by_n_bits(n)
       {if(caml_call2(Base_Int[17],n,0))return M[42];
        var _b2__=caml_call1(Base_Int[63],n);
        return caml_call2(M[76],M[43],_b2__)}
      function max_represented_by_n_bits(n)
       {var _b29_=caml_call2(M[76],M[43],n);return caml_call1(M[63],_b29_)}
      var
       For_testing=
        [0,
         bits_to_represent,
         min_represented_by_n_bits,
         max_represented_by_n_bits],
       bits_to_represent$0=For_testing[1],
       min_represented_by_n_bits$0=For_testing[2],
       max_represented_by_n_bits$0=For_testing[3],
       uniform_incl=M[93];
      function log_uniform_incl(state,lo,hi)
       {var
         min_bits=caml_call1(bits_to_represent$0,lo),
         max_bits=caml_call1(bits_to_represent$0,hi),
         bits=caml_call3(Pre_int[93],state,min_bits,max_bits),
         _b26_=caml_call1(max_represented_by_n_bits$0,bits),
         _b27_=caml_call2(M[19],hi,_b26_),
         _b28_=caml_call1(min_represented_by_n_bits$0,bits);
        return caml_call3(uniform_incl,state,caml_call2(M[20],lo,_b28_),_b27_)}
      return [0,uniform_incl,log_uniform_incl,For_testing]}
    var Int_random=Make_int_random(Pre_int);
    function _l4_(param)
     {function _b20_(param)
       {function test(n,expect)
         {var got=caml_call1(Int_random[3][1],n);
          return caml_call8
                  (Ppx_assert_lib_Runtime[3],
                   pos$10,
                   sexp_of_t$0,
                   _t_,
                   0,
                   0,
                   0,
                   expect,
                   got)}
        test(0,0);
        test(1,1);
        test(2,2);
        test(3,2);
        test(4,3);
        test(5,3);
        test(6,3);
        test(7,3);
        test(8,4);
        test(100,7);
        var _b25_=caml_call1(Base_Int[63],Base_Int[87]);
        return test(Base_Int[88],_b25_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_bits_to_represent,
        0,
        cst_src_quickcheck_ml$0,
        99,
        4,
        330,
        _b20_);
      function _b21_(param)
       {function test(n,expect)
         {var got=caml_call1(Int_random[3][2],n);
          return caml_call8
                  (Ppx_assert_lib_Runtime[3],
                   pos$11,
                   sexp_of_t$0,
                   _t_,
                   0,
                   0,
                   0,
                   expect,
                   got)}
        test(0,0);
        test(1,1);
        test(2,2);
        test(3,4);
        test(4,8);
        test(7,64);
        var _b24_=caml_call2(Base_Int[91],Base_Int[89],1);
        return test(caml_call1(Base_Int[63],Base_Int[87]),_b24_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_min_represented_by_n_bits,
        0,
        cst_src_quickcheck_ml$1,
        114,
        4,
        309,
        _b21_);
      function _b22_(param)
       {function test(n,expect)
         {var got=caml_call1(Int_random[3][3],n);
          return caml_call8
                  (Ppx_assert_lib_Runtime[3],
                   pos$12,
                   sexp_of_t$0,
                   _t_,
                   0,
                   0,
                   0,
                   expect,
                   got)}
        test(0,0);
        test(1,1);
        test(2,3);
        test(3,7);
        test(4,15);
        test(7,127);
        var _b23_=Base_Int[88];
        return test(caml_call1(Base_Int[63],Base_Int[87]),_b23_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_max_represented_by_n_bits,
        0,
        cst_src_quickcheck_ml$2,
        125,
        4,
        283,
        _b22_);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst_Make_int_random_bitwise_helpers,
      0,
      cst_src_quickcheck_ml$3,
      94,
      0,
      1065,
      _l4_);
    function create$3(_b2Z_){return _b2Z_}
    function generate(t,size,random)
     {check_size(cst_Quickcheck_Generator_generate,size);
      return caml_call2(t,size,random)}
    function sizes_for_elements(opt,_b2O_,size,random)
     {if(opt)var sth=opt[1],min_len=sth;else var min_len=0;
      if(_b2O_)var sth$0=_b2O_[1],max_len=sth$0;else var max_len=Pre_int[88];
      if(caml_call2(_aB_,min_len,max_len))
       {var
         upper_bound=caml_call2(_ah_,min_len,size),
         max_len$0=
          caml_call2(_aF_,upper_bound,min_len)
           ?caml_call2(_aL_,max_len,upper_bound)
           :max_len,
         len=caml_call3(Int_random[2],random,min_len,max_len$0);
        if(caml_call2(_aD_,len,0))return [0];
        var
         _b2P_=function(param){return 0},
         sizes=caml_call2(include$12[26],len,_b2P_),
         remaining=caml_call2(_ai_,size,caml_call2(_ai_,len,min_len)),
         max_index=caml_call2(_ai_,len,1),
         _b2Q_=1;
        if(! (remaining < 1))
         {var for$0=_b2Q_;
          for(;;)
           {var
             index=caml_call3(Int_random[2],random,0,max_index),
             _b2W_=caml_call2(_ah_,caml_check_bound(sizes,index)[index + 1],1);
            caml_check_bound(sizes,index)[index + 1] = _b2W_;
            var _b2X_=for$0 + 1 | 0;
            if(remaining !== for$0){var for$0=_b2X_;continue}
            break}}
        var _b2S_=caml_call2(_ai_,max_index,1),_b2R_=0;
        if(! (_b2S_ < 0))
         {var i=_b2R_;
          for(;;)
           {var j=caml_call3(Splittable_random[3],random,i,max_index);
            caml_call3(include$12[71],sizes,i,j);
            var _b2V_=i + 1 | 0;
            if(_b2S_ !== i){var i=_b2V_;continue}
            break}}
        var
         _b2T_=caml_call2(_ai_,len,min_len),
         _b2U_=function(_b2Y_){return _b2Y_};
        if
         (caml_call2
           (_aD_,
            caml_call2
             (_ah_,
              caml_call3
               (include$12[16],
                [0,
                 Base_Int[7],
                 Base_Int[8],
                 Base_Int[42],
                 Base_Int[45],
                 Base_Int[46]],
                sizes,
                _b2U_),
              _b2T_),
            size))
         return sizes;
        throw [0,Assert_failure,_l5_]}
      throw [0,Assert_failure,_l6_]}
    function create$4(_b2N_){return _b2N_}
    function observe(t,x,size,hash)
     {check_size(cst_Quickcheck_Observer_observe,size);
      return caml_call3(t,x,size,hash)}
    function of_hash(M)
     {return function(x,param,hash){return caml_call2(M[1],hash,x)}}
    var
     bool=of_hash([0,Base_Bool[2],Base_Bool[3]]),
     char$0=of_hash([0,include$21[2],include$21[3]]);
    function variant2(t1,t2)
     {return function(x,size,hash)
       {if(66 <= x[1])
         {var y=x[2];return observe(t2,y,size,caml_call2(hash_fold_t,hash,2))}
        var y$0=x[2];
        return observe(t1,y$0,size,caml_call2(hash_fold_t,hash,1))}}
    function variant3(t1,t2,t3)
     {return function(x,size,hash)
       {var switcher=x[1] - 65 | 0;
        switch(switcher)
         {case 0:
           var y=x[2];
           return observe(t1,y,size,caml_call2(hash_fold_t,hash,1));
          case 1:
           var y$0=x[2];
           return observe(t2,y$0,size,caml_call2(hash_fold_t,hash,2));
          default:
           var y$1=x[2];
           return observe(t3,y$1,size,caml_call2(hash_fold_t,hash,3))}}}
    function variant4(t1,t2,t3,t4)
     {return function(x,size,hash)
       {var switcher=x[1] - 65 | 0;
        switch(switcher)
         {case 0:
           var y=x[2];
           return observe(t1,y,size,caml_call2(hash_fold_t,hash,1));
          case 1:
           var y$0=x[2];
           return observe(t2,y$0,size,caml_call2(hash_fold_t,hash,2));
          case 2:
           var y$1=x[2];
           return observe(t3,y$1,size,caml_call2(hash_fold_t,hash,3));
          default:
           var y$2=x[2];
           return observe(t4,y$2,size,caml_call2(hash_fold_t,hash,4))}}}
    function variant5(t1,t2,t3,t4,t5)
     {return function(x,size,hash)
       {var switcher=x[1] - 65 | 0;
        switch(switcher)
         {case 0:
           var y=x[2];
           return observe(t1,y,size,caml_call2(hash_fold_t,hash,1));
          case 1:
           var y$0=x[2];
           return observe(t2,y$0,size,caml_call2(hash_fold_t,hash,2));
          case 2:
           var y$1=x[2];
           return observe(t3,y$1,size,caml_call2(hash_fold_t,hash,3));
          case 3:
           var y$2=x[2];
           return observe(t4,y$2,size,caml_call2(hash_fold_t,hash,4));
          default:
           var y$3=x[2];
           return observe(t5,y$3,size,caml_call2(hash_fold_t,hash,5))}}}
    function variant6(t1,t2,t3,t4,t5,t6)
     {return function(x,size,hash)
       {var switcher=x[1] - 65 | 0;
        switch(switcher)
         {case 0:
           var y=x[2];
           return observe(t1,y,size,caml_call2(hash_fold_t,hash,1));
          case 1:
           var y$0=x[2];
           return observe(t2,y$0,size,caml_call2(hash_fold_t,hash,2));
          case 2:
           var y$1=x[2];
           return observe(t3,y$1,size,caml_call2(hash_fold_t,hash,3));
          case 3:
           var y$2=x[2];
           return observe(t4,y$2,size,caml_call2(hash_fold_t,hash,4));
          case 4:
           var y$3=x[2];
           return observe(t5,y$3,size,caml_call2(hash_fold_t,hash,5));
          default:
           var y$4=x[2];
           return observe(t6,y$4,size,caml_call2(hash_fold_t,hash,6))}}}
    function tuple2(t1,t2)
     {return function(param,size,hash)
       {var x2=param[2],x1=param[1];
        return observe(t2,x2,size,observe(t1,x1,size,hash))}}
    function tuple3(t1,t2,t3)
     {return function(param,size,hash)
       {var x3=param[3],x2=param[2],x1=param[1];
        return observe
                (t3,x3,size,observe(t2,x2,size,observe(t1,x1,size,hash)))}}
    function tuple4(t1,t2,t3,t4)
     {return function(param,size,hash)
       {var x4=param[4],x3=param[3],x2=param[2],x1=param[1];
        return observe
                (t4,
                 x4,
                 size,
                 observe
                  (t3,x3,size,observe(t2,x2,size,observe(t1,x1,size,hash))))}}
    function tuple5(t1,t2,t3,t4,t5)
     {return function(param,size,hash)
       {var x5=param[5],x4=param[4],x3=param[3],x2=param[2],x1=param[1];
        return observe
                (t5,
                 x5,
                 size,
                 observe
                  (t4,
                   x4,
                   size,
                   observe
                    (t3,x3,size,observe(t2,x2,size,observe(t1,x1,size,hash)))))}}
    function tuple6(t1,t2,t3,t4,t5,t6)
     {return function(param,size,hash)
       {var
         x6=param[6],
         x5=param[5],
         x4=param[4],
         x3=param[3],
         x2=param[2],
         x1=param[1];
        return observe
                (t6,
                 x6,
                 size,
                 observe
                  (t5,
                   x5,
                   size,
                   observe
                    (t4,
                     x4,
                     size,
                     observe
                      (t3,x3,size,observe(t2,x2,size,observe(t1,x1,size,hash))))))}}
    function unmap(t,f)
     {return function(x,size,hash)
       {return observe(t,caml_call1(f,x),size,hash)}}
    function of_predicate(a,b,f)
     {function _b2M_(x){return caml_call1(f,x)?[0,65,x]:[0,66,x]}
      return unmap(variant2(a,b),_b2M_)}
    function singleton$0(param)
     {return function(param,_b2L_,hash){return hash}}
    function doubleton(f)
     {var _b2K_=singleton$0(0);return of_predicate(singleton$0(0),_b2K_,f)}
    function Make_int_observer(_b2J_)
     {function obs(x,param,hash){return caml_call2(_b2J_[5],hash,x)}
      return [0,obs]}
    var include$22=Make_int_observer(Pre_int);
    function enum$0(param,f){return unmap(include$22[1],f)}
    function of_list$2(list,equal)
     {function f(x)
       {function _b2I_(param,y){return caml_call2(equal,x,y)}
        var match=caml_call2(Base_List[67],list,_b2I_);
        if(match){var match$0=match[1],i=match$0[1];return i}
        return caml_call1
                (_aV_,cst_Quickcheck_Observer_of_list_value_not_found)}
      return enum$0(caml_call1(Base_List[6],list),f)}
    function of_fun(f)
     {return function(x,size,hash)
       {return observe(caml_call1(f,0),x,size,hash)}}
    function fixed_point(f)
     {function self(param){return caml_call1(f,of_fun(self))}
      return of_fun(self)}
    function comparison(compare,eq,lt,gt)
     {function _b2H_(x)
       {var c=caml_call2(compare,x,eq);
        return caml_call2(_aA_,c,0)
                ?[0,65,x]
                :caml_call2(_aE_,c,0)?[0,67,x]:[0,66,x]}
      return unmap(variant3(lt,singleton$0(0),gt),_b2H_)}
    function fn(dom,rng)
     {return function(f,size,hash)
       {var
         _b2F_=caml_call1(Base_Hash[9],hash),
         random=caml_call1(Splittable_random[1][2],_b2F_),
         sizes=sizes_for_elements(0,0,size,random);
        function _b2G_(hash,size)
         {var x=generate(dom,size,random);
          return observe(rng,caml_call1(f,x),size,hash)}
        return caml_call3(include$12[10],sizes,hash,_b2G_)}}
    function return$1(x){return function(param,_b2E_){return x}}
    function custom_map(t,f)
     {return function(size,random)
       {var x=generate(t,size,random);return caml_call1(f,x)}}
    function bind$0(t1,f)
     {return function(size,random)
       {var x=generate(t1,size,random),t2=caml_call1(f,x);
        return generate(t2,size,random)}}
    var
     map$4=[0,-198771759,custom_map],
     include$23=caml_call1(Base_Monad[1],[0,bind$0,return$1,map$4]),
     _l7_=include$23[1],
     _l8_=include$23[2],
     Monad_infix$0=include$23[3],
     bind$1=include$23[4],
     return$2=include$23[5],
     join$0=include$23[7],
     ignore_m$0=include$23[8],
     Let_syntax$0=include$23[12];
    function apply(t1,t2)
     {return function(size,random)
       {var f=generate(t1,size,random),x=generate(t2,size,random);
        return caml_call1(f,x)}}
    var
     map$5=[0,-198771759,custom_map],
     include$24=caml_call1(Base_Applicative[4],[0,return$2,apply,map$5]),
     return$3=include$24[1],
     _l9_=include$24[2],
     map$6=include$24[3],
     _l__=include$24[4],
     _l$_=include$24[5],
     _ma_=include$24[6],
     _mb_=include$24[7],
     _mc_=include$24[8],
     both=include$24[9],
     _md_=include$24[10],
     _me_=include$24[11],
     _mf_=include$24[12],
     _mg_=include$24[13];
    function size(size,param){return size}
    function with_size(t,size)
     {return function(param,random){return generate(t,size,random)}}
    var singleton$1=Let_syntax$0[1];
    function filter_map$1(t,f)
     {function loop(size,random)
       {var size$0=size;
        for(;;)
         {var x=generate(t,size$0,random),match=caml_call1(f,x);
          if(match){var y=match[1];return y}
          var size$1=caml_call2(_ah_,size$0,1),size$0=size$1;
          continue}}
      return loop}
    function filter$1(t,f)
     {return filter_map$1(t,function(x){return caml_call1(f,x)?[0,x]:0})}
    function get$0(_b2D_,_b2C_)
     {return caml_check_bound(_b2D_,_b2C_)[_b2C_ + 1]}
    var
     length$3=include$12[7],
     Binary_search_array=caml_call1(include$5[2],[0,get$0,length$3]);
    function weighted_union(alist_by_weight)
     {if(caml_call1(Base_List[7],alist_by_weight))
       caml_call1
        (_kM_,
         caml_call1
          (Sexplib0_Sexp_conv[7],
           cst_Quickcheck_Generator_weighted_union_empty_list));
      var
       match=caml_call1(Base_List[88],alist_by_weight),
       values=match[2],
       weights=match[1],
       value_array=caml_call1(include$12[37],values);
      function _b2z_(param){return 0}
      var
       _b2A_=caml_call1(include$12[7],value_array),
       array=caml_call2(include$12[26],_b2A_,_b2z_);
      function _b2B_(index,acc,weight)
       {var cumulative=caml_call2(_aM_,acc,weight);
        runtime.caml_array_set(array,index,cumulative);
        return cumulative}
      var sum=caml_call3(Base_List[95],weights,0,_b2B_);
      return caml_call1
              (join$0,
               function(param,random)
                {var
                  choice=caml_call3(Splittable_random[8],random,0,sum),
                  match=
                   caml_call6
                    (Binary_search_array[1],
                     0,
                     0,
                     array,
                     compare$14,
                     926943384,
                     choice);
                 if(match)
                  {var index=match[1];
                   return caml_check_bound(value_array,index)[index + 1]}
                 throw [0,Assert_failure,_mh_]})}
    function doubleton$0(x,y)
     {return function(param,random)
       {return caml_call1(Splittable_random[2],random)?x:y}}
    var bool$0=doubleton$0(1,0);
    function of_fun$0(f)
     {return function(size,random)
       {return generate(caml_call1(f,0),size,random)}}
    function of_sequence(p,seq)
     {var _b2u_=p <= 0?1:0,_b2v_=_b2u_ || (1 < p?1:0);
      if(_b2v_)caml_call1(_aV_,caml_call2(_eJ_,_mi_,p));
      function _b2w_(param)
       {return caml_call1(_aV_,cst_Generator_of_sequence_ran_out_of_values)}
      return caml_call4
              (delayed_fold,
               seq,
               0,
               function(param,x,k)
                {var
                  _b2x_=of_fun$0(k),
                  _b2y_=[0,[0,caml_call2(_aN_,1,p),_b2x_],0];
                 return weighted_union
                         ([0,[0,p,caml_call1(singleton$1,x)],_b2y_])},
               _b2w_)}
    function bounded_geometric(p,maximum,init)
     {if(caml_call2(_aD_,init,maximum))return caml_call1(singleton$1,maximum);
      var
       _b2r_=0,
       _b2s_=
        of_fun$0
         (function(param)
           {return bounded_geometric(p,maximum,caml_call2(_ah_,init,1))}),
       _b2t_=[0,[0,caml_call2(_aN_,1,p),_b2s_],_b2r_];
      return weighted_union([0,[0,p,caml_call1(singleton$1,init)],_b2t_])}
    function geometric(p,init){return bounded_geometric(p,Pre_int[88],init)}
    function small_non_negative_int(size,random)
     {return caml_call3(Splittable_random[3],random,0,size)}
    function small_positive_int(size,random)
     {var _b2q_=caml_call2(_ah_,size,1);
      return caml_call3(Splittable_random[3],random,1,_b2q_)}
    function Make_int_generator(M)
     {var Random=Make_int_random(M);
      function gen_uniform_incl(lo,hi)
       {if(caml_call2(M[14],lo,hi))
         bounds_error(cst_Quickcheck_Make_int_gen_uniform_incl,lo,hi,M[8]);
        return function(param,random)
         {return caml_call3(Random[1],random,lo,hi)}}
      function gen_log_uniform_incl(lo,hi)
       {var
         _b2o_=caml_call2(M[15],lo,M[42]),
         _b2p_=_b2o_ || caml_call2(M[14],lo,hi);
        if(_b2p_)
         bounds_error(cst_Quickcheck_Make_int_gen_log_uniform_incl,lo,hi,M[8]);
        return function(param,random)
         {return caml_call3(Random[2],random,lo,hi)}}
      function gen_incl(lower_bound,upper_bound)
       {var
         _b2m_=[0,[0,0.9,gen_uniform_incl(lower_bound,upper_bound)],0],
         _b2n_=[0,[0,0.05,caml_call1(Let_syntax$0[1],upper_bound)],_b2m_];
        return weighted_union
                ([0,[0,0.05,caml_call1(Let_syntax$0[1],lower_bound)],_b2n_])}
      function gen_log_incl(lower_bound,upper_bound)
       {var
         _b2k_=[0,[0,0.9,gen_log_uniform_incl(lower_bound,upper_bound)],0],
         _b2l_=[0,[0,0.05,caml_call1(Let_syntax$0[1],upper_bound)],_b2k_];
        return weighted_union
                ([0,[0,0.05,caml_call1(Let_syntax$0[1],lower_bound)],_b2l_])}
      var
       let_syntax_007=doubleton$0(1,0),
       let_syntax_008=gen_log_incl(M[42],M[88]);
      function _b2i_(param)
       {var bits=param[2],sign=param[1];
        return sign?caml_call1(M[74],bits):bits}
      var
       _b2j_=caml_call2(Let_syntax$0[4][4],let_syntax_007,let_syntax_008),
       gen=caml_call2(Let_syntax$0[4][3],_b2j_,_b2i_);
      return [0,
              gen,
              gen_incl,
              gen_uniform_incl,
              gen_log_incl,
              gen_log_uniform_incl]}
    var For_int=Make_int_generator(Pre_int);
    function of_list$3(list)
     {var array=caml_call1(include$12[37],list);
      function _b2g_(index){return caml_check_bound(array,index)[index + 1]}
      var _b2h_=caml_call2(_ai_,caml_call1(include$12[7],array),1);
      return caml_call2(map$6,caml_call2(For_int[3],0,_b2h_),_b2g_)}
    function union(list){return caml_call1(join$0,of_list$3(list))}
    function recursive(f)
     {var
       r=function _b2f_(_b2d_,_b2e_){return _b2f_.fun(_b2d_,_b2e_)},
       lazy_t=[];
      caml_update_dummy
       (r,
        function(size,random)
         {var
           _b2b_=caml_obj_tag(lazy_t),
           _b2c_=
            250 === _b2b_
             ?lazy_t[1]
             :246 === _b2b_?caml_call1(CamlinternalLazy[2],lazy_t):lazy_t;
          return generate(_b2c_,size,random)});
      caml_update_dummy(lazy_t,[246,function(_b2a_){return caml_call1(f,r)}]);
      var _b1$_=caml_obj_tag(lazy_t);
      return 250 === _b1$_
              ?lazy_t[1]
              :246 === _b1$_?caml_call1(CamlinternalLazy[2],lazy_t):lazy_t}
    function weighted_recursive_union(nonrec_list,f)
     {return recursive
              (function(self)
                {var nonrec_gen=weighted_union(nonrec_list);
                 function _b17_(param)
                  {var t=param[2],w=param[1];
                   function _b1__(n){return with_size(t,caml_call2(_ai_,n,1))}
                   return [0,w,caml_call2(Let_syntax$0[4][2],size,_b1__)]}
                 var
                  _b18_=caml_call1(f,self),
                  rec_list=caml_call2(Base_List[73],_b18_,_b17_),
                  rec_gen=
                   weighted_union(caml_call2(_ag_,nonrec_list,rec_list));
                 function _b19_(param){return 0 === param?nonrec_gen:rec_gen}
                 return caml_call2(Let_syntax$0[4][2],size,_b19_)})}
    function recursive_union(nonrec_list,f)
     {function weighted(list)
       {function _b16_(t){return [0,1,t]}
        return caml_call2(Base_List[73],list,_b16_)}
      function _b15_(self){return weighted(caml_call1(f,self))}
      return weighted_recursive_union(weighted(nonrec_list),_b15_)}
    function variant2$0(a,b)
     {var
       _b13_=0,
       _b14_=[0,caml_call2(map$6,b,function(b){return [0,66,b]}),_b13_];
      return union([0,caml_call2(map$6,a,function(a){return [0,65,a]}),_b14_])}
    function variant3$0(a,b,c)
     {var
       _b10_=0,
       _b11_=[0,caml_call2(map$6,c,function(c){return [0,67,c]}),_b10_],
       _b12_=[0,caml_call2(map$6,b,function(b){return [0,66,b]}),_b11_];
      return union([0,caml_call2(map$6,a,function(a){return [0,65,a]}),_b12_])}
    function variant4$0(a,b,c,d)
     {var
       _b1W_=0,
       _b1X_=[0,caml_call2(map$6,d,function(d){return [0,68,d]}),_b1W_],
       _b1Y_=[0,caml_call2(map$6,c,function(c){return [0,67,c]}),_b1X_],
       _b1Z_=[0,caml_call2(map$6,b,function(b){return [0,66,b]}),_b1Y_];
      return union([0,caml_call2(map$6,a,function(a){return [0,65,a]}),_b1Z_])}
    function variant5$0(a,b,c,d,e)
     {var
       _b1R_=0,
       _b1S_=[0,caml_call2(map$6,e,function(e){return [0,69,e]}),_b1R_],
       _b1T_=[0,caml_call2(map$6,d,function(d){return [0,68,d]}),_b1S_],
       _b1U_=[0,caml_call2(map$6,c,function(c){return [0,67,c]}),_b1T_],
       _b1V_=[0,caml_call2(map$6,b,function(b){return [0,66,b]}),_b1U_];
      return union([0,caml_call2(map$6,a,function(a){return [0,65,a]}),_b1V_])}
    function variant6$0(a,b,c,d,e,f)
     {var
       _b1L_=0,
       _b1M_=[0,caml_call2(map$6,f,function(f){return [0,70,f]}),_b1L_],
       _b1N_=[0,caml_call2(map$6,e,function(e){return [0,69,e]}),_b1M_],
       _b1O_=[0,caml_call2(map$6,d,function(d){return [0,68,d]}),_b1N_],
       _b1P_=[0,caml_call2(map$6,c,function(c){return [0,67,c]}),_b1O_],
       _b1Q_=[0,caml_call2(map$6,b,function(b){return [0,66,b]}),_b1P_];
      return union([0,caml_call2(map$6,a,function(a){return [0,65,a]}),_b1Q_])}
    function tuple2$0(t1,t2)
     {function _b1J_(x1)
       {function _b1K_(x2){return [0,x1,x2]}
        return caml_call2(Let_syntax$0[3],t2,_b1K_)}
      return caml_call2(Let_syntax$0[2],t1,_b1J_)}
    function tuple3$0(t1,t2,t3)
     {function _b1G_(x1)
       {function _b1H_(x2)
         {function _b1I_(x3){return [0,x1,x2,x3]}
          return caml_call2(Let_syntax$0[3],t3,_b1I_)}
        return caml_call2(Let_syntax$0[2],t2,_b1H_)}
      return caml_call2(Let_syntax$0[2],t1,_b1G_)}
    function tuple4$0(t1,t2,t3,t4)
     {function _b1C_(x1)
       {function _b1D_(x2)
         {function _b1E_(x3)
           {function _b1F_(x4){return [0,x1,x2,x3,x4]}
            return caml_call2(Let_syntax$0[3],t4,_b1F_)}
          return caml_call2(Let_syntax$0[2],t3,_b1E_)}
        return caml_call2(Let_syntax$0[2],t2,_b1D_)}
      return caml_call2(Let_syntax$0[2],t1,_b1C_)}
    function tuple5$0(t1,t2,t3,t4,t5)
     {function _b1x_(x1)
       {function _b1y_(x2)
         {function _b1z_(x3)
           {function _b1A_(x4)
             {function _b1B_(x5){return [0,x1,x2,x3,x4,x5]}
              return caml_call2(Let_syntax$0[3],t5,_b1B_)}
            return caml_call2(Let_syntax$0[2],t4,_b1A_)}
          return caml_call2(Let_syntax$0[2],t3,_b1z_)}
        return caml_call2(Let_syntax$0[2],t2,_b1y_)}
      return caml_call2(Let_syntax$0[2],t1,_b1x_)}
    function tuple6$0(t1,t2,t3,t4,t5,t6)
     {function _b1r_(x1)
       {function _b1s_(x2)
         {function _b1t_(x3)
           {function _b1u_(x4)
             {function _b1v_(x5)
               {function _b1w_(x6){return [0,x1,x2,x3,x4,x5,x6]}
                return caml_call2(Let_syntax$0[3],t6,_b1w_)}
              return caml_call2(Let_syntax$0[2],t5,_b1v_)}
            return caml_call2(Let_syntax$0[2],t4,_b1u_)}
          return caml_call2(Let_syntax$0[2],t3,_b1t_)}
        return caml_call2(Let_syntax$0[2],t2,_b1s_)}
      return caml_call2(Let_syntax$0[2],t1,_b1r_)}
    function list_gen(min_len,max_len,elem_gen)
     {return function(size,random)
       {var sizes=sizes_for_elements(min_len,max_len,size,random);
        function _b1p_(i)
         {return generate(elem_gen,caml_check_bound(sizes,i)[i + 1],random)}
        var _b1q_=caml_call1(include$12[7],sizes);
        return caml_call2(Base_List[117],_b1q_,_b1p_)}}
    function list(elem_gen){return list_gen(0,0,elem_gen)}
    function list_non_empty(elem_gen){return list_gen(_mj_,0,elem_gen)}
    function list_with_length(len,elem_gen)
     {return list_gen([0,len],[0,len],elem_gen)}
    function fn$0(dom,rng)
     {return function(size,random)
       {var random$0=caml_call1(Splittable_random[1][5],random);
        return function(x)
         {var
           hash=observe(dom,x,size,caml_call1(Base_Hash[7],0)),
           random=caml_call1(Splittable_random[1][4],random$0),
           _b1o_=caml_call1(Base_Hash[9],hash);
          caml_call2(Splittable_random[1][3],random,_b1o_);
          return generate(rng,size,random)}}}
    function fn2(dom1,dom2,rng)
     {function _b1m_(f,x1,x2){return caml_call1(f,[0,x1,x2])}
      var _b1n_=fn$0(tuple2(dom1,dom2),rng);
      return caml_call2(Let_syntax$0[3],_b1n_,_b1m_)}
    function fn3(dom1,dom2,dom3,rng)
     {function _b1k_(f,x1,x2,x3){return caml_call1(f,[0,x1,x2,x3])}
      var _b1l_=fn$0(tuple3(dom1,dom2,dom3),rng);
      return caml_call2(Let_syntax$0[3],_b1l_,_b1k_)}
    function fn4(dom1,dom2,dom3,dom4,rng)
     {function _b1i_(f,x1,x2,x3,x4){return caml_call1(f,[0,x1,x2,x3,x4])}
      var _b1j_=fn$0(tuple4(dom1,dom2,dom3,dom4),rng);
      return caml_call2(Let_syntax$0[3],_b1j_,_b1i_)}
    function fn5(dom1,dom2,dom3,dom4,dom5,rng)
     {function _b1g_(f,x1,x2,x3,x4,x5)
       {return caml_call1(f,[0,x1,x2,x3,x4,x5])}
      var _b1h_=fn$0(tuple5(dom1,dom2,dom3,dom4,dom5),rng);
      return caml_call2(Let_syntax$0[3],_b1h_,_b1g_)}
    function fn6(dom1,dom2,dom3,dom4,dom5,dom6,rng)
     {function _b1e_(f,x1,x2,x3,x4,x5,x6)
       {return caml_call1(f,[0,x1,x2,x3,x4,x5,x6])}
      var _b1f_=fn$0(tuple6(dom1,dom2,dom3,dom4,dom5,dom6),rng);
      return caml_call2(Let_syntax$0[3],_b1f_,_b1e_)}
    function compare_fn(dom)
     {function _b1b_(get_index,x,y)
       {var _b1d_=caml_call1(get_index,y);
        return caml_call2(_t_,caml_call1(get_index,x),_b1d_)}
      var _b1c_=fn$0(dom,For_int[1]);
      return caml_call2(Let_syntax$0[3],_b1c_,_b1b_)}
    function equal_fn(dom)
     {function _b0$_(cmp,x,y){return 0 === caml_call2(cmp,x,y)?1:0}
      var _b1a_=compare_fn(dom);
      return caml_call2(Let_syntax$0[3],_b1a_,_b0$_)}
    function char_range(lo,hi)
     {return function(param,random)
       {var
         _b08_=caml_call1(include$21[29],hi),
         _b09_=caml_call1(include$21[29],lo),
         _b0__=caml_call3(Splittable_random[3],random,_b09_,_b08_);
        return caml_call1(include$21[32],_b0__)}}
    var
     char_uppercase=char_range(65,90),
     char_lowercase=char_range(97,122),
     char_digit=char_range(48,57),
     char_print_uniform=char_range(32,126),
     char_uniform=char_range(include$21[45],include$21[46]),
     char_alpha=union([0,char_lowercase,[0,char_uppercase,0]]),
     char_alphanum=
      weighted_union([0,[0,52,char_alpha],[0,[0,10,char_digit],0]]),
     char_whitespace=
      of_list$3(caml_call2(Base_List[53],include$21[1],include$21[42])),
     char_print=
      weighted_union([0,[0,10,char_alphanum],[0,[0,1,char_print_uniform],0]]),
     char$1=weighted_union([0,[0,10,char_print],[0,[0,1,char_uniform],0]]);
    function shrink(t){return caml_call1(Base_Staged[2],t)}
    function create$5(t){return caml_call1(Base_Staged[1],t)}
    function empty$1(param){return create$5(function(param){return empty})}
    var bool$1=empty$1(0),char$2=empty$1(0);
    function map$7(t,f,f_inverse)
     {return create$5
              (function(b)
                {var _b07_=caml_call1(f_inverse,b);
                 return caml_call2(map$0,caml_call1(shrink(t),_b07_),f)})}
    function singleton$2(equal,min)
     {return create$5
              (function(v)
                {return caml_call2(equal,min,v)
                         ?empty
                         :caml_call1(singleton,min)})}
    function _mk_(param)
     {var
       _b02_=42,
       t=singleton$2(function(_b06_,_b05_){return _b06_ === _b05_?1:0},_b02_);
      function _b03_(param)
       {var
         got=caml_call1(to_list$0,caml_call1(shrink(t),2)),
         sexpifier=caml_call1(_I_,sexp_of_t$0),
         equal=0,
         message=0,
         here=0;
        function comparator(a_011,b_012)
         {return caml_call3(_F_,_t_,a_011,b_012)}
        return caml_call8
                (Ppx_assert_lib_Runtime[3],
                 pos$13,
                 sexpifier,
                 comparator,
                 here,
                 message,
                 equal,
                 expect,
                 got)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_singleton_produces_values,
        0,
        cst_src_quickcheck_ml$4,
        804,
        8,
        190,
        _b03_);
      function _b04_(param)
       {var
         got=caml_call1(to_list$0,caml_call1(shrink(t),42)),
         sexpifier=caml_call1(_I_,sexp_of_t$0),
         expect=0,
         equal=0,
         message=0,
         here=0;
        function comparator(a_015,b_016)
         {return caml_call3(_F_,_t_,a_015,b_016)}
        return caml_call8
                (Ppx_assert_lib_Runtime[3],
                 pos$14,
                 sexpifier,
                 comparator,
                 here,
                 message,
                 equal,
                 expect,
                 got)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_singleton_doesn_t_produce_the_input,
        0,
        cst_src_quickcheck_ml$5,
        809,
        8,
        199,
        _b04_);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst_singleton,
      0,
      cst_src_quickcheck_ml$6,
      800,
      4,
      501,
      _mk_);
    var
     _ml_=0,
     t0=singleton$2(function(_b01_,_b00_){return _b01_ === _b00_?1:0},_ml_),
     _mm_=1,
     t1=singleton$2(function(_b0Z_,_b0Y_){return _b0Z_ === _b0Y_?1:0},_mm_),
     _mn_=2,
     t2=singleton$2(function(_b0X_,_b0W_){return _b0X_ === _b0W_?1:0},_mn_),
     _mo_=3,
     t3=singleton$2(function(_b0V_,_b0U_){return _b0V_ === _b0U_?1:0},_mo_),
     _mp_=4,
     t4=singleton$2(function(_b0T_,_b0S_){return _b0T_ === _b0S_?1:0},_mp_),
     _mq_=5,
     t5=singleton$2(function(_b0R_,_b0Q_){return _b0R_ === _b0Q_?1:0},_mq_);
    function tuple2$1(t1,t2)
     {function shrinker(param)
       {var v2=param[2],v1=param[1];
        function _b0O_(x){return [0,x,v2]}
        var v1_seq=caml_call2(map$0,caml_call1(shrink(t1),v1),_b0O_);
        function _b0P_(x){return [0,v1,x]}
        var v2_seq=caml_call2(map$0,caml_call1(shrink(t2),v2),_b0P_);
        return caml_call1(round_robin,[0,v1_seq,[0,v2_seq,0]])}
      return create$5(shrinker)}
    function tuple3$1(t1,t2,t3)
     {function shrinker(param)
       {var v3=param[3],v2=param[2],v1=param[1];
        function _b0L_(x){return [0,x,v2,v3]}
        var v1_seq=caml_call2(map$0,caml_call1(shrink(t1),v1),_b0L_);
        function _b0M_(x){return [0,v1,x,v3]}
        var v2_seq=caml_call2(map$0,caml_call1(shrink(t2),v2),_b0M_);
        function _b0N_(x){return [0,v1,v2,x]}
        var v3_seq=caml_call2(map$0,caml_call1(shrink(t3),v3),_b0N_);
        return caml_call1(round_robin,[0,v1_seq,[0,v2_seq,[0,v3_seq,0]]])}
      return create$5(shrinker)}
    function tuple4$1(t1,t2,t3,t4)
     {function shrinker(param)
       {var v4=param[4],v3=param[3],v2=param[2],v1=param[1];
        function _b0H_(x){return [0,x,v2,v3,v4]}
        var v1_seq=caml_call2(map$0,caml_call1(shrink(t1),v1),_b0H_);
        function _b0I_(x){return [0,v1,x,v3,v4]}
        var v2_seq=caml_call2(map$0,caml_call1(shrink(t2),v2),_b0I_);
        function _b0J_(x){return [0,v1,v2,x,v4]}
        var v3_seq=caml_call2(map$0,caml_call1(shrink(t3),v3),_b0J_);
        function _b0K_(x){return [0,v1,v2,v3,x]}
        var v4_seq=caml_call2(map$0,caml_call1(shrink(t4),v4),_b0K_);
        return caml_call1
                (round_robin,[0,v1_seq,[0,v2_seq,[0,v3_seq,[0,v4_seq,0]]]])}
      return create$5(shrinker)}
    function tuple5$1(t1,t2,t3,t4,t5)
     {function shrinker(param)
       {var v5=param[5],v4=param[4],v3=param[3],v2=param[2],v1=param[1];
        function _b0C_(x){return [0,x,v2,v3,v4,v5]}
        var v1_seq=caml_call2(map$0,caml_call1(shrink(t1),v1),_b0C_);
        function _b0D_(x){return [0,v1,x,v3,v4,v5]}
        var v2_seq=caml_call2(map$0,caml_call1(shrink(t2),v2),_b0D_);
        function _b0E_(x){return [0,v1,v2,x,v4,v5]}
        var v3_seq=caml_call2(map$0,caml_call1(shrink(t3),v3),_b0E_);
        function _b0F_(x){return [0,v1,v2,v3,x,v5]}
        var v4_seq=caml_call2(map$0,caml_call1(shrink(t4),v4),_b0F_);
        function _b0G_(x){return [0,v1,v2,v3,v4,x]}
        var v5_seq=caml_call2(map$0,caml_call1(shrink(t5),v5),_b0G_);
        return caml_call1
                (round_robin,
                 [0,v1_seq,[0,v2_seq,[0,v3_seq,[0,v4_seq,[0,v5_seq,0]]]]])}
      return create$5(shrinker)}
    function tuple6$1(t1,t2,t3,t4,t5,t6)
     {function shrinker(param)
       {var
         v6=param[6],
         v5=param[5],
         v4=param[4],
         v3=param[3],
         v2=param[2],
         v1=param[1];
        function _b0w_(x){return [0,x,v2,v3,v4,v5,v6]}
        var v1_seq=caml_call2(map$0,caml_call1(shrink(t1),v1),_b0w_);
        function _b0x_(x){return [0,v1,x,v3,v4,v5,v6]}
        var v2_seq=caml_call2(map$0,caml_call1(shrink(t2),v2),_b0x_);
        function _b0y_(x){return [0,v1,v2,x,v4,v5,v6]}
        var v3_seq=caml_call2(map$0,caml_call1(shrink(t3),v3),_b0y_);
        function _b0z_(x){return [0,v1,v2,v3,x,v5,v6]}
        var v4_seq=caml_call2(map$0,caml_call1(shrink(t4),v4),_b0z_);
        function _b0A_(x){return [0,v1,v2,v3,v4,x,v6]}
        var v5_seq=caml_call2(map$0,caml_call1(shrink(t5),v5),_b0A_);
        function _b0B_(x){return [0,v1,v2,v3,v4,v5,x]}
        var v6_seq=caml_call2(map$0,caml_call1(shrink(t6),v6),_b0B_);
        return caml_call1
                (round_robin,
                 [0,
                  v1_seq,
                  [0,v2_seq,[0,v3_seq,[0,v4_seq,[0,v5_seq,[0,v6_seq,0]]]]]])}
      return create$5(shrinker)}
    function _mr_(param)
     {function _b0m_(param)
       {function _b0v_(a_019,b_020)
         {var
           t_022=a_019[2],
           t_021=a_019[1],
           t_024=b_020[2],
           t_023=b_020[1],
           n=caml_call2(_t_,t_021,t_023);
          return 0 === n?caml_call2(_t_,t_022,t_024):n}
        var
         sort=caml_call1(Base_List[60],_b0v_),
         expect=caml_call1(sort,_ms_),
         got=
          caml_call1
           (sort,
            caml_call1(to_list$0,caml_call1(shrink(tuple2$1(t0,t1)),_mt_))),
         equal=0,
         message=0,
         here=0,
         sexpifier=
          caml_call1
           (_I_,
            function(param)
             {var
               v1=param[2],
               v0=param[1],
               v0$0=caml_call1(sexp_of_t$0,v0),
               v1$0=caml_call1(sexp_of_t$0,v1);
              return [1,[0,v0$0,[0,v1$0,0]]]});
        function comparator(a_025,b_026)
         {return caml_call3
                  (_F_,
                   function(a_027,b_028)
                    {var
                      t_030=a_027[2],
                      t_029=a_027[1],
                      t_032=b_028[2],
                      t_031=b_028[1],
                      n=caml_call2(_t_,t_029,t_031);
                     return 0 === n?caml_call2(_t_,t_030,t_032):n},
                   a_025,
                   b_026)}
        return caml_call8
                (Ppx_assert_lib_Runtime[3],
                 pos$15,
                 sexpifier,
                 comparator,
                 here,
                 message,
                 equal,
                 expect,
                 got)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_tuple2_shrinker,
        0,
        cst_src_quickcheck_ml$7,
        878,
        6,
        345,
        _b0m_);
      function _b0n_(param)
       {function _b0u_(a_033,b_034)
         {var
           t_037=a_033[3],
           t_036=a_033[2],
           t_035=a_033[1],
           t_040=b_034[3],
           t_039=b_034[2],
           t_038=b_034[1],
           n=caml_call2(_t_,t_035,t_038);
          if(0 === n)
           {var n$0=caml_call2(_t_,t_036,t_039);
            return 0 === n$0?caml_call2(_t_,t_037,t_040):n$0}
          return n}
        var
         sort=caml_call1(Base_List[60],_b0u_),
         expect=caml_call1(sort,_mu_),
         got=
          caml_call1
           (sort,
            caml_call1(to_list$0,caml_call1(shrink(tuple3$1(t0,t1,t2)),_mv_))),
         equal=0,
         message=0,
         here=0,
         sexpifier=
          caml_call1
           (_I_,
            function(param)
             {var
               v2=param[3],
               v1=param[2],
               v0=param[1],
               v0$0=caml_call1(sexp_of_t$0,v0),
               v1$0=caml_call1(sexp_of_t$0,v1),
               v2$0=caml_call1(sexp_of_t$0,v2);
              return [1,[0,v0$0,[0,v1$0,[0,v2$0,0]]]]});
        function comparator(a_041,b_042)
         {return caml_call3
                  (_F_,
                   function(a_043,b_044)
                    {var
                      t_047=a_043[3],
                      t_046=a_043[2],
                      t_045=a_043[1],
                      t_050=b_044[3],
                      t_049=b_044[2],
                      t_048=b_044[1],
                      n=caml_call2(_t_,t_045,t_048);
                     if(0 === n)
                      {var n$0=caml_call2(_t_,t_046,t_049);
                       return 0 === n$0?caml_call2(_t_,t_047,t_050):n$0}
                     return n},
                   a_041,
                   b_042)}
        return caml_call8
                (Ppx_assert_lib_Runtime[3],
                 pos$16,
                 sexpifier,
                 comparator,
                 here,
                 message,
                 equal,
                 expect,
                 got)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_tuple3_shrinker,
        0,
        cst_src_quickcheck_ml$8,
        890,
        6,
        343,
        _b0n_);
      function _b0o_(param)
       {function _b0t_(a_051,b_052)
         {var
           t_056=a_051[4],
           t_055=a_051[3],
           t_054=a_051[2],
           t_053=a_051[1],
           t_060=b_052[4],
           t_059=b_052[3],
           t_058=b_052[2],
           t_057=b_052[1],
           n=caml_call2(_t_,t_053,t_057);
          if(0 === n)
           {var n$0=caml_call2(_t_,t_054,t_058);
            if(0 === n$0)
             {var n$1=caml_call2(_t_,t_055,t_059);
              return 0 === n$1?caml_call2(_t_,t_056,t_060):n$1}
            return n$0}
          return n}
        var
         sort=caml_call1(Base_List[60],_b0t_),
         expect=caml_call1(sort,_mw_),
         got=
          caml_call1
           (sort,
            caml_call1
             (to_list$0,caml_call1(shrink(tuple4$1(t0,t1,t2,t3)),_mx_))),
         equal=0,
         message=0,
         here=0,
         sexpifier=
          caml_call1
           (_I_,
            function(param)
             {var
               v3=param[4],
               v2=param[3],
               v1=param[2],
               v0=param[1],
               v0$0=caml_call1(sexp_of_t$0,v0),
               v1$0=caml_call1(sexp_of_t$0,v1),
               v2$0=caml_call1(sexp_of_t$0,v2),
               v3$0=caml_call1(sexp_of_t$0,v3);
              return [1,[0,v0$0,[0,v1$0,[0,v2$0,[0,v3$0,0]]]]]});
        function comparator(a_061,b_062)
         {return caml_call3
                  (_F_,
                   function(a_063,b_064)
                    {var
                      t_068=a_063[4],
                      t_067=a_063[3],
                      t_066=a_063[2],
                      t_065=a_063[1],
                      t_072=b_064[4],
                      t_071=b_064[3],
                      t_070=b_064[2],
                      t_069=b_064[1],
                      n=caml_call2(_t_,t_065,t_069);
                     if(0 === n)
                      {var n$0=caml_call2(_t_,t_066,t_070);
                       if(0 === n$0)
                        {var n$1=caml_call2(_t_,t_067,t_071);
                         return 0 === n$1?caml_call2(_t_,t_068,t_072):n$1}
                       return n$0}
                     return n},
                   a_061,
                   b_062)}
        return caml_call8
                (Ppx_assert_lib_Runtime[3],
                 pos$17,
                 sexpifier,
                 comparator,
                 here,
                 message,
                 equal,
                 expect,
                 got)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_tuple4_shrinker,
        0,
        cst_src_quickcheck_ml$9,
        899,
        6,
        403,
        _b0o_);
      function _b0p_(param)
       {function _b0s_(a_073,b_074)
         {var
           t_079=a_073[5],
           t_078=a_073[4],
           t_077=a_073[3],
           t_076=a_073[2],
           t_075=a_073[1],
           t_084=b_074[5],
           t_083=b_074[4],
           t_082=b_074[3],
           t_081=b_074[2],
           t_080=b_074[1],
           n=caml_call2(_t_,t_075,t_080);
          if(0 === n)
           {var n$0=caml_call2(_t_,t_076,t_081);
            if(0 === n$0)
             {var n$1=caml_call2(_t_,t_077,t_082);
              if(0 === n$1)
               {var n$2=caml_call2(_t_,t_078,t_083);
                return 0 === n$2?caml_call2(_t_,t_079,t_084):n$2}
              return n$1}
            return n$0}
          return n}
        var
         sort=caml_call1(Base_List[60],_b0s_),
         expect=caml_call1(sort,_my_),
         got=
          caml_call1
           (sort,
            caml_call1
             (to_list$0,caml_call1(shrink(tuple5$1(t0,t1,t2,t3,t4)),_mz_))),
         equal=0,
         message=0,
         here=0,
         sexpifier=
          caml_call1
           (_I_,
            function(param)
             {var
               v4=param[5],
               v3=param[4],
               v2=param[3],
               v1=param[2],
               v0=param[1],
               v0$0=caml_call1(sexp_of_t$0,v0),
               v1$0=caml_call1(sexp_of_t$0,v1),
               v2$0=caml_call1(sexp_of_t$0,v2),
               v3$0=caml_call1(sexp_of_t$0,v3),
               v4$0=caml_call1(sexp_of_t$0,v4);
              return [1,[0,v0$0,[0,v1$0,[0,v2$0,[0,v3$0,[0,v4$0,0]]]]]]});
        function comparator(a_085,b_086)
         {return caml_call3
                  (_F_,
                   function(a_087,b_088)
                    {var
                      t_093=a_087[5],
                      t_092=a_087[4],
                      t_091=a_087[3],
                      t_090=a_087[2],
                      t_089=a_087[1],
                      t_098=b_088[5],
                      t_097=b_088[4],
                      t_096=b_088[3],
                      t_095=b_088[2],
                      t_094=b_088[1],
                      n=caml_call2(_t_,t_089,t_094);
                     if(0 === n)
                      {var n$0=caml_call2(_t_,t_090,t_095);
                       if(0 === n$0)
                        {var n$1=caml_call2(_t_,t_091,t_096);
                         if(0 === n$1)
                          {var n$2=caml_call2(_t_,t_092,t_097);
                           return 0 === n$2?caml_call2(_t_,t_093,t_098):n$2}
                         return n$1}
                       return n$0}
                     return n},
                   a_085,
                   b_086)}
        return caml_call8
                (Ppx_assert_lib_Runtime[3],
                 pos$18,
                 sexpifier,
                 comparator,
                 here,
                 message,
                 equal,
                 expect,
                 got)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_tuple5_shrinker,
        0,
        cst_src_quickcheck_ml$10,
        911,
        6,
        439,
        _b0p_);
      function _b0q_(param)
       {function _b0r_(a_099,b_100)
         {var
           t_106=a_099[6],
           t_105=a_099[5],
           t_104=a_099[4],
           t_103=a_099[3],
           t_102=a_099[2],
           t_101=a_099[1],
           t_112=b_100[6],
           t_111=b_100[5],
           t_110=b_100[4],
           t_109=b_100[3],
           t_108=b_100[2],
           t_107=b_100[1],
           n=caml_call2(_t_,t_101,t_107);
          if(0 === n)
           {var n$0=caml_call2(_t_,t_102,t_108);
            if(0 === n$0)
             {var n$1=caml_call2(_t_,t_103,t_109);
              if(0 === n$1)
               {var n$2=caml_call2(_t_,t_104,t_110);
                if(0 === n$2)
                 {var n$3=caml_call2(_t_,t_105,t_111);
                  return 0 === n$3?caml_call2(_t_,t_106,t_112):n$3}
                return n$2}
              return n$1}
            return n$0}
          return n}
        var
         sort=caml_call1(Base_List[60],_b0r_),
         expect=caml_call1(sort,_mA_),
         got=
          caml_call1
           (sort,
            caml_call1
             (to_list$0,caml_call1(shrink(tuple6$1(t0,t1,t2,t3,t4,t5)),_mB_))),
         equal=0,
         message=0,
         here=0,
         sexpifier=
          caml_call1
           (_I_,
            function(param)
             {var
               v5=param[6],
               v4=param[5],
               v3=param[4],
               v2=param[3],
               v1=param[2],
               v0=param[1],
               v0$0=caml_call1(sexp_of_t$0,v0),
               v1$0=caml_call1(sexp_of_t$0,v1),
               v2$0=caml_call1(sexp_of_t$0,v2),
               v3$0=caml_call1(sexp_of_t$0,v3),
               v4$0=caml_call1(sexp_of_t$0,v4),
               v5$0=caml_call1(sexp_of_t$0,v5);
              return [1,
                      [0,v0$0,[0,v1$0,[0,v2$0,[0,v3$0,[0,v4$0,[0,v5$0,0]]]]]]]});
        function comparator(a_113,b_114)
         {return caml_call3
                  (_F_,
                   function(a_115,b_116)
                    {var
                      t_122=a_115[6],
                      t_121=a_115[5],
                      t_120=a_115[4],
                      t_119=a_115[3],
                      t_118=a_115[2],
                      t_117=a_115[1],
                      t_128=b_116[6],
                      t_127=b_116[5],
                      t_126=b_116[4],
                      t_125=b_116[3],
                      t_124=b_116[2],
                      t_123=b_116[1],
                      n=caml_call2(_t_,t_117,t_123);
                     if(0 === n)
                      {var n$0=caml_call2(_t_,t_118,t_124);
                       if(0 === n$0)
                        {var n$1=caml_call2(_t_,t_119,t_125);
                         if(0 === n$1)
                          {var n$2=caml_call2(_t_,t_120,t_126);
                           if(0 === n$2)
                            {var n$3=caml_call2(_t_,t_121,t_127);
                             return 0 === n$3?caml_call2(_t_,t_122,t_128):n$3}
                           return n$2}
                         return n$1}
                       return n$0}
                     return n},
                   a_113,
                   b_114)}
        return caml_call8
                (Ppx_assert_lib_Runtime[3],
                 pos$19,
                 sexpifier,
                 comparator,
                 here,
                 message,
                 equal,
                 expect,
                 got)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_tuple6_shrinker,
        0,
        cst_src_quickcheck_ml$11,
        923,
        6,
        546,
        _b0q_);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst_tuple_shrinkers,
      0,
      cst_src_quickcheck_ml$12,
      874,
      2,
      2172,
      _mr_);
    function variant2$1(t_a,t_b)
     {function shrinker(var$0)
       {if(66 <= var$0[1])
         {var b=var$0[2],_b0k_=function(b){return [0,66,b]};
          return caml_call2(map$0,caml_call1(shrink(t_b),b),_b0k_)}
        var a=var$0[2];
        function _b0l_(a){return [0,65,a]}
        return caml_call2(map$0,caml_call1(shrink(t_a),a),_b0l_)}
      return create$5(shrinker)}
    function variant3$1(t_a,t_b,t_c)
     {function shrinker(var$0)
       {var switcher=var$0[1] - 65 | 0;
        switch(switcher)
         {case 0:
           var v=var$0[2],_b0h_=function(v){return [0,65,v]};
           return caml_call2(map$0,caml_call1(shrink(t_a),v),_b0h_);
          case 1:
           var v$0=var$0[2],_b0i_=function(v){return [0,66,v]};
           return caml_call2(map$0,caml_call1(shrink(t_b),v$0),_b0i_);
          default:
           var v$1=var$0[2],_b0j_=function(v){return [0,67,v]};
           return caml_call2(map$0,caml_call1(shrink(t_c),v$1),_b0j_)}}
      return create$5(shrinker)}
    function variant4$1(t_a,t_b,t_c,t_d)
     {function shrinker(var$0)
       {var switcher=var$0[1] - 65 | 0;
        switch(switcher)
         {case 0:
           var v=var$0[2],_b0d_=function(v){return [0,65,v]};
           return caml_call2(map$0,caml_call1(shrink(t_a),v),_b0d_);
          case 1:
           var v$0=var$0[2],_b0e_=function(v){return [0,66,v]};
           return caml_call2(map$0,caml_call1(shrink(t_b),v$0),_b0e_);
          case 2:
           var v$1=var$0[2],_b0f_=function(v){return [0,67,v]};
           return caml_call2(map$0,caml_call1(shrink(t_c),v$1),_b0f_);
          default:
           var v$2=var$0[2],_b0g_=function(v){return [0,68,v]};
           return caml_call2(map$0,caml_call1(shrink(t_d),v$2),_b0g_)}}
      return create$5(shrinker)}
    function variant5$1(t_a,t_b,t_c,t_d,t_e)
     {function shrinker(var$0)
       {var switcher=var$0[1] - 65 | 0;
        switch(switcher)
         {case 0:
           var v=var$0[2],_bZ__=function(v){return [0,65,v]};
           return caml_call2(map$0,caml_call1(shrink(t_a),v),_bZ__);
          case 1:
           var v$0=var$0[2],_bZ$_=function(v){return [0,66,v]};
           return caml_call2(map$0,caml_call1(shrink(t_b),v$0),_bZ$_);
          case 2:
           var v$1=var$0[2],_b0a_=function(v){return [0,67,v]};
           return caml_call2(map$0,caml_call1(shrink(t_c),v$1),_b0a_);
          case 3:
           var v$2=var$0[2],_b0b_=function(v){return [0,68,v]};
           return caml_call2(map$0,caml_call1(shrink(t_d),v$2),_b0b_);
          default:
           var v$3=var$0[2],_b0c_=function(v){return [0,69,v]};
           return caml_call2(map$0,caml_call1(shrink(t_e),v$3),_b0c_)}}
      return create$5(shrinker)}
    function variant6$1(t_a,t_b,t_c,t_d,t_e,t_f)
     {function shrinker(var$0)
       {var switcher=var$0[1] - 65 | 0;
        switch(switcher)
         {case 0:
           var v=var$0[2],_bZ4_=function(v){return [0,65,v]};
           return caml_call2(map$0,caml_call1(shrink(t_a),v),_bZ4_);
          case 1:
           var v$0=var$0[2],_bZ5_=function(v){return [0,66,v]};
           return caml_call2(map$0,caml_call1(shrink(t_b),v$0),_bZ5_);
          case 2:
           var v$1=var$0[2],_bZ6_=function(v){return [0,67,v]};
           return caml_call2(map$0,caml_call1(shrink(t_c),v$1),_bZ6_);
          case 3:
           var v$2=var$0[2],_bZ7_=function(v){return [0,68,v]};
           return caml_call2(map$0,caml_call1(shrink(t_d),v$2),_bZ7_);
          case 4:
           var v$3=var$0[2],_bZ8_=function(v){return [0,69,v]};
           return caml_call2(map$0,caml_call1(shrink(t_e),v$3),_bZ8_);
          default:
           var v$4=var$0[2],_bZ9_=function(v){return [0,70,v]};
           return caml_call2(map$0,caml_call1(shrink(t_f),v$4),_bZ9_)}}
      return create$5(shrinker)}
    function _mC_(param)
     {function sexp_of_var2(param)
       {if(66 <= param[1])
         {var v0=param[2];
          return [1,[0,_mD_,[0,caml_call1(sexp_of_t$0,v0),0]]]}
        var v0$0=param[2];
        return [1,[0,_mE_,[0,caml_call1(sexp_of_t$0,v0$0),0]]]}
      function compare_var2(a_129,b_130)
       {if(caml_call2(Ppx_compare_lib[1],a_129,b_130))return 0;
        if(66 <= a_129[1])
         {if(typeof b_130 !== "number")
           if(66 === b_130[1])
            {var right_134=b_130[2],left_133=a_129[2];
             return caml_call2(_t_,left_133,right_134)}}
        else
         if(typeof b_130 !== "number")
          if(65 === b_130[1])
           {var right_132=b_130[2],left_131=a_129[2];
            return caml_call2(_t_,left_131,right_132)}
        return caml_compare(a_129,b_130)}
      function sexp_of_var3(param)
       {var switcher=param[1] - 65 | 0;
        switch(switcher)
         {case 0:
           var v0=param[2];
           return [1,[0,_mF_,[0,caml_call1(sexp_of_t$0,v0),0]]];
          case 1:
           var v0$0=param[2];
           return [1,[0,_mG_,[0,caml_call1(sexp_of_t$0,v0$0),0]]];
          default:
           var v0$1=param[2];
           return [1,[0,_mH_,[0,caml_call1(sexp_of_t$0,v0$1),0]]]}}
      function compare_var3(a_135,b_136)
       {if(caml_call2(Ppx_compare_lib[1],a_135,b_136))return 0;
        var switcher=a_135[1] - 65 | 0;
        switch(switcher)
         {case 0:
           if(typeof b_136 !== "number")
            if(65 === b_136[1])
             {var right_138=b_136[2],left_137=a_135[2];
              return caml_call2(_t_,left_137,right_138)}
           break;
          case 1:
           if(typeof b_136 !== "number")
            if(66 === b_136[1])
             {var right_140=b_136[2],left_139=a_135[2];
              return caml_call2(_t_,left_139,right_140)}
           break;
          default:
           if(typeof b_136 !== "number")
            if(67 === b_136[1])
             {var right_142=b_136[2],left_141=a_135[2];
              return caml_call2(_t_,left_141,right_142)}}
        return caml_compare(a_135,b_136)}
      function sexp_of_var4(param)
       {var switcher=param[1] - 65 | 0;
        switch(switcher)
         {case 0:
           var v0=param[2];
           return [1,[0,_mI_,[0,caml_call1(sexp_of_t$0,v0),0]]];
          case 1:
           var v0$0=param[2];
           return [1,[0,_mJ_,[0,caml_call1(sexp_of_t$0,v0$0),0]]];
          case 2:
           var v0$1=param[2];
           return [1,[0,_mK_,[0,caml_call1(sexp_of_t$0,v0$1),0]]];
          default:
           var v0$2=param[2];
           return [1,[0,_mL_,[0,caml_call1(sexp_of_t$0,v0$2),0]]]}}
      function compare_var4(a_143,b_144)
       {if(caml_call2(Ppx_compare_lib[1],a_143,b_144))return 0;
        var switcher=a_143[1] - 65 | 0;
        switch(switcher)
         {case 0:
           if(typeof b_144 !== "number")
            if(65 === b_144[1])
             {var right_146=b_144[2],left_145=a_143[2];
              return caml_call2(_t_,left_145,right_146)}
           break;
          case 1:
           if(typeof b_144 !== "number")
            if(66 === b_144[1])
             {var right_148=b_144[2],left_147=a_143[2];
              return caml_call2(_t_,left_147,right_148)}
           break;
          case 2:
           if(typeof b_144 !== "number")
            if(67 === b_144[1])
             {var right_150=b_144[2],left_149=a_143[2];
              return caml_call2(_t_,left_149,right_150)}
           break;
          default:
           if(typeof b_144 !== "number")
            if(68 === b_144[1])
             {var right_152=b_144[2],left_151=a_143[2];
              return caml_call2(_t_,left_151,right_152)}}
        return caml_compare(a_143,b_144)}
      function sexp_of_var5(param)
       {var switcher=param[1] - 65 | 0;
        switch(switcher)
         {case 0:
           var v0=param[2];
           return [1,[0,_mM_,[0,caml_call1(sexp_of_t$0,v0),0]]];
          case 1:
           var v0$0=param[2];
           return [1,[0,_mN_,[0,caml_call1(sexp_of_t$0,v0$0),0]]];
          case 2:
           var v0$1=param[2];
           return [1,[0,_mO_,[0,caml_call1(sexp_of_t$0,v0$1),0]]];
          case 3:
           var v0$2=param[2];
           return [1,[0,_mP_,[0,caml_call1(sexp_of_t$0,v0$2),0]]];
          default:
           var v0$3=param[2];
           return [1,[0,_mQ_,[0,caml_call1(sexp_of_t$0,v0$3),0]]]}}
      function compare_var5(a_153,b_154)
       {if(caml_call2(Ppx_compare_lib[1],a_153,b_154))return 0;
        var switcher=a_153[1] - 65 | 0;
        switch(switcher)
         {case 0:
           if(typeof b_154 !== "number")
            if(65 === b_154[1])
             {var right_156=b_154[2],left_155=a_153[2];
              return caml_call2(_t_,left_155,right_156)}
           break;
          case 1:
           if(typeof b_154 !== "number")
            if(66 === b_154[1])
             {var right_158=b_154[2],left_157=a_153[2];
              return caml_call2(_t_,left_157,right_158)}
           break;
          case 2:
           if(typeof b_154 !== "number")
            if(67 === b_154[1])
             {var right_160=b_154[2],left_159=a_153[2];
              return caml_call2(_t_,left_159,right_160)}
           break;
          case 3:
           if(typeof b_154 !== "number")
            if(68 === b_154[1])
             {var right_162=b_154[2],left_161=a_153[2];
              return caml_call2(_t_,left_161,right_162)}
           break;
          default:
           if(typeof b_154 !== "number")
            if(69 === b_154[1])
             {var right_164=b_154[2],left_163=a_153[2];
              return caml_call2(_t_,left_163,right_164)}}
        return caml_compare(a_153,b_154)}
      function sexp_of_var6(param)
       {var switcher=param[1] - 65 | 0;
        switch(switcher)
         {case 0:
           var v0=param[2];
           return [1,[0,_mR_,[0,caml_call1(sexp_of_t$0,v0),0]]];
          case 1:
           var v0$0=param[2];
           return [1,[0,_mS_,[0,caml_call1(sexp_of_t$0,v0$0),0]]];
          case 2:
           var v0$1=param[2];
           return [1,[0,_mT_,[0,caml_call1(sexp_of_t$0,v0$1),0]]];
          case 3:
           var v0$2=param[2];
           return [1,[0,_mU_,[0,caml_call1(sexp_of_t$0,v0$2),0]]];
          case 4:
           var v0$3=param[2];
           return [1,[0,_mV_,[0,caml_call1(sexp_of_t$0,v0$3),0]]];
          default:
           var v0$4=param[2];
           return [1,[0,_mW_,[0,caml_call1(sexp_of_t$0,v0$4),0]]]}}
      function compare_var6(a_165,b_166)
       {if(caml_call2(Ppx_compare_lib[1],a_165,b_166))return 0;
        var switcher=a_165[1] - 65 | 0;
        switch(switcher)
         {case 0:
           if(typeof b_166 !== "number")
            if(65 === b_166[1])
             {var right_168=b_166[2],left_167=a_165[2];
              return caml_call2(_t_,left_167,right_168)}
           break;
          case 1:
           if(typeof b_166 !== "number")
            if(66 === b_166[1])
             {var right_170=b_166[2],left_169=a_165[2];
              return caml_call2(_t_,left_169,right_170)}
           break;
          case 2:
           if(typeof b_166 !== "number")
            if(67 === b_166[1])
             {var right_172=b_166[2],left_171=a_165[2];
              return caml_call2(_t_,left_171,right_172)}
           break;
          case 3:
           if(typeof b_166 !== "number")
            if(68 === b_166[1])
             {var right_174=b_166[2],left_173=a_165[2];
              return caml_call2(_t_,left_173,right_174)}
           break;
          case 4:
           if(typeof b_166 !== "number")
            if(69 === b_166[1])
             {var right_176=b_166[2],left_175=a_165[2];
              return caml_call2(_t_,left_175,right_176)}
           break;
          default:
           if(typeof b_166 !== "number")
            if(70 === b_166[1])
             {var right_178=b_166[2],left_177=a_165[2];
              return caml_call2(_t_,left_177,right_178)}}
        return caml_compare(a_165,b_166)}
      function _bZZ_(param)
       {var
         t=variant2$1(t0,t1),
         got=caml_call1(to_list$0,caml_call1(shrink(t),_mX_)),
         sexpifier=caml_call1(_I_,sexp_of_var2),
         equal=0,
         message=0,
         here=0;
        function comparator(a_179,b_180)
         {return caml_call3(_F_,compare_var2,a_179,b_180)}
        caml_call8
         (Ppx_assert_lib_Runtime[3],
          pos$20,
          sexpifier,
          comparator,
          here,
          message,
          equal,
          expect$0,
          got);
        var
         got$0=caml_call1(to_list$0,caml_call1(shrink(t),_mY_)),
         sexpifier$0=caml_call1(_I_,sexp_of_var2),
         equal$0=0,
         message$0=0,
         here$0=0;
        function comparator$0(a_183,b_184)
         {return caml_call3(_F_,compare_var2,a_183,b_184)}
        return caml_call8
                (Ppx_assert_lib_Runtime[3],
                 pos$21,
                 sexpifier$0,
                 comparator$0,
                 here$0,
                 message$0,
                 equal$0,
                 expect$1,
                 got$0)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_variant2_shrinker,
        0,
        cst_src_quickcheck_ml$13,
        1005,
        6,
        318,
        _bZZ_);
      function _bZ0_(param)
       {var
         t=variant3$1(t0,t1,t2),
         got=caml_call1(to_list$0,caml_call1(shrink(t),_mZ_)),
         sexpifier=caml_call1(_I_,sexp_of_var3),
         equal=0,
         message=0,
         here=0;
        function comparator(a_187,b_188)
         {return caml_call3(_F_,compare_var3,a_187,b_188)}
        caml_call8
         (Ppx_assert_lib_Runtime[3],
          pos$22,
          sexpifier,
          comparator,
          here,
          message,
          equal,
          expect$2,
          got);
        var
         got$0=caml_call1(to_list$0,caml_call1(shrink(t),_m0_)),
         sexpifier$0=caml_call1(_I_,sexp_of_var3),
         equal$0=0,
         message$0=0,
         here$0=0;
        function comparator$0(a_191,b_192)
         {return caml_call3(_F_,compare_var3,a_191,b_192)}
        caml_call8
         (Ppx_assert_lib_Runtime[3],
          pos$23,
          sexpifier$0,
          comparator$0,
          here$0,
          message$0,
          equal$0,
          expect$3,
          got$0);
        var
         got$1=caml_call1(to_list$0,caml_call1(shrink(t),_m1_)),
         sexpifier$1=caml_call1(_I_,sexp_of_var3),
         equal$1=0,
         message$1=0,
         here$1=0;
        function comparator$1(a_195,b_196)
         {return caml_call3(_F_,compare_var3,a_195,b_196)}
        return caml_call8
                (Ppx_assert_lib_Runtime[3],
                 pos$24,
                 sexpifier$1,
                 comparator$1,
                 here$1,
                 message$1,
                 equal$1,
                 expect$4,
                 got$1)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_variant3_shrinker,
        0,
        cst_src_quickcheck_ml$14,
        1012,
        6,
        443,
        _bZ0_);
      function _bZ1_(param)
       {var
         t=variant4$1(t0,t1,t2,t3),
         got=caml_call1(to_list$0,caml_call1(shrink(t),_m2_)),
         sexpifier=caml_call1(_I_,sexp_of_var4),
         equal=0,
         message=0,
         here=0;
        function comparator(a_199,b_200)
         {return caml_call3(_F_,compare_var4,a_199,b_200)}
        caml_call8
         (Ppx_assert_lib_Runtime[3],
          pos$25,
          sexpifier,
          comparator,
          here,
          message,
          equal,
          expect$5,
          got);
        var
         got$0=caml_call1(to_list$0,caml_call1(shrink(t),_m3_)),
         sexpifier$0=caml_call1(_I_,sexp_of_var4),
         equal$0=0,
         message$0=0,
         here$0=0;
        function comparator$0(a_203,b_204)
         {return caml_call3(_F_,compare_var4,a_203,b_204)}
        caml_call8
         (Ppx_assert_lib_Runtime[3],
          pos$26,
          sexpifier$0,
          comparator$0,
          here$0,
          message$0,
          equal$0,
          expect$6,
          got$0);
        var
         got$1=caml_call1(to_list$0,caml_call1(shrink(t),_m4_)),
         sexpifier$1=caml_call1(_I_,sexp_of_var4),
         equal$1=0,
         message$1=0,
         here$1=0;
        function comparator$1(a_207,b_208)
         {return caml_call3(_F_,compare_var4,a_207,b_208)}
        caml_call8
         (Ppx_assert_lib_Runtime[3],
          pos$27,
          sexpifier$1,
          comparator$1,
          here$1,
          message$1,
          equal$1,
          expect$7,
          got$1);
        var
         got$2=caml_call1(to_list$0,caml_call1(shrink(t),_m5_)),
         sexpifier$2=caml_call1(_I_,sexp_of_var4),
         equal$2=0,
         message$2=0,
         here$2=0;
        function comparator$2(a_211,b_212)
         {return caml_call3(_F_,compare_var4,a_211,b_212)}
        return caml_call8
                (Ppx_assert_lib_Runtime[3],
                 pos$28,
                 sexpifier$2,
                 comparator$2,
                 here$2,
                 message$2,
                 equal$2,
                 expect$8,
                 got$2)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_variant4_shrinker,
        0,
        cst_src_quickcheck_ml$15,
        1021,
        6,
        568,
        _bZ1_);
      function _bZ2_(param)
       {var
         t=variant5$1(t0,t1,t2,t3,t4),
         got=caml_call1(to_list$0,caml_call1(shrink(t),_m6_)),
         sexpifier=caml_call1(_I_,sexp_of_var5),
         equal=0,
         message=0,
         here=0;
        function comparator(a_215,b_216)
         {return caml_call3(_F_,compare_var5,a_215,b_216)}
        caml_call8
         (Ppx_assert_lib_Runtime[3],
          pos$29,
          sexpifier,
          comparator,
          here,
          message,
          equal,
          expect$9,
          got);
        var
         got$0=caml_call1(to_list$0,caml_call1(shrink(t),_m7_)),
         sexpifier$0=caml_call1(_I_,sexp_of_var5),
         equal$0=0,
         message$0=0,
         here$0=0;
        function comparator$0(a_219,b_220)
         {return caml_call3(_F_,compare_var5,a_219,b_220)}
        caml_call8
         (Ppx_assert_lib_Runtime[3],
          pos$30,
          sexpifier$0,
          comparator$0,
          here$0,
          message$0,
          equal$0,
          expect$10,
          got$0);
        var
         got$1=caml_call1(to_list$0,caml_call1(shrink(t),_m8_)),
         sexpifier$1=caml_call1(_I_,sexp_of_var5),
         equal$1=0,
         message$1=0,
         here$1=0;
        function comparator$1(a_223,b_224)
         {return caml_call3(_F_,compare_var5,a_223,b_224)}
        caml_call8
         (Ppx_assert_lib_Runtime[3],
          pos$31,
          sexpifier$1,
          comparator$1,
          here$1,
          message$1,
          equal$1,
          expect$11,
          got$1);
        var
         got$2=caml_call1(to_list$0,caml_call1(shrink(t),_m9_)),
         sexpifier$2=caml_call1(_I_,sexp_of_var5),
         equal$2=0,
         message$2=0,
         here$2=0;
        function comparator$2(a_227,b_228)
         {return caml_call3(_F_,compare_var5,a_227,b_228)}
        caml_call8
         (Ppx_assert_lib_Runtime[3],
          pos$32,
          sexpifier$2,
          comparator$2,
          here$2,
          message$2,
          equal$2,
          expect$12,
          got$2);
        var
         got$3=caml_call1(to_list$0,caml_call1(shrink(t),_m__)),
         sexpifier$3=caml_call1(_I_,sexp_of_var5),
         equal$3=0,
         message$3=0,
         here$3=0;
        function comparator$3(a_231,b_232)
         {return caml_call3(_F_,compare_var5,a_231,b_232)}
        return caml_call8
                (Ppx_assert_lib_Runtime[3],
                 pos$33,
                 sexpifier$3,
                 comparator$3,
                 here$3,
                 message$3,
                 equal$3,
                 expect$13,
                 got$3)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_variant5_shrinker,
        0,
        cst_src_quickcheck_ml$16,
        1032,
        6,
        693,
        _bZ2_);
      function _bZ3_(param)
       {var
         t=variant6$1(t0,t1,t2,t3,t4,t5),
         got=caml_call1(to_list$0,caml_call1(shrink(t),_m$_)),
         sexpifier=caml_call1(_I_,sexp_of_var6),
         equal=0,
         message=0,
         here=0;
        function comparator(a_235,b_236)
         {return caml_call3(_F_,compare_var6,a_235,b_236)}
        caml_call8
         (Ppx_assert_lib_Runtime[3],
          pos$34,
          sexpifier,
          comparator,
          here,
          message,
          equal,
          expect$14,
          got);
        var
         got$0=caml_call1(to_list$0,caml_call1(shrink(t),_na_)),
         sexpifier$0=caml_call1(_I_,sexp_of_var6),
         equal$0=0,
         message$0=0,
         here$0=0;
        function comparator$0(a_239,b_240)
         {return caml_call3(_F_,compare_var6,a_239,b_240)}
        caml_call8
         (Ppx_assert_lib_Runtime[3],
          pos$35,
          sexpifier$0,
          comparator$0,
          here$0,
          message$0,
          equal$0,
          expect$15,
          got$0);
        var
         got$1=caml_call1(to_list$0,caml_call1(shrink(t),_nb_)),
         sexpifier$1=caml_call1(_I_,sexp_of_var6),
         equal$1=0,
         message$1=0,
         here$1=0;
        function comparator$1(a_243,b_244)
         {return caml_call3(_F_,compare_var6,a_243,b_244)}
        caml_call8
         (Ppx_assert_lib_Runtime[3],
          pos$36,
          sexpifier$1,
          comparator$1,
          here$1,
          message$1,
          equal$1,
          expect$16,
          got$1);
        var
         got$2=caml_call1(to_list$0,caml_call1(shrink(t),_nc_)),
         sexpifier$2=caml_call1(_I_,sexp_of_var6),
         equal$2=0,
         message$2=0,
         here$2=0;
        function comparator$2(a_247,b_248)
         {return caml_call3(_F_,compare_var6,a_247,b_248)}
        caml_call8
         (Ppx_assert_lib_Runtime[3],
          pos$37,
          sexpifier$2,
          comparator$2,
          here$2,
          message$2,
          equal$2,
          expect$17,
          got$2);
        var
         got$3=caml_call1(to_list$0,caml_call1(shrink(t),_nd_)),
         sexpifier$3=caml_call1(_I_,sexp_of_var6),
         equal$3=0,
         message$3=0,
         here$3=0;
        function comparator$3(a_251,b_252)
         {return caml_call3(_F_,compare_var6,a_251,b_252)}
        caml_call8
         (Ppx_assert_lib_Runtime[3],
          pos$38,
          sexpifier$3,
          comparator$3,
          here$3,
          message$3,
          equal$3,
          expect$18,
          got$3);
        var
         got$4=caml_call1(to_list$0,caml_call1(shrink(t),_ne_)),
         sexpifier$4=caml_call1(_I_,sexp_of_var6),
         equal$4=0,
         message$4=0,
         here$4=0;
        function comparator$4(a_255,b_256)
         {return caml_call3(_F_,compare_var6,a_255,b_256)}
        return caml_call8
                (Ppx_assert_lib_Runtime[3],
                 pos$39,
                 sexpifier$4,
                 comparator$4,
                 here$4,
                 message$4,
                 equal$4,
                 expect$19,
                 got$4)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_variant6_shrinker,
        0,
        cst_src_quickcheck_ml$17,
        1045,
        6,
        818,
        _bZ3_);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst_variant_shrinkers,
      0,
      cst_src_quickcheck_ml$18,
      993,
      2,
      3425,
      _mC_);
    function fixed_point$0(f)
     {function shrinker(v)
       {return caml_call1
                (of_lazy,
                 [246,
                  function(_bZY_)
                   {return caml_call1
                            (shrink(caml_call1(f,create$5(shrinker))),v)}])}
      return create$5(shrinker)}
    function Make_int_shrinker(_bZX_)
     {var shrinker=empty$1(0);return [0,shrinker]}
    var For_int$0=Make_int_shrinker(Pre_int);
    function Make_int(M)
     {var
       shrinker=Make_int_shrinker(M)[1],
       _bZW_=Make_int_generator(M),
       gen=_bZW_[1],
       gen_incl=_bZW_[2],
       gen_uniform_incl=_bZW_[3],
       gen_log_incl=_bZW_[4],
       gen_log_uniform_incl=_bZW_[5],
       include=Make_int_observer(M),
       obs=include[1];
      return [0,
              gen,
              obs,
              shrinker,
              gen_incl,
              gen_uniform_incl,
              gen_log_uniform_incl,
              gen_log_incl]}
    var
     shrinker=For_int$0[1],
     gen=For_int[1],
     gen_incl=For_int[2],
     gen_uniform_incl=For_int[3],
     gen_log_incl=For_int[4],
     gen_log_uniform_incl=For_int[5],
     obs=include$22[1],
     _nf_=Monad_infix$0[1],
     _ng_=Monad_infix$0[2];
    function Configure(Config)
     {var
       default_seed=Config[1],
       default_sizes=Config[2],
       default_trial_count=Config[3],
       default_can_generate_trial_count=Config[4],
       default_shrink_attempts=Config[5],
       nondeterministic_state=
        [246,function(_bZV_){return caml_call2(Base_Random[16][3],0,0)}];
      function random_state_of_seed(seed)
       {if(typeof seed === "number")
         {var
           _bZS_=caml_obj_tag(nondeterministic_state),
           _bZT_=
            250 === _bZS_
             ?nondeterministic_state[1]
             :246 === _bZS_
               ?caml_call1(CamlinternalLazy[2],nondeterministic_state)
               :nondeterministic_state;
          return caml_call1(Splittable_random[1][1],_bZT_)}
        var str=seed[2],_bZU_=caml_call1(_X_,str);
        return caml_call1(Splittable_random[1][2],_bZU_)}
      function ensure_infinite(sequence,if_finite_then_raise_s)
       {function _bZO_(param){throw [0,Match_failure,_nh_]}
        function _bZP_(param)
         {var
           _bZQ_=caml_obj_tag(if_finite_then_raise_s),
           _bZR_=
            250 === _bZQ_
             ?if_finite_then_raise_s[1]
             :246 === _bZQ_
               ?caml_call1(CamlinternalLazy[2],if_finite_then_raise_s)
               :if_finite_then_raise_s;
          return caml_call1(_aX_,_bZR_)}
        return caml_call5
                (unfold_with_and_finish,
                 sequence,
                 0,
                 function(param,x){return [1,x,0]},
                 _bZP_,
                 _bZO_)}
      function random_sequence(opt,_bZM_,gen)
       {if(opt)var sth=opt[1],seed=sth;else var seed=default_seed;
        if(_bZM_)var sth$0=_bZM_[1],sizes=sth$0;else var sizes=default_sizes;
        var
         random=random_state_of_seed(seed),
         sizes$0=
          ensure_infinite
           (sizes,
            [246,
             function(_bZN_)
              {return caml_call1
                       (Sexplib0_Sexp_conv[7],
                        cst_Quickcheck_sizes_argument_ran_out_of_values)}]);
        return caml_call2
                (map$0,
                 sizes$0,
                 function(size){return generate(gen,size,random)})}
      function iter_or_error(seed,sizes,opt,gen,f)
       {if(opt)var sth=opt[1],trials=sth;else var trials=default_trial_count;
        var seq=caml_call2(take,random_sequence(seed,sizes,gen),trials);
        return caml_call3
                (fold_result,
                 seq,
                 0,
                 function(param,value){return caml_call1(f,value)})}
      function iter(seed,sizes,trials,gen,f)
       {return caml_call1
                (_ls_,
                 iter_or_error
                  (seed,
                   sizes,
                   trials,
                   gen,
                   function(elt){return [0,caml_call1(f,elt)]}))}
      function random_value(opt,_bZL_,gen)
       {if(opt)var sth=opt[1],seed=sth;else var seed=default_seed;
        if(_bZL_)var sth$0=_bZL_[1],size=sth$0;else var size=30;
        var random=random_state_of_seed(seed);
        return generate(gen,size,random)}
      function shrink_iter(sexp_of,value,error,shrinker,opt,f)
       {if(opt)
         var sth=opt[1],shrink_attempts=sth;
        else
         var shrink_attempts=default_shrink_attempts;
        var
         seq$1=caml_call1(shrink(shrinker),value),
         seq=seq$1,
         attempts=0,
         result=0;
        for(;;)
         {if(typeof shrink_attempts === "number")
           var _bZE_=1;
          else
           var n=shrink_attempts[2],_bZE_=caml_call2(_aA_,attempts,n);
          if(_bZE_)
           {var match=caml_call1(next,seq);
            if(match)
             {var
               match$0=match[1],
               seq_tl=match$0[2],
               shr_value=match$0[1],
               match$1=caml_call1(f,shr_value);
              if(0 === match$1[0])
               {var
                 attempts$0=caml_call2(_ah_,attempts,1),
                 seq=seq_tl,
                 attempts=attempts$0;
                continue}
              var
               shr_error=match$1[1],
               seq$0=caml_call1(shrink(shrinker),shr_value),
               result$0=[0,[0,shr_value,shr_error]],
               attempts$1=caml_call2(_ah_,attempts,1),
               seq=seq$0,
               attempts=attempts$1,
               result=result$0;
              continue}}
          if(result)
           {var
             match$2=result[1],
             shr_error$0=match$2[2],
             shr_value$0=match$2[1];
            if(sexp_of)
             var f$0=sexp_of[1],sexp_of_value=f$0;
            else
             var sexp_of_value=function(param){return _nm_};
            var
             _bZF_=[0,[1,[0,_ni_,[0,caml_call1(sexp_of_t$18,error),0]]],0],
             _bZG_=
              [0,[1,[0,_nj_,[0,caml_call1(sexp_of_value,value),0]]],_bZF_],
             _bZH_=
              [0,
               [1,[0,_nk_,[0,caml_call1(sexp_of_t$18,shr_error$0),0]]],
               _bZG_],
             _bZI_=
              [0,
               [1,[0,_nl_,[0,caml_call1(sexp_of_value,shr_value$0),0]]],
               _bZH_];
            return caml_call1
                    (_kD_,
                     [1,
                      [0,
                       caml_call1(Sexplib0_Sexp_conv[7],cst_shrunk_random_input),
                       _bZI_]])}
          if(sexp_of)
           {var
             sexp_of_value$0=sexp_of[1],
             _bZJ_=[0,[1,[0,_nn_,[0,caml_call1(sexp_of_t$18,error),0]]],0],
             _bZK_=
              [0,[1,[0,_no_,[0,caml_call1(sexp_of_value$0,value),0]]],_bZJ_];
            return caml_call1
                    (_kD_,
                     [1,
                      [0,caml_call1(Sexplib0_Sexp_conv[7],cst_random_input),_bZK_]])}
          return error}}
      function test_or_error
       (seed,sizes,trials,shrinker,shrink_attempts,sexp_of,opt,gen,f)
       {if(opt)var sth=opt[1],examples=sth;else var examples=0;
        if(shrinker)
         var
          shrinker$0=shrinker[1],
          f$0=
           function(x)
            {var match=caml_call1(f,x);
             if(0 === match[0])return _np_;
             var error=match[1];
             return [1,
                     shrink_iter(sexp_of,x,error,shrinker$0,shrink_attempts,f)]};
        else
         if(sexp_of)
          var
           sexp_of_value=sexp_of[1],
           f$0=
            function(value)
             {var match=caml_call1(f,value);
              if(0 === match[0])return _nq_;
              var
               error=match[1],
               _bZC_=[0,[1,[0,_nr_,[0,caml_call1(sexp_of_t$18,error),0]]],0],
               _bZD_=
                [0,[1,[0,_ns_,[0,caml_call1(sexp_of_value,value),0]]],_bZC_];
              return caml_call1
                      (_lw_,
                       [1,
                        [0,
                         caml_call1(Sexplib0_Sexp_conv[7],cst_random_input$0),
                         _bZD_]])};
         else
          var f$0=f;
        function _bZz_(param){return iter_or_error(seed,sizes,trials,gen,f$0)}
        function _bZA_(param,x){return caml_call1(f$0,x)}
        var _bZB_=caml_call3(Base_List[10],examples,0,_bZA_);
        return caml_call2(include$20[16][1],_bZB_,_bZz_)}
      function test
       (seed,sizes,trials,shrinker,shrink_attempts,sexp_of,examples,gen,f)
       {return caml_call1
                (_ls_,
                 test_or_error
                  (seed,
                   sizes,
                   trials,
                   shrinker,
                   shrink_attempts,
                   sexp_of,
                   examples,
                   gen,
                   function(elt)
                    {return caml_call2
                             (_lp_,_nt_,function(param){return caml_call1(f,elt)})}))}
      function test_distinct_values
       (seed,sizes,sexp_of,gen,trials,distinct_values,compare)
       {var S=caml_call1(Stdlib_set[1],[0,compare]);
        return caml_call1
                (with_return,
                 function(r)
                  {var set=[0,S[1]];
                   iter
                    (seed,
                     sizes,
                     [0,trials],
                     gen,
                     function(elt)
                      {set[1] = caml_call2(S[4],elt,set[1]);
                       var
                        _bZy_=
                         caml_call2(_aF_,caml_call1(S[20],set[1]),distinct_values);
                       return _bZy_?caml_call1(r,0):_bZy_});
                   var _bZx_=set[1],actual_count=caml_call1(S[20],_bZx_);
                   if(sexp_of)
                    var
                     sexp_of_elt=sexp_of[1],
                     values=
                      [0,caml_call2(_I_,sexp_of_elt,caml_call1(S[21],_bZx_))];
                   else
                    var values=0;
                   var match=0;
                   if(values)
                    var
                     v=values[1],
                     _bZs_=
                      [0,[1,[0,_nu_,[0,caml_call1(Base[192][4],v),0]]],match];
                   else
                    var _bZs_=match;
                   var
                    _bZt_=
                     [0,
                      [1,[0,_nv_,[0,caml_call1(sexp_of_t$0,actual_count),0]]],
                      _bZs_],
                    _bZu_=
                     [0,
                      [1,[0,_nw_,[0,caml_call1(sexp_of_t$0,distinct_values),0]]],
                      _bZt_],
                    _bZv_=
                     [0,[1,[0,_nx_,[0,caml_call1(sexp_of_t$0,trials),0]]],_bZu_],
                    res=
                     [0,
                      caml_call1
                       (Sexplib0_Sexp_conv[7],cst_insufficient_distinct_values),
                      _bZv_];
                   if(res)
                    if(res[2])
                     var switch$0=0;
                    else
                     var h=res[1],_bZw_=h,switch$0=1;
                   else
                    var switch$0=0;
                   if(! switch$0)var _bZw_=[1,res];
                   return caml_call1(_aX_,_bZw_)})}
      function test_can_generate(seed,sizes,opt,sexp_of,gen,f)
       {if(opt)
         var sth=opt[1],trials=sth;
        else
         var trials=default_can_generate_trial_count;
        var r=[0,0];
        function _bZq_(return$0)
         {iter
           (seed,
            sizes,
            [0,trials],
            gen,
            function(x)
             {return caml_call1(f,x)
                      ?caml_call1(return$0,-895996764)
                      :(r[1] = [0,x,r[1]],0)});
          return 501585681}
        var match=caml_call1(Base_With_return[1],_bZq_);
        if(501585681 <= match)
         {if(sexp_of)
           {var
             sexp_of_value=sexp_of[1],
             _bZr_=[0,[1,[0,_ny_,[0,caml_call2(_I_,sexp_of_value,r[1]),0]]],0];
            return caml_call1
                    (_kM_,
                     [1,
                      [0,
                       caml_call1(Sexplib0_Sexp_conv[7],cst_cannot_generate),
                       _bZr_]])}
          return caml_call1(_aV_,cst_cannot_generate$0)}
        return 0}
      return [0,
              default_seed,
              default_sizes,
              default_trial_count,
              default_can_generate_trial_count,
              default_shrink_attempts,
              nondeterministic_state,
              random_state_of_seed,
              ensure_infinite,
              random_sequence,
              iter_or_error,
              iter,
              random_value,
              shrink_iter,
              test_or_error,
              test,
              test_distinct_values,
              test_can_generate]}
    var
     _nz_=0 === Base_Word_size[3]?1e3:1e4,
     default_sizes=
      caml_call1(cycle_list_exn,caml_call5(Base_List[115],0,0,_nA_,0,30)),
     include$25=
      Configure
       ([0,default_seed,default_sizes,_nz_,1e4,default_shrink_attempts]),
     _nK_=include$25[15],
     _nL_=include$25[16],
     _nM_=include$25[17],
     _nB_=include$25[1],
     _nC_=include$25[2],
     _nD_=include$25[3],
     _nE_=include$25[4],
     _nF_=include$25[5],
     _nG_=include$25[9],
     _nH_=include$25[11],
     _nI_=include$25[12],
     _nJ_=include$25[14];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$82);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     _nN_=
      [0,
       gen,
       obs,
       shrinker,
       gen_incl,
       gen_uniform_incl,
       gen_log_uniform_incl,
       gen_log_incl],
     _nO_=
      [0,
       shrink,
       create$5,
       empty$1,
       bool$1,
       char$2,
       map$7,
       tuple2$1,
       tuple3$1,
       tuple4$1,
       tuple5$1,
       tuple6$1,
       variant2$1,
       variant3$1,
       variant4$1,
       variant5$1,
       variant6$1,
       fixed_point$0,
       fixed_point$0],
     _nP_=
      [0,
       create$4,
       observe,
       of_hash,
       bool,
       char$0,
       doubleton,
       enum$0,
       of_list$2,
       fixed_point,
       fixed_point,
       variant2,
       variant3,
       variant4,
       variant5,
       variant6,
       of_predicate,
       comparison,
       singleton$0,
       unmap,
       tuple2,
       tuple3,
       tuple4,
       tuple5,
       tuple6,
       fn,
       of_fun],
     _nQ_=
      [0,
       create$3,
       generate,
       _l7_,
       _l8_,
       Monad_infix$0,
       bind$1,
       join$0,
       ignore_m$0,
       Let_syntax$0,
       return$3,
       _l9_,
       map$6,
       _l__,
       _l$_,
       _ma_,
       _mb_,
       _mc_,
       both,
       _md_,
       _me_,
       _mf_,
       _mg_,
       size,
       with_size,
       bool$0,
       char$1,
       char_digit,
       char_lowercase,
       char_uppercase,
       char_alpha,
       char_alphanum,
       char_print,
       char_whitespace,
       singleton$1,
       doubleton$0,
       of_list$3,
       union,
       of_sequence,
       tuple2$0,
       tuple3$0,
       tuple4$0,
       tuple5$0,
       tuple6$0,
       variant2$0,
       variant3$0,
       variant4$0,
       variant5$0,
       variant6$0,
       geometric,
       small_non_negative_int,
       small_positive_int,
       fn$0,
       fn2,
       fn3,
       fn4,
       fn5,
       fn6,
       compare_fn,
       equal_fn,
       filter_map$1,
       filter$1,
       recursive_union,
       weighted_recursive_union,
       recursive,
       recursive,
       weighted_union,
       of_fun$0,
       list,
       list_non_empty,
       list_with_length],
     Core_kernel_Quickcheck=
      [0,
       _nQ_,
       _nP_,
       _nO_,
       [0,
        return$3,
        _nf_,
        _ng_,
        [0,
         return$3,
         bind$1,
         map$6,
         both,
         [0,
          create$3,
          generate,
          _l7_,
          _l8_,
          Monad_infix$0,
          bind$1,
          join$0,
          ignore_m$0,
          Let_syntax$0,
          return$3,
          _l9_,
          map$6,
          _l__,
          _l$_,
          _ma_,
          _mb_,
          _mc_,
          both,
          _md_,
          _me_,
          _mf_,
          _mg_,
          size,
          with_size,
          bool$0,
          char$1,
          char_digit,
          char_lowercase,
          char_uppercase,
          char_alpha,
          char_alphanum,
          char_print,
          char_whitespace,
          singleton$1,
          doubleton$0,
          of_list$3,
          union,
          of_sequence,
          tuple2$0,
          tuple3$0,
          tuple4$0,
          tuple5$0,
          tuple6$0,
          variant2$0,
          variant3$0,
          variant4$0,
          variant5$0,
          variant6$0,
          geometric,
          small_non_negative_int,
          small_positive_int,
          fn$0,
          fn2,
          fn3,
          fn4,
          fn5,
          fn6,
          compare_fn,
          equal_fn,
          filter_map$1,
          filter$1,
          recursive_union,
          weighted_recursive_union,
          recursive,
          recursive,
          weighted_union,
          of_fun$0,
          list,
          list_non_empty,
          list_with_length]]],
       Make_int,
       _nN_,
       _nB_,
       _nC_,
       _nD_,
       _nE_,
       _nF_,
       _nI_,
       _nH_,
       _nK_,
       _nJ_,
       _nM_,
       _nL_,
       _nG_,
       function(_bZo_)
        {var _bZp_=Configure(_bZo_);
         return [0,
                 _bZp_[1],
                 _bZp_[2],
                 _bZp_[3],
                 _bZp_[4],
                 _bZp_[5],
                 _bZp_[12],
                 _bZp_[11],
                 _bZp_[15],
                 _bZp_[14],
                 _bZp_[17],
                 _bZp_[16],
                 _bZp_[9]]}];
    caml_register_global
     (7378,Core_kernel_Quickcheck,"Core_kernel__Quickcheck");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$83);
    caml_call1(Expect_test_collector[4][1],cst_src_either_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$84,cst$28);
    var
     _nR_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_s),
     _nS_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_either_ml_5_18),
     _nT_=[0,[0,cst_Second,[0,caml_call2(Bin_prot_Shape[15],_nS_,_nR_),0]],0],
     _nU_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_f),
     _nV_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_either_ml_4_18),
     _nW_=
      [0,[0,cst_First,[0,caml_call2(Bin_prot_Shape[15],_nV_,_nU_),0]],_nT_],
     _nX_=caml_call1(Bin_prot_Shape[9],_nW_),
     _nY_=[0,caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_s$0),0],
     _nZ_=[0,caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_f$0),_nY_],
     _n0_=
      [0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$71),_nZ_,_nX_],0],
     _n1_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_either_ml_3_4),
     group$31=caml_call2(Bin_prot_Shape[6],_n1_,_n0_);
    function bin_shape_t$24(f,s)
     {var _bZn_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$72);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$31,_bZn_),[0,f,[0,s,0]])}
    function bin_size_t$27(size_of_f,size_of_s,param)
     {if(0 === param[0])
       {var v1=param[1];return 1 + caml_call1(size_of_f,v1) | 0}
      var v1$0=param[1];
      return 1 + caml_call1(size_of_s,v1$0) | 0}
    function bin_write_t$27(write_f,write_s,buf,pos,param)
     {if(0 === param[0])
       {var v1=param[1],pos$0=caml_call3(Bin_prot_Write[30],buf,pos,0);
        return caml_call3(write_f,buf,pos$0,v1)}
      var v1$0=param[1],pos$1=caml_call3(Bin_prot_Write[30],buf,pos,1);
      return caml_call3(write_s,buf,pos$1,v1$0)}
    function bin_writer_t$19(bin_writer_f,bin_writer_s)
     {function _bZi_(v)
       {var _bZj_=bin_writer_s[2],_bZk_=bin_writer_f[2];
        return function(_bZl_,_bZm_)
         {return bin_write_t$27(_bZk_,_bZj_,v,_bZl_,_bZm_)}}
      return [0,
              function(v)
               {return bin_size_t$27(bin_writer_f[1],bin_writer_s[1],v)},
              _bZi_]}
    function bin_read_t$55(of_f,of_s,buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_src_either_ml_Stable_V1_t,pos_ref[1])}
    function bin_read_t$56(of_f,of_s,buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[29],buf,pos_ref);
      if(0 === match){var arg_1=caml_call2(of_f,buf,pos_ref);return [0,arg_1]}
      if(1 === match)
       {var arg_1$0=caml_call2(of_s,buf,pos_ref);return [1,arg_1$0]}
      return caml_call2(Bin_prot_Common[18],_n2_,pos_ref[1])}
    function bin_reader_t$19(bin_reader_f,bin_reader_s)
     {function _bZh_(buf,pos_ref,vtag)
       {return bin_read_t$55(bin_reader_f[1],bin_reader_s[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$56
                        (bin_reader_f[1],bin_reader_s[1],buf,pos_ref)},
              _bZh_]}
    function bin_t$19(bin_f,bin_s)
     {var
       _bZf_=bin_reader_t$19(bin_f[3],bin_s[3]),
       _bZg_=bin_writer_t$19(bin_f[2],bin_s[2]);
      return [0,bin_shape_t$24(bin_f[1],bin_s[1]),_bZg_,_bZf_]}
    function compare$16(cmp_f,cmp_s,a_001,match)
     {if(caml_call2(Ppx_compare_lib[1],a_001,match))return 0;
      if(0 === a_001[0])
       {var _bZd_=a_001[1];
        if(0 === match[0])
         {var b_004=match[1];return caml_call2(cmp_f,_bZd_,b_004)}
        return -1}
      var _bZe_=a_001[1];
      if(0 === match[0])return 1;
      var b_006=match[1];
      return caml_call2(cmp_s,_bZe_,b_006)}
    function t_of_sexp$20(of_f,of_s,sexp)
     {if(0 === sexp[0])
       {var _bY$_=sexp[1];
        if(caml_string_notequal(_bY$_,cst_First$0))
         {if(caml_string_notequal(_bY$_,cst_Second$0))
           if(caml_string_notequal(_bY$_,cst_first))
            if(caml_string_notequal(_bY$_,cst_second))
             var switch$0=1,switch$1=0;
            else
             var switch$1=1;
           else
            var switch$0=0,switch$1=0;
          else
           var switch$1=1;
          if(switch$1)
           return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$12,sexp)}
        else
         var switch$0=0;
        if(! switch$0)
         return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$12,sexp)}
      else
       {var _bZa_=sexp[1];
        if(! _bZa_)
         return caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc$12,sexp);
        var _bZb_=_bZa_[1];
        if(0 !== _bZb_[0])
         return caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc$12,sexp);
        var _bZc_=_bZb_[1];
        if(caml_string_notequal(_bZc_,cst_First$1))
         {if(caml_string_notequal(_bZc_,cst_Second$1))
           if(caml_string_notequal(_bZc_,cst_first$0))
            if(caml_string_notequal(_bZc_,cst_second$0))
             var switch$2=1,switch$3=0;
            else
             var switch$3=1;
           else
            var switch$2=0,switch$3=0;
          else
           var switch$3=1;
          if(switch$3)
           {var sexp_args=_bZa_[2];
            if(sexp_args)
             if(! sexp_args[2])
              {var v0=sexp_args[1],v0$0=caml_call1(of_s,v0);return [1,v0$0]}
            return caml_call3
                    (Sexplib0_Sexp_conv_error[4],tp_loc$12,_bZc_,sexp)}}
        else
         var switch$2=0;
        if(! switch$2)
         {var sexp_args$0=_bZa_[2];
          if(sexp_args$0)
           if(! sexp_args$0[2])
            {var v0$1=sexp_args$0[1],v0$2=caml_call1(of_f,v0$1);
             return [0,v0$2]}
          return caml_call3(Sexplib0_Sexp_conv_error[4],tp_loc$12,_bZc_,sexp)}}
      return caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc$12,sexp)}
    function sexp_of_t$22(of_f,of_s,param)
     {if(0 === param[0])
       {var v0=param[1],v0$0=caml_call1(of_f,v0);
        return [1,[0,_n3_,[0,v0$0,0]]]}
      var v0$1=param[1],v0$2=caml_call1(of_s,v0$1);
      return [1,[0,_n4_,[0,v0$2,0]]]}
    var
     Typename_of_t$0=caml_call1(Typerep_lib_Make_typename[3],[0,name$9]),
     typename_of_t$0=Typename_of_t$0[2];
    function typerep_of_t$0(of_f,of_s)
     {var name_of_t=caml_call2(Typename_of_t$0[1],of_f,of_s);
      return [9,
              [0,
               name_of_t,
               [0,
                [246,
                 function(_bY6_)
                  {var
                    _bY7_=[0,function(v0){return [0,v0]}],
                    _bY8_=
                     [0,
                      cst_First$2,
                      of_f,
                      1,
                      0,
                      0,
                      0,
                      caml_call2(Typerep_lib_Typename[1],0,0),
                      _bY7_],
                    tag0=caml_call1(include$26[1][4][9],_bY8_),
                    _bY9_=[0,function(v0){return [1,v0]}],
                    _bY__=
                     [0,
                      cst_Second$2,
                      of_s,
                      1,
                      0,
                      1,
                      1,
                      caml_call2(Typerep_lib_Typename[1],0,0),
                      _bY9_],
                    tag1=caml_call1(include$26[1][4][9],_bY__),
                    typename=caml_call1(include$26[1][1][2],name_of_t),
                    tags=[0,[0,tag0],[0,tag1]],
                    polymorphic=0;
                   function value(param)
                    {if(0 === param[0]){var v0=param[1];return [0,tag0,v0]}
                     var v0$0=param[1];
                     return [0,tag1,v0$0]}
                   return [8,
                           caml_call1
                            (include$26[1][6][7],[0,typename,tags,polymorphic,value])]}]]]]}
    function map$8(x,f1,f2)
     {if(0 === x[0]){var x1=x[1];return [0,caml_call1(f1,x1)]}
      var x2=x[1];
      return [1,caml_call1(f2,x2)]}
    var
     compare$17=include$27[1],
     hash_fold_t$11=include$27[2],
     t_of_sexp$21=include$27[3],
     sexp_of_t$23=include$27[4],
     invariant$0=include$27[5],
     swap$0=include$27[6],
     value=include$27[7],
     iter$1=include$27[8],
     value_map=include$27[9],
     map$9=include$27[10],
     equal$3=include$27[11],
     First=include$27[12],
     Second=include$27[13],
     is_first=include$27[14],
     is_second=include$27[15],
     first=include$27[16],
     second=include$27[17],
     Export=include$27[18],
     include$28=caml_call1(Derived2,[0,compare$17,sexp_of_t$23]),
     comparator$1=include$28[1];
    function to_poly(param)
     {if(0 === param[0]){var a=param[1];return [0,65,a]}
      var b=param[1];
      return [0,66,b]}
    function of_poly(param)
     {if(66 <= param[1]){var b=param[2];return [1,b]}
      var a=param[2];
      return [0,a]}
    function gen$0(a,b)
     {var
       _bY4_=[0,caml_call2(_nQ_[5][2],b,second),0],
       _bY5_=[0,caml_call2(_nQ_[5][2],a,first),_bY4_];
      return caml_call1(_nQ_[37],_bY5_)}
    function obs$0(a,b)
     {var _bY3_=caml_call2(_nP_[11],a,b);
      return caml_call2(_nP_[19],_bY3_,to_poly)}
    function shrinker$0(a,b)
     {var _bY2_=caml_call2(_nO_[12],a,b);
      return caml_call3(_nO_[6],_bY2_,of_poly,to_poly)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$85);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Either=
      [0,
       bin_t$19,
       bin_read_t$56,
       bin_read_t$55,
       bin_reader_t$19,
       bin_size_t$27,
       bin_write_t$27,
       bin_writer_t$19,
       bin_shape_t$24,
       typerep_of_t$0,
       typename_of_t$0,
       compare$17,
       hash_fold_t$11,
       t_of_sexp$21,
       sexp_of_t$23,
       invariant$0,
       swap$0,
       value,
       iter$1,
       value_map,
       map$9,
       equal$3,
       First,
       Second,
       is_first,
       is_second,
       first,
       second,
       Export,
       comparator$1,
       gen$0,
       obs$0,
       shrinker$0,
       [0,
        [0,
         bin_t$19,
         bin_read_t$56,
         bin_read_t$55,
         bin_reader_t$19,
         bin_size_t$27,
         bin_write_t$27,
         bin_writer_t$19,
         bin_shape_t$24,
         compare$16,
         t_of_sexp$20,
         sexp_of_t$22,
         map$8]]];
    caml_register_global(7382,Core_kernel_Either,"Core_kernel__Either");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$86);
    caml_call1(Expect_test_collector[4][1],cst_src_hashtbl_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$87,cst$29);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$88);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Hashtbl_intf=[0,0,0,0];
    caml_register_global
     (7383,Core_kernel_Hashtbl_intf,"Core_kernel__Hashtbl_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$89);
    caml_call1(Expect_test_collector[4][1],cst_src_hash_set_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$90,cst$30);
    var
     _n5_=include$29[1],
     _n6_=include$29[2],
     _n7_=include$29[3],
     _n8_=include$29[4],
     _n9_=include$29[5],
     _n__=include$29[6],
     _n$_=include$29[7],
     _oa_=include$29[8],
     _ob_=include$29[9],
     _oc_=include$29[10],
     _od_=include$29[11],
     _oe_=include$29[12],
     _of_=include$29[13],
     _og_=include$29[14],
     _oh_=include$29[15],
     _oi_=include$29[16],
     _oj_=include$29[17],
     _ok_=include$29[18],
     _ol_=include$29[19],
     _om_=include$29[20],
     _on_=include$29[21],
     _oo_=include$29[22],
     _op_=include$29[23],
     _oq_=include$29[24],
     _or_=include$29[25],
     _os_=include$29[26],
     _ot_=include$29[27],
     _ou_=include$29[28],
     _ov_=include$29[29],
     _ow_=include$29[30],
     _ox_=include$29[31],
     _oy_=include$29[32],
     _oz_=include$29[33],
     _oA_=include$29[34],
     _oB_=include$29[35],
     _oC_=include$29[36],
     _oD_=include$29[37],
     _oE_=include$29[38],
     _oF_=include$29[39],
     _oG_=include$29[40],
     _oH_=include$29[41],
     _oI_=include$29[42];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$91);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Hash_set_intf=
      [0,
       0,
       _n5_,
       _n6_,
       _n7_,
       _n8_,
       _n9_,
       _n__,
       _n$_,
       _oa_,
       _ob_,
       _oc_,
       _od_,
       _oe_,
       _of_,
       _og_,
       _oh_,
       _oi_,
       _oj_,
       _ok_,
       _ol_,
       _om_,
       _on_,
       _oo_,
       _op_,
       _oq_,
       _or_,
       _os_,
       _ot_,
       _ou_,
       _ov_,
       _ow_,
       _ox_,
       _oy_,
       _oz_,
       _oA_,
       _oB_,
       _oC_,
       _oD_,
       _oE_,
       _oF_,
       _oG_,
       _oH_,
       _oI_];
    caml_register_global
     (7385,Core_kernel_Hash_set_intf,"Core_kernel__Hash_set_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$92);
    caml_call1(Expect_test_collector[4][1],cst_src_list0_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$93,cst$31);
    var
     _oJ_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$24),
     _oK_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_list0_ml_7_12),
     _oL_=caml_call1(_de_,caml_call2(Bin_prot_Shape[15],_oK_,_oJ_)),
     _oM_=[0,caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$25),0],
     _oN_=
      [0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$73),_oM_,_oL_],0],
     _oO_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_list0_ml_7_0),
     group$32=caml_call2(Bin_prot_Shape[6],_oO_,_oN_),
     Array=0,
     List$0=0;
    function bin_shape_t$25(a)
     {var _bY1_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$74);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$32,_bY1_),[0,a,0])}
    function bin_size_t$28(size_of_a,v){return caml_call2(_bn_,size_of_a,v)}
    function bin_write_t$28(write_a,buf,pos,v)
     {return caml_call3(caml_call1(_dg_,write_a),buf,pos,v)}
    function bin_writer_t$20(bin_writer_a)
     {function _bYX_(v)
       {var _bYY_=bin_writer_a[2];
        return function(_bYZ_,_bY0_)
         {return bin_write_t$28(_bYY_,v,_bYZ_,_bY0_)}}
      return [0,function(v){return bin_size_t$28(bin_writer_a[1],v)},_bYX_]}
    function bin_read_t$57(of_a,buf,pos_ref,vint)
     {return caml_call3(caml_call1(_dj_,of_a),buf,pos_ref,vint)}
    function bin_read_t$58(of_a,buf,pos_ref)
     {return caml_call2(caml_call1(_di_,of_a),buf,pos_ref)}
    function bin_reader_t$20(bin_reader_a)
     {function _bYW_(buf,pos_ref,vtag)
       {return bin_read_t$57(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$58(bin_reader_a[1],buf,pos_ref)},
              _bYW_]}
    function bin_t$20(bin_a)
     {var _bYU_=bin_reader_t$20(bin_a[3]),_bYV_=bin_writer_t$20(bin_a[2]);
      return [0,bin_shape_t$25(bin_a[1]),_bYV_,_bYU_]}
    var
     Typename_of_t$1=caml_call1(Typerep_lib_Make_typename[2],[0,name$10]),
     _oP_=Typename_of_t$1[2];
    function typerep_of_t$1(of_a)
     {var name_of_t=caml_call1(Typename_of_t$1[1],of_a);
      return [9,
              [0,
               name_of_t,
               [0,
                [246,
                 function(_bYT_){return caml_call1(Typerep_lib_Std[22],of_a)}]]]]}
    var
     _oQ_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_b$4),
     _oR_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_list0_ml_10_26),
     _oS_=[0,caml_call2(Bin_prot_Shape[15],_oR_,_oQ_),0],
     _oT_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$26),
     _oU_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_list0_ml_10_21),
     _oV_=[0,caml_call2(Bin_prot_Shape[15],_oU_,_oT_),_oS_],
     _oW_=caml_call1(_de_,caml_call1(Bin_prot_Shape[7],_oV_)),
     _oX_=[0,caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_b$5),0],
     _oY_=[0,caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$27),_oX_],
     _oZ_=
      [0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$75),_oY_,_oW_],0],
     _o0_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_list0_ml_10_2),
     group$33=caml_call2(Bin_prot_Shape[6],_o0_,_oZ_);
    function bin_shape_t$26(a,b)
     {var _bYS_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$76);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$33,_bYS_),[0,a,[0,b,0]])}
    function bin_size_t$29(size_of_a,size_of_b,v)
     {return caml_call2
              (_bn_,
               function(param)
                {var
                  v2=param[2],
                  v1=param[1],
                  size=caml_call1(size_of_a,v1) | 0;
                 return size + caml_call1(size_of_b,v2) | 0},
               v)}
    function bin_write_t$29(write_a,write_b,buf,pos,v)
     {return caml_call3
              (caml_call1
                (_dg_,
                 function(buf,pos,param)
                  {var
                    v2=param[2],
                    v1=param[1],
                    pos$0=caml_call3(write_a,buf,pos,v1);
                   return caml_call3(write_b,buf,pos$0,v2)}),
               buf,
               pos,
               v)}
    function bin_writer_t$21(bin_writer_a,bin_writer_b)
     {function _bYN_(v)
       {var _bYO_=bin_writer_b[2],_bYP_=bin_writer_a[2];
        return function(_bYQ_,_bYR_)
         {return bin_write_t$29(_bYP_,_bYO_,v,_bYQ_,_bYR_)}}
      return [0,
              function(v)
               {return bin_size_t$29(bin_writer_a[1],bin_writer_b[1],v)},
              _bYN_]}
    function bin_read_t$59(of_a,of_b,buf,pos_ref,vint)
     {return caml_call3
              (caml_call1
                (_dj_,
                 function(buf,pos_ref)
                  {var
                    v1=caml_call2(of_a,buf,pos_ref),
                    v2=caml_call2(of_b,buf,pos_ref);
                   return [0,v1,v2]}),
               buf,
               pos_ref,
               vint)}
    function bin_read_t$60(of_a,of_b,buf,pos_ref)
     {return caml_call2
              (caml_call1
                (_di_,
                 function(buf,pos_ref)
                  {var
                    v1=caml_call2(of_a,buf,pos_ref),
                    v2=caml_call2(of_b,buf,pos_ref);
                   return [0,v1,v2]}),
               buf,
               pos_ref)}
    function bin_reader_t$21(bin_reader_a,bin_reader_b)
     {function _bYM_(buf,pos_ref,vtag)
       {return bin_read_t$59(bin_reader_a[1],bin_reader_b[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$60
                        (bin_reader_a[1],bin_reader_b[1],buf,pos_ref)},
              _bYM_]}
    function bin_t$21(bin_a,bin_b)
     {var
       _bYK_=bin_reader_t$21(bin_a[3],bin_b[3]),
       _bYL_=bin_writer_t$21(bin_a[2],bin_b[2]);
      return [0,bin_shape_t$26(bin_a[1],bin_b[1]),_bYL_,_bYK_]}
    function compare$18(compare_a,compare_b,a_001,b_002)
     {return caml_call3
              (_F_,
               function(a_003,b_004)
                {var
                  t_006=a_003[2],
                  t_005=a_003[1],
                  t_008=b_004[2],
                  t_007=b_004[1],
                  n=caml_call2(compare_a,t_005,t_007);
                 return 0 === n?caml_call2(compare_b,t_006,t_008):n},
               a_001,
               b_002)}
    var
     include$30=Base_List[123],
     t_of_sexp$22=include$30[1],
     sexp_of_t$24=include$30[2],
     add$0=include$30[3],
     find$1=include$30[4],
     find_exn$1=include$30[5],
     mem$1=include$30[6],
     remove=include$30[7],
     map$10=include$30[8],
     inverse=include$30[9],
     Assoc=
      [0,
       bin_shape_t$26,
       bin_size_t$29,
       bin_write_t$29,
       bin_writer_t$21,
       bin_read_t$59,
       bin_read_t$60,
       bin_reader_t$21,
       bin_t$21,
       compare$18,
       t_of_sexp$22,
       sexp_of_t$24,
       add$0,
       find$1,
       find_exn$1,
       mem$1,
       remove,
       map$10,
       inverse],
     intersperse$0=Base_List[143],
     transpose_exn$0=Base_List[142],
     transpose$0=Base_List[141],
     Infix$0=Base_List[140],
     equal$4=Base_List[139],
     is_sorted_strictly$0=Base_List[138],
     is_sorted$0=Base_List[137],
     random_element_exn$0=Base_List[136],
     random_element$0=Base_List[135],
     permute$0=Base_List[134],
     cartesian_product$1=Base_List[133],
     cons=Base_List[132],
     concat_no_order=Base_List[131],
     concat$1=Base_List[130],
     split_while=Base_List[129],
     drop_while$0=Base_List[128],
     take_while$0=Base_List[127],
     drop$0=Base_List[126],
     take$0=Base_List[125],
     sub$3=Base_List[124],
     filter_opt$1=Base_List[122],
     filter_mapi$1=Base_List[121],
     filter_map$2=Base_List[120],
     rev_filter_mapi=Base_List[119],
     rev_filter_map=Base_List[118],
     init$1=Base_List[117],
     range$0=Base_List[116],
     range$1=Base_List[115],
     counti$1=Base_List[114],
     count$1=Base_List[113],
     find_all_dups=Base_List[112],
     contains_dup=Base_List[111],
     find_a_dup=Base_List[110],
     dedup=Base_List[109],
     dedup_and_sort=Base_List[108],
     remove_consecutive_duplicates$0=Base_List[107],
     find_consecutive_duplicate$1=Base_List[106],
     is_prefix=Base_List[105],
     last_exn=Base_List[104],
     last$0=Base_List[103],
     chunks_of=Base_List[102],
     groupi=Base_List[101],
     group$34=Base_List[100],
     reduce_balanced_exn=Base_List[99],
     reduce_balanced=Base_List[98],
     reduce$1=Base_List[97],
     reduce_exn$1=Base_List[96],
     foldi$1=Base_List[95],
     iteri$1=Base_List[94],
     rev_mapi=Base_List[93],
     mapi$1=Base_List[92],
     zip_exn$0=Base_List[91],
     zip$1=Base_List[90],
     unzip3=Base_List[89],
     unzip$0=Base_List[88],
     fold_right$0=Base_List[87],
     rev_map_append=Base_List[86],
     map3=Base_List[85],
     map3_exn=Base_List[84],
     rev_map3=Base_List[83],
     rev_map3_exn=Base_List[82],
     map2=Base_List[81],
     map2_exn$0=Base_List[80],
     concat_mapi$1=Base_List[79],
     concat_map$1=Base_List[78],
     fold_mapi$0=Base_List[77],
     fold_map$0=Base_List[76],
     folding_mapi$1=Base_List[75],
     folding_map$1=Base_List[74],
     map$11=Base_List[73],
     append$1=Base_List[72],
     find_mapi_exn$0=Base_List[71],
     find_mapi$1=Base_List[70],
     find_map_exn$0=Base_List[69],
     find_exn$2=Base_List[68],
     findi$1=Base_List[67],
     tl_exn=Base_List[66],
     hd_exn$0=Base_List[65],
     tl$0=Base_List[64],
     hd$0=Base_List[63],
     merge$1=Base_List[62],
     stable_sort$0=Base_List[61],
     sort$0=Base_List[60],
     split_n$0=Base_List[59],
     partition_tf$0=Base_List[58],
     partition3_map=Base_List[57],
     partition_map=Base_List[56],
     filteri$1=Base_List[55],
     rev_filter=Base_List[54],
     filter$2=Base_List[53],
     exists2=Base_List[52],
     exists2_exn$0=Base_List[51],
     existsi$1=Base_List[50],
     for_all2=Base_List[49],
     for_all2_exn$0=Base_List[48],
     for_alli$1=Base_List[47],
     fold2=Base_List[46],
     fold2_exn$0=Base_List[45],
     rev_map2=Base_List[44],
     rev_map2_exn=Base_List[43],
     iter2=Base_List[42],
     iter2_exn$0=Base_List[41],
     fold_left=Base_List[40],
     rev_map=Base_List[39],
     unordered_append=Base_List[38],
     rev_append=Base_List[37],
     rev=Base_List[36],
     nth_exn$0=Base_List[35],
     nth$0=Base_List[34],
     of_list$4=Base_List[33],
     Or_unequal_lengths=Base_List[32],
     Let_syntax$1=Base_List[31],
     all_ignore$0=Base_List[30],
     all_unit$0=Base_List[29],
     all$0=Base_List[28],
     ignore_m$1=Base_List[27],
     join$1=Base_List[26],
     return$4=Base_List[25],
     bind$2=Base_List[24],
     Monad_infix$1=Base_List[23],
     _o1_=Base_List[22],
     _o2_=Base_List[21],
     max_elt$1=Base_List[20],
     min_elt$1=Base_List[19],
     to_array$1=Base_List[18],
     to_list$2=Base_List[17],
     find_map$1=Base_List[16],
     find$2=Base_List[15],
     sum$2=Base_List[14],
     for_all$1=Base_List[13],
     exists$1=Base_List[12],
     fold_until$1=Base_List[11],
     fold_result$1=Base_List[10],
     fold$2=Base_List[9],
     iter$2=Base_List[8],
     is_empty$2=Base_List[7],
     length$4=Base_List[6],
     mem$2=Base_List[5],
     sexp_of_t$25=Base_List[4],
     t_of_sexp$23=Base_List[3],
     hash_fold_t$12=Base_List[2],
     compare$19=Base_List[1];
    function to_string$0(f,t)
     {var
       _bYI_=caml_call2(Base_List[73],t,f),
       _bYJ_=caml_call2(sexp_of_t$25,function(x){return [0,x]},_bYI_);
      return caml_call1(include$16[50],_bYJ_)}
    var
     include$31=caml_call1(Derived,[0,compare$19,sexp_of_t$25]),
     _o3_=include$31[1],
     Generator$0=0,
     Observer=0,
     Shrinker=0,
     _o4_=_nQ_[68],
     _o5_=_nQ_[69],
     _o6_=_nQ_[70];
    function gen_permutations(list)
     {if(list)
       {var
         len=caml_call1(Base_List[6],list),
         _bYD_=
          function(i)
           {var _bYH_=caml_call2(_ai_,len,1);
            return caml_call2(_nN_[5],i,_bYH_)},
         _bYE_=caml_call2(init$1,caml_call2(_ai_,len,1),_bYD_),
         index_generator=caml_call1(_nQ_[15],_bYE_),
         _bYF_=
          function(indices)
           {var arr=caml_call1(include$12[37],list);
            function _bYG_(i,j){return caml_call3(include$12[71],arr,i,j)}
            caml_call2(Base_List[94],indices,_bYG_);
            return caml_call1(include$12[19],arr)};
        return caml_call2(_nQ_[5][2],index_generator,_bYF_)}
      return caml_call1(_nQ_[34],0)}
    function obs$1(elem_obs)
     {function _bYy_(t_obs)
       {function _bYz_(param)
         {if(param){var list=param[2],x=param[1];return [0,66,[0,x,list]]}
          return _o7_}
        var
         _bYA_=caml_call2(_nP_[20],elem_obs,t_obs),
         _bYB_=caml_call1(_nP_[18],0),
         _bYC_=caml_call2(_nP_[11],_bYB_,_bYA_);
        return caml_call2(_nP_[19],_bYC_,_bYz_)}
      return caml_call1(_nP_[9],_bYy_)}
    function shrinker$1(t_elt)
     {function _bYs_(t_list)
       {function _bYt_(param)
         {if(param)
           {var
             tl=param[2],
             h=param[1],
             dropped=caml_call1(singleton,tl),
             _bYu_=function(shr_h){return [0,shr_h,tl]},
             _bYv_=caml_call2(_nO_[1],t_elt,h),
             shrunk_head=caml_call2(Base_Sequence[28][2],_bYv_,_bYu_),
             _bYw_=function(shr_tl){return [0,h,shr_tl]},
             _bYx_=caml_call2(_nO_[1],t_list,tl),
             shrunk_tail=caml_call2(Base_Sequence[28][2],_bYx_,_bYw_);
            return caml_call1
                    (round_robin,[0,dropped,[0,shrunk_head,[0,shrunk_tail,0]]])}
          return empty}
        return caml_call1(_nO_[2],_bYt_)}
      return caml_call1(_nO_[17],_bYs_)}
    function _o8_(param)
     {function _bYj_(v){return 0 === v?empty:caml_call1(singleton,0)}
      var t0=caml_call1(_nO_[2],_bYj_);
      function _bYk_(a_013,b_014){return caml_call3(_F_,_t_,a_013,b_014)}
      var expect=caml_call2(Base_List[60],_bYk_,_o9_);
      function _bYl_(param)
       {var
         _bYp_=shrinker$1(t0),
         _bYq_=caml_call1(to_list$0,caml_call2(_nO_[1],_bYp_,test_list));
        function _bYr_(a_017,b_018){return caml_call3(_F_,_t_,a_017,b_018)}
        var
         got=caml_call2(Base_List[60],_bYr_,_bYq_),
         sexpifier=caml_call1(_I_,caml_call1(_I_,sexp_of_t$0)),
         equal=0,
         message=0,
         here=0;
        function comparator(a_021,b_022)
         {return caml_call3
                  (_F_,
                   function(a_023,b_024)
                    {return caml_call3(_F_,_t_,a_023,b_024)},
                   a_021,
                   b_022)}
        return caml_call8
                (Ppx_assert_lib_Runtime[3],
                 pos$40,
                 sexpifier,
                 comparator,
                 here,
                 message,
                 equal,
                 expect,
                 got)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_shrinker_produces_expected_outputs,
        0,
        cst_src_list0_ml$0,
        98,
        6,
        277,
        _bYl_);
      var recursive_list=[];
      caml_update_dummy(recursive_list,[0,1,[0,5,recursive_list]]);
      function _bYm_(param)
       {var
         _bYn_=shrinker$1(t0),
         shrunk=caml_call2(_nO_[1],_bYn_,recursive_list),
         _bYo_=caml_call1(to_list$0,caml_call2(take,shrunk,5)),
         got=caml_call1(Base_List[6],_bYo_);
        return caml_call8
                (Ppx_assert_lib_Runtime[3],pos$41,sexp_of_t$0,_t_,0,0,0,5,got)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_shrinker_on_infinite_lists_produces_values,
        0,
        cst_src_list0_ml$1,
        108,
        6,
        276,
        _bYm_);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst_shrinker,
      0,
      cst_src_list0_ml$2,
      84,
      2,
      975,
      _o8_);
    var
     For_quickcheck=
      [0,
       Generator$0,
       Observer,
       Shrinker,
       _o4_,
       _o5_,
       _o6_,
       gen_permutations,
       obs$1,
       shrinker$1],
     _o__=For_quickcheck[4],
     _o$_=For_quickcheck[5],
     _pa_=For_quickcheck[6],
     _pb_=For_quickcheck[7],
     _pc_=For_quickcheck[8],
     _pd_=For_quickcheck[9];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$94);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     include$32=
      [0,
       Array,
       List$0,
       bin_shape_t$25,
       bin_size_t$28,
       bin_write_t$28,
       bin_writer_t$20,
       bin_read_t$57,
       bin_read_t$58,
       bin_reader_t$20,
       bin_t$20,
       Typename_of_t$1,
       _oP_,
       typerep_of_t$1,
       Assoc,
       compare$19,
       hash_fold_t$12,
       t_of_sexp$23,
       sexp_of_t$25,
       mem$2,
       length$4,
       is_empty$2,
       iter$2,
       fold$2,
       fold_result$1,
       fold_until$1,
       exists$1,
       for_all$1,
       sum$2,
       find$2,
       find_map$1,
       to_list$2,
       to_array$1,
       min_elt$1,
       max_elt$1,
       _o2_,
       _o1_,
       Monad_infix$1,
       bind$2,
       return$4,
       join$1,
       ignore_m$1,
       all$0,
       all_unit$0,
       all_ignore$0,
       Let_syntax$1,
       Or_unequal_lengths,
       of_list$4,
       nth$0,
       nth_exn$0,
       rev,
       rev_append,
       unordered_append,
       rev_map,
       fold_left,
       iter2_exn$0,
       iter2,
       rev_map2_exn,
       rev_map2,
       fold2_exn$0,
       fold2,
       for_alli$1,
       for_all2_exn$0,
       for_all2,
       existsi$1,
       exists2_exn$0,
       exists2,
       filter$2,
       rev_filter,
       filteri$1,
       partition_map,
       partition3_map,
       partition_tf$0,
       split_n$0,
       sort$0,
       stable_sort$0,
       merge$1,
       hd$0,
       tl$0,
       hd_exn$0,
       tl_exn,
       findi$1,
       find_exn$2,
       find_map_exn$0,
       find_mapi$1,
       find_mapi_exn$0,
       append$1,
       map$11,
       folding_map$1,
       folding_mapi$1,
       fold_map$0,
       fold_mapi$0,
       concat_map$1,
       concat_mapi$1,
       map2_exn$0,
       map2,
       rev_map3_exn,
       rev_map3,
       map3_exn,
       map3,
       rev_map_append,
       fold_right$0,
       unzip$0,
       unzip3,
       zip$1,
       zip_exn$0,
       mapi$1,
       rev_mapi,
       iteri$1,
       foldi$1,
       reduce_exn$1,
       reduce$1,
       reduce_balanced,
       reduce_balanced_exn,
       group$34,
       groupi,
       chunks_of,
       last$0,
       last_exn,
       is_prefix,
       find_consecutive_duplicate$1,
       remove_consecutive_duplicates$0,
       dedup_and_sort,
       dedup,
       find_a_dup,
       contains_dup,
       find_all_dups,
       count$1,
       counti$1,
       range$1,
       range$0,
       init$1,
       rev_filter_map,
       rev_filter_mapi,
       filter_map$2,
       filter_mapi$1,
       filter_opt$1,
       sub$3,
       take$0,
       drop$0,
       take_while$0,
       drop_while$0,
       split_while,
       concat$1,
       concat_no_order,
       cons,
       cartesian_product$1,
       permute$0,
       random_element$0,
       random_element_exn$0,
       is_sorted$0,
       is_sorted_strictly$0,
       equal$4,
       Infix$0,
       transpose$0,
       transpose_exn$0,
       intersperse$0,
       to_string$0,
       _o3_,
       For_quickcheck,
       _o__,
       _o$_,
       _pa_,
       _pb_,
       _pc_,
       _pd_];
    caml_register_global(7386,include$32,"Core_kernel__List0");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$95);
    caml_call1(Expect_test_collector[4][1],cst_src_hashtbl_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$96,cst$32);
    var
     hashable_s=Base_Hashtbl[76],
     find_multi=Base_Hashtbl[75],
     remove_multi=Base_Hashtbl[74],
     add_multi=Base_Hashtbl[73],
     decr$0=Base_Hashtbl[72],
     incr$0=Base_Hashtbl[71],
     validate=Base_Hashtbl[70],
     to_alist=Base_Hashtbl[69],
     similar=Base_Hashtbl[68],
     equal$5=Base_Hashtbl[67],
     filter_mapi_inplace=Base_Hashtbl[66],
     filter_map_inplace=Base_Hashtbl[65],
     mapi_inplace=Base_Hashtbl[64],
     map_inplace$0=Base_Hashtbl[63],
     filteri_inplace=Base_Hashtbl[62],
     filter_inplace=Base_Hashtbl[61],
     filter_keys_inplace=Base_Hashtbl[60],
     data$1=Base_Hashtbl[59],
     keys=Base_Hashtbl[58],
     merge_into=Base_Hashtbl[57],
     merge$2=Base_Hashtbl[56],
     find_and_remove=Base_Hashtbl[55],
     findi_and_call=Base_Hashtbl[54],
     find_and_call=Base_Hashtbl[53],
     find_exn$3=Base_Hashtbl[52],
     find$3=Base_Hashtbl[51],
     findi_or_add=Base_Hashtbl[50],
     find_or_add=Base_Hashtbl[49],
     partitioni_tf$0=Base_Hashtbl[48],
     partition_tf$1=Base_Hashtbl[47],
     partition_mapi=Base_Hashtbl[46],
     partition_map$0=Base_Hashtbl[45],
     filteri$2=Base_Hashtbl[44],
     filter$3=Base_Hashtbl[43],
     filter_keys=Base_Hashtbl[42],
     filter_mapi$2=Base_Hashtbl[41],
     filter_map$3=Base_Hashtbl[40],
     mapi$2=Base_Hashtbl[39],
     map$12=Base_Hashtbl[38],
     update=Base_Hashtbl[37],
     change=Base_Hashtbl[36],
     add_exn=Base_Hashtbl[35],
     add$1=Base_Hashtbl[34],
     set$0=Base_Hashtbl[33],
     remove$0=Base_Hashtbl[32],
     mem$3=Base_Hashtbl[31],
     is_empty$3=Base_Hashtbl[30],
     length$5=Base_Hashtbl[29],
     count$2=Base_Hashtbl[28],
     counti$2=Base_Hashtbl[27],
     for_all$2=Base_Hashtbl[26],
     for_alli$2=Base_Hashtbl[25],
     exists$2=Base_Hashtbl[24],
     existsi$2=Base_Hashtbl[23],
     iteri$2=Base_Hashtbl[22],
     iter$3=Base_Hashtbl[21],
     iter_keys=Base_Hashtbl[20],
     fold$3=Base_Hashtbl[19],
     copy$0=Base_Hashtbl[18],
     clear=Base_Hashtbl[17],
     sexp_of_key=Base_Hashtbl[16],
     _pe_=Base_Hashtbl[15],
     _pf_=Base_Hashtbl[14],
     _pg_=Base_Hashtbl[13],
     _ph_=Base_Hashtbl[12],
     _pi_=Base_Hashtbl[11],
     _pj_=Base_Hashtbl[10],
     _pk_=Base_Hashtbl[9],
     _pl_=Base_Hashtbl[8],
     _pm_=Base_Hashtbl[7],
     _pn_=Base_Hashtbl[6],
     _po_=Base_Hashtbl[5],
     invariant$1=Base_Hashtbl[4],
     sexp_of_t$26=Base_Hashtbl[3],
     hash_param=Base_Hashtbl[2],
     hash$8=Base_Hashtbl[1],
     Hashable=0;
    function create$6(growth_allowed,size,hashable,param)
     {return caml_call3
              (_po_,growth_allowed,size,caml_call1(Base_Hashable[4],hashable))}
    function of_alist(growth_allowed,size,hashable,l)
     {return caml_call4
              (_pn_,
               growth_allowed,
               size,
               caml_call1(Base_Hashable[4],hashable),
               l)}
    function of_alist_report_all_dups(growth_allowed,size,hashable,l)
     {return caml_call4
              (_pm_,
               growth_allowed,
               size,
               caml_call1(Base_Hashable[4],hashable),
               l)}
    function of_alist_or_error(growth_allowed,size,hashable,l)
     {return caml_call4
              (_pl_,
               growth_allowed,
               size,
               caml_call1(Base_Hashable[4],hashable),
               l)}
    function of_alist_exn(growth_allowed,size,hashable,l)
     {return caml_call4
              (_pk_,
               growth_allowed,
               size,
               caml_call1(Base_Hashable[4],hashable),
               l)}
    function of_alist_multi(growth_allowed,size,hashable,l)
     {return caml_call4
              (_pj_,
               growth_allowed,
               size,
               caml_call1(Base_Hashable[4],hashable),
               l)}
    function create_mapped(growth_allowed,size,hashable,get_key,get_data,l)
     {return caml_call6
              (_pi_,
               growth_allowed,
               size,
               caml_call1(Base_Hashable[4],hashable),
               get_key,
               get_data,
               l)}
    function create_with_key(growth_allowed,size,hashable,get_key,l)
     {return caml_call5
              (_ph_,
               growth_allowed,
               size,
               caml_call1(Base_Hashable[4],hashable),
               get_key,
               l)}
    function create_with_key_or_error(growth_allowed,size,hashable,get_key,l)
     {return caml_call5
              (_pg_,
               growth_allowed,
               size,
               caml_call1(Base_Hashable[4],hashable),
               get_key,
               l)}
    function create_with_key_exn(growth_allowed,size,hashable,get_key,l)
     {return caml_call5
              (_pf_,
               growth_allowed,
               size,
               caml_call1(Base_Hashable[4],hashable),
               get_key,
               l)}
    function group$35(growth_allowed,size,hashable,get_key,get_data,combine,l)
     {return caml_call7
              (_pe_,
               growth_allowed,
               size,
               caml_call1(Base_Hashable[4],hashable),
               get_key,
               get_data,
               combine,
               l)}
    var
     _pp_=Base_Hashtbl[78],
     _pr_=_pp_[2],
     _pu_=_pp_[5],
     _pL_=_pp_[22],
     _pS_=_pp_[29],
     _pW_=_pp_[33],
     _qc_=_pp_[51],
     _pq_=_pp_[1],
     _ps_=_pp_[3],
     _pt_=_pp_[4],
     _pv_=_pp_[6],
     _pw_=_pp_[7],
     _px_=_pp_[8],
     _py_=_pp_[9],
     _pz_=_pp_[10],
     _pA_=_pp_[11],
     _pB_=_pp_[12],
     _pC_=_pp_[13],
     _pD_=_pp_[14],
     _pE_=_pp_[15],
     _pF_=_pp_[16],
     _pG_=_pp_[17],
     _pH_=_pp_[18],
     _pI_=_pp_[19],
     _pJ_=_pp_[20],
     _pK_=_pp_[21],
     _pM_=_pp_[23],
     _pN_=_pp_[24],
     _pO_=_pp_[25],
     _pP_=_pp_[26],
     _pQ_=_pp_[27],
     _pR_=_pp_[28],
     _pT_=_pp_[30],
     _pU_=_pp_[31],
     _pV_=_pp_[32],
     _pX_=_pp_[34],
     _pY_=_pp_[35],
     _pZ_=_pp_[36],
     _p0_=_pp_[37],
     _p1_=_pp_[38],
     _p2_=_pp_[39],
     _p3_=_pp_[40],
     _p4_=_pp_[41],
     _p5_=_pp_[42],
     _p6_=_pp_[43],
     _p7_=_pp_[44],
     _p8_=_pp_[45],
     _p9_=_pp_[46],
     _p__=_pp_[47],
     _p$_=_pp_[48],
     _qa_=_pp_[49],
     _qb_=_pp_[50],
     _qd_=_pp_[52],
     _qe_=_pp_[53],
     _qf_=_pp_[54],
     _qg_=_pp_[55],
     _qh_=_pp_[56],
     _qi_=_pp_[57],
     _qj_=_pp_[58],
     _qk_=_pp_[59],
     _ql_=_pp_[60],
     _qm_=_pp_[61],
     _qn_=_pp_[62],
     _qo_=_pp_[63],
     _qp_=_pp_[64],
     _qq_=_pp_[65],
     _qr_=_pp_[66],
     _qs_=_pp_[67],
     _qt_=_pp_[68],
     _qu_=_pp_[69],
     _qv_=_pp_[70],
     _qw_=_pp_[71],
     _qx_=_pp_[72],
     _qy_=_pp_[73],
     _qz_=_pp_[74],
     _qA_=_pp_[75],
     _qB_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_b$6),
     _qC_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_hashtbl_ml_59_30),
     _qD_=[0,caml_call2(Bin_prot_Shape[15],_qC_,_qB_),0],
     _qE_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$28),
     _qF_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_hashtbl_ml_59_25),
     _qG_=[0,caml_call2(Bin_prot_Shape[15],_qF_,_qE_),_qD_],
     _qH_=caml_call1(Bin_prot_Shape[7],_qG_),
     _qI_=[0,caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_b$7),0],
     _qJ_=[0,caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$29),_qI_],
     _qK_=[0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_el),_qJ_,_qH_],0],
     _qL_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_hashtbl_ml_59_6),
     group$36=caml_call2(Bin_prot_Shape[6],_qL_,_qK_);
    function bin_shape_el(a,b)
     {var _bYi_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_el$0);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$36,_bYi_),[0,a,[0,b,0]])}
    function bin_size_el(size_of_a,size_of_b,param)
     {var v2=param[2],v1=param[1],size=caml_call1(size_of_a,v1) | 0;
      return size + caml_call1(size_of_b,v2) | 0}
    function bin_write_el(write_a,write_b,buf,pos,param)
     {var v2=param[2],v1=param[1],pos$0=caml_call3(write_a,buf,pos,v1);
      return caml_call3(write_b,buf,pos$0,v2)}
    function bin_read_el(of_a,of_b,buf,pos_ref)
     {var v1=caml_call2(of_a,buf,pos_ref),v2=caml_call2(of_b,buf,pos_ref);
      return [0,v1,v2]}
    var
     caller_identity=
      caml_call1
       (Bin_shape_lib_Bin_shape[5][1],
        cst_8f3e445c_4992_11e6_a279_3703be311e7b);
    function iter$4(t,f)
     {return caml_call2
              (_pL_,t,function(key,data){return caml_call1(f,[0,key,data])})}
    function init$2(len,next)
     {var t=caml_call3(_pu_,0,[0,len],0),_bYg_=caml_call2(_ai_,len,1),_bYf_=0;
      if(! (_bYg_ < 0))
       {var i=_bYf_;
        for(;;)
         {var
           match=caml_call1(next,0),
           data=match[2],
           key=match[1],
           match$0=caml_call2(_qc_,t,key);
          if(match$0)
           caml_call1(_aV_,cst_Core_hashtbl_bin_read_t_duplicate_key);
          else
           caml_call3(_pW_,t,key,data);
          var _bYh_=i + 1 | 0;
          if(_bYg_ !== i){var i=_bYh_;continue}
          break}}
      return t}
    var
     include$33=
      caml_call1
       (Bin_prot_Utils[13],
        [0,
         caller_identity,
         module_name,
         _pS_,
         iter$4,
         init$2,
         bin_size_el,
         bin_write_el,
         bin_read_el,
         bin_shape_el]),
     bin_shape_t$27=include$33[1],
     bin_size_t$30=include$33[2],
     bin_write_t$30=include$33[3],
     bin_read_t$61=include$33[4],
     bin_read_t$62=include$33[5],
     bin_writer_t$22=include$33[6],
     bin_reader_t$22=include$33[7],
     bin_t$22=include$33[8];
    function Make_plain(Key)
     {var
       hashable=[0,Key[3],Key[1],Key[2]],
       _bX3_=caml_call1(Base_Hashtbl[77],[0,hashable]),
       t_of_sexp=_bX3_[1],
       create=_bX3_[2],
       of_alist=_bX3_[3],
       of_alist_report_all_dups=_bX3_[4],
       of_alist_or_error=_bX3_[5],
       of_alist_exn=_bX3_[6],
       of_alist_multi=_bX3_[7],
       create_mapped=_bX3_[8],
       create_with_key=_bX3_[9],
       create_with_key_or_error=_bX3_[10],
       create_with_key_exn=_bX3_[11],
       group=_bX3_[12],
       find_multi=Base_Hashtbl[75],
       remove_multi=Base_Hashtbl[74],
       add_multi=Base_Hashtbl[73],
       decr=Base_Hashtbl[72],
       incr=Base_Hashtbl[71],
       validate=Base_Hashtbl[70],
       to_alist=Base_Hashtbl[69],
       similar=Base_Hashtbl[68],
       equal=Base_Hashtbl[67],
       filter_mapi_inplace=Base_Hashtbl[66],
       filter_map_inplace=Base_Hashtbl[65],
       mapi_inplace=Base_Hashtbl[64],
       map_inplace=Base_Hashtbl[63],
       filteri_inplace=Base_Hashtbl[62],
       filter_inplace=Base_Hashtbl[61],
       filter_keys_inplace=Base_Hashtbl[60],
       data=Base_Hashtbl[59],
       keys=Base_Hashtbl[58],
       merge_into=Base_Hashtbl[57],
       merge=Base_Hashtbl[56],
       find_and_remove=Base_Hashtbl[55],
       findi_and_call=Base_Hashtbl[54],
       find_and_call=Base_Hashtbl[53],
       find_exn=Base_Hashtbl[52],
       find=Base_Hashtbl[51],
       findi_or_add=Base_Hashtbl[50],
       find_or_add=Base_Hashtbl[49],
       partitioni_tf=Base_Hashtbl[48],
       partition_tf=Base_Hashtbl[47],
       partition_mapi=Base_Hashtbl[46],
       partition_map=Base_Hashtbl[45],
       filteri=Base_Hashtbl[44],
       filter=Base_Hashtbl[43],
       filter_keys=Base_Hashtbl[42],
       filter_mapi=Base_Hashtbl[41],
       filter_map=Base_Hashtbl[40],
       mapi=Base_Hashtbl[39],
       map=Base_Hashtbl[38],
       update=Base_Hashtbl[37],
       change=Base_Hashtbl[36],
       add_exn=Base_Hashtbl[35],
       add=Base_Hashtbl[34],
       set=Base_Hashtbl[33],
       remove=Base_Hashtbl[32],
       mem=Base_Hashtbl[31],
       is_empty=Base_Hashtbl[30],
       length=Base_Hashtbl[29],
       count=Base_Hashtbl[28],
       counti=Base_Hashtbl[27],
       for_all=Base_Hashtbl[26],
       for_alli=Base_Hashtbl[25],
       exists=Base_Hashtbl[24],
       existsi=Base_Hashtbl[23],
       iteri=Base_Hashtbl[22],
       iter=Base_Hashtbl[21],
       iter_keys=Base_Hashtbl[20],
       fold=Base_Hashtbl[19],
       copy=Base_Hashtbl[18],
       clear=Base_Hashtbl[17],
       sexp_of_key=Base_Hashtbl[16],
       _bX4_=Base_Hashtbl[4];
      function invariant(invariant_key,t)
       {return caml_call3(_bX4_,function(_bYe_){return 0},invariant_key,t)}
      function sexp_of_t(sexp_of_v,t)
       {return caml_call3(_pr_,Key[2],sexp_of_v,t)}
      function Provide_of_sexp(Key)
       {function t_of_sexp$0(v_of_sexp,sexp)
         {return caml_call3(t_of_sexp,Key[1],v_of_sexp,sexp)}
        return [0,t_of_sexp$0]}
      function Provide_bin_io(Key$0)
       {var
         sexp_of_t=Key[2],
         bin_read_t=Key$0[2],
         bin_size_t=Key$0[5],
         bin_write_t=Key$0[6],
         bin_shape_t=Key$0[8],
         _bX5_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$30),
         _bX6_=
          caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_hashtbl_ml_123_27),
         _bX7_=
          [0,bin_shape_t,[0,caml_call2(Bin_prot_Shape[15],_bX6_,_bX5_),0]],
         _bX8_=caml_call1(Bin_prot_Shape[7],_bX7_),
         _bX9_=[0,caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$31),0],
         _bX__=
          [0,
           [0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_el$1),_bX9_,_bX8_],
           0],
         _bX$_=
          caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_hashtbl_ml_123_6),
         group=caml_call2(Bin_prot_Shape[6],_bX$_,_bX__);
        function bin_shape_el(a)
         {var _bYd_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_el$2);
          return caml_call1
                  (caml_call2(Bin_prot_Shape[14],group,_bYd_),[0,a,0])}
        function bin_size_el(size_of_a,param)
         {var v2=param[2],v1=param[1],size=caml_call1(bin_size_t,v1) | 0;
          return size + caml_call1(size_of_a,v2) | 0}
        function bin_write_el(write_a,buf,pos,param)
         {var
           v2=param[2],
           v1=param[1],
           pos$0=caml_call3(bin_write_t,buf,pos,v1);
          return caml_call3(write_a,buf,pos$0,v2)}
        function bin_read_el(of_a,buf,pos_ref)
         {var
           v1=caml_call2(bin_read_t,buf,pos_ref),
           v2=caml_call2(of_a,buf,pos_ref);
          return [0,v1,v2]}
        var
         caller_identity=
          caml_call1
           (Bin_shape_lib_Bin_shape[5][1],
            cst_8fabab0a_4992_11e6_8cca_9ba2c4686d9e);
        function iter(t,f)
         {return caml_call2
                  (iteri,
                   t,
                   function(key,data){return caml_call1(f,[0,key,data])})}
        function init(len,next)
         {var
           t=caml_call3(create,0,[0,len],0),
           _bYb_=caml_call2(_ai_,len,1),
           _bYa_=0;
          if(! (_bYb_ < 0))
           {var i=_bYa_;
            for(;;)
             {var
               match=caml_call1(next,0),
               data=match[2],
               key=match[1],
               match$0=caml_call2(find,t,key);
              if(match$0)
               failwiths
                (0,_qM_,cst_Hashtbl_bin_read_t_duplicate_key,key,sexp_of_t);
              else
               caml_call3(set,t,key,data);
              var _bYc_=i + 1 | 0;
              if(_bYb_ !== i){var i=_bYc_;continue}
              break}}
          return t}
        return caml_call1
                (Bin_prot_Utils[12],
                 [0,
                  caller_identity,
                  module_name$0,
                  length,
                  iter,
                  init,
                  bin_size_el,
                  bin_write_el,
                  bin_read_el,
                  bin_shape_el])}
      return [0,
              hashable,
              t_of_sexp,
              create,
              of_alist,
              of_alist_report_all_dups,
              of_alist_or_error,
              of_alist_exn,
              of_alist_multi,
              create_mapped,
              create_with_key,
              create_with_key_or_error,
              create_with_key_exn,
              group,
              sexp_of_key,
              clear,
              copy,
              fold,
              iter_keys,
              iter,
              iteri,
              existsi,
              exists,
              for_alli,
              for_all,
              counti,
              count,
              length,
              is_empty,
              mem,
              remove,
              set,
              add,
              add_exn,
              change,
              update,
              map,
              mapi,
              filter_map,
              filter_mapi,
              filter_keys,
              filter,
              filteri,
              partition_map,
              partition_mapi,
              partition_tf,
              partitioni_tf,
              find_or_add,
              findi_or_add,
              find,
              find_exn,
              find_and_call,
              findi_and_call,
              find_and_remove,
              merge,
              merge_into,
              keys,
              data,
              filter_keys_inplace,
              filter_inplace,
              filteri_inplace,
              map_inplace,
              mapi_inplace,
              filter_map_inplace,
              filter_mapi_inplace,
              equal,
              similar,
              to_alist,
              validate,
              incr,
              decr,
              add_multi,
              remove_multi,
              find_multi,
              invariant,
              sexp_of_t,
              Provide_of_sexp,
              Provide_bin_io]}
    function Make$0(Key)
     {var
       _bX2_=Make_plain([0,Key[2],Key[3],Key[4]]),
       hashable=_bX2_[1],
       create=_bX2_[3],
       of_alist=_bX2_[4],
       of_alist_report_all_dups=_bX2_[5],
       of_alist_or_error=_bX2_[6],
       of_alist_exn=_bX2_[7],
       of_alist_multi=_bX2_[8],
       create_mapped=_bX2_[9],
       create_with_key=_bX2_[10],
       create_with_key_or_error=_bX2_[11],
       create_with_key_exn=_bX2_[12],
       group=_bX2_[13],
       sexp_of_key=_bX2_[14],
       clear=_bX2_[15],
       copy=_bX2_[16],
       fold=_bX2_[17],
       iter_keys=_bX2_[18],
       iter=_bX2_[19],
       iteri=_bX2_[20],
       existsi=_bX2_[21],
       exists=_bX2_[22],
       for_alli=_bX2_[23],
       for_all=_bX2_[24],
       counti=_bX2_[25],
       count=_bX2_[26],
       length=_bX2_[27],
       is_empty=_bX2_[28],
       mem=_bX2_[29],
       remove=_bX2_[30],
       set=_bX2_[31],
       add=_bX2_[32],
       add_exn=_bX2_[33],
       change=_bX2_[34],
       update=_bX2_[35],
       map=_bX2_[36],
       mapi=_bX2_[37],
       filter_map=_bX2_[38],
       filter_mapi=_bX2_[39],
       filter_keys=_bX2_[40],
       filter=_bX2_[41],
       filteri=_bX2_[42],
       partition_map=_bX2_[43],
       partition_mapi=_bX2_[44],
       partition_tf=_bX2_[45],
       partitioni_tf=_bX2_[46],
       find_or_add=_bX2_[47],
       findi_or_add=_bX2_[48],
       find=_bX2_[49],
       find_exn=_bX2_[50],
       find_and_call=_bX2_[51],
       findi_and_call=_bX2_[52],
       find_and_remove=_bX2_[53],
       merge=_bX2_[54],
       merge_into=_bX2_[55],
       keys=_bX2_[56],
       data=_bX2_[57],
       filter_keys_inplace=_bX2_[58],
       filter_inplace=_bX2_[59],
       filteri_inplace=_bX2_[60],
       map_inplace=_bX2_[61],
       mapi_inplace=_bX2_[62],
       filter_map_inplace=_bX2_[63],
       filter_mapi_inplace=_bX2_[64],
       equal=_bX2_[65],
       similar=_bX2_[66],
       to_alist=_bX2_[67],
       validate=_bX2_[68],
       incr=_bX2_[69],
       decr=_bX2_[70],
       add_multi=_bX2_[71],
       remove_multi=_bX2_[72],
       find_multi=_bX2_[73],
       invariant=_bX2_[74],
       sexp_of_t=_bX2_[75],
       Provide_of_sexp=_bX2_[76],
       Provide_bin_io=_bX2_[77],
       include=caml_call1(Provide_of_sexp,[0,Key[1]]),
       t_of_sexp=include[1];
      return [0,
              hashable,
              create,
              of_alist,
              of_alist_report_all_dups,
              of_alist_or_error,
              of_alist_exn,
              of_alist_multi,
              create_mapped,
              create_with_key,
              create_with_key_or_error,
              create_with_key_exn,
              group,
              sexp_of_key,
              clear,
              copy,
              fold,
              iter_keys,
              iter,
              iteri,
              existsi,
              exists,
              for_alli,
              for_all,
              counti,
              count,
              length,
              is_empty,
              mem,
              remove,
              set,
              add,
              add_exn,
              change,
              update,
              map,
              mapi,
              filter_map,
              filter_mapi,
              filter_keys,
              filter,
              filteri,
              partition_map,
              partition_mapi,
              partition_tf,
              partitioni_tf,
              find_or_add,
              findi_or_add,
              find,
              find_exn,
              find_and_call,
              findi_and_call,
              find_and_remove,
              merge,
              merge_into,
              keys,
              data,
              filter_keys_inplace,
              filter_inplace,
              filteri_inplace,
              map_inplace,
              mapi_inplace,
              filter_map_inplace,
              filter_mapi_inplace,
              equal,
              similar,
              to_alist,
              validate,
              incr,
              decr,
              add_multi,
              remove_multi,
              find_multi,
              invariant,
              sexp_of_t,
              Provide_of_sexp,
              Provide_bin_io,
              t_of_sexp]}
    var _qN_=Base_Hashtbl[82][1];
    function _qO_(param)
     {var
       _bXT_=
        [0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$77),0,_ce_],0],
       _bXU_=
        caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_hashtbl_ml_167_6),
       group=caml_call2(Bin_prot_Shape[6],_bXU_,_bXT_),
       _bXV_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$78);
      caml_call1(caml_call2(Bin_prot_Shape[14],group,_bXV_),0);
      function hash(x){return caml_call2(_aF_,x,0)?x:caml_call1(_al_,x)}
      var
       Table=Make$0([0,t_of_sexp,_t_,sexp_of_t$0,hash]),
       t=caml_call3(Table[2],0,0,0),
       key=-10;
      for(;;)
       {caml_call3(Table[32],t,key,0);
        var _bXY_=key + 1 | 0;
        if(10 !== key){var key=_bXY_;continue}
        var
         _bXW_=
          function(sexp_of_t)
           {var
             sexp=caml_call1(sexp_of_t,t),
             list=
              caml_call1
               (caml_call1
                 (_H_,
                  function(sexp)
                   {if(1 === sexp[0])
                     {var _bX0_=sexp[1];
                      if(_bX0_)
                       {var _bX1_=_bX0_[2];
                        if(_bX1_)
                         if(! _bX1_[2])
                          {var
                            v1=_bX1_[1],
                            v0=_bX0_[1],
                            v0$0=caml_call1(t_of_sexp,v0),
                            v1$0=caml_call1(_ae_,v1);
                           return [0,v0$0,v1$0]}}}
                    return caml_call3
                            (Sexplib0_Sexp_conv_error[2],tp_loc$13,2,sexp)}),
                sexp);
            if
             (caml_call2
               (is_sorted$0,
                list,
                function(param,_bXZ_)
                 {var i2=_bXZ_[1],i1=param[1];return caml_call2(_ai_,i1,i2)}))
             return 0;
            throw [0,Assert_failure,_qP_]},
         _bXX_=[0,caml_call2(sexp_of_t$26,sexp_of_t$0,_af_),0];
        return caml_call2(iter$2,[0,caml_call1(Table[74],_af_),_bXX_],_bXW_)}}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_for_key_10_to_10_do_Table_add_exn_t_key,
      0,
      cst_src_hashtbl_ml$0,
      164,
      0,
      600,
      _qO_);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$97);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var _qQ_=Base_Hashtbl[79];
    function _qR_(Key)
     {var
       _bXQ_=Make$0([0,Key[9],Key[10],Key[11],Key[12]]),
       hashable=_bXQ_[1],
       create=_bXQ_[2],
       of_alist=_bXQ_[3],
       of_alist_report_all_dups=_bXQ_[4],
       of_alist_or_error=_bXQ_[5],
       of_alist_exn=_bXQ_[6],
       of_alist_multi=_bXQ_[7],
       create_mapped=_bXQ_[8],
       create_with_key=_bXQ_[9],
       create_with_key_or_error=_bXQ_[10],
       create_with_key_exn=_bXQ_[11],
       group=_bXQ_[12],
       sexp_of_key=_bXQ_[13],
       clear=_bXQ_[14],
       copy=_bXQ_[15],
       fold=_bXQ_[16],
       iter_keys=_bXQ_[17],
       iter=_bXQ_[18],
       iteri=_bXQ_[19],
       existsi=_bXQ_[20],
       exists=_bXQ_[21],
       for_alli=_bXQ_[22],
       for_all=_bXQ_[23],
       counti=_bXQ_[24],
       count=_bXQ_[25],
       length=_bXQ_[26],
       is_empty=_bXQ_[27],
       mem=_bXQ_[28],
       remove=_bXQ_[29],
       set=_bXQ_[30],
       add=_bXQ_[31],
       add_exn=_bXQ_[32],
       change=_bXQ_[33],
       update=_bXQ_[34],
       map=_bXQ_[35],
       mapi=_bXQ_[36],
       filter_map=_bXQ_[37],
       filter_mapi=_bXQ_[38],
       filter_keys=_bXQ_[39],
       filter=_bXQ_[40],
       filteri=_bXQ_[41],
       partition_map=_bXQ_[42],
       partition_mapi=_bXQ_[43],
       partition_tf=_bXQ_[44],
       partitioni_tf=_bXQ_[45],
       find_or_add=_bXQ_[46],
       findi_or_add=_bXQ_[47],
       find=_bXQ_[48],
       find_exn=_bXQ_[49],
       find_and_call=_bXQ_[50],
       findi_and_call=_bXQ_[51],
       find_and_remove=_bXQ_[52],
       merge=_bXQ_[53],
       merge_into=_bXQ_[54],
       keys=_bXQ_[55],
       data=_bXQ_[56],
       filter_keys_inplace=_bXQ_[57],
       filter_inplace=_bXQ_[58],
       filteri_inplace=_bXQ_[59],
       map_inplace=_bXQ_[60],
       mapi_inplace=_bXQ_[61],
       filter_map_inplace=_bXQ_[62],
       filter_mapi_inplace=_bXQ_[63],
       equal=_bXQ_[64],
       similar=_bXQ_[65],
       to_alist=_bXQ_[66],
       validate=_bXQ_[67],
       incr=_bXQ_[68],
       decr=_bXQ_[69],
       add_multi=_bXQ_[70],
       remove_multi=_bXQ_[71],
       find_multi=_bXQ_[72],
       invariant=_bXQ_[73],
       sexp_of_t=_bXQ_[74],
       Provide_of_sexp=_bXQ_[75],
       Provide_bin_io=_bXQ_[76],
       t_of_sexp=_bXQ_[77],
       include=
        caml_call1
         (Provide_bin_io,
          [0,Key[1],Key[2],Key[3],Key[4],Key[5],Key[6],Key[7],Key[8]]),
       bin_shape_t=include[1],
       bin_size_t=include[2],
       bin_write_t=include[3],
       bin_read_t=include[4],
       bin_read_t$0=include[5],
       bin_writer_t=include[6],
       bin_reader_t=include[7],
       bin_t=include[8];
      return [0,
              sexp_of_t,
              hashable,
              invariant,
              create,
              of_alist,
              of_alist_report_all_dups,
              of_alist_or_error,
              of_alist_exn,
              of_alist_multi,
              create_mapped,
              create_with_key,
              create_with_key_or_error,
              create_with_key_exn,
              group,
              sexp_of_key,
              clear,
              copy,
              fold,
              iter_keys,
              iter,
              iteri,
              existsi,
              exists,
              for_alli,
              for_all,
              counti,
              count,
              length,
              is_empty,
              mem,
              remove,
              set,
              add,
              add_exn,
              change,
              update,
              map,
              mapi,
              filter_map,
              filter_mapi,
              filter_keys,
              filter,
              filteri,
              partition_map,
              partition_mapi,
              partition_tf,
              partitioni_tf,
              find_or_add,
              findi_or_add,
              find,
              find_exn,
              find_and_call,
              findi_and_call,
              find_and_remove,
              merge,
              merge_into,
              keys,
              data,
              filter_keys_inplace,
              filter_inplace,
              filteri_inplace,
              map_inplace,
              mapi_inplace,
              filter_map_inplace,
              filter_mapi_inplace,
              equal,
              similar,
              to_alist,
              validate,
              incr,
              decr,
              add_multi,
              remove_multi,
              find_multi,
              Provide_of_sexp,
              function(_bXR_)
               {var _bXS_=caml_call1(Provide_bin_io,_bXR_);
                return [0,
                        _bXS_[8],
                        _bXS_[4],
                        _bXS_[5],
                        _bXS_[7],
                        _bXS_[2],
                        _bXS_[3],
                        _bXS_[6],
                        _bXS_[1]]},
              t_of_sexp,
              bin_shape_t,
              bin_size_t,
              bin_write_t,
              bin_read_t,
              bin_read_t$0,
              bin_writer_t,
              bin_reader_t,
              bin_t]}
    function _qS_(_bXJ_)
     {var _bXK_=Make$0(_bXJ_),_bXL_=_bXK_[77],_bXM_=_bXK_[76];
      function _bXN_(_bXO_)
       {var _bXP_=caml_call1(_bXM_,_bXO_);
        return [0,
                _bXP_[8],
                _bXP_[4],
                _bXP_[5],
                _bXP_[7],
                _bXP_[2],
                _bXP_[3],
                _bXP_[6],
                _bXP_[1]]}
      return [0,
              _bXK_[74],
              _bXK_[1],
              _bXK_[73],
              _bXK_[2],
              _bXK_[3],
              _bXK_[4],
              _bXK_[5],
              _bXK_[6],
              _bXK_[7],
              _bXK_[8],
              _bXK_[9],
              _bXK_[10],
              _bXK_[11],
              _bXK_[12],
              _bXK_[13],
              _bXK_[14],
              _bXK_[15],
              _bXK_[16],
              _bXK_[17],
              _bXK_[18],
              _bXK_[19],
              _bXK_[20],
              _bXK_[21],
              _bXK_[22],
              _bXK_[23],
              _bXK_[24],
              _bXK_[25],
              _bXK_[26],
              _bXK_[27],
              _bXK_[28],
              _bXK_[29],
              _bXK_[30],
              _bXK_[31],
              _bXK_[32],
              _bXK_[33],
              _bXK_[34],
              _bXK_[35],
              _bXK_[36],
              _bXK_[37],
              _bXK_[38],
              _bXK_[39],
              _bXK_[40],
              _bXK_[41],
              _bXK_[42],
              _bXK_[43],
              _bXK_[44],
              _bXK_[45],
              _bXK_[46],
              _bXK_[47],
              _bXK_[48],
              _bXK_[49],
              _bXK_[50],
              _bXK_[51],
              _bXK_[52],
              _bXK_[53],
              _bXK_[54],
              _bXK_[55],
              _bXK_[56],
              _bXK_[57],
              _bXK_[58],
              _bXK_[59],
              _bXK_[60],
              _bXK_[61],
              _bXK_[62],
              _bXK_[63],
              _bXK_[64],
              _bXK_[65],
              _bXK_[66],
              _bXK_[67],
              _bXK_[68],
              _bXK_[69],
              _bXK_[70],
              _bXK_[71],
              _bXK_[72],
              _bXK_[75],
              _bXN_,
              _bXL_]}
    function _qT_(_bXD_)
     {var _bXE_=Make_plain(_bXD_),_bXF_=_bXE_[77];
      function _bXG_(_bXH_)
       {var _bXI_=caml_call1(_bXF_,_bXH_);
        return [0,
                _bXI_[8],
                _bXI_[4],
                _bXI_[5],
                _bXI_[7],
                _bXI_[2],
                _bXI_[3],
                _bXI_[6],
                _bXI_[1]]}
      return [0,
              _bXE_[75],
              _bXE_[1],
              _bXE_[74],
              _bXE_[3],
              _bXE_[4],
              _bXE_[5],
              _bXE_[6],
              _bXE_[7],
              _bXE_[8],
              _bXE_[9],
              _bXE_[10],
              _bXE_[11],
              _bXE_[12],
              _bXE_[13],
              _bXE_[14],
              _bXE_[15],
              _bXE_[16],
              _bXE_[17],
              _bXE_[18],
              _bXE_[19],
              _bXE_[20],
              _bXE_[21],
              _bXE_[22],
              _bXE_[23],
              _bXE_[24],
              _bXE_[25],
              _bXE_[26],
              _bXE_[27],
              _bXE_[28],
              _bXE_[29],
              _bXE_[30],
              _bXE_[31],
              _bXE_[32],
              _bXE_[33],
              _bXE_[34],
              _bXE_[35],
              _bXE_[36],
              _bXE_[37],
              _bXE_[38],
              _bXE_[39],
              _bXE_[40],
              _bXE_[41],
              _bXE_[42],
              _bXE_[43],
              _bXE_[44],
              _bXE_[45],
              _bXE_[46],
              _bXE_[47],
              _bXE_[48],
              _bXE_[49],
              _bXE_[50],
              _bXE_[51],
              _bXE_[52],
              _bXE_[53],
              _bXE_[54],
              _bXE_[55],
              _bXE_[56],
              _bXE_[57],
              _bXE_[58],
              _bXE_[59],
              _bXE_[60],
              _bXE_[61],
              _bXE_[62],
              _bXE_[63],
              _bXE_[64],
              _bXE_[65],
              _bXE_[66],
              _bXE_[67],
              _bXE_[68],
              _bXE_[69],
              _bXE_[70],
              _bXE_[71],
              _bXE_[72],
              _bXE_[73],
              _bXE_[76],
              _bXG_]}
    var
     Core_kernel_Hashtbl=
      [0,
       hash$8,
       hash_param,
       sexp_of_t$26,
       invariant$1,
       _po_,
       _pn_,
       _pm_,
       _pl_,
       _pk_,
       _pj_,
       _pi_,
       _ph_,
       _pg_,
       _pf_,
       _pe_,
       sexp_of_key,
       clear,
       copy$0,
       fold$3,
       iter_keys,
       iter$3,
       iteri$2,
       existsi$2,
       exists$2,
       for_alli$2,
       for_all$2,
       counti$2,
       count$2,
       length$5,
       is_empty$3,
       mem$3,
       remove$0,
       set$0,
       add$1,
       add_exn,
       change,
       update,
       map$12,
       mapi$2,
       filter_map$3,
       filter_mapi$2,
       filter_keys,
       filter$3,
       filteri$2,
       partition_map$0,
       partition_mapi,
       partition_tf$1,
       partitioni_tf$0,
       find_or_add,
       findi_or_add,
       find$3,
       find_exn$3,
       find_and_call,
       findi_and_call,
       find_and_remove,
       merge$2,
       merge_into,
       keys,
       data$1,
       filter_keys_inplace,
       filter_inplace,
       filteri_inplace,
       map_inplace$0,
       mapi_inplace,
       filter_map_inplace,
       filter_mapi_inplace,
       equal$5,
       similar,
       to_alist,
       validate,
       incr$0,
       decr$0,
       add_multi,
       remove_multi,
       find_multi,
       hashable_s,
       [0,
        create$6,
        of_alist,
        of_alist_report_all_dups,
        of_alist_or_error,
        of_alist_exn,
        of_alist_multi,
        create_mapped,
        create_with_key,
        create_with_key_or_error,
        create_with_key_exn,
        group$35],
       [0,
        bin_t$22,
        bin_read_t$61,
        bin_read_t$62,
        bin_reader_t$22,
        bin_size_t$30,
        bin_write_t$30,
        bin_writer_t$22,
        bin_shape_t$27,
        _pq_,
        _pr_,
        _ps_,
        _pt_,
        _pu_,
        _pv_,
        _pw_,
        _px_,
        _py_,
        _pz_,
        _pA_,
        _pB_,
        _pC_,
        _pD_,
        _pE_,
        _pF_,
        _pG_,
        _pH_,
        _pI_,
        _pJ_,
        _pK_,
        _pL_,
        _pM_,
        _pN_,
        _pO_,
        _pP_,
        _pQ_,
        _pR_,
        _pS_,
        _pT_,
        _pU_,
        _pV_,
        _pW_,
        _pX_,
        _pY_,
        _pZ_,
        _p0_,
        _p1_,
        _p2_,
        _p3_,
        _p4_,
        _p5_,
        _p6_,
        _p7_,
        _p8_,
        _p9_,
        _p__,
        _p$_,
        _qa_,
        _qb_,
        _qc_,
        _qd_,
        _qe_,
        _qf_,
        _qg_,
        _qh_,
        _qi_,
        _qj_,
        _qk_,
        _ql_,
        _qm_,
        _qn_,
        _qo_,
        _qp_,
        _qq_,
        _qr_,
        _qs_,
        _qt_,
        _qu_,
        _qv_,
        _qw_,
        _qx_,
        _qy_,
        _qz_,
        _qA_],
       _qT_,
       _qS_,
       _qR_,
       _qQ_,
       Hashable,
       _qN_,
       iter$3,
       set$0,
       map_inplace$0,
       mapi_inplace,
       filter_map_inplace,
       filter_mapi_inplace];
    caml_register_global(7389,Core_kernel_Hashtbl,"Core_kernel__Hashtbl");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$98);
    caml_call1(Expect_test_collector[4][1],cst_src_hash_set_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$99,cst$33);
    var
     sexp_of_t$27=include$29[1],
     _qU_=include$29[2],
     _qV_=include$29[3],
     length$6=include$29[4],
     is_empty$4=include$29[5],
     iter$5=include$29[6],
     fold$4=include$29[7],
     fold_result$2=include$29[8],
     fold_until$2=include$29[9],
     exists$3=include$29[10],
     for_all$3=include$29[11],
     count$3=include$29[12],
     sum$3=include$29[13],
     find$4=include$29[14],
     find_map$2=include$29[15],
     to_list$3=include$29[16],
     to_array$2=include$29[17],
     min_elt$2=include$29[18],
     max_elt$2=include$29[19],
     mem$4=include$29[20],
     copy$1=include$29[21],
     add$2=include$29[22],
     strict_add=include$29[23],
     strict_add_exn=include$29[24],
     remove$1=include$29[25],
     strict_remove=include$29[26],
     strict_remove_exn=include$29[27],
     clear$0=include$29[28],
     equal$6=include$29[29],
     filter$4=include$29[30],
     filter_inplace$0=include$29[31],
     inter=include$29[32],
     diff=include$29[33],
     of_hashtbl_keys=include$29[34],
     to_hashtbl=include$29[35],
     Poly$1=include$29[37],
     M$0=include$29[38];
    function Make_plain$0(Elt)
     {var
       hashable=caml_call1(Base_Hashable[3],Elt),
       include=caml_call1(include$29[41],[0,hashable]),
       t_of_sexp=include[1],
       create=include[2],
       of_list=include[3];
      function sexp_of_t(t){return caml_call2(include$29[37][2],Elt[2],t)}
      function Provide_of_sexp(X)
       {function t_of_sexp$0(sexp){return caml_call2(t_of_sexp,X[1],sexp)}
        return [0,t_of_sexp$0]}
      function Provide_bin_io(X)
       {var
         bin_read_t=X[2],
         bin_size_t=X[5],
         bin_write_t=X[6],
         bin_shape_t=X[8],
         _bXx_=
          [0,
           [0,
            caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_el$3),
            0,
            bin_shape_t],
           0],
         _bXy_=
          caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_hash_set_ml_35_6),
         group=caml_call2(Bin_prot_Shape[6],_bXy_,_bXx_),
         _bXz_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_el$4),
         bin_shape_el=caml_call1(caml_call2(Bin_prot_Shape[14],group,_bXz_),0),
         caller_identity=
          caml_call1
           (Bin_shape_lib_Bin_shape[5][1],
            cst_ad381672_4992_11e6_9e36_b76dc8cd466f);
        function init(len,next)
         {var
           t=caml_call3(create,0,[0,len],0),
           _bXB_=caml_call2(_ai_,len,1),
           _bXA_=0;
          if(! (_bXB_ < 0))
           {var i=_bXA_;
            for(;;)
             {var v=caml_call1(next,0);
              caml_call2(add$2,t,v);
              var _bXC_=i + 1 | 0;
              if(_bXB_ !== i){var i=_bXC_;continue}
              break}}
          return t}
        return caml_call1
                (Bin_prot_Utils[11],
                 [0,
                  caller_identity,
                  module_name$1,
                  length$6,
                  iter$5,
                  init,
                  bin_size_t,
                  bin_write_t,
                  bin_read_t,
                  bin_shape_el])}
      return [0,
              t_of_sexp,
              create,
              of_list,
              sexp_of_t,
              Provide_of_sexp,
              Provide_bin_io]}
    function Make$1(Elt)
     {var
       _bXw_=Make_plain$0([0,Elt[2],Elt[3],Elt[4]]),
       create=_bXw_[2],
       of_list=_bXw_[3],
       sexp_of_t=_bXw_[4],
       Provide_of_sexp=_bXw_[5],
       Provide_bin_io=_bXw_[6],
       include=caml_call1(Provide_of_sexp,[0,Elt[1]]),
       t_of_sexp=include[1];
      return [0,
              create,
              of_list,
              sexp_of_t,
              Provide_of_sexp,
              Provide_bin_io,
              t_of_sexp]}
    function create$7(growth_allowed,size,hashable,param)
     {return caml_call3
              (_qU_,growth_allowed,size,caml_call1(Base_Hashable[4],hashable))}
    function of_list$5(growth_allowed,size,hashable,l)
     {return caml_call4
              (_qV_,
               growth_allowed,
               size,
               caml_call1(Base_Hashable[4],hashable),
               l)}
    var Using_hashable=[0,create$7,of_list$5],_qW_=include$29[42][1];
    function create$8(growth_allowed,size,m,param)
     {return caml_call3(_qU_,growth_allowed,size,m)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$100);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    function _qX_(Elt)
     {var
       _bXt_=Make$1([0,Elt[9],Elt[10],Elt[11],Elt[12]]),
       create=_bXt_[1],
       of_list=_bXt_[2],
       sexp_of_t=_bXt_[3],
       Provide_of_sexp=_bXt_[4],
       Provide_bin_io=_bXt_[5],
       t_of_sexp=_bXt_[6],
       include=
        caml_call1
         (Provide_bin_io,
          [0,Elt[1],Elt[2],Elt[3],Elt[4],Elt[5],Elt[6],Elt[7],Elt[8]]),
       bin_size_t=include[1],
       bin_write_t=include[2],
       bin_read_t=include[3],
       bin_read_t$0=include[4],
       bin_shape_t=include[5],
       bin_writer_t=include[6],
       bin_reader_t=include[7],
       bin_t=include[8];
      return [0,
              sexp_of_t,
              create,
              of_list,
              Provide_of_sexp,
              function(_bXu_)
               {var _bXv_=caml_call1(Provide_bin_io,_bXu_);
                return [0,
                        _bXv_[8],
                        _bXv_[3],
                        _bXv_[4],
                        _bXv_[7],
                        _bXv_[1],
                        _bXv_[2],
                        _bXv_[6],
                        _bXv_[5]]},
              t_of_sexp,
              bin_size_t,
              bin_write_t,
              bin_read_t,
              bin_read_t$0,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t]}
    function _qY_(_bXm_)
     {var _bXn_=Make$1(_bXm_),_bXo_=_bXn_[6],_bXp_=_bXn_[5];
      function _bXq_(_bXr_)
       {var _bXs_=caml_call1(_bXp_,_bXr_);
        return [0,
                _bXs_[8],
                _bXs_[3],
                _bXs_[4],
                _bXs_[7],
                _bXs_[1],
                _bXs_[2],
                _bXs_[6],
                _bXs_[5]]}
      return [0,_bXn_[3],_bXn_[1],_bXn_[2],_bXn_[4],_bXq_,_bXo_]}
    function _qZ_(_bXg_)
     {var _bXh_=Make_plain$0(_bXg_),_bXi_=_bXh_[6];
      function _bXj_(_bXk_)
       {var _bXl_=caml_call1(_bXi_,_bXk_);
        return [0,
                _bXl_[8],
                _bXl_[3],
                _bXl_[4],
                _bXl_[7],
                _bXl_[1],
                _bXl_[2],
                _bXl_[6],
                _bXl_[5]]}
      return [0,_bXh_[4],_bXh_[2],_bXh_[3],_bXh_[5],_bXj_]}
    var
     Core_kernel_Hash_set=
      [0,
       sexp_of_t$27,
       create$8,
       _qV_,
       length$6,
       is_empty$4,
       iter$5,
       fold$4,
       fold_result$2,
       fold_until$2,
       exists$3,
       for_all$3,
       count$3,
       sum$3,
       find$4,
       find_map$2,
       to_list$3,
       to_array$2,
       min_elt$2,
       max_elt$2,
       mem$4,
       copy$1,
       add$2,
       strict_add,
       strict_add_exn,
       remove$1,
       strict_remove,
       strict_remove_exn,
       clear$0,
       equal$6,
       filter$4,
       filter_inplace$0,
       inter,
       diff,
       of_hashtbl_keys,
       to_hashtbl,
       _qW_,
       Using_hashable,
       Poly$1,
       _qZ_,
       _qY_,
       _qX_,
       M$0];
    caml_register_global(7390,Core_kernel_Hash_set,"Core_kernel__Hash_set");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$101);
    caml_call1(Expect_test_collector[4][1],cst_src_t_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$102,cst$34);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$103);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_T=[0];
    caml_register_global(7391,Core_kernel_T,"Core_kernel__T");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$104);
    caml_call1(Expect_test_collector[4][1],cst_src_map_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$105,cst$35);
    var
     _q0_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_v),
     _q1_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_map_intf_ml_51_73),
     _q2_=[0,caml_call2(Bin_prot_Shape[15],_q1_,_q0_),0],
     _q3_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_v$0),
     _q4_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_map_intf_ml_51_68),
     _q5_=[0,caml_call2(Bin_prot_Shape[15],_q4_,_q3_),_q2_],
     _q6_=[0,caml_call1(Bin_prot_Shape[7],_q5_)],
     _q7_=[0,caml_call2(Bin_prot_Shape[10],cst_Unequal,_q6_),0],
     _q8_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_v$1),
     _q9_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_map_intf_ml_51_51),
     _q__=[0,caml_call2(Bin_prot_Shape[15],_q9_,_q8_)],
     _q$_=[0,caml_call2(Bin_prot_Shape[10],cst_Right$0,_q__),_q7_],
     _ra_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_v$2),
     _rb_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_map_intf_ml_51_36),
     _rc_=[0,caml_call2(Bin_prot_Shape[15],_rb_,_ra_)],
     _rd_=[0,caml_call2(Bin_prot_Shape[10],cst_Left$0,_rc_),_q$_],
     _re_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_map_intf_ml_51_25),
     _rf_=[0,caml_call2(Bin_prot_Shape[12],_re_,_rd_),0],
     _rg_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_k),
     _rh_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_map_intf_ml_51_20),
     _ri_=[0,caml_call2(Bin_prot_Shape[15],_rh_,_rg_),_rf_],
     _rj_=caml_call1(Bin_prot_Shape[7],_ri_),
     _rk_=[0,caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_v$3),0],
     _rl_=[0,caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_k$0),_rk_],
     _rm_=
      [0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$79),_rl_,_rj_],0],
     _rn_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_map_intf_ml_51_2),
     group$37=caml_call2(Bin_prot_Shape[6],_rn_,_rm_),
     Binable=0,
     Map=0,
     Or_duplicate=0,
     With_comparator=0,
     With_first_class_module=0,
     Without_comparator=0,
     Tree=0;
    function bin_shape_t$28(k,v)
     {var _bXf_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$80);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$37,_bXf_),[0,k,[0,v,0]])}
    function bin_size_t$31(size_of_k,size_of_v,param)
     {var
       v2=param[2],
       v1=param[1],
       size=caml_call1(size_of_k,v1) | 0,
       _bXd_=v2[1];
      if(847852583 === _bXd_)
       var
        args=v2[2],
        size_args=caml_call1(size_of_v,args),
        _bXe_=size_args + 4 | 0;
      else
       if(1013247643 <= _bXd_)
        var
         args$0=v2[2],
         v2$0=args$0[2],
         v1$0=args$0[1],
         size$0=caml_call1(size_of_v,v1$0) | 0,
         size_args$0=size$0 + caml_call1(size_of_v,v2$0) | 0,
         _bXe_=size_args$0 + 4 | 0;
       else
        var
         args$1=v2[2],
         size_args$1=caml_call1(size_of_v,args$1),
         _bXe_=size_args$1 + 4 | 0;
      return size + _bXe_ | 0}
    function bin_write_t$31(write_k,write_v,buf,pos,param)
     {var
       v2=param[2],
       v1=param[1],
       pos$0=caml_call3(write_k,buf,pos,v1),
       _bXc_=v2[1];
      if(847852583 === _bXc_)
       {var
         args=v2[2],
         pos$1=caml_call3(Bin_prot_Write[29],buf,pos$0,847852583);
        return caml_call3(write_v,buf,pos$1,args)}
      if(1013247643 <= _bXc_)
       {var
         args$0=v2[2],
         pos$2=caml_call3(Bin_prot_Write[29],buf,pos$0,1013247643),
         v2$0=args$0[2],
         v1$0=args$0[1],
         pos$3=caml_call3(write_v,buf,pos$2,v1$0);
        return caml_call3(write_v,buf,pos$3,v2$0)}
      var
       args$1=v2[2],
       pos$4=caml_call3(Bin_prot_Write[29],buf,pos$0,-57574468);
      return caml_call3(write_v,buf,pos$4,args$1)}
    function bin_writer_t$23(bin_writer_k,bin_writer_v)
     {function _bW9_(v)
       {var _bW__=bin_writer_v[2],_bW$_=bin_writer_k[2];
        return function(_bXa_,_bXb_)
         {return bin_write_t$31(_bW$_,_bW__,v,_bXa_,_bXb_)}}
      return [0,
              function(v)
               {return bin_size_t$31(bin_writer_k[1],bin_writer_v[1],v)},
              _bW9_]}
    function bin_read_t$63(of_k,of_v,buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],
               cst_src_map_intf_ml_Symmetric_diff_element_t,
               pos_ref[1])}
    function bin_read_t$64(of_k,of_v,buf,pos_ref)
     {var
       v1=caml_call2(of_k,buf,pos_ref),
       vint=caml_call2(Bin_prot_Read[28],buf,pos_ref);
      try
       {if(-57574468 === vint)
         var arg_1=caml_call2(of_v,buf,pos_ref),_bW7_=[0,-57574468,arg_1];
        else
         if(847852583 === vint)
          var
           arg_1$0=caml_call2(of_v,buf,pos_ref),
           _bW7_=[0,847852583,arg_1$0];
         else
          {if(1013247643 !== vint)throw Bin_prot_Common[13];
           var
            v1$0=caml_call2(of_v,buf,pos_ref),
            v2$0=caml_call2(of_v,buf,pos_ref),
            arg_1$1=[0,v1$0,v2$0],
            _bW7_=[0,1013247643,arg_1$1]}
        var v2=_bW7_}
      catch(_bW8_)
       {_bW8_ = caml_wrap_exception(_bW8_);
        if(_bW8_ !== Bin_prot_Common[13])throw _bW8_;
        var
         v2=
          caml_call2
           (Bin_prot_Common[19],
            cst_src_map_intf_ml_Symmetric_diff_element_t$0,
            pos_ref[1])}
      return [0,v1,v2]}
    function bin_reader_t$23(bin_reader_k,bin_reader_v)
     {function _bW6_(buf,pos_ref,vtag)
       {return bin_read_t$63(bin_reader_k[1],bin_reader_v[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$64
                        (bin_reader_k[1],bin_reader_v[1],buf,pos_ref)},
              _bW6_]}
    function bin_t$23(bin_k,bin_v)
     {var
       _bW4_=bin_reader_t$23(bin_k[3],bin_v[3]),
       _bW5_=bin_writer_t$23(bin_k[2],bin_v[2]);
      return [0,bin_shape_t$28(bin_k[1],bin_v[1]),_bW5_,_bW4_]}
    function compare$20(cmp_k,cmp_v,a_001,b_002)
     {var
       t_004=a_001[2],
       t_003=a_001[1],
       t_006=b_002[2],
       t_005=b_002[1],
       n=caml_call2(cmp_k,t_003,t_005);
      if(0 === n)
       {if(caml_call2(Ppx_compare_lib[1],t_004,t_006))return 0;
        var _bW3_=t_004[1];
        if(847852583 === _bW3_)
         {if(typeof t_006 !== "number")
           if(847852583 === t_006[1])
            {var right_008=t_006[2],left_007=t_004[2];
             return caml_call2(cmp_v,left_007,right_008)}}
        else
         if(1013247643 <= _bW3_)
          {if(typeof t_006 !== "number")
            if(1013247643 === t_006[1])
             {var
               right_012=t_006[2],
               left_011=t_004[2],
               t_014=left_011[2],
               t_013=left_011[1],
               t_016=right_012[2],
               t_015=right_012[1],
               n$0=caml_call2(cmp_v,t_013,t_015);
              return 0 === n$0?caml_call2(cmp_v,t_014,t_016):n$0}}
         else
          if(typeof t_006 !== "number")
           if(-57574468 === t_006[1])
            {var right_010=t_006[2],left_009=t_004[2];
             return caml_call2(cmp_v,left_009,right_010)}
        return caml_compare(t_004,t_006)}
      return n}
    function t_of_sexp$24(of_k,of_v,sexp)
     {if(1 === sexp[0])
       {var _bWO_=sexp[1];
        if(_bWO_)
         {var _bWP_=_bWO_[2];
          if(_bWP_)
           if(! _bWP_[2])
            {var
              v1=_bWP_[1],
              v0=_bWO_[1],
              v0$0=caml_call1(of_k,v0),
              v1$0=
               function(sexp)
                 {try
                   {if(0 === sexp[0])
                     var
                      atom=sexp[1],
                      _bWQ_=
                       caml_string_notequal(atom,cst_Left$1)
                        ?caml_string_notequal(atom,cst_Right$1)
                          ?caml_string_notequal(atom,cst_Unequal$0)
                            ?caml_call1(Sexplib0_Sexp_conv_error[18],0)
                            :caml_call2(Sexplib0_Sexp_conv_error[22],tp_loc$14,sexp)
                          :caml_call2(Sexplib0_Sexp_conv_error[22],tp_loc$14,sexp)
                        :caml_call2(Sexplib0_Sexp_conv_error[22],tp_loc$14,sexp),
                      _bWR_=_bWQ_;
                    else
                     {var _bWS_=sexp[1];
                      if(_bWS_)
                       {var _bWT_=_bWS_[1];
                        if(0 === _bWT_[0])
                         {var sexp_args=_bWS_[2],atom$0=_bWT_[1];
                          if(caml_string_notequal(atom$0,cst_Left$2))
                           if(caml_string_notequal(atom$0,cst_Right$2))
                            if(caml_string_notequal(atom$0,cst_Unequal$1))
                             var _bWU_=caml_call1(Sexplib0_Sexp_conv_error[18],0);
                            else
                             {if(sexp_args)
                               if(sexp_args[2])
                                var switch$0=0;
                               else
                                {var v0=sexp_args[1];
                                 if(1 === v0[0])
                                  {var _bWY_=v0[1];
                                   if(_bWY_)
                                    {var _bWZ_=_bWY_[2];
                                     if(_bWZ_)
                                      if(_bWZ_[2])
                                       var switch$1=0;
                                      else
                                       var
                                        v1=_bWZ_[1],
                                        v0$1=_bWY_[1],
                                        v0$2=caml_call1(of_v,v0$1),
                                        v1$0=caml_call1(of_v,v1),
                                        v0$0=[0,v0$2,v1$0],
                                        switch$1=1;
                                     else
                                      var switch$1=0}
                                   else
                                    var switch$1=0}
                                 else
                                  var switch$1=0;
                                 if(! switch$1)
                                  var
                                   v0$0=
                                    caml_call3(Sexplib0_Sexp_conv_error[2],tp_loc$14,2,v0);
                                 var _bWX_=[0,1013247643,v0$0],switch$0=1}
                              else
                               var switch$0=0;
                              if(! switch$0)
                               var
                                _bWX_=
                                 caml_call3
                                  (Sexplib0_Sexp_conv_error[21],tp_loc$14,atom$0,sexp);
                              var _bWU_=_bWX_}
                           else
                            {if(sexp_args)
                              if(sexp_args[2])
                               var switch$2=0;
                              else
                               var
                                v0$3=sexp_args[1],
                                v0$4=caml_call1(of_v,v0$3),
                                _bW0_=[0,-57574468,v0$4],
                                switch$2=1;
                             else
                              var switch$2=0;
                             if(! switch$2)
                              var
                               _bW0_=
                                caml_call3
                                 (Sexplib0_Sexp_conv_error[21],tp_loc$14,atom$0,sexp);
                             var _bWU_=_bW0_}
                          else
                           {if(sexp_args)
                             if(sexp_args[2])
                              var switch$3=0;
                             else
                              var
                               v0$5=sexp_args[1],
                               v0$6=caml_call1(of_v,v0$5),
                               _bW1_=[0,847852583,v0$6],
                               switch$3=1;
                            else
                             var switch$3=0;
                            if(! switch$3)
                             var
                              _bW1_=
                               caml_call3
                                (Sexplib0_Sexp_conv_error[21],tp_loc$14,atom$0,sexp);
                            var _bWU_=_bW1_}
                          var _bWV_=_bWU_}
                        else
                         var
                          _bWV_=
                           caml_call2(Sexplib0_Sexp_conv_error[23],tp_loc$14,sexp);
                        var _bWW_=_bWV_}
                      else
                       var
                        _bWW_=
                         caml_call2(Sexplib0_Sexp_conv_error[24],tp_loc$14,sexp);
                      var _bWR_=_bWW_}
                    return _bWR_}
                  catch(_bW2_)
                   {_bW2_ = caml_wrap_exception(_bW2_);
                    if(_bW2_ === Sexplib0_Sexp_conv_error[17])
                     return caml_call2
                             (Sexplib0_Sexp_conv_error[19],tp_loc$14,sexp);
                    throw _bW2_}}
                (v1);
             return [0,v0$0,v1$0]}}}
      return caml_call3(Sexplib0_Sexp_conv_error[2],tp_loc$14,2,sexp)}
    function sexp_of_t$28(of_k,of_v,param)
     {var v1=param[2],v0=param[1],v0$0=caml_call1(of_k,v0),_bWN_=v1[1];
      if(847852583 === _bWN_)
       var v0$1=v1[2],v1$0=[1,[0,_ro_,[0,caml_call1(of_v,v0$1),0]]];
      else
       if(1013247643 <= _bWN_)
        var
         v0$2=v1[2],
         v1$1=v0$2[2],
         v0$3=v0$2[1],
         v0$4=caml_call1(of_v,v0$3),
         v1$2=caml_call1(of_v,v1$1),
         v1$0=[1,[0,_rp_,[0,[1,[0,v0$4,[0,v1$2,0]]],0]]];
       else
        var v0$5=v1[2],v1$0=[1,[0,_rq_,[0,caml_call1(of_v,v0$5),0]]];
      return [1,[0,v0$0,[0,v1$0,0]]]}
    var
     Symmetric_diff_element=
      [0,
       bin_shape_t$28,
       bin_size_t$31,
       bin_write_t$31,
       bin_writer_t$23,
       bin_read_t$63,
       bin_read_t$64,
       bin_reader_t$23,
       bin_t$23,
       compare$20,
       t_of_sexp$24,
       sexp_of_t$28];
    function Check_accessors(T,Tree,Key,Options,M){return [0]}
    function Check_accessors1(M){return [0]}
    function Check_accessors2(M){return [0]}
    function Check_accessors3(M){return [0]}
    function Check_accessors3_with_comparator(M){return [0]}
    function Check_creators(T,Tree,Key,Options,M){return [0]}
    function Check_creators1(M){return [0]}
    function Check_creators2(M){return [0]}
    function Check_creators3_with_comparator(M){return [0]}
    function Make_S_plain_tree(Key){return [0]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$106);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Map_intf=
      [0,
       Binable,
       Map,
       Or_duplicate,
       With_comparator,
       With_first_class_module,
       Without_comparator,
       Tree,
       Symmetric_diff_element,
       Check_accessors,
       Check_accessors1,
       Check_accessors2,
       Check_accessors3,
       Check_accessors3_with_comparator,
       Check_creators,
       Check_creators1,
       Check_creators2,
       Check_creators3_with_comparator,
       Make_S_plain_tree];
    caml_register_global(7393,Core_kernel_Map_intf,"Core_kernel__Map_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$107);
    caml_call1(Expect_test_collector[4][1],cst_src_map_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$108,cst$36);
    function gen_alist(k_gen,v_gen,comparator)
     {function _bWJ_(ks)
       {var ks$0=caml_call2(dedup_and_sort,comparator[1],ks);
        function _bWL_(vs){return caml_call2(zip_exn$0,ks$0,vs)}
        var _bWM_=caml_call2(_pa_,caml_call1(length$4,ks$0),v_gen);
        return caml_call2(_nQ_[5][2],_bWM_,_bWL_)}
      var _bWK_=caml_call1(_o__,k_gen);
      return caml_call2(_nQ_[5][1],_bWK_,_bWJ_)}
    function gen_tree(comparator,k_gen,v_gen)
     {var
       _bWH_=caml_call1(Base_Map[87][3][7],comparator),
       _bWI_=gen_alist(k_gen,v_gen,comparator);
      return caml_call2(_nQ_[5][2],_bWI_,_bWH_)}
    function gen$1(comparator,k_gen,v_gen)
     {var
       _bWF_=caml_call1(Base_Map[87][70],comparator),
       _bWG_=gen_alist(k_gen,v_gen,comparator);
      return caml_call2(_nQ_[5][2],_bWG_,_bWF_)}
    function obs_alist(k_obs,v_obs)
     {return caml_call1(_pc_,caml_call2(_nP_[20],k_obs,v_obs))}
    function obs_tree(k_obs,v_obs)
     {var arg=Base_Map[87][3][54];
      function _bWD_(eta){return caml_call2(arg,0,eta)}
      var _bWE_=obs_alist(k_obs,v_obs);
      return caml_call2(_nP_[19],_bWE_,_bWD_)}
    function obs$2(k_obs,v_obs)
     {var arg=Base_Map[87][41];
      function _bWB_(eta){return caml_call2(arg,0,eta)}
      var _bWC_=obs_alist(k_obs,v_obs);
      return caml_call2(_nP_[19],_bWC_,_bWB_)}
    function shrink$0(k_shr,v_shr,t)
     {var list=caml_call2(Base_Map[87][41],0,t);
      function _bWx_(param)
       {var k=param[1];return caml_call2(Base_Map[87][17],t,k)}
      var
       drop_keys=caml_call2(map$0,caml_call1(of_list$0,list),_bWx_),
       shrink_keys=
        caml_call1
         (round_robin,
          caml_call2
           (map$11,
            list,
            function(param)
             {var v=param[2],k=param[1];
              function _bWz_(k$0)
               {var _bWA_=caml_call2(Base_Map[87][17],t,k);
                return caml_call3(Base_Map[87][9],_bWA_,k$0,v)}
              return caml_call2(map$0,caml_call2(_nO_[1],k_shr,k),_bWz_)})),
       shrink_values=
        caml_call1
         (round_robin,
          caml_call2
           (map$11,
            list,
            function(param)
             {var v=param[2],k=param[1];
              function _bWy_(v){return caml_call3(Base_Map[87][9],t,k,v)}
              return caml_call2(map$0,caml_call2(_nO_[1],v_shr,v),_bWy_)}));
      return caml_call1
              (round_robin,[0,drop_keys,[0,shrink_keys,[0,shrink_values,0]]])}
    function shr_tree(comparator,k_shr,v_shr)
     {function _bWv_(tree)
       {var _bWw_=Base_Map[87][64];
        return caml_call2
                (map$0,
                 shrink$0
                  (k_shr,v_shr,caml_call2(Base_Map[87][79],comparator,tree)),
                 _bWw_)}
      return caml_call1(_nO_[2],_bWv_)}
    function shrinker$2(k_shr,v_shr)
     {function _bWu_(t){return shrink$0(k_shr,v_shr,t)}
      return caml_call1(_nO_[2],_bWu_)}
    function gen$2(m)
     {var _bWr_=m[1];
      return function(_bWs_,_bWt_){return gen$1(_bWr_,_bWs_,_bWt_)}}
    var
     _rr_=Base_Map[87],
     to_sequence$1=_rr_[65],
     to_tree=_rr_[64],
     rank=_rr_[63],
     nth_exn$1=_rr_[62],
     nth$1=_rr_[61],
     closest_key=_rr_[60],
     range_to_alist=_rr_[59],
     fold_range_inclusive=_rr_[58],
     subrange=_rr_[57],
     append$2=_rr_[56],
     split=_rr_[55],
     counti$3=_rr_[54],
     count$4=_rr_[53],
     existsi$3=_rr_[52],
     exists$4=_rr_[51],
     for_alli$3=_rr_[50],
     for_all$4=_rr_[49],
     max_elt_exn=_rr_[48],
     max_elt$3=_rr_[47],
     min_elt_exn=_rr_[46],
     min_elt$3=_rr_[45],
     symmetric_diff=_rr_[44],
     merge$3=_rr_[43],
     validate$0=_rr_[42],
     to_alist$0=_rr_[41],
     data$2=_rr_[40],
     keys$0=_rr_[39],
     equal$7=_rr_[38],
     compare_direct=_rr_[37],
     partition_tf$2=_rr_[36],
     partitioni_tf$1=_rr_[35],
     partition_map$1=_rr_[34],
     partition_mapi$0=_rr_[33],
     filter_mapi$3=_rr_[32],
     filter_map$4=_rr_[31],
     filteri$3=_rr_[30],
     filter$5=_rr_[29],
     filter_keys$0=_rr_[28],
     fold2$0=_rr_[27],
     fold_right$1=_rr_[26],
     fold$5=_rr_[25],
     mapi$3=_rr_[24],
     map$13=_rr_[23],
     iter2$0=_rr_[22],
     iteri$3=_rr_[21],
     iter$6=_rr_[20],
     iter_keys$0=_rr_[19],
     mem$5=_rr_[18],
     remove$2=_rr_[17],
     find_exn$4=_rr_[16],
     find$5=_rr_[15],
     update$0=_rr_[14],
     change$0=_rr_[13],
     find_multi$0=_rr_[12],
     remove_multi$0=_rr_[11],
     add_multi$0=_rr_[10],
     set$1=_rr_[9],
     add_exn$0=_rr_[8],
     add$3=_rr_[7],
     length$7=_rr_[6],
     is_empty$5=_rr_[5],
     invariants=_rr_[4];
    function obs$3(k,v){return obs$2(k,v)}
    function shrinker$3(k,v){return shrinker$2(k,v)}
    var
     _rs_=Base_Map[87],
     hash_fold_direct=_rs_[81],
     comparator$2=_rs_[80],
     of_tree=_rs_[79],
     of_iteri=_rs_[78],
     of_increasing_sequence=_rs_[77],
     of_increasing_iterator_unchecked=_rs_[76],
     of_sorted_array_unchecked=_rs_[75],
     of_sorted_array=_rs_[74],
     of_alist_reduce=_rs_[73],
     of_alist_fold=_rs_[72],
     of_alist_multi$0=_rs_[71],
     of_alist_exn$0=_rs_[70],
     of_alist_or_error$0=_rs_[69],
     of_alist$0=_rs_[68],
     singleton$3=_rs_[67],
     empty$2=_rs_[66],
     to_tree$0=_rs_[64],
     t_of_sexp_direct=_rs_[2],
     sexp_of_t$29=_rs_[1];
    function of_hashtbl_exn(comparator,hashtbl)
     {var match=caml_call2(of_iteri,comparator,caml_call1(iteri$2,hashtbl));
      if(17724 <= match[1]){var map=match[2];return map}
      var key=match[2];
      return failwiths
              (0,0,cst_Map_of_hashtbl_exn_duplicate_key,key,comparator[2])}
    function of_hashtbl_exn$0(comparator,hashtbl)
     {return caml_call1(to_tree$0,of_hashtbl_exn(comparator,hashtbl))}
    var
     invariants$0=Base_Map[2],
     empty$3=Base_Map[5],
     singleton$4=Base_Map[6],
     of_alist$1=Base_Map[7],
     of_alist_or_error$1=Base_Map[8],
     of_alist_exn$1=Base_Map[9],
     of_alist_multi$1=Base_Map[10],
     of_alist_fold$0=Base_Map[11],
     of_alist_reduce$0=Base_Map[12],
     of_iteri$0=Base_Map[13],
     of_sorted_array$0=Base_Map[14],
     of_sorted_array_unchecked$0=Base_Map[15],
     of_increasing_iterator_unchecked$0=Base_Map[16],
     of_increasing_sequence$0=Base_Map[17],
     is_empty$6=Base_Map[18],
     length$8=Base_Map[19],
     set$2=Base_Map[20],
     add$4=Base_Map[21],
     add_exn$1=Base_Map[22],
     add_multi$1=Base_Map[23],
     remove_multi$1=Base_Map[24],
     find_multi$1=Base_Map[25],
     change$1=Base_Map[26],
     update$1=Base_Map[27],
     find$6=Base_Map[28],
     find_exn$5=Base_Map[29],
     remove$3=Base_Map[30],
     mem$6=Base_Map[31],
     iter_keys$1=Base_Map[32],
     iter$7=Base_Map[33],
     iteri$4=Base_Map[34],
     iter2$1=Base_Map[35],
     map$14=Base_Map[36],
     mapi$4=Base_Map[37],
     fold$6=Base_Map[38],
     fold_right$2=Base_Map[39],
     fold2$1=Base_Map[40],
     filter_keys$1=Base_Map[41],
     filter$6=Base_Map[42],
     filteri$4=Base_Map[43],
     filter_map$5=Base_Map[44],
     filter_mapi$4=Base_Map[45],
     partition_mapi$1=Base_Map[46],
     partition_map$2=Base_Map[47],
     partitioni_tf$2=Base_Map[48],
     partition_tf$3=Base_Map[49],
     compare_direct$0=Base_Map[50],
     equal$8=Base_Map[52],
     keys$1=Base_Map[53],
     data$3=Base_Map[54],
     to_alist$1=Base_Map[55],
     validate$1=Base_Map[56],
     merge$4=Base_Map[57],
     symmetric_diff$0=Base_Map[60],
     min_elt$4=Base_Map[61],
     min_elt_exn$0=Base_Map[62],
     max_elt$4=Base_Map[63],
     max_elt_exn$0=Base_Map[64],
     for_all$5=Base_Map[65],
     for_alli$4=Base_Map[66],
     exists$5=Base_Map[67],
     existsi$4=Base_Map[68],
     count$5=Base_Map[69],
     counti$4=Base_Map[70],
     split$0=Base_Map[71],
     append$3=Base_Map[72],
     subrange$0=Base_Map[73],
     fold_range_inclusive$0=Base_Map[74],
     range_to_alist$0=Base_Map[75],
     closest_key$0=Base_Map[76],
     nth$2=Base_Map[77],
     nth_exn$2=Base_Map[78],
     rank$0=Base_Map[79],
     to_sequence$2=Base_Map[80];
    function of_tree$0(m){return caml_call1(Base_Map[87][79],m[1])}
    var to_tree$1=Base_Map[87][64];
    function find_or_error(t,key)
     {var
       comparator=caml_call1(comparator$2,t),
       match=caml_call2(find$6,t,key);
      if(match){var data=match[1];return [0,data]}
      var sexp_of_key=comparator[2],_bWq_=[0,caml_call1(sexp_of_key,key),0];
      return caml_call1
              (_lw_,
               [1,
                [0,caml_call1(Sexplib0_Sexp_conv[7],cst_key_not_found),_bWq_]])}
    var _rt_=Base_Map[58];
    function of_hashtbl_exn$1(m,t){return of_hashtbl_exn(m[1],t)}
    function Creators(Key)
     {var
       comparator=Key[1],
       M_empty=caml_call1(Base_Map[87][82],Key),
       empty=M_empty[1];
      function of_tree$0(tree){return caml_call2(of_tree,comparator,tree)}
      function singleton(k,v){return caml_call3(singleton$3,comparator,k,v)}
      function of_sorted_array_unchecked$0(array)
       {return caml_call2(of_sorted_array_unchecked,comparator,array)}
      function of_sorted_array$0(array)
       {return caml_call2(of_sorted_array,comparator,array)}
      function of_increasing_iterator_unchecked$0(len,f)
       {return caml_call3(of_increasing_iterator_unchecked,comparator,len,f)}
      function of_increasing_sequence$0(seq)
       {return caml_call2(of_increasing_sequence,comparator,seq)}
      function of_alist(alist){return caml_call2(of_alist$0,comparator,alist)}
      function of_alist_or_error(alist)
       {return caml_call2(of_alist_or_error$0,comparator,alist)}
      function of_alist_exn(alist)
       {return caml_call2(of_alist_exn$0,comparator,alist)}
      function of_hashtbl_exn$0(hashtbl)
       {return of_hashtbl_exn(comparator,hashtbl)}
      function of_alist_multi(alist)
       {return caml_call2(of_alist_multi$0,comparator,alist)}
      function of_alist_fold$0(alist,init,f)
       {return caml_call4(of_alist_fold,comparator,alist,init,f)}
      function of_alist_reduce$0(alist,f)
       {return caml_call3(of_alist_reduce,comparator,alist,f)}
      function of_iteri$0(iteri){return caml_call2(of_iteri,comparator,iteri)}
      function t_of_sexp(k_of_sexp,v_of_sexp,sexp)
       {return caml_call4
                (t_of_sexp_direct,comparator,k_of_sexp,v_of_sexp,sexp)}
      function gen(gen_k,gen_v){return gen$1(comparator,gen_k,gen_v)}
      return [0,
              t_of_sexp,
              empty,
              singleton,
              of_sorted_array$0,
              of_sorted_array_unchecked$0,
              of_increasing_iterator_unchecked$0,
              of_increasing_sequence$0,
              of_alist,
              of_alist_or_error,
              of_alist_exn,
              of_alist_multi,
              of_alist_fold$0,
              of_alist_reduce$0,
              of_iteri$0,
              of_tree$0,
              of_hashtbl_exn$0,
              gen]}
    function Make_tree(Key)
     {var comparator=Key[1],sexp_of_t=Base_Map[87][3][1];
      function t_of_sexp(a,b,c)
       {return caml_call4(Base_Map[87][3][2],comparator,a,b,c)}
      var empty=Base_Map[87][3][79];
      function of_tree(tree){return tree}
      function singleton(a)
       {return caml_call2(Base_Map[87][3][4],comparator,a)}
      function of_sorted_array_unchecked(a)
       {return caml_call2(Base_Map[87][3][12],comparator,a)}
      function of_sorted_array(a)
       {return caml_call2(Base_Map[87][3][11],comparator,a)}
      function of_increasing_iterator_unchecked(len,f)
       {return caml_call3(Base_Map[87][3][13],comparator,len,f)}
      function of_increasing_sequence(seq)
       {return caml_call2(Base_Map[87][3][14],comparator,seq)}
      function of_alist(a){return caml_call2(Base_Map[87][3][5],comparator,a)}
      function of_alist_or_error(a)
       {return caml_call2(Base_Map[87][3][6],comparator,a)}
      function of_alist_exn(a)
       {return caml_call2(Base_Map[87][3][7],comparator,a)}
      function of_hashtbl_exn(a){return of_hashtbl_exn$0(comparator,a)}
      function of_alist_multi(a)
       {return caml_call2(Base_Map[87][3][8],comparator,a)}
      function of_alist_fold(a,init,f)
       {return caml_call4(Base_Map[87][3][9],comparator,a,init,f)}
      function of_alist_reduce(a,f)
       {return caml_call3(Base_Map[87][3][10],comparator,a,f)}
      function of_iteri(iteri)
       {return caml_call2(Base_Map[87][3][15],comparator,iteri)}
      function to_tree(t){return t}
      function invariants(a)
       {return caml_call2(Base_Map[87][3][17],comparator,a)}
      function is_empty(a){return caml_call1(Base_Map[87][3][18],a)}
      function length(a){return caml_call1(Base_Map[87][3][19],a)}
      function set(a,key,data)
       {return caml_call4(Base_Map[87][3][22],comparator,a,key,data)}
      function add(a,key,data)
       {return caml_call4(Base_Map[87][3][20],comparator,a,key,data)}
      function add_exn(a,key,data)
       {return caml_call4(Base_Map[87][3][21],comparator,a,key,data)}
      function add_multi(a,key,data)
       {return caml_call4(Base_Map[87][3][23],comparator,a,key,data)}
      function remove_multi(a,b)
       {return caml_call3(Base_Map[87][3][24],comparator,a,b)}
      function find_multi(a,b)
       {return caml_call3(Base_Map[87][3][25],comparator,a,b)}
      function change(a,b,f)
       {return caml_call4(Base_Map[87][3][26],comparator,a,b,f)}
      function update(a,b,f)
       {return caml_call4(Base_Map[87][3][27],comparator,a,b,f)}
      function find_exn(a,b)
       {return caml_call3(Base_Map[87][3][29],comparator,a,b)}
      function find(a,b)
       {return caml_call3(Base_Map[87][3][28],comparator,a,b)}
      function remove(a,b)
       {return caml_call3(Base_Map[87][3][30],comparator,a,b)}
      function mem(a,b){return caml_call3(Base_Map[87][3][31],comparator,a,b)}
      var
       iter_keys=Base_Map[87][3][32],
       iter=Base_Map[87][3][33],
       iteri=Base_Map[87][3][34];
      function iter2(a,b,f)
       {return caml_call4(Base_Map[87][3][35],comparator,a,b,f)}
      var
       map=Base_Map[87][3][36],
       mapi=Base_Map[87][3][37],
       fold=Base_Map[87][3][38],
       fold_right=Base_Map[87][3][39];
      function fold2(a,b,init,f)
       {return caml_call5(Base_Map[87][3][40],comparator,a,b,init,f)}
      function filter_keys(a,f)
       {return caml_call3(Base_Map[87][3][41],comparator,a,f)}
      function filter(a,f)
       {return caml_call3(Base_Map[87][3][42],comparator,a,f)}
      function filteri(a,f)
       {return caml_call3(Base_Map[87][3][43],comparator,a,f)}
      function filter_map(a,f)
       {return caml_call3(Base_Map[87][3][44],comparator,a,f)}
      function filter_mapi(a,f)
       {return caml_call3(Base_Map[87][3][45],comparator,a,f)}
      function partition_mapi(t,f)
       {return caml_call3(Base_Map[87][3][46],comparator,t,f)}
      function partition_map(t,f)
       {return caml_call3(Base_Map[87][3][47],comparator,t,f)}
      function partitioni_tf(t,f)
       {return caml_call3(Base_Map[87][3][48],comparator,t,f)}
      function partition_tf(t,f)
       {return caml_call3(Base_Map[87][3][49],comparator,t,f)}
      function compare_direct(a,b,c)
       {return caml_call4(Base_Map[87][3][50],comparator,a,b,c)}
      function equal(a,b,c)
       {return caml_call4(Base_Map[87][3][51],comparator,a,b,c)}
      var
       keys=Base_Map[87][3][52],
       data=Base_Map[87][3][53],
       to_alist=Base_Map[87][3][54],
       validate=Base_Map[87][3][55];
      function symmetric_diff(a,b,data_equal)
       {return caml_call4(Base_Map[87][3][57],comparator,a,b,data_equal)}
      function merge(a,b,f)
       {return caml_call4(Base_Map[87][3][56],comparator,a,b,f)}
      var
       min_elt=Base_Map[87][3][58],
       min_elt_exn=Base_Map[87][3][59],
       max_elt=Base_Map[87][3][60],
       max_elt_exn=Base_Map[87][3][61],
       for_all=Base_Map[87][3][62],
       for_alli=Base_Map[87][3][63],
       exists=Base_Map[87][3][64],
       existsi=Base_Map[87][3][65],
       count=Base_Map[87][3][66],
       counti=Base_Map[87][3][67];
      function split(a,b)
       {return caml_call3(Base_Map[87][3][68],comparator,a,b)}
      function append(lower_part,upper_part)
       {return caml_call3
                (Base_Map[87][3][69],comparator,lower_part,upper_part)}
      function subrange(t,lower_bound,upper_bound)
       {return caml_call4
                (Base_Map[87][3][70],comparator,t,lower_bound,upper_bound)}
      function fold_range_inclusive(t,min,max,init,f)
       {return caml_call6(Base_Map[87][3][71],comparator,t,min,max,init,f)}
      function range_to_alist(t,min,max)
       {return caml_call4(Base_Map[87][3][72],comparator,t,min,max)}
      function closest_key(a,b,c)
       {return caml_call4(Base_Map[87][3][73],comparator,a,b,c)}
      function nth(a){return caml_call2(Base_Map[87][3][74],comparator,a)}
      function nth_exn(a){return caml_call2(Base_Map[87][3][75],comparator,a)}
      function rank(a,b)
       {return caml_call3(Base_Map[87][3][76],comparator,a,b)}
      function to_sequence
       (order,keys_greater_or_equal_to,keys_less_or_equal_to,t)
       {return caml_call5
                (Base_Map[87][3][78],
                 comparator,
                 order,
                 keys_greater_or_equal_to,
                 keys_less_or_equal_to,
                 t)}
      function gen(k,v){return gen_tree(comparator,k,v)}
      function obs(k,v){return obs_tree(k,v)}
      function shrinker(k,v){return shr_tree(comparator,k,v)}
      return [0,
              comparator,
              sexp_of_t,
              t_of_sexp,
              empty,
              of_tree,
              singleton,
              of_sorted_array_unchecked,
              of_sorted_array,
              of_increasing_iterator_unchecked,
              of_increasing_sequence,
              of_alist,
              of_alist_or_error,
              of_alist_exn,
              of_hashtbl_exn,
              of_alist_multi,
              of_alist_fold,
              of_alist_reduce,
              of_iteri,
              to_tree,
              invariants,
              is_empty,
              length,
              set,
              add,
              add_exn,
              add_multi,
              remove_multi,
              find_multi,
              change,
              update,
              find_exn,
              find,
              remove,
              mem,
              iter_keys,
              iter,
              iteri,
              iter2,
              map,
              mapi,
              fold,
              fold_right,
              fold2,
              filter_keys,
              filter,
              filteri,
              filter_map,
              filter_mapi,
              partition_mapi,
              partition_map,
              partitioni_tf,
              partition_tf,
              compare_direct,
              equal,
              keys,
              data,
              to_alist,
              validate,
              symmetric_diff,
              merge,
              min_elt,
              min_elt_exn,
              max_elt,
              max_elt_exn,
              for_all,
              for_alli,
              exists,
              existsi,
              count,
              counti,
              split,
              append,
              subrange,
              fold_range_inclusive,
              range_to_alist,
              closest_key,
              nth,
              nth_exn,
              rank,
              to_sequence,
              gen,
              obs,
              shrinker]}
    function init_for_bin_prot(len,f,comparator)
     {var map=caml_call3(of_increasing_iterator_unchecked,comparator,len,f);
      if(caml_call1(invariants$0,map))return map;
      var match=caml_call2(of_iteri,comparator,caml_call1(iteri$4,map));
      if(17724 <= match[1]){var map$0=match[2];return map$0}
      return caml_call1(_aV_,cst_Map_bin_read_t_duplicate_element_in_map)}
    var
     _ru_=Creators(Poly$0),
     _rv_=_ru_[1],
     _rw_=_ru_[2],
     _rx_=_ru_[3],
     _ry_=_ru_[4],
     _rz_=_ru_[5],
     _rA_=_ru_[6],
     _rB_=_ru_[7],
     _rC_=_ru_[8],
     _rD_=_ru_[9],
     _rE_=_ru_[10],
     _rF_=_ru_[11],
     _rG_=_ru_[12],
     _rH_=_ru_[13],
     _rI_=_ru_[14],
     _rJ_=_ru_[15],
     _rK_=_ru_[16],
     _rL_=_ru_[17];
    function compare$21(param,cmpv,t1,t2)
     {return caml_call3(compare_direct,cmpv,t1,t2)}
    function sexp_of_t$30(sexp_of_k,sexp_of_v,t)
     {return caml_call4
              (sexp_of_t$29,
               sexp_of_k,
               sexp_of_v,
               function(param){return _rM_},
               t)}
    var
     _rN_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_b$8),
     _rO_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_map_ml_342_30),
     _rP_=[0,caml_call2(Bin_prot_Shape[15],_rO_,_rN_),0],
     _rQ_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$32),
     _rR_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_map_ml_342_25),
     _rS_=[0,caml_call2(Bin_prot_Shape[15],_rR_,_rQ_),_rP_],
     _rT_=caml_call1(Bin_prot_Shape[7],_rS_),
     _rU_=[0,caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_b$9),0],
     _rV_=[0,caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$33),_rU_],
     _rW_=
      [0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_el$5),_rV_,_rT_],0],
     _rX_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_map_ml_342_6),
     group$38=caml_call2(Bin_prot_Shape[6],_rX_,_rW_);
    function bin_shape_el$0(a,b)
     {var _bWp_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_el$6);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$38,_bWp_),[0,a,[0,b,0]])}
    function bin_size_el$0(size_of_a,size_of_b,param)
     {var v2=param[2],v1=param[1],size=caml_call1(size_of_a,v1) | 0;
      return size + caml_call1(size_of_b,v2) | 0}
    function bin_write_el$0(write_a,write_b,buf,pos,param)
     {var v2=param[2],v1=param[1],pos$0=caml_call3(write_a,buf,pos,v1);
      return caml_call3(write_b,buf,pos$0,v2)}
    function bin_read_el$0(of_a,of_b,buf,pos_ref)
     {var v1=caml_call2(of_a,buf,pos_ref),v2=caml_call2(of_b,buf,pos_ref);
      return [0,v1,v2]}
    var
     caller_identity$0=
      caml_call1
       (Bin_shape_lib_Bin_shape[5][1],
        cst_b7d7b1a0_4992_11e6_8a32_bbb221fa025c);
    function iter$8(t,f)
     {return caml_call2
              (iteri$3,
               t,
               function(key,data){return caml_call1(f,[0,key,data])})}
    function init$3(len,next)
     {var _bWo_=Poly$0[1];
      return init_for_bin_prot
              (len,function(param){return caml_call1(next,0)},_bWo_)}
    var
     include$34=
      caml_call1
       (Bin_prot_Utils[13],
        [0,
         caller_identity$0,
         module_name$2,
         length$7,
         iter$8,
         init$3,
         bin_size_el$0,
         bin_write_el$0,
         bin_read_el$0,
         bin_shape_el$0]),
     bin_shape_t$29=include$34[1],
     bin_size_t$32=include$34[2],
     bin_write_t$32=include$34[3],
     bin_read_t$65=include$34[4],
     bin_read_t$66=include$34[5],
     bin_writer_t$24=include$34[6],
     bin_reader_t$24=include$34[7],
     bin_t$24=include$34[8],
     include$35=Make_tree(Poly$0),
     t_of_sexp$25=include$35[3],
     empty$4=include$35[4],
     of_tree$1=include$35[5],
     singleton$5=include$35[6],
     of_sorted_array_unchecked$1=include$35[7],
     of_sorted_array$1=include$35[8],
     of_increasing_iterator_unchecked$1=include$35[9],
     of_increasing_sequence$1=include$35[10],
     of_alist$2=include$35[11],
     of_alist_or_error$2=include$35[12],
     of_alist_exn$2=include$35[13],
     of_hashtbl_exn$2=include$35[14],
     of_alist_multi$2=include$35[15],
     of_alist_fold$1=include$35[16],
     of_alist_reduce$1=include$35[17],
     of_iteri$1=include$35[18],
     to_tree$2=include$35[19],
     invariants$1=include$35[20],
     is_empty$7=include$35[21],
     length$9=include$35[22],
     set$3=include$35[23],
     add$5=include$35[24],
     add_exn$2=include$35[25],
     add_multi$2=include$35[26],
     remove_multi$2=include$35[27],
     find_multi$2=include$35[28],
     change$2=include$35[29],
     update$2=include$35[30],
     find_exn$6=include$35[31],
     find$7=include$35[32],
     remove$4=include$35[33],
     mem$7=include$35[34],
     iter_keys$2=include$35[35],
     iter$9=include$35[36],
     iteri$5=include$35[37],
     iter2$2=include$35[38],
     map$15=include$35[39],
     mapi$5=include$35[40],
     fold$7=include$35[41],
     fold_right$3=include$35[42],
     fold2$2=include$35[43],
     filter_keys$2=include$35[44],
     filter$7=include$35[45],
     filteri$5=include$35[46],
     filter_map$6=include$35[47],
     filter_mapi$5=include$35[48],
     partition_mapi$2=include$35[49],
     partition_map$3=include$35[50],
     partitioni_tf$3=include$35[51],
     partition_tf$4=include$35[52],
     compare_direct$1=include$35[53],
     equal$9=include$35[54],
     keys$2=include$35[55],
     data$4=include$35[56],
     to_alist$2=include$35[57],
     validate$2=include$35[58],
     symmetric_diff$1=include$35[59],
     merge$5=include$35[60],
     min_elt$5=include$35[61],
     min_elt_exn$1=include$35[62],
     max_elt$5=include$35[63],
     max_elt_exn$1=include$35[64],
     for_all$6=include$35[65],
     for_alli$5=include$35[66],
     exists$6=include$35[67],
     existsi$5=include$35[68],
     count$6=include$35[69],
     counti$5=include$35[70],
     split$1=include$35[71],
     append$4=include$35[72],
     subrange$1=include$35[73],
     fold_range_inclusive$1=include$35[74],
     range_to_alist$1=include$35[75],
     closest_key$1=include$35[76],
     nth$3=include$35[77],
     nth_exn$3=include$35[78],
     rank$1=include$35[79],
     to_sequence$3=include$35[80],
     gen$3=include$35[81],
     obs$4=include$35[82],
     shrinker$4=include$35[83],
     _rY_=include$35[2];
    function sexp_of_t$31(sexp_of_k,sexp_of_v,t)
     {return caml_call4
              (_rY_,sexp_of_k,sexp_of_v,function(param){return _rZ_},t)}
    function Make_plain_using_comparator(Key)
     {var
       Key_S1=caml_call1(S_to_S1,[0,Key[2]]),
       _bWc_=Creators(Key_S1),
       t_of_sexp=_bWc_[1],
       empty=_bWc_[2],
       singleton=_bWc_[3],
       of_sorted_array=_bWc_[4],
       of_sorted_array_unchecked=_bWc_[5],
       of_increasing_iterator_unchecked=_bWc_[6],
       of_increasing_sequence=_bWc_[7],
       of_alist=_bWc_[8],
       of_alist_or_error=_bWc_[9],
       of_alist_exn=_bWc_[10],
       of_alist_multi=_bWc_[11],
       of_alist_fold=_bWc_[12],
       of_alist_reduce=_bWc_[13],
       of_iteri=_bWc_[14],
       of_tree=_bWc_[15],
       of_hashtbl_exn=_bWc_[16],
       gen=_bWc_[17];
      function compare(cmpv,t1,t2)
       {return caml_call3(compare_direct,cmpv,t1,t2)}
      function sexp_of_t(sexp_of_v,t)
       {function _bWn_(param){return _r0_}
        return caml_call4(sexp_of_t$29,Key[1],sexp_of_v,_bWn_,t)}
      function Provide_of_sexp(Key)
       {function t_of_sexp$0(v_of_sexp,sexp)
         {return caml_call3(t_of_sexp,Key[1],v_of_sexp,sexp)}
        return [0,t_of_sexp$0]}
      function Provide_hash(Key)
       {function hash_fold_t(hash_fold_data,state,t)
         {return caml_call4(hash_fold_direct,Key[1],hash_fold_data,state,t)}
        return [0,hash_fold_t]}
      function Provide_bin_io(Key$0)
       {var
         comparator=Key[2],
         bin_read_t=Key$0[2],
         bin_size_t=Key$0[5],
         bin_write_t=Key$0[6],
         bin_shape_t=Key$0[8],
         _bWf_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_v$4),
         _bWg_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_map_ml_407_27),
         _bWh_=
          [0,bin_shape_t,[0,caml_call2(Bin_prot_Shape[15],_bWg_,_bWf_),0]],
         _bWi_=caml_call1(Bin_prot_Shape[7],_bWh_),
         _bWj_=[0,caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_v$5),0],
         _bWk_=
          [0,
           [0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_el$7),_bWj_,_bWi_],
           0],
         _bWl_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_map_ml_407_6),
         group=caml_call2(Bin_prot_Shape[6],_bWl_,_bWk_);
        function bin_shape_el(v)
         {var _bWm_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_el$8);
          return caml_call1
                  (caml_call2(Bin_prot_Shape[14],group,_bWm_),[0,v,0])}
        function bin_size_el(size_of_v,param)
         {var v2=param[2],v1=param[1],size=caml_call1(bin_size_t,v1) | 0;
          return size + caml_call1(size_of_v,v2) | 0}
        function bin_write_el(write_v,buf,pos,param)
         {var
           v2=param[2],
           v1=param[1],
           pos$0=caml_call3(bin_write_t,buf,pos,v1);
          return caml_call3(write_v,buf,pos$0,v2)}
        function bin_read_el(of_v,buf,pos_ref)
         {var
           v1=caml_call2(bin_read_t,buf,pos_ref),
           v2=caml_call2(of_v,buf,pos_ref);
          return [0,v1,v2]}
        var
         caller_identity=
          caml_call1
           (Bin_shape_lib_Bin_shape[5][1],
            cst_dfb300f8_4992_11e6_9c15_73a2ac6b815c);
        function iter(t,f)
         {return caml_call2
                  (iteri$3,
                   t,
                   function(key,data){return caml_call1(f,[0,key,data])})}
        function init(len,next)
         {return init_for_bin_prot
                  (len,function(param){return caml_call1(next,0)},comparator)}
        return caml_call1
                (Bin_prot_Utils[12],
                 [0,
                  caller_identity,
                  module_name$3,
                  length$7,
                  iter,
                  init,
                  bin_size_el,
                  bin_write_el,
                  bin_read_el,
                  bin_shape_el])}
      var
       include=Make_tree(Key_S1),
       comparator=include[1],
       t_of_sexp$0=include[3],
       empty$0=include[4],
       of_tree$0=include[5],
       singleton$0=include[6],
       of_sorted_array_unchecked$0=include[7],
       of_sorted_array$0=include[8],
       of_increasing_iterator_unchecked$0=include[9],
       of_increasing_sequence$0=include[10],
       of_alist$0=include[11],
       of_alist_or_error$0=include[12],
       of_alist_exn$0=include[13],
       of_hashtbl_exn$0=include[14],
       of_alist_multi$0=include[15],
       of_alist_fold$0=include[16],
       of_alist_reduce$0=include[17],
       of_iteri$0=include[18],
       to_tree$0=include[19],
       invariants$0=include[20],
       is_empty=include[21],
       length=include[22],
       set=include[23],
       add=include[24],
       add_exn=include[25],
       add_multi=include[26],
       remove_multi=include[27],
       find_multi=include[28],
       change=include[29],
       update=include[30],
       find_exn=include[31],
       find=include[32],
       remove=include[33],
       mem=include[34],
       iter_keys=include[35],
       iter=include[36],
       iteri=include[37],
       iter2=include[38],
       map=include[39],
       mapi=include[40],
       fold=include[41],
       fold_right=include[42],
       fold2=include[43],
       filter_keys=include[44],
       filter=include[45],
       filteri=include[46],
       filter_map=include[47],
       filter_mapi=include[48],
       partition_mapi=include[49],
       partition_map=include[50],
       partitioni_tf=include[51],
       partition_tf=include[52],
       compare_direct$0=include[53],
       equal=include[54],
       keys=include[55],
       data=include[56],
       to_alist=include[57],
       validate=include[58],
       symmetric_diff$0=include[59],
       merge=include[60],
       min_elt=include[61],
       min_elt_exn$0=include[62],
       max_elt=include[63],
       max_elt_exn$0=include[64],
       for_all=include[65],
       for_alli=include[66],
       exists=include[67],
       existsi=include[68],
       count=include[69],
       counti=include[70],
       split$0=include[71],
       append=include[72],
       subrange$0=include[73],
       fold_range_inclusive$0=include[74],
       range_to_alist$0=include[75],
       closest_key$0=include[76],
       nth=include[77],
       nth_exn=include[78],
       rank$0=include[79],
       to_sequence=include[80],
       gen$0=include[81],
       obs=include[82],
       shrinker=include[83],
       _bWd_=include[2];
      function sexp_of_t$0(sexp_of_v,t)
       {function _bWe_(param){return _r1_}
        return caml_call4(_bWd_,Key[1],sexp_of_v,_bWe_,t)}
      function Provide_of_sexp$0(X)
       {function t_of_sexp(v_of_sexp,sexp)
         {return caml_call3(t_of_sexp$0,X[1],v_of_sexp,sexp)}
        return [0,t_of_sexp]}
      var
       Tree=
        [0,
         comparator,
         t_of_sexp$0,
         empty$0,
         of_tree$0,
         singleton$0,
         of_sorted_array_unchecked$0,
         of_sorted_array$0,
         of_increasing_iterator_unchecked$0,
         of_increasing_sequence$0,
         of_alist$0,
         of_alist_or_error$0,
         of_alist_exn$0,
         of_hashtbl_exn$0,
         of_alist_multi$0,
         of_alist_fold$0,
         of_alist_reduce$0,
         of_iteri$0,
         to_tree$0,
         invariants$0,
         is_empty,
         length,
         set,
         add,
         add_exn,
         add_multi,
         remove_multi,
         find_multi,
         change,
         update,
         find_exn,
         find,
         remove,
         mem,
         iter_keys,
         iter,
         iteri,
         iter2,
         map,
         mapi,
         fold,
         fold_right,
         fold2,
         filter_keys,
         filter,
         filteri,
         filter_map,
         filter_mapi,
         partition_mapi,
         partition_map,
         partitioni_tf,
         partition_tf,
         compare_direct$0,
         equal,
         keys,
         data,
         to_alist,
         validate,
         symmetric_diff$0,
         merge,
         min_elt,
         min_elt_exn$0,
         max_elt,
         max_elt_exn$0,
         for_all,
         for_alli,
         exists,
         existsi,
         count,
         counti,
         split$0,
         append,
         subrange$0,
         fold_range_inclusive$0,
         range_to_alist$0,
         closest_key$0,
         nth,
         nth_exn,
         rank$0,
         to_sequence,
         gen$0,
         obs,
         shrinker,
         sexp_of_t$0,
         Provide_of_sexp$0];
      return [0,
              Key,
              Key_S1,
              t_of_sexp,
              empty,
              singleton,
              of_sorted_array,
              of_sorted_array_unchecked,
              of_increasing_iterator_unchecked,
              of_increasing_sequence,
              of_alist,
              of_alist_or_error,
              of_alist_exn,
              of_alist_multi,
              of_alist_fold,
              of_alist_reduce,
              of_iteri,
              of_tree,
              of_hashtbl_exn,
              gen,
              invariants,
              is_empty$5,
              length$7,
              add$3,
              add_exn$0,
              set$1,
              add_multi$0,
              remove_multi$0,
              find_multi$0,
              change$0,
              update$0,
              find$5,
              find_exn$4,
              remove$2,
              mem$5,
              iter_keys$0,
              iter$6,
              iteri$3,
              iter2$0,
              map$13,
              mapi$3,
              fold$5,
              fold_right$1,
              fold2$0,
              filter_keys$0,
              filter$5,
              filteri$3,
              filter_map$4,
              filter_mapi$3,
              partition_mapi$0,
              partition_map$1,
              partitioni_tf$1,
              partition_tf$2,
              compare_direct,
              equal$7,
              keys$0,
              data$2,
              to_alist$0,
              validate$0,
              merge$3,
              symmetric_diff,
              min_elt$3,
              min_elt_exn,
              max_elt$3,
              max_elt_exn,
              for_all$4,
              for_alli$3,
              exists$4,
              existsi$3,
              count$4,
              counti$3,
              split,
              append$2,
              subrange,
              fold_range_inclusive,
              range_to_alist,
              closest_key,
              nth$1,
              nth_exn$1,
              rank,
              to_tree,
              to_sequence$1,
              obs$3,
              shrinker$3,
              compare,
              sexp_of_t,
              Provide_of_sexp,
              Provide_hash,
              Provide_bin_io,
              Tree]}
    function Make_using_comparator(Key)
     {var
       M1=Make_plain_using_comparator([0,Key[2],Key[3]]),
       Provide_bin_io=M1[88],
       Provide_hash=M1[87],
       Provide_of_sexp=M1[86],
       sexp_of_t=M1[85],
       compare=M1[84],
       shrinker=M1[83],
       obs=M1[82],
       to_sequence=M1[81],
       to_tree=M1[80],
       rank=M1[79],
       nth_exn=M1[78],
       nth=M1[77],
       closest_key=M1[76],
       range_to_alist=M1[75],
       fold_range_inclusive=M1[74],
       subrange=M1[73],
       append=M1[72],
       split=M1[71],
       counti=M1[70],
       count=M1[69],
       existsi=M1[68],
       exists=M1[67],
       for_alli=M1[66],
       for_all=M1[65],
       max_elt_exn=M1[64],
       max_elt=M1[63],
       min_elt_exn=M1[62],
       min_elt=M1[61],
       symmetric_diff=M1[60],
       merge=M1[59],
       validate=M1[58],
       to_alist=M1[57],
       data=M1[56],
       keys=M1[55],
       equal=M1[54],
       compare_direct=M1[53],
       partition_tf=M1[52],
       partitioni_tf=M1[51],
       partition_map=M1[50],
       partition_mapi=M1[49],
       filter_mapi=M1[48],
       filter_map=M1[47],
       filteri=M1[46],
       filter=M1[45],
       filter_keys=M1[44],
       fold2=M1[43],
       fold_right=M1[42],
       fold=M1[41],
       mapi=M1[40],
       map=M1[39],
       iter2=M1[38],
       iteri=M1[37],
       iter=M1[36],
       iter_keys=M1[35],
       mem=M1[34],
       remove=M1[33],
       find_exn=M1[32],
       find=M1[31],
       update=M1[30],
       change=M1[29],
       find_multi=M1[28],
       remove_multi=M1[27],
       add_multi=M1[26],
       set=M1[25],
       add_exn=M1[24],
       add=M1[23],
       length=M1[22],
       is_empty=M1[21],
       invariants=M1[20],
       gen=M1[19],
       of_hashtbl_exn=M1[18],
       of_tree=M1[17],
       of_iteri=M1[16],
       of_alist_reduce=M1[15],
       of_alist_fold=M1[14],
       of_alist_multi=M1[13],
       of_alist_exn=M1[12],
       of_alist_or_error=M1[11],
       of_alist=M1[10],
       of_increasing_sequence=M1[9],
       of_increasing_iterator_unchecked=M1[8],
       of_sorted_array_unchecked=M1[7],
       of_sorted_array=M1[6],
       singleton=M1[5],
       empty=M1[4],
       Key_S1=M1[2],
       include=caml_call1(Provide_of_sexp,[0,Key[1]]),
       t_of_sexp=include[1],
       _bWb_=M1[89],
       comparator=_bWb_[1],
       empty$0=_bWb_[3],
       of_tree$0=_bWb_[4],
       singleton$0=_bWb_[5],
       of_sorted_array_unchecked$0=_bWb_[6],
       of_sorted_array$0=_bWb_[7],
       of_increasing_iterator_unchecked$0=_bWb_[8],
       of_increasing_sequence$0=_bWb_[9],
       of_alist$0=_bWb_[10],
       of_alist_or_error$0=_bWb_[11],
       of_alist_exn$0=_bWb_[12],
       of_hashtbl_exn$0=_bWb_[13],
       of_alist_multi$0=_bWb_[14],
       of_alist_fold$0=_bWb_[15],
       of_alist_reduce$0=_bWb_[16],
       of_iteri$0=_bWb_[17],
       to_tree$0=_bWb_[18],
       invariants$0=_bWb_[19],
       is_empty$0=_bWb_[20],
       length$0=_bWb_[21],
       set$0=_bWb_[22],
       add$0=_bWb_[23],
       add_exn$0=_bWb_[24],
       add_multi$0=_bWb_[25],
       remove_multi$0=_bWb_[26],
       find_multi$0=_bWb_[27],
       change$0=_bWb_[28],
       update$0=_bWb_[29],
       find_exn$0=_bWb_[30],
       find$0=_bWb_[31],
       remove$0=_bWb_[32],
       mem$0=_bWb_[33],
       iter_keys$0=_bWb_[34],
       iter$0=_bWb_[35],
       iteri$0=_bWb_[36],
       iter2$0=_bWb_[37],
       map$0=_bWb_[38],
       mapi$0=_bWb_[39],
       fold$0=_bWb_[40],
       fold_right$0=_bWb_[41],
       fold2$0=_bWb_[42],
       filter_keys$0=_bWb_[43],
       filter$0=_bWb_[44],
       filteri$0=_bWb_[45],
       filter_map$0=_bWb_[46],
       filter_mapi$0=_bWb_[47],
       partition_mapi$0=_bWb_[48],
       partition_map$0=_bWb_[49],
       partitioni_tf$0=_bWb_[50],
       partition_tf$0=_bWb_[51],
       compare_direct$0=_bWb_[52],
       equal$0=_bWb_[53],
       keys$0=_bWb_[54],
       data$0=_bWb_[55],
       to_alist$0=_bWb_[56],
       validate$0=_bWb_[57],
       symmetric_diff$0=_bWb_[58],
       merge$0=_bWb_[59],
       min_elt$0=_bWb_[60],
       min_elt_exn$0=_bWb_[61],
       max_elt$0=_bWb_[62],
       max_elt_exn$0=_bWb_[63],
       for_all$0=_bWb_[64],
       for_alli$0=_bWb_[65],
       exists$0=_bWb_[66],
       existsi$0=_bWb_[67],
       count$0=_bWb_[68],
       counti$0=_bWb_[69],
       split$0=_bWb_[70],
       append$0=_bWb_[71],
       subrange$0=_bWb_[72],
       fold_range_inclusive$0=_bWb_[73],
       range_to_alist$0=_bWb_[74],
       closest_key$0=_bWb_[75],
       nth$0=_bWb_[76],
       nth_exn$0=_bWb_[77],
       rank$0=_bWb_[78],
       to_sequence$0=_bWb_[79],
       gen$0=_bWb_[80],
       obs$0=_bWb_[81],
       shrinker$0=_bWb_[82],
       sexp_of_t$0=_bWb_[83],
       Provide_of_sexp$0=_bWb_[84],
       include$0=caml_call1(M1[89][84],[0,Key[1]]),
       t_of_sexp$0=include$0[1],
       Tree=
        [0,
         comparator,
         empty$0,
         of_tree$0,
         singleton$0,
         of_sorted_array_unchecked$0,
         of_sorted_array$0,
         of_increasing_iterator_unchecked$0,
         of_increasing_sequence$0,
         of_alist$0,
         of_alist_or_error$0,
         of_alist_exn$0,
         of_hashtbl_exn$0,
         of_alist_multi$0,
         of_alist_fold$0,
         of_alist_reduce$0,
         of_iteri$0,
         to_tree$0,
         invariants$0,
         is_empty$0,
         length$0,
         set$0,
         add$0,
         add_exn$0,
         add_multi$0,
         remove_multi$0,
         find_multi$0,
         change$0,
         update$0,
         find_exn$0,
         find$0,
         remove$0,
         mem$0,
         iter_keys$0,
         iter$0,
         iteri$0,
         iter2$0,
         map$0,
         mapi$0,
         fold$0,
         fold_right$0,
         fold2$0,
         filter_keys$0,
         filter$0,
         filteri$0,
         filter_map$0,
         filter_mapi$0,
         partition_mapi$0,
         partition_map$0,
         partitioni_tf$0,
         partition_tf$0,
         compare_direct$0,
         equal$0,
         keys$0,
         data$0,
         to_alist$0,
         validate$0,
         symmetric_diff$0,
         merge$0,
         min_elt$0,
         min_elt_exn$0,
         max_elt$0,
         max_elt_exn$0,
         for_all$0,
         for_alli$0,
         exists$0,
         existsi$0,
         count$0,
         counti$0,
         split$0,
         append$0,
         subrange$0,
         fold_range_inclusive$0,
         range_to_alist$0,
         closest_key$0,
         nth$0,
         nth_exn$0,
         rank$0,
         to_sequence$0,
         gen$0,
         obs$0,
         shrinker$0,
         sexp_of_t$0,
         Provide_of_sexp$0,
         t_of_sexp$0];
      return [0,
              Key,
              M1,
              Key_S1,
              empty,
              singleton,
              of_sorted_array,
              of_sorted_array_unchecked,
              of_increasing_iterator_unchecked,
              of_increasing_sequence,
              of_alist,
              of_alist_or_error,
              of_alist_exn,
              of_alist_multi,
              of_alist_fold,
              of_alist_reduce,
              of_iteri,
              of_tree,
              of_hashtbl_exn,
              gen,
              invariants,
              is_empty,
              length,
              add,
              add_exn,
              set,
              add_multi,
              remove_multi,
              find_multi,
              change,
              update,
              find,
              find_exn,
              remove,
              mem,
              iter_keys,
              iter,
              iteri,
              iter2,
              map,
              mapi,
              fold,
              fold_right,
              fold2,
              filter_keys,
              filter,
              filteri,
              filter_map,
              filter_mapi,
              partition_mapi,
              partition_map,
              partitioni_tf,
              partition_tf,
              compare_direct,
              equal,
              keys,
              data,
              to_alist,
              validate,
              merge,
              symmetric_diff,
              min_elt,
              min_elt_exn,
              max_elt,
              max_elt_exn,
              for_all,
              for_alli,
              exists,
              existsi,
              count,
              counti,
              split,
              append,
              subrange,
              fold_range_inclusive,
              range_to_alist,
              closest_key,
              nth,
              nth_exn,
              rank,
              to_tree,
              to_sequence,
              obs,
              shrinker,
              compare,
              sexp_of_t,
              Provide_of_sexp,
              Provide_hash,
              Provide_bin_io,
              t_of_sexp,
              Tree]}
    function Make_binable_using_comparator(Key)
     {var
       M2=Make_using_comparator([0,Key[9],Key[10],Key[11]]),
       Tree=M2[90],
       t_of_sexp=M2[89],
       Provide_bin_io=M2[88],
       Provide_hash=M2[87],
       Provide_of_sexp=M2[86],
       sexp_of_t=M2[85],
       compare=M2[84],
       shrinker=M2[83],
       obs=M2[82],
       to_sequence=M2[81],
       to_tree=M2[80],
       rank=M2[79],
       nth_exn=M2[78],
       nth=M2[77],
       closest_key=M2[76],
       range_to_alist=M2[75],
       fold_range_inclusive=M2[74],
       subrange=M2[73],
       append=M2[72],
       split=M2[71],
       counti=M2[70],
       count=M2[69],
       existsi=M2[68],
       exists=M2[67],
       for_alli=M2[66],
       for_all=M2[65],
       max_elt_exn=M2[64],
       max_elt=M2[63],
       min_elt_exn=M2[62],
       min_elt=M2[61],
       symmetric_diff=M2[60],
       merge=M2[59],
       validate=M2[58],
       to_alist=M2[57],
       data=M2[56],
       keys=M2[55],
       equal=M2[54],
       compare_direct=M2[53],
       partition_tf=M2[52],
       partitioni_tf=M2[51],
       partition_map=M2[50],
       partition_mapi=M2[49],
       filter_mapi=M2[48],
       filter_map=M2[47],
       filteri=M2[46],
       filter=M2[45],
       filter_keys=M2[44],
       fold2=M2[43],
       fold_right=M2[42],
       fold=M2[41],
       mapi=M2[40],
       map=M2[39],
       iter2=M2[38],
       iteri=M2[37],
       iter=M2[36],
       iter_keys=M2[35],
       mem=M2[34],
       remove=M2[33],
       find_exn=M2[32],
       find=M2[31],
       update=M2[30],
       change=M2[29],
       find_multi=M2[28],
       remove_multi=M2[27],
       add_multi=M2[26],
       set=M2[25],
       add_exn=M2[24],
       add=M2[23],
       length=M2[22],
       is_empty=M2[21],
       invariants=M2[20],
       gen=M2[19],
       of_hashtbl_exn=M2[18],
       of_tree=M2[17],
       of_iteri=M2[16],
       of_alist_reduce=M2[15],
       of_alist_fold=M2[14],
       of_alist_multi=M2[13],
       of_alist_exn=M2[12],
       of_alist_or_error=M2[11],
       of_alist=M2[10],
       of_increasing_sequence=M2[9],
       of_increasing_iterator_unchecked=M2[8],
       of_sorted_array_unchecked=M2[7],
       of_sorted_array=M2[6],
       singleton=M2[5],
       empty=M2[4],
       Key_S1=M2[3],
       M1=M2[2],
       include=
        caml_call1
         (Provide_bin_io,
          [0,Key[1],Key[2],Key[3],Key[4],Key[5],Key[6],Key[7],Key[8]]),
       bin_shape_t=include[1],
       bin_size_t=include[2],
       bin_write_t=include[3],
       bin_read_t=include[4],
       bin_read_t$0=include[5],
       bin_writer_t=include[6],
       bin_reader_t=include[7],
       bin_t=include[8];
      return [0,
              Key,
              M2,
              M1,
              Key_S1,
              empty,
              singleton,
              of_sorted_array,
              of_sorted_array_unchecked,
              of_increasing_iterator_unchecked,
              of_increasing_sequence,
              of_alist,
              of_alist_or_error,
              of_alist_exn,
              of_alist_multi,
              of_alist_fold,
              of_alist_reduce,
              of_iteri,
              of_tree,
              of_hashtbl_exn,
              gen,
              invariants,
              is_empty,
              length,
              add,
              add_exn,
              set,
              add_multi,
              remove_multi,
              find_multi,
              change,
              update,
              find,
              find_exn,
              remove,
              mem,
              iter_keys,
              iter,
              iteri,
              iter2,
              map,
              mapi,
              fold,
              fold_right,
              fold2,
              filter_keys,
              filter,
              filteri,
              filter_map,
              filter_mapi,
              partition_mapi,
              partition_map,
              partitioni_tf,
              partition_tf,
              compare_direct,
              equal,
              keys,
              data,
              to_alist,
              validate,
              merge,
              symmetric_diff,
              min_elt,
              min_elt_exn,
              max_elt,
              max_elt_exn,
              for_all,
              for_alli,
              exists,
              existsi,
              count,
              counti,
              split,
              append,
              subrange,
              fold_range_inclusive,
              range_to_alist,
              closest_key,
              nth,
              nth_exn,
              rank,
              to_tree,
              to_sequence,
              obs,
              shrinker,
              compare,
              sexp_of_t,
              Provide_of_sexp,
              Provide_hash,
              Provide_bin_io,
              t_of_sexp,
              Tree,
              bin_shape_t,
              bin_size_t,
              bin_write_t,
              bin_read_t,
              bin_read_t$0,
              bin_writer_t,
              bin_reader_t,
              bin_t]}
    var
     include$36=Base_Map[87][3],
     sexp_of_t$32=include$36[1],
     empty$5=include$36[3],
     singleton$6=include$36[4],
     of_alist$3=include$36[5],
     of_alist_or_error$3=include$36[6],
     of_alist_exn$3=include$36[7],
     of_alist_multi$3=include$36[8],
     of_alist_fold$2=include$36[9],
     of_alist_reduce$2=include$36[10],
     of_sorted_array$2=include$36[11],
     of_sorted_array_unchecked$2=include$36[12],
     of_increasing_iterator_unchecked$2=include$36[13],
     of_increasing_sequence$2=include$36[14],
     of_iteri$2=include$36[15],
     of_tree$2=include$36[16],
     invariants$2=include$36[17],
     is_empty$8=include$36[18],
     length$10=include$36[19],
     add$6=include$36[20],
     add_exn$3=include$36[21],
     set$4=include$36[22],
     add_multi$3=include$36[23],
     remove_multi$3=include$36[24],
     find_multi$3=include$36[25],
     change$3=include$36[26],
     update$3=include$36[27],
     find$8=include$36[28],
     find_exn$7=include$36[29],
     remove$5=include$36[30],
     mem$8=include$36[31],
     iter_keys$3=include$36[32],
     iter$10=include$36[33],
     iteri$6=include$36[34],
     iter2$3=include$36[35],
     map$16=include$36[36],
     mapi$6=include$36[37],
     fold$8=include$36[38],
     fold_right$4=include$36[39],
     fold2$3=include$36[40],
     filter_keys$3=include$36[41],
     filter$8=include$36[42],
     filteri$6=include$36[43],
     filter_map$7=include$36[44],
     filter_mapi$6=include$36[45],
     partition_mapi$3=include$36[46],
     partition_map$4=include$36[47],
     partitioni_tf$4=include$36[48],
     partition_tf$5=include$36[49],
     compare_direct$2=include$36[50],
     equal$10=include$36[51],
     keys$3=include$36[52],
     data$5=include$36[53],
     to_alist$3=include$36[54],
     validate$3=include$36[55],
     merge$6=include$36[56],
     symmetric_diff$2=include$36[57],
     min_elt$6=include$36[58],
     min_elt_exn$2=include$36[59],
     max_elt$6=include$36[60],
     max_elt_exn$2=include$36[61],
     for_all$7=include$36[62],
     for_alli$6=include$36[63],
     exists$7=include$36[64],
     existsi$6=include$36[65],
     count$7=include$36[66],
     counti$6=include$36[67],
     split$2=include$36[68],
     append$5=include$36[69],
     subrange$2=include$36[70],
     fold_range_inclusive$2=include$36[71],
     range_to_alist$2=include$36[72],
     closest_key$2=include$36[73],
     nth$4=include$36[74],
     nth_exn$4=include$36[75],
     rank$2=include$36[76],
     to_tree$3=include$36[77],
     to_sequence$4=include$36[78];
    function gen$4(comparator,k,v){return gen_tree(comparator,k,v)}
    function obs$5(k,v){return obs_tree(k,v)}
    function shrinker$5(comparator,k,v){return shr_tree(comparator,k,v)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$109);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     _r2_=
      [0,
       [0,
        function(_bWa_)
         {var
           _bV$_=
            Make_binable_using_comparator
             ([0,
               _bWa_[1],
               _bWa_[2],
               _bWa_[3],
               _bWa_[4],
               _bWa_[5],
               _bWa_[6],
               _bWa_[7],
               _bWa_[8],
               _bWa_[10],
               _bWa_[11],
               _bWa_[12]]);
          return [0,
                  _bV$_[99],
                  _bV$_[95],
                  _bV$_[96],
                  _bV$_[98],
                  _bV$_[93],
                  _bV$_[94],
                  _bV$_[97],
                  _bV$_[92],
                  _bV$_[85],
                  _bV$_[90],
                  _bV$_[86],
                  _bV$_[40]]}]],
     _r3_=Base_Map[81];
    function _r4_(_bV8_)
     {var _bV9_=Make_binable_using_comparator(_bV8_),_bV__=_bV9_[91];
      return [0,
              _bV9_[1],
              [0,
               _bV__[2],
               _bV__[4],
               _bV__[9],
               _bV__[10],
               _bV__[11],
               _bV__[13],
               _bV__[14],
               _bV__[15],
               _bV__[6],
               _bV__[5],
               _bV__[7],
               _bV__[8],
               _bV__[16],
               _bV__[3],
               _bV__[12],
               _bV__[79],
               _bV__[18],
               _bV__[19],
               _bV__[20],
               _bV__[22],
               _bV__[23],
               _bV__[21],
               _bV__[24],
               _bV__[25],
               _bV__[26],
               _bV__[27],
               _bV__[28],
               _bV__[30],
               _bV__[29],
               _bV__[31],
               _bV__[32],
               _bV__[33],
               _bV__[34],
               _bV__[35],
               _bV__[36],
               _bV__[37],
               _bV__[38],
               _bV__[39],
               _bV__[40],
               _bV__[41],
               _bV__[42],
               _bV__[43],
               _bV__[44],
               _bV__[45],
               _bV__[46],
               _bV__[47],
               _bV__[48],
               _bV__[49],
               _bV__[50],
               _bV__[51],
               _bV__[52],
               _bV__[53],
               _bV__[54],
               _bV__[55],
               _bV__[56],
               _bV__[58],
               _bV__[57],
               _bV__[59],
               _bV__[60],
               _bV__[61],
               _bV__[62],
               _bV__[63],
               _bV__[64],
               _bV__[65],
               _bV__[66],
               _bV__[67],
               _bV__[68],
               _bV__[69],
               _bV__[70],
               _bV__[71],
               _bV__[72],
               _bV__[73],
               _bV__[74],
               _bV__[75],
               _bV__[76],
               _bV__[77],
               _bV__[17],
               _bV__[78],
               _bV__[80],
               _bV__[81],
               _bV9_[3][89][84],
               _bV__[84],
               _bV__[82]],
              _bV9_[85],
              _bV9_[5],
              _bV9_[6],
              _bV9_[11],
              _bV9_[12],
              _bV9_[13],
              _bV9_[14],
              _bV9_[15],
              _bV9_[16],
              _bV9_[7],
              _bV9_[8],
              _bV9_[9],
              _bV9_[10],
              _bV9_[17],
              _bV9_[18],
              _bV9_[19],
              _bV9_[20],
              _bV9_[21],
              _bV9_[22],
              _bV9_[23],
              _bV9_[24],
              _bV9_[25],
              _bV9_[26],
              _bV9_[27],
              _bV9_[28],
              _bV9_[29],
              _bV9_[30],
              _bV9_[31],
              _bV9_[32],
              _bV9_[33],
              _bV9_[34],
              _bV9_[35],
              _bV9_[36],
              _bV9_[37],
              _bV9_[38],
              _bV9_[39],
              _bV9_[40],
              _bV9_[41],
              _bV9_[42],
              _bV9_[43],
              _bV9_[44],
              _bV9_[45],
              _bV9_[46],
              _bV9_[47],
              _bV9_[48],
              _bV9_[49],
              _bV9_[50],
              _bV9_[51],
              _bV9_[52],
              _bV9_[53],
              _bV9_[54],
              _bV9_[55],
              _bV9_[56],
              _bV9_[57],
              _bV9_[58],
              _bV9_[59],
              _bV9_[60],
              _bV9_[61],
              _bV9_[62],
              _bV9_[63],
              _bV9_[64],
              _bV9_[65],
              _bV9_[66],
              _bV9_[67],
              _bV9_[68],
              _bV9_[69],
              _bV9_[70],
              _bV9_[71],
              _bV9_[72],
              _bV9_[73],
              _bV9_[74],
              _bV9_[75],
              _bV9_[76],
              _bV9_[77],
              _bV9_[78],
              _bV9_[79],
              _bV9_[80],
              _bV9_[81],
              _bV9_[82],
              _bV9_[83],
              _bV9_[84],
              _bV9_[87],
              _bV9_[89],
              _bV9_[88],
              _bV9_[90],
              _bV9_[86],
              _bV9_[92],
              _bV9_[93],
              _bV9_[94],
              _bV9_[95],
              _bV9_[96],
              _bV9_[97],
              _bV9_[98],
              _bV9_[99]]}
    function _r5_(Key)
     {var
       bin_t=Key[1],
       bin_read_t=Key[2],
       bin_read_t$0=Key[3],
       bin_reader_t=Key[4],
       bin_size_t=Key[5],
       bin_write_t=Key[6],
       bin_writer_t=Key[7],
       bin_shape_t=Key[8],
       t_of_sexp=Key[10],
       sexp_of_t=Key[11],
       include=caml_call1(Make,[0,Key[9],Key[11]]),
       comparator=include[1],
       _bV6_=
        Make_binable_using_comparator
         ([0,
           bin_t,
           bin_read_t,
           bin_read_t$0,
           bin_reader_t,
           bin_size_t,
           bin_write_t,
           bin_writer_t,
           bin_shape_t,
           t_of_sexp,
           sexp_of_t,
           comparator]),
       _bV7_=_bV6_[91];
      return [0,
              _bV6_[1],
              [0,
               _bV7_[2],
               _bV7_[4],
               _bV7_[9],
               _bV7_[10],
               _bV7_[11],
               _bV7_[13],
               _bV7_[14],
               _bV7_[15],
               _bV7_[6],
               _bV7_[5],
               _bV7_[7],
               _bV7_[8],
               _bV7_[16],
               _bV7_[3],
               _bV7_[12],
               _bV7_[79],
               _bV7_[18],
               _bV7_[19],
               _bV7_[20],
               _bV7_[22],
               _bV7_[23],
               _bV7_[21],
               _bV7_[24],
               _bV7_[25],
               _bV7_[26],
               _bV7_[27],
               _bV7_[28],
               _bV7_[30],
               _bV7_[29],
               _bV7_[31],
               _bV7_[32],
               _bV7_[33],
               _bV7_[34],
               _bV7_[35],
               _bV7_[36],
               _bV7_[37],
               _bV7_[38],
               _bV7_[39],
               _bV7_[40],
               _bV7_[41],
               _bV7_[42],
               _bV7_[43],
               _bV7_[44],
               _bV7_[45],
               _bV7_[46],
               _bV7_[47],
               _bV7_[48],
               _bV7_[49],
               _bV7_[50],
               _bV7_[51],
               _bV7_[52],
               _bV7_[53],
               _bV7_[54],
               _bV7_[55],
               _bV7_[56],
               _bV7_[58],
               _bV7_[57],
               _bV7_[59],
               _bV7_[60],
               _bV7_[61],
               _bV7_[62],
               _bV7_[63],
               _bV7_[64],
               _bV7_[65],
               _bV7_[66],
               _bV7_[67],
               _bV7_[68],
               _bV7_[69],
               _bV7_[70],
               _bV7_[71],
               _bV7_[72],
               _bV7_[73],
               _bV7_[74],
               _bV7_[75],
               _bV7_[76],
               _bV7_[77],
               _bV7_[17],
               _bV7_[78],
               _bV7_[80],
               _bV7_[81],
               _bV6_[3][89][84],
               _bV7_[84],
               _bV7_[82]],
              _bV6_[85],
              _bV6_[5],
              _bV6_[6],
              _bV6_[11],
              _bV6_[12],
              _bV6_[13],
              _bV6_[14],
              _bV6_[15],
              _bV6_[16],
              _bV6_[7],
              _bV6_[8],
              _bV6_[9],
              _bV6_[10],
              _bV6_[17],
              _bV6_[18],
              _bV6_[19],
              _bV6_[20],
              _bV6_[21],
              _bV6_[22],
              _bV6_[23],
              _bV6_[24],
              _bV6_[25],
              _bV6_[26],
              _bV6_[27],
              _bV6_[28],
              _bV6_[29],
              _bV6_[30],
              _bV6_[31],
              _bV6_[32],
              _bV6_[33],
              _bV6_[34],
              _bV6_[35],
              _bV6_[36],
              _bV6_[37],
              _bV6_[38],
              _bV6_[39],
              _bV6_[40],
              _bV6_[41],
              _bV6_[42],
              _bV6_[43],
              _bV6_[44],
              _bV6_[45],
              _bV6_[46],
              _bV6_[47],
              _bV6_[48],
              _bV6_[49],
              _bV6_[50],
              _bV6_[51],
              _bV6_[52],
              _bV6_[53],
              _bV6_[54],
              _bV6_[55],
              _bV6_[56],
              _bV6_[57],
              _bV6_[58],
              _bV6_[59],
              _bV6_[60],
              _bV6_[61],
              _bV6_[62],
              _bV6_[63],
              _bV6_[64],
              _bV6_[65],
              _bV6_[66],
              _bV6_[67],
              _bV6_[68],
              _bV6_[69],
              _bV6_[70],
              _bV6_[71],
              _bV6_[72],
              _bV6_[73],
              _bV6_[74],
              _bV6_[75],
              _bV6_[76],
              _bV6_[77],
              _bV6_[78],
              _bV6_[79],
              _bV6_[80],
              _bV6_[81],
              _bV6_[82],
              _bV6_[83],
              _bV6_[84],
              _bV6_[87],
              _bV6_[89],
              _bV6_[88],
              _bV6_[90],
              _bV6_[86],
              _bV6_[92],
              _bV6_[93],
              _bV6_[94],
              _bV6_[95],
              _bV6_[96],
              _bV6_[97],
              _bV6_[98],
              _bV6_[99]]}
    function _r6_(_bV3_)
     {var _bV4_=Make_using_comparator(_bV3_),_bV5_=_bV4_[90];
      return [0,
              _bV4_[1],
              [0,
               _bV5_[2],
               _bV5_[4],
               _bV5_[9],
               _bV5_[10],
               _bV5_[11],
               _bV5_[13],
               _bV5_[14],
               _bV5_[15],
               _bV5_[6],
               _bV5_[5],
               _bV5_[7],
               _bV5_[8],
               _bV5_[16],
               _bV5_[3],
               _bV5_[12],
               _bV5_[79],
               _bV5_[18],
               _bV5_[19],
               _bV5_[20],
               _bV5_[22],
               _bV5_[23],
               _bV5_[21],
               _bV5_[24],
               _bV5_[25],
               _bV5_[26],
               _bV5_[27],
               _bV5_[28],
               _bV5_[30],
               _bV5_[29],
               _bV5_[31],
               _bV5_[32],
               _bV5_[33],
               _bV5_[34],
               _bV5_[35],
               _bV5_[36],
               _bV5_[37],
               _bV5_[38],
               _bV5_[39],
               _bV5_[40],
               _bV5_[41],
               _bV5_[42],
               _bV5_[43],
               _bV5_[44],
               _bV5_[45],
               _bV5_[46],
               _bV5_[47],
               _bV5_[48],
               _bV5_[49],
               _bV5_[50],
               _bV5_[51],
               _bV5_[52],
               _bV5_[53],
               _bV5_[54],
               _bV5_[55],
               _bV5_[56],
               _bV5_[58],
               _bV5_[57],
               _bV5_[59],
               _bV5_[60],
               _bV5_[61],
               _bV5_[62],
               _bV5_[63],
               _bV5_[64],
               _bV5_[65],
               _bV5_[66],
               _bV5_[67],
               _bV5_[68],
               _bV5_[69],
               _bV5_[70],
               _bV5_[71],
               _bV5_[72],
               _bV5_[73],
               _bV5_[74],
               _bV5_[75],
               _bV5_[76],
               _bV5_[77],
               _bV5_[17],
               _bV5_[78],
               _bV5_[80],
               _bV5_[81],
               _bV5_[83],
               _bV5_[84],
               _bV5_[82]],
              _bV4_[84],
              _bV4_[4],
              _bV4_[5],
              _bV4_[10],
              _bV4_[11],
              _bV4_[12],
              _bV4_[13],
              _bV4_[14],
              _bV4_[15],
              _bV4_[6],
              _bV4_[7],
              _bV4_[8],
              _bV4_[9],
              _bV4_[16],
              _bV4_[17],
              _bV4_[18],
              _bV4_[19],
              _bV4_[20],
              _bV4_[21],
              _bV4_[22],
              _bV4_[23],
              _bV4_[24],
              _bV4_[25],
              _bV4_[26],
              _bV4_[27],
              _bV4_[28],
              _bV4_[29],
              _bV4_[30],
              _bV4_[31],
              _bV4_[32],
              _bV4_[33],
              _bV4_[34],
              _bV4_[35],
              _bV4_[36],
              _bV4_[37],
              _bV4_[38],
              _bV4_[39],
              _bV4_[40],
              _bV4_[41],
              _bV4_[42],
              _bV4_[43],
              _bV4_[44],
              _bV4_[45],
              _bV4_[46],
              _bV4_[47],
              _bV4_[48],
              _bV4_[49],
              _bV4_[50],
              _bV4_[51],
              _bV4_[52],
              _bV4_[53],
              _bV4_[54],
              _bV4_[55],
              _bV4_[56],
              _bV4_[57],
              _bV4_[58],
              _bV4_[59],
              _bV4_[60],
              _bV4_[61],
              _bV4_[62],
              _bV4_[63],
              _bV4_[64],
              _bV4_[65],
              _bV4_[66],
              _bV4_[67],
              _bV4_[68],
              _bV4_[69],
              _bV4_[70],
              _bV4_[71],
              _bV4_[72],
              _bV4_[73],
              _bV4_[74],
              _bV4_[75],
              _bV4_[76],
              _bV4_[77],
              _bV4_[78],
              _bV4_[79],
              _bV4_[80],
              _bV4_[81],
              _bV4_[82],
              _bV4_[83],
              _bV4_[86],
              _bV4_[88],
              _bV4_[87],
              _bV4_[89],
              _bV4_[85]]}
    function _r7_(Key)
     {var
       t_of_sexp=Key[2],
       sexp_of_t=Key[3],
       include=caml_call1(Make,[0,Key[1],Key[3]]),
       comparator=include[1],
       _bV1_=Make_using_comparator([0,t_of_sexp,sexp_of_t,comparator]),
       _bV2_=_bV1_[90];
      return [0,
              _bV1_[1],
              [0,
               _bV2_[2],
               _bV2_[4],
               _bV2_[9],
               _bV2_[10],
               _bV2_[11],
               _bV2_[13],
               _bV2_[14],
               _bV2_[15],
               _bV2_[6],
               _bV2_[5],
               _bV2_[7],
               _bV2_[8],
               _bV2_[16],
               _bV2_[3],
               _bV2_[12],
               _bV2_[79],
               _bV2_[18],
               _bV2_[19],
               _bV2_[20],
               _bV2_[22],
               _bV2_[23],
               _bV2_[21],
               _bV2_[24],
               _bV2_[25],
               _bV2_[26],
               _bV2_[27],
               _bV2_[28],
               _bV2_[30],
               _bV2_[29],
               _bV2_[31],
               _bV2_[32],
               _bV2_[33],
               _bV2_[34],
               _bV2_[35],
               _bV2_[36],
               _bV2_[37],
               _bV2_[38],
               _bV2_[39],
               _bV2_[40],
               _bV2_[41],
               _bV2_[42],
               _bV2_[43],
               _bV2_[44],
               _bV2_[45],
               _bV2_[46],
               _bV2_[47],
               _bV2_[48],
               _bV2_[49],
               _bV2_[50],
               _bV2_[51],
               _bV2_[52],
               _bV2_[53],
               _bV2_[54],
               _bV2_[55],
               _bV2_[56],
               _bV2_[58],
               _bV2_[57],
               _bV2_[59],
               _bV2_[60],
               _bV2_[61],
               _bV2_[62],
               _bV2_[63],
               _bV2_[64],
               _bV2_[65],
               _bV2_[66],
               _bV2_[67],
               _bV2_[68],
               _bV2_[69],
               _bV2_[70],
               _bV2_[71],
               _bV2_[72],
               _bV2_[73],
               _bV2_[74],
               _bV2_[75],
               _bV2_[76],
               _bV2_[77],
               _bV2_[17],
               _bV2_[78],
               _bV2_[80],
               _bV2_[81],
               _bV2_[83],
               _bV2_[84],
               _bV2_[82]],
              _bV1_[84],
              _bV1_[4],
              _bV1_[5],
              _bV1_[10],
              _bV1_[11],
              _bV1_[12],
              _bV1_[13],
              _bV1_[14],
              _bV1_[15],
              _bV1_[6],
              _bV1_[7],
              _bV1_[8],
              _bV1_[9],
              _bV1_[16],
              _bV1_[17],
              _bV1_[18],
              _bV1_[19],
              _bV1_[20],
              _bV1_[21],
              _bV1_[22],
              _bV1_[23],
              _bV1_[24],
              _bV1_[25],
              _bV1_[26],
              _bV1_[27],
              _bV1_[28],
              _bV1_[29],
              _bV1_[30],
              _bV1_[31],
              _bV1_[32],
              _bV1_[33],
              _bV1_[34],
              _bV1_[35],
              _bV1_[36],
              _bV1_[37],
              _bV1_[38],
              _bV1_[39],
              _bV1_[40],
              _bV1_[41],
              _bV1_[42],
              _bV1_[43],
              _bV1_[44],
              _bV1_[45],
              _bV1_[46],
              _bV1_[47],
              _bV1_[48],
              _bV1_[49],
              _bV1_[50],
              _bV1_[51],
              _bV1_[52],
              _bV1_[53],
              _bV1_[54],
              _bV1_[55],
              _bV1_[56],
              _bV1_[57],
              _bV1_[58],
              _bV1_[59],
              _bV1_[60],
              _bV1_[61],
              _bV1_[62],
              _bV1_[63],
              _bV1_[64],
              _bV1_[65],
              _bV1_[66],
              _bV1_[67],
              _bV1_[68],
              _bV1_[69],
              _bV1_[70],
              _bV1_[71],
              _bV1_[72],
              _bV1_[73],
              _bV1_[74],
              _bV1_[75],
              _bV1_[76],
              _bV1_[77],
              _bV1_[78],
              _bV1_[79],
              _bV1_[80],
              _bV1_[81],
              _bV1_[82],
              _bV1_[83],
              _bV1_[86],
              _bV1_[88],
              _bV1_[87],
              _bV1_[89],
              _bV1_[85]]}
    function _r8_(_bVY_)
     {var _bVZ_=Make_plain_using_comparator(_bVY_),_bV0_=_bVZ_[89];
      return [0,
              _bVZ_[1],
              [0,
               _bV0_[83],
               _bV0_[3],
               _bV0_[5],
               _bV0_[10],
               _bV0_[11],
               _bV0_[12],
               _bV0_[14],
               _bV0_[15],
               _bV0_[16],
               _bV0_[7],
               _bV0_[6],
               _bV0_[8],
               _bV0_[9],
               _bV0_[17],
               _bV0_[4],
               _bV0_[13],
               _bV0_[80],
               _bV0_[19],
               _bV0_[20],
               _bV0_[21],
               _bV0_[23],
               _bV0_[24],
               _bV0_[22],
               _bV0_[25],
               _bV0_[26],
               _bV0_[27],
               _bV0_[28],
               _bV0_[29],
               _bV0_[31],
               _bV0_[30],
               _bV0_[32],
               _bV0_[33],
               _bV0_[34],
               _bV0_[35],
               _bV0_[36],
               _bV0_[37],
               _bV0_[38],
               _bV0_[39],
               _bV0_[40],
               _bV0_[41],
               _bV0_[42],
               _bV0_[43],
               _bV0_[44],
               _bV0_[45],
               _bV0_[46],
               _bV0_[47],
               _bV0_[48],
               _bV0_[49],
               _bV0_[50],
               _bV0_[51],
               _bV0_[52],
               _bV0_[53],
               _bV0_[54],
               _bV0_[55],
               _bV0_[56],
               _bV0_[57],
               _bV0_[59],
               _bV0_[58],
               _bV0_[60],
               _bV0_[61],
               _bV0_[62],
               _bV0_[63],
               _bV0_[64],
               _bV0_[65],
               _bV0_[66],
               _bV0_[67],
               _bV0_[68],
               _bV0_[69],
               _bV0_[70],
               _bV0_[71],
               _bV0_[72],
               _bV0_[73],
               _bV0_[74],
               _bV0_[75],
               _bV0_[76],
               _bV0_[77],
               _bV0_[78],
               _bV0_[18],
               _bV0_[79],
               _bV0_[81],
               _bV0_[82],
               _bV0_[84]],
              _bVZ_[84],
              _bVZ_[85],
              _bVZ_[4],
              _bVZ_[5],
              _bVZ_[10],
              _bVZ_[11],
              _bVZ_[12],
              _bVZ_[13],
              _bVZ_[14],
              _bVZ_[15],
              _bVZ_[6],
              _bVZ_[7],
              _bVZ_[8],
              _bVZ_[9],
              _bVZ_[16],
              _bVZ_[17],
              _bVZ_[18],
              _bVZ_[19],
              _bVZ_[20],
              _bVZ_[21],
              _bVZ_[22],
              _bVZ_[23],
              _bVZ_[24],
              _bVZ_[25],
              _bVZ_[26],
              _bVZ_[27],
              _bVZ_[28],
              _bVZ_[29],
              _bVZ_[30],
              _bVZ_[31],
              _bVZ_[32],
              _bVZ_[33],
              _bVZ_[34],
              _bVZ_[35],
              _bVZ_[36],
              _bVZ_[37],
              _bVZ_[38],
              _bVZ_[39],
              _bVZ_[40],
              _bVZ_[41],
              _bVZ_[42],
              _bVZ_[43],
              _bVZ_[44],
              _bVZ_[45],
              _bVZ_[46],
              _bVZ_[47],
              _bVZ_[48],
              _bVZ_[49],
              _bVZ_[50],
              _bVZ_[51],
              _bVZ_[52],
              _bVZ_[53],
              _bVZ_[54],
              _bVZ_[55],
              _bVZ_[56],
              _bVZ_[57],
              _bVZ_[58],
              _bVZ_[59],
              _bVZ_[60],
              _bVZ_[61],
              _bVZ_[62],
              _bVZ_[63],
              _bVZ_[64],
              _bVZ_[65],
              _bVZ_[66],
              _bVZ_[67],
              _bVZ_[68],
              _bVZ_[69],
              _bVZ_[70],
              _bVZ_[71],
              _bVZ_[72],
              _bVZ_[73],
              _bVZ_[74],
              _bVZ_[75],
              _bVZ_[76],
              _bVZ_[77],
              _bVZ_[78],
              _bVZ_[79],
              _bVZ_[80],
              _bVZ_[81],
              _bVZ_[82],
              _bVZ_[83],
              _bVZ_[86],
              _bVZ_[88],
              _bVZ_[87]]}
    var
     _r__=
      [0,
       [0,
        t_of_sexp$25,
        sexp_of_t$31,
        empty$4,
        singleton$5,
        of_alist$2,
        of_alist_or_error$2,
        of_alist_exn$2,
        of_alist_multi$2,
        of_alist_fold$1,
        of_alist_reduce$1,
        of_sorted_array$1,
        of_sorted_array_unchecked$1,
        of_increasing_iterator_unchecked$1,
        of_increasing_sequence$1,
        of_iteri$1,
        of_tree$1,
        of_hashtbl_exn$2,
        gen$3,
        invariants$1,
        is_empty$7,
        length$9,
        add$5,
        add_exn$2,
        set$3,
        add_multi$2,
        remove_multi$2,
        find_multi$2,
        change$2,
        update$2,
        find$7,
        find_exn$6,
        remove$4,
        mem$7,
        iter_keys$2,
        iter$9,
        iteri$5,
        iter2$2,
        map$15,
        mapi$5,
        fold$7,
        fold_right$3,
        fold2$2,
        filter_keys$2,
        filter$7,
        filteri$5,
        filter_map$6,
        filter_mapi$5,
        partition_mapi$2,
        partition_map$3,
        partitioni_tf$3,
        partition_tf$4,
        compare_direct$1,
        equal$9,
        keys$2,
        data$4,
        to_alist$2,
        validate$2,
        merge$5,
        symmetric_diff$1,
        min_elt$5,
        min_elt_exn$1,
        max_elt$5,
        max_elt_exn$1,
        for_all$6,
        for_alli$5,
        exists$6,
        existsi$5,
        count$6,
        counti$5,
        split$1,
        append$4,
        subrange$1,
        fold_range_inclusive$1,
        range_to_alist$1,
        closest_key$1,
        nth$3,
        nth_exn$3,
        rank$1,
        to_tree$2,
        to_sequence$3,
        obs$4,
        shrinker$4],
       bin_t$24,
       bin_read_t$65,
       bin_read_t$66,
       bin_reader_t$24,
       bin_size_t$32,
       bin_write_t$32,
       bin_writer_t$24,
       bin_shape_t$29,
       _rv_,
       sexp_of_t$30,
       compare$21,
       _rw_,
       _rx_,
       _rC_,
       _rD_,
       _rE_,
       _rF_,
       _rG_,
       _rH_,
       _ry_,
       _rz_,
       _rA_,
       _rB_,
       _rI_,
       _rJ_,
       _rK_,
       _rL_,
       invariants,
       is_empty$5,
       length$7,
       add$3,
       add_exn$0,
       set$1,
       add_multi$0,
       remove_multi$0,
       find_multi$0,
       change$0,
       update$0,
       find$5,
       find_exn$4,
       remove$2,
       mem$5,
       iter_keys$0,
       iter$6,
       iteri$3,
       iter2$0,
       map$13,
       mapi$3,
       fold$5,
       fold_right$1,
       fold2$0,
       filter_keys$0,
       filter$5,
       filteri$3,
       filter_map$4,
       filter_mapi$3,
       partition_mapi$0,
       partition_map$1,
       partitioni_tf$1,
       partition_tf$2,
       compare_direct,
       equal$7,
       keys$0,
       data$2,
       to_alist$0,
       validate$0,
       merge$3,
       symmetric_diff,
       min_elt$3,
       min_elt_exn,
       max_elt$3,
       max_elt_exn,
       for_all$4,
       for_alli$3,
       exists$4,
       existsi$3,
       count$4,
       counti$3,
       split,
       append$2,
       subrange,
       fold_range_inclusive,
       range_to_alist,
       closest_key,
       nth$1,
       nth_exn$1,
       rank,
       to_tree,
       to_sequence$1,
       obs$3,
       shrinker$3],
     _r$_=
      [0,
       empty$2,
       singleton$3,
       of_alist$0,
       of_alist_or_error$0,
       of_alist_exn$0,
       of_alist_multi$0,
       of_alist_fold,
       of_alist_reduce,
       of_sorted_array,
       of_sorted_array_unchecked,
       of_increasing_iterator_unchecked,
       of_increasing_sequence,
       of_iteri,
       of_tree,
       of_hashtbl_exn,
       gen$1];
    function _r9_(Key)
     {var
       sexp_of_t=Key[2],
       include=caml_call1(Make,Key),
       comparator=include[1],
       _bVW_=Make_plain_using_comparator([0,sexp_of_t,comparator]),
       _bVX_=_bVW_[89];
      return [0,
              _bVW_[1],
              [0,
               _bVX_[83],
               _bVX_[3],
               _bVX_[5],
               _bVX_[10],
               _bVX_[11],
               _bVX_[12],
               _bVX_[14],
               _bVX_[15],
               _bVX_[16],
               _bVX_[7],
               _bVX_[6],
               _bVX_[8],
               _bVX_[9],
               _bVX_[17],
               _bVX_[4],
               _bVX_[13],
               _bVX_[80],
               _bVX_[19],
               _bVX_[20],
               _bVX_[21],
               _bVX_[23],
               _bVX_[24],
               _bVX_[22],
               _bVX_[25],
               _bVX_[26],
               _bVX_[27],
               _bVX_[28],
               _bVX_[29],
               _bVX_[31],
               _bVX_[30],
               _bVX_[32],
               _bVX_[33],
               _bVX_[34],
               _bVX_[35],
               _bVX_[36],
               _bVX_[37],
               _bVX_[38],
               _bVX_[39],
               _bVX_[40],
               _bVX_[41],
               _bVX_[42],
               _bVX_[43],
               _bVX_[44],
               _bVX_[45],
               _bVX_[46],
               _bVX_[47],
               _bVX_[48],
               _bVX_[49],
               _bVX_[50],
               _bVX_[51],
               _bVX_[52],
               _bVX_[53],
               _bVX_[54],
               _bVX_[55],
               _bVX_[56],
               _bVX_[57],
               _bVX_[59],
               _bVX_[58],
               _bVX_[60],
               _bVX_[61],
               _bVX_[62],
               _bVX_[63],
               _bVX_[64],
               _bVX_[65],
               _bVX_[66],
               _bVX_[67],
               _bVX_[68],
               _bVX_[69],
               _bVX_[70],
               _bVX_[71],
               _bVX_[72],
               _bVX_[73],
               _bVX_[74],
               _bVX_[75],
               _bVX_[76],
               _bVX_[77],
               _bVX_[78],
               _bVX_[18],
               _bVX_[79],
               _bVX_[81],
               _bVX_[82],
               _bVX_[84]],
              _bVW_[84],
              _bVW_[85],
              _bVW_[4],
              _bVW_[5],
              _bVW_[10],
              _bVW_[11],
              _bVW_[12],
              _bVW_[13],
              _bVW_[14],
              _bVW_[15],
              _bVW_[6],
              _bVW_[7],
              _bVW_[8],
              _bVW_[9],
              _bVW_[16],
              _bVW_[17],
              _bVW_[18],
              _bVW_[19],
              _bVW_[20],
              _bVW_[21],
              _bVW_[22],
              _bVW_[23],
              _bVW_[24],
              _bVW_[25],
              _bVW_[26],
              _bVW_[27],
              _bVW_[28],
              _bVW_[29],
              _bVW_[30],
              _bVW_[31],
              _bVW_[32],
              _bVW_[33],
              _bVW_[34],
              _bVW_[35],
              _bVW_[36],
              _bVW_[37],
              _bVW_[38],
              _bVW_[39],
              _bVW_[40],
              _bVW_[41],
              _bVW_[42],
              _bVW_[43],
              _bVW_[44],
              _bVW_[45],
              _bVW_[46],
              _bVW_[47],
              _bVW_[48],
              _bVW_[49],
              _bVW_[50],
              _bVW_[51],
              _bVW_[52],
              _bVW_[53],
              _bVW_[54],
              _bVW_[55],
              _bVW_[56],
              _bVW_[57],
              _bVW_[58],
              _bVW_[59],
              _bVW_[60],
              _bVW_[61],
              _bVW_[62],
              _bVW_[63],
              _bVW_[64],
              _bVW_[65],
              _bVW_[66],
              _bVW_[67],
              _bVW_[68],
              _bVW_[69],
              _bVW_[70],
              _bVW_[71],
              _bVW_[72],
              _bVW_[73],
              _bVW_[74],
              _bVW_[75],
              _bVW_[76],
              _bVW_[77],
              _bVW_[78],
              _bVW_[79],
              _bVW_[80],
              _bVW_[81],
              _bVW_[82],
              _bVW_[83],
              _bVW_[86],
              _bVW_[88],
              _bVW_[87]]}
    var
     Core_kernel_Map=
      [0,
       invariants$0,
       comparator$2,
       empty$3,
       singleton$4,
       of_alist$1,
       of_alist_or_error$1,
       of_alist_exn$1,
       of_hashtbl_exn$1,
       of_alist_multi$1,
       of_alist_fold$0,
       of_alist_reduce$0,
       of_iteri$0,
       [0,
        sexp_of_t$32,
        empty$5,
        singleton$6,
        of_alist$3,
        of_alist_or_error$3,
        of_alist_exn$3,
        of_alist_multi$3,
        of_alist_fold$2,
        of_alist_reduce$2,
        of_sorted_array$2,
        of_sorted_array_unchecked$2,
        of_increasing_iterator_unchecked$2,
        of_increasing_sequence$2,
        of_iteri$2,
        of_tree$2,
        of_hashtbl_exn$0,
        gen$4,
        invariants$2,
        is_empty$8,
        length$10,
        add$6,
        add_exn$3,
        set$4,
        add_multi$3,
        remove_multi$3,
        find_multi$3,
        change$3,
        update$3,
        find$8,
        find_exn$7,
        remove$5,
        mem$8,
        iter_keys$3,
        iter$10,
        iteri$6,
        iter2$3,
        map$16,
        mapi$6,
        fold$8,
        fold_right$4,
        fold2$3,
        filter_keys$3,
        filter$8,
        filteri$6,
        filter_map$7,
        filter_mapi$6,
        partition_mapi$3,
        partition_map$4,
        partitioni_tf$4,
        partition_tf$5,
        compare_direct$2,
        equal$10,
        keys$3,
        data$5,
        to_alist$3,
        validate$3,
        merge$6,
        symmetric_diff$2,
        min_elt$6,
        min_elt_exn$2,
        max_elt$6,
        max_elt_exn$2,
        for_all$7,
        for_alli$6,
        exists$7,
        existsi$6,
        count$7,
        counti$6,
        split$2,
        append$5,
        subrange$2,
        fold_range_inclusive$2,
        range_to_alist$2,
        closest_key$2,
        nth$4,
        nth_exn$4,
        rank$2,
        to_tree$3,
        to_sequence$4,
        obs$5,
        shrinker$5],
       to_tree$1,
       of_tree$0,
       of_sorted_array$0,
       of_sorted_array_unchecked$0,
       of_increasing_iterator_unchecked$0,
       of_increasing_sequence$0,
       is_empty$6,
       length$8,
       add$4,
       add_exn$1,
       set$2,
       add_multi$1,
       remove_multi$1,
       find_multi$1,
       change$1,
       update$1,
       find$6,
       find_exn$5,
       find_or_error,
       remove$3,
       mem$6,
       iter_keys$1,
       iter$7,
       iteri$4,
       iter2$1,
       map$14,
       mapi$4,
       fold$6,
       fold_right$2,
       fold2$1,
       filter_keys$1,
       filter$6,
       filteri$4,
       filter_map$5,
       filter_mapi$4,
       partition_mapi$1,
       partition_map$2,
       partitioni_tf$2,
       partition_tf$3,
       compare_direct$0,
       hash_fold_direct,
       equal$8,
       keys$1,
       data$3,
       to_alist$1,
       validate$1,
       merge$4,
       _rt_,
       [0,
        Symmetric_diff_element[8],
        Symmetric_diff_element[6],
        Symmetric_diff_element[5],
        Symmetric_diff_element[7],
        Symmetric_diff_element[2],
        Symmetric_diff_element[3],
        Symmetric_diff_element[4],
        Symmetric_diff_element[1],
        Symmetric_diff_element[9],
        Symmetric_diff_element[10],
        Symmetric_diff_element[11]],
       symmetric_diff$0,
       min_elt$4,
       min_elt_exn$0,
       max_elt$4,
       max_elt_exn$0,
       for_all$5,
       for_alli$4,
       exists$5,
       existsi$4,
       count$5,
       counti$4,
       split$0,
       append$3,
       subrange$0,
       fold_range_inclusive$0,
       range_to_alist$0,
       closest_key$0,
       nth$2,
       nth_exn$2,
       rank$0,
       to_sequence$2,
       gen$2,
       obs$2,
       shrinker$2,
       _r$_,
       _r__,
       _r9_,
       _r8_,
       _r7_,
       _r6_,
       _r5_,
       _r4_,
       _r3_,
       _r2_];
    caml_register_global(7395,Core_kernel_Map,"Core_kernel__Map");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$110);
    caml_call1(Expect_test_collector[4][1],cst_src_maybe_bound_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$111,cst$37);
    var
     _sb_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$34),
     _sc_=
      caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_maybe_bound_ml_5_61),
     _sd_=[0,[0,cst_Excl,[0,caml_call2(Bin_prot_Shape[15],_sc_,_sb_),0]],_sa_],
     _se_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$35),
     _sf_=
      caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_maybe_bound_ml_5_48),
     _sg_=[0,[0,cst_Incl,[0,caml_call2(Bin_prot_Shape[15],_sf_,_se_),0]],_sd_],
     _sh_=caml_call1(Bin_prot_Shape[9],_sg_),
     _si_=[0,caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$36),0],
     _sj_=
      [0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$81),_si_,_sh_],0],
     _sk_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_maybe_bound_ml_5_4),
     group$39=caml_call2(Bin_prot_Shape[6],_sk_,_sj_);
    function bin_shape_t$30(a)
     {var _bVV_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$82);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$39,_bVV_),[0,a,0])}
    function bin_size_t$33(size_of_a,param)
     {if(typeof param === "number")
       return 1;
      else
       {if(0 === param[0])
         {var v1=param[1];return 1 + caml_call1(size_of_a,v1) | 0}
        var v1$0=param[1];
        return 1 + caml_call1(size_of_a,v1$0) | 0}}
    function bin_write_t$33(write_a,buf,pos,param)
     {if(typeof param === "number")
       return caml_call3(Bin_prot_Write[30],buf,pos,2);
      else
       {if(0 === param[0])
         {var v1=param[1],pos$0=caml_call3(Bin_prot_Write[30],buf,pos,0);
          return caml_call3(write_a,buf,pos$0,v1)}
        var v1$0=param[1],pos$1=caml_call3(Bin_prot_Write[30],buf,pos,1);
        return caml_call3(write_a,buf,pos$1,v1$0)}}
    function bin_writer_t$25(bin_writer_a)
     {function _bVR_(v)
       {var _bVS_=bin_writer_a[2];
        return function(_bVT_,_bVU_)
         {return bin_write_t$33(_bVS_,v,_bVT_,_bVU_)}}
      return [0,function(v){return bin_size_t$33(bin_writer_a[1],v)},_bVR_]}
    function bin_read_t$67(of_a,buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],
               cst_src_maybe_bound_ml_Stable_V1_t,
               pos_ref[1])}
    function bin_read_t$68(of_a,buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[29],buf,pos_ref);
      if(2 < match >>> 0)
       return caml_call2(Bin_prot_Common[18],_sl_,pos_ref[1]);
      switch(match)
       {case 0:var arg_1=caml_call2(of_a,buf,pos_ref);return [0,arg_1];
        case 1:var arg_1$0=caml_call2(of_a,buf,pos_ref);return [1,arg_1$0];
        default:return 0}}
    function bin_reader_t$25(bin_reader_a)
     {function _bVQ_(buf,pos_ref,vtag)
       {return bin_read_t$67(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$68(bin_reader_a[1],buf,pos_ref)},
              _bVQ_]}
    function bin_t$25(bin_a)
     {var _bVO_=bin_reader_t$25(bin_a[3]),_bVP_=bin_writer_t$25(bin_a[2]);
      return [0,bin_shape_t$30(bin_a[1]),_bVP_,_bVO_]}
    function compare$22(cmp_a,a_001,match)
     {if(caml_call2(Ppx_compare_lib[1],a_001,match))return 0;
      if(typeof a_001 === "number")
       {if(typeof match === "number")return 0;else if(1 === match[0])return 1}
      else
       {if(0 === a_001[0])
         {var _bVM_=a_001[1];
          if(typeof match !== "number" && 0 === match[0])
           {var b_004=match[1];return caml_call2(cmp_a,_bVM_,b_004)}
          return -1}
        var _bVN_=a_001[1];
        if(typeof match === "number")
         return -1;
        else
         if(0 !== match[0])
          {var b_006=match[1];return caml_call2(cmp_a,_bVN_,b_006)}}
      return 1}
    function t_of_sexp$26(of_a,sexp)
     {if(0 === sexp[0])
       {var _bVI_=sexp[1];
        if(caml_string_notequal(_bVI_,cst_Excl$0))
         {if(caml_string_notequal(_bVI_,cst_Incl$0))
           {if(caml_string_notequal(_bVI_,cst_Unbounded))
             if(caml_string_notequal(_bVI_,cst_excl))
              if(caml_string_notequal(_bVI_,cst_incl))
               if(caml_string_notequal(_bVI_,cst_unbounded))
                var switch$0=1,switch$1=0,switch$2=0;
               else
                var switch$2=1;
              else
               var switch$1=1,switch$2=0;
             else
              var switch$0=0,switch$1=0,switch$2=0;
            else
             var switch$2=1;
            if(switch$2)return 0}
          else
           var switch$1=1;
          if(switch$1)
           return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$15,sexp)}
        else
         var switch$0=0;
        if(! switch$0)
         return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$15,sexp)}
      else
       {var _bVJ_=sexp[1];
        if(! _bVJ_)
         return caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc$15,sexp);
        var _bVK_=_bVJ_[1];
        if(0 !== _bVK_[0])
         return caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc$15,sexp);
        var _bVL_=_bVK_[1];
        if(caml_string_notequal(_bVL_,cst_Excl$1))
         {if(caml_string_notequal(_bVL_,cst_Incl$1))
           {if(caml_string_notequal(_bVL_,cst_Unbounded$0))
             if(caml_string_notequal(_bVL_,cst_excl$0))
              if(caml_string_notequal(_bVL_,cst_incl$0))
               if(caml_string_notequal(_bVL_,cst_unbounded$0))
                var switch$3=1,switch$4=0,switch$5=0;
               else
                var switch$5=1;
              else
               var switch$4=1,switch$5=0;
             else
              var switch$3=0,switch$4=0,switch$5=0;
            else
             var switch$5=1;
            if(switch$5)
             return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$15,sexp)}
          else
           var switch$4=1;
          if(switch$4)
           {var sexp_args=_bVJ_[2];
            if(sexp_args)
             if(! sexp_args[2])
              {var v0=sexp_args[1],v0$0=caml_call1(of_a,v0);return [0,v0$0]}
            return caml_call3
                    (Sexplib0_Sexp_conv_error[4],tp_loc$15,_bVL_,sexp)}}
        else
         var switch$3=0;
        if(! switch$3)
         {var sexp_args$0=_bVJ_[2];
          if(sexp_args$0)
           if(! sexp_args$0[2])
            {var v0$1=sexp_args$0[1],v0$2=caml_call1(of_a,v0$1);
             return [1,v0$2]}
          return caml_call3(Sexplib0_Sexp_conv_error[4],tp_loc$15,_bVL_,sexp)}}
      return caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc$15,sexp)}
    function sexp_of_t$33(of_a,param)
     {if(typeof param === "number")
       return _sm_;
      else
       {if(0 === param[0])
         {var v0=param[1],v0$0=caml_call1(of_a,v0);
          return [1,[0,_sn_,[0,v0$0,0]]]}
        var v0$1=param[1],v0$2=caml_call1(of_a,v0$1);
        return [1,[0,_so_,[0,v0$2,0]]]}}
    function map$17(x,f)
     {if(typeof x === "number")
       return 0;
      else
       {if(0 === x[0]){var x$0=x[1];return [0,caml_call1(f,x$0)]}
        var x$1=x[1];
        return [1,caml_call1(f,x$1)]}}
    var
     all$1=include$37[1],
     t_of_sexp$27=include$37[2],
     sexp_of_t$34=include$37[3],
     map$18=include$37[4],
     is_lower_bound=include$37[5],
     is_upper_bound=include$37[6],
     interval_contains_exn=include$37[7],
     bounds_crossed=include$37[8],
     interval_comparison_of_sexp=include$37[9],
     sexp_of_interval_comparison=include$37[10],
     compare_interval_comparison=include$37[11],
     hash_fold_interval_comparison=include$37[12],
     hash_interval_comparison=include$37[13],
     compare_to_interval_exn=include$37[14];
    function compare_one_sided(side,compare_a,t1,match)
     {if(typeof t1 === "number")
       return typeof match === "number"?0:996968770 <= side?1:-1;
      else
       if(0 === t1[0])
        {var _bVG_=t1[1];
         if(typeof match !== "number")
          {if(0 === match[0])
            {var a2=match[1];return caml_call2(compare_a,_bVG_,a2)}
           var a2$0=match[1],c=caml_call2(compare_a,_bVG_,a2$0);
           return caml_call2(_aD_,c,0)?996968770 <= side?1:-1:c}}
       else
        {var _bVH_=t1[1];
         if(typeof match !== "number")
          {if(0 === match[0])
            {var a2$1=match[1],c$0=caml_call2(compare_a,_bVH_,a2$1);
             return caml_call2(_aD_,c$0,0)?996968770 <= side?-1:1:c$0}
           var a2$2=match[1];
           return caml_call2(compare_a,_bVH_,a2$2)}}
      return 996968770 <= side?-1:1}
    function compare$23(compare_a,t1,t2)
     {return compare_one_sided(204302817,compare_a,t1,t2)}
    var As_lower_bound=[0,compare$23];
    function compare$24(compare_a,t1,t2)
     {return compare_one_sided(996968770,compare_a,t1,t2)}
    var As_upper_bound=[0,compare$24];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$112);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Maybe_bound=
      [0,
       bin_t$25,
       bin_read_t$68,
       bin_read_t$67,
       bin_reader_t$25,
       bin_size_t$33,
       bin_write_t$33,
       bin_writer_t$25,
       bin_shape_t$30,
       all$1,
       t_of_sexp$27,
       sexp_of_t$34,
       map$18,
       is_lower_bound,
       is_upper_bound,
       interval_contains_exn,
       bounds_crossed,
       interval_comparison_of_sexp,
       sexp_of_interval_comparison,
       compare_interval_comparison,
       hash_fold_interval_comparison,
       hash_interval_comparison,
       compare_to_interval_exn,
       As_lower_bound,
       As_upper_bound,
       [0,
        [0,
         bin_t$25,
         bin_read_t$68,
         bin_read_t$67,
         bin_reader_t$25,
         bin_size_t$33,
         bin_write_t$33,
         bin_writer_t$25,
         bin_shape_t$30,
         compare$22,
         t_of_sexp$26,
         sexp_of_t$33,
         map$17]]];
    caml_register_global
     (7397,Core_kernel_Maybe_bound,"Core_kernel__Maybe_bound");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$113);
    caml_call1(Expect_test_collector[4][1],cst_src_quickcheckable_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$114,cst$38);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$115);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Quickcheckable=[0];
    caml_register_global
     (7398,Core_kernel_Quickcheckable,"Core_kernel__Quickcheckable");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$116);
    caml_call1(Expect_test_collector[4][1],cst_src_set_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$117,cst$39);
    var
     Binable$0=0,
     Set=0,
     Tree$0=0,
     Named=0,
     Container=0,
     Without_comparator$0=0,
     With_comparator$0=0,
     With_first_class_module$0=0,
     Continue_or_stop=0,
     Merge_to_sequence_element=0;
    function Check_accessors$0(T,Tree,Elt,Named,Cmp,Options,M){return [0]}
    function Check_accessors0(M){return [0]}
    function Check_accessors1$0(M){return [0]}
    function Check_accessors2$0(M){return [0]}
    function Check_accessors2_with_comparator(M){return [0]}
    function Check_creators$0(T,Tree,Elt,Cmp,Options,M){return [0]}
    function Check_creators0(M){return [0]}
    function Check_creators1$0(M){return [0]}
    function Check_creators2$0(M){return [0]}
    function Check_creators2_with_comparator(M){return [0]}
    function Make_S_plain_tree$0(Elt){return [0]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$118);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Set_intf=
      [0,
       Binable$0,
       Set,
       Tree$0,
       Named,
       Container,
       Without_comparator$0,
       With_comparator$0,
       With_first_class_module$0,
       Continue_or_stop,
       Merge_to_sequence_element,
       Check_accessors$0,
       Check_accessors0,
       Check_accessors1$0,
       Check_accessors2$0,
       Check_accessors2_with_comparator,
       Check_creators$0,
       Check_creators0,
       Check_creators1$0,
       Check_creators2$0,
       Check_creators2_with_comparator,
       Make_S_plain_tree$0];
    caml_register_global(7399,Core_kernel_Set_intf,"Core_kernel__Set_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$119);
    caml_call1(Expect_test_collector[4][1],cst_src_set_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$120,cst$40);
    function gen_list(elt_gen){return caml_call1(_o__,elt_gen)}
    function gen$5(comparator,elt_gen)
     {var
       _bVE_=caml_call1(Base_Set[69][54],comparator),
       _bVF_=gen_list(elt_gen);
      return caml_call2(_nQ_[5][2],_bVF_,_bVE_)}
    function gen_tree$0(comparator,elt_gen)
     {var
       _bVC_=caml_call1(Base_Set[69][3][53],comparator),
       _bVD_=gen_list(elt_gen);
      return caml_call2(_nQ_[5][2],_bVD_,_bVC_)}
    function obs$6(elt_obs)
     {var _bVA_=Base_Set[69][15],_bVB_=caml_call1(_pc_,elt_obs);
      return caml_call2(_nP_[19],_bVB_,_bVA_)}
    function obs_tree$0(elt_obs)
     {var _bVy_=Base_Set[69][3][15],_bVz_=caml_call1(_pc_,elt_obs);
      return caml_call2(_nP_[19],_bVz_,_bVy_)}
    function shrink$1(elt_shr,t)
     {var list=caml_call1(Base_Set[69][15],t);
      function _bVv_(elt){return caml_call2(Base_Set[69][20],t,elt)}
      var
       drop_elts=caml_call2(map$0,caml_call1(of_list$0,list),_bVv_),
       shrink_elts=
        caml_call1
         (round_robin,
          caml_call2
           (map$11,
            list,
            function(elt)
             {function _bVw_(elt$0)
               {var _bVx_=caml_call2(Base_Set[69][20],t,elt);
                return caml_call2(Base_Set[69][19],_bVx_,elt$0)}
              return caml_call2(map$0,caml_call2(_nO_[1],elt_shr,elt),_bVw_)}));
      return caml_call1(round_robin,[0,drop_elts,[0,shrink_elts,0]])}
    function shrinker$6(elt_shr)
     {function _bVu_(t){return shrink$1(elt_shr,t)}
      return caml_call1(_nO_[2],_bVu_)}
    function shr_tree$0(comparator,elt_shr)
     {function _bVs_(tree)
       {var _bVt_=Base_Set[69][48];
        return caml_call2
                (map$0,
                 shrink$1
                  (elt_shr,caml_call2(Base_Set[69][62],comparator,tree)),
                 _bVt_)}
      return caml_call1(_nO_[2],_bVs_)}
    function gen$6(m,elt_gen){return gen$5(m[1],elt_gen)}
    var
     include$38=Base_Set[69][3],
     sexp_of_t$35=include$38[1],
     t_of_sexp_direct$0=include$38[2],
     Named$0=include$38[3],
     length$11=include$38[4],
     is_empty$9=include$38[5],
     iter$11=include$38[6],
     fold$9=include$38[7],
     fold_result$3=include$38[8],
     exists$8=include$38[9],
     for_all$8=include$38[10],
     count$8=include$38[11],
     sum$4=include$38[12],
     find$9=include$38[13],
     find_map$3=include$38[14],
     to_list$4=include$38[15],
     to_array$3=include$38[16],
     invariants$3=include$38[17],
     mem$9=include$38[18],
     add$7=include$38[19],
     remove$6=include$38[20],
     union$0=include$38[21],
     inter$0=include$38[22],
     diff$0=include$38[23],
     symmetric_diff$3=include$38[24],
     compare_direct$3=include$38[25],
     equal$11=include$38[26],
     is_subset=include$38[27],
     subset=include$38[28],
     fold_until$3=include$38[29],
     fold_right$5=include$38[30],
     iter2$4=include$38[31],
     filter$9=include$38[32],
     partition_tf$6=include$38[33],
     elements=include$38[34],
     min_elt$7=include$38[35],
     min_elt_exn$3=include$38[36],
     max_elt$7=include$38[37],
     max_elt_exn$3=include$38[38],
     choose=include$38[39],
     choose_exn=include$38[40],
     split$3=include$38[41],
     group_by=include$38[42],
     find_exn$8=include$38[43],
     find_index=include$38[44],
     nth$5=include$38[45],
     remove_index=include$38[46],
     to_tree$4=include$38[47],
     to_sequence$5=include$38[48],
     merge_to_sequence=include$38[49],
     empty$6=include$38[50],
     singleton$7=include$38[51],
     union_list=include$38[52],
     of_list$6=include$38[53],
     of_array$0=include$38[54],
     of_sorted_array$3=include$38[55],
     of_sorted_array_unchecked$3=include$38[56],
     of_increasing_iterator_unchecked$3=include$38[57],
     stable_dedup_list=include$38[58],
     map$19=include$38[59],
     filter_map$8=include$38[60],
     of_tree$3=include$38[61],
     empty$7=include$38[62];
    function to_map(comparator,t,f)
     {function _bVq_(key){return [0,key,caml_call1(f,key)]}
      var _bVr_=caml_call2(map$1,caml_call1(to_array$3,t),_bVq_);
      return caml_call2(_r$_[10],comparator,_bVr_)}
    function of_map_keys(m)
     {var _bVp_=caml_call1(to_array$1,caml_call1(keys$1,m));
      return caml_call2
              (of_sorted_array_unchecked$3,caml_call1(comparator$2,m),_bVp_)}
    function of_hash_set(comparator,hset)
     {function _bVo_(t,x){return caml_call3(add$7,comparator,t,x)}
      return caml_call3(fold$4,hset,caml_call1(empty$6,comparator),_bVo_)}
    function of_hashtbl_keys$0(comparator,hashtbl)
     {function _bVn_(x,param,t){return caml_call3(add$7,comparator,t,x)}
      return caml_call3(fold$3,hashtbl,caml_call1(empty$6,comparator),_bVn_)}
    var
     _sp_=Base_Set[69],
     merge_to_sequence$0=_sp_[50],
     to_sequence$6=_sp_[49],
     to_tree$5=_sp_[48],
     remove_index$0=_sp_[47],
     nth$6=_sp_[46],
     find_index$0=_sp_[45],
     find_exn$9=_sp_[44],
     group_by$0=_sp_[43],
     split$4=_sp_[42],
     choose_exn$0=_sp_[41],
     choose$0=_sp_[40],
     max_elt_exn$4=_sp_[39],
     max_elt$8=_sp_[38],
     min_elt_exn$4=_sp_[37],
     min_elt$8=_sp_[36],
     elements$0=_sp_[35],
     partition_tf$7=_sp_[34],
     filter$10=_sp_[33],
     iter2$5=_sp_[32],
     fold_right$6=_sp_[31],
     fold_until$4=_sp_[30],
     Named$1=_sp_[29],
     subset$0=_sp_[28],
     is_subset$0=_sp_[27],
     equal$12=_sp_[26],
     compare_direct$4=_sp_[25],
     symmetric_diff$4=_sp_[24],
     diff$1=_sp_[23],
     inter$1=_sp_[22],
     union$1=_sp_[21],
     remove$7=_sp_[20],
     add$8=_sp_[19],
     mem$10=_sp_[18],
     invariants$4=_sp_[17],
     to_array$4=_sp_[16],
     to_list$5=_sp_[15],
     find_map$4=_sp_[14],
     find$10=_sp_[13],
     sum$5=_sp_[12],
     count$9=_sp_[11],
     for_all$9=_sp_[10],
     exists$9=_sp_[9],
     fold_result$4=_sp_[8],
     fold$10=_sp_[7],
     iter$12=_sp_[6],
     is_empty$10=_sp_[5],
     length$12=_sp_[4];
    function to_map$0(t,f)
     {var _bVm_=caml_call1(to_tree$5,t);
      return to_map(caml_call1(Base_Set[69][63],t),_bVm_,f)}
    var
     invariants$5=Base_Set[2],
     empty$8=Base_Set[5],
     singleton$8=Base_Set[6],
     length$13=Base_Set[7],
     is_empty$11=Base_Set[8],
     mem$11=Base_Set[9],
     add$9=Base_Set[10],
     remove$8=Base_Set[11],
     union$2=Base_Set[12],
     union_list$0=Base_Set[13],
     inter$2=Base_Set[14],
     diff$2=Base_Set[15],
     symmetric_diff$5=Base_Set[16],
     compare_direct$5=Base_Set[17],
     equal$13=Base_Set[19],
     exists$10=Base_Set[20],
     for_all$10=Base_Set[21],
     count$10=Base_Set[22],
     sum$6=Base_Set[23],
     find$11=Base_Set[24],
     find_map$5=Base_Set[25],
     find_exn$10=Base_Set[26],
     nth$7=Base_Set[27],
     find_index$1=Base_Set[28],
     remove_index$1=Base_Set[29],
     is_subset$1=Base_Set[30],
     subset$1=Base_Set[31],
     of_list$7=Base_Set[33],
     of_array$1=Base_Set[34],
     to_list$6=Base_Set[35],
     to_array$5=Base_Set[36],
     of_sorted_array$4=Base_Set[37],
     of_sorted_array_unchecked$4=Base_Set[38],
     of_increasing_iterator_unchecked$4=Base_Set[39],
     stable_dedup_list$0=Base_Set[40],
     map$20=Base_Set[41],
     filter_map$9=Base_Set[42],
     filter$11=Base_Set[43],
     fold$11=Base_Set[44],
     fold_result$5=Base_Set[45],
     fold_until$5=Base_Set[46],
     fold_right$7=Base_Set[47],
     iter$13=Base_Set[48],
     iter2$6=Base_Set[49],
     partition_tf$8=Base_Set[50],
     elements$1=Base_Set[51],
     min_elt$9=Base_Set[52],
     min_elt_exn$5=Base_Set[53],
     max_elt$9=Base_Set[54],
     max_elt_exn$5=Base_Set[55],
     choose$1=Base_Set[56],
     choose_exn$1=Base_Set[57],
     split$5=Base_Set[58],
     group_by$1=Base_Set[59],
     to_sequence$7=Base_Set[60],
     merge_to_sequence$1=Base_Set[62];
    function of_tree$4(m){return caml_call1(Base_Set[69][62],m[1])}
    var to_tree$6=Base_Set[69][48],sexp_of_t$36=Base_Set[69][1];
    function compare$25(param,_bVl_,t1,t2)
     {return caml_call2(compare_direct$5,t1,t2)}
    var
     _sq_=Base_Set[69],
     hash_fold_direct$0=_sq_[64],
     comparator$3=_sq_[63],
     of_tree$5=_sq_[62],
     filter_map$10=_sq_[61],
     map$21=_sq_[60],
     stable_dedup_list$1=_sq_[59],
     of_increasing_iterator_unchecked$5=_sq_[58],
     of_sorted_array_unchecked$5=_sq_[57],
     of_sorted_array$5=_sq_[56],
     of_array$2=_sq_[55],
     of_list$8=_sq_[54],
     union_list$1=_sq_[53],
     singleton$9=_sq_[52],
     empty$9=_sq_[51];
    function of_map_keys$0(m)
     {var _bVk_=of_map_keys(m);
      return caml_call2(of_tree$5,caml_call1(comparator$2,m),_bVk_)}
    function of_hash_set$0(comparator,hset)
     {return caml_call2(of_tree$5,comparator,of_hash_set(comparator,hset))}
    function of_hashtbl_keys$1(comparator,hashtbl)
     {return caml_call2
              (of_tree$5,comparator,of_hashtbl_keys$0(comparator,hashtbl))}
    function of_hash_set$1(m,hset){return of_hash_set$0(m[1],hset)}
    function of_hashtbl_keys$2(m,hashtbl)
     {return of_hashtbl_keys$1(m[1],hashtbl)}
    function Creators$0(Elt)
     {var comparator=Elt[1];
      function of_tree(tree){return caml_call2(of_tree$5,comparator,tree)}
      function of_sorted_array_unchecked(array)
       {return caml_call2(of_sorted_array_unchecked$5,comparator,array)}
      function of_increasing_iterator_unchecked(len,f)
       {return caml_call3(of_increasing_iterator_unchecked$5,comparator,len,f)}
      function of_sorted_array(array)
       {return caml_call2(of_sorted_array$5,comparator,array)}
      var M_empty=caml_call1(Base_Set[69][65],Elt),empty=M_empty[1];
      function singleton(e){return caml_call2(singleton$9,comparator,e)}
      function union_list(l){return caml_call2(union_list$1,comparator,l)}
      function of_list(l){return caml_call2(of_list$8,comparator,l)}
      function of_hash_set(h){return of_hash_set$0(comparator,h)}
      function of_hashtbl_keys(h){return of_hashtbl_keys$1(comparator,h)}
      function of_array(a){return caml_call2(of_array$2,comparator,a)}
      function stable_dedup_list(xs)
       {return caml_call2(stable_dedup_list$1,comparator,xs)}
      function map(t,f){return caml_call3(map$21,comparator,t,f)}
      function filter_map(t,f)
       {return caml_call3(filter_map$10,comparator,t,f)}
      function t_of_sexp(a_of_sexp,sexp)
       {return of_tree
                (caml_call3(t_of_sexp_direct$0,comparator,a_of_sexp,sexp))}
      function gen(elt){return gen$5(comparator,elt)}
      return [0,
              t_of_sexp,
              empty,
              singleton,
              union_list,
              of_list,
              of_array,
              of_sorted_array,
              of_sorted_array_unchecked,
              of_increasing_iterator_unchecked,
              stable_dedup_list,
              map,
              filter_map,
              of_tree,
              of_hash_set,
              of_hashtbl_keys,
              of_map_keys$0,
              gen]}
    function Make_tree$0(Elt)
     {var comparator=Elt[1],compare_elt=comparator[1];
      function singleton(e){return caml_call2(singleton$7,comparator,e)}
      function invariants(t){return caml_call2(invariants$3,comparator,t)}
      function length(t){return caml_call1(length$11,t)}
      function is_empty(t){return caml_call1(is_empty$9,t)}
      function elements$0(t){return caml_call1(elements,t)}
      function min_elt(t){return caml_call1(min_elt$7,t)}
      function min_elt_exn(t){return caml_call1(min_elt_exn$3,t)}
      function max_elt(t){return caml_call1(max_elt$7,t)}
      function max_elt_exn(t){return caml_call1(max_elt_exn$3,t)}
      function choose$0(t){return caml_call1(choose,t)}
      function choose_exn$0(t){return caml_call1(choose_exn,t)}
      function to_list(t){return caml_call1(to_list$4,t)}
      function to_array(t){return caml_call1(to_array$3,t)}
      function iter(t,f){return caml_call2(iter$11,t,f)}
      function iter2(a,b,f){return caml_call4(iter2$4,comparator,a,b,f)}
      function exists(t,f){return caml_call2(exists$8,t,f)}
      function for_all(t,f){return caml_call2(for_all$8,t,f)}
      function count(t,f){return caml_call2(count$8,t,f)}
      function sum(m,t,f){return caml_call3(sum$4,m,t,f)}
      function find(t,f){return caml_call2(find$9,t,f)}
      function find_exn(t,f){return caml_call2(find_exn$8,t,f)}
      function find_map(t,f){return caml_call2(find_map$3,t,f)}
      function fold(t,init,f){return caml_call3(fold$9,t,init,f)}
      function fold_until(t,init,f){return caml_call3(fold_until$3,t,init,f)}
      function fold_right(t,init,f){return caml_call3(fold_right$5,t,init,f)}
      function fold_result(t,init,f)
       {return caml_call4(include$9[10],fold,init,f,t)}
      function map(t,f){return caml_call3(map$19,comparator,t,f)}
      function filter(t,f){return caml_call3(filter$9,comparator,t,f)}
      function filter_map(t,f){return caml_call3(filter_map$8,comparator,t,f)}
      function partition_tf(t,f)
       {return caml_call3(partition_tf$6,comparator,t,f)}
      function mem(t,a){return caml_call3(mem$9,comparator,t,a)}
      function add(t,a){return caml_call3(add$7,comparator,t,a)}
      function remove(t,a){return caml_call3(remove$6,comparator,t,a)}
      function union(t1,t2){return caml_call3(union$0,comparator,t1,t2)}
      function inter(t1,t2){return caml_call3(inter$0,comparator,t1,t2)}
      function diff(t1,t2){return caml_call3(diff$0,comparator,t1,t2)}
      function symmetric_diff(t1,t2)
       {return caml_call3(symmetric_diff$3,comparator,t1,t2)}
      function compare_direct(t1,t2)
       {return caml_call3(compare_direct$3,comparator,t1,t2)}
      function equal(t1,t2){return caml_call3(equal$11,comparator,t1,t2)}
      function is_subset$0(t,of){return caml_call3(is_subset,comparator,t,of)}
      function subset(t1,t2){return is_subset$0(t1,t2)}
      function of_list(l){return caml_call2(of_list$6,comparator,l)}
      function of_hash_set$0(h){return of_hash_set(comparator,h)}
      function of_hashtbl_keys(h){return of_hashtbl_keys$0(comparator,h)}
      function of_array(a){return caml_call2(of_array$0,comparator,a)}
      function of_sorted_array_unchecked(a)
       {return caml_call2(of_sorted_array_unchecked$3,comparator,a)}
      function of_increasing_iterator_unchecked(len,f)
       {return caml_call3(of_increasing_iterator_unchecked$3,comparator,len,f)}
      function of_sorted_array(a)
       {return caml_call2(of_sorted_array$3,comparator,a)}
      function union_list$0(l){return caml_call2(union_list,comparator,l)}
      function stable_dedup_list$0(xs)
       {return caml_call2(stable_dedup_list,comparator,xs)}
      function group_by$0(t,equiv)
       {return caml_call3(group_by,comparator,t,equiv)}
      function split(t,a){return caml_call3(split$3,comparator,t,a)}
      function nth(t,i){return caml_call2(nth$5,t,i)}
      function remove_index$0(t,i)
       {return caml_call3(remove_index,comparator,t,i)}
      function to_tree(t){return t}
      function of_tree(t){return t}
      function to_sequence(order,greater_or_equal_to,less_or_equal_to,t)
       {return caml_call5
                (to_sequence$5,
                 comparator,
                 order,
                 greater_or_equal_to,
                 less_or_equal_to,
                 t)}
      function merge_to_sequence$0
       (order,greater_or_equal_to,less_or_equal_to,t$0,t)
       {return caml_call6
                (merge_to_sequence,
                 comparator,
                 order,
                 greater_or_equal_to,
                 less_or_equal_to,
                 t$0,
                 t)}
      function to_map$0(t,f){return to_map(comparator,t,f)}
      function is_subset$1(t,of)
       {return caml_call3(Base_Set[69][3][3][1],comparator,t,of)}
      function equal$0(t1,t2)
       {return caml_call3(Base_Set[69][3][3][2],comparator,t1,t2)}
      var Named=[0,is_subset$1,equal$0];
      function gen(elt){return gen_tree$0(comparator,elt)}
      function obs(elt){return obs_tree$0(elt)}
      function shrinker(elt){return shr_tree$0(comparator,elt)}
      return [0,
              comparator,
              compare_elt,
              empty$7,
              singleton,
              invariants,
              length,
              is_empty,
              elements$0,
              min_elt,
              min_elt_exn,
              max_elt,
              max_elt_exn,
              choose$0,
              choose_exn$0,
              to_list,
              to_array,
              iter,
              iter2,
              exists,
              for_all,
              count,
              sum,
              find,
              find_exn,
              find_map,
              fold,
              fold_until,
              fold_right,
              fold_result,
              map,
              filter,
              filter_map,
              partition_tf,
              mem,
              add,
              remove,
              union,
              inter,
              diff,
              symmetric_diff,
              compare_direct,
              equal,
              is_subset$0,
              subset,
              of_list,
              of_hash_set$0,
              of_hashtbl_keys,
              of_array,
              of_sorted_array_unchecked,
              of_increasing_iterator_unchecked,
              of_sorted_array,
              union_list$0,
              stable_dedup_list$0,
              group_by$0,
              split,
              nth,
              nth,
              remove_index$0,
              to_tree,
              of_tree,
              to_sequence,
              merge_to_sequence$0,
              of_map_keys,
              to_map$0,
              Named,
              gen,
              obs,
              shrinker]}
    function init_for_bin_prot$0(len,f,comparator)
     {var set=caml_call3(of_increasing_iterator_unchecked$5,comparator,len,f);
      if(caml_call1(invariants$5,set))return set;
      function _bVj_(acc,elt)
       {return caml_call3(mem$9,comparator,acc,elt)
                ?caml_call1(_aV_,cst_Set_bin_read_t_duplicate_element_in_map)
                :caml_call3(add$7,comparator,acc,elt)}
      return caml_call2
              (of_tree$5,
               comparator,
               caml_call3(fold$11,set,caml_call1(empty$6,comparator),_bVj_))}
    var
     _sr_=Creators$0(Poly$0),
     _sB_=_sr_[10],
     _ss_=_sr_[1],
     _st_=_sr_[2],
     _su_=_sr_[3],
     _sv_=_sr_[4],
     _sw_=_sr_[5],
     _sx_=_sr_[6],
     _sy_=_sr_[7],
     _sz_=_sr_[8],
     _sA_=_sr_[9],
     _sC_=_sr_[11],
     _sD_=_sr_[12],
     _sE_=_sr_[13],
     _sF_=_sr_[14],
     _sG_=_sr_[15],
     _sH_=_sr_[16],
     _sI_=_sr_[17];
    function compare$26(param,t1,t2)
     {return caml_call2(compare_direct$4,t1,t2)}
    function sexp_of_t$37(sexp_of_k,t)
     {return caml_call3(sexp_of_t$36,sexp_of_k,function(param){return _sJ_},t)}
    var
     _sK_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$37),
     _sL_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_set_ml_360_19),
     _sM_=caml_call2(Bin_prot_Shape[15],_sL_,_sK_),
     _sN_=[0,caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$38),0],
     _sO_=
      [0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_el$9),_sN_,_sM_],0],
     _sP_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_set_ml_360_6),
     group$40=caml_call2(Bin_prot_Shape[6],_sP_,_sO_);
    function bin_shape_el$1(a)
     {var _bVi_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_el$10);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$40,_bVi_),[0,a,0])}
    function bin_size_el$1(size_of_a){return size_of_a}
    function bin_write_el$1(write_a){return write_a}
    function bin_read_el$1(of_a){return of_a}
    var
     caller_identity$1=
      caml_call1
       (Bin_shape_lib_Bin_shape[5][1],
        cst_88bcc478_4992_11e6_a95d_ff4831acf410);
    function iter$14(t,f)
     {return caml_call2(iter$12,t,function(key){return caml_call1(f,key)})}
    function init$4(len,next)
     {var _bVh_=Poly$0[1];
      return init_for_bin_prot$0
              (len,function(param){return caml_call1(next,0)},_bVh_)}
    var
     include$39=
      caml_call1
       (Bin_prot_Utils[12],
        [0,
         caller_identity$1,
         module_name$4,
         length$12,
         iter$14,
         init$4,
         bin_size_el$1,
         bin_write_el$1,
         bin_read_el$1,
         bin_shape_el$1]),
     bin_shape_t$31=include$39[1],
     bin_size_t$34=include$39[2],
     bin_write_t$34=include$39[3],
     bin_read_t$69=include$39[4],
     bin_read_t$70=include$39[5],
     bin_writer_t$26=include$39[6],
     bin_reader_t$26=include$39[7],
     bin_t$26=include$39[8],
     include$40=Make_tree$0(Poly$0),
     empty$10=include$40[3],
     singleton$10=include$40[4],
     invariants$6=include$40[5],
     length$14=include$40[6],
     is_empty$12=include$40[7],
     elements$2=include$40[8],
     min_elt$10=include$40[9],
     min_elt_exn$6=include$40[10],
     max_elt$10=include$40[11],
     max_elt_exn$6=include$40[12],
     choose$2=include$40[13],
     choose_exn$2=include$40[14],
     to_list$7=include$40[15],
     to_array$6=include$40[16],
     iter$15=include$40[17],
     iter2$7=include$40[18],
     exists$11=include$40[19],
     for_all$11=include$40[20],
     count$11=include$40[21],
     sum$7=include$40[22],
     find$12=include$40[23],
     find_exn$11=include$40[24],
     find_map$6=include$40[25],
     fold$12=include$40[26],
     fold_until$6=include$40[27],
     fold_right$8=include$40[28],
     fold_result$6=include$40[29],
     map$22=include$40[30],
     filter$12=include$40[31],
     filter_map$11=include$40[32],
     partition_tf$9=include$40[33],
     mem$12=include$40[34],
     add$10=include$40[35],
     remove$9=include$40[36],
     union$3=include$40[37],
     inter$3=include$40[38],
     diff$3=include$40[39],
     symmetric_diff$6=include$40[40],
     compare_direct$6=include$40[41],
     equal$14=include$40[42],
     is_subset$2=include$40[43],
     subset$2=include$40[44],
     of_list$9=include$40[45],
     of_hash_set$2=include$40[46],
     of_hashtbl_keys$3=include$40[47],
     of_array$3=include$40[48],
     of_sorted_array_unchecked$6=include$40[49],
     of_increasing_iterator_unchecked$6=include$40[50],
     of_sorted_array$6=include$40[51],
     union_list$2=include$40[52],
     stable_dedup_list$2=include$40[53],
     group_by$2=include$40[54],
     split$6=include$40[55],
     nth$8=include$40[56],
     find_index$2=include$40[57],
     remove_index$2=include$40[58],
     to_tree$7=include$40[59],
     of_tree$6=include$40[60],
     to_sequence$8=include$40[61],
     merge_to_sequence$2=include$40[62],
     of_map_keys$1=include$40[63],
     to_map$1=include$40[64],
     Named$2=include$40[65],
     gen$7=include$40[66],
     obs$7=include$40[67],
     shrinker$7=include$40[68];
    function sexp_of_t$38(sexp_of_elt,t)
     {return caml_call3
              (sexp_of_t$35,sexp_of_elt,function(param){return _sQ_},t)}
    function t_of_sexp$28(elt_of_sexp,sexp)
     {return caml_call3(t_of_sexp_direct$0,Poly$0[1],elt_of_sexp,sexp)}
    function _sR_(param)
     {function _bVe_(param){return caml_equal(caml_call1(_sB_,0),0)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_stable_dedup_list,
        0,
        cst_src_set_ml$0,
        389,
        4,
        42,
        _bVe_);
      function _bVf_(param){return caml_equal(caml_call1(_sB_,_sT_),_sS_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_stable_dedup_list_5_5_5_5_5_5,
        0,
        cst_src_set_ml$1,
        390,
        4,
        52,
        _bVf_);
      function _bVg_(param){return caml_equal(caml_call1(_sB_,_sV_),_sU_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_stable_dedup_list_5_9_3_5_2_2_5,
        0,
        cst_src_set_ml$2,
        391,
        4,
        60,
        _bVg_);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst$41,
      0,
      cst_src_set_ml$3,
      387,
      2,
      228,
      _sR_);
    function Make_plain_using_comparator$0(Elt)
     {var
       Elt_S1=caml_call1(S_to_S1,[0,Elt[2]]),
       _bU9_=Creators$0(Elt_S1),
       t_of_sexp=_bU9_[1],
       empty=_bU9_[2],
       singleton=_bU9_[3],
       union_list=_bU9_[4],
       of_list=_bU9_[5],
       of_array=_bU9_[6],
       of_sorted_array=_bU9_[7],
       of_sorted_array_unchecked=_bU9_[8],
       of_increasing_iterator_unchecked=_bU9_[9],
       stable_dedup_list=_bU9_[10],
       map=_bU9_[11],
       filter_map=_bU9_[12],
       of_tree=_bU9_[13],
       of_hash_set=_bU9_[14],
       of_hashtbl_keys=_bU9_[15],
       of_map_keys=_bU9_[16],
       gen=_bU9_[17];
      function compare(t1,t2){return caml_call2(compare_direct$4,t1,t2)}
      function sexp_of_t(t)
       {function _bVd_(param){return _sW_}
        return caml_call3(sexp_of_t$36,Elt[1],_bVd_,t)}
      function Provide_of_sexp(Elt)
       {function t_of_sexp$0(sexp){return caml_call2(t_of_sexp,Elt[1],sexp)}
        return [0,t_of_sexp$0]}
      function Provide_hash(Elt)
       {function hash_fold_t(state,t)
         {return caml_call3(hash_fold_direct$0,Elt[1],state,t)}
        function hash(t)
         {var _bVc_=hash_fold_t(caml_call2(Base_Hash[11],0,0),t);
          return caml_call1(Base_Hash[9],_bVc_)}
        return [0,hash_fold_t,hash]}
      function Provide_bin_io(Elt$0)
       {var
         comparator=Elt[2],
         bin_read_t=Elt$0[2],
         bin_size_t=Elt$0[5],
         bin_write_t=Elt$0[6],
         bin_shape_t=Elt$0[8],
         _bU$_=
          [0,
           [0,
            caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_el$11),
            0,
            bin_shape_t],
           0],
         _bVa_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_set_ml_436_6),
         group=caml_call2(Bin_prot_Shape[6],_bVa_,_bU$_),
         _bVb_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_el$12),
         bin_shape_el=caml_call1(caml_call2(Bin_prot_Shape[14],group,_bVb_),0),
         caller_identity=
          caml_call1
           (Bin_shape_lib_Bin_shape[5][1],
            cst_8989278e_4992_11e6_8f4a_6b89776b1e53);
        function iter(t,f)
         {return caml_call2(iter$12,t,function(key){return caml_call1(f,key)})}
        function init(len,next)
         {return init_for_bin_prot$0
                  (len,function(param){return caml_call1(next,0)},comparator)}
        return caml_call1
                (Bin_prot_Utils[11],
                 [0,
                  caller_identity,
                  module_name$5,
                  length$12,
                  iter,
                  init,
                  bin_size_t,
                  bin_write_t,
                  bin_read_t,
                  bin_shape_el])}
      var
       include=Make_tree$0(Elt_S1),
       comparator=include[1],
       compare_elt=include[2],
       empty$0=include[3],
       singleton$0=include[4],
       invariants=include[5],
       length=include[6],
       is_empty=include[7],
       elements=include[8],
       min_elt=include[9],
       min_elt_exn=include[10],
       max_elt=include[11],
       max_elt_exn=include[12],
       choose=include[13],
       choose_exn=include[14],
       to_list=include[15],
       to_array=include[16],
       iter=include[17],
       iter2=include[18],
       exists=include[19],
       for_all=include[20],
       count=include[21],
       sum=include[22],
       find=include[23],
       find_exn=include[24],
       find_map=include[25],
       fold=include[26],
       fold_until=include[27],
       fold_right=include[28],
       fold_result=include[29],
       map$0=include[30],
       filter=include[31],
       filter_map$0=include[32],
       partition_tf=include[33],
       mem=include[34],
       add=include[35],
       remove=include[36],
       union=include[37],
       inter=include[38],
       diff=include[39],
       symmetric_diff=include[40],
       compare_direct=include[41],
       equal=include[42],
       is_subset=include[43],
       subset=include[44],
       of_list$0=include[45],
       of_hash_set$0=include[46],
       of_hashtbl_keys$0=include[47],
       of_array$0=include[48],
       of_sorted_array_unchecked$0=include[49],
       of_increasing_iterator_unchecked$0=include[50],
       of_sorted_array$0=include[51],
       union_list$0=include[52],
       stable_dedup_list$0=include[53],
       group_by=include[54],
       split=include[55],
       nth=include[56],
       find_index=include[57],
       remove_index=include[58],
       to_tree=include[59],
       of_tree$0=include[60],
       to_sequence=include[61],
       merge_to_sequence=include[62],
       of_map_keys$0=include[63],
       to_map=include[64],
       Named=include[65],
       gen$0=include[66],
       obs=include[67],
       shrinker=include[68];
      function compare$0(t1,t2){return caml_call2(compare_direct,t1,t2)}
      function sexp_of_t$0(t)
       {function _bU__(param){return _sX_}
        return caml_call3(sexp_of_t$35,Elt[1],_bU__,t)}
      function Provide_of_sexp$0(X)
       {function t_of_sexp(sexp)
         {return caml_call3(t_of_sexp_direct$0,Elt_S1[1],X[1],sexp)}
        return [0,t_of_sexp]}
      var
       Tree=
        [0,
         comparator,
         compare_elt,
         empty$0,
         singleton$0,
         invariants,
         length,
         is_empty,
         elements,
         min_elt,
         min_elt_exn,
         max_elt,
         max_elt_exn,
         choose,
         choose_exn,
         to_list,
         to_array,
         iter,
         iter2,
         exists,
         for_all,
         count,
         sum,
         find,
         find_exn,
         find_map,
         fold,
         fold_until,
         fold_right,
         fold_result,
         map$0,
         filter,
         filter_map$0,
         partition_tf,
         mem,
         add,
         remove,
         union,
         inter,
         diff,
         symmetric_diff,
         compare_direct,
         equal,
         is_subset,
         subset,
         of_list$0,
         of_hash_set$0,
         of_hashtbl_keys$0,
         of_array$0,
         of_sorted_array_unchecked$0,
         of_increasing_iterator_unchecked$0,
         of_sorted_array$0,
         union_list$0,
         stable_dedup_list$0,
         group_by,
         split,
         nth,
         find_index,
         remove_index,
         to_tree,
         of_tree$0,
         to_sequence,
         merge_to_sequence,
         of_map_keys$0,
         to_map,
         Named,
         gen$0,
         obs,
         shrinker,
         compare$0,
         sexp_of_t$0,
         Provide_of_sexp$0];
      return [0,
              Elt,
              Elt_S1,
              t_of_sexp,
              empty,
              singleton,
              union_list,
              of_list,
              of_array,
              of_sorted_array,
              of_sorted_array_unchecked,
              of_increasing_iterator_unchecked,
              stable_dedup_list,
              map,
              filter_map,
              of_tree,
              of_hash_set,
              of_hashtbl_keys,
              of_map_keys,
              gen,
              length$12,
              is_empty$10,
              iter$12,
              fold$10,
              fold_result$4,
              exists$9,
              for_all$9,
              count$9,
              sum$5,
              find$10,
              find_map$4,
              to_list$5,
              to_array$4,
              invariants$4,
              mem$10,
              add$8,
              remove$7,
              union$1,
              inter$1,
              diff$1,
              symmetric_diff$4,
              compare_direct$4,
              equal$12,
              is_subset$0,
              subset$0,
              Named$1,
              fold_until$4,
              fold_right$6,
              iter2$5,
              filter$10,
              partition_tf$7,
              elements$0,
              min_elt$8,
              min_elt_exn$4,
              max_elt$8,
              max_elt_exn$4,
              choose$0,
              choose_exn$0,
              split$4,
              group_by$0,
              find_exn$9,
              find_index$0,
              nth$6,
              remove_index$0,
              to_tree$5,
              to_sequence$6,
              merge_to_sequence$0,
              to_map$0,
              obs$6,
              shrinker$6,
              compare,
              sexp_of_t,
              Provide_of_sexp,
              Provide_hash,
              Provide_bin_io,
              Tree]}
    function Make_using_comparator$0(Elt)
     {var
       M1=Make_plain_using_comparator$0([0,Elt[2],Elt[3]]),
       Provide_bin_io=M1[74],
       Provide_hash=M1[73],
       Provide_of_sexp=M1[72],
       sexp_of_t=M1[71],
       compare=M1[70],
       shrinker=M1[69],
       obs=M1[68],
       to_map=M1[67],
       merge_to_sequence=M1[66],
       to_sequence=M1[65],
       to_tree=M1[64],
       remove_index=M1[63],
       nth=M1[62],
       find_index=M1[61],
       find_exn=M1[60],
       group_by=M1[59],
       split=M1[58],
       choose_exn=M1[57],
       choose=M1[56],
       max_elt_exn=M1[55],
       max_elt=M1[54],
       min_elt_exn=M1[53],
       min_elt=M1[52],
       elements=M1[51],
       partition_tf=M1[50],
       filter=M1[49],
       iter2=M1[48],
       fold_right=M1[47],
       fold_until=M1[46],
       Named=M1[45],
       subset=M1[44],
       is_subset=M1[43],
       equal=M1[42],
       compare_direct=M1[41],
       symmetric_diff=M1[40],
       diff=M1[39],
       inter=M1[38],
       union=M1[37],
       remove=M1[36],
       add=M1[35],
       mem=M1[34],
       invariants=M1[33],
       to_array=M1[32],
       to_list=M1[31],
       find_map=M1[30],
       find=M1[29],
       sum=M1[28],
       count=M1[27],
       for_all=M1[26],
       exists=M1[25],
       fold_result=M1[24],
       fold=M1[23],
       iter=M1[22],
       is_empty=M1[21],
       length=M1[20],
       gen=M1[19],
       of_map_keys=M1[18],
       of_hashtbl_keys=M1[17],
       of_hash_set=M1[16],
       of_tree=M1[15],
       filter_map=M1[14],
       map=M1[13],
       stable_dedup_list=M1[12],
       of_increasing_iterator_unchecked=M1[11],
       of_sorted_array_unchecked=M1[10],
       of_sorted_array=M1[9],
       of_array=M1[8],
       of_list=M1[7],
       union_list=M1[6],
       singleton=M1[5],
       empty=M1[4],
       Elt_S1=M1[2],
       include=caml_call1(Provide_of_sexp,[0,Elt[1]]),
       t_of_sexp=include[1],
       _bU8_=M1[75],
       comparator=_bU8_[1],
       compare_elt=_bU8_[2],
       empty$0=_bU8_[3],
       singleton$0=_bU8_[4],
       invariants$0=_bU8_[5],
       length$0=_bU8_[6],
       is_empty$0=_bU8_[7],
       elements$0=_bU8_[8],
       min_elt$0=_bU8_[9],
       min_elt_exn$0=_bU8_[10],
       max_elt$0=_bU8_[11],
       max_elt_exn$0=_bU8_[12],
       choose$0=_bU8_[13],
       choose_exn$0=_bU8_[14],
       to_list$0=_bU8_[15],
       to_array$0=_bU8_[16],
       iter$0=_bU8_[17],
       iter2$0=_bU8_[18],
       exists$0=_bU8_[19],
       for_all$0=_bU8_[20],
       count$0=_bU8_[21],
       sum$0=_bU8_[22],
       find$0=_bU8_[23],
       find_exn$0=_bU8_[24],
       find_map$0=_bU8_[25],
       fold$0=_bU8_[26],
       fold_until$0=_bU8_[27],
       fold_right$0=_bU8_[28],
       fold_result$0=_bU8_[29],
       map$0=_bU8_[30],
       filter$0=_bU8_[31],
       filter_map$0=_bU8_[32],
       partition_tf$0=_bU8_[33],
       mem$0=_bU8_[34],
       add$0=_bU8_[35],
       remove$0=_bU8_[36],
       union$0=_bU8_[37],
       inter$0=_bU8_[38],
       diff$0=_bU8_[39],
       symmetric_diff$0=_bU8_[40],
       compare_direct$0=_bU8_[41],
       equal$0=_bU8_[42],
       is_subset$0=_bU8_[43],
       subset$0=_bU8_[44],
       of_list$0=_bU8_[45],
       of_hash_set$0=_bU8_[46],
       of_hashtbl_keys$0=_bU8_[47],
       of_array$0=_bU8_[48],
       of_sorted_array_unchecked$0=_bU8_[49],
       of_increasing_iterator_unchecked$0=_bU8_[50],
       of_sorted_array$0=_bU8_[51],
       union_list$0=_bU8_[52],
       stable_dedup_list$0=_bU8_[53],
       group_by$0=_bU8_[54],
       split$0=_bU8_[55],
       nth$0=_bU8_[56],
       find_index$0=_bU8_[57],
       remove_index$0=_bU8_[58],
       to_tree$0=_bU8_[59],
       of_tree$0=_bU8_[60],
       to_sequence$0=_bU8_[61],
       merge_to_sequence$0=_bU8_[62],
       of_map_keys$0=_bU8_[63],
       to_map$0=_bU8_[64],
       Named$0=_bU8_[65],
       gen$0=_bU8_[66],
       obs$0=_bU8_[67],
       shrinker$0=_bU8_[68],
       compare$0=_bU8_[69],
       sexp_of_t$0=_bU8_[70],
       Provide_of_sexp$0=_bU8_[71],
       include$0=caml_call1(M1[75][71],[0,Elt[1]]),
       t_of_sexp$0=include$0[1],
       Tree=
        [0,
         comparator,
         compare_elt,
         empty$0,
         singleton$0,
         invariants$0,
         length$0,
         is_empty$0,
         elements$0,
         min_elt$0,
         min_elt_exn$0,
         max_elt$0,
         max_elt_exn$0,
         choose$0,
         choose_exn$0,
         to_list$0,
         to_array$0,
         iter$0,
         iter2$0,
         exists$0,
         for_all$0,
         count$0,
         sum$0,
         find$0,
         find_exn$0,
         find_map$0,
         fold$0,
         fold_until$0,
         fold_right$0,
         fold_result$0,
         map$0,
         filter$0,
         filter_map$0,
         partition_tf$0,
         mem$0,
         add$0,
         remove$0,
         union$0,
         inter$0,
         diff$0,
         symmetric_diff$0,
         compare_direct$0,
         equal$0,
         is_subset$0,
         subset$0,
         of_list$0,
         of_hash_set$0,
         of_hashtbl_keys$0,
         of_array$0,
         of_sorted_array_unchecked$0,
         of_increasing_iterator_unchecked$0,
         of_sorted_array$0,
         union_list$0,
         stable_dedup_list$0,
         group_by$0,
         split$0,
         nth$0,
         find_index$0,
         remove_index$0,
         to_tree$0,
         of_tree$0,
         to_sequence$0,
         merge_to_sequence$0,
         of_map_keys$0,
         to_map$0,
         Named$0,
         gen$0,
         obs$0,
         shrinker$0,
         compare$0,
         sexp_of_t$0,
         Provide_of_sexp$0,
         t_of_sexp$0];
      return [0,
              Elt,
              M1,
              Elt_S1,
              empty,
              singleton,
              union_list,
              of_list,
              of_array,
              of_sorted_array,
              of_sorted_array_unchecked,
              of_increasing_iterator_unchecked,
              stable_dedup_list,
              map,
              filter_map,
              of_tree,
              of_hash_set,
              of_hashtbl_keys,
              of_map_keys,
              gen,
              length,
              is_empty,
              iter,
              fold,
              fold_result,
              exists,
              for_all,
              count,
              sum,
              find,
              find_map,
              to_list,
              to_array,
              invariants,
              mem,
              add,
              remove,
              union,
              inter,
              diff,
              symmetric_diff,
              compare_direct,
              equal,
              is_subset,
              subset,
              Named,
              fold_until,
              fold_right,
              iter2,
              filter,
              partition_tf,
              elements,
              min_elt,
              min_elt_exn,
              max_elt,
              max_elt_exn,
              choose,
              choose_exn,
              split,
              group_by,
              find_exn,
              find_index,
              nth,
              remove_index,
              to_tree,
              to_sequence,
              merge_to_sequence,
              to_map,
              obs,
              shrinker,
              compare,
              sexp_of_t,
              Provide_of_sexp,
              Provide_hash,
              Provide_bin_io,
              t_of_sexp,
              Tree]}
    function Make_binable_using_comparator$0(Elt)
     {var
       M2=Make_using_comparator$0([0,Elt[9],Elt[10],Elt[11]]),
       Tree=M2[76],
       t_of_sexp=M2[75],
       Provide_bin_io=M2[74],
       Provide_hash=M2[73],
       Provide_of_sexp=M2[72],
       sexp_of_t=M2[71],
       compare=M2[70],
       shrinker=M2[69],
       obs=M2[68],
       to_map=M2[67],
       merge_to_sequence=M2[66],
       to_sequence=M2[65],
       to_tree=M2[64],
       remove_index=M2[63],
       nth=M2[62],
       find_index=M2[61],
       find_exn=M2[60],
       group_by=M2[59],
       split=M2[58],
       choose_exn=M2[57],
       choose=M2[56],
       max_elt_exn=M2[55],
       max_elt=M2[54],
       min_elt_exn=M2[53],
       min_elt=M2[52],
       elements=M2[51],
       partition_tf=M2[50],
       filter=M2[49],
       iter2=M2[48],
       fold_right=M2[47],
       fold_until=M2[46],
       Named=M2[45],
       subset=M2[44],
       is_subset=M2[43],
       equal=M2[42],
       compare_direct=M2[41],
       symmetric_diff=M2[40],
       diff=M2[39],
       inter=M2[38],
       union=M2[37],
       remove=M2[36],
       add=M2[35],
       mem=M2[34],
       invariants=M2[33],
       to_array=M2[32],
       to_list=M2[31],
       find_map=M2[30],
       find=M2[29],
       sum=M2[28],
       count=M2[27],
       for_all=M2[26],
       exists=M2[25],
       fold_result=M2[24],
       fold=M2[23],
       iter=M2[22],
       is_empty=M2[21],
       length=M2[20],
       gen=M2[19],
       of_map_keys=M2[18],
       of_hashtbl_keys=M2[17],
       of_hash_set=M2[16],
       of_tree=M2[15],
       filter_map=M2[14],
       map=M2[13],
       stable_dedup_list=M2[12],
       of_increasing_iterator_unchecked=M2[11],
       of_sorted_array_unchecked=M2[10],
       of_sorted_array=M2[9],
       of_array=M2[8],
       of_list=M2[7],
       union_list=M2[6],
       singleton=M2[5],
       empty=M2[4],
       Elt_S1=M2[3],
       M1=M2[2],
       include=
        caml_call1
         (Provide_bin_io,
          [0,Elt[1],Elt[2],Elt[3],Elt[4],Elt[5],Elt[6],Elt[7],Elt[8]]),
       bin_size_t=include[1],
       bin_write_t=include[2],
       bin_read_t=include[3],
       bin_read_t$0=include[4],
       bin_shape_t=include[5],
       bin_writer_t=include[6],
       bin_reader_t=include[7],
       bin_t=include[8];
      return [0,
              Elt,
              M2,
              M1,
              Elt_S1,
              empty,
              singleton,
              union_list,
              of_list,
              of_array,
              of_sorted_array,
              of_sorted_array_unchecked,
              of_increasing_iterator_unchecked,
              stable_dedup_list,
              map,
              filter_map,
              of_tree,
              of_hash_set,
              of_hashtbl_keys,
              of_map_keys,
              gen,
              length,
              is_empty,
              iter,
              fold,
              fold_result,
              exists,
              for_all,
              count,
              sum,
              find,
              find_map,
              to_list,
              to_array,
              invariants,
              mem,
              add,
              remove,
              union,
              inter,
              diff,
              symmetric_diff,
              compare_direct,
              equal,
              is_subset,
              subset,
              Named,
              fold_until,
              fold_right,
              iter2,
              filter,
              partition_tf,
              elements,
              min_elt,
              min_elt_exn,
              max_elt,
              max_elt_exn,
              choose,
              choose_exn,
              split,
              group_by,
              find_exn,
              find_index,
              nth,
              remove_index,
              to_tree,
              to_sequence,
              merge_to_sequence,
              to_map,
              obs,
              shrinker,
              compare,
              sexp_of_t,
              Provide_of_sexp,
              Provide_hash,
              Provide_bin_io,
              t_of_sexp,
              Tree,
              bin_size_t,
              bin_write_t,
              bin_read_t,
              bin_read_t$0,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$121);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     _sY_=
      [0,
       [0,
        function(_bU7_)
         {var
           _bU6_=
            Make_binable_using_comparator$0
             ([0,
               _bU7_[1],
               _bU7_[2],
               _bU7_[3],
               _bU7_[4],
               _bU7_[5],
               _bU7_[6],
               _bU7_[7],
               _bU7_[8],
               _bU7_[10],
               _bU7_[11],
               _bU7_[12]]);
          return [0,
                  _bU6_[85],
                  _bU6_[80],
                  _bU6_[81],
                  _bU6_[84],
                  _bU6_[78],
                  _bU6_[79],
                  _bU6_[83],
                  _bU6_[82],
                  _bU6_[71],
                  _bU6_[76],
                  _bU6_[72]]}]],
     _sZ_=Base_Set[63];
    function _s0_(_bU1_)
     {var
       _bU2_=Make_binable_using_comparator$0(_bU1_),
       _bU3_=_bU2_[3],
       _bU4_=_bU2_[77],
       _bU5_=_bU2_[1];
      return [0,
              [0,
               _bU5_[9],
               _bU5_[10],
               _bU5_[1],
               _bU5_[2],
               _bU5_[3],
               _bU5_[4],
               _bU5_[5],
               _bU5_[6],
               _bU5_[7],
               _bU5_[8],
               _bU5_[11]],
              [0,
               _bU4_[69],
               _bU4_[6],
               _bU4_[7],
               _bU4_[17],
               _bU4_[26],
               _bU4_[29],
               _bU4_[19],
               _bU4_[20],
               _bU4_[21],
               _bU4_[22],
               _bU4_[23],
               _bU4_[25],
               _bU4_[15],
               _bU4_[16],
               _bU4_[5],
               _bU4_[34],
               _bU4_[35],
               _bU4_[36],
               _bU4_[37],
               _bU4_[38],
               _bU4_[39],
               _bU4_[40],
               _bU4_[41],
               _bU4_[42],
               _bU4_[43],
               _bU4_[44],
               _bU3_[75][65],
               _bU4_[27],
               _bU4_[28],
               _bU4_[18],
               _bU4_[31],
               _bU4_[33],
               _bU4_[8],
               _bU4_[9],
               _bU4_[10],
               _bU4_[11],
               _bU4_[12],
               _bU4_[13],
               _bU4_[14],
               _bU4_[55],
               _bU4_[54],
               _bU4_[24],
               _bU4_[57],
               _bU4_[56],
               _bU4_[58],
               _bU4_[59],
               _bU4_[61],
               _bU4_[62],
               _bU4_[64],
               _bU4_[67],
               _bU4_[68],
               _bU4_[3],
               _bU4_[4],
               _bU4_[52],
               _bU4_[45],
               _bU4_[48],
               _bU4_[51],
               _bU4_[49],
               _bU4_[50],
               _bU4_[53],
               _bU4_[30],
               _bU4_[32],
               _bU4_[60],
               _bU4_[46],
               _bU4_[47],
               _bU4_[63],
               _bU4_[66],
               _bU3_[75][71],
               _bU4_[72],
               _bU4_[70]],
              _bU2_[71],
              _bU2_[21],
              _bU2_[22],
              _bU2_[23],
              _bU2_[24],
              _bU2_[25],
              _bU2_[26],
              _bU2_[27],
              _bU2_[28],
              _bU2_[29],
              _bU2_[30],
              _bU2_[31],
              _bU2_[32],
              _bU2_[33],
              _bU2_[34],
              _bU2_[35],
              _bU2_[36],
              _bU2_[37],
              _bU2_[38],
              _bU2_[39],
              _bU2_[40],
              _bU2_[41],
              _bU2_[42],
              _bU2_[43],
              _bU2_[44],
              _bU2_[45],
              Named$1,
              _bU2_[47],
              _bU2_[48],
              _bU2_[49],
              _bU2_[50],
              _bU2_[51],
              _bU2_[52],
              _bU2_[53],
              _bU2_[54],
              _bU2_[55],
              _bU2_[56],
              _bU2_[57],
              _bU2_[58],
              _bU2_[59],
              _bU2_[60],
              _bU2_[61],
              _bU2_[62],
              _bU2_[63],
              _bU2_[64],
              _bU2_[65],
              _bU2_[66],
              _bU2_[67],
              _bU2_[68],
              _bU2_[69],
              _bU2_[70],
              _bU2_[5],
              _bU2_[6],
              _bU2_[7],
              _bU2_[8],
              _bU2_[9],
              _bU2_[10],
              _bU2_[11],
              _bU2_[12],
              _bU2_[13],
              _bU2_[14],
              _bU2_[15],
              _bU2_[16],
              _bU2_[17],
              _bU2_[18],
              _bU2_[19],
              _bU2_[20],
              _bU2_[73],
              _bU2_[75],
              _bU2_[74],
              _bU2_[76],
              _bU2_[72],
              _bU2_[78],
              _bU2_[79],
              _bU2_[80],
              _bU2_[81],
              _bU2_[82],
              _bU2_[83],
              _bU2_[84],
              _bU2_[85]]}
    function _s1_(_bUY_)
     {var _bUZ_=Make_using_comparator$0(_bUY_),_bU0_=_bUZ_[76];
      return [0,
              _bUZ_[1],
              [0,
               _bU0_[69],
               _bU0_[6],
               _bU0_[7],
               _bU0_[17],
               _bU0_[26],
               _bU0_[29],
               _bU0_[19],
               _bU0_[20],
               _bU0_[21],
               _bU0_[22],
               _bU0_[23],
               _bU0_[25],
               _bU0_[15],
               _bU0_[16],
               _bU0_[5],
               _bU0_[34],
               _bU0_[35],
               _bU0_[36],
               _bU0_[37],
               _bU0_[38],
               _bU0_[39],
               _bU0_[40],
               _bU0_[41],
               _bU0_[42],
               _bU0_[43],
               _bU0_[44],
               _bU0_[65],
               _bU0_[27],
               _bU0_[28],
               _bU0_[18],
               _bU0_[31],
               _bU0_[33],
               _bU0_[8],
               _bU0_[9],
               _bU0_[10],
               _bU0_[11],
               _bU0_[12],
               _bU0_[13],
               _bU0_[14],
               _bU0_[55],
               _bU0_[54],
               _bU0_[24],
               _bU0_[57],
               _bU0_[56],
               _bU0_[58],
               _bU0_[59],
               _bU0_[61],
               _bU0_[62],
               _bU0_[64],
               _bU0_[67],
               _bU0_[68],
               _bU0_[3],
               _bU0_[4],
               _bU0_[52],
               _bU0_[45],
               _bU0_[48],
               _bU0_[51],
               _bU0_[49],
               _bU0_[50],
               _bU0_[53],
               _bU0_[30],
               _bU0_[32],
               _bU0_[60],
               _bU0_[46],
               _bU0_[47],
               _bU0_[63],
               _bU0_[66],
               _bU0_[71],
               _bU0_[72],
               _bU0_[70]],
              _bUZ_[70],
              _bUZ_[20],
              _bUZ_[21],
              _bUZ_[22],
              _bUZ_[23],
              _bUZ_[24],
              _bUZ_[25],
              _bUZ_[26],
              _bUZ_[27],
              _bUZ_[28],
              _bUZ_[29],
              _bUZ_[30],
              _bUZ_[31],
              _bUZ_[32],
              _bUZ_[33],
              _bUZ_[34],
              _bUZ_[35],
              _bUZ_[36],
              _bUZ_[37],
              _bUZ_[38],
              _bUZ_[39],
              _bUZ_[40],
              _bUZ_[41],
              _bUZ_[42],
              _bUZ_[43],
              _bUZ_[44],
              Named$1,
              _bUZ_[46],
              _bUZ_[47],
              _bUZ_[48],
              _bUZ_[49],
              _bUZ_[50],
              _bUZ_[51],
              _bUZ_[52],
              _bUZ_[53],
              _bUZ_[54],
              _bUZ_[55],
              _bUZ_[56],
              _bUZ_[57],
              _bUZ_[58],
              _bUZ_[59],
              _bUZ_[60],
              _bUZ_[61],
              _bUZ_[62],
              _bUZ_[63],
              _bUZ_[64],
              _bUZ_[65],
              _bUZ_[66],
              _bUZ_[67],
              _bUZ_[68],
              _bUZ_[69],
              _bUZ_[4],
              _bUZ_[5],
              _bUZ_[6],
              _bUZ_[7],
              _bUZ_[8],
              _bUZ_[9],
              _bUZ_[10],
              _bUZ_[11],
              _bUZ_[12],
              _bUZ_[13],
              _bUZ_[14],
              _bUZ_[15],
              _bUZ_[16],
              _bUZ_[17],
              _bUZ_[18],
              _bUZ_[19],
              _bUZ_[72],
              _bUZ_[74],
              _bUZ_[73],
              _bUZ_[75],
              _bUZ_[71]]}
    function _s2_(_bUV_)
     {var _bUW_=Make_plain_using_comparator$0(_bUV_),_bUX_=_bUW_[75];
      return [0,
              _bUW_[1],
              [0,
               _bUX_[69],
               _bUX_[70],
               _bUX_[6],
               _bUX_[7],
               _bUX_[17],
               _bUX_[26],
               _bUX_[29],
               _bUX_[19],
               _bUX_[20],
               _bUX_[21],
               _bUX_[22],
               _bUX_[23],
               _bUX_[25],
               _bUX_[15],
               _bUX_[16],
               _bUX_[5],
               _bUX_[34],
               _bUX_[35],
               _bUX_[36],
               _bUX_[37],
               _bUX_[38],
               _bUX_[39],
               _bUX_[40],
               _bUX_[41],
               _bUX_[42],
               _bUX_[43],
               _bUX_[44],
               _bUX_[65],
               _bUX_[27],
               _bUX_[28],
               _bUX_[18],
               _bUX_[31],
               _bUX_[33],
               _bUX_[8],
               _bUX_[9],
               _bUX_[10],
               _bUX_[11],
               _bUX_[12],
               _bUX_[13],
               _bUX_[14],
               _bUX_[55],
               _bUX_[54],
               _bUX_[24],
               _bUX_[57],
               _bUX_[56],
               _bUX_[58],
               _bUX_[59],
               _bUX_[61],
               _bUX_[62],
               _bUX_[64],
               _bUX_[67],
               _bUX_[68],
               _bUX_[3],
               _bUX_[4],
               _bUX_[52],
               _bUX_[45],
               _bUX_[48],
               _bUX_[51],
               _bUX_[49],
               _bUX_[50],
               _bUX_[53],
               _bUX_[30],
               _bUX_[32],
               _bUX_[60],
               _bUX_[46],
               _bUX_[47],
               _bUX_[63],
               _bUX_[66],
               _bUX_[71]],
              _bUW_[70],
              _bUW_[71],
              _bUW_[20],
              _bUW_[21],
              _bUW_[22],
              _bUW_[23],
              _bUW_[24],
              _bUW_[25],
              _bUW_[26],
              _bUW_[27],
              _bUW_[28],
              _bUW_[29],
              _bUW_[30],
              _bUW_[31],
              _bUW_[32],
              _bUW_[33],
              _bUW_[34],
              _bUW_[35],
              _bUW_[36],
              _bUW_[37],
              _bUW_[38],
              _bUW_[39],
              _bUW_[40],
              _bUW_[41],
              _bUW_[42],
              _bUW_[43],
              _bUW_[44],
              _bUW_[45],
              _bUW_[46],
              _bUW_[47],
              _bUW_[48],
              _bUW_[49],
              _bUW_[50],
              _bUW_[51],
              _bUW_[52],
              _bUW_[53],
              _bUW_[54],
              _bUW_[55],
              _bUW_[56],
              _bUW_[57],
              _bUW_[58],
              _bUW_[59],
              _bUW_[60],
              _bUW_[61],
              _bUW_[62],
              _bUW_[63],
              _bUW_[64],
              _bUW_[65],
              _bUW_[66],
              _bUW_[67],
              _bUW_[68],
              _bUW_[69],
              _bUW_[4],
              _bUW_[5],
              _bUW_[6],
              _bUW_[7],
              _bUW_[8],
              _bUW_[9],
              _bUW_[10],
              _bUW_[11],
              _bUW_[12],
              _bUW_[13],
              _bUW_[14],
              _bUW_[15],
              _bUW_[16],
              _bUW_[17],
              _bUW_[18],
              _bUW_[19],
              _bUW_[72],
              _bUW_[74],
              _bUW_[73]]}
    function _s3_(Elt)
     {var
       bin_t=Elt[1],
       bin_read_t=Elt[2],
       bin_read_t$0=Elt[3],
       bin_reader_t=Elt[4],
       bin_size_t=Elt[5],
       bin_write_t=Elt[6],
       bin_writer_t=Elt[7],
       bin_shape_t=Elt[8],
       t_of_sexp=Elt[10],
       sexp_of_t=Elt[11],
       include=caml_call1(Make,[0,Elt[9],Elt[11]]),
       comparator=include[1],
       _bUR_=
        Make_binable_using_comparator$0
         ([0,
           bin_t,
           bin_read_t,
           bin_read_t$0,
           bin_reader_t,
           bin_size_t,
           bin_write_t,
           bin_writer_t,
           bin_shape_t,
           t_of_sexp,
           sexp_of_t,
           comparator]),
       _bUS_=_bUR_[3],
       _bUT_=_bUR_[77],
       _bUU_=_bUR_[1];
      return [0,
              [0,
               _bUU_[9],
               _bUU_[10],
               _bUU_[1],
               _bUU_[2],
               _bUU_[3],
               _bUU_[4],
               _bUU_[5],
               _bUU_[6],
               _bUU_[7],
               _bUU_[8],
               _bUU_[11]],
              [0,
               _bUT_[69],
               _bUT_[6],
               _bUT_[7],
               _bUT_[17],
               _bUT_[26],
               _bUT_[29],
               _bUT_[19],
               _bUT_[20],
               _bUT_[21],
               _bUT_[22],
               _bUT_[23],
               _bUT_[25],
               _bUT_[15],
               _bUT_[16],
               _bUT_[5],
               _bUT_[34],
               _bUT_[35],
               _bUT_[36],
               _bUT_[37],
               _bUT_[38],
               _bUT_[39],
               _bUT_[40],
               _bUT_[41],
               _bUT_[42],
               _bUT_[43],
               _bUT_[44],
               _bUS_[75][65],
               _bUT_[27],
               _bUT_[28],
               _bUT_[18],
               _bUT_[31],
               _bUT_[33],
               _bUT_[8],
               _bUT_[9],
               _bUT_[10],
               _bUT_[11],
               _bUT_[12],
               _bUT_[13],
               _bUT_[14],
               _bUT_[55],
               _bUT_[54],
               _bUT_[24],
               _bUT_[57],
               _bUT_[56],
               _bUT_[58],
               _bUT_[59],
               _bUT_[61],
               _bUT_[62],
               _bUT_[64],
               _bUT_[67],
               _bUT_[68],
               _bUT_[3],
               _bUT_[4],
               _bUT_[52],
               _bUT_[45],
               _bUT_[48],
               _bUT_[51],
               _bUT_[49],
               _bUT_[50],
               _bUT_[53],
               _bUT_[30],
               _bUT_[32],
               _bUT_[60],
               _bUT_[46],
               _bUT_[47],
               _bUT_[63],
               _bUT_[66],
               _bUS_[75][71],
               _bUT_[72],
               _bUT_[70]],
              _bUR_[71],
              _bUR_[21],
              _bUR_[22],
              _bUR_[23],
              _bUR_[24],
              _bUR_[25],
              _bUR_[26],
              _bUR_[27],
              _bUR_[28],
              _bUR_[29],
              _bUR_[30],
              _bUR_[31],
              _bUR_[32],
              _bUR_[33],
              _bUR_[34],
              _bUR_[35],
              _bUR_[36],
              _bUR_[37],
              _bUR_[38],
              _bUR_[39],
              _bUR_[40],
              _bUR_[41],
              _bUR_[42],
              _bUR_[43],
              _bUR_[44],
              _bUR_[45],
              Named$1,
              _bUR_[47],
              _bUR_[48],
              _bUR_[49],
              _bUR_[50],
              _bUR_[51],
              _bUR_[52],
              _bUR_[53],
              _bUR_[54],
              _bUR_[55],
              _bUR_[56],
              _bUR_[57],
              _bUR_[58],
              _bUR_[59],
              _bUR_[60],
              _bUR_[61],
              _bUR_[62],
              _bUR_[63],
              _bUR_[64],
              _bUR_[65],
              _bUR_[66],
              _bUR_[67],
              _bUR_[68],
              _bUR_[69],
              _bUR_[70],
              _bUR_[5],
              _bUR_[6],
              _bUR_[7],
              _bUR_[8],
              _bUR_[9],
              _bUR_[10],
              _bUR_[11],
              _bUR_[12],
              _bUR_[13],
              _bUR_[14],
              _bUR_[15],
              _bUR_[16],
              _bUR_[17],
              _bUR_[18],
              _bUR_[19],
              _bUR_[20],
              _bUR_[73],
              _bUR_[75],
              _bUR_[74],
              _bUR_[76],
              _bUR_[72],
              _bUR_[78],
              _bUR_[79],
              _bUR_[80],
              _bUR_[81],
              _bUR_[82],
              _bUR_[83],
              _bUR_[84],
              _bUR_[85]]}
    function _s4_(Elt)
     {var
       t_of_sexp=Elt[2],
       sexp_of_t=Elt[3],
       include=caml_call1(Make,[0,Elt[1],Elt[3]]),
       comparator=include[1],
       _bUP_=Make_using_comparator$0([0,t_of_sexp,sexp_of_t,comparator]),
       _bUQ_=_bUP_[76];
      return [0,
              _bUP_[1],
              [0,
               _bUQ_[69],
               _bUQ_[6],
               _bUQ_[7],
               _bUQ_[17],
               _bUQ_[26],
               _bUQ_[29],
               _bUQ_[19],
               _bUQ_[20],
               _bUQ_[21],
               _bUQ_[22],
               _bUQ_[23],
               _bUQ_[25],
               _bUQ_[15],
               _bUQ_[16],
               _bUQ_[5],
               _bUQ_[34],
               _bUQ_[35],
               _bUQ_[36],
               _bUQ_[37],
               _bUQ_[38],
               _bUQ_[39],
               _bUQ_[40],
               _bUQ_[41],
               _bUQ_[42],
               _bUQ_[43],
               _bUQ_[44],
               _bUQ_[65],
               _bUQ_[27],
               _bUQ_[28],
               _bUQ_[18],
               _bUQ_[31],
               _bUQ_[33],
               _bUQ_[8],
               _bUQ_[9],
               _bUQ_[10],
               _bUQ_[11],
               _bUQ_[12],
               _bUQ_[13],
               _bUQ_[14],
               _bUQ_[55],
               _bUQ_[54],
               _bUQ_[24],
               _bUQ_[57],
               _bUQ_[56],
               _bUQ_[58],
               _bUQ_[59],
               _bUQ_[61],
               _bUQ_[62],
               _bUQ_[64],
               _bUQ_[67],
               _bUQ_[68],
               _bUQ_[3],
               _bUQ_[4],
               _bUQ_[52],
               _bUQ_[45],
               _bUQ_[48],
               _bUQ_[51],
               _bUQ_[49],
               _bUQ_[50],
               _bUQ_[53],
               _bUQ_[30],
               _bUQ_[32],
               _bUQ_[60],
               _bUQ_[46],
               _bUQ_[47],
               _bUQ_[63],
               _bUQ_[66],
               _bUQ_[71],
               _bUQ_[72],
               _bUQ_[70]],
              _bUP_[70],
              _bUP_[20],
              _bUP_[21],
              _bUP_[22],
              _bUP_[23],
              _bUP_[24],
              _bUP_[25],
              _bUP_[26],
              _bUP_[27],
              _bUP_[28],
              _bUP_[29],
              _bUP_[30],
              _bUP_[31],
              _bUP_[32],
              _bUP_[33],
              _bUP_[34],
              _bUP_[35],
              _bUP_[36],
              _bUP_[37],
              _bUP_[38],
              _bUP_[39],
              _bUP_[40],
              _bUP_[41],
              _bUP_[42],
              _bUP_[43],
              _bUP_[44],
              Named$1,
              _bUP_[46],
              _bUP_[47],
              _bUP_[48],
              _bUP_[49],
              _bUP_[50],
              _bUP_[51],
              _bUP_[52],
              _bUP_[53],
              _bUP_[54],
              _bUP_[55],
              _bUP_[56],
              _bUP_[57],
              _bUP_[58],
              _bUP_[59],
              _bUP_[60],
              _bUP_[61],
              _bUP_[62],
              _bUP_[63],
              _bUP_[64],
              _bUP_[65],
              _bUP_[66],
              _bUP_[67],
              _bUP_[68],
              _bUP_[69],
              _bUP_[4],
              _bUP_[5],
              _bUP_[6],
              _bUP_[7],
              _bUP_[8],
              _bUP_[9],
              _bUP_[10],
              _bUP_[11],
              _bUP_[12],
              _bUP_[13],
              _bUP_[14],
              _bUP_[15],
              _bUP_[16],
              _bUP_[17],
              _bUP_[18],
              _bUP_[19],
              _bUP_[72],
              _bUP_[74],
              _bUP_[73],
              _bUP_[75],
              _bUP_[71]]}
    var
     _s6_=
      [0,
       [0,
        t_of_sexp$28,
        sexp_of_t$38,
        length$14,
        is_empty$12,
        iter$15,
        fold$12,
        fold_result$6,
        exists$11,
        for_all$11,
        count$11,
        sum$7,
        find$12,
        find_map$6,
        to_list$7,
        to_array$6,
        invariants$6,
        mem$12,
        add$10,
        remove$9,
        union$3,
        inter$3,
        diff$3,
        symmetric_diff$6,
        compare_direct$6,
        equal$14,
        is_subset$2,
        subset$2,
        Named$2,
        fold_until$6,
        fold_right$8,
        iter2$7,
        filter$12,
        partition_tf$9,
        elements$2,
        min_elt$10,
        min_elt_exn$6,
        max_elt$10,
        max_elt_exn$6,
        choose$2,
        choose_exn$2,
        split$6,
        group_by$2,
        find_exn$11,
        find_index$2,
        nth$8,
        remove_index$2,
        to_tree$7,
        to_sequence$8,
        merge_to_sequence$2,
        to_map$1,
        obs$7,
        shrinker$7,
        empty$10,
        singleton$10,
        union_list$2,
        of_list$9,
        of_array$3,
        of_sorted_array$6,
        of_sorted_array_unchecked$6,
        of_increasing_iterator_unchecked$6,
        stable_dedup_list$2,
        map$22,
        filter_map$11,
        of_tree$6,
        of_hash_set$2,
        of_hashtbl_keys$3,
        of_map_keys$1,
        gen$7],
       bin_t$26,
       bin_read_t$69,
       bin_read_t$70,
       bin_reader_t$26,
       bin_size_t$34,
       bin_write_t$34,
       bin_writer_t$26,
       bin_shape_t$31,
       compare$26,
       _ss_,
       sexp_of_t$37,
       length$12,
       is_empty$10,
       iter$12,
       fold$10,
       fold_result$4,
       exists$9,
       for_all$9,
       count$9,
       sum$5,
       find$10,
       find_map$4,
       to_list$5,
       to_array$4,
       invariants$4,
       mem$10,
       add$8,
       remove$7,
       union$1,
       inter$1,
       diff$1,
       symmetric_diff$4,
       compare_direct$4,
       equal$12,
       is_subset$0,
       subset$0,
       Named$1,
       fold_until$4,
       fold_right$6,
       iter2$5,
       filter$10,
       partition_tf$7,
       elements$0,
       min_elt$8,
       min_elt_exn$4,
       max_elt$8,
       max_elt_exn$4,
       choose$0,
       choose_exn$0,
       split$4,
       group_by$0,
       find_exn$9,
       find_index$0,
       nth$6,
       remove_index$0,
       to_tree$5,
       to_sequence$6,
       merge_to_sequence$0,
       to_map$0,
       obs$6,
       shrinker$6,
       _st_,
       _su_,
       _sv_,
       _sw_,
       _sx_,
       _sy_,
       _sz_,
       _sA_,
       _sB_,
       _sC_,
       _sD_,
       _sE_,
       _sF_,
       _sG_,
       _sH_,
       _sI_];
    function _s5_(Elt)
     {var
       sexp_of_t=Elt[2],
       include=caml_call1(Make,Elt),
       comparator=include[1],
       _bUN_=Make_plain_using_comparator$0([0,sexp_of_t,comparator]),
       _bUO_=_bUN_[75];
      return [0,
              _bUN_[1],
              [0,
               _bUO_[69],
               _bUO_[70],
               _bUO_[6],
               _bUO_[7],
               _bUO_[17],
               _bUO_[26],
               _bUO_[29],
               _bUO_[19],
               _bUO_[20],
               _bUO_[21],
               _bUO_[22],
               _bUO_[23],
               _bUO_[25],
               _bUO_[15],
               _bUO_[16],
               _bUO_[5],
               _bUO_[34],
               _bUO_[35],
               _bUO_[36],
               _bUO_[37],
               _bUO_[38],
               _bUO_[39],
               _bUO_[40],
               _bUO_[41],
               _bUO_[42],
               _bUO_[43],
               _bUO_[44],
               _bUO_[65],
               _bUO_[27],
               _bUO_[28],
               _bUO_[18],
               _bUO_[31],
               _bUO_[33],
               _bUO_[8],
               _bUO_[9],
               _bUO_[10],
               _bUO_[11],
               _bUO_[12],
               _bUO_[13],
               _bUO_[14],
               _bUO_[55],
               _bUO_[54],
               _bUO_[24],
               _bUO_[57],
               _bUO_[56],
               _bUO_[58],
               _bUO_[59],
               _bUO_[61],
               _bUO_[62],
               _bUO_[64],
               _bUO_[67],
               _bUO_[68],
               _bUO_[3],
               _bUO_[4],
               _bUO_[52],
               _bUO_[45],
               _bUO_[48],
               _bUO_[51],
               _bUO_[49],
               _bUO_[50],
               _bUO_[53],
               _bUO_[30],
               _bUO_[32],
               _bUO_[60],
               _bUO_[46],
               _bUO_[47],
               _bUO_[63],
               _bUO_[66],
               _bUO_[71]],
              _bUN_[70],
              _bUN_[71],
              _bUN_[20],
              _bUN_[21],
              _bUN_[22],
              _bUN_[23],
              _bUN_[24],
              _bUN_[25],
              _bUN_[26],
              _bUN_[27],
              _bUN_[28],
              _bUN_[29],
              _bUN_[30],
              _bUN_[31],
              _bUN_[32],
              _bUN_[33],
              _bUN_[34],
              _bUN_[35],
              _bUN_[36],
              _bUN_[37],
              _bUN_[38],
              _bUN_[39],
              _bUN_[40],
              _bUN_[41],
              _bUN_[42],
              _bUN_[43],
              _bUN_[44],
              _bUN_[45],
              _bUN_[46],
              _bUN_[47],
              _bUN_[48],
              _bUN_[49],
              _bUN_[50],
              _bUN_[51],
              _bUN_[52],
              _bUN_[53],
              _bUN_[54],
              _bUN_[55],
              _bUN_[56],
              _bUN_[57],
              _bUN_[58],
              _bUN_[59],
              _bUN_[60],
              _bUN_[61],
              _bUN_[62],
              _bUN_[63],
              _bUN_[64],
              _bUN_[65],
              _bUN_[66],
              _bUN_[67],
              _bUN_[68],
              _bUN_[69],
              _bUN_[4],
              _bUN_[5],
              _bUN_[6],
              _bUN_[7],
              _bUN_[8],
              _bUN_[9],
              _bUN_[10],
              _bUN_[11],
              _bUN_[12],
              _bUN_[13],
              _bUN_[14],
              _bUN_[15],
              _bUN_[16],
              _bUN_[17],
              _bUN_[18],
              _bUN_[19],
              _bUN_[72],
              _bUN_[74],
              _bUN_[73]]}
    var
     _s7_=
      [0,
       empty$9,
       singleton$9,
       union_list$1,
       of_list$8,
       of_array$2,
       of_sorted_array$5,
       of_sorted_array_unchecked$5,
       of_increasing_iterator_unchecked$5,
       stable_dedup_list$1,
       map$21,
       filter_map$10,
       of_tree$5,
       of_hash_set$0,
       of_hashtbl_keys$1,
       of_map_keys$0,
       gen$5],
     Core_kernel_Set=
      [0,
       compare$25,
       [0,
        sexp_of_t$35,
        Named$0,
        length$11,
        is_empty$9,
        iter$11,
        fold$9,
        fold_result$3,
        exists$8,
        for_all$8,
        count$8,
        sum$4,
        find$9,
        find_map$3,
        to_list$4,
        to_array$3,
        invariants$3,
        mem$9,
        add$7,
        remove$6,
        union$0,
        inter$0,
        diff$0,
        symmetric_diff$3,
        compare_direct$3,
        equal$11,
        is_subset,
        subset,
        fold_until$3,
        fold_right$5,
        iter2$4,
        filter$9,
        partition_tf$6,
        elements,
        min_elt$7,
        min_elt_exn$3,
        max_elt$7,
        max_elt_exn$3,
        choose,
        choose_exn,
        split$3,
        group_by,
        find_exn$8,
        find_index,
        nth$5,
        remove_index,
        to_tree$4,
        to_sequence$5,
        merge_to_sequence,
        to_map,
        obs_tree$0,
        shr_tree$0,
        empty$6,
        singleton$7,
        union_list,
        of_list$6,
        of_array$0,
        of_sorted_array$3,
        of_sorted_array_unchecked$3,
        of_increasing_iterator_unchecked$3,
        stable_dedup_list,
        map$19,
        filter_map$8,
        of_tree$3,
        of_hash_set,
        of_hashtbl_keys$0,
        of_map_keys,
        gen_tree$0],
       _s7_,
       invariants$5,
       comparator$3,
       empty$8,
       singleton$8,
       length$13,
       is_empty$11,
       mem$11,
       add$9,
       remove$8,
       union$2,
       union_list$0,
       inter$2,
       diff$2,
       symmetric_diff$5,
       compare_direct$5,
       hash_fold_direct$0,
       equal$13,
       exists$10,
       for_all$10,
       count$10,
       sum$6,
       find$11,
       find_map$5,
       find_exn$10,
       nth$7,
       find_index$1,
       remove_index$1,
       is_subset$1,
       subset$1,
       Base_Set[32],
       of_list$7,
       of_array$1,
       of_hash_set$1,
       of_hashtbl_keys$2,
       to_list$6,
       to_array$5,
       to_tree$6,
       of_tree$4,
       of_sorted_array$4,
       of_sorted_array_unchecked$4,
       of_increasing_iterator_unchecked$4,
       stable_dedup_list$0,
       map$20,
       filter_map$9,
       filter$11,
       fold$11,
       fold_result$5,
       fold_until$5,
       fold_right$7,
       iter$13,
       iter2$6,
       partition_tf$8,
       elements$1,
       min_elt$9,
       min_elt_exn$5,
       max_elt$9,
       max_elt_exn$5,
       choose$1,
       choose_exn$1,
       split$5,
       group_by$1,
       to_sequence$7,
       [0,
        _iB_[1],
        _iB_[2],
        _iB_[3],
        _iB_[4],
        _iB_[5],
        _iB_[6],
        _iB_[7],
        _iB_[8],
        _iB_[9],
        _iB_[11],
        _iB_[12]],
       merge_to_sequence$1,
       to_map$0,
       of_map_keys$0,
       gen$6,
       obs$6,
       shrinker$6,
       _s6_,
       _s5_,
       _s4_,
       _s3_,
       _s2_,
       _s1_,
       _s0_,
       _sZ_,
       _sY_];
    caml_register_global(7401,Core_kernel_Set,"Core_kernel__Set");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$122);
    caml_call1(Expect_test_collector[4][1],cst_src_comparable_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$123,cst$42);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$124);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Comparable_intf=[0];
    caml_register_global
     (7402,Core_kernel_Comparable_intf,"Core_kernel__Comparable_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$125);
    caml_call1(Expect_test_collector[4][1],cst_src_comparable_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$126,cst$43);
    function With_zero(_bUM_)
     {return caml_call1
              (Base_Comparable[8],
               [0,_bUM_[1],_bUM_[3],_bUM_[4],_bUM_[5],_bUM_[6],_bUM_[7]])}
    function Validate_with_zero(_bUL_)
     {return caml_call1(Base_Comparable[9],[0,_bUL_[1],_bUL_[3],_bUL_[4]])}
    function Map_and_set_binable_using_comparator(T)
     {var
       bin_t=T[1],
       bin_read_t=T[2],
       bin_read_t$0=T[3],
       bin_reader_t=T[4],
       bin_size_t=T[5],
       bin_write_t=T[6],
       bin_writer_t=T[7],
       bin_shape_t=T[8],
       compare=T[9],
       t_of_sexp=T[10],
       sexp_of_t=T[11],
       comparator=T[12],
       Map=_r4_([0,T[1],T[2],T[3],T[4],T[5],T[6],T[7],T[8],T[10],T[11],T[12]]),
       Set=_s0_([0,T[1],T[2],T[3],T[4],T[5],T[6],T[7],T[8],T[10],T[11],T[12]]);
      return [0,
              bin_t,
              bin_read_t,
              bin_read_t$0,
              bin_reader_t,
              bin_size_t,
              bin_write_t,
              bin_writer_t,
              bin_shape_t,
              compare,
              t_of_sexp,
              sexp_of_t,
              comparator,
              Map,
              Set]}
    function Make_plain_using_comparator$1(T)
     {var
       M=caml_call1(Base_Comparable[5],T),
       equal=M[7],
       compare=M[8],
       min=M[9],
       max=M[10],
       ascending=M[11],
       descending=M[12],
       between=M[13],
       clamp_exn=M[14],
       clamp=M[15],
       comparator=M[16],
       validate_lbound=M[17],
       validate_ubound=M[18],
       validate_bound=M[19],
       Replace_polymorphic_compare=
        [0,M[1],M[2],M[3],M[4],M[5],M[6],M[7],M[8],M[9],M[10]],
       _bUF_=M[1],
       _bUG_=M[2],
       _bUH_=M[3],
       _bUI_=M[4],
       _bUJ_=M[5],
       _bUK_=M[6],
       Map=_r8_(T),
       Set=_s2_(T);
      return [0,
              _bUF_,
              _bUG_,
              _bUH_,
              _bUI_,
              _bUJ_,
              _bUK_,
              equal,
              compare,
              min,
              max,
              ascending,
              descending,
              between,
              clamp_exn,
              clamp,
              comparator,
              validate_lbound,
              validate_ubound,
              validate_bound,
              Replace_polymorphic_compare,
              Map,
              Set]}
    function Make_plain$1(T)
     {var sexp_of_t=T[2],include=caml_call1(Make,T),comparator=include[1];
      return Make_plain_using_comparator$1([0,sexp_of_t,comparator])}
    function Make_using_comparator$1(T)
     {var
       M=caml_call1(Base_Comparable[5],[0,T[2],T[3]]),
       equal=M[7],
       compare=M[8],
       min=M[9],
       max=M[10],
       ascending=M[11],
       descending=M[12],
       between=M[13],
       clamp_exn=M[14],
       clamp=M[15],
       comparator=M[16],
       validate_lbound=M[17],
       validate_ubound=M[18],
       validate_bound=M[19],
       Replace_polymorphic_compare=
        [0,M[1],M[2],M[3],M[4],M[5],M[6],M[7],M[8],M[9],M[10]],
       _bUz_=M[1],
       _bUA_=M[2],
       _bUB_=M[3],
       _bUC_=M[4],
       _bUD_=M[5],
       _bUE_=M[6],
       Map=_r6_(T),
       Set=_s1_(T);
      return [0,
              _bUz_,
              _bUA_,
              _bUB_,
              _bUC_,
              _bUD_,
              _bUE_,
              equal,
              compare,
              min,
              max,
              ascending,
              descending,
              between,
              clamp_exn,
              clamp,
              comparator,
              validate_lbound,
              validate_ubound,
              validate_bound,
              Replace_polymorphic_compare,
              Map,
              Set]}
    function Make$2(T)
     {var
       t_of_sexp=T[2],
       sexp_of_t=T[3],
       include=caml_call1(Make,[0,T[1],T[3]]),
       comparator=include[1];
      return Make_using_comparator$1([0,t_of_sexp,sexp_of_t,comparator])}
    function Make_binable_using_comparator$1(T)
     {var
       bin_t=T[1],
       bin_read_t=T[2],
       bin_read_t$0=T[3],
       bin_reader_t=T[4],
       bin_size_t=T[5],
       bin_write_t=T[6],
       bin_writer_t=T[7],
       bin_shape_t=T[8],
       t_of_sexp=T[9],
       sexp_of_t=T[10],
       M=caml_call1(Base_Comparable[5],[0,T[10],T[11]]),
       equal=M[7],
       compare=M[8],
       min=M[9],
       max=M[10],
       ascending=M[11],
       descending=M[12],
       between=M[13],
       clamp_exn=M[14],
       clamp=M[15],
       comparator=M[16],
       validate_lbound=M[17],
       validate_ubound=M[18],
       validate_bound=M[19],
       Replace_polymorphic_compare=
        [0,M[1],M[2],M[3],M[4],M[5],M[6],M[7],M[8],M[9],M[10]],
       _bUt_=M[1],
       _bUu_=M[2],
       _bUv_=M[3],
       _bUw_=M[4],
       _bUx_=M[5],
       _bUy_=M[6],
       Map=_r4_(T),
       Set=_s0_(T);
      return [0,
              bin_t,
              bin_read_t,
              bin_read_t$0,
              bin_reader_t,
              bin_size_t,
              bin_write_t,
              bin_writer_t,
              bin_shape_t,
              t_of_sexp,
              sexp_of_t,
              M,
              _bUt_,
              _bUu_,
              _bUv_,
              _bUw_,
              _bUx_,
              _bUy_,
              equal,
              compare,
              min,
              max,
              ascending,
              descending,
              between,
              clamp_exn,
              clamp,
              comparator,
              validate_lbound,
              validate_ubound,
              validate_bound,
              Replace_polymorphic_compare,
              Map,
              Set]}
    function Inherit(C,T)
     {var t_of_sexp=T[1],sexp_of_t=T[2];
      function compare(t$0,t)
       {var _bUr_=caml_call1(T[3],t),_bUs_=caml_call1(T[3],t$0);
        return caml_call2(C[1],_bUs_,_bUr_)}
      return Make$2([0,compare,t_of_sexp,sexp_of_t])}
    var lexicographic=Base_Comparable[1],lift=Base_Comparable[2];
    function Make$3(X)
     {var Map=caml_call1(_r2_[1][1],X),Set=caml_call1(_sY_[1][1],X);
      return [0,Map,Set]}
    var V1$12=[0,Make$3],Stable$2=[0,V1$12];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$127);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var _s8_=Base_Comparable[7];
    function _s9_(_bUq_){return caml_call1(_s8_,[0,_bUq_[1],_bUq_[3]])}
    function _s__(T)
     {var
       t_of_sexp=T[1],
       sexp_of_t=T[2],
       include=caml_call1(Base_Comparable[6],[0,T[2]]),
       _bUk_=include[1],
       _bUl_=include[2],
       _bUm_=include[3],
       _bUn_=include[4],
       _bUo_=include[5],
       _bUp_=include[6],
       equal=include[7],
       compare=include[8],
       min=include[9],
       max=include[10],
       ascending=include[11],
       descending=include[12],
       between=include[13],
       clamp_exn=include[14],
       clamp=include[15],
       comparator=include[16],
       validate_lbound=include[17],
       validate_ubound=include[18],
       validate_bound=include[19],
       Replace_polymorphic_compare=
        [0,_bUk_,_bUl_,_bUm_,_bUn_,_bUo_,_bUp_,equal,compare,min,max],
       Map=_r6_([0,t_of_sexp,sexp_of_t,comparator]),
       Set=_s1_([0,t_of_sexp,sexp_of_t,comparator]);
      return [0,
              _bUk_,
              _bUl_,
              _bUm_,
              _bUn_,
              _bUo_,
              _bUp_,
              equal,
              compare,
              min,
              max,
              ascending,
              descending,
              between,
              clamp_exn,
              clamp,
              comparator,
              validate_lbound,
              validate_ubound,
              validate_bound,
              Replace_polymorphic_compare,
              Map,
              Set]}
    function _s$_(_bUi_)
     {var _bUj_=Map_and_set_binable_using_comparator(_bUi_);
      return [0,_bUj_[12],_bUj_[13],_bUj_[14]]}
    function _ta_(T)
     {var
       bin_t=T[1],
       bin_read_t=T[2],
       bin_read_t$0=T[3],
       bin_reader_t=T[4],
       bin_size_t=T[5],
       bin_write_t=T[6],
       bin_writer_t=T[7],
       bin_shape_t=T[8],
       compare=T[9],
       t_of_sexp=T[10],
       sexp_of_t=T[11],
       include=caml_call1(Make,[0,T[9],T[11]]),
       comparator=include[1],
       _bUh_=
        Map_and_set_binable_using_comparator
         ([0,
           bin_t,
           bin_read_t,
           bin_read_t$0,
           bin_reader_t,
           bin_size_t,
           bin_write_t,
           bin_writer_t,
           bin_shape_t,
           compare,
           t_of_sexp,
           sexp_of_t,
           comparator]);
      return [0,_bUh_[12],_bUh_[13],_bUh_[14]]}
    function _tb_(M,X)
     {var
       equal=M[7],
       compare=M[8],
       min=M[9],
       max=M[10],
       ascending=M[11],
       descending=M[12],
       between=M[13],
       clamp_exn=M[14],
       clamp=M[15],
       comparator=M[16],
       validate_lbound=M[17],
       validate_ubound=M[18],
       validate_bound=M[19],
       bin_t=X[1],
       bin_read_t=X[2],
       bin_read_t$0=X[3],
       bin_reader_t=X[4],
       bin_size_t=X[5],
       bin_write_t=X[6],
       bin_writer_t=X[7],
       bin_shape_t=X[8],
       t_of_sexp=X[9],
       sexp_of_t=X[10],
       Replace_polymorphic_compare=
        [0,M[1],M[2],M[3],M[4],M[5],M[6],M[7],M[8],M[9],M[10]],
       _bUb_=M[1],
       _bUc_=M[2],
       _bUd_=M[3],
       _bUe_=M[4],
       _bUf_=M[5],
       _bUg_=M[6],
       Map=
        _r4_
         ([0,
           bin_t,
           bin_read_t,
           bin_read_t$0,
           bin_reader_t,
           bin_size_t,
           bin_write_t,
           bin_writer_t,
           bin_shape_t,
           t_of_sexp,
           sexp_of_t,
           comparator]),
       Set=
        _s0_
         ([0,
           bin_t,
           bin_read_t,
           bin_read_t$0,
           bin_reader_t,
           bin_size_t,
           bin_write_t,
           bin_writer_t,
           bin_shape_t,
           t_of_sexp,
           sexp_of_t,
           comparator]);
      return [0,
              _bUb_,
              _bUc_,
              _bUd_,
              _bUe_,
              _bUf_,
              _bUg_,
              equal,
              compare,
              min,
              max,
              ascending,
              descending,
              between,
              clamp_exn,
              clamp,
              validate_lbound,
              validate_ubound,
              validate_bound,
              Replace_polymorphic_compare,
              comparator,
              Map,
              Set]}
    function _tc_(M,X)
     {var
       equal=M[7],
       compare=M[8],
       min=M[9],
       max=M[10],
       ascending=M[11],
       descending=M[12],
       between=M[13],
       clamp_exn=M[14],
       clamp=M[15],
       comparator=M[16],
       validate_lbound=M[17],
       validate_ubound=M[18],
       validate_bound=M[19],
       t_of_sexp=X[1],
       sexp_of_t=X[2],
       Replace_polymorphic_compare=
        [0,M[1],M[2],M[3],M[4],M[5],M[6],M[7],M[8],M[9],M[10]],
       _bT7_=M[1],
       _bT8_=M[2],
       _bT9_=M[3],
       _bT__=M[4],
       _bT$_=M[5],
       _bUa_=M[6],
       Map=_r6_([0,t_of_sexp,sexp_of_t,comparator]),
       Set=_s1_([0,t_of_sexp,sexp_of_t,comparator]);
      return [0,
              _bT7_,
              _bT8_,
              _bT9_,
              _bT__,
              _bT$_,
              _bUa_,
              equal,
              compare,
              min,
              max,
              ascending,
              descending,
              between,
              clamp_exn,
              clamp,
              comparator,
              validate_lbound,
              validate_ubound,
              validate_bound,
              Replace_polymorphic_compare,
              Map,
              Set]}
    function _td_(_bT5_)
     {var _bT6_=Make_binable_using_comparator$1(_bT5_);
      return [0,
              _bT6_[12],
              _bT6_[13],
              _bT6_[14],
              _bT6_[15],
              _bT6_[16],
              _bT6_[17],
              _bT6_[18],
              _bT6_[19],
              _bT6_[20],
              _bT6_[21],
              _bT6_[22],
              _bT6_[23],
              _bT6_[24],
              _bT6_[25],
              _bT6_[26],
              _bT6_[28],
              _bT6_[29],
              _bT6_[30],
              _bT6_[31],
              _bT6_[27],
              _bT6_[32],
              _bT6_[33]]}
    function _te_(T)
     {var
       bin_t=T[1],
       bin_read_t=T[2],
       bin_read_t$0=T[3],
       bin_reader_t=T[4],
       bin_size_t=T[5],
       bin_write_t=T[6],
       bin_writer_t=T[7],
       bin_shape_t=T[8],
       t_of_sexp=T[10],
       sexp_of_t=T[11],
       include=caml_call1(Make,[0,T[9],T[11]]),
       comparator=include[1],
       _bT4_=
        Make_binable_using_comparator$1
         ([0,
           bin_t,
           bin_read_t,
           bin_read_t$0,
           bin_reader_t,
           bin_size_t,
           bin_write_t,
           bin_writer_t,
           bin_shape_t,
           t_of_sexp,
           sexp_of_t,
           comparator]);
      return [0,
              _bT4_[12],
              _bT4_[13],
              _bT4_[14],
              _bT4_[15],
              _bT4_[16],
              _bT4_[17],
              _bT4_[18],
              _bT4_[19],
              _bT4_[20],
              _bT4_[21],
              _bT4_[22],
              _bT4_[23],
              _bT4_[24],
              _bT4_[25],
              _bT4_[26],
              _bT4_[28],
              _bT4_[29],
              _bT4_[30],
              _bT4_[31],
              _bT4_[27],
              _bT4_[32],
              _bT4_[33]]}
    var
     Core_kernel_Comparable=
      [0,
       lexicographic,
       lift,
       Inherit,
       Make_plain$1,
       Make$2,
       Make_plain_using_comparator$1,
       Make_using_comparator$1,
       _te_,
       _td_,
       _tc_,
       _tb_,
       _ta_,
       _s$_,
       _s__,
       _s9_,
       With_zero,
       Validate_with_zero,
       Stable$2];
    caml_register_global
     (7403,Core_kernel_Comparable,"Core_kernel__Comparable");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$128);
    caml_call1(Expect_test_collector[4][1],cst_src_list_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$129,cst$44);
    var _tf_=_s6_[71];
    function stable_dedup_staged(compare)
     {function t_of_sexp(param){throw [0,Assert_failure,_tg_]}
      function sexp_of_t(param){throw [0,Assert_failure,_th_]}
      var _bT3_=_s4_([0,compare,t_of_sexp,sexp_of_t])[62];
      return caml_call1(Base_Staged[1],_bT3_)}
    var
     Duplicate_found=
      [248,cst_Core_kernel_List_Duplicate_found,caml_fresh_oo_id(0)];
    function _ti_(param)
     {if(param[1] === Duplicate_found)
       {var
         v1=param[3],
         v0$0=param[2],
         v0=caml_call1(v0$0,0),
         v1$0=caml_call1(Base_String[24],v1);
        return [1,[0,_tj_,[0,v0,[0,v1$0,0]]]]}
      throw [0,Assert_failure,_tk_]}
    caml_call3(Sexplib0_Sexp_conv[51][2],0,Duplicate_found,_ti_);
    function exn_if_dup(compare,opt,t,to_sexp)
     {if(opt)var sth=opt[1],context=sth;else var context=cst_exn_if_dup;
      var match=caml_call2(find_a_dup,compare,t);
      if(match)
       {var dup=match[1];
        throw [0,
               Duplicate_found,
               function(param){return caml_call1(to_sexp,dup)},
               context]}
      return 0}
    function slice$1(a,start,stop){return slice(length$4,sub$3,a,start,stop)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$130);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_List=
      [0,
       bin_t$20,
       bin_read_t$58,
       bin_read_t$57,
       bin_reader_t$20,
       bin_size_t$28,
       bin_write_t$28,
       bin_writer_t$20,
       bin_shape_t$25,
       typerep_of_t$1,
       _oP_,
       [0,
        Assoc[8],
        Assoc[6],
        Assoc[5],
        Assoc[7],
        Assoc[2],
        Assoc[3],
        Assoc[4],
        Assoc[1],
        Assoc[9],
        Assoc[10],
        Assoc[11],
        Assoc[12],
        Assoc[13],
        Assoc[14],
        Assoc[15],
        Assoc[16],
        Assoc[17],
        Assoc[18]],
       compare$19,
       hash_fold_t$12,
       t_of_sexp$23,
       sexp_of_t$25,
       mem$2,
       length$4,
       is_empty$2,
       iter$2,
       fold$2,
       fold_result$1,
       fold_until$1,
       exists$1,
       for_all$1,
       sum$2,
       find$2,
       find_map$1,
       to_list$2,
       to_array$1,
       min_elt$1,
       max_elt$1,
       _o2_,
       _o1_,
       Monad_infix$1,
       bind$2,
       return$4,
       join$1,
       ignore_m$1,
       all$0,
       all_unit$0,
       all_ignore$0,
       Let_syntax$1,
       Or_unequal_lengths,
       of_list$4,
       nth$0,
       nth_exn$0,
       rev,
       rev_append,
       unordered_append,
       rev_map,
       fold_left,
       iter2_exn$0,
       iter2,
       rev_map2_exn,
       rev_map2,
       fold2_exn$0,
       fold2,
       for_alli$1,
       for_all2_exn$0,
       for_all2,
       existsi$1,
       exists2_exn$0,
       exists2,
       filter$2,
       rev_filter,
       filteri$1,
       partition_map,
       partition3_map,
       partition_tf$0,
       split_n$0,
       sort$0,
       stable_sort$0,
       merge$1,
       hd$0,
       tl$0,
       hd_exn$0,
       tl_exn,
       findi$1,
       find_exn$2,
       find_map_exn$0,
       find_mapi$1,
       find_mapi_exn$0,
       append$1,
       map$11,
       folding_map$1,
       folding_mapi$1,
       fold_map$0,
       fold_mapi$0,
       concat_map$1,
       concat_mapi$1,
       map2_exn$0,
       map2,
       rev_map3_exn,
       rev_map3,
       map3_exn,
       map3,
       rev_map_append,
       fold_right$0,
       unzip$0,
       unzip3,
       zip$1,
       zip_exn$0,
       mapi$1,
       rev_mapi,
       iteri$1,
       foldi$1,
       reduce_exn$1,
       reduce$1,
       reduce_balanced,
       reduce_balanced_exn,
       group$34,
       groupi,
       chunks_of,
       last$0,
       last_exn,
       is_prefix,
       find_consecutive_duplicate$1,
       remove_consecutive_duplicates$0,
       dedup_and_sort,
       dedup,
       find_a_dup,
       contains_dup,
       find_all_dups,
       count$1,
       counti$1,
       range$1,
       range$0,
       init$1,
       rev_filter_map,
       rev_filter_mapi,
       filter_map$2,
       filter_mapi$1,
       filter_opt$1,
       sub$3,
       take$0,
       drop$0,
       take_while$0,
       drop_while$0,
       split_while,
       concat$1,
       concat_no_order,
       cons,
       cartesian_product$1,
       permute$0,
       random_element$0,
       random_element_exn$0,
       is_sorted$0,
       is_sorted_strictly$0,
       equal$4,
       Infix$0,
       transpose$0,
       transpose_exn$0,
       intersperse$0,
       _tf_,
       stable_dedup_staged,
       Duplicate_found,
       exn_if_dup,
       slice$1,
       _o3_,
       _o__,
       _pc_,
       _pd_,
       to_string$0,
       _o$_,
       _pa_,
       _pb_];
    caml_register_global(7405,Core_kernel_List,"Core_kernel__List");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$131);
    caml_call1(Expect_test_collector[4][1],cst_src_option_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$132,cst$45);
    var
     _tl_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$39),
     _tm_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_option_ml_3_12),
     _tn_=caml_call1(_c9_,caml_call2(Bin_prot_Shape[15],_tm_,_tl_)),
     _to_=[0,caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$40),0],
     _tp_=
      [0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$83),_to_,_tn_],0],
     _tq_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_option_ml_3_0),
     group$41=caml_call2(Bin_prot_Shape[6],_tq_,_tp_);
    function bin_shape_t$32(a)
     {var _bT2_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$84);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$41,_bT2_),[0,a,0])}
    function bin_size_t$35(size_of_a,v){return caml_call2(_bk_,size_of_a,v)}
    function bin_write_t$35(write_a,buf,pos,v)
     {return caml_call3(caml_call1(_c$_,write_a),buf,pos,v)}
    function bin_writer_t$27(bin_writer_a)
     {function _bTY_(v)
       {var _bTZ_=bin_writer_a[2];
        return function(_bT0_,_bT1_)
         {return bin_write_t$35(_bTZ_,v,_bT0_,_bT1_)}}
      return [0,function(v){return bin_size_t$35(bin_writer_a[1],v)},_bTY_]}
    function bin_read_t$71(of_a,buf,pos_ref,vint)
     {return caml_call3(caml_call1(_dc_,of_a),buf,pos_ref,vint)}
    function bin_read_t$72(of_a,buf,pos_ref)
     {return caml_call2(caml_call1(_db_,of_a),buf,pos_ref)}
    function bin_reader_t$27(bin_reader_a)
     {function _bTX_(buf,pos_ref,vtag)
       {return bin_read_t$71(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$72(bin_reader_a[1],buf,pos_ref)},
              _bTX_]}
    function bin_t$27(bin_a)
     {var _bTV_=bin_reader_t$27(bin_a[3]),_bTW_=bin_writer_t$27(bin_a[2]);
      return [0,bin_shape_t$32(bin_a[1]),_bTW_,_bTV_]}
    var
     Typename_of_t$2=caml_call1(Typerep_lib_Make_typename[2],[0,name$11]),
     typename_of_t$1=Typename_of_t$2[2];
    function typerep_of_t$2(of_a)
     {var name_of_t=caml_call1(Typename_of_t$2[1],of_a);
      return [9,
              [0,
               name_of_t,
               [0,
                [246,
                 function(_bTU_){return caml_call1(typerep_of_option,of_a)}]]]]}
    var
     compare$27=include$11[1],
     hash_fold_t$13=include$11[2],
     t_of_sexp$29=include$11[3],
     sexp_of_t$39=include$11[4],
     mem$13=include$11[5],
     length$15=include$11[6],
     is_empty$13=include$11[7],
     iter$16=include$11[8],
     fold$13=include$11[9],
     fold_result$7=include$11[10],
     fold_until$7=include$11[11],
     exists$12=include$11[12],
     for_all$12=include$11[13],
     count$12=include$11[14],
     sum$8=include$11[15],
     find$13=include$11[16],
     find_map$7=include$11[17],
     to_list$8=include$11[18],
     to_array$7=include$11[19],
     min_elt$11=include$11[20],
     max_elt$11=include$11[21],
     equal$15=include$11[22],
     invariant$2=include$11[23],
     Monad_infix$2=include$11[26],
     bind$3=include$11[27],
     return$5=include$11[28],
     map$23=include$11[29],
     join$2=include$11[30],
     ignore_m$2=include$11[31],
     all$2=include$11[32],
     all_unit$1=include$11[33],
     all_ignore$1=include$11[34],
     Let_syntax$2=include$11[35],
     is_none=include$11[36],
     is_some=include$11[37],
     value_map$0=include$11[38],
     map2$0=include$11[39],
     call=include$11[40],
     value$0=include$11[41],
     value_exn=include$11[42],
     some=include$11[43],
     both$0=include$11[44],
     first_some=include$11[45],
     some_if=include$11[46],
     merge$7=include$11[47],
     filter$13=include$11[48],
     try_with=include$11[49],
     validate$4=include$11[50],
     _tr_=include$11[24],
     _ts_=include$11[25],
     include$41=caml_call1(Derived,[0,compare$27,sexp_of_t$39]),
     _tt_=include$41[1];
    function gen$8(elt_gen)
     {var
       _bTS_=[0,caml_call2(_nQ_[5][2],elt_gen,return$5),0],
       _bTT_=[0,caml_call1(_nQ_[34],0),_bTS_];
      return caml_call1(_nQ_[37],_bTT_)}
    function obs$8(elt_obs)
     {function _bTP_(param)
       {if(param){var x=param[1];return [0,66,x]}return _tu_}
      var
       _bTQ_=caml_call1(_nP_[18],0),
       _bTR_=caml_call2(_nP_[11],_bTQ_,elt_obs);
      return caml_call2(_nP_[19],_bTR_,_bTP_)}
    function shrinker$8(elt_shr)
     {function shrinker(param)
       {if(param)
         {var
           elt=param[1],
           _bTN_=function(v){return [0,v]},
           _bTO_=caml_call2(map$0,caml_call2(_nO_[1],elt_shr,elt),_bTN_);
          return caml_call2(append,caml_call1(singleton,0),_bTO_)}
        return empty}
      return caml_call1(_nO_[2],shrinker)}
    function _tv_(param)
     {var
       _bTI_=caml_call1(_hR_,caml_call1(singleton,1)),
       t1=caml_call1(_nO_[2],_bTI_);
      function _bTJ_(param)
       {var
         _bTM_=shrinker$8(t1),
         got=caml_call1(to_list$0,caml_call2(_nO_[1],_bTM_,0)),
         sexpifier=caml_call1(_I_,caml_call1(_R_,sexp_of_t$0)),
         expect=0,
         equal=0,
         message=0,
         here=0;
        function comparator(a_005,b_006)
         {return caml_call3
                  (_F_,
                   function(a_007,b_008)
                    {return caml_call3(_O_,_t_,a_007,b_008)},
                   a_005,
                   b_006)}
        return caml_call8
                (Ppx_assert_lib_Runtime[3],
                 pos$42,
                 sexpifier,
                 comparator,
                 here,
                 message,
                 equal,
                 expect,
                 got)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_result_int_option_list_Sequence,
        0,
        cst_src_option_ml$0,
        48,
        6,
        150,
        _bTJ_);
      function _bTK_(param)
       {var
         sort=
          caml_call1
           (sort$0,
            function(a_011,b_012){return caml_call3(_O_,_t_,a_011,b_012)}),
         expect=caml_call1(sort,_tw_),
         _bTL_=shrinker$8(t1),
         got=
          caml_call1
           (sort,caml_call1(to_list$0,caml_call2(_nO_[1],_bTL_,_tx_))),
         sexpifier=caml_call1(_I_,caml_call1(_R_,sexp_of_t$0)),
         equal=0,
         message=0,
         here=0;
        function comparator(a_015,b_016)
         {return caml_call3
                  (_F_,
                   function(a_017,b_018)
                    {return caml_call3(_O_,_t_,a_017,b_018)},
                   a_015,
                   b_016)}
        return caml_call8
                (Ppx_assert_lib_Runtime[3],
                 pos$43,
                 sexpifier,
                 comparator,
                 here,
                 message,
                 equal,
                 expect,
                 got)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_result_int_option_list_expect_results,
        0,
        cst_src_option_ml$1,
        53,
        6,
        351,
        _bTK_);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst_shrinker$0,
      0,
      cst_src_option_ml$2,
      43,
      2,
      629,
      _tv_);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$133);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Option=
      [0,
       bin_t$27,
       bin_read_t$72,
       bin_read_t$71,
       bin_reader_t$27,
       bin_size_t$35,
       bin_write_t$35,
       bin_writer_t$27,
       bin_shape_t$32,
       typerep_of_t$2,
       typename_of_t$1,
       compare$27,
       hash_fold_t$13,
       t_of_sexp$29,
       sexp_of_t$39,
       mem$13,
       length$15,
       is_empty$13,
       iter$16,
       fold$13,
       fold_result$7,
       fold_until$7,
       exists$12,
       for_all$12,
       count$12,
       sum$8,
       find$13,
       find_map$7,
       to_list$8,
       to_array$7,
       min_elt$11,
       max_elt$11,
       equal$15,
       invariant$2,
       _tr_,
       _ts_,
       Monad_infix$2,
       bind$3,
       return$5,
       map$23,
       join$2,
       ignore_m$2,
       all$2,
       all_unit$1,
       all_ignore$1,
       Let_syntax$2,
       is_none,
       is_some,
       value_map$0,
       map2$0,
       call,
       value$0,
       value_exn,
       some,
       both$0,
       first_some,
       some_if,
       merge$7,
       filter$13,
       try_with,
       validate$4,
       _tt_,
       gen$8,
       obs$8,
       shrinker$8];
    caml_register_global(7406,Core_kernel_Option,"Core_kernel__Option");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$134);
    caml_call1(Expect_test_collector[4][1],cst_src_union_find_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$135,cst$46);
    function invariant$3(t)
     {var t$0=t,depth=0;
      for(;;)
       {var _bTH_=t$0[1];
        if(0 === _bTH_[0])
         {var
           t$1=_bTH_[1],
           depth$0=caml_call2(_ah_,depth,1),
           t$0=t$1,
           depth=depth$0;
          continue}
        var r=_bTH_[1];
        if(caml_call2(_aB_,depth,r[2]))return 0;
        throw [0,Assert_failure,_ty_]}}
    function create$9(v){return [0,[1,[0,v,0]]]}
    function representative(t$1)
     {var _bTG_=t$1[1];
      if(0 === _bTG_[0])
       {var t$2=_bTG_[1],t=t$2,inner_node=_bTG_,inner=t$1,descendants=0;
        for(;;)
         {var _bTF_=t[1];
          if(0 === _bTF_[0])
           {var
             t$0=_bTF_[1],
             descendants$0=[0,inner,descendants],
             inner_node=_bTF_,
             inner=t,
             t=t$0,
             descendants=descendants$0;
            continue}
          var r=_bTF_[1];
          caml_call2
           (iter$2,descendants,function(t){t[1] = inner_node;return 0});
          return [0,t,r]}}
      var r$0=_bTG_[1];
      return [0,t$1,r$0]}
    function root(t){return caml_call1(_aU_,representative(t))}
    function get$1(t){return root(t)[1]}
    function set$5(t,v){root(t)[1] = v;return 0}
    function same_class(t1,t2)
     {var _bTE_=root(t2);return root(t1) === _bTE_?1:0}
    function union$4(t1,t2)
     {var
       match=representative(t1),
       r1=match[2],
       t1$0=match[1],
       match$0=representative(t2),
       r2=match$0[2],
       t2$0=match$0[1];
      if(r1 === r2)return 0;
      var n1=r1[2],n2=r2[2];
      if(caml_call2(_aA_,n1,n2)){t1$0[1] = [0,t2$0];return 0}
      t2$0[1] = [0,t1$0];
      var
       _bTC_=caml_call2(_aD_,n1,n2),
       _bTD_=_bTC_?(r1[2] = caml_call2(_ah_,r1[2],1),0):_bTC_;
      return _bTD_}
    function _tz_(param)
     {function is_compressed(t)
       {invariant$3(t);
        var _bTB_=t[1];
        if(0 === _bTB_[0]){var t$0=_bTB_[1];return 0 === t$0[1][0]?0:1}
        return 1}
      function create(x)
       {var t=create$9(x);
        if(is_compressed(t))return t;
        throw [0,Assert_failure,_tA_]}
      function union(t1,t2)
       {union$4(t1,t2);
        invariant$3(t1);
        invariant$3(t2);
        if(! is_compressed(t1))
         if(! is_compressed(t2))throw [0,Assert_failure,_tB_];
        return 0}
      function get(t)
       {var x=get$1(t);
        if(is_compressed(t))return x;
        throw [0,Assert_failure,_tC_]}
      function set(t,x)
       {set$5(t,x);if(is_compressed(t))return 0;throw [0,Assert_failure,_tD_]}
      function same_class$0(t1,t2)
       {var b=same_class(t1,t2);
        if(is_compressed(t1))
         {if(is_compressed(t2))return b;throw [0,Assert_failure,_tE_]}
        throw [0,Assert_failure,_tF_]}
      function _bTu_(param)
       {var a=create(1),b=create(2);
        if(same_class$0(a,b))throw [0,Assert_failure,_tG_];
        union(a,b);
        if(same_class$0(a,b))
         {var c=create(3);
          if(same_class$0(a,c))throw [0,Assert_failure,_tH_];
          if(same_class$0(b,c))throw [0,Assert_failure,_tI_];
          union(b,c);
          if(same_class$0(a,c))
           {if(same_class$0(b,c))
             {var d=create(1),e=create(2),f=create(3);
              union(d,e);
              union(d,f);
              if(same_class$0(d,e))
               {if(same_class$0(d,f))
                 {if(same_class$0(e,f))return 0;throw [0,Assert_failure,_tJ_]}
                throw [0,Assert_failure,_tK_]}
              throw [0,Assert_failure,_tL_]}
            throw [0,Assert_failure,_tM_]}
          throw [0,Assert_failure,_tN_]}
        throw [0,Assert_failure,_tO_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_union,
        0,
        cst_src_union_find_ml$0,
        154,
        4,
        547,
        _bTu_);
      function _bTv_(param)
       {var a=create(1),b=create(2);
        union(a,b);
        var c=create(1),d=create(2);
        union(c,d);
        union(b,d);
        if(same_class$0(a,c))return 0;
        throw [0,Assert_failure,_tP_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_union$0,
        0,
        cst_src_union_find_ml$1,
        176,
        4,
        212,
        _bTv_);
      function _bTw_(param)
       {var a=create(1),b=create(2);
        if(caml_call2(_aD_,get(a),1))
         {if(caml_call2(_aD_,get(b),2))
           {union(a,b);
            set(a,3);
            if(caml_call2(_aD_,get(a),3))
             {if(caml_call2(_aD_,get(b),3))return 0;
              throw [0,Assert_failure,_tQ_]}
            throw [0,Assert_failure,_tR_]}
          throw [0,Assert_failure,_tS_]}
        throw [0,Assert_failure,_tT_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_set_get,
        0,
        cst_src_union_find_ml$2,
        187,
        4,
        216,
        _bTw_);
      function _bTx_(param)
       {var
         ts=caml_call2(init$1,1e3,create),
         t=caml_call2(reduce_exn$1,ts,function(a,b){union(a,b);return b}),
         max_rank=
          caml_call3
           (fold$2,
            ts,
            0,
            function(acc,t){return caml_call2(_aK_,acc,root(t)[2])});
        if(caml_call2(_aD_,max_rank,1))
         {set(t,42);
          if
           (caml_call2
             (for_all$1,
              ts,
              function(t$0)
               {var _bTA_=same_class$0(t,t$0);
                return _bTA_?caml_call2(_aD_,get(t$0),42):_bTA_}))
           return 0;
          throw [0,Assert_failure,_tU_]}
        throw [0,Assert_failure,_tV_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_compressed,
        0,
        cst_src_union_find_ml$3,
        198,
        4,
        366,
        _bTx_);
      function _bTy_(param)
       {var ts=caml_call2(init$0,1e3,create);
        function sub(i,j)
         {if(caml_call2(_aD_,i,j))return caml_check_bound(ts,i)[i + 1];
          var k=caml_call2(_ak_,caml_call2(_ah_,i,j),2),a=sub(i,k);
          if(caml_call2(_aE_,caml_call2(_ah_,k,1),j))return a;
          var b=sub(caml_call2(_ah_,k,1),j);
          union(a,b);
          return a}
        var t=sub(0,999);
        caml_call2(iter$0,ts,invariant$3);
        if(caml_call2(exists$0,ts,function(t){return 1 - is_compressed(t)}))
         {var
           max_rank=
            caml_call3
             (fold$1,
              ts,
              0,
              function(acc,t){return caml_call2(_aK_,acc,root(t)[2])});
          if
           (caml_call2
             (_aB_,
              max_rank,
              Math.ceil
               (caml_call2(_aP_,6.90775527898213682,0.693147180559945286))
              |
              0))
           {set(t,42);
            if
             (caml_call2
               (for_all$0,
                ts,
                function(t$0)
                 {var _bTz_=same_class$0(t,t$0);
                  return _bTz_?caml_call2(_aD_,get(t$0),42):_bTz_}))
             {if(caml_call2(for_all$0,ts,is_compressed))return 0;
              throw [0,Assert_failure,_tW_]}
            throw [0,Assert_failure,_tX_]}
          throw [0,Assert_failure,_tY_]}
        throw [0,Assert_failure,_tZ_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_balanced,
        0,
        cst_src_union_find_ml$4,
        208,
        4,
        839,
        _bTy_);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst$47,
      0,
      cst_src_union_find_ml$5,
      109,
      0,
      3043,
      _tz_);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$136);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Union_find=[0,create$9,get$1,set$5,same_class,union$4];
    caml_register_global
     (7407,Core_kernel_Union_find,"Core_kernel__Union_find");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$137);
    caml_call1(Expect_test_collector[4][1],cst_src_doubly_linked_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$138,cst$48);
    var
     Attempt_to_mutate_list_during_iteration=
      [248,
       cst_Core_kernel_Doubly_linked_Attempt_to_mutate_list_during_iteration,
       caml_fresh_oo_id(0)];
    function phys_equal(_bTt_,_bTs_){return _bTt_ === _bTs_?1:0}
    function create$10(param){return create$9([0,1,0])}
    function equal$16(t1,t2){return same_class(t1,t2)}
    function length$16(t){return get$1(t)[1]}
    function union_find_get_check_no_pending_iterations(t)
     {var s=get$1(t);
      if(0 < s[2])throw Attempt_to_mutate_list_during_iteration;
      return s}
    function check_no_pending_iterations(t)
     {union_find_get_check_no_pending_iterations(t);return 0}
    function incr_length(n,t)
     {var s=union_find_get_check_no_pending_iterations(t);
      s[1] = caml_call2(_ah_,s[1],n);
      return 0}
    function incr_pending_iters(s){s[2] = caml_call2(_ah_,s[2],1);return 0}
    function decr_pending_iters(s){s[2] = caml_call2(_ai_,s[2],1);return 0}
    function with_iteration_2(t,a,b,f)
     {var s=get$1(t);
      incr_pending_iters(s);
      try
       {var r=caml_call2(f,a,b)}
      catch(exn)
       {exn = caml_wrap_exception(exn);decr_pending_iters(s);throw exn}
      decr_pending_iters(s);
      return r}
    function with_iteration_3(t,a,b,c,f)
     {var s=get$1(t);
      incr_pending_iters(s);
      try
       {var r=caml_call3(f,a,b,c)}
      catch(exn)
       {exn = caml_wrap_exception(exn);decr_pending_iters(s);throw exn}
      decr_pending_iters(s);
      return r}
    function with_iteration_4(t,a,b,c,d,f)
     {var s=get$1(t);
      incr_pending_iters(s);
      try
       {var r=caml_call4(f,a,b,c,d)}
      catch(exn)
       {exn = caml_wrap_exception(exn);decr_pending_iters(s);throw exn}
      decr_pending_iters(s);
      return r}
    function prev(t){return t[2]}
    function create_aux(v,header)
     {var t=[];caml_update_dummy(t,[0,v,t,t,header]);return t}
    function is_singleton(t){return t === t[2]?1:0}
    function sexp_of_t$40(sexp_of_a,t){return caml_call1(sexp_of_a,t[1])}
    function create$11(v){return create_aux(v,create$10(0))}
    function value$1(t){return t[1]}
    function unsafe_split_or_splice(a,b,c,d)
     {a[3] = d;d[2] = a;c[3] = b;b[2] = c;return 0}
    function unsafe_split_or_splice_after(t1,t2)
     {return unsafe_split_or_splice(t1[3][2],t1[3],t2[3][2],t2[3])}
    function unsafe_split_or_splice_before(t1,t2)
     {return unsafe_split_or_splice(t1[2],t1[2][3],t2[2],t2[2][3])}
    function check_two_nodes_no_pending_iterations(t1,t2)
     {check_no_pending_iterations(t1[4]);
      var _bTr_=1 - equal$16(t1[4],t2[4]);
      return _bTr_?check_no_pending_iterations(t2[4]):_bTr_}
    function split_or_splice_before(t1,t2)
     {check_two_nodes_no_pending_iterations(t1,t2);
      return unsafe_split_or_splice_before(t1,t2)}
    function insert_before(t,v)
     {incr_length(1,t[4]);
      var node=create_aux(v,t[4]);
      unsafe_split_or_splice_before(t,node);
      return node}
    function insert_after(t,v)
     {incr_length(1,t[4]);
      var node=create_aux(v,t[4]);
      unsafe_split_or_splice_after(t,node);
      return node}
    var dummy_header=create$10(0);
    function unlink(t)
     {var _bTq_=t[2],node=_bTq_[3];
      if(! is_singleton(node))
       {incr_length(-1,_bTq_[4]);
        unsafe_split_or_splice_after(_bTq_,node);
        node[4] = dummy_header}
      return 0}
    function invariant$4(invariant_a,t)
     {var _bTp_=t[1];
      if(_bTp_)
       {var head=_bTp_[1],header=head[4],n=1,elt=head;
        for(;;)
         {var next_elt=elt[3],prev_elt=elt[2];
          if(elt === next_elt[2])
           {if(elt === prev_elt[3])
             {if(equal$16(elt[4],header))
               {caml_call1(invariant_a,elt[1]);
                if(next_elt === head)
                 {if(n === length$16(header))return 0;
                  throw [0,Assert_failure,_t3_]}
                var n$0=caml_call2(_ah_,n,1),n=n$0,elt=next_elt;
                continue}
              throw [0,Assert_failure,_t0_]}
            throw [0,Assert_failure,_t1_]}
          throw [0,Assert_failure,_t2_]}}
      return 0}
    function create$12(param){return [0,0]}
    function equal$17(t$0,t){return t$0 === t?1:0}
    function of_list$10(param)
     {if(param)
       {var xs=param[2],x=param[1],first=create$11(x);
        caml_call3(fold$2,xs,first,insert_after);
        return [0,[0,first]]}
      return create$12(0)}
    function of_array$4(arr)
     {var len=arr.length - 1;
      if(0 === len)return create$12(0);
      var elt=create$11(caml_check_bound(arr,0)[1]),elt$0=elt,i=1;
      for(;;)
       {if(i < caml_call1(length$1,arr))
         {var
           i$0=caml_call2(_ah_,i,1),
           elt$1=insert_after(elt$0,caml_check_bound(arr,i)[i + 1]),
           elt$0=elt$1,
           i=i$0;
          continue}
        return [0,[0,elt]]}}
    function fold_elt(t,init,f)
     {var _bTn_=t[1];
      if(_bTn_)
       {var
         first=_bTn_[1],
         _bTo_=
          function(f,acc,first)
           {var acc$0=acc,elt=first;
            for(;;)
             {var acc$1=caml_call2(f,acc$0,elt),elt$0=elt[3];
              if(elt$0 === first)return acc$1;
              var acc$0=acc$1,elt=elt$0;
              continue}};
        return with_iteration_3(first[4],f,init,first,_bTo_)}
      return init}
    function fold_elt_1(t,init,f,a)
     {var _bTl_=t[1];
      if(_bTl_)
       {var
         first=_bTl_[1],
         _bTm_=
          function(f,a,acc,first)
           {var acc$0=acc,elt=first;
            for(;;)
             {var acc$1=caml_call3(f,a,acc$0,elt),elt$0=elt[3];
              if(elt$0 === first)return acc$1;
              var acc$0=acc$1,elt=elt$0;
              continue}};
        return with_iteration_4(first[4],f,a,init,first,_bTm_)}
      return init}
    function iter_elt(t,f)
     {return fold_elt_1(t,0,function(f,param,elt){return caml_call1(f,elt)},f)}
    function _t4_(param)
     {return caml_call2
              (iter$2,
               _t6_,
               function(l)
                {var sum=[0,0];
                 function _bTj_(elt)
                  {sum[1] = caml_call2(_ah_,sum[1],elt[1]);return 0}
                 iter_elt(of_list$10(l),_bTj_);
                 var _bTk_=caml_call3(fold$2,l,0,_ah_);
                 if(sum[1] === _bTk_)return 0;
                 throw [0,Assert_failure,_t5_]})}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_List_iter_1_2_3_f_fun_l,
      0,
      cst_src_doubly_linked_ml$0,
      344,
      0,
      238,
      _t4_);
    function find_elt(t,f)
     {function _bTh_(r)
       {fold_elt_1
         (t,
          0,
          function(f,param,elt)
           {var _bTi_=caml_call1(f,elt[1]);
            return _bTi_?caml_call1(r,[0,elt]):_bTi_},
          f);
        return 0}
      return caml_call1(Base_With_return[1],_bTh_)}
    function iter$17(t,f)
     {var _bTe_=t[1];
      if(_bTe_)
       {var
         first=_bTe_[1],
         _bTf_=
          function(first,f)
           {var elt=first;
            for(;;)
             {caml_call1(f,elt[1]);
              var next=elt[3],_bTg_=1 - (next === first?1:0);
              if(_bTg_){var elt=next;continue}
              return _bTg_}};
        return with_iteration_2(first[4],first,f,_bTf_)}
      return 0}
    function fold$14(t,init,f)
     {return fold_elt_1
              (t,init,function(f,acc,elt){return caml_call2(f,acc,elt[1])},f)}
    var
     iter$18=[0,-198771759,iter$17],
     C$0=caml_call1(include$9[17],[0,fold$14,iter$18]),
     _t7_=C$0[10],
     _t8_=C$0[11],
     _t9_=C$0[8],
     _t__=C$0[12],
     _t$_=C$0[13],
     _ua_=C$0[5],
     _ub_=C$0[9],
     _uc_=C$0[1],
     to_array$8=C$0[15],
     _ud_=C$0[16],
     _ue_=C$0[17],
     _uf_=C$0[6],
     _ug_=C$0[7];
    function unchecked_iter(t,f)
     {var _bTb_=t[1];
      if(_bTb_)
       {var first=_bTb_[1],elt=first;
        for(;;)
         {caml_call1(f,elt[1]);
          var next=elt[3],_bTc_=t[1];
          if(_bTc_)
           {var first$0=_bTc_[1],_bTd_=1 - (first$0 === next?1:0);
            if(_bTd_){var elt=next;continue}
            return _bTd_}
          return 0}}
      return 0}
    function is_empty$14(t){return caml_call1(is_none,t[1])}
    function fold_right$9(t,init,f)
     {var _bS$_=t[1];
      if(_bS$_)
       {var
         first=_bS$_[1],
         _bTa_=
          function(f,acc,first)
           {var acc$0=acc,elt=first;
            for(;;)
             {var elt$0=elt[2],acc$1=caml_call2(f,elt$0[1],acc$0);
              if(elt$0 === first)return acc$1;
              var acc$0=acc$1,elt=elt$0;
              continue}};
        return with_iteration_3(first[4],f,init,first,_bTa_)}
      return init}
    function to_list$9(t)
     {return fold_right$9(t,0,function(x,tl){return [0,x,tl]})}
    function length$17(t)
     {var _bS__=t[1];
      if(_bS__){var first=_bS__[1];return length$16(first[4])}
      return 0}
    function sexp_of_t$41(sexp_of_a,t)
     {return caml_call2(sexp_of_t$25,sexp_of_a,to_list$9(t))}
    function t_of_sexp$30(a_of_sexp,s)
     {return of_list$10(caml_call2(t_of_sexp$23,a_of_sexp,s))}
    function copy$2(t){return of_list$10(to_list$9(t))}
    function clear$1(t){t[1] = 0;return 0}
    var
     Transfer_src_and_dst_are_same_list=
      [248,
       cst_Core_kernel_Doubly_linked_Transfer_src_and_dst_are_same_list,
       caml_fresh_oo_id(0)];
    function transfer(src,dst)
     {if(src === dst)throw Transfer_src_and_dst_are_same_list;
      var _bS6_=src[1];
      if(_bS6_)
       {var src_head=_bS6_[1],_bS7_=dst[1];
        if(_bS7_)
         {var dst_head=_bS7_[1],_bS8_=dst_head[4],_bS9_=src_head[4];
          if(same_class(_bS9_,_bS8_))
           var match=-823486817;
          else
           {var
             n1=union_find_get_check_no_pending_iterations(_bS9_)[1],
             n2=union_find_get_check_no_pending_iterations(_bS8_)[1];
            with_iteration_4
             (_bS9_,
              _bS9_,
              _bS8_,
              n1,
              n2,
              function(t1,t2,n1,n2)
               {return with_iteration_4
                        (t2,
                         t1,
                         t2,
                         n1,
                         n2,
                         function(t1,t2,n1,n2)
                          {union$4(t1,t2);
                           return set$5(t1,[0,caml_call2(_ah_,n1,n2),0])})});
            var match=1016869580}
          if(1016869580 <= match)
           {split_or_splice_before(dst_head,src_head);return clear$1(src)}
          throw Transfer_src_and_dst_are_same_list}
        dst[1] = [0,src_head];
        return clear$1(src)}
      return 0}
    function filter_inplace$1(t,f)
     {var
       to_remove=
        caml_call1
         (rev,
          fold_elt
           (t,
            0,
            function(elts,elt){return caml_call1(f,elt[1])?elts:[0,elt,elts]}));
      return caml_call2
              (iter$2,
               to_remove,
               function(elt)
                {var _bS4_=t[1];
                 if(_bS4_)
                  {var head=_bS4_[1];
                   if(head === elt)
                    {var next_elt=elt[3],_bS5_=head === next_elt?0:[0,next_elt];
                     t[1] = _bS5_}}
                 return unlink(elt)})}
    var
     Elt_does_not_belong_to_list=
      [248,
       cst_Core_kernel_Doubly_linked_Elt_does_not_belong_to_list,
       caml_fresh_oo_id(0)];
    function choose$3(t){return t[1]}
    function last_elt(t){return caml_call2(map$23,t[1],prev)}
    function first$0(t){return caml_call2(map$23,t[1],value$1)}
    function last$1(t){return caml_call2(map$23,last_elt(t),value$1)}
    function is_first$0(t,elt)
     {var _bS3_=t[1];
      if(_bS3_)
       {var first=_bS3_[1];
        if(equal$16(first[4],elt[4]))return elt === first?1:0;
        throw Elt_does_not_belong_to_list}
      throw Elt_does_not_belong_to_list}
    function is_last(t,elt)
     {var _bS2_=t[1];
      if(_bS2_)
       {var first=_bS2_[1];
        if(equal$16(first[4],elt[4]))
         {var last=first[2];return elt === last?1:0}
        throw Elt_does_not_belong_to_list}
      throw Elt_does_not_belong_to_list}
    function mem_elt(t,elt)
     {var _bS1_=t[1];
      if(_bS1_){var first=_bS1_[1];return equal$16(first[4],elt[4])}
      return 0}
    function prev$0(t,elt)
     {var _bS0_=t[1];
      if(_bS0_)
       {var first=_bS0_[1];
        if(elt === first)return 0;
        if(equal$16(first[4],elt[4]))return [0,elt[2]];
        throw Elt_does_not_belong_to_list}
      throw Elt_does_not_belong_to_list}
    function next$0(t,elt)
     {var _bSZ_=t[1];
      if(_bSZ_)
       {var first=_bSZ_[1],last=first[2];
        if(elt === last)return 0;
        if(equal$16(first[4],elt[4]))return [0,elt[3]];
        throw Elt_does_not_belong_to_list}
      throw Elt_does_not_belong_to_list}
    function insert_after$0(t,elt,v)
     {var _bSY_=t[1];
      if(_bSY_)
       {var first=_bSY_[1];
        if(equal$16(first[4],elt[4]))return insert_after(elt,v);
        throw Elt_does_not_belong_to_list}
      throw Elt_does_not_belong_to_list}
    function insert_before$0(t,elt,v)
     {var _bSX_=t[1];
      if(_bSX_)
       {var first=_bSX_[1];
        if(elt === first)
         {var new_elt=insert_before(first,v);
          t[1] = [0,new_elt];
          return new_elt}
        if(equal$16(first[4],elt[4]))return insert_before(elt,v);
        throw Elt_does_not_belong_to_list}
      throw Elt_does_not_belong_to_list}
    function insert_empty(t,v)
     {var new_elt=create$11(v);t[1] = [0,new_elt];return new_elt}
    function insert_last(t,v)
     {var _bSW_=t[1];
      if(_bSW_){var first=_bSW_[1];return insert_before(first,v)}
      return insert_empty(t,v)}
    function add$11(t,v)
     {var _bSV_=t[1];
      if(_bSV_)
       {var first=_bSV_[1],new_elt=insert_before(first,v);
        t[1] = [0,new_elt];
        return new_elt}
      return insert_empty(t,v)}
    function remove_last(t)
     {var _bSU_=t[1];
      if(_bSU_)
       {var first=_bSU_[1],node=first[2];
        if(! is_singleton(node))
         {incr_length(-1,first[4]);
          unsafe_split_or_splice_before(first,node);
          node[4] = dummy_header}
        if(first === node)t[1] = 0;
        return [0,node[1]]}
      return 0}
    function remove_one(t)
     {var _bSS_=t[1];
      if(_bSS_)
       {var first=_bSS_[1],second=first[3];
        unlink(first);
        var _bST_=first === second?0:[0,second];
        t[1] = _bST_;
        return [0,first[1]]}
      return 0}
    function remove$10(t,elt)
     {var _bSR_=t[1];
      if(_bSR_)
       {var first=_bSR_[1];
        if(elt === first){remove_one(t);return 0}
        if(equal$16(first[4],elt[4]))return unlink(elt);
        throw Elt_does_not_belong_to_list}
      throw Elt_does_not_belong_to_list}
    var
     Invalid_move_elt_equals_anchor=
      [248,
       cst_Core_kernel_Doubly_linked_Invalid_move_elt_equals_anchor,
       caml_fresh_oo_id(0)];
    function move_before(t,elt,anchor)
     {if(anchor === elt)throw Invalid_move_elt_equals_anchor;
      if(equal$16(anchor[4],elt[4]))
       {var _bSO_=t[1];
        if(_bSO_)
         {var first=_bSO_[1];
          if(equal$16(first[4],elt[4]))
           {var after_elt=elt[3];
            split_or_splice_before(elt,after_elt);
            var first$0=first === elt?(t[1] = [0,after_elt],after_elt):first;
            split_or_splice_before(anchor,elt);
            var
             _bSP_=first$0 === anchor?1:0,
             _bSQ_=_bSP_?(t[1] = [0,elt],0):_bSP_;
            return _bSQ_}
          throw Elt_does_not_belong_to_list}
        throw Elt_does_not_belong_to_list}
      throw Elt_does_not_belong_to_list}
    function move_to_front(t,elt)
     {var _bSM_=t[1];
      if(_bSM_)
       {var first=_bSM_[1],_bSN_=1 - (elt === first?1:0);
        return _bSN_?move_before(t,elt,first):_bSN_}
      throw Elt_does_not_belong_to_list}
    function move_after(t,elt,anchor)
     {if(anchor === elt)throw Invalid_move_elt_equals_anchor;
      if(equal$16(anchor[4],elt[4]))
       {var _bSL_=t[1];
        if(_bSL_)
         {var first=_bSL_[1];
          if(equal$16(first[4],elt[4]))
           {var after_elt=elt[3];
            split_or_splice_before(elt,after_elt);
            if(first === elt)t[1] = [0,after_elt];
            check_two_nodes_no_pending_iterations(anchor,elt);
            return unsafe_split_or_splice_after(anchor,elt)}
          throw Elt_does_not_belong_to_list}
        throw Elt_does_not_belong_to_list}
      throw Elt_does_not_belong_to_list}
    function move_to_back(t,elt)
     {var _bSJ_=t[1];
      if(_bSJ_)
       {var first=_bSJ_[1],last=first[2],_bSK_=1 - (elt === last?1:0);
        return _bSK_?move_after(t,elt,last):_bSK_}
      throw Elt_does_not_belong_to_list}
    function _uh_(param)
     {var n=5;
      function test(k,expected)
       {var
         t=create$12(0),
         a=caml_call2(init$0,n,function(i){return insert_last(t,i)});
        caml_call2(k,t,a);
        invariant$4(function(_bSI_){return 0},t);
        if(length$17(t) === 5)
         {var observed=to_list$9(t),_bSH_=caml_notequal(observed,expected);
          return _bSH_
                  ?failwiths
                    (0,
                     0,
                     cst_mismatch,
                     [0,[0,434236056,expected],[0,-2008,observed]],
                     function(param)
                      {var
                        v1=param[2],
                        v0=param[1],
                        v0$0=v0[2],
                        v0$1=[1,[0,_ui_,[0,caml_call2(_I_,sexp_of_t$0,v0$0),0]]],
                        v0$2=v1[2],
                        v1$0=[1,[0,_uj_,[0,caml_call2(_I_,sexp_of_t$0,v0$2),0]]];
                       return [1,[0,v0$1,[0,v1$0,0]]]})
                  :_bSH_}
        throw [0,Assert_failure,_uk_]}
      function _bR9_(param){return test(function(param,_bSG_){return 0},_ul_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_fun_fun_0_1_2_3_4,
        0,
        cst_src_doubly_linked_ml$1,
        687,
        4,
        58,
        _bR9_);
      function _bR__(param)
       {return test
                (function(t,a)
                  {return move_to_front(t,caml_check_bound(a,4)[5])},
                 _um_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_fun_t_fun_a_move_to_front_t_a_4,
        0,
        cst_src_doubly_linked_ml$2,
        689,
        4,
        77,
        _bR__);
      function _bR$_(param)
       {return test
                (function(t,a)
                  {return move_to_front(t,caml_check_bound(a,3)[4])},
                 _un_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_fun_t_fun_a_move_to_front_t_a_3,
        0,
        cst_src_doubly_linked_ml$3,
        690,
        4,
        77,
        _bR$_);
      function _bSa_(param)
       {return test
                (function(t,a)
                  {return move_to_front(t,caml_check_bound(a,2)[3])},
                 _uo_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_fun_t_fun_a_move_to_front_t_a_2,
        0,
        cst_src_doubly_linked_ml$4,
        691,
        4,
        77,
        _bSa_);
      function _bSb_(param)
       {return test
                (function(t,a)
                  {return move_to_front(t,caml_check_bound(a,1)[2])},
                 _up_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_fun_t_fun_a_move_to_front_t_a_1,
        0,
        cst_src_doubly_linked_ml$5,
        692,
        4,
        77,
        _bSb_);
      function _bSc_(param)
       {return test
                (function(t,a)
                  {return move_to_front(t,caml_check_bound(a,0)[1])},
                 _uq_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_fun_t_fun_a_move_to_front_t_a_0,
        0,
        cst_src_doubly_linked_ml$6,
        693,
        4,
        77,
        _bSc_);
      function _bSd_(param)
       {return test
                (function(t,a)
                  {return move_to_back(t,caml_check_bound(a,0)[1])},
                 _ur_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_fun_t_fun_a_move_to_back_t_a_0,
        0,
        cst_src_doubly_linked_ml$7,
        695,
        4,
        77,
        _bSd_);
      function _bSe_(param)
       {return test
                (function(t,a)
                  {return move_to_back(t,caml_check_bound(a,1)[2])},
                 _us_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_fun_t_fun_a_move_to_back_t_a_1,
        0,
        cst_src_doubly_linked_ml$8,
        696,
        4,
        77,
        _bSe_);
      function _bSf_(param)
       {return test
                (function(t,a)
                  {return move_to_back(t,caml_check_bound(a,2)[3])},
                 _ut_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_fun_t_fun_a_move_to_back_t_a_2,
        0,
        cst_src_doubly_linked_ml$9,
        697,
        4,
        77,
        _bSf_);
      function _bSg_(param)
       {return test
                (function(t,a)
                  {return move_to_back(t,caml_check_bound(a,3)[4])},
                 _uu_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_fun_t_fun_a_move_to_back_t_a_3,
        0,
        cst_src_doubly_linked_ml$10,
        698,
        4,
        77,
        _bSg_);
      function _bSh_(param)
       {return test
                (function(t,a)
                  {return move_to_back(t,caml_check_bound(a,4)[5])},
                 _uv_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_fun_t_fun_a_move_to_back_t_a_4,
        0,
        cst_src_doubly_linked_ml$11,
        699,
        4,
        77,
        _bSh_);
      function _bSi_(param)
       {return test
                (function(t,a)
                  {var _bSF_=caml_check_bound(a,1)[2];
                   return move_before(t,caml_check_bound(a,2)[3],_bSF_)},
                 _uw_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_fun_t_fun_a_move_before_t_a_2,
        0,
        cst_src_doubly_linked_ml$12,
        701,
        4,
        89,
        _bSi_);
      function _bSj_(param)
       {return test
                (function(t,a)
                  {var _bSE_=caml_check_bound(a,0)[1];
                   return move_before(t,caml_check_bound(a,2)[3],_bSE_)},
                 _ux_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_fun_t_fun_a_move_before_t_a_2$0,
        0,
        cst_src_doubly_linked_ml$13,
        702,
        4,
        89,
        _bSj_);
      function _bSk_(param)
       {return test
                (function(t,a)
                  {var _bSD_=caml_check_bound(a,0)[1];
                   return move_before(t,caml_check_bound(a,1)[2],_bSD_)},
                 _uy_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_fun_t_fun_a_move_before_t_a_1,
        0,
        cst_src_doubly_linked_ml$14,
        703,
        4,
        89,
        _bSk_);
      function _bSl_(param)
       {return test
                (function(t,a)
                  {var _bSC_=caml_check_bound(a,2)[3];
                   return move_before(t,caml_check_bound(a,0)[1],_bSC_)},
                 _uz_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_fun_t_fun_a_move_before_t_a_0,
        0,
        cst_src_doubly_linked_ml$15,
        704,
        4,
        89,
        _bSl_);
      function _bSm_(param)
       {return test
                (function(t,a)
                  {var _bSB_=caml_check_bound(a,1)[2];
                   return move_before(t,caml_check_bound(a,0)[1],_bSB_)},
                 _uA_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_fun_t_fun_a_move_before_t_a_0$0,
        0,
        cst_src_doubly_linked_ml$16,
        705,
        4,
        89,
        _bSm_);
      function _bSn_(param)
       {return test
                (function(t,a)
                  {var _bSA_=caml_check_bound(a,2)[3];
                   return move_before(t,caml_check_bound(a,3)[4],_bSA_)},
                 _uB_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_fun_t_fun_a_move_before_t_a_3,
        0,
        cst_src_doubly_linked_ml$17,
        706,
        4,
        89,
        _bSn_);
      function _bSo_(param)
       {return test
                (function(t,a)
                  {var _bSz_=caml_check_bound(a,3)[4];
                   return move_before(t,caml_check_bound(a,2)[3],_bSz_)},
                 _uC_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_fun_t_fun_a_move_before_t_a_2$1,
        0,
        cst_src_doubly_linked_ml$18,
        707,
        4,
        89,
        _bSo_);
      function _bSp_(param)
       {return test
                (function(t,a)
                  {var _bSy_=caml_check_bound(a,3)[4];
                   return move_after(t,caml_check_bound(a,1)[2],_bSy_)},
                 _uD_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_fun_t_fun_a_move_after_t_a_1,
        0,
        cst_src_doubly_linked_ml$19,
        709,
        4,
        89,
        _bSp_);
      function _bSq_(param)
       {return test
                (function(t,a)
                  {var _bSx_=caml_check_bound(a,2)[3];
                   return move_after(t,caml_check_bound(a,0)[1],_bSx_)},
                 _uE_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_fun_t_fun_a_move_after_t_a_0,
        0,
        cst_src_doubly_linked_ml$20,
        710,
        4,
        89,
        _bSq_);
      function _bSr_(param)
       {return test
                (function(t,a)
                  {var _bSw_=caml_check_bound(a,4)[5];
                   return move_after(t,caml_check_bound(a,1)[2],_bSw_)},
                 _uF_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_fun_t_fun_a_move_after_t_a_1$0,
        0,
        cst_src_doubly_linked_ml$21,
        711,
        4,
        89,
        _bSr_);
      function _bSs_(param)
       {return test
                (function(t,a)
                  {var _bSv_=caml_check_bound(a,2)[3];
                   return move_after(t,caml_check_bound(a,3)[4],_bSv_)},
                 _uG_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_fun_t_fun_a_move_after_t_a_3,
        0,
        cst_src_doubly_linked_ml$22,
        712,
        4,
        89,
        _bSs_);
      function _bSt_(param)
       {return test
                (function(t,a)
                  {var _bSu_=caml_check_bound(a,3)[4];
                   return move_after(t,caml_check_bound(a,2)[3],_bSu_)},
                 _uH_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_fun_t_fun_a_move_after_t_a_2,
        0,
        cst_src_doubly_linked_ml$23,
        713,
        4,
        89,
        _bSt_);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst_move_functions,
      0,
      cst_src_doubly_linked_ml$24,
      668,
      0,
      2442,
      _uh_);
    function _uI_(param){return 0 === to_list$9(of_list$10(0))?1:0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[4],
      Inline_test_config,
      cst_to_list_of_list,
      0,
      cst_src_doubly_linked_ml$25,
      716,
      0,
      38,
      _uI_);
    function _uJ_(param){return caml_equal(to_list$9(of_list$10(_uL_)),_uK_)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[4],
      Inline_test_config,
      cst_to_list_of_list_1_2_3_1_2_3,
      0,
      cst_src_doubly_linked_ml$26,
      717,
      0,
      48,
      _uJ_);
    function _uM_(param)
     {return caml_equal(caml_call1(to_array$8,of_array$4([0])),[0])}
    caml_call8
     (Ppx_inline_test_lib_Runtime[4],
      Inline_test_config,
      cst_to_array_of_array,
      0,
      cst_src_doubly_linked_ml$27,
      718,
      0,
      44,
      _uM_);
    function _uN_(param)
     {return caml_equal
              (caml_call1(to_array$8,of_array$4([0,1,2,3])),[0,1,2,3])}
    caml_call8
     (Ppx_inline_test_lib_Runtime[4],
      Inline_test_config,
      cst_to_array_of_array_1_2_3_1_2_3,
      0,
      cst_src_doubly_linked_ml$28,
      719,
      0,
      54,
      _uN_);
    function _uO_(param)
     {var _bR5_=of_list$10(0);
      invariant$4(function(param){return 0},_bR5_);
      var _bR6_=of_list$10(_uP_);
      invariant$4(function(param){return 0},_bR6_);
      var _bR7_=of_array$4([0]);
      invariant$4(function(param){return 0},_bR7_);
      var _bR8_=of_array$4([0,1,2,3]);
      return invariant$4(function(param){return 0},_bR8_)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_invariant_fun_int_of_list,
      0,
      cst_src_doubly_linked_ml$29,
      721,
      0,
      218,
      _uO_);
    function _uQ_(param)
     {var t1=create$12(0),t2=create$12(0),elt=add$11(t1,15);
      try
       {remove$10(t2,elt);var _bR3_=0;return _bR3_}
      catch(_bR4_)
       {_bR4_ = caml_wrap_exception(_bR4_);
        if(_bR4_ === Elt_does_not_belong_to_list)return 1;
        throw _bR4_}}
    caml_call8
     (Ppx_inline_test_lib_Runtime[4],
      Inline_test_config,
      cst_try_remove_t2_elt_false_with_Elt_does_not,
      0,
      cst_src_doubly_linked_ml$30,
      728,
      0,
      172,
      _uQ_);
    function _uR_(param)
     {var t1=create$12(0),t2=create$12(0),elt=add$11(t1,14);
      add$11(t2,13);
      try
       {remove$10(t2,elt);var _bR1_=0;return _bR1_}
      catch(_bR2_)
       {_bR2_ = caml_wrap_exception(_bR2_);
        if(_bR2_ === Elt_does_not_belong_to_list)return 1;
        throw _bR2_}}
    caml_call8
     (Ppx_inline_test_lib_Runtime[4],
      Inline_test_config,
      cst_try_remove_t2_elt_false_with_Elt_does_not$0,
      0,
      cst_src_doubly_linked_ml$31,
      737,
      0,
      206,
      _uR_);
    function _uS_(param)
     {var t1=create$12(0),a=add$11(t1,97),b=add$11(t1,98),got=mem_elt(t1,a);
      caml_call8(Ppx_assert_lib_Runtime[3],pos$44,_i_,_e_,0,0,0,1,got);
      var got$0=mem_elt(t1,b);
      caml_call8(Ppx_assert_lib_Runtime[3],pos$45,_i_,_e_,0,0,0,1,got$0);
      var t2=create$12(0),b2=add$11(t2,98),got$1=mem_elt(t2,b2);
      caml_call8(Ppx_assert_lib_Runtime[3],pos$46,_i_,_e_,0,0,0,1,got$1);
      var got$2=mem_elt(t1,b2);
      caml_call8(Ppx_assert_lib_Runtime[3],pos$47,_i_,_e_,0,0,0,0,got$2);
      remove$10(t1,a);
      var got$3=mem_elt(t1,a);
      caml_call8(Ppx_assert_lib_Runtime[3],pos$48,_i_,_e_,0,0,0,0,got$3);
      var got$4=mem_elt(t1,b);
      caml_call8(Ppx_assert_lib_Runtime[3],pos$49,_i_,_e_,0,0,0,1,got$4);
      remove$10(t1,b);
      var got$5=mem_elt(t1,a);
      caml_call8(Ppx_assert_lib_Runtime[3],pos$50,_i_,_e_,0,0,0,0,got$5);
      var got$6=mem_elt(t1,b);
      return caml_call8
              (Ppx_assert_lib_Runtime[3],pos$51,_i_,_e_,0,0,0,0,got$6)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_mem_elt,
      0,
      cst_src_doubly_linked_ml$32,
      747,
      0,
      625,
      _uS_);
    function _uT_(param)
     {var b=of_list$10(_uU_);
      function element(b,n)
       {return caml_call4
                (value_exn,
                 0,
                 0,
                 0,
                 find_elt(b,function(value){return caml_equal(value,n)}))}
      function remove(b,n){return remove$10(b,element(b,n))}
      function insert_after(b,n_find,n_add)
       {insert_after$0(b,element(b,n_find),n_add);return 0}
      function to_list(f)
       {var r=[0,0],b$0=copy$2(b);
        unchecked_iter
         (b$0,function(n){r[1] = [0,n,r[1]];return caml_call2(f,b$0,n)});
        return caml_call1(rev,r[1])}
      function _bRL_(param)
       {return caml_equal(to_list(function(param,_bR0_){return 0}),_uV_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_to_list_fun_fun_0_1_2,
        0,
        cst_src_doubly_linked_ml$33,
        782,
        4,
        58,
        _bRL_);
      function _bRM_(param)
       {return caml_equal
                (to_list
                  (function(b,x)
                    {var _bRZ_=0 === x?1:0;return _bRZ_?remove(b,1):_bRZ_}),
                 _uW_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_to_list_fun_b_fun_x_if_x_0_then_rem,
        0,
        cst_src_doubly_linked_ml$34,
        783,
        4,
        77,
        _bRM_);
      function _bRN_(param)
       {return caml_equal
                (to_list
                  (function(b,x)
                    {var _bRY_=1 === x?1:0;return _bRY_?remove(b,0):_bRY_}),
                 _uX_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_to_list_fun_b_fun_x_if_x_1_then_rem,
        0,
        cst_src_doubly_linked_ml$35,
        784,
        4,
        80,
        _bRN_);
      function _bRO_(param)
       {return caml_equal
                (to_list
                  (function(b,x)
                    {var _bRX_=2 === x?1:0;return _bRX_?remove(b,1):_bRX_}),
                 _uY_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_to_list_fun_b_fun_x_if_x_2_then_rem,
        0,
        cst_src_doubly_linked_ml$36,
        785,
        4,
        80,
        _bRO_);
      function _bRP_(param)
       {return caml_equal
                (to_list
                  (function(b,x)
                    {var _bRW_=2 === x?1:0;
                     return _bRW_?(remove(b,4),remove(b,3)):_bRW_}),
                 _uZ_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_to_list_fun_b_fun_x_if_x_2_then_re,
        0,
        cst_src_doubly_linked_ml$37,
        786,
        4,
        97,
        _bRP_);
      function _bRQ_(param)
       {return caml_equal
                (to_list
                  (function(b,x)
                    {var _bRV_=2 === x?1:0;
                     return _bRV_?insert_after(b,1,5):_bRV_}),
                 _u0_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_to_list_fun_b_fun_x_if_x_2_then_ins,
        0,
        cst_src_doubly_linked_ml$38,
        787,
        4,
        88,
        _bRQ_);
      function _bRR_(param)
       {return caml_equal
                (to_list
                  (function(b,x)
                    {var _bRU_=2 === x?1:0;
                     return _bRU_?insert_after(b,2,5):_bRU_}),
                 _u1_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_to_list_fun_b_fun_x_if_x_2_then_ins$0,
        0,
        cst_src_doubly_linked_ml$39,
        788,
        4,
        91,
        _bRR_);
      function _bRS_(param)
       {return caml_equal
                (to_list
                  (function(b,x)
                    {var _bRT_=2 === x?1:0;
                     return _bRT_?insert_after(b,3,5):_bRT_}),
                 _u2_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_to_list_fun_b_fun_x_if_x_2_then_ins$1,
        0,
        cst_src_doubly_linked_ml$40,
        789,
        4,
        91,
        _bRS_);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst_unchecked_iter,
      0,
      cst_src_doubly_linked_ml$41,
      765,
      0,
      1160,
      _uT_);
    function to_sequence$9(t){return caml_call1(of_list$0,to_list$9(t))}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$139);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Elt=[0,value$1,phys_equal,sexp_of_t$40],
     include$42=
      [0,
       Elt,
       t_of_sexp$30,
       sexp_of_t$41,
       _uc_,
       length$17,
       is_empty$14,
       iter$17,
       _ua_,
       _uf_,
       _ug_,
       _t9_,
       _ub_,
       _t7_,
       _t8_,
       _t__,
       _t$_,
       to_list$9,
       to_array$8,
       _ud_,
       _ue_,
       invariant$4,
       create$12,
       of_list$10,
       of_array$4,
       equal$17,
       is_first$0,
       is_last,
       mem_elt,
       choose$3,
       last_elt,
       first$0,
       last$1,
       next$0,
       prev$0,
       insert_before$0,
       insert_after$0,
       add$11,
       insert_last,
       move_to_front,
       move_to_back,
       move_after,
       move_before,
       remove$10,
       remove_one,
       remove_last,
       fold_elt,
       iter_elt,
       fold_right$9,
       find_elt,
       clear$1,
       copy$2,
       transfer,
       filter_inplace$1,
       unchecked_iter,
       to_sequence$9];
    caml_register_global(7408,include$42,"Core_kernel__Doubly_linked");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$140);
    caml_call1(Expect_test_collector[4][1],cst_src_hash_queue_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$141,cst$49);
    function Make$4(Key)
     {var Table=_qT_(Key);
      function key(t){return t[1]}
      function value(t){return t[2]}
      function sexp_of_t(sexp_of_a,t)
       {var _bRK_=t[2];
        return sexp_of_t$41
                (function(param)
                  {var
                    v0=param[1],
                    v1=param[2],
                    v0$0=caml_call1(Key[2],v0),
                    v1$0=caml_call1(sexp_of_a,v1);
                   return [1,[0,v0$0,[0,v1$0,0]]]},
                 _bRK_)}
      function invariant(t)
       {var _bRH_=caml_call1(length$5,t[3]);
        if(caml_call2(_aD_,length$17(t[2]),_bRH_))
         {var
           _bRI_=[0,caml_call1(length$5,t[3])],
           keys=caml_call3(Table[4],0,_bRI_,0),
           _bRJ_=
            function(kv)
             {var key=kv[1],match=caml_call2(find$3,t[3],key);
              if(match)
               {if(caml_call2(mem$3,keys,key))throw [0,Assert_failure,_u3_];
                return caml_call3(set$0,keys,key,0)}
              throw [0,Assert_failure,_u4_]};
          return iter$17(t[2],_bRJ_)}
        throw [0,Assert_failure,_u5_]}
      function create(opt,_bRF_,param)
       {if(opt)var sth=opt[1],growth_allowed=sth;else var growth_allowed=1;
        if(_bRF_)var sth$0=_bRF_[1],size=sth$0;else var size=16;
        var _bRG_=caml_call3(Table[4],[0,growth_allowed],[0,size],0);
        return [0,0,create$12(0),_bRG_]}
      function read(t,f)
       {t[1] = caml_call2(_ah_,t[1],1);
        function _bRE_(param){t[1] = caml_call2(_ai_,t[1],1);return 0}
        return caml_call2(Base_Exn[12],f,_bRE_)}
      function ensure_can_modify(t)
       {var _bRD_=caml_call2(_aE_,t[1],0);
        return _bRD_
                ?caml_call1
                  (_aV_,
                   cst_It_is_an_error_to_modify_a_Hash_queue_t_while_iterating_over_it)
                :_bRD_}
      function clear$0(t)
       {ensure_can_modify(t);clear$1(t[2]);return caml_call1(clear,t[3])}
      function length(t){return caml_call1(length$5,t[3])}
      function is_empty(t){return caml_call2(_aD_,length(t),0)}
      function lookup(t,k)
       {var match=caml_call2(find$3,t[3],k);
        if(match){var elt=match[1];return [0,caml_call1(Elt[1],elt)[2]]}
        return 0}
      function lookup_exn(t,k)
       {var _bRC_=caml_call2(find_exn$3,t[3],k);
        return caml_call1(Elt[1],_bRC_)[2]}
      function mem(t,k){return caml_call2(mem$3,t[3],k)}
      function to_list(t){return caml_call2(map$11,to_list$9(t[2]),value)}
      function to_array(t)
       {return caml_call2(map$1,caml_call1(to_array$8,t[2]),value)}
      function for_all(t,f)
       {return read
                (t,
                 function(param)
                  {function _bRB_(kv){return caml_call1(f,kv[2])}
                   return caml_call2(_ub_,t[2],_bRB_)})}
      function exists(t,f)
       {return read
                (t,
                 function(param)
                  {function _bRA_(kv){return caml_call1(f,kv[2])}
                   return caml_call2(_t9_,t[2],_bRA_)})}
      function find_map(t,f)
       {return read
                (t,
                 function(param)
                  {function _bRz_(kv){return caml_call1(f,kv[2])}
                   return caml_call2(_t$_,t[2],_bRz_)})}
      function find(t,f)
       {return read
                (t,
                 function(param)
                  {function _bRy_(kv){return caml_call1(f,kv[2])}
                   return caml_call2(map$23,caml_call2(_t__,t[2],_bRy_),value)})}
      function enqueue(t,key,value)
       {ensure_can_modify(t);
        if(caml_call2(mem$3,t[3],key))return 975255060;
        var elt=insert_last(t[2],[0,key,value]);
        caml_call3(set$0,t[3],key,elt);
        return 17724}
      var
       Enqueue_duplicate_key=
        [248,
         cst_Core_kernel_Hash_queue_Make_Key_Enqueue_duplicate_key,
         caml_fresh_oo_id(0)];
      function _bRm_(param)
       {if(param[1] === Enqueue_duplicate_key)
         {var v0=param[2],v0$0=caml_call1(Key[2],v0);
          return [1,[0,_u6_,[0,v0$0,0]]]}
        throw [0,Assert_failure,_u7_]}
      caml_call3(Sexplib0_Sexp_conv[51][2],0,Enqueue_duplicate_key,_bRm_);
      function enqueue_exn(t,key,value)
       {var match=enqueue(t,key,value);
        if(975255060 <= match)throw [0,Enqueue_duplicate_key,key];
        return 0}
      function lookup_and_move_to_back_exn(t,key)
       {ensure_can_modify(t);
        var elt=caml_call2(find_exn$3,t[3],key);
        move_to_back(t[2],elt);
        return caml_call1(Elt[1],elt)[2]}
      function lookup_and_move_to_back(t,key)
       {ensure_can_modify(t);
        function _bRw_(elt)
         {move_to_back(t[2],elt);return caml_call1(Elt[1],elt)[2]}
        var _bRx_=caml_call2(find$3,t[3],key);
        return caml_call2(include$11[35][4][3],_bRx_,_bRw_)}
      function dequeue_with_key(t)
       {ensure_can_modify(t);
        var match=remove_one(t[2]);
        if(match)
         {var kv=match[1];
          caml_call2(remove$0,t[3],kv[1]);
          return [0,[0,kv[1],kv[2]]]}
        return 0}
      var
       Deque_with_key_empty=
        [248,
         cst_Core_kernel_Hash_queue_Make_Key_Deque_with_key_empty,
         caml_fresh_oo_id(0)];
      function _bRn_(param)
       {if(param === Deque_with_key_empty)return _u8_;
        throw [0,Assert_failure,_u9_]}
      caml_call3(Sexplib0_Sexp_conv[51][2],0,Deque_with_key_empty,_bRn_);
      function dequeue_with_key_exn(t)
       {var match=dequeue_with_key(t);
        if(match)
         {var match$0=match[1],v=match$0[2],k=match$0[1];return [0,k,v]}
        throw Deque_with_key_empty}
      function dequeue(t)
       {var match=dequeue_with_key(t);
        if(match){var match$0=match[1],v=match$0[2];return [0,v]}
        return 0}
      function first_with_key(t)
       {var match=first$0(t[2]);
        if(match)
         {var match$0=match[1],key=match$0[1],value=match$0[2];
          return [0,[0,key,value]]}
        return 0}
      function first(t)
       {var match=first$0(t[2]);
        if(match){var kv=match[1];return [0,kv[2]]}
        return 0}
      var
       Deque_empty=
        [248,
         cst_Core_kernel_Hash_queue_Make_Key_Deque_empty,
         caml_fresh_oo_id(0)];
      function _bRo_(param)
       {if(param === Deque_empty)return _u__;throw [0,Assert_failure,_u$_]}
      caml_call3(Sexplib0_Sexp_conv[51][2],0,Deque_empty,_bRo_);
      function dequeue_exn(t)
       {var match=dequeue(t);
        if(match){var v=match[1];return v}
        throw Deque_empty}
      function keys(t){return caml_call2(map$11,to_list$9(t[2]),key)}
      function iteri(t,f)
       {return read
                (t,
                 function(param)
                  {function _bRv_(kv){return caml_call2(f,kv[1],kv[2])}
                   return iter$17(t[2],_bRv_)})}
      function iter(t,f)
       {return iteri(t,function(param,data){return caml_call1(f,data)})}
      function foldi(t,init,f)
       {return read
                (t,
                 function(param)
                  {function _bRu_(ac,kv){return caml_call3(f,ac,kv[1],kv[2])}
                   return caml_call3(_ua_,t[2],init,_bRu_)})}
      function fold(t,init,f)
       {return foldi
                (t,init,function(ac,param,data){return caml_call2(f,ac,data)})}
      function count(t,f){return caml_call3(_hA_,fold,t,f)}
      function sum(m,t,f){return caml_call4(_hG_,fold,m,t,f)}
      function min_elt(t,compare){return caml_call3(_hB_,fold,t,compare)}
      function max_elt(t,compare){return caml_call3(_hC_,fold,t,compare)}
      function fold_result(t,init,f){return caml_call4(_hH_,fold,init,f,t)}
      function fold_until(t,init,f)
       {var _bRs_=caml_call3(_hI_,fold,init,f);
        return function(_bRt_){return caml_call2(_bRs_,_bRt_,t)}}
      function dequeue_all(t,f)
       {for(;;)
         {var match=dequeue(t);
          if(match){var v=match[1];caml_call1(f,v);continue}
          return 0}}
      function remove(t,k)
       {ensure_can_modify(t);
        var match=caml_call2(find$3,t[3],k);
        if(match)
         {var elt=match[1];
          remove$10(t[2],elt);
          var _bRr_=caml_call1(Elt[1],elt)[1];
          caml_call2(remove$0,t[3],_bRr_);
          return 17724}
        return -725941051}
      var
       Remove_unknown_key=
        [248,
         cst_Core_kernel_Hash_queue_Make_Key_Remove_unknown_key,
         caml_fresh_oo_id(0)];
      function _bRp_(param)
       {if(param[1] === Remove_unknown_key)
         {var v0=param[2],v0$0=caml_call1(Key[2],v0);
          return [1,[0,_va_,[0,v0$0,0]]]}
        throw [0,Assert_failure,_vb_]}
      caml_call3(Sexplib0_Sexp_conv[51][2],0,Remove_unknown_key,_bRp_);
      function remove_exn(t,k)
       {ensure_can_modify(t);
        var match=remove(t,k);
        if(17724 <= match)return 0;
        throw [0,Remove_unknown_key,k]}
      function replace(t,k,v)
       {ensure_can_modify(t);
        var match=caml_call2(find$3,t[3],k);
        if(match){var elt=match[1];caml_call1(Elt[1],elt)[2] = v;return 17724}
        return -725941051}
      var
       Replace_unknown_key=
        [248,
         cst_Core_kernel_Hash_queue_Make_Key_Replace_unknown_key,
         caml_fresh_oo_id(0)];
      function _bRq_(param)
       {if(param[1] === Replace_unknown_key)
         {var v0=param[2],v0$0=caml_call1(Key[2],v0);
          return [1,[0,_vc_,[0,v0$0,0]]]}
        throw [0,Assert_failure,_vd_]}
      caml_call3(Sexplib0_Sexp_conv[51][2],0,Replace_unknown_key,_bRq_);
      function replace_exn(t,k,v)
       {ensure_can_modify(t);
        var match=replace(t,k,v);
        if(17724 <= match)return 0;
        throw [0,Replace_unknown_key,k]}
      return [0,
              Key,
              sexp_of_t,
              length,
              is_empty,
              iter,
              fold,
              fold_result,
              fold_until,
              exists,
              for_all,
              count,
              sum,
              find,
              find_map,
              to_list,
              to_array,
              min_elt,
              max_elt,
              invariant,
              create,
              clear$0,
              mem,
              lookup,
              lookup_exn,
              enqueue,
              enqueue_exn,
              lookup_and_move_to_back,
              lookup_and_move_to_back_exn,
              first,
              first_with_key,
              keys,
              dequeue,
              dequeue_exn,
              dequeue_with_key,
              dequeue_with_key_exn,
              dequeue_all,
              remove,
              remove_exn,
              replace,
              replace_exn,
              iteri,
              foldi]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$142);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Hash_queue=[0,Make$4];
    caml_register_global
     (7409,Core_kernel_Hash_queue,"Core_kernel__Hash_queue");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$143);
    caml_call1(Expect_test_collector[4][1],cst_src_hashable_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$144,cst$50);
    var Binable$1=0;
    function Make_plain$2(T)
     {var
       hash_fold_t=T[1],
       compare=T[2],
       hash=T[4],
       Table=_qT_([0,T[2],T[3],T[4]]),
       Hash_set=_qZ_([0,T[2],T[3],T[4]]),
       Hash_queue=Make$4([0,T[2],T[3],T[4]]),
       hashable=Table[2];
      return [0,compare,hash_fold_t,hash,hashable,Table,Hash_set,Hash_queue]}
    function Make_plain_and_derive_hash_fold_t(T)
     {var compare=T[1],sexp_of_t=T[2],hash=T[3];
      function hash_fold_t$0(state,t)
       {return caml_call2(hash_fold_t,state,caml_call1(hash,t))}
      return Make_plain$2([0,hash_fold_t$0,compare,sexp_of_t,hash])}
    function Make$5(T)
     {var
       hash_fold_t=T[1],
       compare=T[3],
       hash=T[5],
       Table=_qS_([0,T[2],T[3],T[4],T[5]]),
       Hash_set=_qY_([0,T[2],T[3],T[4],T[5]]),
       Hash_queue=Make$4([0,T[3],T[4],T[5]]),
       hashable=Table[2];
      return [0,compare,hash_fold_t,hash,hashable,Table,Hash_set,Hash_queue]}
    function Make_and_derive_hash_fold_t(T)
     {var t_of_sexp=T[1],compare=T[2],sexp_of_t=T[3],hash=T[4];
      function hash_fold_t$0(state,t)
       {return caml_call2(hash_fold_t,state,caml_call1(hash,t))}
      return Make$5([0,hash_fold_t$0,t_of_sexp,compare,sexp_of_t,hash])}
    function Make_binable(T)
     {var
       Table=
        _qR_
         ([0,T[2],T[3],T[4],T[5],T[6],T[7],T[8],T[9],T[10],T[11],T[12],T[13]]),
       Hash_set=
        _qX_
         ([0,T[2],T[3],T[4],T[5],T[6],T[7],T[8],T[9],T[10],T[11],T[12],T[13]]),
       Hash_queue=Make$4([0,T[11],T[12],T[13]]),
       hash_fold_t=T[1],
       hash=T[13],
       hashable=Table[2];
      return [0,hash_fold_t,hash,hashable,Table,Hash_set,Hash_queue]}
    function Make_binable_and_derive_hash_fold_t(T)
     {var
       bin_t=T[1],
       bin_read_t=T[2],
       bin_read_t$0=T[3],
       bin_reader_t=T[4],
       bin_size_t=T[5],
       bin_write_t=T[6],
       bin_writer_t=T[7],
       bin_shape_t=T[8],
       t_of_sexp=T[9],
       compare=T[10],
       sexp_of_t=T[11],
       hash=T[12];
      function hash_fold_t$0(state,t)
       {return caml_call2(hash_fold_t,state,caml_call1(hash,t))}
      return Make_binable
              ([0,
                hash_fold_t$0,
                bin_t,
                bin_read_t,
                bin_read_t$0,
                bin_reader_t,
                bin_size_t,
                bin_write_t,
                bin_writer_t,
                bin_shape_t,
                t_of_sexp,
                compare,
                sexp_of_t,
                hash])}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$145);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Hashable=
      [0,
       Binable$1,
       Make_plain$2,
       Make_plain_and_derive_hash_fold_t,
       Make$5,
       Make_and_derive_hash_fold_t,
       Make_binable,
       Make_binable_and_derive_hash_fold_t];
    caml_register_global(7410,Core_kernel_Hashable,"Core_kernel__Hashable");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$146);
    caml_call1(Expect_test_collector[4][1],cst_src_source_code_position_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$147,cst$51);
    var
     _aYG_=
      _tc_
       ([0,
         Base_Source_code_position[4],
         Base_Source_code_position[5],
         Base_Source_code_position[6],
         Base_Source_code_position[7],
         Base_Source_code_position[8],
         Base_Source_code_position[9],
         Base_Source_code_position[10],
         Base_Source_code_position[11],
         Base_Source_code_position[12],
         Base_Source_code_position[13],
         Base_Source_code_position[14],
         Base_Source_code_position[15],
         Base_Source_code_position[16],
         Base_Source_code_position[17],
         Base_Source_code_position[18],
         Base_Source_code_position[19],
         Base_Source_code_position[20],
         Base_Source_code_position[21],
         Base_Source_code_position[22]],
        [0,_jz_,_jC_]),
     _ve_=_aYG_[1],
     _vf_=_aYG_[2],
     _vg_=_aYG_[3],
     _vh_=_aYG_[4],
     _vi_=_aYG_[5],
     _vj_=_aYG_[6],
     _vk_=_aYG_[7],
     _vl_=_aYG_[9],
     _vm_=_aYG_[10],
     _vn_=_aYG_[11],
     _vo_=_aYG_[12],
     _vp_=_aYG_[13],
     _vq_=_aYG_[14],
     _vr_=_aYG_[15],
     _vs_=_aYG_[16],
     _vt_=_aYG_[17],
     _vu_=_aYG_[18],
     _vv_=_aYG_[19],
     _vw_=_aYG_[20],
     _vx_=_aYG_[21],
     _vy_=_aYG_[22],
     include$43=Make$5([0,_jx_,_jz_,_jw_,_jC_,_jy_]),
     _vz_=include$43[1],
     _vA_=include$43[2],
     _vB_=include$43[3],
     _vC_=include$43[4],
     _vD_=include$43[5],
     _vE_=include$43[6],
     _vF_=include$43[7];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$148);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     _vG_=Stable$1[1],
     Core_kernel_Source_code_position=
      [0,
       _jC_,
       _jB_,
       _ve_,
       _vf_,
       _vg_,
       _vh_,
       _vi_,
       _vj_,
       _vk_,
       _vl_,
       _vm_,
       _vn_,
       _vo_,
       _vp_,
       _vq_,
       _vr_,
       _vs_,
       _vt_,
       _vu_,
       _vv_,
       _vw_,
       _vx_,
       _vy_,
       _vz_,
       _vA_,
       _vB_,
       _vC_,
       _vD_,
       _vE_,
       _vF_,
       [0,
        [0,
         _vG_[8],
         _vG_[6],
         _vG_[5],
         _vG_[7],
         _vG_[2],
         _vG_[3],
         _vG_[4],
         _vG_[1],
         _vG_[9],
         _vG_[12],
         _vG_[13],
         _vG_[14]]]];
    caml_register_global
     (7411,
      Core_kernel_Source_code_position,
      "Core_kernel__Source_code_position");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$149);
    caml_call1(Expect_test_collector[4][1],cst_src_identifiable_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$150,cst$52);
    function Make$6(T)
     {var
       bin_t=T[1],
       bin_read_t=T[2],
       bin_read_t$0=T[3],
       bin_reader_t=T[4],
       bin_size_t=T[5],
       bin_write_t=T[6],
       bin_writer_t=T[7],
       bin_shape_t=T[8],
       t_of_sexp=T[12],
       sexp_of_t=T[13],
       of_string=T[14],
       to_string=T[15],
       module_name=T[16],
       _bRe_=
        _te_([0,T[1],T[2],T[3],T[4],T[5],T[6],T[7],T[8],T[9],T[12],T[13]]),
       equal=_bRe_[7],
       compare=_bRe_[8],
       min=_bRe_[9],
       max=_bRe_[10],
       ascending=_bRe_[11],
       descending=_bRe_[12],
       between=_bRe_[13],
       clamp_exn=_bRe_[14],
       clamp=_bRe_[15],
       validate_lbound=_bRe_[16],
       validate_ubound=_bRe_[17],
       validate_bound=_bRe_[18],
       Replace_polymorphic_compare=_bRe_[19],
       comparator=_bRe_[20],
       Map=_bRe_[21],
       Set=_bRe_[22],
       _bRf_=_bRe_[1],
       _bRg_=_bRe_[2],
       _bRh_=_bRe_[3],
       _bRi_=_bRe_[4],
       _bRj_=_bRe_[5],
       _bRk_=_bRe_[6],
       _bRl_=
        Make_binable
         ([0,
           T[10],
           T[1],
           T[2],
           T[3],
           T[4],
           T[5],
           T[6],
           T[7],
           T[8],
           T[12],
           T[9],
           T[13],
           T[11]]),
       hash_fold_t=_bRl_[1],
       hash=_bRl_[2],
       hashable=_bRl_[3],
       Table=_bRl_[4],
       Hash_set=_bRl_[5],
       Hash_queue=_bRl_[6],
       include=caml_call1(Base_Pretty_printer[2],[0,T[16],T[15]]),
       pp=include[1];
      return [0,
              bin_t,
              bin_read_t,
              bin_read_t$0,
              bin_reader_t,
              bin_size_t,
              bin_write_t,
              bin_writer_t,
              bin_shape_t,
              t_of_sexp,
              sexp_of_t,
              of_string,
              to_string,
              module_name,
              _bRf_,
              _bRg_,
              _bRh_,
              _bRi_,
              _bRj_,
              _bRk_,
              equal,
              compare,
              min,
              max,
              ascending,
              descending,
              between,
              clamp_exn,
              clamp,
              validate_lbound,
              validate_ubound,
              validate_bound,
              Replace_polymorphic_compare,
              comparator,
              Map,
              Set,
              hash_fold_t,
              hash,
              hashable,
              Table,
              Hash_set,
              Hash_queue,
              pp]}
    function Make_using_comparator$2(T)
     {var
       bin_t=T[1],
       bin_read_t=T[2],
       bin_read_t$0=T[3],
       bin_reader_t=T[4],
       bin_size_t=T[5],
       bin_write_t=T[6],
       bin_writer_t=T[7],
       bin_shape_t=T[8],
       t_of_sexp=T[12],
       sexp_of_t=T[13],
       of_string=T[15],
       to_string=T[16],
       module_name=T[17],
       _bQ8_=
        _td_([0,T[1],T[2],T[3],T[4],T[5],T[6],T[7],T[8],T[12],T[13],T[14]]),
       equal=_bQ8_[7],
       compare=_bQ8_[8],
       min=_bQ8_[9],
       max=_bQ8_[10],
       ascending=_bQ8_[11],
       descending=_bQ8_[12],
       between=_bQ8_[13],
       clamp_exn=_bQ8_[14],
       clamp=_bQ8_[15],
       validate_lbound=_bQ8_[16],
       validate_ubound=_bQ8_[17],
       validate_bound=_bQ8_[18],
       Replace_polymorphic_compare=_bQ8_[19],
       comparator=_bQ8_[20],
       Map=_bQ8_[21],
       Set=_bQ8_[22],
       _bQ9_=_bQ8_[1],
       _bQ__=_bQ8_[2],
       _bQ$_=_bQ8_[3],
       _bRa_=_bQ8_[4],
       _bRb_=_bQ8_[5],
       _bRc_=_bQ8_[6],
       _bRd_=
        Make_binable
         ([0,
           T[10],
           T[1],
           T[2],
           T[3],
           T[4],
           T[5],
           T[6],
           T[7],
           T[8],
           T[12],
           T[9],
           T[13],
           T[11]]),
       hash_fold_t=_bRd_[1],
       hash=_bRd_[2],
       hashable=_bRd_[3],
       Table=_bRd_[4],
       Hash_set=_bRd_[5],
       Hash_queue=_bRd_[6],
       include=caml_call1(Base_Pretty_printer[2],[0,T[17],T[16]]),
       pp=include[1];
      return [0,
              bin_t,
              bin_read_t,
              bin_read_t$0,
              bin_reader_t,
              bin_size_t,
              bin_write_t,
              bin_writer_t,
              bin_shape_t,
              t_of_sexp,
              sexp_of_t,
              of_string,
              to_string,
              module_name,
              _bQ9_,
              _bQ__,
              _bQ$_,
              _bRa_,
              _bRb_,
              _bRc_,
              equal,
              compare,
              min,
              max,
              ascending,
              descending,
              between,
              clamp_exn,
              clamp,
              validate_lbound,
              validate_ubound,
              validate_bound,
              Replace_polymorphic_compare,
              comparator,
              Map,
              Set,
              hash_fold_t,
              hash,
              hashable,
              Table,
              Hash_set,
              Hash_queue,
              pp]}
    function _vH_(param)
     {function compare(a_001,b_002)
       {if(caml_call2(Ppx_compare_lib[1],a_001,b_002))return 0;
        switch(a_001)
         {case 0:return 0 === b_002?0:-1;
          case 1:
           if(1 === b_002)return 0;
           if(0 !== b_002)return -1;
           var switch$0=0;
           break;
          case 2:
           switch(b_002)
            {case 2:return 0;
             case 0:var switch$0=0;break;
             case 1:var switch$0=1;break;
             default:return -1}
           break;
          case 3:
           switch(b_002)
            {case 3:return 0;
             case 0:var switch$0=0;break;
             case 1:var switch$0=1;break;
             case 2:var switch$0=2;break;
             default:return -1}
           break;
          case 4:
           switch(b_002)
            {case 4:return 0;
             case 5:return -1;
             case 0:var switch$0=0;break;
             case 1:var switch$0=1;break;
             case 2:var switch$0=2;break;
             default:var switch$0=3}
           break;
          default:
           switch(b_002)
            {case 4:return 1;
             case 5:return 0;
             case 0:var switch$0=0;break;
             case 1:var switch$0=1;break;
             case 2:var switch$0=2;break;
             default:var switch$0=3}}
        switch(switch$0)
         {case 0:return 1;case 1:return 1;case 2:return 1;default:return 1}}
      function t_of_sexp(sexp)
       {if(0 === sexp[0])
         {var
           _bQ2_=sexp[1],
           _bQ3_=caml_string_compare(_bQ2_,cst_compare),
           switch$0=
            0 <= _bQ3_
             ?0 < _bQ3_
               ?caml_string_notequal(_bQ2_,cst_hash)
                 ?caml_string_notequal(_bQ2_,cst_of_string)
                   ?caml_string_notequal(_bQ2_,cst_sexp_of_t)
                     ?caml_string_notequal(_bQ2_,cst_t_of_sexp)
                       ?caml_string_notequal(_bQ2_,cst_to_string)?6:5
                       :4
                     :3
                   :2
                 :1
               :0
             :caml_string_notequal(_bQ2_,cst_Compare)
               ?caml_string_notequal(_bQ2_,cst_Hash)
                 ?caml_string_notequal(_bQ2_,cst_Of_string)
                   ?caml_string_notequal(_bQ2_,cst_Sexp_of_t)
                     ?caml_string_notequal(_bQ2_,cst_T_of_sexp)
                       ?caml_string_notequal(_bQ2_,cst_To_string)?6:5
                       :4
                     :3
                   :2
                 :1
               :0;
          switch(switch$0)
           {case 0:return 0;
            case 1:return 1;
            case 2:return 2;
            case 3:return 3;
            case 4:return 4;
            case 5:return 5
            }}
        else
         {var _bQ4_=sexp[1];
          if(! _bQ4_)
           return caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc$16,sexp);
          var _bQ5_=_bQ4_[1];
          if(0 !== _bQ5_[0])
           return caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc$16,sexp);
          var
           _bQ6_=_bQ5_[1],
           _bQ7_=caml_string_compare(_bQ6_,cst_compare$0),
           switch$1=
            0 <= _bQ7_
             ?0 < _bQ7_
               ?caml_string_notequal(_bQ6_,cst_hash$0)
                 ?caml_string_notequal(_bQ6_,cst_of_string$0)
                   ?caml_string_notequal(_bQ6_,cst_sexp_of_t$0)
                     ?caml_string_notequal(_bQ6_,cst_t_of_sexp$0)
                       ?caml_string_notequal(_bQ6_,cst_to_string$0)?6:5
                       :4
                     :3
                   :2
                 :1
               :0
             :caml_string_notequal(_bQ6_,cst_Compare$0)
               ?caml_string_notequal(_bQ6_,cst_Hash$0)
                 ?caml_string_notequal(_bQ6_,cst_Of_string$0)
                   ?caml_string_notequal(_bQ6_,cst_Sexp_of_t$0)
                     ?caml_string_notequal(_bQ6_,cst_T_of_sexp$0)
                       ?caml_string_notequal(_bQ6_,cst_To_string$0)?6:5
                       :4
                     :3
                   :2
                 :1
               :0;
          switch(switch$1)
           {case 0:
             return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$16,sexp);
            case 1:
             return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$16,sexp);
            case 2:
             return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$16,sexp);
            case 3:
             return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$16,sexp);
            case 4:
             return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$16,sexp);
            case 5:
             return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$16,sexp)
            }}
        return caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc$16,sexp)}
      function sexp_of_t(param)
       {switch(param)
         {case 0:return _vI_;
          case 1:return _vJ_;
          case 2:return _vK_;
          case 3:return _vL_;
          case 4:return _vM_;
          default:return _vN_}}
      var Map=_r7_([0,compare,t_of_sexp,sexp_of_t]);
      function sexp_of_t$1(v)
       {return caml_call2(_U_,caml_call1(Map[88],sexp_of_t$0),v)}
      var actual=[0,Map[4]],expected=[0,Map[4]];
      function incr(opt,t,counter)
       {if(opt)var sth=opt[1],by=sth;else var by=1;
        function _bQ1_(param)
         {if(param){var i=param[1];return caml_call2(_ah_,i,by)}return by}
        t[1] = caml_call3(Map[30],t[1],counter,_bQ1_);
        return 0}
      function check(location)
       {var _bQ0_=1 - caml_call3(Map[54],_aD_,actual[1],expected[1]);
        return _bQ0_
                ?failwiths
                  (0,
                   _vQ_,
                   cst_mismatch$0,
                   [0,location,[0,374295182,actual],[0,-1070584200,expected]],
                   function(param)
                    {var
                      v2=param[3],
                      v1=param[2],
                      v0=param[1],
                      v0$0=caml_call1(_jC_,v0),
                      v0$1=v1[2],
                      v1$0=[1,[0,_vO_,[0,sexp_of_t$1(v0$1),0]]],
                      v0$2=v2[2],
                      v2$0=[1,[0,_vP_,[0,sexp_of_t$1(v0$2),0]]];
                     return [1,[0,v0$0,[0,v1$0,[0,v2$0,0]]]]})
                :_bQ0_}
      var
       _bQN_=caml_call1(Bin_prot_Shape[9],_vR_),
       _bQO_=
        [0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$85),0,_bQN_],0],
       _bQP_=
        caml_call1
         (Bin_shape_lib_Bin_shape[4][1],cst_src_identifiable_ml_143_6),
       group=caml_call2(Bin_prot_Shape[6],_bQP_,_bQO_),
       _bQQ_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$86),
       bin_shape_t=caml_call1(caml_call2(Bin_prot_Shape[14],group,_bQQ_),0);
      function bin_size_t(param){return 1}
      function bin_write_t(buf,pos,param)
       {return 0 === param
                ?caml_call3(Bin_prot_Write[30],buf,pos,0)
                :caml_call3(Bin_prot_Write[30],buf,pos,1)}
      var bin_writer_t=[0,bin_size_t,bin_write_t];
      function bin_read_t(buf,pos_ref,vint)
       {return caml_call2
                (Bin_prot_Common[19],cst_src_identifiable_ml_T_t,pos_ref[1])}
      function bin_read_t$0(buf,pos_ref)
       {var match=caml_call2(Bin_prot_Read[29],buf,pos_ref);
        return 0 === match
                ?0
                :1 === match?1:caml_call2(Bin_prot_Common[18],_vS_,pos_ref[1])}
      var
       bin_reader_t=[0,bin_read_t$0,bin_read_t],
       bin_t=[0,bin_shape_t,bin_writer_t,bin_reader_t];
      function hash_fold_t(hsv,arg)
       {return 0 === arg
                ?caml_call2(Base_Hash[3],hsv,0)
                :caml_call2(Base_Hash[3],hsv,1)}
      function t_of_sexp$0(sexp)
       {if(0 === sexp[0])
         {var _bQW_=sexp[1];
          if(caml_string_notequal(_bQW_,cst_A))
           {if(caml_string_notequal(_bQW_,cst_B))
             if(caml_string_notequal(_bQW_,cst_a$41))
              if(caml_string_notequal(_bQW_,cst_b$10))
               var switch$0=1,switch$1=0;
              else
               var switch$1=1;
             else
              var switch$0=0,switch$1=0;
            else
             var switch$1=1;
            if(switch$1)return 1}
          else
           var switch$0=0;
          if(! switch$0)return 0}
        else
         {var _bQX_=sexp[1];
          if(! _bQX_)
           return caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc$17,sexp);
          var _bQY_=_bQX_[1];
          if(0 !== _bQY_[0])
           return caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc$17,sexp);
          var _bQZ_=_bQY_[1];
          if(caml_string_notequal(_bQZ_,cst_A$0))
           {if(caml_string_notequal(_bQZ_,cst_B$0))
             if(caml_string_notequal(_bQZ_,cst_a$42))
              if(caml_string_notequal(_bQZ_,cst_b$11))
               var switch$2=1,switch$3=0;
              else
               var switch$3=1;
             else
              var switch$2=0,switch$3=0;
            else
             var switch$3=1;
            if(switch$3)
             return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$17,sexp)}
          else
           var switch$2=0;
          if(! switch$2)
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$17,sexp)}
        return caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc$17,sexp)}
      function sexp_of_t$2(param){return 0 === param?_vT_:_vU_}
      var
       include=caml_call1(_eC_,[0,t_of_sexp$0,sexp_of_t$2]),
       _bQR_=include[1],
       _bQS_=include[2];
      function incr$0(by,counter){return incr(by,actual,counter)}
      function compare$0(t1,t2)
       {incr$0(0,0);
        return caml_call2(Ppx_compare_lib[1],t1,t2)
                ?0
                :0 === t1?0 === t2?0:-1:0 === t2?1:0}
      function hash(t)
       {incr$0(0,1);
        var hsv=caml_call2(Base_Hash[11],0,0),_bQV_=hash_fold_t(hsv,t);
        return caml_call1(Base_Hash[9],_bQV_)}
      function sexp_of_t$3(t){incr$0(0,3);return sexp_of_t$2(t)}
      function t_of_sexp$1(t){incr$0(0,4);return t_of_sexp$0(t)}
      function of_string(t){incr$0(0,2);return caml_call1(_bQR_,t)}
      function to_string(t){incr$0(0,5);return caml_call1(_bQS_,t)}
      var
       Id=
        Make$6
         ([0,
           bin_t,
           bin_read_t$0,
           bin_read_t,
           bin_reader_t,
           bin_size_t,
           bin_write_t,
           bin_writer_t,
           bin_shape_t,
           compare$0,
           hash_fold_t,
           hash,
           t_of_sexp$1,
           sexp_of_t$3,
           of_string,
           to_string,
           module_name$6]);
      function _bQT_(param)
       {function incr$0(by,counter){return incr(by,expected,counter)}
        check(_vV_);
        caml_call1(Id[12],0);
        incr$0(0,5);
        check(_vW_);
        caml_call1(Id[11],cst_A$1);
        incr$0(0,2);
        check(_vX_);
        var _bQU_=caml_call1(include$16[42],cst_A$2);
        caml_call1(Id[9],_bQU_);
        incr$0(0,4);
        check(_vY_);
        caml_call1(Id[10],0);
        incr$0(0,3);
        check(_vZ_);
        if(caml_call2(Id[21],0,0) === 0)
         {incr$0(0,0);
          check(_v0_);
          if(caml_call2(Id[21],0,1) === -1)
           {incr$0(0,0);
            check(_v1_);
            if(caml_call2(Id[21],1,0) === 1)
             {incr$0(0,0);
              check(_v2_);
              caml_call1(Id[37],1);
              caml_call1(Id[37],0);
              incr$0(_v3_,1);
              check(_v4_);
              var
               bigstring=
                to_bigstring
                 (0,
                  [0,
                   bin_size_t,
                   bin_write_t,
                   bin_read_t$0,
                   bin_read_t,
                   bin_shape_t,
                   bin_writer_t,
                   bin_reader_t,
                   bin_t],
                  0);
              check(_v5_);
              if
               (0
                ===
                of_bigstring
                 ([0,
                   bin_size_t,
                   bin_write_t,
                   bin_read_t$0,
                   bin_read_t,
                   bin_shape_t,
                   bin_writer_t,
                   bin_reader_t,
                   bin_t],
                  bigstring))
               return check(_v6_);
              throw [0,Assert_failure,_v7_]}
            throw [0,Assert_failure,_v8_]}
          throw [0,Assert_failure,_v9_]}
        throw [0,Assert_failure,_v__]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_let_open_T_in_let_open_Id_in_let_check,
        0,
        cst_src_identifiable_ml$0,
        161,
        4,
        1052,
        _bQT_);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst$53,
      0,
      cst_src_identifiable_ml$1,
      104,
      0,
      2582,
      _vH_);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$151);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    function _v$_(M,B)
     {var
       hash_fold_t=M[1],
       hash=M[2],
       t_of_sexp=M[3],
       sexp_of_t=M[4],
       of_string=M[5],
       to_string=M[6],
       compare=M[14],
       pp=M[26],
       bin_size_t=B[1],
       bin_write_t=B[2],
       bin_read_t=B[3],
       bin_read_t$0=B[4],
       bin_shape_t=B[5],
       bin_writer_t=B[6],
       bin_reader_t=B[7],
       bin_t=B[8],
       _bQM_=
        _tb_
         ([0,
           M[7],
           M[8],
           M[9],
           M[10],
           M[11],
           M[12],
           M[13],
           M[14],
           M[15],
           M[16],
           M[17],
           M[18],
           M[19],
           M[20],
           M[21],
           M[22],
           M[23],
           M[24],
           M[25]],
          [0,
           bin_t,
           bin_read_t,
           bin_read_t$0,
           bin_reader_t,
           bin_size_t,
           bin_write_t,
           bin_writer_t,
           bin_shape_t,
           t_of_sexp,
           sexp_of_t]),
       equal=_bQM_[7],
       compare$0=_bQM_[8],
       min=_bQM_[9],
       max=_bQM_[10],
       ascending=_bQM_[11],
       descending=_bQM_[12],
       between=_bQM_[13],
       clamp_exn=_bQM_[14],
       clamp=_bQM_[15],
       validate_lbound=_bQM_[16],
       validate_ubound=_bQM_[17],
       validate_bound=_bQM_[18],
       Replace_polymorphic_compare=_bQM_[19],
       comparator=_bQM_[20],
       Map=_bQM_[21],
       Set=_bQM_[22],
       _bQG_=_bQM_[1],
       _bQH_=_bQM_[2],
       _bQI_=_bQM_[3],
       _bQJ_=_bQM_[4],
       _bQK_=_bQM_[5],
       _bQL_=_bQM_[6],
       include=
        Make_binable
         ([0,
           hash_fold_t,
           bin_t,
           bin_read_t,
           bin_read_t$0,
           bin_reader_t,
           bin_size_t,
           bin_write_t,
           bin_writer_t,
           bin_shape_t,
           t_of_sexp,
           compare,
           sexp_of_t,
           hash]),
       hash_fold_t$0=include[1],
       hash$0=include[2],
       hashable=include[3],
       Table=include[4],
       Hash_set=include[5],
       Hash_queue=include[6];
      return [0,
              bin_t,
              bin_read_t,
              bin_read_t$0,
              bin_reader_t,
              bin_size_t,
              bin_write_t,
              bin_writer_t,
              bin_shape_t,
              t_of_sexp,
              sexp_of_t,
              of_string,
              to_string,
              pp,
              _bQG_,
              _bQH_,
              _bQI_,
              _bQJ_,
              _bQK_,
              _bQL_,
              equal,
              compare$0,
              min,
              max,
              ascending,
              descending,
              between,
              clamp_exn,
              clamp,
              validate_lbound,
              validate_ubound,
              validate_bound,
              Replace_polymorphic_compare,
              comparator,
              Map,
              Set,
              hash_fold_t$0,
              hash$0,
              hashable,
              Table,
              Hash_set,
              Hash_queue]}
    function _wa_(T)
     {var
       bin_t=T[1],
       bin_read_t=T[2],
       bin_read_t$0=T[3],
       bin_reader_t=T[4],
       bin_size_t=T[5],
       bin_write_t=T[6],
       bin_writer_t=T[7],
       bin_shape_t=T[8],
       compare=T[9],
       t_of_sexp=T[10],
       sexp_of_t=T[11],
       comparator=T[12],
       of_string=T[13],
       to_string=T[14],
       hash=T[15],
       module_name=T[16];
      function hash_fold_t$0(state,t)
       {return caml_call2(hash_fold_t,state,caml_call1(hash,t))}
      var
       _bQF_=
        Make_using_comparator$2
         ([0,
           bin_t,
           bin_read_t,
           bin_read_t$0,
           bin_reader_t,
           bin_size_t,
           bin_write_t,
           bin_writer_t,
           bin_shape_t,
           compare,
           hash_fold_t$0,
           hash,
           t_of_sexp,
           sexp_of_t,
           comparator,
           of_string,
           to_string,
           module_name]);
      return [0,
              _bQF_[1],
              _bQF_[2],
              _bQF_[3],
              _bQF_[4],
              _bQF_[5],
              _bQF_[6],
              _bQF_[7],
              _bQF_[8],
              _bQF_[9],
              _bQF_[10],
              _bQF_[11],
              _bQF_[12],
              _bQF_[42],
              _bQF_[14],
              _bQF_[15],
              _bQF_[16],
              _bQF_[17],
              _bQF_[18],
              _bQF_[19],
              _bQF_[20],
              _bQF_[21],
              _bQF_[22],
              _bQF_[23],
              _bQF_[24],
              _bQF_[25],
              _bQF_[26],
              _bQF_[27],
              _bQF_[28],
              _bQF_[29],
              _bQF_[30],
              _bQF_[31],
              _bQF_[32],
              _bQF_[33],
              _bQF_[34],
              _bQF_[35],
              _bQF_[36],
              _bQF_[37],
              _bQF_[38],
              _bQF_[39],
              _bQF_[40],
              _bQF_[41]]}
    function _wb_(_bQD_)
     {var _bQE_=Make_using_comparator$2(_bQD_);
      return [0,
              _bQE_[1],
              _bQE_[2],
              _bQE_[3],
              _bQE_[4],
              _bQE_[5],
              _bQE_[6],
              _bQE_[7],
              _bQE_[8],
              _bQE_[9],
              _bQE_[10],
              _bQE_[11],
              _bQE_[12],
              _bQE_[42],
              _bQE_[14],
              _bQE_[15],
              _bQE_[16],
              _bQE_[17],
              _bQE_[18],
              _bQE_[19],
              _bQE_[20],
              _bQE_[21],
              _bQE_[22],
              _bQE_[23],
              _bQE_[24],
              _bQE_[25],
              _bQE_[26],
              _bQE_[27],
              _bQE_[28],
              _bQE_[29],
              _bQE_[30],
              _bQE_[31],
              _bQE_[32],
              _bQE_[33],
              _bQE_[34],
              _bQE_[35],
              _bQE_[36],
              _bQE_[37],
              _bQE_[38],
              _bQE_[39],
              _bQE_[40],
              _bQE_[41]]}
    function _wc_(T)
     {var
       bin_t=T[1],
       bin_read_t=T[2],
       bin_read_t$0=T[3],
       bin_reader_t=T[4],
       bin_size_t=T[5],
       bin_write_t=T[6],
       bin_writer_t=T[7],
       bin_shape_t=T[8],
       compare=T[9],
       t_of_sexp=T[10],
       sexp_of_t=T[11],
       of_string=T[12],
       to_string=T[13],
       hash=T[14],
       module_name=T[15];
      function hash_fold_t$0(state,t)
       {return caml_call2(hash_fold_t,state,caml_call1(hash,t))}
      var
       _bQC_=
        Make$6
         ([0,
           bin_t,
           bin_read_t,
           bin_read_t$0,
           bin_reader_t,
           bin_size_t,
           bin_write_t,
           bin_writer_t,
           bin_shape_t,
           compare,
           hash_fold_t$0,
           hash,
           t_of_sexp,
           sexp_of_t,
           of_string,
           to_string,
           module_name]);
      return [0,
              _bQC_[1],
              _bQC_[2],
              _bQC_[3],
              _bQC_[4],
              _bQC_[5],
              _bQC_[6],
              _bQC_[7],
              _bQC_[8],
              _bQC_[9],
              _bQC_[10],
              _bQC_[11],
              _bQC_[12],
              _bQC_[42],
              _bQC_[14],
              _bQC_[15],
              _bQC_[16],
              _bQC_[17],
              _bQC_[18],
              _bQC_[19],
              _bQC_[20],
              _bQC_[21],
              _bQC_[22],
              _bQC_[23],
              _bQC_[24],
              _bQC_[25],
              _bQC_[26],
              _bQC_[27],
              _bQC_[28],
              _bQC_[29],
              _bQC_[30],
              _bQC_[31],
              _bQC_[32],
              _bQC_[33],
              _bQC_[34],
              _bQC_[35],
              _bQC_[36],
              _bQC_[37],
              _bQC_[38],
              _bQC_[39],
              _bQC_[40],
              _bQC_[41]]}
    function _wd_(_bQA_)
     {var _bQB_=Make$6(_bQA_);
      return [0,
              _bQB_[1],
              _bQB_[2],
              _bQB_[3],
              _bQB_[4],
              _bQB_[5],
              _bQB_[6],
              _bQB_[7],
              _bQB_[8],
              _bQB_[9],
              _bQB_[10],
              _bQB_[11],
              _bQB_[12],
              _bQB_[42],
              _bQB_[14],
              _bQB_[15],
              _bQB_[16],
              _bQB_[17],
              _bQB_[18],
              _bQB_[19],
              _bQB_[20],
              _bQB_[21],
              _bQB_[22],
              _bQB_[23],
              _bQB_[24],
              _bQB_[25],
              _bQB_[26],
              _bQB_[27],
              _bQB_[28],
              _bQB_[29],
              _bQB_[30],
              _bQB_[31],
              _bQB_[32],
              _bQB_[33],
              _bQB_[34],
              _bQB_[35],
              _bQB_[36],
              _bQB_[37],
              _bQB_[38],
              _bQB_[39],
              _bQB_[40],
              _bQB_[41]]}
    var
     Core_kernel_Identifiable=
      [0,
       function(T)
        {var
          sexp_of_t=T[4],
          of_string=T[5],
          to_string=T[6],
          _bQs_=Make_plain$1([0,T[1],T[4]]),
          equal=_bQs_[7],
          min=_bQs_[9],
          max=_bQs_[10],
          ascending=_bQs_[11],
          descending=_bQs_[12],
          between=_bQs_[13],
          clamp_exn=_bQs_[14],
          clamp=_bQs_[15],
          comparator=_bQs_[16],
          validate_lbound=_bQs_[17],
          validate_ubound=_bQs_[18],
          validate_bound=_bQs_[19],
          Replace_polymorphic_compare=_bQs_[20],
          Map=_bQs_[21],
          Set=_bQs_[22],
          _bQt_=_bQs_[1],
          _bQu_=_bQs_[2],
          _bQv_=_bQs_[3],
          _bQw_=_bQs_[4],
          _bQx_=_bQs_[5],
          _bQy_=_bQs_[6],
          _bQz_=Make_plain$2([0,T[2],T[1],T[4],T[3]]),
          compare=_bQz_[1],
          hash_fold_t=_bQz_[2],
          hash=_bQz_[3],
          hashable=_bQz_[4],
          Table=_bQz_[5],
          Hash_set=_bQz_[6],
          Hash_queue=_bQz_[7],
          include=caml_call1(Base_Pretty_printer[2],[0,T[7],T[6]]),
          pp=include[1];
         return [0,
                 sexp_of_t,
                 of_string,
                 to_string,
                 pp,
                 _bQt_,
                 _bQu_,
                 _bQv_,
                 _bQw_,
                 _bQx_,
                 _bQy_,
                 equal,
                 min,
                 max,
                 ascending,
                 descending,
                 between,
                 clamp_exn,
                 clamp,
                 comparator,
                 validate_lbound,
                 validate_ubound,
                 validate_bound,
                 Replace_polymorphic_compare,
                 Map,
                 Set,
                 compare,
                 hash_fold_t,
                 hash,
                 hashable,
                 Table,
                 Hash_set,
                 Hash_queue]},
       _wd_,
       _wc_,
       _wb_,
       _wa_,
       _v$_];
    caml_register_global
     (7413,Core_kernel_Identifiable,"Core_kernel__Identifiable");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$152);
    caml_call1(Expect_test_collector[4][1],cst_src_int_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$153,cst$54);
    var
     _we_=[0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$87),0,_ce_],0],
     _wf_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_int_ml_6_6),
     group$42=caml_call2(Bin_prot_Shape[6],_wf_,_we_),
     _wg_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$88),
     bin_shape_t$33=caml_call1(caml_call2(Bin_prot_Shape[14],group$42,_wg_),0),
     bin_writer_t$28=[0,bin_size_t$1,bin_write_t$1],
     bin_reader_t$28=[0,bin_read_t$3,bin_read_t$4],
     bin_t$28=[0,bin_shape_t$33,bin_writer_t$28,bin_reader_t$28],
     comparator$4=Base_Int[26],
     compare$28=Base_Int[18],
     include$44=
      caml_call1
       (Stable$2[1][1],
        [0,
         bin_t$28,
         bin_read_t$3,
         bin_read_t$4,
         bin_reader_t$28,
         bin_size_t$1,
         bin_write_t$1,
         bin_writer_t$28,
         bin_shape_t$33,
         compare$28,
         t_of_sexp,
         sexp_of_t$0,
         comparator$4]),
     Map$0=include$44[1],
     Set$0=include$44[2],
     Typename_of_t$3=caml_call1(Typerep_lib_Make_typename[1],[0,name$12]),
     typename_of_t$2=Typename_of_t$3[2],
     name_of_t=Typename_of_t$3[1],
     typerep_of_t$3=[9,[0,name_of_t,[0,typerep_of_int]]],
     _wh_=[0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$89),0,_ce_],0],
     _wi_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_int_ml_20_4),
     group$43=caml_call2(Bin_prot_Shape[6],_wi_,_wh_),
     _wj_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$90),
     bin_shape_t$34=caml_call1(caml_call2(Bin_prot_Shape[14],group$43,_wj_),0),
     bin_writer_t$29=[0,bin_size_t$1,bin_write_t$1],
     bin_reader_t$29=[0,bin_read_t$3,bin_read_t$4],
     bin_t$29=[0,bin_shape_t$34,bin_writer_t$29,bin_reader_t$29],
     Z=
      _v$_
       ([0,
         Base_Int[5],
         Base_Int[6],
         Base_Int[7],
         Base_Int[8],
         Base_Int[9],
         Base_Int[10],
         Base_Int[11],
         Base_Int[12],
         Base_Int[13],
         Base_Int[14],
         Base_Int[15],
         Base_Int[16],
         Base_Int[17],
         Base_Int[18],
         Base_Int[19],
         Base_Int[20],
         Base_Int[21],
         Base_Int[22],
         Base_Int[23],
         Base_Int[24],
         Base_Int[25],
         Base_Int[26],
         Base_Int[27],
         Base_Int[28],
         Base_Int[29],
         Base_Int[30]],
        [0,
         bin_size_t$1,
         bin_write_t$1,
         bin_read_t$3,
         bin_read_t$4,
         bin_shape_t$34,
         bin_writer_t$29,
         bin_reader_t$29,
         bin_t$29]),
     hashable=Z[38],
     bin_shape_t$35=Z[8],
     bin_writer_t$30=Z[7],
     bin_write_t$36=Z[6],
     bin_size_t$36=Z[5],
     bin_reader_t$30=Z[4],
     bin_read_t$73=Z[3],
     bin_read_t$74=Z[2],
     bin_t$30=Z[1],
     Typename_of_t$4=caml_call1(Typerep_lib_Make_typename[1],[0,name$13]),
     typename_of_t$3=Typename_of_t$4[2],
     name_of_t$0=Typename_of_t$4[1],
     typerep_of_t$4=[9,[0,name_of_t$0,[0,typerep_of_t$3]]],
     _wk_=
      [0,
       [0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$91),0,bin_shape_t$35],
       0],
     _wl_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_int_ml_29_2),
     group$44=caml_call2(Bin_prot_Shape[6],_wl_,_wk_),
     _wm_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$92),
     bin_shape_t$36=caml_call1(caml_call2(Bin_prot_Shape[14],group$44,_wm_),0),
     bin_writer_t$31=[0,bin_size_t$36,bin_write_t$36],
     bin_reader_t$31=[0,bin_read_t$74,bin_read_t$73],
     bin_t$31=[0,bin_shape_t$36,bin_writer_t$31,bin_reader_t$31],
     include$45=Base_Int[40],
     t_of_sexp$31=include$45[1],
     sexp_of_t$42=include$45[2],
     compare$29=include$45[3],
     hash_fold_t$14=include$45[4],
     hash$9=include$45[5],
     of_string$0=include$45[6],
     to_string$1=include$45[7],
     to_string_hum$0=include$45[8],
     of_nativeint_trunc=Base_Int[109],
     of_int64_trunc=Base_Int[108],
     to_int32_trunc=Base_Int[107],
     of_int32_trunc=Base_Int[106],
     to_nativeint=Base_Int[105],
     of_nativeint=Base_Int[104],
     of_int64=Base_Int[103],
     to_int32=Base_Int[102],
     of_int32=Base_Int[101],
     to_int=Base_Int[100],
     of_int=Base_Int[99],
     is_pow2=Base_Int[98],
     floor_log2=Base_Int[97],
     ceil_log2=Base_Int[96],
     floor_pow2=Base_Int[95],
     ceil_pow2=Base_Int[94],
     max_value_30_bits=Base_Int[93],
     _wp_=Base_Int[89],
     _wq_=Base_Int[88],
     num_bits$0=Base_Int[87],
     prev$1=Base_Int[63],
     next$1=Base_Int[62],
     _wU_=Base_Int[55],
     _wW_=Base_Int[53],
     _wX_=Base_Int[52],
     _wY_=Base_Int[51],
     _w2_=Base_Int[47],
     _w3_=Base_Int[46],
     _w4_=Base_Int[45],
     _w7_=Base_Int[42],
     _xh_=Base_Int[29],
     _xi_=Base_Int[28],
     _xj_=Base_Int[27],
     comparator$5=Base_Int[26],
     _xk_=Base_Int[25],
     _xl_=Base_Int[24],
     _xm_=Base_Int[23],
     _xn_=Base_Int[22],
     _xo_=Base_Int[21],
     _xp_=Base_Int[20],
     _xq_=Base_Int[19],
     compare$30=Base_Int[18],
     _xr_=Base_Int[17],
     _xs_=Base_Int[16],
     _xt_=Base_Int[15],
     _xu_=Base_Int[14],
     _xv_=Base_Int[13],
     _xw_=Base_Int[12],
     _xx_=Base_Int[11],
     _xy_=Base_Int[10],
     _xz_=Base_Int[9],
     sexp_of_t$43=Base_Int[8],
     t_of_sexp$32=Base_Int[7],
     _xA_=Base_Int[6],
     hash_fold_t$15=Base_Int[5],
     _xB_=Base_Int[4],
     _xC_=Base_Int[3],
     _xE_=Base_Int[1],
     of_float$0=Base_Int[1],
     to_float$0=Base_Int[2],
     of_int_exn$0=Base_Int[3],
     to_int_exn$0=Base_Int[4],
     hash_fold_t$16=Base_Int[5],
     hash$10=Base_Int[6],
     t_of_sexp$33=Base_Int[7],
     sexp_of_t$44=Base_Int[8],
     of_string$1=Base_Int[9],
     to_string$2=Base_Int[10],
     equal$18=Base_Int[17],
     compare$31=Base_Int[18],
     min$0=Base_Int[19],
     max$0=Base_Int[20],
     ascending$0=Base_Int[21],
     descending$0=Base_Int[22],
     between$0=Base_Int[23],
     clamp_exn$0=Base_Int[24],
     clamp$0=Base_Int[25],
     comparator$6=Base_Int[26],
     validate_lbound$0=Base_Int[27],
     validate_ubound$0=Base_Int[28],
     validate_bound$0=Base_Int[29],
     pp$0=Base_Int[30],
     validate_positive$0=Base_Int[31],
     validate_non_negative$0=Base_Int[32],
     validate_negative$0=Base_Int[33],
     validate_non_positive$0=Base_Int[34],
     is_positive$0=Base_Int[35],
     is_non_negative$0=Base_Int[36],
     is_negative$0=Base_Int[37],
     is_non_positive$0=Base_Int[38],
     sign$0=Base_Int[39],
     Hex$0=Base_Int[40],
     to_string_hum$1=Base_Int[41],
     zero$0=Base_Int[42],
     one$0=Base_Int[43],
     minus_one$0=Base_Int[44],
     neg$0=Base_Int[49],
     rem$0=Base_Int[54],
     land$0=Base_Int[56],
     lor$0=Base_Int[57],
     lxor$0=Base_Int[58],
     lnot$0=Base_Int[59],
     lsl$0=Base_Int[60],
     asr$0=Base_Int[61],
     succ$0=Base_Int[62],
     pred$0=Base_Int[63],
     round$0=Base_Int[64],
     round_towards_zero$0=Base_Int[65],
     round_down$0=Base_Int[66],
     round_up$0=Base_Int[67],
     round_nearest$0=Base_Int[68],
     abs$0=Base_Int[69],
     pow$0=Base_Int[70],
     bit_and$0=Base_Int[71],
     bit_or$0=Base_Int[72],
     bit_xor$0=Base_Int[73],
     bit_not$0=Base_Int[74],
     popcount$0=Base_Int[75],
     shift_left$1=Base_Int[76],
     shift_right$1=Base_Int[77],
     decr$1=Base_Int[78],
     incr$1=Base_Int[79],
     of_int32_exn$0=Base_Int[80],
     to_int32_exn$0=Base_Int[81],
     of_int64_exn$0=Base_Int[82],
     to_int64$0=Base_Int[83],
     of_nativeint_exn$0=Base_Int[84],
     to_nativeint_exn$0=Base_Int[85],
     of_float_unchecked$0=Base_Int[86],
     num_bits$1=Base_Int[87],
     max_value$0=Base_Int[88],
     min_value$0=Base_Int[89],
     lsr$0=Base_Int[90],
     shift_right_logical$0=Base_Int[91],
     O$0=Base_Int[92],
     splittable_random$0=Splittable_random[3],
     _wn_=Base_Int[91],
     _wo_=Base_Int[90],
     _wr_=Base_Int[86],
     _ws_=Base_Int[85],
     _wt_=Base_Int[84],
     _wu_=Base_Int[83],
     _wv_=Base_Int[82],
     _ww_=Base_Int[81],
     _wx_=Base_Int[80],
     _wy_=Base_Int[79],
     _wz_=Base_Int[78],
     _wA_=Base_Int[77],
     _wB_=Base_Int[76],
     _wC_=Base_Int[75],
     _wD_=Base_Int[74],
     _wE_=Base_Int[73],
     _wF_=Base_Int[72],
     _wG_=Base_Int[71],
     _wH_=Base_Int[70],
     _wI_=Base_Int[69],
     _wJ_=Base_Int[68],
     _wK_=Base_Int[67],
     _wL_=Base_Int[66],
     _wM_=Base_Int[65],
     _wN_=Base_Int[64],
     _wO_=Base_Int[61],
     _wP_=Base_Int[60],
     _wQ_=Base_Int[59],
     _wR_=Base_Int[58],
     _wS_=Base_Int[57],
     _wT_=Base_Int[56],
     _wV_=Base_Int[54],
     _wZ_=Base_Int[50],
     _w0_=Base_Int[49],
     _w1_=Base_Int[48],
     _w5_=Base_Int[44],
     _w6_=Base_Int[43],
     _w8_=Base_Int[41],
     _w9_=Base_Int[39],
     _w__=Base_Int[38],
     _w$_=Base_Int[37],
     _xa_=Base_Int[36],
     _xb_=Base_Int[35],
     _xc_=Base_Int[34],
     _xd_=Base_Int[33],
     _xe_=Base_Int[32],
     _xf_=Base_Int[31],
     _xg_=Base_Int[30],
     _xD_=Base_Int[2],
     include$46=
      Make_int
       ([0,
         of_float$0,
         to_float$0,
         of_int_exn$0,
         to_int_exn$0,
         hash_fold_t$16,
         hash$10,
         t_of_sexp$33,
         sexp_of_t$44,
         of_string$1,
         to_string$2,
         Base_Int[11],
         Base_Int[12],
         Base_Int[13],
         Base_Int[14],
         Base_Int[15],
         Base_Int[16],
         equal$18,
         compare$31,
         min$0,
         max$0,
         ascending$0,
         descending$0,
         between$0,
         clamp_exn$0,
         clamp$0,
         comparator$6,
         validate_lbound$0,
         validate_ubound$0,
         validate_bound$0,
         pp$0,
         validate_positive$0,
         validate_non_negative$0,
         validate_negative$0,
         validate_non_positive$0,
         is_positive$0,
         is_non_negative$0,
         is_negative$0,
         is_non_positive$0,
         sign$0,
         Hex$0,
         to_string_hum$1,
         zero$0,
         one$0,
         minus_one$0,
         Base_Int[45],
         Base_Int[46],
         Base_Int[47],
         Base_Int[48],
         neg$0,
         Base_Int[50],
         Base_Int[51],
         Base_Int[52],
         Base_Int[53],
         rem$0,
         Base_Int[55],
         land$0,
         lor$0,
         lxor$0,
         lnot$0,
         lsl$0,
         asr$0,
         succ$0,
         pred$0,
         round$0,
         round_towards_zero$0,
         round_down$0,
         round_up$0,
         round_nearest$0,
         abs$0,
         pow$0,
         bit_and$0,
         bit_or$0,
         bit_xor$0,
         bit_not$0,
         popcount$0,
         shift_left$1,
         shift_right$1,
         decr$1,
         incr$1,
         of_int32_exn$0,
         to_int32_exn$0,
         of_int64_exn$0,
         to_int64$0,
         of_nativeint_exn$0,
         to_nativeint_exn$0,
         of_float_unchecked$0,
         num_bits$1,
         max_value$0,
         min_value$0,
         lsr$0,
         shift_right_logical$0,
         O$0,
         splittable_random$0]),
     _xJ_=include$46[5],
     _xK_=include$46[6],
     _xL_=include$46[7],
     _xF_=include$46[1],
     _xG_=include$46[2],
     _xH_=include$46[3],
     _xI_=include$46[4];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$154);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Stable$3=
      [0,
       [0,
        bin_t$28,
        bin_read_t$3,
        bin_read_t$4,
        bin_reader_t$28,
        bin_size_t$1,
        bin_write_t$1,
        bin_writer_t$28,
        bin_shape_t$33,
        compare$28,
        t_of_sexp,
        sexp_of_t$0,
        comparator$4,
        Map$0,
        Set$0]],
     Hash_queue=Z[41],
     Hash_set=Z[40],
     Table=Z[39],
     Set$1=Z[35],
     Map$1=Z[34],
     Replace_polymorphic_compare=
      [0,
       Base_Int[11],
       Base_Int[12],
       Base_Int[13],
       Base_Int[14],
       Base_Int[15],
       Base_Int[16],
       Base_Int[17],
       Base_Int[18],
       Base_Int[19],
       Base_Int[20]],
     Hex$1=
      [0,
       bin_t$31,
       bin_read_t$74,
       bin_read_t$73,
       bin_reader_t$31,
       bin_size_t$36,
       bin_write_t$36,
       bin_writer_t$31,
       bin_shape_t$36,
       t_of_sexp$31,
       sexp_of_t$42,
       compare$29,
       hash_fold_t$14,
       hash$9,
       typerep_of_t$4,
       typename_of_t$3,
       of_string$0,
       to_string$1,
       to_string_hum$0],
     Private$0=Base_Int[110],
     O$1=Base_Int[92],
     include$47=
      [0,
       _xE_,
       _xD_,
       _xC_,
       _xB_,
       _xf_,
       _xe_,
       _xd_,
       _xc_,
       _xb_,
       _xa_,
       _w$_,
       _w__,
       _w9_,
       _w8_,
       _w7_,
       _w6_,
       _w5_,
       _w4_,
       _w3_,
       _w2_,
       _w1_,
       _w0_,
       _wZ_,
       _wY_,
       _wX_,
       _wW_,
       _wV_,
       _wU_,
       _wT_,
       _wS_,
       _wR_,
       _wQ_,
       _wP_,
       _wO_,
       next$1,
       prev$1,
       _wN_,
       _wM_,
       _wL_,
       _wK_,
       _wJ_,
       _wI_,
       _wH_,
       _wG_,
       _wF_,
       _wE_,
       _wD_,
       _wC_,
       _wB_,
       _wA_,
       _wz_,
       _wy_,
       _wx_,
       _ww_,
       _wv_,
       _wu_,
       _wt_,
       _ws_,
       _wr_,
       num_bits$0,
       _wq_,
       _wp_,
       _wo_,
       _wn_,
       O$1,
       max_value_30_bits,
       ceil_pow2,
       floor_pow2,
       ceil_log2,
       floor_log2,
       is_pow2,
       of_int,
       to_int,
       of_int32,
       to_int32,
       of_int64,
       of_nativeint,
       to_nativeint,
       of_int32_trunc,
       to_int32_trunc,
       of_int64_trunc,
       of_nativeint_trunc,
       Private$0,
       typerep_of_t$3,
       typename_of_t$2,
       Hex$1,
       bin_t$30,
       bin_read_t$74,
       bin_read_t$73,
       bin_reader_t$30,
       bin_size_t$36,
       bin_write_t$36,
       bin_writer_t$30,
       bin_shape_t$35,
       t_of_sexp$32,
       sexp_of_t$43,
       _xz_,
       _xy_,
       _xg_,
       _xx_,
       _xw_,
       _xv_,
       _xu_,
       _xt_,
       _xs_,
       _xr_,
       compare$30,
       _xq_,
       _xp_,
       _xo_,
       _xn_,
       _xm_,
       _xl_,
       _xk_,
       _xj_,
       _xi_,
       _xh_,
       Replace_polymorphic_compare,
       comparator$5,
       Map$1,
       Set$1,
       hash_fold_t$15,
       _xA_,
       hashable,
       Table,
       Hash_set,
       Hash_queue,
       _xF_,
       _xG_,
       _xH_,
       _xI_,
       _xJ_,
       _xK_,
       _xL_,
       Stable$3];
    caml_register_global(7414,include$47,"Core_kernel__Int");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$155);
    caml_call1(Expect_test_collector[4][1],cst_src_int64_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$156,cst$55);
    var
     Typename_of_t$5=caml_call1(Typerep_lib_Make_typename[1],[0,name$14]),
     typename_of_t$4=Typename_of_t$5[2],
     name_of_t$1=Typename_of_t$5[1],
     typerep_of_t$5=[9,[0,name_of_t$1,[0,typerep_of_int64]]],
     _xM_=[0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$93),0,_cA_],0],
     _xN_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_int64_ml_6_4),
     group$45=caml_call2(Bin_prot_Shape[6],_xN_,_xM_),
     _xO_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$94),
     bin_shape_t$37=caml_call1(caml_call2(Bin_prot_Shape[14],group$45,_xO_),0),
     bin_writer_t$32=[0,_be_,_cC_],
     bin_reader_t$32=[0,_cE_,_cF_],
     bin_t$32=[0,bin_shape_t$37,bin_writer_t$32,bin_reader_t$32],
     include$162=
      _v$_
       ([0,
         Base_Int64[5],
         Base_Int64[6],
         Base_Int64[7],
         Base_Int64[8],
         Base_Int64[9],
         Base_Int64[10],
         Base_Int64[11],
         Base_Int64[12],
         Base_Int64[13],
         Base_Int64[14],
         Base_Int64[15],
         Base_Int64[16],
         Base_Int64[17],
         Base_Int64[18],
         Base_Int64[19],
         Base_Int64[20],
         Base_Int64[21],
         Base_Int64[22],
         Base_Int64[23],
         Base_Int64[24],
         Base_Int64[25],
         Base_Int64[26],
         Base_Int64[27],
         Base_Int64[28],
         Base_Int64[29],
         Base_Int64[30]],
        [0,
         _be_,
         _cC_,
         _cE_,
         _cF_,
         bin_shape_t$37,
         bin_writer_t$32,
         bin_reader_t$32,
         bin_t$32]),
     bin_t$33=include$162[1],
     bin_read_t$75=include$162[2],
     bin_read_t$76=include$162[3],
     bin_reader_t$33=include$162[4],
     bin_size_t$37=include$162[5],
     bin_write_t$37=include$162[6],
     bin_writer_t$33=include$162[7],
     bin_shape_t$38=include$162[8],
     Replace_polymorphic_compare$0=include$162[32],
     Map$2=include$162[34],
     Set$2=include$162[35],
     hashable$0=include$162[38],
     Table$0=include$162[39],
     Hash_set$0=include$162[40],
     Hash_queue$0=include$162[41],
     Typename_of_t$6=caml_call1(Typerep_lib_Make_typename[1],[0,name$15]),
     typename_of_t$5=Typename_of_t$6[2],
     name_of_t$2=Typename_of_t$6[1],
     typerep_of_t$6=[9,[0,name_of_t$2,[0,typerep_of_t$5]]],
     _xP_=
      [0,
       [0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$95),0,bin_shape_t$38],
       0],
     _xQ_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_int64_ml_10_2),
     group$46=caml_call2(Bin_prot_Shape[6],_xQ_,_xP_),
     _xR_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$96),
     bin_shape_t$39=caml_call1(caml_call2(Bin_prot_Shape[14],group$46,_xR_),0),
     bin_writer_t$34=[0,bin_size_t$37,bin_write_t$37],
     bin_reader_t$34=[0,bin_read_t$75,bin_read_t$76],
     bin_t$34=[0,bin_shape_t$39,bin_writer_t$34,bin_reader_t$34],
     include$48=Base_Int64[40],
     t_of_sexp$34=include$48[1],
     sexp_of_t$45=include$48[2],
     compare$32=include$48[3],
     hash_fold_t$17=include$48[4],
     hash$11=include$48[5],
     of_string$2=include$48[6],
     to_string$3=include$48[7],
     to_string_hum$2=include$48[8],
     float_of_bits=Base_Int64[104],
     bits_of_float=Base_Int64[103],
     to_nativeint_trunc=Base_Int64[102],
     to_int32_trunc$0=Base_Int64[101],
     to_int_trunc=Base_Int64[100],
     of_int64$0=Base_Int64[99],
     to_nativeint$0=Base_Int64[98],
     of_nativeint$0=Base_Int64[97],
     to_int32$0=Base_Int64[96],
     of_int32$0=Base_Int64[95],
     to_int$0=Base_Int64[94],
     of_int$0=Base_Int64[93],
     _xV_=Base_Int64[89],
     _xW_=Base_Int64[88],
     _xX_=Base_Int64[87],
     _yj_=Base_Int64[63],
     _yk_=Base_Int64[62],
     _yA_=Base_Int64[46],
     _yB_=Base_Int64[45],
     _yC_=Base_Int64[44],
     _yD_=Base_Int64[43],
     _yE_=Base_Int64[42],
     _yQ_=Base_Int64[29],
     _yR_=Base_Int64[28],
     _yS_=Base_Int64[27],
     _yT_=Base_Int64[26],
     _yU_=Base_Int64[25],
     _yV_=Base_Int64[24],
     _yW_=Base_Int64[23],
     _yX_=Base_Int64[22],
     _yY_=Base_Int64[21],
     _yZ_=Base_Int64[20],
     _y0_=Base_Int64[19],
     _y1_=Base_Int64[18],
     _y2_=Base_Int64[17],
     _y3_=Base_Int64[16],
     _y4_=Base_Int64[15],
     _y5_=Base_Int64[14],
     _y6_=Base_Int64[13],
     _y7_=Base_Int64[12],
     _y8_=Base_Int64[11],
     _y9_=Base_Int64[10],
     _y$_=Base_Int64[8],
     _za_=Base_Int64[7],
     _zb_=Base_Int64[6],
     _zc_=Base_Int64[5],
     _zd_=Base_Int64[4],
     of_float$1=Base_Int64[1],
     to_float$1=Base_Int64[2],
     of_int_exn$1=Base_Int64[3],
     to_int_exn$1=Base_Int64[4],
     hash_fold_t$18=Base_Int64[5],
     hash$12=Base_Int64[6],
     t_of_sexp$35=Base_Int64[7],
     sexp_of_t$46=Base_Int64[8],
     of_string$3=Base_Int64[9],
     to_string$4=Base_Int64[10],
     equal$19=Base_Int64[17],
     compare$33=Base_Int64[18],
     min$1=Base_Int64[19],
     max$1=Base_Int64[20],
     ascending$1=Base_Int64[21],
     descending$1=Base_Int64[22],
     between$1=Base_Int64[23],
     clamp_exn$1=Base_Int64[24],
     clamp$1=Base_Int64[25],
     comparator$7=Base_Int64[26],
     validate_lbound$1=Base_Int64[27],
     validate_ubound$1=Base_Int64[28],
     validate_bound$1=Base_Int64[29],
     pp$1=Base_Int64[30],
     validate_positive$1=Base_Int64[31],
     validate_non_negative$1=Base_Int64[32],
     validate_negative$1=Base_Int64[33],
     validate_non_positive$1=Base_Int64[34],
     is_positive$1=Base_Int64[35],
     is_non_negative$1=Base_Int64[36],
     is_negative$1=Base_Int64[37],
     is_non_positive$1=Base_Int64[38],
     sign$1=Base_Int64[39],
     Hex$2=Base_Int64[40],
     to_string_hum$3=Base_Int64[41],
     zero$1=Base_Int64[42],
     one$1=Base_Int64[43],
     minus_one$1=Base_Int64[44],
     neg$1=Base_Int64[49],
     rem$1=Base_Int64[54],
     land$1=Base_Int64[56],
     lor$1=Base_Int64[57],
     lxor$1=Base_Int64[58],
     lnot$1=Base_Int64[59],
     lsl$1=Base_Int64[60],
     asr$1=Base_Int64[61],
     succ$1=Base_Int64[62],
     pred$1=Base_Int64[63],
     round$1=Base_Int64[64],
     round_towards_zero$1=Base_Int64[65],
     round_down$1=Base_Int64[66],
     round_up$1=Base_Int64[67],
     round_nearest$1=Base_Int64[68],
     abs$1=Base_Int64[69],
     pow$1=Base_Int64[70],
     bit_and$1=Base_Int64[71],
     bit_or$1=Base_Int64[72],
     bit_xor$1=Base_Int64[73],
     bit_not$1=Base_Int64[74],
     popcount$1=Base_Int64[75],
     shift_left$2=Base_Int64[76],
     shift_right$2=Base_Int64[77],
     decr$2=Base_Int64[78],
     incr$2=Base_Int64[79],
     of_int32_exn$1=Base_Int64[80],
     to_int32_exn$1=Base_Int64[81],
     of_int64_exn$1=Base_Int64[82],
     to_int64$1=Base_Int64[83],
     of_nativeint_exn$1=Base_Int64[84],
     to_nativeint_exn$1=Base_Int64[85],
     of_float_unchecked$1=Base_Int64[86],
     num_bits$2=Base_Int64[87],
     max_value$1=Base_Int64[88],
     min_value$1=Base_Int64[89],
     lsr$1=Base_Int64[90],
     shift_right_logical$1=Base_Int64[91],
     O$2=Base_Int64[92],
     splittable_random$1=Splittable_random[6],
     _xS_=Base_Int64[92],
     _xT_=Base_Int64[91],
     _xU_=Base_Int64[90],
     _xY_=Base_Int64[86],
     _xZ_=Base_Int64[85],
     _x0_=Base_Int64[84],
     _x1_=Base_Int64[83],
     _x2_=Base_Int64[82],
     _x3_=Base_Int64[81],
     _x4_=Base_Int64[80],
     _x5_=Base_Int64[79],
     _x6_=Base_Int64[78],
     _x7_=Base_Int64[77],
     _x8_=Base_Int64[76],
     _x9_=Base_Int64[75],
     _x__=Base_Int64[74],
     _x$_=Base_Int64[73],
     _ya_=Base_Int64[72],
     _yb_=Base_Int64[71],
     _yc_=Base_Int64[70],
     _yd_=Base_Int64[69],
     _ye_=Base_Int64[68],
     _yf_=Base_Int64[67],
     _yg_=Base_Int64[66],
     _yh_=Base_Int64[65],
     _yi_=Base_Int64[64],
     _yl_=Base_Int64[61],
     _ym_=Base_Int64[60],
     _yn_=Base_Int64[59],
     _yo_=Base_Int64[58],
     _yp_=Base_Int64[57],
     _yq_=Base_Int64[56],
     _yr_=Base_Int64[55],
     _ys_=Base_Int64[54],
     _yt_=Base_Int64[53],
     _yu_=Base_Int64[52],
     _yv_=Base_Int64[51],
     _yw_=Base_Int64[50],
     _yx_=Base_Int64[49],
     _yy_=Base_Int64[48],
     _yz_=Base_Int64[47],
     _yF_=Base_Int64[41],
     _yG_=Base_Int64[39],
     _yH_=Base_Int64[38],
     _yI_=Base_Int64[37],
     _yJ_=Base_Int64[36],
     _yK_=Base_Int64[35],
     _yL_=Base_Int64[34],
     _yM_=Base_Int64[33],
     _yN_=Base_Int64[32],
     _yO_=Base_Int64[31],
     _yP_=Base_Int64[30],
     _y__=Base_Int64[9],
     _ze_=Base_Int64[3],
     _zf_=Base_Int64[2],
     _zg_=Base_Int64[1],
     include$49=
      Make_int
       ([0,
         of_float$1,
         to_float$1,
         of_int_exn$1,
         to_int_exn$1,
         hash_fold_t$18,
         hash$12,
         t_of_sexp$35,
         sexp_of_t$46,
         of_string$3,
         to_string$4,
         Base_Int64[11],
         Base_Int64[12],
         Base_Int64[13],
         Base_Int64[14],
         Base_Int64[15],
         Base_Int64[16],
         equal$19,
         compare$33,
         min$1,
         max$1,
         ascending$1,
         descending$1,
         between$1,
         clamp_exn$1,
         clamp$1,
         comparator$7,
         validate_lbound$1,
         validate_ubound$1,
         validate_bound$1,
         pp$1,
         validate_positive$1,
         validate_non_negative$1,
         validate_negative$1,
         validate_non_positive$1,
         is_positive$1,
         is_non_negative$1,
         is_negative$1,
         is_non_positive$1,
         sign$1,
         Hex$2,
         to_string_hum$3,
         zero$1,
         one$1,
         minus_one$1,
         Base_Int64[45],
         Base_Int64[46],
         Base_Int64[47],
         Base_Int64[48],
         neg$1,
         Base_Int64[50],
         Base_Int64[51],
         Base_Int64[52],
         Base_Int64[53],
         rem$1,
         Base_Int64[55],
         land$1,
         lor$1,
         lxor$1,
         lnot$1,
         lsl$1,
         asr$1,
         succ$1,
         pred$1,
         round$1,
         round_towards_zero$1,
         round_down$1,
         round_up$1,
         round_nearest$1,
         abs$1,
         pow$1,
         bit_and$1,
         bit_or$1,
         bit_xor$1,
         bit_not$1,
         popcount$1,
         shift_left$2,
         shift_right$2,
         decr$2,
         incr$2,
         of_int32_exn$1,
         to_int32_exn$1,
         of_int64_exn$1,
         to_int64$1,
         of_nativeint_exn$1,
         to_nativeint_exn$1,
         of_float_unchecked$1,
         num_bits$2,
         max_value$1,
         min_value$1,
         lsr$1,
         shift_right_logical$1,
         O$2,
         splittable_random$1]),
     _zi_=include$49[2],
     _zh_=include$49[1],
     _zj_=include$49[3],
     _zk_=include$49[4],
     _zl_=include$49[5],
     _zm_=include$49[6],
     _zn_=include$49[7];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$157);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Int64=
      [0,
       _zg_,
       _zf_,
       _ze_,
       _zd_,
       _yO_,
       _yN_,
       _yM_,
       _yL_,
       _yK_,
       _yJ_,
       _yI_,
       _yH_,
       _yG_,
       _yF_,
       _yE_,
       _yD_,
       _yC_,
       _yB_,
       _yA_,
       _yz_,
       _yy_,
       _yx_,
       _yw_,
       _yv_,
       _yu_,
       _yt_,
       _ys_,
       _yr_,
       _yq_,
       _yp_,
       _yo_,
       _yn_,
       _ym_,
       _yl_,
       _yk_,
       _yj_,
       _yi_,
       _yh_,
       _yg_,
       _yf_,
       _ye_,
       _yd_,
       _yc_,
       _yb_,
       _ya_,
       _x$_,
       _x__,
       _x9_,
       _x8_,
       _x7_,
       _x6_,
       _x5_,
       _x4_,
       _x3_,
       _x2_,
       _x1_,
       _x0_,
       _xZ_,
       _xY_,
       _xX_,
       _xW_,
       _xV_,
       _xU_,
       _xT_,
       _xS_,
       of_int$0,
       to_int$0,
       of_int32$0,
       to_int32$0,
       of_nativeint$0,
       to_nativeint$0,
       of_int64$0,
       to_int_trunc,
       to_int32_trunc$0,
       to_nativeint_trunc,
       bits_of_float,
       float_of_bits,
       typerep_of_t$5,
       typename_of_t$4,
       [0,
        bin_t$34,
        bin_read_t$75,
        bin_read_t$76,
        bin_reader_t$34,
        bin_size_t$37,
        bin_write_t$37,
        bin_writer_t$34,
        bin_shape_t$39,
        t_of_sexp$34,
        sexp_of_t$45,
        compare$32,
        hash_fold_t$17,
        hash$11,
        typerep_of_t$6,
        typename_of_t$5,
        of_string$2,
        to_string$3,
        to_string_hum$2],
       bin_t$33,
       bin_read_t$75,
       bin_read_t$76,
       bin_reader_t$33,
       bin_size_t$37,
       bin_write_t$37,
       bin_writer_t$33,
       bin_shape_t$38,
       _za_,
       _y$_,
       _y__,
       _y9_,
       _yP_,
       _y8_,
       _y7_,
       _y6_,
       _y5_,
       _y4_,
       _y3_,
       _y2_,
       _y1_,
       _y0_,
       _yZ_,
       _yY_,
       _yX_,
       _yW_,
       _yV_,
       _yU_,
       _yS_,
       _yR_,
       _yQ_,
       Replace_polymorphic_compare$0,
       _yT_,
       Map$2,
       Set$2,
       _zc_,
       _zb_,
       hashable$0,
       Table$0,
       Hash_set$0,
       Hash_queue$0,
       _zh_,
       _zi_,
       _zj_,
       _zk_,
       _zl_,
       _zm_,
       _zn_];
    caml_register_global(7416,Core_kernel_Int64,"Core_kernel__Int64");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$158);
    caml_call1(Expect_test_collector[4][1],cst_src_stable_comparable_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$159,cst$56);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$160);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Stable_comparable=[0];
    caml_register_global
     (7417,Core_kernel_Stable_comparable,"Core_kernel__Stable_comparable");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$161);
    caml_call1(Expect_test_collector[4][1],cst_src_int_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$162,cst$57);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$163);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Int_intf=[0];
    caml_register_global(7418,Core_kernel_Int_intf,"Core_kernel__Int_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$164);
    caml_call1(Expect_test_collector[4][1],cst_src_int63_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$165,cst$58);
    var
     of_binable$0=Base_Int63_emul[105][1],
     to_binable$0=Base_Int63_emul[105][2],
     include$50=
      caml_call1
       (caml_call1
         (Stable$0[1][1],
          [0,
           bin_shape_t$38,
           bin_size_t$37,
           bin_write_t$37,
           bin_read_t$75,
           bin_read_t$76]),
        [0,to_binable$0,of_binable$0]),
     bin_size_t$38=include$50[1],
     bin_write_t$38=include$50[2],
     bin_read_t$77=include$50[3],
     bin_read_t$78=include$50[4],
     bin_shape_t$40=include$50[5],
     bin_writer_t$35=include$50[6],
     bin_reader_t$35=include$50[7],
     bin_t$35=include$50[8],
     Bin_emulated=
      [0,
       bin_size_t$38,
       bin_write_t$38,
       bin_read_t$77,
       bin_read_t$78,
       bin_shape_t$40,
       bin_writer_t$35,
       bin_reader_t$35,
       bin_t$35],
     include$51=
      0 === Base_Int63[109][2]
       ?[0,
         bin_size_t$36,
         bin_write_t$36,
         bin_read_t$74,
         bin_read_t$73,
         bin_shape_t$35,
         bin_writer_t$30,
         bin_reader_t$30,
         bin_t$30]
       :Bin_emulated,
     bin_size_t$39=include$51[1],
     bin_write_t$39=include$51[2],
     bin_read_t$79=include$51[3],
     bin_read_t$80=include$51[4],
     bin_writer_t$36=include$51[6],
     bin_reader_t$36=include$51[7],
     bin_t$36=include$51[8],
     bin_shape_t$41=Bin_prot_Shape[32],
     t_of_sexp$36=Base_Int63[7],
     sexp_of_t$47=Base_Int63[8],
     comparator$8=Base_Int63[26],
     compare$34=Base_Int63[18],
     include$52=
      caml_call1
       (Stable$2[1][1],
        [0,
         bin_t$36,
         bin_read_t$79,
         bin_read_t$80,
         bin_reader_t$36,
         bin_size_t$39,
         bin_write_t$39,
         bin_writer_t$36,
         bin_shape_t$41,
         compare$34,
         t_of_sexp$36,
         sexp_of_t$47,
         comparator$8]),
     Map$3=include$52[1],
     Set$3=include$52[2],
     _zo_=
      0 === Base_Int63[109][2]
       ?[0,typerep_of_t$3,typename_of_t$2]
       :[0,typerep_of_t$5,typename_of_t$4],
     typerep_of_t$7=_zo_[1],
     typename_of_t$6=_zo_[2],
     include$163=
      _v$_
       ([0,
         Base_Int63[5],
         Base_Int63[6],
         Base_Int63[7],
         Base_Int63[8],
         Base_Int63[9],
         Base_Int63[10],
         Base_Int63[11],
         Base_Int63[12],
         Base_Int63[13],
         Base_Int63[14],
         Base_Int63[15],
         Base_Int63[16],
         Base_Int63[17],
         Base_Int63[18],
         Base_Int63[19],
         Base_Int63[20],
         Base_Int63[21],
         Base_Int63[22],
         Base_Int63[23],
         Base_Int63[24],
         Base_Int63[25],
         Base_Int63[26],
         Base_Int63[27],
         Base_Int63[28],
         Base_Int63[29],
         Base_Int63[30]],
        [0,
         bin_size_t$39,
         bin_write_t$39,
         bin_read_t$79,
         bin_read_t$80,
         bin_shape_t$41,
         bin_writer_t$36,
         bin_reader_t$36,
         bin_t$36]),
     bin_t$37=include$163[1],
     bin_read_t$81=include$163[2],
     bin_read_t$82=include$163[3],
     bin_reader_t$37=include$163[4],
     bin_size_t$40=include$163[5],
     bin_write_t$40=include$163[6],
     bin_writer_t$37=include$163[7],
     bin_shape_t$42=include$163[8],
     Replace_polymorphic_compare$1=include$163[32],
     Map$4=include$163[34],
     Set$4=include$163[35],
     hashable$1=include$163[38],
     Table$1=include$163[39],
     Hash_set$1=include$163[40],
     Hash_queue$1=include$163[41],
     Typename_of_t$7=caml_call1(Typerep_lib_Make_typename[1],[0,name$16]),
     typename_of_t$7=Typename_of_t$7[2],
     name_of_t$3=Typename_of_t$7[1],
     typerep_of_t$8=[9,[0,name_of_t$3,[0,typerep_of_t$7]]],
     _zp_=
      [0,
       [0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$97),0,bin_shape_t$42],
       0],
     _zq_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_int63_ml_50_2),
     group$47=caml_call2(Bin_prot_Shape[6],_zq_,_zp_),
     _zr_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$98),
     bin_shape_t$43=caml_call1(caml_call2(Bin_prot_Shape[14],group$47,_zr_),0),
     bin_writer_t$38=[0,bin_size_t$40,bin_write_t$40],
     bin_reader_t$38=[0,bin_read_t$81,bin_read_t$82],
     bin_t$38=[0,bin_shape_t$43,bin_writer_t$38,bin_reader_t$38],
     include$53=Base_Int63[40],
     t_of_sexp$37=include$53[1],
     sexp_of_t$48=include$53[2],
     compare$35=include$53[3],
     hash_fold_t$19=include$53[4],
     hash$13=include$53[5],
     of_string$4=include$53[6],
     to_string$5=include$53[7],
     to_string_hum$4=include$53[8],
     Private$1=Base_Int63[109],
     floor_log2$0=Base_Int63[108],
     random_incl=Base_Int63[107],
     random=Base_Int63[106],
     to_nativeint_trunc$0=Base_Int63[105],
     of_nativeint_trunc$0=Base_Int63[104],
     of_int64_trunc$0=Base_Int63[103],
     to_int32_trunc$1=Base_Int63[102],
     to_int_trunc$0=Base_Int63[101],
     to_nativeint$1=Base_Int63[100],
     of_nativeint$1=Base_Int63[99],
     of_int64$1=Base_Int63[98],
     to_int32$1=Base_Int63[97],
     of_int32$1=Base_Int63[96],
     to_int$1=Base_Int63[95],
     of_int$1=Base_Int63[94],
     Overflow_exn=Base_Int63[93],
     _zv_=Base_Int63[89],
     _zw_=Base_Int63[88],
     _zB_=Base_Int63[83],
     _zC_=Base_Int63[82],
     _zH_=Base_Int63[77],
     _zI_=Base_Int63[76],
     _zK_=Base_Int63[74],
     _zM_=Base_Int63[72],
     _zN_=Base_Int63[71],
     _zP_=Base_Int63[69],
     pred$2=Base_Int63[63],
     succ$2=Base_Int63[62],
     _z1_=Base_Int63[55],
     _z2_=Base_Int63[54],
     _z3_=Base_Int63[53],
     _z5_=Base_Int63[51],
     _z7_=Base_Int63[49],
     _z9_=Base_Int63[47],
     _z__=Base_Int63[46],
     _z$_=Base_Int63[45],
     one$2=Base_Int63[43],
     epoch=Base_Int63[42],
     validate_bound$2=Base_Int63[29],
     validate_ubound$2=Base_Int63[28],
     validate_lbound$2=Base_Int63[27],
     comparator$9=Base_Int63[26],
     clamp$2=Base_Int63[25],
     clamp_exn$2=Base_Int63[24],
     between$2=Base_Int63[23],
     descending$2=Base_Int63[22],
     ascending$2=Base_Int63[21],
     max$2=Base_Int63[20],
     min$2=Base_Int63[19],
     compare$36=Base_Int63[18],
     equal$20=Base_Int63[17],
     _Am_=Base_Int63[16],
     _An_=Base_Int63[15],
     _Ao_=Base_Int63[14],
     _Ap_=Base_Int63[13],
     _Aq_=Base_Int63[12],
     _Ar_=Base_Int63[11],
     _As_=Base_Int63[10],
     _At_=Base_Int63[9],
     sexp_of_t$49=Base_Int63[8],
     t_of_sexp$38=Base_Int63[7],
     _Au_=Base_Int63[6],
     _Av_=Base_Int63[5],
     to_int_exn$2=Base_Int63[4],
     _Aw_=Base_Int63[3],
     _Ax_=Base_Int63[2],
     _Ay_=Base_Int63[1],
     of_float$2=Base_Int63[1],
     to_float$2=Base_Int63[2],
     of_int_exn$2=Base_Int63[3],
     to_int_exn$3=Base_Int63[4],
     hash_fold_t$20=Base_Int63[5],
     hash$14=Base_Int63[6],
     t_of_sexp$39=Base_Int63[7],
     sexp_of_t$50=Base_Int63[8],
     of_string$5=Base_Int63[9],
     to_string$6=Base_Int63[10],
     equal$21=Base_Int63[17],
     compare$37=Base_Int63[18],
     min$3=Base_Int63[19],
     max$3=Base_Int63[20],
     ascending$3=Base_Int63[21],
     descending$3=Base_Int63[22],
     between$3=Base_Int63[23],
     clamp_exn$3=Base_Int63[24],
     clamp$3=Base_Int63[25],
     comparator$10=Base_Int63[26],
     validate_lbound$3=Base_Int63[27],
     validate_ubound$3=Base_Int63[28],
     validate_bound$3=Base_Int63[29],
     pp$2=Base_Int63[30],
     validate_positive$2=Base_Int63[31],
     validate_non_negative$2=Base_Int63[32],
     validate_negative$2=Base_Int63[33],
     validate_non_positive$2=Base_Int63[34],
     is_positive$2=Base_Int63[35],
     is_non_negative$2=Base_Int63[36],
     is_negative$2=Base_Int63[37],
     is_non_positive$2=Base_Int63[38],
     sign$2=Base_Int63[39],
     Hex$3=Base_Int63[40],
     to_string_hum$5=Base_Int63[41],
     zero$2=Base_Int63[42],
     one$3=Base_Int63[43],
     minus_one$2=Base_Int63[44],
     neg$2=Base_Int63[49],
     rem$2=Base_Int63[54],
     land$2=Base_Int63[56],
     lor$2=Base_Int63[57],
     lxor$2=Base_Int63[58],
     lnot$2=Base_Int63[59],
     lsl$2=Base_Int63[60],
     asr$2=Base_Int63[61],
     succ$3=Base_Int63[62],
     pred$3=Base_Int63[63],
     round$2=Base_Int63[64],
     round_towards_zero$2=Base_Int63[65],
     round_down$2=Base_Int63[66],
     round_up$2=Base_Int63[67],
     round_nearest$2=Base_Int63[68],
     abs$2=Base_Int63[69],
     pow$2=Base_Int63[70],
     bit_and$2=Base_Int63[71],
     bit_or$2=Base_Int63[72],
     bit_xor$2=Base_Int63[73],
     bit_not$2=Base_Int63[74],
     popcount$2=Base_Int63[75],
     shift_left$3=Base_Int63[76],
     shift_right$3=Base_Int63[77],
     decr$3=Base_Int63[78],
     incr$3=Base_Int63[79],
     of_int32_exn$2=Base_Int63[80],
     to_int32_exn$2=Base_Int63[81],
     of_int64_exn$2=Base_Int63[82],
     to_int64$2=Base_Int63[83],
     of_nativeint_exn$2=Base_Int63[84],
     to_nativeint_exn$2=Base_Int63[85],
     of_float_unchecked$2=Base_Int63[86],
     num_bits$3=Base_Int63[87],
     max_value$2=Base_Int63[88],
     min_value$2=Base_Int63[89],
     lsr$2=Base_Int63[90],
     shift_right_logical$2=Base_Int63[91],
     O$3=Base_Int63[92],
     splittable_random$2=Splittable_random[5],
     _zs_=Base_Int63[92],
     _zt_=Base_Int63[91],
     _zu_=Base_Int63[90],
     _zx_=Base_Int63[87],
     _zy_=Base_Int63[86],
     _zz_=Base_Int63[85],
     _zA_=Base_Int63[84],
     _zD_=Base_Int63[81],
     _zE_=Base_Int63[80],
     _zF_=Base_Int63[79],
     _zG_=Base_Int63[78],
     _zJ_=Base_Int63[75],
     _zL_=Base_Int63[73],
     _zO_=Base_Int63[70],
     _zQ_=Base_Int63[68],
     _zR_=Base_Int63[67],
     _zS_=Base_Int63[66],
     _zT_=Base_Int63[65],
     _zU_=Base_Int63[64],
     _zV_=Base_Int63[61],
     _zW_=Base_Int63[60],
     _zX_=Base_Int63[59],
     _zY_=Base_Int63[58],
     _zZ_=Base_Int63[57],
     _z0_=Base_Int63[56],
     _z4_=Base_Int63[52],
     _z6_=Base_Int63[50],
     _z8_=Base_Int63[48],
     _Aa_=Base_Int63[44],
     _Ab_=Base_Int63[41],
     _Ac_=Base_Int63[39],
     _Ad_=Base_Int63[38],
     _Ae_=Base_Int63[37],
     _Af_=Base_Int63[36],
     _Ag_=Base_Int63[35],
     _Ah_=Base_Int63[34],
     _Ai_=Base_Int63[33],
     _Aj_=Base_Int63[32],
     _Ak_=Base_Int63[31],
     _Al_=Base_Int63[30],
     include$54=
      Make_int
       ([0,
         of_float$2,
         to_float$2,
         of_int_exn$2,
         to_int_exn$3,
         hash_fold_t$20,
         hash$14,
         t_of_sexp$39,
         sexp_of_t$50,
         of_string$5,
         to_string$6,
         Base_Int63[11],
         Base_Int63[12],
         Base_Int63[13],
         Base_Int63[14],
         Base_Int63[15],
         Base_Int63[16],
         equal$21,
         compare$37,
         min$3,
         max$3,
         ascending$3,
         descending$3,
         between$3,
         clamp_exn$3,
         clamp$3,
         comparator$10,
         validate_lbound$3,
         validate_ubound$3,
         validate_bound$3,
         pp$2,
         validate_positive$2,
         validate_non_negative$2,
         validate_negative$2,
         validate_non_positive$2,
         is_positive$2,
         is_non_negative$2,
         is_negative$2,
         is_non_positive$2,
         sign$2,
         Hex$3,
         to_string_hum$5,
         zero$2,
         one$3,
         minus_one$2,
         Base_Int63[45],
         Base_Int63[46],
         Base_Int63[47],
         Base_Int63[48],
         neg$2,
         Base_Int63[50],
         Base_Int63[51],
         Base_Int63[52],
         Base_Int63[53],
         rem$2,
         Base_Int63[55],
         land$2,
         lor$2,
         lxor$2,
         lnot$2,
         lsl$2,
         asr$2,
         succ$3,
         pred$3,
         round$2,
         round_towards_zero$2,
         round_down$2,
         round_up$2,
         round_nearest$2,
         abs$2,
         pow$2,
         bit_and$2,
         bit_or$2,
         bit_xor$2,
         bit_not$2,
         popcount$2,
         shift_left$3,
         shift_right$3,
         decr$3,
         incr$3,
         of_int32_exn$2,
         to_int32_exn$2,
         of_int64_exn$2,
         to_int64$2,
         of_nativeint_exn$2,
         to_nativeint_exn$2,
         of_float_unchecked$2,
         num_bits$3,
         max_value$2,
         min_value$2,
         lsr$2,
         shift_right_logical$2,
         O$3,
         splittable_random$2]),
     _AC_=include$54[4],
     _AF_=include$54[7],
     _Az_=include$54[1],
     _AA_=include$54[2],
     _AB_=include$54[3],
     _AD_=include$54[5],
     _AE_=include$54[6],
     Expect_test_collector$0=
      caml_call1
       (Expect_test_collector[2],
        [0,
         Expect_test_config[2],
         Expect_test_config[3],
         Expect_test_config[4],
         Expect_test_config[5],
         Expect_test_config[6]]);
    function _AG_(ppx_expect_instance_001)
     {var
       _bQp_=caml_call1(Bin_prot_Shape[21],bin_shape_t$42),
       _bQq_=caml_call1(Bin_shape_lib_Bin_shape[18][4],_bQp_);
      caml_call1(Stdlib[31],_bQq_);
      var
       _bQr_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_int63_ml$0),
         67,
         2168,
         2172,
         2178];
      return caml_call2
              (Expect_test_collector$0[1][1],ppx_expect_instance_001,_bQr_)}
    var
     _AH_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_int63_ml$1),
       67,
       2168,
       2178,
       2216],
     _AK_=
      [0,
       [0,
        _AJ_,
        _AI_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_int63_ml$2),
         67,
         2168,
         2172,
         2178],
        _AH_],
       0],
     _AL_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_int63_ml$4),
       65,
       2115,
       2115,
       2217],
     _AM_=
      caml_call1
       (Expect_test_common_File[4][3],cst_bc3eae4ea7a5ffd8ecbc55e200990c70);
    caml_call8
     (Expect_test_collector$0[2],
      _AM_,
      _AL_,
      cst_src_int63_ml$3,
      0,
      0,
      _AK_,
      Inline_test_config,
      _AG_);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$166);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Stable$4=
      [0,
       [0,
        bin_t$36,
        bin_read_t$79,
        bin_read_t$80,
        bin_reader_t$36,
        bin_size_t$39,
        bin_write_t$39,
        bin_writer_t$36,
        bin_shape_t$41,
        compare$34,
        t_of_sexp$36,
        sexp_of_t$47,
        comparator$8,
        Map$3,
        Set$3]],
     Hex$4=
      [0,
       bin_t$38,
       bin_read_t$81,
       bin_read_t$82,
       bin_reader_t$38,
       bin_size_t$40,
       bin_write_t$40,
       bin_writer_t$38,
       bin_shape_t$43,
       t_of_sexp$37,
       sexp_of_t$48,
       compare$35,
       hash_fold_t$19,
       hash$13,
       typerep_of_t$8,
       typename_of_t$7,
       of_string$4,
       to_string$5,
       to_string_hum$4],
     include$55=
      [0,
       _Ay_,
       _Ax_,
       _Aw_,
       to_int_exn$2,
       _Ak_,
       _Aj_,
       _Ai_,
       _Ah_,
       _Ag_,
       _Af_,
       _Ae_,
       _Ad_,
       _Ac_,
       _Ab_,
       epoch,
       one$2,
       _Aa_,
       _z$_,
       _z__,
       _z9_,
       _z8_,
       _z7_,
       _z6_,
       _z5_,
       _z4_,
       _z3_,
       _z2_,
       _z1_,
       _z0_,
       _zZ_,
       _zY_,
       _zX_,
       _zW_,
       _zV_,
       succ$2,
       pred$2,
       _zU_,
       _zT_,
       _zS_,
       _zR_,
       _zQ_,
       _zP_,
       _zO_,
       _zN_,
       _zM_,
       _zL_,
       _zK_,
       _zJ_,
       _zI_,
       _zH_,
       _zG_,
       _zF_,
       _zE_,
       _zD_,
       _zC_,
       _zB_,
       _zA_,
       _zz_,
       _zy_,
       _zx_,
       _zw_,
       _zv_,
       _zu_,
       _zt_,
       _zs_,
       Overflow_exn,
       of_int$1,
       to_int$1,
       of_int32$1,
       to_int32$1,
       of_int64$1,
       of_nativeint$1,
       to_nativeint$1,
       to_int_trunc$0,
       to_int32_trunc$1,
       of_int64_trunc$0,
       of_nativeint_trunc$0,
       to_nativeint_trunc$0,
       random,
       random_incl,
       floor_log2$0,
       Private$1,
       typerep_of_t$7,
       typename_of_t$6,
       Hex$4,
       bin_t$37,
       bin_read_t$81,
       bin_read_t$82,
       bin_reader_t$37,
       bin_size_t$40,
       bin_write_t$40,
       bin_writer_t$37,
       bin_shape_t$42,
       t_of_sexp$38,
       sexp_of_t$49,
       _At_,
       _As_,
       _Al_,
       _Ar_,
       _Aq_,
       _Ap_,
       _Ao_,
       _An_,
       _Am_,
       equal$20,
       compare$36,
       min$2,
       max$2,
       ascending$2,
       descending$2,
       between$2,
       clamp_exn$2,
       clamp$2,
       validate_lbound$2,
       validate_ubound$2,
       validate_bound$2,
       Replace_polymorphic_compare$1,
       comparator$9,
       Map$4,
       Set$4,
       _Av_,
       _Au_,
       hashable$1,
       Table$1,
       Hash_set$1,
       Hash_queue$1,
       _Az_,
       _AA_,
       _AB_,
       _AC_,
       _AD_,
       _AE_,
       _AF_,
       Stable$4];
    caml_register_global(7423,include$55,"Core_kernel__Int63");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$167);
    caml_call1(Expect_test_collector[4][1],cst_src_robustly_comparable_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$168,cst$59);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$169);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Robustly_comparable=[0];
    caml_register_global
     (7424,Core_kernel_Robustly_comparable,"Core_kernel__Robustly_comparable");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$170);
    caml_call1(Expect_test_collector[4][1],cst_src_stable_int63able_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$171,cst$60);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$172);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Stable_int63able=[0];
    caml_register_global
     (7425,Core_kernel_Stable_int63able,"Core_kernel__Stable_int63able");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$173);
    caml_call1(Expect_test_collector[4][1],cst_src_unit_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$174,cst$61);
    var
     Typename_of_t$8=caml_call1(Typerep_lib_Make_typename[1],[0,name$17]),
     typename_of_t$8=Typename_of_t$8[2],
     name_of_t$4=Typename_of_t$8[1],
     typerep_of_t$9=[9,[0,name_of_t$4,[0,typerep_of_unit]]],
     _AN_=[0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$99),0,_bN_],0],
     _AO_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_unit_ml_6_4),
     group$48=caml_call2(Bin_prot_Shape[6],_AO_,_AN_),
     _AP_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$100),
     bin_shape_t$44=caml_call1(caml_call2(Bin_prot_Shape[14],group$48,_AP_),0),
     bin_writer_t$39=[0,_ba_,_bP_],
     bin_reader_t$39=[0,_bR_,_bS_],
     bin_t$39=[0,bin_shape_t$44,bin_writer_t$39,bin_reader_t$39],
     _aYH_=
      _v$_
       ([0,
         include$56[2],
         include$56[3],
         include$56[4],
         include$56[5],
         include$56[6],
         include$56[7],
         include$56[8],
         include$56[9],
         include$56[10],
         include$56[11],
         include$56[12],
         include$56[13],
         include$56[14],
         include$56[15],
         include$56[16],
         include$56[17],
         include$56[18],
         include$56[19],
         include$56[20],
         include$56[21],
         include$56[22],
         include$56[23],
         include$56[24],
         include$56[25],
         include$56[26],
         include$56[27]],
        [0,
         _ba_,
         _bP_,
         _bR_,
         _bS_,
         bin_shape_t$44,
         bin_writer_t$39,
         bin_reader_t$39,
         bin_t$39]),
     _AR_=_aYH_[2],
     _AS_=_aYH_[3],
     _AU_=_aYH_[5],
     _AV_=_aYH_[6],
     _AW_=_aYH_[7],
     _AX_=_aYH_[8],
     _A6_=include$56[2],
     _A7_=include$56[3],
     _A8_=include$56[4],
     _A9_=include$56[5],
     _Bh_=include$56[15],
     _AQ_=_aYH_[1],
     _AT_=_aYH_[4],
     _AY_=_aYH_[32],
     _AZ_=_aYH_[34],
     _A0_=_aYH_[35],
     _A1_=_aYH_[38],
     _A2_=_aYH_[39],
     _A3_=_aYH_[40],
     _A4_=_aYH_[41],
     _A5_=include$56[1],
     _A__=include$56[6],
     _A$_=include$56[7],
     _Ba_=include$56[8],
     _Bb_=include$56[9],
     _Bc_=include$56[10],
     _Bd_=include$56[11],
     _Be_=include$56[12],
     _Bf_=include$56[13],
     _Bg_=include$56[14],
     _Bi_=include$56[16],
     _Bj_=include$56[17],
     _Bk_=include$56[18],
     _Bl_=include$56[19],
     _Bm_=include$56[20],
     _Bn_=include$56[21],
     _Bo_=include$56[22],
     _Bp_=include$56[23],
     _Bq_=include$56[24],
     _Br_=include$56[25],
     _Bs_=include$56[26],
     _Bt_=include$56[27],
     _Bu_=include$56[28],
     gen$9=caml_call1(_nQ_[34],0),
     obs$9=caml_call1(_nP_[18],0),
     shrinker$9=caml_call1(_nO_[3],0);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$175);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Unit=
      [0,
       typerep_of_t$9,
       typename_of_t$8,
       _A5_,
       _Bu_,
       _AQ_,
       _AR_,
       _AS_,
       _AT_,
       _AU_,
       _AV_,
       _AW_,
       _AX_,
       _A8_,
       _A9_,
       _A__,
       _A$_,
       _Bt_,
       _Ba_,
       _Bb_,
       _Bc_,
       _Bd_,
       _Be_,
       _Bf_,
       _Bg_,
       _Bh_,
       _Bi_,
       _Bj_,
       _Bk_,
       _Bl_,
       _Bm_,
       _Bn_,
       _Bo_,
       _Bq_,
       _Br_,
       _Bs_,
       _AY_,
       _Bp_,
       _AZ_,
       _A0_,
       _A6_,
       _A7_,
       _A1_,
       _A2_,
       _A3_,
       _A4_,
       gen$9,
       obs$9,
       shrinker$9];
    caml_register_global(7427,Core_kernel_Unit,"Core_kernel__Unit");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$176);
    caml_call1(Expect_test_collector[4][1],cst_src_interfaces_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$177,cst$62);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$178);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Interfaces=[0];
    caml_register_global
     (7428,Core_kernel_Interfaces,"Core_kernel__Interfaces");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$179);
    caml_call1(Expect_test_collector[4][1],cst_src_bool_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$180,cst$63);
    var
     _Bv_=[0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$101),0,_bU_],0],
     _Bw_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_bool_ml_3_0),
     group$49=caml_call2(Bin_prot_Shape[6],_Bw_,_Bv_),
     _Bx_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$102),
     bin_shape_t$45=caml_call1(caml_call2(Bin_prot_Shape[14],group$49,_Bx_),0),
     bin_writer_t$40=[0,_bb_,_bW_],
     bin_reader_t$40=[0,_bY_,_bZ_],
     bin_t$40=[0,bin_shape_t$45,bin_writer_t$40,bin_reader_t$40],
     Typename_of_t$9=caml_call1(Typerep_lib_Make_typename[1],[0,name$18]),
     typename_of_t$9=Typename_of_t$9[2],
     name_of_t$5=Typename_of_t$9[1],
     typerep_of_t$10=[9,[0,name_of_t$5,[0,typerep_of_bool]]],
     _Bz_=Base_Bool[4],
     _BA_=Base_Bool[5],
     _By_=Base_Bool[1],
     _BB_=Base_Bool[25],
     _BC_=Base_Bool[26],
     _BD_=Base_Bool[27],
     _BE_=
      Make$5
       ([0,Base_Bool[2],Base_Bool[4],Base_Bool[13],Base_Bool[5],Base_Bool[3]]),
     _BF_=_BE_[2],
     _BG_=_BE_[3],
     _BH_=_BE_[4],
     _BI_=_BE_[5],
     _BJ_=_BE_[6],
     _BK_=_BE_[7],
     include$57=
      Make_using_comparator$1([0,Base_Bool[4],Base_Bool[5],Base_Bool[21]]),
     _BS_=include$57[8],
     _B7_=_nQ_[25],
     _BL_=include$57[1],
     _BM_=include$57[2],
     _BN_=include$57[3],
     _BO_=include$57[4],
     _BP_=include$57[5],
     _BQ_=include$57[6],
     _BR_=include$57[7],
     _BT_=include$57[9],
     _BU_=include$57[10],
     _BV_=include$57[11],
     _BW_=include$57[12],
     _BX_=include$57[13],
     _BY_=include$57[14],
     _BZ_=include$57[15],
     _B0_=include$57[16],
     _B1_=include$57[17],
     _B2_=include$57[18],
     _B3_=include$57[19],
     _B4_=include$57[20],
     _B5_=include$57[21],
     _B6_=include$57[22],
     _B8_=_nP_[4],
     _B9_=_nO_[4];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$181);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Bool=
      [0,
       bin_t$40,
       _bY_,
       _bZ_,
       bin_reader_t$40,
       _bb_,
       _bW_,
       bin_writer_t$40,
       bin_shape_t$45,
       typerep_of_t$10,
       typename_of_t$9,
       _By_,
       _Bz_,
       _BA_,
       _BB_,
       _BC_,
       _BD_,
       _BL_,
       _BM_,
       _BN_,
       _BO_,
       _BP_,
       _BQ_,
       _BR_,
       _BT_,
       _BU_,
       _BV_,
       _BW_,
       _BX_,
       _BY_,
       _BZ_,
       _B0_,
       _B1_,
       _B2_,
       _B3_,
       _B4_,
       _B5_,
       _B6_,
       _BS_,
       _BF_,
       _BG_,
       _BH_,
       _BI_,
       _BJ_,
       _BK_,
       _B7_,
       _B8_,
       _B9_];
    caml_register_global(7429,Core_kernel_Bool,"Core_kernel__Bool");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$182);
    caml_call1(Expect_test_collector[4][1],cst_src_char_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$183,cst$64);
    var
     Typename_of_t$10=caml_call1(Typerep_lib_Make_typename[1],[0,name$19]),
     typename_of_t$10=Typename_of_t$10[2],
     name_of_t$6=Typename_of_t$10[1],
     typerep_of_t$11=[9,[0,name_of_t$6,[0,typerep_of_char]]],
     _B__=[0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$103),0,_b9_],0],
     _B$_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_char_ml_7_4),
     group$50=caml_call2(Bin_prot_Shape[6],_B$_,_B__),
     _Ca_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$104),
     bin_shape_t$46=caml_call1(caml_call2(Bin_prot_Shape[14],group$50,_Ca_),0),
     bin_writer_t$41=[0,_bc_,_b$_],
     bin_reader_t$41=[0,_cb_,_cc_],
     bin_t$41=[0,bin_shape_t$46,bin_writer_t$41,bin_reader_t$41],
     Z$0=
      _v$_
       ([0,
         include$21[2],
         include$21[3],
         include$21[4],
         include$21[5],
         include$21[6],
         include$21[7],
         include$21[8],
         include$21[9],
         include$21[10],
         include$21[11],
         include$21[12],
         include$21[13],
         include$21[14],
         include$21[15],
         include$21[16],
         include$21[17],
         include$21[18],
         include$21[19],
         include$21[20],
         include$21[21],
         include$21[22],
         include$21[23],
         include$21[24],
         include$21[25],
         include$21[26],
         include$21[27]],
        [0,
         _bc_,
         _b$_,
         _cb_,
         _cc_,
         bin_shape_t$46,
         bin_writer_t$41,
         bin_reader_t$41,
         bin_t$41]),
     _Cc_=Z$0[8],
     _Ce_=Z$0[6],
     _Cf_=Z$0[5],
     _Ch_=Z$0[3],
     _Ci_=Z$0[2],
     _Cl_=include$21[2],
     _Cm_=include$21[3],
     _Cn_=include$21[4],
     _Co_=include$21[5],
     _Cq_=include$21[7],
     _Ct_=include$21[10],
     equal$22=include$21[14],
     _Cx_=include$21[15],
     _CL_=include$21[29],
     _CN_=include$21[31],
     _CO_=include$21[32],
     _CQ_=include$21[34],
     _CS_=include$21[36],
     _CT_=include$21[37],
     _CV_=include$21[39],
     _CY_=include$21[42],
     _C0_=include$21[44],
     _C3_=_nQ_[26],
     _C$_=_nP_[5],
     _Da_=_nO_[5],
     _Cb_=Z$0[38],
     _Cd_=Z$0[7],
     _Cg_=Z$0[4],
     _Cj_=Z$0[1],
     _Ck_=include$21[1],
     _Cp_=include$21[6],
     _Cr_=include$21[8],
     _Cs_=include$21[9],
     _Cu_=include$21[11],
     _Cv_=include$21[12],
     _Cw_=include$21[13],
     _Cy_=include$21[16],
     _Cz_=include$21[17],
     _CA_=include$21[18],
     _CB_=include$21[19],
     _CC_=include$21[20],
     _CD_=include$21[21],
     _CE_=include$21[22],
     _CF_=include$21[23],
     _CG_=include$21[24],
     _CH_=include$21[25],
     _CI_=include$21[26],
     _CJ_=include$21[27],
     _CK_=include$21[28],
     _CM_=include$21[30],
     _CP_=include$21[33],
     _CR_=include$21[35],
     _CU_=include$21[38],
     _CW_=include$21[40],
     _CX_=include$21[41],
     _CZ_=include$21[43],
     _C1_=include$21[45],
     _C2_=include$21[46],
     _C4_=_nQ_[27],
     _C5_=_nQ_[28],
     _C6_=_nQ_[29],
     _C7_=_nQ_[30],
     _C8_=_nQ_[31],
     _C9_=_nQ_[32],
     _C__=_nQ_[33];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$184);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Hash_queue$2=Z$0[41],
     Hash_set$2=Z$0[40],
     Table$2=Z$0[39],
     Set$5=Z$0[35],
     Map$5=Z$0[34],
     Replace_polymorphic_compare$2=
      [0,
       include$21[8],
       include$21[9],
       include$21[10],
       include$21[11],
       include$21[12],
       include$21[13],
       include$21[14],
       include$21[15],
       include$21[16],
       include$21[17]],
     include$58=
      [0,
       typerep_of_t$11,
       typename_of_t$10,
       _Ck_,
       _CK_,
       _CL_,
       _CM_,
       _CN_,
       _CO_,
       _CP_,
       _CQ_,
       _CR_,
       _CS_,
       _CT_,
       _CU_,
       _CV_,
       _CW_,
       _CX_,
       _CY_,
       _CZ_,
       _C0_,
       _C1_,
       _C2_,
       _Cj_,
       _Ci_,
       _Ch_,
       _Cg_,
       _Cf_,
       _Ce_,
       _Cd_,
       _Cc_,
       _Cn_,
       _Co_,
       _Cp_,
       _Cq_,
       _CJ_,
       _Cr_,
       _Cs_,
       _Ct_,
       _Cu_,
       _Cv_,
       _Cw_,
       equal$22,
       _Cx_,
       _Cy_,
       _Cz_,
       _CA_,
       _CB_,
       _CC_,
       _CD_,
       _CE_,
       _CG_,
       _CH_,
       _CI_,
       Replace_polymorphic_compare$2,
       _CF_,
       Map$5,
       Set$5,
       _Cl_,
       _Cm_,
       _Cb_,
       Table$2,
       Hash_set$2,
       Hash_queue$2,
       _C3_,
       _C$_,
       _Da_,
       _C4_,
       _C5_,
       _C6_,
       _C7_,
       _C8_,
       _C9_,
       _C__];
    caml_register_global(7430,include$58,"Core_kernel__Char");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$185);
    caml_call1(Expect_test_collector[4][1],cst_src_hexdump_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$186,cst$65);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$187);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Hexdump_intf=[0];
    caml_register_global
     (7431,Core_kernel_Hexdump_intf,"Core_kernel__Hexdump_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$188);
    caml_call1(Expect_test_collector[4][1],cst_src_hexdump_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$189,cst$66);
    var
     default_max_lines=[0,caml_call2(_ah_,caml_call2(_ak_,4096,16),1)],
     bytes_per_line=16;
    function Of_indexable2(T)
     {var length=T[1],get=T[2];
      function hex_of_pos(pos){return caml_call2(_eJ_,_Db_,pos)}
      function hex_of_char(t,start,until,offset)
       {var pos=caml_call2(_ah_,start,offset);
        if(caml_call2(_aF_,pos,until))return cst$67;
        var _bQo_=caml_call2(get,t,pos);
        return caml_call2(_eJ_,_Dc_,caml_call1(include$21[29],_bQo_))}
      function hex_of_line(t,start,until)
       {var
         _bP$_=hex_of_char(t,start,until,15),
         _bQa_=hex_of_char(t,start,until,14),
         _bQb_=hex_of_char(t,start,until,13),
         _bQc_=hex_of_char(t,start,until,12),
         _bQd_=hex_of_char(t,start,until,11),
         _bQe_=hex_of_char(t,start,until,10),
         _bQf_=hex_of_char(t,start,until,9),
         _bQg_=hex_of_char(t,start,until,8),
         _bQh_=hex_of_char(t,start,until,7),
         _bQi_=hex_of_char(t,start,until,6),
         _bQj_=hex_of_char(t,start,until,5),
         _bQk_=hex_of_char(t,start,until,4),
         _bQl_=hex_of_char(t,start,until,3),
         _bQm_=hex_of_char(t,start,until,2),
         _bQn_=hex_of_char(t,start,until,1);
        return caml_call17
                (_eJ_,
                 _Dd_,
                 hex_of_char(t,start,until,0),
                 _bQn_,
                 _bQm_,
                 _bQl_,
                 _bQk_,
                 _bQj_,
                 _bQi_,
                 _bQh_,
                 _bQg_,
                 _bQf_,
                 _bQe_,
                 _bQd_,
                 _bQc_,
                 _bQb_,
                 _bQa_,
                 _bP$_)}
      function printable_string(t,start,until)
       {function _bP9_(i)
         {var char$0=caml_call2(get,t,caml_call2(_ah_,start,i));
          return caml_call1(include$21[41],char$0)?char$0:46}
        var _bP__=caml_call2(_ai_,until,start);
        return caml_call2(Base_String[50],_bP__,_bP9_)}
      function line(t,pos,len,line_index)
       {var
         start=caml_call2(_ah_,pos,caml_call2(_aj_,line_index,bytes_per_line)),
         _bP6_=caml_call2(_ah_,pos,len),
         until=caml_call2(_aL_,caml_call2(_ah_,start,bytes_per_line),_bP6_),
         _bP7_=printable_string(t,start,until),
         _bP8_=hex_of_line(t,start,until);
        return caml_call4(_eJ_,_De_,hex_of_pos(start),_bP8_,_bP7_)}
      function to_sequence(max_lines,pos,len,t)
       {var
         length$0=caml_call1(length,t),
         match=caml_call3(_hY_,pos,len,length$0),
         len$0=match[2],
         pos$0=match[1];
        if(max_lines)
         var max_lines$0=max_lines[1],max_lines$1=max_lines$0;
        else
         var max_lines$1=default_max_lines[1];
        var
         max_lines$2=caml_call2(_aK_,max_lines$1,3),
         unabridged_lines=
          caml_call2
           (_ak_,caml_call2(Base_Int[67],len$0,bytes_per_line),bytes_per_line),
         skip_from=caml_call2(_ak_,caml_call2(_ai_,max_lines$2,1),2),
         skip_to=
          caml_call2
           (_ah_,
            caml_call2
             (_ai_,unabridged_lines,caml_call2(_ai_,max_lines$2,skip_from)),
            1);
        return caml_call2
                (unfold_step,
                 0,
                 function(line_index)
                  {if(caml_call2(_aF_,line_index,unabridged_lines))return 0;
                   if(caml_call2(_aD_,line_index,skip_from))
                    if(caml_call2(_aA_,max_lines$2,unabridged_lines))
                     return [1,cst$68,skip_to];
                   var _bP5_=caml_call2(_ah_,line_index,1);
                   return [1,line(t,pos$0,len$0,line_index),_bP5_]})}
      function to_string_hum(max_lines,pos,len,t)
       {var _bP4_=caml_call1(to_list$0,to_sequence(max_lines,pos,len,t));
        return caml_call2(Base_String[53],_Df_,_bP4_)}
      function sexp_of_t(param,_bP2_,t)
       {var _bP3_=caml_call1(to_list$0,to_sequence(0,0,0,t));
        return caml_call1(caml_call1(_I_,_Z_),_bP3_)}
      var
       Hexdump=
        [0,
         length,
         get,
         hex_of_pos,
         hex_of_char,
         hex_of_line,
         printable_string,
         line,
         to_sequence,
         to_string_hum,
         sexp_of_t];
      return [0,Hexdump]}
    function Of_indexable1(T)
     {var
       length=T[1],
       get=T[2],
       M=Of_indexable2([0,length,get]),
       length$0=T[1],
       get$0=T[2];
      function sexp_of_t(x,t){return caml_call3(M[1][10],x,0,t)}
      var
       to_sequence=M[1][8],
       to_string_hum=M[1][9],
       Hexdump=[0,length$0,get$0,sexp_of_t,to_sequence,to_string_hum];
      return [0,M,Hexdump]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$190);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    function _Dg_(_bP0_)
     {var _bP1_=Of_indexable2(_bP0_)[1];
      return [0,[0,_bP1_[10],_bP1_[9],_bP1_[8]]]}
    function _Dh_(_bPY_)
     {var _bPZ_=Of_indexable1(_bPY_)[2];
      return [0,[0,_bPZ_[3],_bPZ_[5],_bPZ_[4]]]}
    function _Di_(T)
     {var length=T[1],get=T[2],M=Of_indexable1([0,length,get]);
      function sexp_of_t(t){return caml_call2(M[2][3],0,t)}
      var to_sequence=M[2][4],to_string_hum=M[2][5];
      return [0,[0,sexp_of_t,to_string_hum,to_sequence]]}
    var Core_kernel_Hexdump=[0,default_max_lines,_Di_,_Dh_,_Dg_];
    caml_register_global(7432,Core_kernel_Hexdump,"Core_kernel__Hexdump");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$191);
    caml_call1(Expect_test_collector[4][1],cst_src_bytes_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$192,cst$69);
    var
     _Dj_=[0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$105),0,_b5_],0],
     _Dk_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_bytes_ml_5_4),
     group$51=caml_call2(Bin_prot_Shape[6],_Dk_,_Dj_),
     _Dl_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$106),
     bin_shape_t$47=caml_call1(caml_call2(Bin_prot_Shape[14],group$51,_Dl_),0),
     bin_writer_t$42=[0,bin_size_t$0,bin_write_t$0],
     bin_reader_t$42=[0,bin_read_t$1,bin_read_t$2],
     bin_t$42=[0,bin_shape_t$47,bin_writer_t$42,bin_reader_t$42],
     Typename_of_t$11=caml_call1(Typerep_lib_Make_typename[1],[0,name$20]),
     typename_of_t$11=Typename_of_t$11[2],
     name_of_t$7=Typename_of_t$11[1],
     typerep_of_t$12=[9,[0,name_of_t$7,[0,typerep_of_bytes]]],
     t_of_sexp$40=Base_Bytes[1],
     sexp_of_t$51=Base_Bytes[2],
     blit$2=Base_Bytes[3],
     blito$2=Base_Bytes[4],
     unsafe_blit$0=Base_Bytes[5],
     sub$4=Base_Bytes[6],
     subo$2=Base_Bytes[7],
     equal$23=Base_Bytes[14],
     compare$38=Base_Bytes[15],
     min$4=Base_Bytes[16],
     max$4=Base_Bytes[17],
     ascending$4=Base_Bytes[18],
     descending$4=Base_Bytes[19],
     between$4=Base_Bytes[20],
     clamp_exn$4=Base_Bytes[21],
     clamp$4=Base_Bytes[22],
     comparator$11=Base_Bytes[23],
     validate_lbound$4=Base_Bytes[24],
     validate_ubound$4=Base_Bytes[25],
     validate_bound$4=Base_Bytes[26],
     of_string$6=Base_Bytes[27],
     to_string$7=Base_Bytes[28],
     pp$3=Base_Bytes[29],
     To_string=Base_Bytes[30],
     From_string=Base_Bytes[31],
     create$13=Base_Bytes[32],
     make$0=Base_Bytes[33],
     copy$3=Base_Bytes[34],
     init$5=Base_Bytes[35],
     of_char_list=Base_Bytes[36],
     length$18=Base_Bytes[37],
     get$2=Base_Bytes[38],
     set$6=Base_Bytes[39],
     fill$0=Base_Bytes[40],
     tr=Base_Bytes[41],
     to_list$10=Base_Bytes[42],
     contains=Base_Bytes[43],
     max_length=Base_Bytes[44],
     unsafe_to_string=Base_Bytes[45],
     unsafe_of_string_promise_no_mutation=Base_Bytes[46],
     _Dm_=Base_Bytes[8],
     _Dn_=Base_Bytes[9],
     _Do_=Base_Bytes[10],
     _Dp_=Base_Bytes[11],
     _Dq_=Base_Bytes[12],
     _Dr_=Base_Bytes[13],
     include$59=_Di_([0,length$18,get$2]),
     _Ds_=include$59[1];
    function _Dt_(size)
     {if(caml_call2(_xr_,size,0))
       {var
         _bPV_=[0,[0,10,caml_call1(_nQ_[9][1],1)],0],
         _bPW_=[0,[0,1,caml_call1(_nQ_[9][1],0)],_bPV_];
        return caml_call1(_nQ_[66],_bPW_)}
      var _bPX_=caml_call2(_ah_,size,1);
      return caml_call1(_nQ_[9][1],_bPX_)}
    var default_length=caml_call2(_nQ_[9][4][2],_nQ_[23],_Dt_);
    function gen_with_length(len,char_gen)
     {function _bPS_(chars)
       {var _bPU_=caml_call1(of_char_list,chars);
        return caml_call1(_nQ_[9][1],_bPU_)}
      var _bPT_=caml_call2(_pa_,len,char_gen);
      return caml_call2(_nQ_[9][4][2],_bPT_,_bPS_)}
    function gen$10(char_gen)
     {function _bPR_(len){return gen_with_length(len,char_gen)}
      return caml_call2(_nQ_[9][4][2],default_length,_bPR_)}
    var
     gen$11=gen$10(_C3_),
     _Du_=caml_call1(_pc_,_C$_),
     obs$10=caml_call2(_nP_[19],_Du_,to_list$10),
     _Dv_=caml_call1(_pd_,_Da_),
     shrinker$10=caml_call3(_nO_[6],_Dv_,of_char_list,to_list$10);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$193);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     include$60=
      [0,
       bin_t$42,
       bin_read_t$1,
       bin_read_t$2,
       bin_reader_t$42,
       bin_size_t$0,
       bin_write_t$0,
       bin_writer_t$42,
       bin_shape_t$47,
       typerep_of_t$12,
       typename_of_t$11,
       t_of_sexp$40,
       sexp_of_t$51,
       blit$2,
       blito$2,
       unsafe_blit$0,
       sub$4,
       subo$2,
       _Dm_,
       _Dn_,
       _Do_,
       _Dp_,
       _Dq_,
       _Dr_,
       equal$23,
       compare$38,
       min$4,
       max$4,
       ascending$4,
       descending$4,
       between$4,
       clamp_exn$4,
       clamp$4,
       comparator$11,
       validate_lbound$4,
       validate_ubound$4,
       validate_bound$4,
       of_string$6,
       to_string$7,
       pp$3,
       To_string,
       From_string,
       create$13,
       make$0,
       copy$3,
       init$5,
       of_char_list,
       length$18,
       get$2,
       set$6,
       fill$0,
       tr,
       to_list$10,
       contains,
       max_length,
       unsafe_to_string,
       unsafe_of_string_promise_no_mutation,
       _Ds_,
       gen$11,
       obs$10,
       shrinker$10,
       gen$10,
       gen_with_length,
       [0,
        [0,
         bin_t$42,
         bin_read_t$1,
         bin_read_t$2,
         bin_reader_t$42,
         bin_size_t$0,
         bin_write_t$0,
         bin_writer_t$42,
         bin_shape_t$47,
         compare$38,
         t_of_sexp$40,
         sexp_of_t$51,
         comparator$11]]];
    caml_register_global(7434,include$60,"Core_kernel__Bytes");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$194);
    caml_call1(Expect_test_collector[4][1],cst_src_core_pervasives_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$195,cst$70);
    var
     include$61=Stdlib[1],
     invalid_arg=include$61[1],
     failwith=include$61[2],
     Exit=include$61[3],
     min$5=include$61[4],
     max$5=include$61[5],
     abs$3=include$61[6],
     max_int=include$61[7],
     min_int=include$61[8],
     lnot$3=include$61[9],
     infinity=include$61[10],
     neg_infinity=include$61[11],
     nan=include$61[12],
     max_float=include$61[13],
     min_float=include$61[14],
     epsilon_float=include$61[15],
     _Dw_=include$61[16],
     char_of_int=include$61[17],
     string_of_bool=include$61[18],
     bool_of_string=include$61[19],
     string_of_int=include$61[21],
     string_of_float=include$61[23],
     stdin=include$61[26],
     stdout=include$61[27],
     stderr=include$61[28],
     print_char=include$61[29],
     print_string=include$61[30],
     print_bytes=include$61[31],
     print_int=include$61[32],
     print_float=include$61[33],
     print_endline=include$61[34],
     print_newline=include$61[35],
     prerr_char=include$61[36],
     prerr_string=include$61[37],
     prerr_bytes=include$61[38],
     prerr_int=include$61[39],
     prerr_float=include$61[40],
     prerr_endline=include$61[41],
     prerr_newline=include$61[42],
     read_line=include$61[43],
     read_int=include$61[44],
     read_float=include$61[46],
     open_out=include$61[48],
     open_out_bin=include$61[49],
     open_out_gen=include$61[50],
     flush=include$61[51],
     flush_all=include$61[52],
     output_char=include$61[53],
     output_string=include$61[54],
     output_bytes=include$61[55],
     output=include$61[56],
     output_substring=include$61[57],
     output_byte=include$61[58],
     output_binary_int=include$61[59],
     output_value=include$61[60],
     seek_out=include$61[61],
     pos_out=include$61[62],
     out_channel_length=include$61[63],
     close_out=include$61[64],
     close_out_noerr=include$61[65],
     set_binary_mode_out=include$61[66],
     open_in=include$61[67],
     open_in_bin=include$61[68],
     open_in_gen=include$61[69],
     input_char=include$61[70],
     input_line=include$61[71],
     input=include$61[72],
     really_input=include$61[73],
     really_input_string=include$61[74],
     input_byte=include$61[75],
     input_binary_int=include$61[76],
     input_value=include$61[77],
     seek_in=include$61[78],
     pos_in=include$61[79],
     in_channel_length=include$61[80],
     close_in=include$61[81],
     close_in_noerr=include$61[82],
     set_binary_mode_in=include$61[83],
     LargeFile=include$61[84],
     string_of_format=include$61[85],
     _Dy_=include$61[86],
     exit=include$61[87],
     at_exit=include$61[88],
     valid_float_lexem=include$61[89],
     unsafe_really_input=include$61[90],
     do_at_exit=include$61[91],
     _Dx_=include$61[25];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$196);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Core_pervasives=
      [0,
       invalid_arg,
       failwith,
       Exit,
       min$5,
       max$5,
       abs$3,
       max_int,
       min_int,
       lnot$3,
       infinity,
       neg_infinity,
       nan,
       max_float,
       min_float,
       epsilon_float,
       _Dw_,
       char_of_int,
       string_of_bool,
       bool_of_string,
       string_of_int,
       string_of_float,
       _Dx_,
       stdin,
       stdout,
       stderr,
       print_char,
       print_string,
       print_bytes,
       print_int,
       print_float,
       print_endline,
       print_newline,
       prerr_char,
       prerr_string,
       prerr_bytes,
       prerr_int,
       prerr_float,
       prerr_endline,
       prerr_newline,
       read_line,
       read_int,
       read_float,
       open_out,
       open_out_bin,
       open_out_gen,
       flush,
       flush_all,
       output_char,
       output_string,
       output_bytes,
       output,
       output_substring,
       output_byte,
       output_binary_int,
       output_value,
       seek_out,
       pos_out,
       out_channel_length,
       close_out,
       close_out_noerr,
       set_binary_mode_out,
       open_in,
       open_in_bin,
       open_in_gen,
       input_char,
       input_line,
       input,
       really_input,
       really_input_string,
       input_byte,
       input_binary_int,
       input_value,
       seek_in,
       pos_in,
       in_channel_length,
       close_in,
       close_in_noerr,
       set_binary_mode_in,
       LargeFile,
       string_of_format,
       _Dy_,
       exit,
       at_exit,
       valid_float_lexem,
       unsafe_really_input,
       do_at_exit];
    caml_register_global
     (7435,Core_kernel_Core_pervasives,"Core_kernel__Core_pervasives");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$197);
    caml_call1(Expect_test_collector[4][1],cst_src_gc_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$198,cst$71);
    var
     print_stat=include$62[1],
     allocated_bytes=include$62[2],
     create_alarm=include$62[6],
     delete_alarm=include$62[7];
    function compare$39(a_001,b_002)
     {if(caml_call2(Ppx_compare_lib[1],a_001,b_002))return 0;
      var n=caml_call2(_o_,a_001[1],b_002[1]);
      if(0 === n)
       {var n$0=caml_call2(_o_,a_001[2],b_002[2]);
        if(0 === n$0)
         {var n$1=caml_call2(_o_,a_001[3],b_002[3]);
          if(0 === n$1)
           {var n$2=caml_call2(_t_,a_001[4],b_002[4]);
            if(0 === n$2)
             {var n$3=caml_call2(_t_,a_001[5],b_002[5]);
              if(0 === n$3)
               {var n$4=caml_call2(_t_,a_001[6],b_002[6]);
                if(0 === n$4)
                 {var n$5=caml_call2(_t_,a_001[7],b_002[7]);
                  if(0 === n$5)
                   {var n$6=caml_call2(_t_,a_001[8],b_002[8]);
                    if(0 === n$6)
                     {var n$7=caml_call2(_t_,a_001[9],b_002[9]);
                      if(0 === n$7)
                       {var n$8=caml_call2(_t_,a_001[10],b_002[10]);
                        if(0 === n$8)
                         {var n$9=caml_call2(_t_,a_001[11],b_002[11]);
                          if(0 === n$9)
                           {var n$10=caml_call2(_t_,a_001[12],b_002[12]);
                            if(0 === n$10)
                             {var n$11=caml_call2(_t_,a_001[13],b_002[13]);
                              if(0 === n$11)
                               {var n$12=caml_call2(_t_,a_001[14],b_002[14]);
                                if(0 === n$12)
                                 {var n$13=caml_call2(_t_,a_001[15],b_002[15]);
                                  return 0 === n$13?caml_call2(_t_,a_001[16],b_002[16]):n$13}
                                return n$12}
                              return n$11}
                            return n$10}
                          return n$9}
                        return n$8}
                      return n$7}
                    return n$6}
                  return n$5}
                return n$4}
              return n$3}
            return n$2}
          return n$1}
        return n$0}
      return n}
    var
     _Dz_=
      caml_call1
       (Bin_prot_Shape[8],
        [0,
         [0,cst_minor_words,_ci_],
         [0,
          [0,cst_promoted_words,_ci_],
          [0,
           [0,cst_major_words,_ci_],
           [0,
            [0,cst_minor_collections,_ce_],
            [0,
             [0,cst_major_collections,_ce_],
             [0,
              [0,cst_heap_words,_ce_],
              [0,
               [0,cst_heap_chunks,_ce_],
               [0,
                [0,cst_live_words,_ce_],
                [0,
                 [0,cst_live_blocks,_ce_],
                 [0,
                  [0,cst_free_words,_ce_],
                  [0,
                   [0,cst_free_blocks,_ce_],
                   [0,
                    [0,cst_largest_free,_ce_],
                    [0,
                     [0,cst_fragments,_ce_],
                     [0,
                      [0,cst_compactions,_ce_],
                      [0,
                       [0,cst_top_heap_words,_ce_],
                       [0,[0,cst_stack_size,_ce_],0]]]]]]]]]]]]]]]]),
     _DA_=[0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$107),0,_Dz_],0],
     _DB_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_gc_ml_7_4),
     group$52=caml_call2(Bin_prot_Shape[6],_DB_,_DA_),
     _DC_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$108),
     bin_shape_t$48=caml_call1(caml_call2(Bin_prot_Shape[14],group$52,_DC_),0);
    function bin_size_t$41(param)
     {var
       v16=param[16],
       v15=param[15],
       v14=param[14],
       v13=param[13],
       v12=param[12],
       v11=param[11],
       v10=param[10],
       v9=param[9],
       v8=param[8],
       v7=param[7],
       v6=param[6],
       v5=param[5],
       v4=param[4],
       v3=param[3],
       v2=param[2],
       v1=param[1],
       size=caml_call1(bin_size_t$2,v1) | 0,
       size$0=size + caml_call1(bin_size_t$2,v2) | 0,
       size$1=size$0 + caml_call1(bin_size_t$2,v3) | 0,
       size$2=size$1 + caml_call1(bin_size_t$1,v4) | 0,
       size$3=size$2 + caml_call1(bin_size_t$1,v5) | 0,
       size$4=size$3 + caml_call1(bin_size_t$1,v6) | 0,
       size$5=size$4 + caml_call1(bin_size_t$1,v7) | 0,
       size$6=size$5 + caml_call1(bin_size_t$1,v8) | 0,
       size$7=size$6 + caml_call1(bin_size_t$1,v9) | 0,
       size$8=size$7 + caml_call1(bin_size_t$1,v10) | 0,
       size$9=size$8 + caml_call1(bin_size_t$1,v11) | 0,
       size$10=size$9 + caml_call1(bin_size_t$1,v12) | 0,
       size$11=size$10 + caml_call1(bin_size_t$1,v13) | 0,
       size$12=size$11 + caml_call1(bin_size_t$1,v14) | 0,
       size$13=size$12 + caml_call1(bin_size_t$1,v15) | 0;
      return size$13 + caml_call1(bin_size_t$1,v16) | 0}
    function bin_write_t$41(buf,pos,param)
     {var
       v16=param[16],
       v15=param[15],
       v14=param[14],
       v13=param[13],
       v12=param[12],
       v11=param[11],
       v10=param[10],
       v9=param[9],
       v8=param[8],
       v7=param[7],
       v6=param[6],
       v5=param[5],
       v4=param[4],
       v3=param[3],
       v2=param[2],
       v1=param[1],
       pos$0=caml_call3(bin_write_t$2,buf,pos,v1),
       pos$1=caml_call3(bin_write_t$2,buf,pos$0,v2),
       pos$2=caml_call3(bin_write_t$2,buf,pos$1,v3),
       pos$3=caml_call3(bin_write_t$1,buf,pos$2,v4),
       pos$4=caml_call3(bin_write_t$1,buf,pos$3,v5),
       pos$5=caml_call3(bin_write_t$1,buf,pos$4,v6),
       pos$6=caml_call3(bin_write_t$1,buf,pos$5,v7),
       pos$7=caml_call3(bin_write_t$1,buf,pos$6,v8),
       pos$8=caml_call3(bin_write_t$1,buf,pos$7,v9),
       pos$9=caml_call3(bin_write_t$1,buf,pos$8,v10),
       pos$10=caml_call3(bin_write_t$1,buf,pos$9,v11),
       pos$11=caml_call3(bin_write_t$1,buf,pos$10,v12),
       pos$12=caml_call3(bin_write_t$1,buf,pos$11,v13),
       pos$13=caml_call3(bin_write_t$1,buf,pos$12,v14),
       pos$14=caml_call3(bin_write_t$1,buf,pos$13,v15);
      return caml_call3(bin_write_t$1,buf,pos$14,v16)}
    var bin_writer_t$43=[0,bin_size_t$41,bin_write_t$41];
    function bin_read_t$83(buf,pos_ref,vint)
     {return caml_call2(Bin_prot_Common[19],cst_src_gc_ml_Stat_T_t,pos_ref[1])}
    function bin_read_t$84(buf,pos_ref)
     {var
       v_minor_words=caml_call2(bin_read_t$5,buf,pos_ref),
       v_promoted_words=caml_call2(bin_read_t$5,buf,pos_ref),
       v_major_words=caml_call2(bin_read_t$5,buf,pos_ref),
       v_minor_collections=caml_call2(bin_read_t$3,buf,pos_ref),
       v_major_collections=caml_call2(bin_read_t$3,buf,pos_ref),
       v_heap_words=caml_call2(bin_read_t$3,buf,pos_ref),
       v_heap_chunks=caml_call2(bin_read_t$3,buf,pos_ref),
       v_live_words=caml_call2(bin_read_t$3,buf,pos_ref),
       v_live_blocks=caml_call2(bin_read_t$3,buf,pos_ref),
       v_free_words=caml_call2(bin_read_t$3,buf,pos_ref),
       v_free_blocks=caml_call2(bin_read_t$3,buf,pos_ref),
       v_largest_free=caml_call2(bin_read_t$3,buf,pos_ref),
       v_fragments=caml_call2(bin_read_t$3,buf,pos_ref),
       v_compactions=caml_call2(bin_read_t$3,buf,pos_ref),
       v_top_heap_words=caml_call2(bin_read_t$3,buf,pos_ref),
       v_stack_size=caml_call2(bin_read_t$3,buf,pos_ref);
      return [0,
              v_minor_words,
              v_promoted_words,
              v_major_words,
              v_minor_collections,
              v_major_collections,
              v_heap_words,
              v_heap_chunks,
              v_live_words,
              v_live_blocks,
              v_free_words,
              v_free_blocks,
              v_largest_free,
              v_fragments,
              v_compactions,
              v_top_heap_words,
              v_stack_size]}
    var
     bin_reader_t$43=[0,bin_read_t$84,bin_read_t$83],
     bin_t$43=[0,bin_shape_t$48,bin_writer_t$43,bin_reader_t$43];
    function t_of_sexp$41(sexp)
     {if(0 === sexp[0])
       return caml_call2(Sexplib0_Sexp_conv_error[15],tp_loc$18,sexp);
      var
       field_sexps=sexp[1],
       minor_words_field=[0,0],
       promoted_words_field=[0,0],
       major_words_field=[0,0],
       minor_collections_field=[0,0],
       major_collections_field=[0,0],
       heap_words_field=[0,0],
       heap_chunks_field=[0,0],
       live_words_field=[0,0],
       live_blocks_field=[0,0],
       free_words_field=[0,0],
       free_blocks_field=[0,0],
       largest_free_field=[0,0],
       fragments_field=[0,0],
       compactions_field=[0,0],
       top_heap_words_field=[0,0],
       stack_size_field=[0,0],
       duplicates=[0,0],
       extra=[0,0],
       param=field_sexps;
      for(;;)
       {if(param)
         {var _bPw_=param[1];
          if(1 === _bPw_[0])
           {var _bPx_=_bPw_[1];
            if(_bPx_)
             {var _bPy_=_bPx_[1];
              if(0 === _bPy_[0])
               {var _bPz_=_bPx_[2],_bPA_=_bPy_[1];
                if(! _bPz_)
                 {var tail$0=param[2];
                  if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_bPA_,extra[1]];
                  var param=tail$0;
                  continue}
                if(! _bPz_[2])
                 {var
                   tail=param[2],
                   field_sexp=_bPz_[1],
                   switch$0=caml_string_compare(_bPA_,cst_live_words$0);
                  if(0 <= switch$0)
                   if(0 < switch$0)
                    if(caml_string_notequal(_bPA_,cst_major_collections$0))
                     if(caml_string_notequal(_bPA_,cst_major_words$0))
                      if(caml_string_notequal(_bPA_,cst_minor_collections$0))
                       if(caml_string_notequal(_bPA_,cst_minor_words$0))
                        if(caml_string_notequal(_bPA_,cst_promoted_words$0))
                         if(caml_string_notequal(_bPA_,cst_stack_size$0))
                          if(caml_string_notequal(_bPA_,cst_top_heap_words$0))
                           var switch$1=1;
                          else
                           {if(top_heap_words_field[1])
                             duplicates[1] = [0,_bPA_,duplicates[1]];
                            else
                             {var fvalue=caml_call1(t_of_sexp,field_sexp);
                              top_heap_words_field[1] = [0,fvalue]}
                            var switch$1=0}
                         else
                          {if(stack_size_field[1])
                            duplicates[1] = [0,_bPA_,duplicates[1]];
                           else
                            {var fvalue$0=caml_call1(t_of_sexp,field_sexp);
                             stack_size_field[1] = [0,fvalue$0]}
                           var switch$1=0}
                        else
                         {if(promoted_words_field[1])
                           duplicates[1] = [0,_bPA_,duplicates[1]];
                          else
                           {var fvalue$1=caml_call1(_r_,field_sexp);
                            promoted_words_field[1] = [0,fvalue$1]}
                          var switch$1=0}
                       else
                        {if(minor_words_field[1])
                          duplicates[1] = [0,_bPA_,duplicates[1]];
                         else
                          {var fvalue$2=caml_call1(_r_,field_sexp);
                           minor_words_field[1] = [0,fvalue$2]}
                         var switch$1=0}
                      else
                       {if(minor_collections_field[1])
                         duplicates[1] = [0,_bPA_,duplicates[1]];
                        else
                         {var fvalue$3=caml_call1(t_of_sexp,field_sexp);
                          minor_collections_field[1] = [0,fvalue$3]}
                        var switch$1=0}
                     else
                      {if(major_words_field[1])
                        duplicates[1] = [0,_bPA_,duplicates[1]];
                       else
                        {var fvalue$4=caml_call1(_r_,field_sexp);
                         major_words_field[1] = [0,fvalue$4]}
                       var switch$1=0}
                    else
                     {if(major_collections_field[1])
                       duplicates[1] = [0,_bPA_,duplicates[1]];
                      else
                       {var fvalue$5=caml_call1(t_of_sexp,field_sexp);
                        major_collections_field[1] = [0,fvalue$5]}
                      var switch$1=0}
                   else
                    {if(live_words_field[1])
                      duplicates[1] = [0,_bPA_,duplicates[1]];
                     else
                      {var fvalue$6=caml_call1(t_of_sexp,field_sexp);
                       live_words_field[1] = [0,fvalue$6]}
                     var switch$1=0}
                  else
                   if(caml_string_notequal(_bPA_,cst_compactions$0))
                    if(caml_string_notequal(_bPA_,cst_fragments$0))
                     if(caml_string_notequal(_bPA_,cst_free_blocks$0))
                      if(caml_string_notequal(_bPA_,cst_free_words$0))
                       if(caml_string_notequal(_bPA_,cst_heap_chunks$0))
                        if(caml_string_notequal(_bPA_,cst_heap_words$0))
                         if(caml_string_notequal(_bPA_,cst_largest_free$0))
                          if(caml_string_notequal(_bPA_,cst_live_blocks$0))
                           var switch$1=1;
                          else
                           {if(live_blocks_field[1])
                             duplicates[1] = [0,_bPA_,duplicates[1]];
                            else
                             {var fvalue$7=caml_call1(t_of_sexp,field_sexp);
                              live_blocks_field[1] = [0,fvalue$7]}
                            var switch$1=0}
                         else
                          {if(largest_free_field[1])
                            duplicates[1] = [0,_bPA_,duplicates[1]];
                           else
                            {var fvalue$8=caml_call1(t_of_sexp,field_sexp);
                             largest_free_field[1] = [0,fvalue$8]}
                           var switch$1=0}
                        else
                         {if(heap_words_field[1])
                           duplicates[1] = [0,_bPA_,duplicates[1]];
                          else
                           {var fvalue$9=caml_call1(t_of_sexp,field_sexp);
                            heap_words_field[1] = [0,fvalue$9]}
                          var switch$1=0}
                       else
                        {if(heap_chunks_field[1])
                          duplicates[1] = [0,_bPA_,duplicates[1]];
                         else
                          {var fvalue$10=caml_call1(t_of_sexp,field_sexp);
                           heap_chunks_field[1] = [0,fvalue$10]}
                         var switch$1=0}
                      else
                       {if(free_words_field[1])
                         duplicates[1] = [0,_bPA_,duplicates[1]];
                        else
                         {var fvalue$11=caml_call1(t_of_sexp,field_sexp);
                          free_words_field[1] = [0,fvalue$11]}
                        var switch$1=0}
                     else
                      {if(free_blocks_field[1])
                        duplicates[1] = [0,_bPA_,duplicates[1]];
                       else
                        {var fvalue$12=caml_call1(t_of_sexp,field_sexp);
                         free_blocks_field[1] = [0,fvalue$12]}
                       var switch$1=0}
                    else
                     {if(fragments_field[1])
                       duplicates[1] = [0,_bPA_,duplicates[1]];
                      else
                       {var fvalue$13=caml_call1(t_of_sexp,field_sexp);
                        fragments_field[1] = [0,fvalue$13]}
                      var switch$1=0}
                   else
                    {if(compactions_field[1])
                      duplicates[1] = [0,_bPA_,duplicates[1]];
                     else
                      {var fvalue$14=caml_call1(t_of_sexp,field_sexp);
                       compactions_field[1] = [0,fvalue$14]}
                     var switch$1=0}
                  if(switch$1)
                   if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_bPA_,extra[1]];
                  var param=tail;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[9],tp_loc$18,_bPw_)}
        if(duplicates[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[11],tp_loc$18,duplicates[1],sexp);
        if(extra[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],tp_loc$18,extra[1],sexp);
        var
         _bPB_=minor_words_field[1],
         _bPC_=promoted_words_field[1],
         _bPD_=major_words_field[1],
         _bPE_=minor_collections_field[1],
         _bPF_=major_collections_field[1],
         _bPG_=heap_words_field[1],
         _bPH_=heap_chunks_field[1],
         _bPI_=live_words_field[1],
         _bPJ_=live_blocks_field[1],
         _bPK_=free_words_field[1],
         _bPL_=free_blocks_field[1],
         _bPM_=largest_free_field[1],
         _bPN_=fragments_field[1],
         _bPO_=compactions_field[1],
         _bPP_=top_heap_words_field[1],
         _bPQ_=stack_size_field[1];
        if(_bPB_)
         if(_bPC_)
          if(_bPD_)
           if(_bPE_)
            if(_bPF_)
             if(_bPG_)
              if(_bPH_)
               if(_bPI_)
                if(_bPJ_)
                 if(_bPK_)
                  if(_bPL_)
                   if(_bPM_)
                    if(_bPN_)
                     if(_bPO_)
                      if(_bPP_)
                       if(_bPQ_)
                        {var
                          stack_size_value=_bPQ_[1],
                          top_heap_words_value=_bPP_[1],
                          compactions_value=_bPO_[1],
                          fragments_value=_bPN_[1],
                          largest_free_value=_bPM_[1],
                          free_blocks_value=_bPL_[1],
                          free_words_value=_bPK_[1],
                          live_blocks_value=_bPJ_[1],
                          live_words_value=_bPI_[1],
                          heap_chunks_value=_bPH_[1],
                          heap_words_value=_bPG_[1],
                          major_collections_value=_bPF_[1],
                          minor_collections_value=_bPE_[1],
                          major_words_value=_bPD_[1],
                          promoted_words_value=_bPC_[1],
                          minor_words_value=_bPB_[1];
                         return [0,
                                 minor_words_value,
                                 promoted_words_value,
                                 major_words_value,
                                 minor_collections_value,
                                 major_collections_value,
                                 heap_words_value,
                                 heap_chunks_value,
                                 live_words_value,
                                 live_blocks_value,
                                 free_words_value,
                                 free_blocks_value,
                                 largest_free_value,
                                 fragments_value,
                                 compactions_value,
                                 top_heap_words_value,
                                 stack_size_value]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[14],
                 tp_loc$18,
                 sexp,
                 [0,
                  [0,0 === minor_words_field[1]?1:0,cst_minor_words$1],
                  [0,
                   [0,0 === promoted_words_field[1]?1:0,cst_promoted_words$1],
                   [0,
                    [0,0 === major_words_field[1]?1:0,cst_major_words$1],
                    [0,
                     [0,
                      0 === minor_collections_field[1]?1:0,
                      cst_minor_collections$1],
                     [0,
                      [0,
                       0 === major_collections_field[1]?1:0,
                       cst_major_collections$1],
                      [0,
                       [0,0 === heap_words_field[1]?1:0,cst_heap_words$1],
                       [0,
                        [0,0 === heap_chunks_field[1]?1:0,cst_heap_chunks$1],
                        [0,
                         [0,0 === live_words_field[1]?1:0,cst_live_words$1],
                         [0,
                          [0,0 === live_blocks_field[1]?1:0,cst_live_blocks$1],
                          [0,
                           [0,0 === free_words_field[1]?1:0,cst_free_words$1],
                           [0,
                            [0,0 === free_blocks_field[1]?1:0,cst_free_blocks$1],
                            [0,
                             [0,0 === largest_free_field[1]?1:0,cst_largest_free$1],
                             [0,
                              [0,0 === fragments_field[1]?1:0,cst_fragments$1],
                              [0,
                               [0,0 === compactions_field[1]?1:0,cst_compactions$1],
                               [0,
                                [0,0 === top_heap_words_field[1]?1:0,cst_top_heap_words$1],
                                [0,[0,0 === stack_size_field[1]?1:0,cst_stack_size$1],0]]]]]]]]]]]]]]]])}}
    function sexp_of_t$52(param)
     {var
       v_stack_size=param[16],
       v_top_heap_words=param[15],
       v_compactions=param[14],
       v_fragments=param[13],
       v_largest_free=param[12],
       v_free_blocks=param[11],
       v_free_words=param[10],
       v_live_blocks=param[9],
       v_live_words=param[8],
       v_heap_chunks=param[7],
       v_heap_words=param[6],
       v_major_collections=param[5],
       v_minor_collections=param[4],
       v_major_words=param[3],
       v_promoted_words=param[2],
       v_minor_words=param[1],
       arg=caml_call1(sexp_of_t$0,v_stack_size),
       bnds=[0,[1,[0,_DD_,[0,arg,0]]],0],
       arg$0=caml_call1(sexp_of_t$0,v_top_heap_words),
       bnds$0=[0,[1,[0,_DE_,[0,arg$0,0]]],bnds],
       arg$1=caml_call1(sexp_of_t$0,v_compactions),
       bnds$1=[0,[1,[0,_DF_,[0,arg$1,0]]],bnds$0],
       arg$2=caml_call1(sexp_of_t$0,v_fragments),
       bnds$2=[0,[1,[0,_DG_,[0,arg$2,0]]],bnds$1],
       arg$3=caml_call1(sexp_of_t$0,v_largest_free),
       bnds$3=[0,[1,[0,_DH_,[0,arg$3,0]]],bnds$2],
       arg$4=caml_call1(sexp_of_t$0,v_free_blocks),
       bnds$4=[0,[1,[0,_DI_,[0,arg$4,0]]],bnds$3],
       arg$5=caml_call1(sexp_of_t$0,v_free_words),
       bnds$5=[0,[1,[0,_DJ_,[0,arg$5,0]]],bnds$4],
       arg$6=caml_call1(sexp_of_t$0,v_live_blocks),
       bnds$6=[0,[1,[0,_DK_,[0,arg$6,0]]],bnds$5],
       arg$7=caml_call1(sexp_of_t$0,v_live_words),
       bnds$7=[0,[1,[0,_DL_,[0,arg$7,0]]],bnds$6],
       arg$8=caml_call1(sexp_of_t$0,v_heap_chunks),
       bnds$8=[0,[1,[0,_DM_,[0,arg$8,0]]],bnds$7],
       arg$9=caml_call1(sexp_of_t$0,v_heap_words),
       bnds$9=[0,[1,[0,_DN_,[0,arg$9,0]]],bnds$8],
       arg$10=caml_call1(sexp_of_t$0,v_major_collections),
       bnds$10=[0,[1,[0,_DO_,[0,arg$10,0]]],bnds$9],
       arg$11=caml_call1(sexp_of_t$0,v_minor_collections),
       bnds$11=[0,[1,[0,_DP_,[0,arg$11,0]]],bnds$10],
       arg$12=caml_call1(_s_,v_major_words),
       bnds$12=[0,[1,[0,_DQ_,[0,arg$12,0]]],bnds$11],
       arg$13=caml_call1(_s_,v_promoted_words),
       bnds$13=[0,[1,[0,_DR_,[0,arg$13,0]]],bnds$12],
       arg$14=caml_call1(_s_,v_minor_words),
       bnds$14=[0,[1,[0,_DS_,[0,arg$14,0]]],bnds$13];
      return [1,bnds$14]}
    function stack_size(r){return r[16]}
    function top_heap_words(r){return r[15]}
    function compactions(r){return r[14]}
    function fragments(r){return r[13]}
    function largest_free(r){return r[12]}
    function free_blocks(r){return r[11]}
    function free_words(r){return r[10]}
    function live_blocks(r){return r[9]}
    function live_words(r){return r[8]}
    function heap_chunks(r){return r[7]}
    function heap_words(r){return r[6]}
    function major_collections(r){return r[5]}
    function minor_collections(r){return r[4]}
    function major_words(r){return r[3]}
    function promoted_words(r){return r[2]}
    function minor_words(r){return r[1]}
    function _DT_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              v]}
    var
     _DU_=0,
     stack_size$0=
      [0,[0,function(param){return 0},cst_stack_size$2,_DU_,stack_size,_DT_]];
    function _DV_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              v,
              r[16]]}
    var
     _DW_=0,
     top_heap_words$0=
      [0,
       [0,
        function(param){return 0},
        cst_top_heap_words$2,
        _DW_,
        top_heap_words,
        _DV_]];
    function _DX_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              v,
              r[15],
              r[16]]}
    var
     _DY_=0,
     compactions$0=
      [0,
       [0,function(param){return 0},cst_compactions$2,_DY_,compactions,_DX_]];
    function _DZ_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              v,
              r[14],
              r[15],
              r[16]]}
    var
     _D0_=0,
     fragments$0=
      [0,[0,function(param){return 0},cst_fragments$2,_D0_,fragments,_DZ_]];
    function _D1_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              v,
              r[13],
              r[14],
              r[15],
              r[16]]}
    var
     _D2_=0,
     largest_free$0=
      [0,
       [0,function(param){return 0},cst_largest_free$2,_D2_,largest_free,_D1_]];
    function _D3_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              v,
              r[12],
              r[13],
              r[14],
              r[15],
              r[16]]}
    var
     _D4_=0,
     free_blocks$0=
      [0,
       [0,function(param){return 0},cst_free_blocks$2,_D4_,free_blocks,_D3_]];
    function _D5_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              v,
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16]]}
    var
     _D6_=0,
     free_words$0=
      [0,[0,function(param){return 0},cst_free_words$2,_D6_,free_words,_D5_]];
    function _D7_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              v,
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16]]}
    var
     _D8_=0,
     live_blocks$0=
      [0,
       [0,function(param){return 0},cst_live_blocks$2,_D8_,live_blocks,_D7_]];
    function _D9_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              v,
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16]]}
    var
     _D__=0,
     live_words$0=
      [0,[0,function(param){return 0},cst_live_words$2,_D__,live_words,_D9_]];
    function _D$_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              v,
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16]]}
    var
     _Ea_=0,
     heap_chunks$0=
      [0,
       [0,function(param){return 0},cst_heap_chunks$2,_Ea_,heap_chunks,_D$_]];
    function _Eb_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              v,
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16]]}
    var
     _Ec_=0,
     heap_words$0=
      [0,[0,function(param){return 0},cst_heap_words$2,_Ec_,heap_words,_Eb_]];
    function _Ed_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              v,
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16]]}
    var
     _Ee_=0,
     major_collections$0=
      [0,
       [0,
        function(param){return 0},
        cst_major_collections$2,
        _Ee_,
        major_collections,
        _Ed_]];
    function _Ef_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              v,
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16]]}
    var
     _Eg_=0,
     minor_collections$0=
      [0,
       [0,
        function(param){return 0},
        cst_minor_collections$2,
        _Eg_,
        minor_collections,
        _Ef_]];
    function _Eh_(r,v)
     {return [0,
              r[1],
              r[2],
              v,
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16]]}
    var
     _Ei_=0,
     major_words$0=
      [0,
       [0,function(param){return 0},cst_major_words$2,_Ei_,major_words,_Eh_]];
    function _Ej_(r,v)
     {return [0,
              r[1],
              v,
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16]]}
    var
     _Ek_=0,
     promoted_words$0=
      [0,
       [0,
        function(param){return 0},
        cst_promoted_words$2,
        _Ek_,
        promoted_words,
        _Ej_]];
    function _El_(r,v)
     {return [0,
              v,
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16]]}
    var
     _Em_=0,
     minor_words$0=
      [0,
       [0,function(param){return 0},cst_minor_words$2,_Em_,minor_words,_El_]];
    function make_creator
     (minor_words_fun,
      promoted_words_fun,
      major_words_fun,
      minor_collections_fun,
      major_collections_fun,
      heap_words_fun,
      heap_chunks_fun,
      live_words_fun,
      live_blocks_fun,
      free_words_fun,
      free_blocks_fun,
      largest_free_fun,
      fragments_fun,
      compactions_fun,
      top_heap_words_fun,
      stack_size_fun,
      compile_acc)
     {var
       match=caml_call2(minor_words_fun,minor_words$0,compile_acc),
       compile_acc$0=match[2],
       minor_words_gen=match[1],
       match$0=caml_call2(promoted_words_fun,promoted_words$0,compile_acc$0),
       compile_acc$1=match$0[2],
       promoted_words_gen=match$0[1],
       match$1=caml_call2(major_words_fun,major_words$0,compile_acc$1),
       compile_acc$2=match$1[2],
       major_words_gen=match$1[1],
       match$2=
        caml_call2(minor_collections_fun,minor_collections$0,compile_acc$2),
       compile_acc$3=match$2[2],
       minor_collections_gen=match$2[1],
       match$3=
        caml_call2(major_collections_fun,major_collections$0,compile_acc$3),
       compile_acc$4=match$3[2],
       major_collections_gen=match$3[1],
       match$4=caml_call2(heap_words_fun,heap_words$0,compile_acc$4),
       compile_acc$5=match$4[2],
       heap_words_gen=match$4[1],
       match$5=caml_call2(heap_chunks_fun,heap_chunks$0,compile_acc$5),
       compile_acc$6=match$5[2],
       heap_chunks_gen=match$5[1],
       match$6=caml_call2(live_words_fun,live_words$0,compile_acc$6),
       compile_acc$7=match$6[2],
       live_words_gen=match$6[1],
       match$7=caml_call2(live_blocks_fun,live_blocks$0,compile_acc$7),
       compile_acc$8=match$7[2],
       live_blocks_gen=match$7[1],
       match$8=caml_call2(free_words_fun,free_words$0,compile_acc$8),
       compile_acc$9=match$8[2],
       free_words_gen=match$8[1],
       match$9=caml_call2(free_blocks_fun,free_blocks$0,compile_acc$9),
       compile_acc$10=match$9[2],
       free_blocks_gen=match$9[1],
       match$10=caml_call2(largest_free_fun,largest_free$0,compile_acc$10),
       compile_acc$11=match$10[2],
       largest_free_gen=match$10[1],
       match$11=caml_call2(fragments_fun,fragments$0,compile_acc$11),
       compile_acc$12=match$11[2],
       fragments_gen=match$11[1],
       match$12=caml_call2(compactions_fun,compactions$0,compile_acc$12),
       compile_acc$13=match$12[2],
       compactions_gen=match$12[1],
       match$13=caml_call2(top_heap_words_fun,top_heap_words$0,compile_acc$13),
       compile_acc$14=match$13[2],
       top_heap_words_gen=match$13[1],
       match$14=caml_call2(stack_size_fun,stack_size$0,compile_acc$14),
       compile_acc$15=match$14[2],
       stack_size_gen=match$14[1];
      return [0,
              function(acc)
               {var
                 minor_words=caml_call1(minor_words_gen,acc),
                 promoted_words=caml_call1(promoted_words_gen,acc),
                 major_words=caml_call1(major_words_gen,acc),
                 minor_collections=caml_call1(minor_collections_gen,acc),
                 major_collections=caml_call1(major_collections_gen,acc),
                 heap_words=caml_call1(heap_words_gen,acc),
                 heap_chunks=caml_call1(heap_chunks_gen,acc),
                 live_words=caml_call1(live_words_gen,acc),
                 live_blocks=caml_call1(live_blocks_gen,acc),
                 free_words=caml_call1(free_words_gen,acc),
                 free_blocks=caml_call1(free_blocks_gen,acc),
                 largest_free=caml_call1(largest_free_gen,acc),
                 fragments=caml_call1(fragments_gen,acc),
                 compactions=caml_call1(compactions_gen,acc),
                 top_heap_words=caml_call1(top_heap_words_gen,acc),
                 stack_size=caml_call1(stack_size_gen,acc);
                return [0,
                        minor_words,
                        promoted_words,
                        major_words,
                        minor_collections,
                        major_collections,
                        heap_words,
                        heap_chunks,
                        live_words,
                        live_blocks,
                        free_words,
                        free_blocks,
                        largest_free,
                        fragments,
                        compactions,
                        top_heap_words,
                        stack_size]},
              compile_acc$15]}
    function create$14
     (minor_words,
      promoted_words,
      major_words,
      minor_collections,
      major_collections,
      heap_words,
      heap_chunks,
      live_words,
      live_blocks,
      free_words,
      free_blocks,
      largest_free,
      fragments,
      compactions,
      top_heap_words,
      stack_size)
     {return [0,
              minor_words,
              promoted_words,
              major_words,
              minor_collections,
              major_collections,
              heap_words,
              heap_chunks,
              live_words,
              live_blocks,
              free_words,
              free_blocks,
              largest_free,
              fragments,
              compactions,
              top_heap_words,
              stack_size]}
    function map$24
     (minor_words_fun,
      promoted_words_fun,
      major_words_fun,
      minor_collections_fun,
      major_collections_fun,
      heap_words_fun,
      heap_chunks_fun,
      live_words_fun,
      live_blocks_fun,
      free_words_fun,
      free_blocks_fun,
      largest_free_fun,
      fragments_fun,
      compactions_fun,
      top_heap_words_fun,
      stack_size_fun)
     {var
       _bPh_=caml_call1(stack_size_fun,stack_size$0),
       _bPi_=caml_call1(top_heap_words_fun,top_heap_words$0),
       _bPj_=caml_call1(compactions_fun,compactions$0),
       _bPk_=caml_call1(fragments_fun,fragments$0),
       _bPl_=caml_call1(largest_free_fun,largest_free$0),
       _bPm_=caml_call1(free_blocks_fun,free_blocks$0),
       _bPn_=caml_call1(free_words_fun,free_words$0),
       _bPo_=caml_call1(live_blocks_fun,live_blocks$0),
       _bPp_=caml_call1(live_words_fun,live_words$0),
       _bPq_=caml_call1(heap_chunks_fun,heap_chunks$0),
       _bPr_=caml_call1(heap_words_fun,heap_words$0),
       _bPs_=caml_call1(major_collections_fun,major_collections$0),
       _bPt_=caml_call1(minor_collections_fun,minor_collections$0),
       _bPu_=caml_call1(major_words_fun,major_words$0),
       _bPv_=caml_call1(promoted_words_fun,promoted_words$0);
      return [0,
              caml_call1(minor_words_fun,minor_words$0),
              _bPv_,
              _bPu_,
              _bPt_,
              _bPs_,
              _bPr_,
              _bPq_,
              _bPp_,
              _bPo_,
              _bPn_,
              _bPm_,
              _bPl_,
              _bPk_,
              _bPj_,
              _bPi_,
              _bPh_]}
    function iter$19
     (minor_words_fun,
      promoted_words_fun,
      major_words_fun,
      minor_collections_fun,
      major_collections_fun,
      heap_words_fun,
      heap_chunks_fun,
      live_words_fun,
      live_blocks_fun,
      free_words_fun,
      free_blocks_fun,
      largest_free_fun,
      fragments_fun,
      compactions_fun,
      top_heap_words_fun,
      stack_size_fun)
     {caml_call1(minor_words_fun,minor_words$0);
      caml_call1(promoted_words_fun,promoted_words$0);
      caml_call1(major_words_fun,major_words$0);
      caml_call1(minor_collections_fun,minor_collections$0);
      caml_call1(major_collections_fun,major_collections$0);
      caml_call1(heap_words_fun,heap_words$0);
      caml_call1(heap_chunks_fun,heap_chunks$0);
      caml_call1(live_words_fun,live_words$0);
      caml_call1(live_blocks_fun,live_blocks$0);
      caml_call1(free_words_fun,free_words$0);
      caml_call1(free_blocks_fun,free_blocks$0);
      caml_call1(largest_free_fun,largest_free$0);
      caml_call1(fragments_fun,fragments$0);
      caml_call1(compactions_fun,compactions$0);
      caml_call1(top_heap_words_fun,top_heap_words$0);
      return caml_call1(stack_size_fun,stack_size$0)}
    function fold$15
     (init,
      minor_words_fun,
      promoted_words_fun,
      major_words_fun,
      minor_collections_fun,
      major_collections_fun,
      heap_words_fun,
      heap_chunks_fun,
      live_words_fun,
      live_blocks_fun,
      free_words_fun,
      free_blocks_fun,
      largest_free_fun,
      fragments_fun,
      compactions_fun,
      top_heap_words_fun,
      stack_size_fun)
     {return caml_call2
              (stack_size_fun,
               caml_call2
                (top_heap_words_fun,
                 caml_call2
                  (compactions_fun,
                   caml_call2
                    (fragments_fun,
                     caml_call2
                      (largest_free_fun,
                       caml_call2
                        (free_blocks_fun,
                         caml_call2
                          (free_words_fun,
                           caml_call2
                            (live_blocks_fun,
                             caml_call2
                              (live_words_fun,
                               caml_call2
                                (heap_chunks_fun,
                                 caml_call2
                                  (heap_words_fun,
                                   caml_call2
                                    (major_collections_fun,
                                     caml_call2
                                      (minor_collections_fun,
                                       caml_call2
                                        (major_words_fun,
                                         caml_call2
                                          (promoted_words_fun,
                                           caml_call2(minor_words_fun,init,minor_words$0),
                                           promoted_words$0),
                                         major_words$0),
                                       minor_collections$0),
                                     major_collections$0),
                                   heap_words$0),
                                 heap_chunks$0),
                               live_words$0),
                             live_blocks$0),
                           free_words$0),
                         free_blocks$0),
                       largest_free$0),
                     fragments$0),
                   compactions$0),
                 top_heap_words$0),
               stack_size$0)}
    function map_poly(record)
     {var
       _bO4_=[0,caml_call1(record[1],stack_size$0),0],
       _bO5_=[0,caml_call1(record[1],top_heap_words$0),_bO4_],
       _bO6_=[0,caml_call1(record[1],compactions$0),_bO5_],
       _bO7_=[0,caml_call1(record[1],fragments$0),_bO6_],
       _bO8_=[0,caml_call1(record[1],largest_free$0),_bO7_],
       _bO9_=[0,caml_call1(record[1],free_blocks$0),_bO8_],
       _bO__=[0,caml_call1(record[1],free_words$0),_bO9_],
       _bO$_=[0,caml_call1(record[1],live_blocks$0),_bO__],
       _bPa_=[0,caml_call1(record[1],live_words$0),_bO$_],
       _bPb_=[0,caml_call1(record[1],heap_chunks$0),_bPa_],
       _bPc_=[0,caml_call1(record[1],heap_words$0),_bPb_],
       _bPd_=[0,caml_call1(record[1],major_collections$0),_bPc_],
       _bPe_=[0,caml_call1(record[1],minor_collections$0),_bPd_],
       _bPf_=[0,caml_call1(record[1],major_words$0),_bPe_],
       _bPg_=[0,caml_call1(record[1],promoted_words$0),_bPf_];
      return [0,caml_call1(record[1],minor_words$0),_bPg_]}
    function for_all$13
     (minor_words_fun,
      promoted_words_fun,
      major_words_fun,
      minor_collections_fun,
      major_collections_fun,
      heap_words_fun,
      heap_chunks_fun,
      live_words_fun,
      live_blocks_fun,
      free_words_fun,
      free_blocks_fun,
      largest_free_fun,
      fragments_fun,
      compactions_fun,
      top_heap_words_fun,
      stack_size_fun)
     {var
       _bOP_=caml_call1(minor_words_fun,minor_words$0),
       _bOQ_=_bOP_?caml_call1(promoted_words_fun,promoted_words$0):_bOP_,
       _bOR_=_bOQ_?caml_call1(major_words_fun,major_words$0):_bOQ_,
       _bOS_=_bOR_?caml_call1(minor_collections_fun,minor_collections$0):_bOR_,
       _bOT_=_bOS_?caml_call1(major_collections_fun,major_collections$0):_bOS_,
       _bOU_=_bOT_?caml_call1(heap_words_fun,heap_words$0):_bOT_,
       _bOV_=_bOU_?caml_call1(heap_chunks_fun,heap_chunks$0):_bOU_,
       _bOW_=_bOV_?caml_call1(live_words_fun,live_words$0):_bOV_,
       _bOX_=_bOW_?caml_call1(live_blocks_fun,live_blocks$0):_bOW_,
       _bOY_=_bOX_?caml_call1(free_words_fun,free_words$0):_bOX_,
       _bOZ_=_bOY_?caml_call1(free_blocks_fun,free_blocks$0):_bOY_,
       _bO0_=_bOZ_?caml_call1(largest_free_fun,largest_free$0):_bOZ_,
       _bO1_=_bO0_?caml_call1(fragments_fun,fragments$0):_bO0_,
       _bO2_=_bO1_?caml_call1(compactions_fun,compactions$0):_bO1_,
       _bO3_=_bO2_?caml_call1(top_heap_words_fun,top_heap_words$0):_bO2_;
      return _bO3_?caml_call1(stack_size_fun,stack_size$0):_bO3_}
    function exists$13
     (minor_words_fun,
      promoted_words_fun,
      major_words_fun,
      minor_collections_fun,
      major_collections_fun,
      heap_words_fun,
      heap_chunks_fun,
      live_words_fun,
      live_blocks_fun,
      free_words_fun,
      free_blocks_fun,
      largest_free_fun,
      fragments_fun,
      compactions_fun,
      top_heap_words_fun,
      stack_size_fun)
     {var
       _bOO_=caml_call1(minor_words_fun,minor_words$0),
       _bOA_=_bOO_ || caml_call1(promoted_words_fun,promoted_words$0),
       _bOB_=_bOA_ || caml_call1(major_words_fun,major_words$0),
       _bOC_=_bOB_ || caml_call1(minor_collections_fun,minor_collections$0),
       _bOD_=_bOC_ || caml_call1(major_collections_fun,major_collections$0),
       _bOE_=_bOD_ || caml_call1(heap_words_fun,heap_words$0),
       _bOF_=_bOE_ || caml_call1(heap_chunks_fun,heap_chunks$0),
       _bOG_=_bOF_ || caml_call1(live_words_fun,live_words$0),
       _bOH_=_bOG_ || caml_call1(live_blocks_fun,live_blocks$0),
       _bOI_=_bOH_ || caml_call1(free_words_fun,free_words$0),
       _bOJ_=_bOI_ || caml_call1(free_blocks_fun,free_blocks$0),
       _bOK_=_bOJ_ || caml_call1(largest_free_fun,largest_free$0),
       _bOL_=_bOK_ || caml_call1(fragments_fun,fragments$0),
       _bOM_=_bOL_ || caml_call1(compactions_fun,compactions$0),
       _bON_=_bOM_ || caml_call1(top_heap_words_fun,top_heap_words$0);
      return _bON_?_bON_:caml_call1(stack_size_fun,stack_size$0)}
    function to_list$11
     (minor_words_fun,
      promoted_words_fun,
      major_words_fun,
      minor_collections_fun,
      major_collections_fun,
      heap_words_fun,
      heap_chunks_fun,
      live_words_fun,
      live_blocks_fun,
      free_words_fun,
      free_blocks_fun,
      largest_free_fun,
      fragments_fun,
      compactions_fun,
      top_heap_words_fun,
      stack_size_fun)
     {var
       _bOl_=[0,caml_call1(stack_size_fun,stack_size$0),0],
       _bOm_=[0,caml_call1(top_heap_words_fun,top_heap_words$0),_bOl_],
       _bOn_=[0,caml_call1(compactions_fun,compactions$0),_bOm_],
       _bOo_=[0,caml_call1(fragments_fun,fragments$0),_bOn_],
       _bOp_=[0,caml_call1(largest_free_fun,largest_free$0),_bOo_],
       _bOq_=[0,caml_call1(free_blocks_fun,free_blocks$0),_bOp_],
       _bOr_=[0,caml_call1(free_words_fun,free_words$0),_bOq_],
       _bOs_=[0,caml_call1(live_blocks_fun,live_blocks$0),_bOr_],
       _bOt_=[0,caml_call1(live_words_fun,live_words$0),_bOs_],
       _bOu_=[0,caml_call1(heap_chunks_fun,heap_chunks$0),_bOt_],
       _bOv_=[0,caml_call1(heap_words_fun,heap_words$0),_bOu_],
       _bOw_=[0,caml_call1(major_collections_fun,major_collections$0),_bOv_],
       _bOx_=[0,caml_call1(minor_collections_fun,minor_collections$0),_bOw_],
       _bOy_=[0,caml_call1(major_words_fun,major_words$0),_bOx_],
       _bOz_=[0,caml_call1(promoted_words_fun,promoted_words$0),_bOy_];
      return [0,caml_call1(minor_words_fun,minor_words$0),_bOz_]}
    function iter$20
     (record,
      minor_words_fun,
      promoted_words_fun,
      major_words_fun,
      minor_collections_fun,
      major_collections_fun,
      heap_words_fun,
      heap_chunks_fun,
      live_words_fun,
      live_blocks_fun,
      free_words_fun,
      free_blocks_fun,
      largest_free_fun,
      fragments_fun,
      compactions_fun,
      top_heap_words_fun,
      stack_size_fun)
     {caml_call3(minor_words_fun,minor_words$0,record,record[1]);
      caml_call3(promoted_words_fun,promoted_words$0,record,record[2]);
      caml_call3(major_words_fun,major_words$0,record,record[3]);
      caml_call3(minor_collections_fun,minor_collections$0,record,record[4]);
      caml_call3(major_collections_fun,major_collections$0,record,record[5]);
      caml_call3(heap_words_fun,heap_words$0,record,record[6]);
      caml_call3(heap_chunks_fun,heap_chunks$0,record,record[7]);
      caml_call3(live_words_fun,live_words$0,record,record[8]);
      caml_call3(live_blocks_fun,live_blocks$0,record,record[9]);
      caml_call3(free_words_fun,free_words$0,record,record[10]);
      caml_call3(free_blocks_fun,free_blocks$0,record,record[11]);
      caml_call3(largest_free_fun,largest_free$0,record,record[12]);
      caml_call3(fragments_fun,fragments$0,record,record[13]);
      caml_call3(compactions_fun,compactions$0,record,record[14]);
      caml_call3(top_heap_words_fun,top_heap_words$0,record,record[15]);
      return caml_call3(stack_size_fun,stack_size$0,record,record[16])}
    function fold$16
     (record,
      init,
      minor_words_fun,
      promoted_words_fun,
      major_words_fun,
      minor_collections_fun,
      major_collections_fun,
      heap_words_fun,
      heap_chunks_fun,
      live_words_fun,
      live_blocks_fun,
      free_words_fun,
      free_blocks_fun,
      largest_free_fun,
      fragments_fun,
      compactions_fun,
      top_heap_words_fun,
      stack_size_fun)
     {var
       _bN8_=record[16],
       _bN9_=record[15],
       _bN__=record[14],
       _bN$_=record[13],
       _bOa_=record[12],
       _bOb_=record[11],
       _bOc_=record[10],
       _bOd_=record[9],
       _bOe_=record[8],
       _bOf_=record[7],
       _bOg_=record[6],
       _bOh_=record[5],
       _bOi_=record[4],
       _bOj_=record[3],
       _bOk_=record[2];
      return caml_call4
              (stack_size_fun,
               caml_call4
                (top_heap_words_fun,
                 caml_call4
                  (compactions_fun,
                   caml_call4
                    (fragments_fun,
                     caml_call4
                      (largest_free_fun,
                       caml_call4
                        (free_blocks_fun,
                         caml_call4
                          (free_words_fun,
                           caml_call4
                            (live_blocks_fun,
                             caml_call4
                              (live_words_fun,
                               caml_call4
                                (heap_chunks_fun,
                                 caml_call4
                                  (heap_words_fun,
                                   caml_call4
                                    (major_collections_fun,
                                     caml_call4
                                      (minor_collections_fun,
                                       caml_call4
                                        (major_words_fun,
                                         caml_call4
                                          (promoted_words_fun,
                                           caml_call4
                                            (minor_words_fun,init,minor_words$0,record,record[1]),
                                           promoted_words$0,
                                           record,
                                           _bOk_),
                                         major_words$0,
                                         record,
                                         _bOj_),
                                       minor_collections$0,
                                       record,
                                       _bOi_),
                                     major_collections$0,
                                     record,
                                     _bOh_),
                                   heap_words$0,
                                   record,
                                   _bOg_),
                                 heap_chunks$0,
                                 record,
                                 _bOf_),
                               live_words$0,
                               record,
                               _bOe_),
                             live_blocks$0,
                             record,
                             _bOd_),
                           free_words$0,
                           record,
                           _bOc_),
                         free_blocks$0,
                         record,
                         _bOb_),
                       largest_free$0,
                       record,
                       _bOa_),
                     fragments$0,
                     record,
                     _bN$_),
                   compactions$0,
                   record,
                   _bN__),
                 top_heap_words$0,
                 record,
                 _bN9_),
               stack_size$0,
               record,
               _bN8_)}
    function for_all$14
     (record,
      minor_words_fun,
      promoted_words_fun,
      major_words_fun,
      minor_collections_fun,
      major_collections_fun,
      heap_words_fun,
      heap_chunks_fun,
      live_words_fun,
      live_blocks_fun,
      free_words_fun,
      free_blocks_fun,
      largest_free_fun,
      fragments_fun,
      compactions_fun,
      top_heap_words_fun,
      stack_size_fun)
     {var
       _bNT_=caml_call3(minor_words_fun,minor_words$0,record,record[1]),
       _bNU_=
        _bNT_
         ?caml_call3(promoted_words_fun,promoted_words$0,record,record[2])
         :_bNT_,
       _bNV_=
        _bNU_?caml_call3(major_words_fun,major_words$0,record,record[3]):_bNU_,
       _bNW_=
        _bNV_
         ?caml_call3
           (minor_collections_fun,minor_collections$0,record,record[4])
         :_bNV_,
       _bNX_=
        _bNW_
         ?caml_call3
           (major_collections_fun,major_collections$0,record,record[5])
         :_bNW_,
       _bNY_=
        _bNX_?caml_call3(heap_words_fun,heap_words$0,record,record[6]):_bNX_,
       _bNZ_=
        _bNY_?caml_call3(heap_chunks_fun,heap_chunks$0,record,record[7]):_bNY_,
       _bN0_=
        _bNZ_?caml_call3(live_words_fun,live_words$0,record,record[8]):_bNZ_,
       _bN1_=
        _bN0_?caml_call3(live_blocks_fun,live_blocks$0,record,record[9]):_bN0_,
       _bN2_=
        _bN1_?caml_call3(free_words_fun,free_words$0,record,record[10]):_bN1_,
       _bN3_=
        _bN2_
         ?caml_call3(free_blocks_fun,free_blocks$0,record,record[11])
         :_bN2_,
       _bN4_=
        _bN3_
         ?caml_call3(largest_free_fun,largest_free$0,record,record[12])
         :_bN3_,
       _bN5_=
        _bN4_?caml_call3(fragments_fun,fragments$0,record,record[13]):_bN4_,
       _bN6_=
        _bN5_
         ?caml_call3(compactions_fun,compactions$0,record,record[14])
         :_bN5_,
       _bN7_=
        _bN6_
         ?caml_call3(top_heap_words_fun,top_heap_words$0,record,record[15])
         :_bN6_;
      return _bN7_
              ?caml_call3(stack_size_fun,stack_size$0,record,record[16])
              :_bN7_}
    function exists$14
     (record,
      minor_words_fun,
      promoted_words_fun,
      major_words_fun,
      minor_collections_fun,
      major_collections_fun,
      heap_words_fun,
      heap_chunks_fun,
      live_words_fun,
      live_blocks_fun,
      free_words_fun,
      free_blocks_fun,
      largest_free_fun,
      fragments_fun,
      compactions_fun,
      top_heap_words_fun,
      stack_size_fun)
     {var
       _bNS_=caml_call3(minor_words_fun,minor_words$0,record,record[1]),
       _bNE_=
        _bNS_
        ||
        caml_call3(promoted_words_fun,promoted_words$0,record,record[2]),
       _bNF_=
        _bNE_
        ||
        caml_call3(major_words_fun,major_words$0,record,record[3]),
       _bNG_=
        _bNF_
        ||
        caml_call3(minor_collections_fun,minor_collections$0,record,record[4]),
       _bNH_=
        _bNG_
        ||
        caml_call3(major_collections_fun,major_collections$0,record,record[5]),
       _bNI_=_bNH_ || caml_call3(heap_words_fun,heap_words$0,record,record[6]),
       _bNJ_=
        _bNI_
        ||
        caml_call3(heap_chunks_fun,heap_chunks$0,record,record[7]),
       _bNK_=_bNJ_ || caml_call3(live_words_fun,live_words$0,record,record[8]),
       _bNL_=
        _bNK_
        ||
        caml_call3(live_blocks_fun,live_blocks$0,record,record[9]),
       _bNM_=
        _bNL_
        ||
        caml_call3(free_words_fun,free_words$0,record,record[10]),
       _bNN_=
        _bNM_
        ||
        caml_call3(free_blocks_fun,free_blocks$0,record,record[11]),
       _bNO_=
        _bNN_
        ||
        caml_call3(largest_free_fun,largest_free$0,record,record[12]),
       _bNP_=_bNO_ || caml_call3(fragments_fun,fragments$0,record,record[13]),
       _bNQ_=
        _bNP_
        ||
        caml_call3(compactions_fun,compactions$0,record,record[14]),
       _bNR_=
        _bNQ_
        ||
        caml_call3(top_heap_words_fun,top_heap_words$0,record,record[15]);
      return _bNR_
              ?_bNR_
              :caml_call3(stack_size_fun,stack_size$0,record,record[16])}
    function to_list$12
     (record,
      minor_words_fun,
      promoted_words_fun,
      major_words_fun,
      minor_collections_fun,
      major_collections_fun,
      heap_words_fun,
      heap_chunks_fun,
      live_words_fun,
      live_blocks_fun,
      free_words_fun,
      free_blocks_fun,
      largest_free_fun,
      fragments_fun,
      compactions_fun,
      top_heap_words_fun,
      stack_size_fun)
     {var
       _bNp_=[0,caml_call3(stack_size_fun,stack_size$0,record,record[16]),0],
       _bNq_=
        [0,
         caml_call3(top_heap_words_fun,top_heap_words$0,record,record[15]),
         _bNp_],
       _bNr_=
        [0,caml_call3(compactions_fun,compactions$0,record,record[14]),_bNq_],
       _bNs_=[0,caml_call3(fragments_fun,fragments$0,record,record[13]),_bNr_],
       _bNt_=
        [0,
         caml_call3(largest_free_fun,largest_free$0,record,record[12]),
         _bNs_],
       _bNu_=
        [0,caml_call3(free_blocks_fun,free_blocks$0,record,record[11]),_bNt_],
       _bNv_=
        [0,caml_call3(free_words_fun,free_words$0,record,record[10]),_bNu_],
       _bNw_=
        [0,caml_call3(live_blocks_fun,live_blocks$0,record,record[9]),_bNv_],
       _bNx_=
        [0,caml_call3(live_words_fun,live_words$0,record,record[8]),_bNw_],
       _bNy_=
        [0,caml_call3(heap_chunks_fun,heap_chunks$0,record,record[7]),_bNx_],
       _bNz_=
        [0,caml_call3(heap_words_fun,heap_words$0,record,record[6]),_bNy_],
       _bNA_=
        [0,
         caml_call3
          (major_collections_fun,major_collections$0,record,record[5]),
         _bNz_],
       _bNB_=
        [0,
         caml_call3
          (minor_collections_fun,minor_collections$0,record,record[4]),
         _bNA_],
       _bNC_=
        [0,caml_call3(major_words_fun,major_words$0,record,record[3]),_bNB_],
       _bND_=
        [0,
         caml_call3(promoted_words_fun,promoted_words$0,record,record[2]),
         _bNC_];
      return [0,
              caml_call3(minor_words_fun,minor_words$0,record,record[1]),
              _bND_]}
    function map$25
     (record,
      minor_words_fun,
      promoted_words_fun,
      major_words_fun,
      minor_collections_fun,
      major_collections_fun,
      heap_words_fun,
      heap_chunks_fun,
      live_words_fun,
      live_blocks_fun,
      free_words_fun,
      free_blocks_fun,
      largest_free_fun,
      fragments_fun,
      compactions_fun,
      top_heap_words_fun,
      stack_size_fun)
     {var
       _bNa_=caml_call3(stack_size_fun,stack_size$0,record,record[16]),
       _bNb_=caml_call3(top_heap_words_fun,top_heap_words$0,record,record[15]),
       _bNc_=caml_call3(compactions_fun,compactions$0,record,record[14]),
       _bNd_=caml_call3(fragments_fun,fragments$0,record,record[13]),
       _bNe_=caml_call3(largest_free_fun,largest_free$0,record,record[12]),
       _bNf_=caml_call3(free_blocks_fun,free_blocks$0,record,record[11]),
       _bNg_=caml_call3(free_words_fun,free_words$0,record,record[10]),
       _bNh_=caml_call3(live_blocks_fun,live_blocks$0,record,record[9]),
       _bNi_=caml_call3(live_words_fun,live_words$0,record,record[8]),
       _bNj_=caml_call3(heap_chunks_fun,heap_chunks$0,record,record[7]),
       _bNk_=caml_call3(heap_words_fun,heap_words$0,record,record[6]),
       _bNl_=
        caml_call3(major_collections_fun,major_collections$0,record,record[5]),
       _bNm_=
        caml_call3(minor_collections_fun,minor_collections$0,record,record[4]),
       _bNn_=caml_call3(major_words_fun,major_words$0,record,record[3]),
       _bNo_=caml_call3(promoted_words_fun,promoted_words$0,record,record[2]);
      return [0,
              caml_call3(minor_words_fun,minor_words$0,record,record[1]),
              _bNo_,
              _bNn_,
              _bNm_,
              _bNl_,
              _bNk_,
              _bNj_,
              _bNi_,
              _bNh_,
              _bNg_,
              _bNf_,
              _bNe_,
              _bNd_,
              _bNc_,
              _bNb_,
              _bNa_]}
    function set_all_mutable_fields(record){return 0}
    var
     Direct=
      [0,
       iter$20,
       fold$16,
       for_all$14,
       exists$14,
       to_list$12,
       map$25,
       set_all_mutable_fields],
     include$63=Make$2([0,compare$39,t_of_sexp$41,sexp_of_t$52]),
     equal$24=include$63[7],
     compare$40=include$63[8],
     min$6=include$63[9],
     max$6=include$63[10],
     ascending$5=include$63[11],
     descending$5=include$63[12],
     between$5=include$63[13],
     clamp_exn$5=include$63[14],
     clamp$5=include$63[15],
     comparator$12=include$63[16],
     validate_lbound$5=include$63[17],
     validate_ubound$5=include$63[18],
     validate_bound$5=include$63[19],
     Replace_polymorphic_compare$3=include$63[20],
     Map$6=include$63[21],
     Set$6=include$63[22],
     _En_=include$63[1],
     _Eo_=include$63[2],
     _Ep_=include$63[3],
     _Eq_=include$63[4],
     _Er_=include$63[5],
     _Es_=include$63[6];
    function compare$41(a_003,b_004)
     {if(caml_call2(Ppx_compare_lib[1],a_003,b_004))return 0;
      var n=caml_call2(_t_,a_003[1],b_004[1]);
      if(0 === n)
       {var n$0=caml_call2(_t_,a_003[2],b_004[2]);
        if(0 === n$0)
         {var n$1=caml_call2(_t_,a_003[3],b_004[3]);
          if(0 === n$1)
           {var n$2=caml_call2(_t_,a_003[4],b_004[4]);
            if(0 === n$2)
             {var n$3=caml_call2(_t_,a_003[5],b_004[5]);
              if(0 === n$3)
               {var n$4=caml_call2(_t_,a_003[6],b_004[6]);
                if(0 === n$4)
                 {var n$5=caml_call2(_t_,a_003[7],b_004[7]);
                  return 0 === n$5?caml_call2(_t_,a_003[8],b_004[8]):n$5}
                return n$4}
              return n$3}
            return n$2}
          return n$1}
        return n$0}
      return n}
    var
     _Et_=
      caml_call1
       (Bin_prot_Shape[8],
        [0,
         [0,cst_minor_heap_size,_ce_],
         [0,
          [0,cst_major_heap_increment,_ce_],
          [0,
           [0,cst_space_overhead,_ce_],
           [0,
            [0,cst_verbose,_ce_],
            [0,
             [0,cst_max_overhead,_ce_],
             [0,
              [0,cst_stack_limit,_ce_],
              [0,
               [0,cst_allocation_policy,_ce_],
               [0,[0,cst_window_size,_ce_],0]]]]]]]]),
     _Eu_=[0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$109),0,_Et_],0],
     _Ev_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_gc_ml_33_4),
     group$53=caml_call2(Bin_prot_Shape[6],_Ev_,_Eu_),
     _Ew_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$110),
     bin_shape_t$49=caml_call1(caml_call2(Bin_prot_Shape[14],group$53,_Ew_),0);
    function bin_size_t$42(param)
     {var
       v1=param[1],
       v2=param[2],
       v3=param[3],
       v4=param[4],
       v5=param[5],
       v6=param[6],
       v7=param[7],
       v8=param[8],
       size=caml_call1(bin_size_t$1,v1) | 0,
       size$0=size + caml_call1(bin_size_t$1,v2) | 0,
       size$1=size$0 + caml_call1(bin_size_t$1,v3) | 0,
       size$2=size$1 + caml_call1(bin_size_t$1,v4) | 0,
       size$3=size$2 + caml_call1(bin_size_t$1,v5) | 0,
       size$4=size$3 + caml_call1(bin_size_t$1,v6) | 0,
       size$5=size$4 + caml_call1(bin_size_t$1,v7) | 0;
      return size$5 + caml_call1(bin_size_t$1,v8) | 0}
    function bin_write_t$42(buf,pos,param)
     {var
       v1=param[1],
       v2=param[2],
       v3=param[3],
       v4=param[4],
       v5=param[5],
       v6=param[6],
       v7=param[7],
       v8=param[8],
       pos$0=caml_call3(bin_write_t$1,buf,pos,v1),
       pos$1=caml_call3(bin_write_t$1,buf,pos$0,v2),
       pos$2=caml_call3(bin_write_t$1,buf,pos$1,v3),
       pos$3=caml_call3(bin_write_t$1,buf,pos$2,v4),
       pos$4=caml_call3(bin_write_t$1,buf,pos$3,v5),
       pos$5=caml_call3(bin_write_t$1,buf,pos$4,v6),
       pos$6=caml_call3(bin_write_t$1,buf,pos$5,v7);
      return caml_call3(bin_write_t$1,buf,pos$6,v8)}
    var bin_writer_t$44=[0,bin_size_t$42,bin_write_t$42];
    function bin_read_t$85(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_src_gc_ml_Control_T_t,pos_ref[1])}
    function bin_read_t$86(buf,pos_ref)
     {var
       v_minor_heap_size=caml_call2(bin_read_t$3,buf,pos_ref),
       v_major_heap_increment=caml_call2(bin_read_t$3,buf,pos_ref),
       v_space_overhead=caml_call2(bin_read_t$3,buf,pos_ref),
       v_verbose=caml_call2(bin_read_t$3,buf,pos_ref),
       v_max_overhead=caml_call2(bin_read_t$3,buf,pos_ref),
       v_stack_limit=caml_call2(bin_read_t$3,buf,pos_ref),
       v_allocation_policy=caml_call2(bin_read_t$3,buf,pos_ref),
       v_window_size=caml_call2(bin_read_t$3,buf,pos_ref);
      return [0,
              v_minor_heap_size,
              v_major_heap_increment,
              v_space_overhead,
              v_verbose,
              v_max_overhead,
              v_stack_limit,
              v_allocation_policy,
              v_window_size]}
    var
     bin_reader_t$44=[0,bin_read_t$86,bin_read_t$85],
     bin_t$44=[0,bin_shape_t$49,bin_writer_t$44,bin_reader_t$44];
    function t_of_sexp$42(sexp)
     {if(0 === sexp[0])
       return caml_call2(Sexplib0_Sexp_conv_error[15],tp_loc$19,sexp);
      var
       field_sexps=sexp[1],
       minor_heap_size_field=[0,0],
       major_heap_increment_field=[0,0],
       space_overhead_field=[0,0],
       verbose_field=[0,0],
       max_overhead_field=[0,0],
       stack_limit_field=[0,0],
       allocation_policy_field=[0,0],
       window_size_field=[0,0],
       duplicates=[0,0],
       extra=[0,0],
       param=field_sexps;
      for(;;)
       {if(param)
         {var _bMZ_=param[1];
          if(1 === _bMZ_[0])
           {var _bM0_=_bMZ_[1];
            if(_bM0_)
             {var _bM1_=_bM0_[1];
              if(0 === _bM1_[0])
               {var _bM2_=_bM0_[2],_bM3_=_bM1_[1];
                if(! _bM2_)
                 {var tail$0=param[2];
                  if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_bM3_,extra[1]];
                  var param=tail$0;
                  continue}
                if(! _bM2_[2])
                 {var tail=param[2],field_sexp=_bM2_[1];
                  if(caml_string_notequal(_bM3_,cst_allocation_policy$0))
                   if(caml_string_notequal(_bM3_,cst_major_heap_increment$0))
                    if(caml_string_notequal(_bM3_,cst_max_overhead$0))
                     if(caml_string_notequal(_bM3_,cst_minor_heap_size$0))
                      if(caml_string_notequal(_bM3_,cst_space_overhead$0))
                       if(caml_string_notequal(_bM3_,cst_stack_limit$0))
                        if(caml_string_notequal(_bM3_,cst_verbose$0))
                         if(caml_string_notequal(_bM3_,cst_window_size$0))
                          {if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_bM3_,extra[1]]}
                         else
                          if(window_size_field[1])
                           duplicates[1] = [0,_bM3_,duplicates[1]];
                          else
                           {var fvalue=caml_call1(t_of_sexp,field_sexp);
                            window_size_field[1] = [0,fvalue]}
                        else
                         if(verbose_field[1])
                          duplicates[1] = [0,_bM3_,duplicates[1]];
                         else
                          {var fvalue$0=caml_call1(t_of_sexp,field_sexp);
                           verbose_field[1] = [0,fvalue$0]}
                       else
                        if(stack_limit_field[1])
                         duplicates[1] = [0,_bM3_,duplicates[1]];
                        else
                         {var fvalue$1=caml_call1(t_of_sexp,field_sexp);
                          stack_limit_field[1] = [0,fvalue$1]}
                      else
                       if(space_overhead_field[1])
                        duplicates[1] = [0,_bM3_,duplicates[1]];
                       else
                        {var fvalue$2=caml_call1(t_of_sexp,field_sexp);
                         space_overhead_field[1] = [0,fvalue$2]}
                     else
                      if(minor_heap_size_field[1])
                       duplicates[1] = [0,_bM3_,duplicates[1]];
                      else
                       {var fvalue$3=caml_call1(t_of_sexp,field_sexp);
                        minor_heap_size_field[1] = [0,fvalue$3]}
                    else
                     if(max_overhead_field[1])
                      duplicates[1] = [0,_bM3_,duplicates[1]];
                     else
                      {var fvalue$4=caml_call1(t_of_sexp,field_sexp);
                       max_overhead_field[1] = [0,fvalue$4]}
                   else
                    if(major_heap_increment_field[1])
                     duplicates[1] = [0,_bM3_,duplicates[1]];
                    else
                     {var fvalue$5=caml_call1(t_of_sexp,field_sexp);
                      major_heap_increment_field[1] = [0,fvalue$5]}
                  else
                   if(allocation_policy_field[1])
                    duplicates[1] = [0,_bM3_,duplicates[1]];
                   else
                    {var fvalue$6=caml_call1(t_of_sexp,field_sexp);
                     allocation_policy_field[1] = [0,fvalue$6]}
                  var param=tail;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[9],tp_loc$19,_bMZ_)}
        if(duplicates[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[11],tp_loc$19,duplicates[1],sexp);
        if(extra[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],tp_loc$19,extra[1],sexp);
        var
         _bM4_=minor_heap_size_field[1],
         _bM5_=major_heap_increment_field[1],
         _bM6_=space_overhead_field[1],
         _bM7_=verbose_field[1],
         _bM8_=max_overhead_field[1],
         _bM9_=stack_limit_field[1],
         _bM__=allocation_policy_field[1],
         _bM$_=window_size_field[1];
        if(_bM4_)
         if(_bM5_)
          if(_bM6_)
           if(_bM7_)
            if(_bM8_)
             if(_bM9_)
              if(_bM__)
               if(_bM$_)
                {var
                  window_size_value=_bM$_[1],
                  allocation_policy_value=_bM__[1],
                  stack_limit_value=_bM9_[1],
                  max_overhead_value=_bM8_[1],
                  verbose_value=_bM7_[1],
                  space_overhead_value=_bM6_[1],
                  major_heap_increment_value=_bM5_[1],
                  minor_heap_size_value=_bM4_[1];
                 return [0,
                         minor_heap_size_value,
                         major_heap_increment_value,
                         space_overhead_value,
                         verbose_value,
                         max_overhead_value,
                         stack_limit_value,
                         allocation_policy_value,
                         window_size_value]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[14],
                 tp_loc$19,
                 sexp,
                 [0,
                  [0,0 === minor_heap_size_field[1]?1:0,cst_minor_heap_size$1],
                  [0,
                   [0,
                    0 === major_heap_increment_field[1]?1:0,
                    cst_major_heap_increment$1],
                   [0,
                    [0,0 === space_overhead_field[1]?1:0,cst_space_overhead$1],
                    [0,
                     [0,0 === verbose_field[1]?1:0,cst_verbose$1],
                     [0,
                      [0,0 === max_overhead_field[1]?1:0,cst_max_overhead$1],
                      [0,
                       [0,0 === stack_limit_field[1]?1:0,cst_stack_limit$1],
                       [0,
                        [0,
                         0 === allocation_policy_field[1]?1:0,
                         cst_allocation_policy$1],
                        [0,[0,0 === window_size_field[1]?1:0,cst_window_size$1],0]]]]]]]])}}
    function sexp_of_t$53(param)
     {var
       v_minor_heap_size=param[1],
       v_major_heap_increment=param[2],
       v_space_overhead=param[3],
       v_verbose=param[4],
       v_max_overhead=param[5],
       v_stack_limit=param[6],
       v_allocation_policy=param[7],
       v_window_size=param[8],
       arg=caml_call1(sexp_of_t$0,v_window_size),
       bnds=[0,[1,[0,_Ex_,[0,arg,0]]],0],
       arg$0=caml_call1(sexp_of_t$0,v_allocation_policy),
       bnds$0=[0,[1,[0,_Ey_,[0,arg$0,0]]],bnds],
       arg$1=caml_call1(sexp_of_t$0,v_stack_limit),
       bnds$1=[0,[1,[0,_Ez_,[0,arg$1,0]]],bnds$0],
       arg$2=caml_call1(sexp_of_t$0,v_max_overhead),
       bnds$2=[0,[1,[0,_EA_,[0,arg$2,0]]],bnds$1],
       arg$3=caml_call1(sexp_of_t$0,v_verbose),
       bnds$3=[0,[1,[0,_EB_,[0,arg$3,0]]],bnds$2],
       arg$4=caml_call1(sexp_of_t$0,v_space_overhead),
       bnds$4=[0,[1,[0,_EC_,[0,arg$4,0]]],bnds$3],
       arg$5=caml_call1(sexp_of_t$0,v_major_heap_increment),
       bnds$5=[0,[1,[0,_ED_,[0,arg$5,0]]],bnds$4],
       arg$6=caml_call1(sexp_of_t$0,v_minor_heap_size),
       bnds$6=[0,[1,[0,_EE_,[0,arg$6,0]]],bnds$5];
      return [1,bnds$6]}
    function window_size(r){return r[8]}
    function allocation_policy(r){return r[7]}
    function set_allocation_policy(r,v){r[7] = v;return 0}
    function stack_limit(r){return r[6]}
    function set_stack_limit(r,v){r[6] = v;return 0}
    function max_overhead(r){return r[5]}
    function set_max_overhead(r,v){r[5] = v;return 0}
    function verbose(r){return r[4]}
    function set_verbose(r,v){r[4] = v;return 0}
    function space_overhead(r){return r[3]}
    function set_space_overhead(r,v){r[3] = v;return 0}
    function major_heap_increment(r){return r[2]}
    function set_major_heap_increment(r,v){r[2] = v;return 0}
    function minor_heap_size(r){return r[1]}
    function set_minor_heap_size(r,v){r[1] = v;return 0}
    function _EF_(r,v){return [0,r[1],r[2],r[3],r[4],r[5],r[6],r[7],v]}
    var
     _EG_=0,
     window_size$0=
      [0,
       [0,function(param){return 0},cst_window_size$2,_EG_,window_size,_EF_]];
    function _EH_(r,v){return [0,r[1],r[2],r[3],r[4],r[5],r[6],v,r[8]]}
    var
     _EI_=[0,set_allocation_policy],
     allocation_policy$0=
      [0,
       [0,
        function(param){return 0},
        cst_allocation_policy$2,
        _EI_,
        allocation_policy,
        _EH_]];
    function _EJ_(r,v){return [0,r[1],r[2],r[3],r[4],r[5],v,r[7],r[8]]}
    var
     _EK_=[0,set_stack_limit],
     stack_limit$0=
      [0,
       [0,function(param){return 0},cst_stack_limit$2,_EK_,stack_limit,_EJ_]];
    function _EL_(r,v){return [0,r[1],r[2],r[3],r[4],v,r[6],r[7],r[8]]}
    var
     _EM_=[0,set_max_overhead],
     max_overhead$0=
      [0,
       [0,function(param){return 0},cst_max_overhead$2,_EM_,max_overhead,_EL_]];
    function _EN_(r,v){return [0,r[1],r[2],r[3],v,r[5],r[6],r[7],r[8]]}
    var
     _EO_=[0,set_verbose],
     verbose$0=
      [0,[0,function(param){return 0},cst_verbose$2,_EO_,verbose,_EN_]];
    function _EP_(r,v){return [0,r[1],r[2],v,r[4],r[5],r[6],r[7],r[8]]}
    var
     _EQ_=[0,set_space_overhead],
     space_overhead$0=
      [0,
       [0,
        function(param){return 0},
        cst_space_overhead$2,
        _EQ_,
        space_overhead,
        _EP_]];
    function _ER_(r,v){return [0,r[1],v,r[3],r[4],r[5],r[6],r[7],r[8]]}
    var
     _ES_=[0,set_major_heap_increment],
     major_heap_increment$0=
      [0,
       [0,
        function(param){return 0},
        cst_major_heap_increment$2,
        _ES_,
        major_heap_increment,
        _ER_]];
    function _ET_(r,v){return [0,v,r[2],r[3],r[4],r[5],r[6],r[7],r[8]]}
    var
     _EU_=[0,set_minor_heap_size],
     minor_heap_size$0=
      [0,
       [0,
        function(param){return 0},
        cst_minor_heap_size$2,
        _EU_,
        minor_heap_size,
        _ET_]];
    function make_creator$0
     (minor_heap_size_fun,
      major_heap_increment_fun,
      space_overhead_fun,
      verbose_fun,
      max_overhead_fun,
      stack_limit_fun,
      allocation_policy_fun,
      window_size_fun,
      compile_acc)
     {var
       match=caml_call2(minor_heap_size_fun,minor_heap_size$0,compile_acc),
       compile_acc$0=match[2],
       minor_heap_size_gen=match[1],
       match$0=
        caml_call2
         (major_heap_increment_fun,major_heap_increment$0,compile_acc$0),
       compile_acc$1=match$0[2],
       major_heap_increment_gen=match$0[1],
       match$1=caml_call2(space_overhead_fun,space_overhead$0,compile_acc$1),
       compile_acc$2=match$1[2],
       space_overhead_gen=match$1[1],
       match$2=caml_call2(verbose_fun,verbose$0,compile_acc$2),
       compile_acc$3=match$2[2],
       verbose_gen=match$2[1],
       match$3=caml_call2(max_overhead_fun,max_overhead$0,compile_acc$3),
       compile_acc$4=match$3[2],
       max_overhead_gen=match$3[1],
       match$4=caml_call2(stack_limit_fun,stack_limit$0,compile_acc$4),
       compile_acc$5=match$4[2],
       stack_limit_gen=match$4[1],
       match$5=
        caml_call2(allocation_policy_fun,allocation_policy$0,compile_acc$5),
       compile_acc$6=match$5[2],
       allocation_policy_gen=match$5[1],
       match$6=caml_call2(window_size_fun,window_size$0,compile_acc$6),
       compile_acc$7=match$6[2],
       window_size_gen=match$6[1];
      return [0,
              function(acc)
               {var
                 minor_heap_size=caml_call1(minor_heap_size_gen,acc),
                 major_heap_increment=caml_call1(major_heap_increment_gen,acc),
                 space_overhead=caml_call1(space_overhead_gen,acc),
                 verbose=caml_call1(verbose_gen,acc),
                 max_overhead=caml_call1(max_overhead_gen,acc),
                 stack_limit=caml_call1(stack_limit_gen,acc),
                 allocation_policy=caml_call1(allocation_policy_gen,acc),
                 window_size=caml_call1(window_size_gen,acc);
                return [0,
                        minor_heap_size,
                        major_heap_increment,
                        space_overhead,
                        verbose,
                        max_overhead,
                        stack_limit,
                        allocation_policy,
                        window_size]},
              compile_acc$7]}
    function create$15
     (minor_heap_size,
      major_heap_increment,
      space_overhead,
      verbose,
      max_overhead,
      stack_limit,
      allocation_policy,
      window_size)
     {return [0,
              minor_heap_size,
              major_heap_increment,
              space_overhead,
              verbose,
              max_overhead,
              stack_limit,
              allocation_policy,
              window_size]}
    function map$26
     (minor_heap_size_fun,
      major_heap_increment_fun,
      space_overhead_fun,
      verbose_fun,
      max_overhead_fun,
      stack_limit_fun,
      allocation_policy_fun,
      window_size_fun)
     {var
       _bMS_=caml_call1(window_size_fun,window_size$0),
       _bMT_=caml_call1(allocation_policy_fun,allocation_policy$0),
       _bMU_=caml_call1(stack_limit_fun,stack_limit$0),
       _bMV_=caml_call1(max_overhead_fun,max_overhead$0),
       _bMW_=caml_call1(verbose_fun,verbose$0),
       _bMX_=caml_call1(space_overhead_fun,space_overhead$0),
       _bMY_=caml_call1(major_heap_increment_fun,major_heap_increment$0);
      return [0,
              caml_call1(minor_heap_size_fun,minor_heap_size$0),
              _bMY_,
              _bMX_,
              _bMW_,
              _bMV_,
              _bMU_,
              _bMT_,
              _bMS_]}
    function iter$21
     (minor_heap_size_fun,
      major_heap_increment_fun,
      space_overhead_fun,
      verbose_fun,
      max_overhead_fun,
      stack_limit_fun,
      allocation_policy_fun,
      window_size_fun)
     {caml_call1(minor_heap_size_fun,minor_heap_size$0);
      caml_call1(major_heap_increment_fun,major_heap_increment$0);
      caml_call1(space_overhead_fun,space_overhead$0);
      caml_call1(verbose_fun,verbose$0);
      caml_call1(max_overhead_fun,max_overhead$0);
      caml_call1(stack_limit_fun,stack_limit$0);
      caml_call1(allocation_policy_fun,allocation_policy$0);
      return caml_call1(window_size_fun,window_size$0)}
    function fold$17
     (init,
      minor_heap_size_fun,
      major_heap_increment_fun,
      space_overhead_fun,
      verbose_fun,
      max_overhead_fun,
      stack_limit_fun,
      allocation_policy_fun,
      window_size_fun)
     {return caml_call2
              (window_size_fun,
               caml_call2
                (allocation_policy_fun,
                 caml_call2
                  (stack_limit_fun,
                   caml_call2
                    (max_overhead_fun,
                     caml_call2
                      (verbose_fun,
                       caml_call2
                        (space_overhead_fun,
                         caml_call2
                          (major_heap_increment_fun,
                           caml_call2(minor_heap_size_fun,init,minor_heap_size$0),
                           major_heap_increment$0),
                         space_overhead$0),
                       verbose$0),
                     max_overhead$0),
                   stack_limit$0),
                 allocation_policy$0),
               window_size$0)}
    function map_poly$0(record)
     {var
       _bML_=[0,caml_call1(record[1],window_size$0),0],
       _bMM_=[0,caml_call1(record[1],allocation_policy$0),_bML_],
       _bMN_=[0,caml_call1(record[1],stack_limit$0),_bMM_],
       _bMO_=[0,caml_call1(record[1],max_overhead$0),_bMN_],
       _bMP_=[0,caml_call1(record[1],verbose$0),_bMO_],
       _bMQ_=[0,caml_call1(record[1],space_overhead$0),_bMP_],
       _bMR_=[0,caml_call1(record[1],major_heap_increment$0),_bMQ_];
      return [0,caml_call1(record[1],minor_heap_size$0),_bMR_]}
    function for_all$15
     (minor_heap_size_fun,
      major_heap_increment_fun,
      space_overhead_fun,
      verbose_fun,
      max_overhead_fun,
      stack_limit_fun,
      allocation_policy_fun,
      window_size_fun)
     {var
       _bME_=caml_call1(minor_heap_size_fun,minor_heap_size$0),
       _bMF_=
        _bME_
         ?caml_call1(major_heap_increment_fun,major_heap_increment$0)
         :_bME_,
       _bMG_=_bMF_?caml_call1(space_overhead_fun,space_overhead$0):_bMF_,
       _bMH_=_bMG_?caml_call1(verbose_fun,verbose$0):_bMG_,
       _bMI_=_bMH_?caml_call1(max_overhead_fun,max_overhead$0):_bMH_,
       _bMJ_=_bMI_?caml_call1(stack_limit_fun,stack_limit$0):_bMI_,
       _bMK_=_bMJ_?caml_call1(allocation_policy_fun,allocation_policy$0):_bMJ_;
      return _bMK_?caml_call1(window_size_fun,window_size$0):_bMK_}
    function exists$15
     (minor_heap_size_fun,
      major_heap_increment_fun,
      space_overhead_fun,
      verbose_fun,
      max_overhead_fun,
      stack_limit_fun,
      allocation_policy_fun,
      window_size_fun)
     {var
       _bMD_=caml_call1(minor_heap_size_fun,minor_heap_size$0),
       _bMx_=
        _bMD_
        ||
        caml_call1(major_heap_increment_fun,major_heap_increment$0),
       _bMy_=_bMx_ || caml_call1(space_overhead_fun,space_overhead$0),
       _bMz_=_bMy_ || caml_call1(verbose_fun,verbose$0),
       _bMA_=_bMz_ || caml_call1(max_overhead_fun,max_overhead$0),
       _bMB_=_bMA_ || caml_call1(stack_limit_fun,stack_limit$0),
       _bMC_=_bMB_ || caml_call1(allocation_policy_fun,allocation_policy$0);
      return _bMC_?_bMC_:caml_call1(window_size_fun,window_size$0)}
    function to_list$13
     (minor_heap_size_fun,
      major_heap_increment_fun,
      space_overhead_fun,
      verbose_fun,
      max_overhead_fun,
      stack_limit_fun,
      allocation_policy_fun,
      window_size_fun)
     {var
       _bMq_=[0,caml_call1(window_size_fun,window_size$0),0],
       _bMr_=[0,caml_call1(allocation_policy_fun,allocation_policy$0),_bMq_],
       _bMs_=[0,caml_call1(stack_limit_fun,stack_limit$0),_bMr_],
       _bMt_=[0,caml_call1(max_overhead_fun,max_overhead$0),_bMs_],
       _bMu_=[0,caml_call1(verbose_fun,verbose$0),_bMt_],
       _bMv_=[0,caml_call1(space_overhead_fun,space_overhead$0),_bMu_],
       _bMw_=
        [0,caml_call1(major_heap_increment_fun,major_heap_increment$0),_bMv_];
      return [0,caml_call1(minor_heap_size_fun,minor_heap_size$0),_bMw_]}
    function iter$22
     (record,
      minor_heap_size_fun,
      major_heap_increment_fun,
      space_overhead_fun,
      verbose_fun,
      max_overhead_fun,
      stack_limit_fun,
      allocation_policy_fun,
      window_size_fun)
     {caml_call3(minor_heap_size_fun,minor_heap_size$0,record,record[1]);
      caml_call3
       (major_heap_increment_fun,major_heap_increment$0,record,record[2]);
      caml_call3(space_overhead_fun,space_overhead$0,record,record[3]);
      caml_call3(verbose_fun,verbose$0,record,record[4]);
      caml_call3(max_overhead_fun,max_overhead$0,record,record[5]);
      caml_call3(stack_limit_fun,stack_limit$0,record,record[6]);
      caml_call3(allocation_policy_fun,allocation_policy$0,record,record[7]);
      return caml_call3(window_size_fun,window_size$0,record,record[8])}
    function fold$18
     (record,
      init,
      minor_heap_size_fun,
      major_heap_increment_fun,
      space_overhead_fun,
      verbose_fun,
      max_overhead_fun,
      stack_limit_fun,
      allocation_policy_fun,
      window_size_fun)
     {var
       _bMj_=record[8],
       _bMk_=record[7],
       _bMl_=record[6],
       _bMm_=record[5],
       _bMn_=record[4],
       _bMo_=record[3],
       _bMp_=record[2];
      return caml_call4
              (window_size_fun,
               caml_call4
                (allocation_policy_fun,
                 caml_call4
                  (stack_limit_fun,
                   caml_call4
                    (max_overhead_fun,
                     caml_call4
                      (verbose_fun,
                       caml_call4
                        (space_overhead_fun,
                         caml_call4
                          (major_heap_increment_fun,
                           caml_call4
                            (minor_heap_size_fun,
                             init,
                             minor_heap_size$0,
                             record,
                             record[1]),
                           major_heap_increment$0,
                           record,
                           _bMp_),
                         space_overhead$0,
                         record,
                         _bMo_),
                       verbose$0,
                       record,
                       _bMn_),
                     max_overhead$0,
                     record,
                     _bMm_),
                   stack_limit$0,
                   record,
                   _bMl_),
                 allocation_policy$0,
                 record,
                 _bMk_),
               window_size$0,
               record,
               _bMj_)}
    function for_all$16
     (record,
      minor_heap_size_fun,
      major_heap_increment_fun,
      space_overhead_fun,
      verbose_fun,
      max_overhead_fun,
      stack_limit_fun,
      allocation_policy_fun,
      window_size_fun)
     {var
       _bMc_=
        caml_call3(minor_heap_size_fun,minor_heap_size$0,record,record[1]),
       _bMd_=
        _bMc_
         ?caml_call3
           (major_heap_increment_fun,major_heap_increment$0,record,record[2])
         :_bMc_,
       _bMe_=
        _bMd_
         ?caml_call3(space_overhead_fun,space_overhead$0,record,record[3])
         :_bMd_,
       _bMf_=_bMe_?caml_call3(verbose_fun,verbose$0,record,record[4]):_bMe_,
       _bMg_=
        _bMf_
         ?caml_call3(max_overhead_fun,max_overhead$0,record,record[5])
         :_bMf_,
       _bMh_=
        _bMg_?caml_call3(stack_limit_fun,stack_limit$0,record,record[6]):_bMg_,
       _bMi_=
        _bMh_
         ?caml_call3
           (allocation_policy_fun,allocation_policy$0,record,record[7])
         :_bMh_;
      return _bMi_
              ?caml_call3(window_size_fun,window_size$0,record,record[8])
              :_bMi_}
    function exists$16
     (record,
      minor_heap_size_fun,
      major_heap_increment_fun,
      space_overhead_fun,
      verbose_fun,
      max_overhead_fun,
      stack_limit_fun,
      allocation_policy_fun,
      window_size_fun)
     {var
       _bMb_=
        caml_call3(minor_heap_size_fun,minor_heap_size$0,record,record[1]),
       _bL7_=
        _bMb_
        ||
        caml_call3
         (major_heap_increment_fun,major_heap_increment$0,record,record[2]),
       _bL8_=
        _bL7_
        ||
        caml_call3(space_overhead_fun,space_overhead$0,record,record[3]),
       _bL9_=_bL8_ || caml_call3(verbose_fun,verbose$0,record,record[4]),
       _bL__=
        _bL9_
        ||
        caml_call3(max_overhead_fun,max_overhead$0,record,record[5]),
       _bL$_=
        _bL__
        ||
        caml_call3(stack_limit_fun,stack_limit$0,record,record[6]),
       _bMa_=
        _bL$_
        ||
        caml_call3(allocation_policy_fun,allocation_policy$0,record,record[7]);
      return _bMa_
              ?_bMa_
              :caml_call3(window_size_fun,window_size$0,record,record[8])}
    function to_list$14
     (record,
      minor_heap_size_fun,
      major_heap_increment_fun,
      space_overhead_fun,
      verbose_fun,
      max_overhead_fun,
      stack_limit_fun,
      allocation_policy_fun,
      window_size_fun)
     {var
       _bL0_=[0,caml_call3(window_size_fun,window_size$0,record,record[8]),0],
       _bL1_=
        [0,
         caml_call3
          (allocation_policy_fun,allocation_policy$0,record,record[7]),
         _bL0_],
       _bL2_=
        [0,caml_call3(stack_limit_fun,stack_limit$0,record,record[6]),_bL1_],
       _bL3_=
        [0,caml_call3(max_overhead_fun,max_overhead$0,record,record[5]),_bL2_],
       _bL4_=[0,caml_call3(verbose_fun,verbose$0,record,record[4]),_bL3_],
       _bL5_=
        [0,
         caml_call3(space_overhead_fun,space_overhead$0,record,record[3]),
         _bL4_],
       _bL6_=
        [0,
         caml_call3
          (major_heap_increment_fun,major_heap_increment$0,record,record[2]),
         _bL5_];
      return [0,
              caml_call3
               (minor_heap_size_fun,minor_heap_size$0,record,record[1]),
              _bL6_]}
    function map$27
     (record,
      minor_heap_size_fun,
      major_heap_increment_fun,
      space_overhead_fun,
      verbose_fun,
      max_overhead_fun,
      stack_limit_fun,
      allocation_policy_fun,
      window_size_fun)
     {var
       _bLT_=caml_call3(window_size_fun,window_size$0,record,record[8]),
       _bLU_=
        caml_call3(allocation_policy_fun,allocation_policy$0,record,record[7]),
       _bLV_=caml_call3(stack_limit_fun,stack_limit$0,record,record[6]),
       _bLW_=caml_call3(max_overhead_fun,max_overhead$0,record,record[5]),
       _bLX_=caml_call3(verbose_fun,verbose$0,record,record[4]),
       _bLY_=caml_call3(space_overhead_fun,space_overhead$0,record,record[3]),
       _bLZ_=
        caml_call3
         (major_heap_increment_fun,major_heap_increment$0,record,record[2]);
      return [0,
              caml_call3
               (minor_heap_size_fun,minor_heap_size$0,record,record[1]),
              _bLZ_,
              _bLY_,
              _bLX_,
              _bLW_,
              _bLV_,
              _bLU_,
              _bLT_]}
    function set_all_mutable_fields$0
     (record,
      minor_heap_size,
      major_heap_increment,
      space_overhead,
      verbose,
      max_overhead,
      stack_limit,
      allocation_policy)
     {record[1] = minor_heap_size;
      record[2] = major_heap_increment;
      record[3] = space_overhead;
      record[4] = verbose;
      record[5] = max_overhead;
      record[6] = stack_limit;
      record[7] = allocation_policy;
      return 0}
    var
     Direct$0=
      [0,
       iter$22,
       fold$18,
       for_all$16,
       exists$16,
       to_list$14,
       map$27,
       set_all_mutable_fields$0],
     include$64=Make$2([0,compare$41,t_of_sexp$42,sexp_of_t$53]),
     equal$25=include$64[7],
     compare$42=include$64[8],
     min$7=include$64[9],
     max$7=include$64[10],
     ascending$6=include$64[11],
     descending$6=include$64[12],
     between$6=include$64[13],
     clamp_exn$6=include$64[14],
     clamp$6=include$64[15],
     comparator$13=include$64[16],
     validate_lbound$6=include$64[17],
     validate_ubound$6=include$64[18],
     validate_bound$6=include$64[19],
     Replace_polymorphic_compare$4=include$64[20],
     Map$7=include$64[21],
     Set$7=include$64[22],
     _EV_=include$64[1],
     _EW_=include$64[2],
     _EX_=include$64[3],
     _EY_=include$64[4],
     _EZ_=include$64[5],
     _E0_=include$64[6];
    function tune
     (logger,
      minor_heap_size,
      major_heap_increment,
      space_overhead,
      verbose,
      max_overhead,
      stack_limit,
      allocation_policy,
      window_size,
      param)
     {var old_control_params=runtime.caml_gc_get(0);
      function f(opt,to_string,field)
       {var old_value=caml_call2(Base_Field[3],field,old_control_params);
        if(opt)
         {var new_value=opt[1];
          caml_call2
           (iter$16,
            logger,
            function(f)
             {var
               _bLR_=caml_call1(to_string,new_value),
               _bLS_=caml_call1(to_string,old_value);
              return caml_call5
                      (_eL_,f,_E1_,caml_call1(Base_Field[2],field),_bLS_,_bLR_)});
          return new_value}
        return old_value}
      var _bLu_=Stdlib[22];
      function _bLv_(_bLQ_){return f(window_size,_bLu_,_bLQ_)}
      var _bLw_=Stdlib[22];
      function _bLx_(_bLP_){return f(allocation_policy,_bLw_,_bLP_)}
      var _bLy_=Stdlib[22];
      function _bLz_(_bLO_){return f(stack_limit,_bLy_,_bLO_)}
      var _bLA_=Stdlib[22];
      function _bLB_(_bLN_){return f(max_overhead,_bLA_,_bLN_)}
      var _bLC_=Stdlib[22];
      function _bLD_(_bLM_){return f(verbose,_bLC_,_bLM_)}
      var _bLE_=Stdlib[22];
      function _bLF_(_bLL_){return f(space_overhead,_bLE_,_bLL_)}
      var _bLG_=Stdlib[22];
      function _bLH_(_bLK_){return f(major_heap_increment,_bLG_,_bLK_)}
      var
       _bLI_=Stdlib[22],
       new_control_params=
        map$26
         (function(_bLJ_){return f(minor_heap_size,_bLI_,_bLJ_)},
          _bLH_,
          _bLF_,
          _bLD_,
          _bLB_,
          _bLz_,
          _bLx_,
          _bLv_);
      return runtime.caml_gc_set(new_control_params)}
    function disable_compaction(logger,allocation_policy,param)
     {if(typeof allocation_policy === "number")
       var allocation_policy$0=0;
      else
       var
        policy=allocation_policy[2],
        _bLt_=0 === policy?0:1,
        allocation_policy$0=[0,_bLt_];
      return tune(logger,0,0,0,0,_E2_,0,allocation_policy$0,0,0)}
    var zero$3=runtime.caml_int_of_string(cst_0);
    function keep_alive(o)
     {for(;;)
       {var _bLs_=caml_call2(_aC_,zero$3,0);if(_bLs_)continue;return _bLs_}}
    function _E3_(param)
     {var r=[0,0],weak=caml_call1(Stdlib_weak[1],1);
      caml_call3(Stdlib_weak[3],weak,0,[0,r]);
      runtime.caml_gc_compaction(0);
      var match=caml_call2(Stdlib_weak[4],weak,0),_bLr_=match?1:0;
      if(_bLr_)return keep_alive(r);
      throw [0,Assert_failure,_E4_]}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_Caml_Weak_set_weak_0_Some_r_Caml_Gc_compac,
      0,
      cst_src_gc_ml$0,
      117,
      0,
      217,
      _E3_);
    function add_finalizer(x,f)
     {try
       {var
         _bLn_=
          function(x)
           {function _bLq_(param){return caml_call1(f,x)}
            return caml_call1(Base_Exn[14],_bLq_)},
         _bLo_=caml_call2(include$62[3],_bLn_,x);
        return _bLo_}
      catch(_bLp_)
       {_bLp_ = caml_wrap_exception(_bLp_);
        if(_bLp_[1] === Invalid_argument)return 0;
        throw _bLp_}}
    function add_finalizer_exn(x,f)
     {try
       {var
         _bLj_=
          function(x)
           {function _bLm_(param){return caml_call1(f,x)}
            return caml_call1(Base_Exn[14],_bLm_)},
         _bLk_=caml_call2(include$62[3],_bLj_,x);
        return _bLk_}
      catch(_bLl_)
       {_bLl_ = caml_wrap_exception(_bLl_);
        if(_bLl_[1] === Invalid_argument)
         {caml_call1(Base_Heap_block[2],x);return 0}
        throw _bLl_}}
    function add_finalizer_last(x,f)
     {try
       {var
         _bLg_=function(param){return caml_call1(Base_Exn[14],f)},
         _bLh_=caml_call2(include$62[4],_bLg_,x);
        return _bLh_}
      catch(_bLi_)
       {_bLi_ = caml_wrap_exception(_bLi_);
        if(_bLi_[1] === Invalid_argument)return 0;
        throw _bLi_}}
    function add_finalizer_last_exn(x,f)
     {try
       {var
         _bLd_=function(param){return caml_call1(Base_Exn[14],f)},
         _bLe_=caml_call2(include$62[4],_bLd_,x);
        return _bLe_}
      catch(_bLf_)
       {_bLf_ = caml_wrap_exception(_bLf_);
        if(_bLf_[1] === Invalid_argument)
         {caml_call1(Base_Heap_block[2],x);return 0}
        throw _bLf_}}
    var finalize_release=include$62[5];
    function sexp_of_t$54(param){return caml_call1(_Z_,cst_gc_alarm)}
    function create$16(f)
     {return caml_call1
              (create_alarm,
               function(param){return caml_call1(Base_Exn[14],f)})}
    var
     Alarm=[0,sexp_of_t$54,create$16,delete_alarm],
     Expert$0=
      [0,
       add_finalizer,
       add_finalizer_exn,
       add_finalizer_last,
       add_finalizer_last_exn,
       finalize_release,
       Alarm];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$199);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Gc=
      [0,
       [0,
        bin_t$43,
        bin_read_t$84,
        bin_read_t$83,
        bin_reader_t$43,
        bin_size_t$41,
        bin_write_t$41,
        bin_writer_t$43,
        bin_shape_t$48,
        t_of_sexp$41,
        sexp_of_t$52,
        stack_size,
        top_heap_words,
        compactions,
        fragments,
        largest_free,
        free_blocks,
        free_words,
        live_blocks,
        live_words,
        heap_chunks,
        heap_words,
        major_collections,
        minor_collections,
        major_words,
        promoted_words,
        minor_words,
        [0,
         names,
         stack_size$0,
         top_heap_words$0,
         compactions$0,
         fragments$0,
         largest_free$0,
         free_blocks$0,
         free_words$0,
         live_blocks$0,
         live_words$0,
         heap_chunks$0,
         heap_words$0,
         major_collections$0,
         minor_collections$0,
         major_words$0,
         promoted_words$0,
         minor_words$0,
         fold$15,
         make_creator,
         create$14,
         map$24,
         iter$19,
         for_all$13,
         exists$13,
         to_list$11,
         map_poly,
         Direct],
        _En_,
        _Eo_,
        _Ep_,
        _Eq_,
        _Er_,
        _Es_,
        equal$24,
        compare$40,
        min$6,
        max$6,
        ascending$5,
        descending$5,
        between$5,
        clamp_exn$5,
        clamp$5,
        comparator$12,
        validate_lbound$5,
        validate_ubound$5,
        validate_bound$5,
        Replace_polymorphic_compare$3,
        Map$6,
        Set$6],
       [0,
        bin_t$44,
        bin_read_t$86,
        bin_read_t$85,
        bin_reader_t$44,
        bin_size_t$42,
        bin_write_t$42,
        bin_writer_t$44,
        bin_shape_t$49,
        t_of_sexp$42,
        sexp_of_t$53,
        window_size,
        allocation_policy,
        set_allocation_policy,
        stack_limit,
        set_stack_limit,
        max_overhead,
        set_max_overhead,
        verbose,
        set_verbose,
        space_overhead,
        set_space_overhead,
        major_heap_increment,
        set_major_heap_increment,
        minor_heap_size,
        set_minor_heap_size,
        [0,
         names$0,
         window_size$0,
         allocation_policy$0,
         stack_limit$0,
         max_overhead$0,
         verbose$0,
         space_overhead$0,
         major_heap_increment$0,
         minor_heap_size$0,
         fold$17,
         make_creator$0,
         create$15,
         map$26,
         iter$21,
         for_all$15,
         exists$15,
         to_list$13,
         map_poly$0,
         Direct$0],
        _EV_,
        _EW_,
        _EX_,
        _EY_,
        _EZ_,
        _E0_,
        equal$25,
        compare$42,
        min$7,
        max$7,
        ascending$6,
        descending$6,
        between$6,
        clamp_exn$6,
        clamp$6,
        comparator$13,
        validate_lbound$6,
        validate_ubound$6,
        validate_bound$6,
        Replace_polymorphic_compare$4,
        Map$7,
        Set$7],
       print_stat,
       allocated_bytes,
       keep_alive,
       tune,
       [0],
       disable_compaction,
       Expert$0];
    caml_register_global(7441,Core_kernel_Gc,"Core_kernel__Gc");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$200);
    caml_call1(Expect_test_collector[4][1],cst_src_sign_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$201,cst$72);
    function t_of_sexp$43(sexp)
     {if(0 === sexp[0])
       {var _bK$_=sexp[1];
        if(caml_string_notequal(_bK$_,cst_Neg))
         {if(caml_string_notequal(_bK$_,cst_Pos))
           {if(caml_string_notequal(_bK$_,cst_Zero))
             if(caml_string_notequal(_bK$_,cst_neg))
              if(caml_string_notequal(_bK$_,cst_pos))
               if(caml_string_notequal(_bK$_,cst_zero))
                var switch$0=1,switch$1=0,switch$2=0;
               else
                var switch$2=1;
              else
               var switch$1=1,switch$2=0;
             else
              var switch$0=0,switch$1=0,switch$2=0;
            else
             var switch$2=1;
            if(switch$2)return 1}
          else
           var switch$1=1;
          if(switch$1)return 2}
        else
         var switch$0=0;
        if(! switch$0)return 0}
      else
       {var _bLa_=sexp[1];
        if(! _bLa_)
         return caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc$20,sexp);
        var _bLb_=_bLa_[1];
        if(0 !== _bLb_[0])
         return caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc$20,sexp);
        var _bLc_=_bLb_[1];
        if(caml_string_notequal(_bLc_,cst_Neg$0))
         {if(caml_string_notequal(_bLc_,cst_Pos$0))
           {if(caml_string_notequal(_bLc_,cst_Zero$0))
             if(caml_string_notequal(_bLc_,cst_neg$0))
              if(caml_string_notequal(_bLc_,cst_pos$0))
               if(caml_string_notequal(_bLc_,cst_zero$0))
                var switch$3=1,switch$4=0,switch$5=0;
               else
                var switch$5=1;
              else
               var switch$4=1,switch$5=0;
             else
              var switch$3=0,switch$4=0,switch$5=0;
            else
             var switch$5=1;
            if(switch$5)
             return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$20,sexp)}
          else
           var switch$4=1;
          if(switch$4)
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$20,sexp)}
        else
         var switch$3=0;
        if(! switch$3)
         return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$20,sexp)}
      return caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc$20,sexp)}
    function sexp_of_t$55(param)
     {switch(param){case 0:return _E5_;case 1:return _E6_;default:return _E7_}}
    var
     _E9_=caml_call1(Bin_prot_Shape[9],_E8_),
     _E__=[0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$111),0,_E9_],0],
     _E$_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_sign_ml_7_4),
     group$54=caml_call2(Bin_prot_Shape[6],_E$_,_E__),
     _Fa_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$112),
     bin_shape_t$50=caml_call1(caml_call2(Bin_prot_Shape[14],group$54,_Fa_),0);
    function bin_size_t$43(param){return 1}
    function bin_write_t$43(buf,pos,param)
     {switch(param)
       {case 0:return caml_call3(Bin_prot_Write[30],buf,pos,0);
        case 1:return caml_call3(Bin_prot_Write[30],buf,pos,1);
        default:return caml_call3(Bin_prot_Write[30],buf,pos,2)}}
    var bin_writer_t$45=[0,bin_size_t$43,bin_write_t$43];
    function bin_read_t$87(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_src_sign_ml_Stable_V1_t,pos_ref[1])}
    function bin_read_t$88(buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[29],buf,pos_ref);
      if(2 < match >>> 0)
       return caml_call2(Bin_prot_Common[18],_Fb_,pos_ref[1]);
      switch(match){case 0:return 0;case 1:return 1;default:return 2}}
    var
     bin_reader_t$45=[0,bin_read_t$88,bin_read_t$87],
     bin_t$45=[0,bin_shape_t$50,bin_writer_t$45,bin_reader_t$45];
    function compare$43(a_001,b_002)
     {if(caml_call2(Ppx_compare_lib[1],a_001,b_002))return 0;
      switch(a_001)
       {case 0:return 0 === b_002?0:-1;
        case 1:switch(b_002){case 1:return 0;case 2:return -1}break;
        default:switch(b_002){case 1:return 1;case 2:return 0}}
      return 1}
    function hash_fold_t$21(hsv,arg)
     {switch(arg)
       {case 0:return caml_call2(Base_Hash[3],hsv,0);
        case 1:return caml_call2(Base_Hash[3],hsv,1);
        default:return caml_call2(Base_Hash[3],hsv,2)}}
    function hash$15(x)
     {var hsv=caml_call2(Base_Hash[11],0,0),_bK__=hash_fold_t$21(hsv,x);
      return caml_call1(Base_Hash[9],_bK__)}
    var
     Typename_of_t$12=caml_call1(Typerep_lib_Make_typename[1],[0,name$21]),
     typename_of_t$12=Typename_of_t$12[2],
     name_of_t$8=Typename_of_t$12[1],
     typerep_of_t$13=
      [9,
       [0,
        name_of_t$8,
        [0,
         [246,
          function(_bK9_)
           {var
             tag0=
              caml_call1
               (include$26[1][4][9],
                [0,
                 cst_Neg$1,
                 typerep_of_tuple0,
                 0,
                 0,
                 0,
                 0,
                 typename_of_tuple0,
                 _Fc_]),
             tag1=
              caml_call1
               (include$26[1][4][9],
                [0,
                 cst_Zero$1,
                 typerep_of_tuple0,
                 0,
                 0,
                 1,
                 1,
                 typename_of_tuple0,
                 _Fd_]),
             tag2=
              caml_call1
               (include$26[1][4][9],
                [0,
                 cst_Pos$1,
                 typerep_of_tuple0,
                 0,
                 0,
                 2,
                 2,
                 typename_of_tuple0,
                 _Fe_]),
             typename=caml_call1(include$26[1][1][2],name_of_t$8),
             tags=[0,[0,tag0],[0,tag1],[0,tag2]],
             polymorphic=0;
            function value(param)
             {switch(param)
               {case 0:return [0,tag0,value_tuple0];
                case 1:return [0,tag1,value_tuple0];
                default:return [0,tag2,value_tuple0]}}
            return [8,
                    caml_call1
                     (include$26[1][6][7],[0,typename,tags,polymorphic,value])]}]]]],
     _Ff_=Base_Sign[1],
     _Fg_=Base_Sign[28],
     _Fh_=Base_Sign[29],
     _Fi_=Base_Sign[30],
     _Fj_=Base_Sign[31],
     _Fk_=Base_Sign[32],
     include$164=
      _v$_
       ([0,
         Base_Sign[2],
         Base_Sign[3],
         Base_Sign[4],
         Base_Sign[5],
         Base_Sign[6],
         Base_Sign[7],
         Base_Sign[8],
         Base_Sign[9],
         Base_Sign[10],
         Base_Sign[11],
         Base_Sign[12],
         Base_Sign[13],
         Base_Sign[14],
         Base_Sign[15],
         Base_Sign[16],
         Base_Sign[17],
         Base_Sign[18],
         Base_Sign[19],
         Base_Sign[20],
         Base_Sign[21],
         Base_Sign[22],
         Base_Sign[23],
         Base_Sign[24],
         Base_Sign[25],
         Base_Sign[26],
         Base_Sign[27]],
        [0,
         bin_size_t$43,
         bin_write_t$43,
         bin_read_t$88,
         bin_read_t$87,
         bin_shape_t$50,
         bin_writer_t$45,
         bin_reader_t$45,
         bin_t$45]),
     _Ft_=include$164[9],
     _Fu_=include$164[10],
     _FD_=include$164[21],
     _Fl_=include$164[1],
     _Fm_=include$164[2],
     _Fn_=include$164[3],
     _Fo_=include$164[4],
     _Fp_=include$164[5],
     _Fq_=include$164[6],
     _Fr_=include$164[7],
     _Fs_=include$164[8],
     _Fv_=include$164[11],
     _Fw_=include$164[12],
     _Fx_=include$164[13],
     _Fy_=include$164[14],
     _Fz_=include$164[15],
     _FA_=include$164[17],
     _FB_=include$164[19],
     _FC_=include$164[20],
     _FE_=include$164[22],
     _FF_=include$164[23],
     _FG_=include$164[24],
     _FH_=include$164[25],
     _FI_=include$164[26],
     _FJ_=include$164[27],
     _FK_=include$164[28],
     _FL_=include$164[29],
     _FM_=include$164[30],
     _FN_=include$164[31],
     _FO_=include$164[32],
     _FP_=include$164[33],
     _FQ_=include$164[34],
     _FR_=include$164[35],
     _FS_=include$164[36],
     _FT_=include$164[37],
     _FU_=include$164[38],
     _FV_=include$164[39],
     _FW_=include$164[40],
     _FX_=include$164[41],
     _FY_=caml_lessthan,
     _FZ_=caml_equal;
    function _F0_(param)
     {var _bK8_=caml_lessthan(caml_call2(_FD_,0,1),0);
      return _bK8_?caml_lessthan(caml_call2(_FD_,1,2),0):_bK8_}
    caml_call8
     (Ppx_inline_test_lib_Runtime[4],
      Inline_test_config,
      cst_compare_Neg_Zero_0_compare_Zero_Po,
      0,
      cst_src_sign_ml$0,
      20,
      0,
      57,
      _F0_);
    function _F1_(param)
     {return caml_call2
              (for_all$1,
               _Ff_,
               function(t)
                {return caml_equal(t,caml_call1(_Fg_,caml_call1(_Fh_,t)))})}
    caml_call8
     (Ppx_inline_test_lib_Runtime[4],
      Inline_test_config,
      cst_List_for_all_all_f_fun_t_t_t_to_i,
      0,
      cst_src_sign_ml$1,
      21,
      0,
      75,
      _F1_);
    function _F2_(param)
     {return caml_call2
              (for_all$1,
               _F3_,
               function(i)
                {return caml_equal(i,caml_call1(_Fh_,caml_call1(_Fg_,i)))})}
    caml_call8
     (Ppx_inline_test_lib_Runtime[4],
      Inline_test_config,
      cst_List_for_all_1_0_1_f_fun_i_i,
      0,
      cst_src_sign_ml$2,
      22,
      0,
      84,
      _F2_);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$202);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Sign=
      [0,
       typerep_of_t$13,
       typename_of_t$12,
       _Ff_,
       _Fg_,
       _Fh_,
       _Fi_,
       _Fj_,
       _Fk_,
       _Fl_,
       _Fm_,
       _Fn_,
       _Fo_,
       _Fp_,
       _Fq_,
       _Fr_,
       _Fs_,
       _Ft_,
       _Fu_,
       _Fv_,
       _Fw_,
       _Fx_,
       _Fy_,
       _Fz_,
       _FZ_,
       _FA_,
       _FY_,
       _FB_,
       _FC_,
       _FD_,
       _FE_,
       _FF_,
       _FG_,
       _FH_,
       _FI_,
       _FJ_,
       _FK_,
       _FL_,
       _FM_,
       _FN_,
       _FO_,
       _FP_,
       _FQ_,
       _FR_,
       _FS_,
       _FT_,
       _FU_,
       _FV_,
       _FW_,
       _FX_,
       [0,
        [0,
         bin_t$45,
         bin_read_t$88,
         bin_read_t$87,
         bin_reader_t$45,
         bin_size_t$43,
         bin_write_t$43,
         bin_writer_t$45,
         bin_shape_t$50,
         compare$43,
         hash_fold_t$21,
         hash$15,
         t_of_sexp$43,
         sexp_of_t$55]]];
    caml_register_global(7443,Core_kernel_Sign,"Core_kernel__Sign");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$203);
    caml_call1(Expect_test_collector[4][1],cst_src_string_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$204,cst$73);
    var
     _F4_=[0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$113),0,_b1_],0],
     _F5_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_string_ml_11_6),
     group$55=caml_call2(Bin_prot_Shape[6],_F5_,_F4_),
     _F6_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$114),
     bin_shape_t$51=caml_call1(caml_call2(Bin_prot_Shape[14],group$55,_F6_),0),
     bin_writer_t$46=[0,bin_size_t,bin_write_t],
     bin_reader_t$46=[0,bin_read_t,bin_read_t$0],
     bin_t$46=[0,bin_shape_t$51,bin_writer_t$46,bin_reader_t$46],
     hash_fold_t$22=Base_String[22],
     t_of_sexp$44=Base_String[23],
     sexp_of_t$56=Base_String[24],
     compare$44=Base_String[33],
     comparator$14=Base_String[41],
     include$65=
      caml_call1
       (Stable$2[1][1],
        [0,
         bin_t$46,
         bin_read_t,
         bin_read_t$0,
         bin_reader_t$46,
         bin_size_t,
         bin_write_t,
         bin_writer_t$46,
         bin_shape_t$51,
         compare$44,
         t_of_sexp$44,
         sexp_of_t$56,
         comparator$14]),
     Map$8=include$65[1],
     Set$8=include$65[2],
     _F7_=[0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$115),0,_b1_],0],
     _F8_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_string_ml_22_4),
     group$56=caml_call2(Bin_prot_Shape[6],_F8_,_F7_),
     _F9_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$116),
     bin_shape_t$52=caml_call1(caml_call2(Bin_prot_Shape[14],group$56,_F9_),0),
     bin_writer_t$47=[0,bin_size_t,bin_write_t],
     bin_reader_t$47=[0,bin_read_t,bin_read_t$0],
     bin_t$47=[0,bin_shape_t$52,bin_writer_t$47,bin_reader_t$47],
     include$66=Base_String[1],
     hash_fold_t$23=include$66[1],
     hash$16=include$66[2],
     t_of_sexp$45=include$66[3],
     sexp_of_t$57=include$66[4],
     compare$45=include$66[12],
     comparator$15=include$66[20],
     is_suffix=include$66[24],
     is_prefix$0=include$66[25],
     _F__=
      _td_
       ([0,
         bin_t$47,
         bin_read_t,
         bin_read_t$0,
         bin_reader_t$47,
         bin_size_t,
         bin_write_t,
         bin_writer_t$47,
         bin_shape_t$52,
         t_of_sexp$45,
         sexp_of_t$57,
         comparator$15]),
     equal$26=_F__[7],
     compare$46=_F__[8],
     min$8=_F__[9],
     max$8=_F__[10],
     ascending$7=_F__[11],
     descending$7=_F__[12],
     between$7=_F__[13],
     clamp_exn$7=_F__[14],
     clamp$7=_F__[15],
     validate_lbound$7=_F__[16],
     validate_ubound$7=_F__[17],
     validate_bound$7=_F__[18],
     Replace_polymorphic_compare$5=_F__[19],
     comparator$16=_F__[20],
     Map$9=_F__[21],
     Set$9=_F__[22],
     _F$_=_F__[1],
     _Ga_=_F__[2],
     _Gb_=_F__[3],
     _Gc_=_F__[4],
     _Gd_=_F__[5],
     _Ge_=_F__[6],
     include$67=
      Make_binable
       ([0,
         hash_fold_t$23,
         bin_t$47,
         bin_read_t,
         bin_read_t$0,
         bin_reader_t$47,
         bin_size_t,
         bin_write_t,
         bin_writer_t$47,
         bin_shape_t$52,
         t_of_sexp$45,
         compare$45,
         sexp_of_t$57,
         hash$16]),
     hash_fold_t$24=include$67[1],
     hash$17=include$67[2],
     hashable$2=include$67[3],
     Table$3=include$67[4],
     Hash_set$3=include$67[5],
     Hash_queue$3=include$67[6];
    function _Gf_(param)
     {function _bK5_(param)
       {return caml_call2
                (_xr_,
                 caml_call2(find_exn$5,caml_call1(Map$9[8],_Gg_),cst_A$3),
                 4)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_Int_equal_Core_map_find_exn_Caseless_Map,
        0,
        cst_src_string_ml$0,
        33,
        4,
        107,
        _bK5_);
      function _bK6_(param)
       {return caml_call2(mem$11,caml_call1(Set$9[57],_Gh_),cst_heLLO)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_Core_set_mem_Caseless_Set_of_list_hello,
        0,
        cst_src_string_ml$1,
        36,
        4,
        79,
        _bK6_);
      function _bK7_(param)
       {return caml_call2
                (_xr_,caml_call1(length$13,caml_call1(Set$9[57],_Gi_)),1)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_Int_equal_Core_set_length_Caseless_Set_of_l,
        0,
        cst_src_string_ml$2,
        37,
        4,
        80,
        _bK7_);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst_Caseless_Comparable,
      0,
      cst_src_string_ml$3,
      31,
      0,
      333,
      _Gf_);
    function _Gj_(param)
     {function _bK3_(param)
       {var _bK4_=caml_call1(hash$17,cst_HELLO);
        return caml_call2(_xr_,caml_call1(hash$17,cst_Hello),_bK4_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_Int_equal_Caseless_hash_Hello_Caseless_h,
        0,
        cst_src_string_ml$4,
        43,
        4,
        74,
        _bK3_);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst_Caseless_Hash,
      0,
      cst_src_string_ml$5,
      41,
      0,
      131,
      _Gj_);
    var
     Typename_of_t$13=caml_call1(Typerep_lib_Make_typename[1],[0,name$22]),
     typename_of_t$13=Typename_of_t$13[2],
     name_of_t$9=Typename_of_t$13[1],
     typerep_of_t$14=[9,[0,name_of_t$9,[0,typerep_of_string]]],
     _Gn_=Base_String[111],
     _Gp_=Base_String[109],
     _Gs_=Base_String[105],
     _Gv_=Base_String[102],
     _Gw_=Base_String[101],
     _Gx_=Base_String[100],
     _Gy_=Base_String[99],
     _GA_=Base_String[97],
     _GJ_=Base_String[88],
     _GK_=Base_String[87],
     _GN_=Base_String[84],
     _GO_=Base_String[83],
     _GP_=Base_String[82],
     _GR_=Base_String[80],
     _GT_=Base_String[78],
     _GU_=Base_String[77],
     _Hc_=Base_String[57],
     _Hd_=Base_String[56],
     _He_=Base_String[55],
     _Hg_=Base_String[53],
     _Hj_=Base_String[50],
     _Hl_=Base_String[48],
     _Hn_=Base_String[46],
     _Hr_=Base_String[18],
     _Hw_=Base_String[13],
     _HC_=Base_String[7],
     _HE_=Base_String[5],
     _Gk_=Base_String[114],
     _Gl_=Base_String[113],
     _Gm_=Base_String[112],
     _Go_=Base_String[110],
     _Gq_=Base_String[107],
     _Gr_=Base_String[106],
     _Gt_=Base_String[104],
     _Gu_=Base_String[103],
     _Gz_=Base_String[98],
     _GB_=Base_String[96],
     _GC_=Base_String[95],
     _GD_=Base_String[94],
     _GE_=Base_String[93],
     _GF_=Base_String[92],
     _GG_=Base_String[91],
     _GH_=Base_String[90],
     _GI_=Base_String[89],
     _GL_=Base_String[86],
     _GM_=Base_String[85],
     _GQ_=Base_String[81],
     _GS_=Base_String[79],
     _GV_=Base_String[76],
     _GW_=Base_String[75],
     _GX_=Base_String[74],
     _GY_=Base_String[73],
     _GZ_=Base_String[72],
     _G0_=Base_String[71],
     _G1_=Base_String[70],
     _G2_=Base_String[69],
     _G3_=Base_String[68],
     _G4_=Base_String[67],
     _G5_=Base_String[66],
     _G6_=Base_String[65],
     _G7_=Base_String[64],
     _G8_=Base_String[63],
     _G9_=Base_String[62],
     _G__=Base_String[61],
     _G$_=Base_String[60],
     _Ha_=Base_String[59],
     _Hb_=Base_String[58],
     _Hf_=Base_String[54],
     _Hh_=Base_String[52],
     _Hi_=Base_String[51],
     _Hk_=Base_String[49],
     _Hm_=Base_String[47],
     _Ho_=Base_String[21],
     _Hp_=Base_String[20],
     _Hq_=Base_String[19],
     _Hs_=Base_String[17],
     _Ht_=Base_String[16],
     _Hu_=Base_String[15],
     _Hv_=Base_String[14],
     _Hx_=Base_String[12],
     _Hy_=Base_String[11],
     _Hz_=Base_String[10],
     _HA_=Base_String[9],
     _HB_=Base_String[8],
     _HD_=Base_String[6],
     _HF_=Base_String[4],
     _HG_=Base_String[3],
     _HH_=Base_String[2],
     _HI_=[0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$117),0,_b1_],0],
     _HJ_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_string_ml_54_4),
     group$57=caml_call2(Bin_prot_Shape[6],_HJ_,_HI_),
     _HK_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$118),
     bin_shape_t$53=caml_call1(caml_call2(Bin_prot_Shape[14],group$57,_HK_),0),
     bin_writer_t$48=[0,bin_size_t,bin_write_t],
     bin_reader_t$48=[0,bin_read_t,bin_read_t$0],
     bin_t$48=[0,bin_shape_t$53,bin_writer_t$48,bin_reader_t$48],
     _HL_=
      [0,
       bin_size_t,
       bin_write_t,
       bin_read_t,
       bin_read_t$0,
       bin_shape_t$53,
       bin_writer_t$48,
       bin_reader_t$48,
       bin_t$48],
     _HM_=Base_String[45],
     _HN_=Base_String[44],
     _HO_=Base_String[43],
     _HP_=Base_String[42],
     _HQ_=Base_String[41],
     _HR_=Base_String[40],
     _HS_=Base_String[39],
     _HT_=Base_String[38],
     _HU_=Base_String[37],
     _HV_=Base_String[36],
     _HW_=Base_String[35],
     _HX_=Base_String[34],
     _HY_=Base_String[33],
     _HZ_=Base_String[108],
     _H0_=Base_String[32],
     _H1_=Base_String[31],
     _H2_=Base_String[30],
     _H3_=Base_String[29],
     _H4_=Base_String[28],
     _H5_=Base_String[27],
     _H6_=Base_String[26],
     _H7_=Base_String[25],
     _H8_=Base_String[24],
     _H9_=Base_String[23];
    function _H__(_bK2_){return runtime.Base_hash_string(_bK2_)}
    var
     include$165=
      _v$_
       ([0,
         Base_String[22],
         _H__,
         _H9_,
         _H8_,
         _H7_,
         _H6_,
         _H5_,
         _H4_,
         _H3_,
         _H2_,
         _H1_,
         _H0_,
         _HZ_,
         _HY_,
         _HX_,
         _HW_,
         _HV_,
         _HU_,
         _HT_,
         _HS_,
         _HR_,
         _HQ_,
         _HP_,
         _HO_,
         _HN_,
         _HM_],
        _HL_),
     bin_t$49=include$165[1],
     bin_read_t$89=include$165[2],
     bin_read_t$90=include$165[3],
     bin_reader_t$49=include$165[4],
     bin_size_t$44=include$165[5],
     bin_write_t$44=include$165[6],
     bin_writer_t$49=include$165[7],
     bin_shape_t$54=include$165[8],
     t_of_sexp$46=include$165[9],
     sexp_of_t$58=include$165[10],
     of_string$7=include$165[11],
     to_string$8=include$165[12],
     pp$4=include$165[13],
     equal$27=include$165[20],
     compare$47=include$165[21],
     min$9=include$165[22],
     max$9=include$165[23],
     ascending$8=include$165[24],
     descending$8=include$165[25],
     between$8=include$165[26],
     clamp_exn$8=include$165[27],
     clamp$8=include$165[28],
     validate_lbound$8=include$165[29],
     validate_ubound$8=include$165[30],
     validate_bound$8=include$165[31],
     Replace_polymorphic_compare$6=include$165[32],
     comparator$17=include$165[33],
     Map$10=include$165[34],
     Set$10=include$165[35],
     hash_fold_t$25=include$165[36],
     hash$18=include$165[37],
     hashable$3=include$165[38],
     Table$4=include$165[39],
     Hash_set$4=include$165[40],
     Hash_queue$4=include$165[41],
     length$19=caml_ml_string_length,
     get$3=caml_string_get,
     _H$_=include$165[14],
     _Ia_=include$165[15],
     _Ib_=include$165[16],
     _Ic_=include$165[17],
     _Id_=include$165[18],
     _Ie_=include$165[19],
     include$68=_Di_([0,length$19,get$3]),
     _If_=include$68[1];
    function _Ig_(size)
     {var upper_bound=caml_call2(_ah_,size,1);
      function _bK0_(weighted_low)
       {var weighted_high=caml_call2(_ai_,upper_bound,weighted_low);
        return caml_call1(_nQ_[9][1],weighted_high)}
      var _bK1_=caml_call2(_xK_,0,upper_bound);
      return caml_call2(_nQ_[9][4][2],_bK1_,_bK0_)}
    var default_length$0=caml_call2(_nQ_[9][4][2],_nQ_[23],_Ig_);
    function gen_with_length$0(len,char_gen)
     {function _bKX_(chars)
       {var _bKZ_=caml_call1(_Gn_,chars);return caml_call1(_nQ_[9][1],_bKZ_)}
      var _bKY_=caml_call2(_pa_,len,char_gen);
      return caml_call2(_nQ_[9][4][2],_bKY_,_bKX_)}
    function gen$12(char_gen)
     {function _bKW_(len){return gen_with_length$0(len,char_gen)}
      return caml_call2(_nQ_[9][4][2],default_length$0,_bKW_)}
    var
     gen$13=gen$12(_C3_),
     _Ih_=caml_call1(_pc_,_C$_),
     obs$11=caml_call2(_nP_[19],_Ih_,_Hr_),
     _Ii_=caml_call1(_pd_,_Da_),
     shrinker$11=caml_call3(_nO_[6],_Ii_,_Gn_,_Hr_);
    function take_while$1(t,f)
     {var
       match=
        caml_call3(_GK_,0,t,function(param,elt){return 1 - caml_call1(f,elt)});
      if(match){var i=match[1];return caml_call3(_HE_,t,0,i)}
      return t}
    function rtake_while(t,f)
     {var
       match=
        caml_call3(_GJ_,0,t,function(param,elt){return 1 - caml_call1(f,elt)});
      if(match)
       {var
         i=match[1],
         _bKV_=caml_call2(_ai_,caml_call2(_ai_,caml_ml_string_length(t),i),1);
        return caml_call3(_HE_,t,caml_call2(_ah_,i,1),_bKV_)}
      return t}
    function _Ij_(param)
     {function _bKR_(param)
       {var got=take_while$1(cst_123abc456,_CS_);
        return caml_call8
                (Ppx_assert_lib_Runtime[3],
                 pos$52,
                 sexp_of_t$58,
                 compare$47,
                 0,
                 0,
                 0,
                 expect$20,
                 got)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_result_t_take_while_123abc456,
        0,
        cst_src_string_ml$6,
        123,
        4,
        82,
        _bKR_);
      function _bKS_(param)
       {var got=rtake_while(cst_123abc456$0,_CS_);
        return caml_call8
                (Ppx_assert_lib_Runtime[3],
                 pos$53,
                 sexp_of_t$58,
                 compare$47,
                 0,
                 0,
                 0,
                 expect$21,
                 got)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_result_t_rtake_while_123abc456,
        0,
        cst_src_string_ml$7,
        124,
        4,
        82,
        _bKS_);
      function _bKT_(param)
       {var got=take_while$1(cst_123456,_CS_);
        return caml_call8
                (Ppx_assert_lib_Runtime[3],
                 pos$54,
                 sexp_of_t$58,
                 compare$47,
                 0,
                 0,
                 0,
                 expect$22,
                 got)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_result_t_take_while_123456_f,
        0,
        cst_src_string_ml$8,
        125,
        4,
        85,
        _bKT_);
      function _bKU_(param)
       {var got=rtake_while(cst_123456$0,_CS_);
        return caml_call8
                (Ppx_assert_lib_Runtime[3],
                 pos$55,
                 sexp_of_t$58,
                 compare$47,
                 0,
                 0,
                 0,
                 expect$23,
                 got)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_result_t_rtake_while_123456_f,
        0,
        cst_src_string_ml$9,
        126,
        4,
        85,
        _bKU_);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst_take_while,
      0,
      cst_src_string_ml$10,
      119,
      0,
      418,
      _Ij_);
    function slice$2(t,start,stop)
     {return slice(caml_ml_string_length,_HE_,t,start,stop)}
    function nget$0(x,i)
     {return caml_string_get(x,normalize(caml_ml_string_length,x,i))}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$205);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     _Ik_=
      [0,
       [0,
        hash_fold_t$22,
        function(_bKQ_){return runtime.Base_hash_string(_bKQ_)},
        bin_t$46,
        bin_read_t,
        bin_read_t$0,
        bin_reader_t$46,
        bin_size_t,
        bin_write_t,
        bin_writer_t$46,
        bin_shape_t$51,
        compare$44,
        t_of_sexp$44,
        sexp_of_t$56,
        comparator$14,
        Map$8,
        Set$8]],
     Core_kernel_String=
      [0,
       typerep_of_t$14,
       typename_of_t$13,
       [0,
        bin_t$47,
        bin_read_t,
        bin_read_t$0,
        bin_reader_t$47,
        bin_size_t,
        bin_write_t,
        bin_writer_t$47,
        bin_shape_t$52,
        t_of_sexp$45,
        sexp_of_t$57,
        _F$_,
        _Ga_,
        _Gb_,
        _Gc_,
        _Gd_,
        _Ge_,
        equal$26,
        compare$46,
        min$8,
        max$8,
        ascending$7,
        descending$7,
        between$7,
        clamp_exn$7,
        clamp$7,
        validate_lbound$7,
        validate_ubound$7,
        validate_bound$7,
        Replace_polymorphic_compare$5,
        comparator$16,
        Map$9,
        Set$9,
        hash_fold_t$24,
        hash$17,
        hashable$2,
        Table$3,
        Hash_set$3,
        Hash_queue$3,
        is_suffix,
        is_prefix$0],
       _HH_,
       _HG_,
       _HF_,
       _HE_,
       _HD_,
       _HC_,
       _HB_,
       _HA_,
       _Hz_,
       _Hy_,
       _Hx_,
       _Hw_,
       _Hv_,
       _Hu_,
       _Ht_,
       _Hs_,
       _Hr_,
       _Hq_,
       _Hp_,
       _Ho_,
       _Hn_,
       _Hm_,
       _Hl_,
       _Hk_,
       _Hj_,
       _Hi_,
       _Hh_,
       _Hg_,
       _Hf_,
       _He_,
       _Hd_,
       _Hc_,
       _Hb_,
       _Ha_,
       _G$_,
       _G__,
       _G9_,
       _G8_,
       _G7_,
       _G6_,
       _G5_,
       _G4_,
       _G3_,
       _G2_,
       _G1_,
       _G0_,
       _GZ_,
       _GY_,
       _GX_,
       _GW_,
       _GV_,
       _GU_,
       _GT_,
       _GS_,
       _GR_,
       _GQ_,
       _GP_,
       _GO_,
       _GN_,
       _GM_,
       _GL_,
       _GK_,
       _GJ_,
       _GI_,
       _GH_,
       _GG_,
       _GF_,
       _GE_,
       _GD_,
       _GC_,
       _GB_,
       _GA_,
       _Gz_,
       _Gy_,
       _Gx_,
       _Gw_,
       _Gv_,
       _Gu_,
       _Gt_,
       _Gs_,
       _Gr_,
       _Gq_,
       _Gp_,
       _Go_,
       _Gn_,
       _Gm_,
       _Gl_,
       _Gk_,
       slice$2,
       nget$0,
       take_while$1,
       rtake_while,
       _If_,
       bin_t$49,
       bin_read_t$89,
       bin_read_t$90,
       bin_reader_t$49,
       bin_size_t$44,
       bin_write_t$44,
       bin_writer_t$49,
       bin_shape_t$54,
       t_of_sexp$46,
       sexp_of_t$58,
       of_string$7,
       to_string$8,
       pp$4,
       _H$_,
       _Ia_,
       _Ib_,
       _Ic_,
       _Id_,
       _Ie_,
       equal$27,
       compare$47,
       min$9,
       max$9,
       ascending$8,
       descending$8,
       between$8,
       clamp_exn$8,
       clamp$8,
       validate_lbound$8,
       validate_ubound$8,
       validate_bound$8,
       Replace_polymorphic_compare$6,
       comparator$17,
       Map$10,
       Set$10,
       hash_fold_t$25,
       hash$18,
       hashable$3,
       Table$4,
       Hash_set$4,
       Hash_queue$4,
       gen$13,
       obs$11,
       shrinker$11,
       gen$12,
       gen_with_length$0,
       _Ik_];
    caml_register_global(7444,Core_kernel_String,"Core_kernel__String");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$206);
    caml_call1(Expect_test_collector[4][1],cst_src_float_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$207,cst$74);
    var
     _Il_=[0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$119),0,_ci_],0],
     _Im_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_float_ml_23_2),
     group$58=caml_call2(Bin_prot_Shape[6],_Im_,_Il_),
     _In_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$120),
     bin_shape_t$55=caml_call1(caml_call2(Bin_prot_Shape[14],group$58,_In_),0),
     bin_writer_t$50=[0,bin_size_t$2,bin_write_t$2],
     bin_reader_t$50=[0,bin_read_t$5,bin_read_t$6],
     bin_t$50=[0,bin_shape_t$55,bin_writer_t$50,bin_reader_t$50],
     Typename_of_t$14=caml_call1(Typerep_lib_Make_typename[1],[0,name$23]),
     typename_of_t$14=Typename_of_t$14[2],
     name_of_t$10=Typename_of_t$14[1],
     typerep_of_t$15=[9,[0,name_of_t$10,[0,typerep_of_float]]],
     Private$2=Base_Float[124],
     ieee_mantissa=Base_Float[122],
     ieee_exponent=Base_Float[121],
     ieee_negative=Base_Float[120],
     create_ieee_exn=Base_Float[119],
     create_ieee=Base_Float[118],
     sign_or_nan=Base_Float[117],
     Sign_or_nan=Base_Float[116],
     sign$3=Base_Float[115],
     is_finite=Base_Float[113],
     classify=Base_Float[112],
     Class=Base_Float[111],
     frexp=Base_Float[110],
     ldexp=Base_Float[109],
     int_pow=Base_Float[108],
     to_padded_compact_string=Base_Float[107],
     to_string_hum$6=Base_Float[106],
     to_string$9=Base_Float[105],
     O_dot=Base_Float[104],
     abs$4=Base_Float[102],
     scale=Base_Float[101],
     neg$3=Base_Float[100],
     sub$5=Base_Float[99],
     add$12=Base_Float[98],
     mod_float=Base_Float[97],
     modf=Base_Float[96],
     Parts=Base_Float[95],
     scale$0=Base_Float[92],
     _Iq_=Base_Float[91],
     _Ir_=Base_Float[90],
     _Is_=Base_Float[89],
     max_inan=Base_Float[88],
     min_inan=Base_Float[87],
     is_inf=Base_Float[86],
     is_nan=Base_Float[85],
     round_decimal=Base_Float[84],
     round_significant=Base_Float[83],
     iround_ubound=Base_Float[82],
     iround_lbound=Base_Float[81],
     int63_round_nearest_exn=Base_Float[80],
     int63_round_up_exn=Base_Float[79],
     int63_round_down_exn=Base_Float[78],
     iround_nearest_exn=Base_Float[77],
     iround_up_exn=Base_Float[76],
     iround_down_exn=Base_Float[75],
     iround_towards_zero_exn=Base_Float[74],
     iround_nearest=Base_Float[73],
     iround_up=Base_Float[72],
     iround_down=Base_Float[71],
     iround_towards_zero=Base_Float[70],
     round_nearest_half_to_even=Base_Float[69],
     round_nearest$3=Base_Float[68],
     round_up$3=Base_Float[67],
     round_down$3=Base_Float[66],
     round_towards_zero$3=Base_Float[65],
     iround_exn=Base_Float[64],
     iround=Base_Float[63],
     round$3=Base_Float[62],
     to_int64$3=Base_Float[61],
     of_int64$2=Base_Float[60],
     of_int63=Base_Float[59],
     to_int$2=Base_Float[58],
     of_int$2=Base_Float[57],
     one_ulp=Base_Float[56],
     of_int64_preserve_order=Base_Float[55],
     to_int64_preserve_order_exn=Base_Float[54],
     to_int64_preserve_order=Base_Float[53],
     min_positive_normal_value=Base_Float[52],
     min_positive_subnormal_value=Base_Float[51],
     max_finite_value=Base_Float[50],
     epsilon_float$0=Base_Float[49],
     euler=Base_Float[48],
     sqrt_2pi=Base_Float[47],
     sqrt_pi=Base_Float[46],
     pi=Base_Float[45],
     minus_one$3=Base_Float[44],
     one$4=Base_Float[43],
     zero$4=Base_Float[42],
     min_value$3=Base_Float[41],
     max_value$3=Base_Float[40],
     neg_infinity$0=Base_Float[39],
     infinity$0=Base_Float[38],
     nan$0=Base_Float[37],
     validate_ordinary=Base_Float[36],
     is_non_positive$3=Base_Float[35],
     is_negative$3=Base_Float[34],
     is_non_negative$3=Base_Float[33],
     is_positive$3=Base_Float[32],
     validate_non_positive$3=Base_Float[31],
     validate_negative$3=Base_Float[30],
     validate_non_negative$3=Base_Float[29],
     validate_positive$3=Base_Float[28],
     pp$5=Base_Float[27],
     validate_bound$9=Base_Float[26],
     validate_ubound$9=Base_Float[25],
     validate_lbound$9=Base_Float[24],
     comparator$18=Base_Float[23],
     clamp$9=Base_Float[22],
     clamp_exn$9=Base_Float[21],
     between$9=Base_Float[20],
     descending$9=Base_Float[19],
     ascending$9=Base_Float[18],
     max$10=Base_Float[17],
     min$10=Base_Float[16],
     compare$48=Base_Float[15],
     equal$28=Base_Float[14],
     _It_=Base_Float[13],
     _Iu_=Base_Float[12],
     _Iv_=Base_Float[11],
     _Iw_=Base_Float[10],
     _Ix_=Base_Float[9],
     _Iy_=Base_Float[8],
     of_string$8=Base_Float[7],
     sexp_of_t$59=Base_Float[6],
     t_of_sexp$47=Base_Float[5],
     hash$19=Base_Float[4],
     hash_fold_t$26=Base_Float[3],
     to_float$3=Base_Float[2],
     of_float$3=Base_Float[1],
     _Io_=Base_Float[94],
     _Ip_=Base_Float[93],
     _Iz_=
      Make_binable
       ([0,
         hash_fold_t$26,
         bin_t$50,
         bin_read_t$5,
         bin_read_t$6,
         bin_reader_t$50,
         bin_size_t$2,
         bin_write_t$2,
         bin_writer_t$50,
         bin_shape_t$55,
         t_of_sexp$47,
         compare$48,
         sexp_of_t$59,
         hash$19]),
     hash_fold_t$27=_Iz_[1],
     hash$20=_Iz_[2],
     hashable$4=_Iz_[3],
     Table$5=_Iz_[4],
     Hash_set$5=_Iz_[5],
     Hash_queue$5=_Iz_[6],
     include$69=
      _s$_
       ([0,
         bin_t$50,
         bin_read_t$5,
         bin_read_t$6,
         bin_reader_t$50,
         bin_size_t$2,
         bin_write_t$2,
         bin_writer_t$50,
         bin_shape_t$55,
         compare$48,
         t_of_sexp$47,
         sexp_of_t$59,
         comparator$18]),
     comparator$19=include$69[1],
     Map$11=include$69[2],
     Set$11=include$69[3],
     Replace_polymorphic_compare$7=
      [0,_Iy_,_Ix_,_Iw_,_Iv_,_Iu_,_It_,equal$28,compare$48,min$10,max$10];
    function Make$7(T)
     {var robust_comparison_tolerance=T[1];
      function _bKJ_(x,y){return y - robust_comparison_tolerance <= x?1:0}
      function _bKK_(x,y){return _bKJ_(y,x)}
      function _bKL_(x,y){var _bKP_=_bKJ_(x,y);return _bKP_?_bKJ_(y,x):_bKP_}
      function _bKM_(x,y){return y + robust_comparison_tolerance < x?1:0}
      function _bKN_(x,y){return _bKM_(y,x)}
      function _bKO_(x,y){return 1 - _bKL_(x,y)}
      function robustly_compare(x,y)
       {var d=x - y;
        return d < - robust_comparison_tolerance
                ?-1
                :robust_comparison_tolerance < d?1:0}
      return [0,
              robust_comparison_tolerance,
              _bKJ_,
              _bKK_,
              _bKL_,
              _bKM_,
              _bKN_,
              _bKO_,
              robustly_compare]}
    var
     Robust_compare=[0,Make$7],
     include$70=caml_call1(Robust_compare[1],[0,1e-07]),
     _IB_=include$70[2],
     _IC_=include$70[3],
     _ID_=include$70[4],
     _IE_=include$70[5],
     _IF_=include$70[6],
     _IG_=include$70[7],
     robustly_compare=include$70[8],
     _IH_=Base_Float[103],
     abs$5=_IH_[13],
     neg$4=_IH_[14],
     zero$5=_IH_[15],
     of_int$3=_IH_[16],
     of_float$4=_IH_[17],
     robustly_compare$0=include$70[8],
     _IA_=include$70[1],
     _II_=_IH_[1],
     _IJ_=_IH_[2],
     _IK_=_IH_[3],
     _IL_=_IH_[4],
     _IM_=_IH_[5],
     _IN_=_IH_[6],
     _IO_=_IH_[7],
     _IP_=_IH_[8],
     _IQ_=_IH_[9],
     _IR_=_IH_[10],
     _IS_=_IH_[11],
     _IT_=_IH_[12],
     _IU_=include$70[2],
     _IV_=include$70[3],
     _IW_=include$70[4],
     _IX_=include$70[5],
     _IY_=include$70[6],
     _IZ_=include$70[7],
     _I0_=
      [0,
       [0,
        caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$121),
        0,
        bin_shape_t$55],
       0],
     _I1_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_float_ml_74_2),
     group$59=caml_call2(Bin_prot_Shape[6],_I1_,_I0_),
     _I2_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$122),
     bin_shape_t$56=caml_call1(caml_call2(Bin_prot_Shape[14],group$59,_I2_),0),
     bin_writer_t$51=[0,bin_size_t$2,bin_write_t$2],
     bin_reader_t$51=[0,bin_read_t$5,bin_read_t$6],
     bin_t$51=[0,bin_shape_t$56,bin_writer_t$51,bin_reader_t$51],
     include$71=Base_Float[123],
     t_of_sexp$48=include$71[1],
     sexp_of_t$60=include$71[2],
     of_string$9=include$71[3],
     to_string$10=include$71[4];
    function sign$4(t){return caml_call2(_IE_,t,0)?2:caml_call2(_IF_,t,0)?0:1}
    function to_string_12(x)
     {var
       s=runtime.caml_format_float(cst_12g,x),
       l=caml_ml_string_length(s),
       i=0;
      for(;;)
       {if(l <= i)return caml_call2(Stdlib[17],s,cst$75);
        var
         match=caml_string_get(s,i),
         switch$0=48 <= match?58 <= match?0:1:45 === match?1:0;
        if(switch$0){var i$0=i + 1 | 0,i=i$0;continue}
        return s}}
    var
     zero_exponent=caml_call1(ieee_exponent,zero$4),
     zero_mantissa=caml_call1(ieee_mantissa,zero$4),
     max_positive_subnormal_value=
      caml_call2(one_ulp,759637122,min_positive_normal_value),
     subnormal_exponent=caml_call1(ieee_exponent,min_positive_subnormal_value),
     min_subnormal_mantissa=
      caml_call1(ieee_mantissa,min_positive_subnormal_value),
     max_subnormal_mantissa=
      caml_call1(ieee_mantissa,max_positive_subnormal_value),
     lower_bound=caml_call1(ieee_exponent,min_positive_normal_value),
     upper_bound=caml_call1(ieee_exponent,max_finite_value);
    caml_call1(ieee_mantissa,min_positive_normal_value);
    var
     max_nan_mantissa=caml_call1(ieee_mantissa,max_finite_value),
     inf_exponent=caml_call1(ieee_exponent,infinity$0),
     inf_mantissa=caml_call1(ieee_mantissa,infinity$0),
     nan_exponent=caml_call1(ieee_exponent,nan$0),
     min_nan_mantissa=caml_call1(succ$2,inf_mantissa);
    function test_class(gen,expect)
     {return caml_call9
              (_nK_,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               gen,
               function(float$0)
                {var
                  actual=caml_call1(classify,float$0),
                  _bKF_=
                   1
                   -
                   caml_call2
                    (_xr_,caml_call2(Base_Float[111][1],actual,expect),0);
                 if(_bKF_)
                  {var
                    _bKG_=
                     [0,
                      [1,[0,_I3_,[0,caml_call1(Base_Float[111][4],actual),0]]],
                      0],
                    _bKH_=
                     [0,
                      [1,[0,_I4_,[0,caml_call1(Base_Float[111][4],expect),0]]],
                      _bKG_],
                    _bKI_=
                     [0,
                      [1,[0,_I5_,[0,caml_call1(sexp_of_t$59,float$0),0]]],
                      _bKH_];
                   return caml_call1
                           (_aX_,
                            [1,
                             [0,
                              caml_call1
                               (Sexplib0_Sexp_conv[7],
                                cst_generator_produced_float_in_wrong_class),
                              _bKI_]])}
                 return _bKF_})}
    var num_mantissa_bits=52;
    function _I6_(num_bits)
     {function _bKD_(bits)
       {return caml_call2
                (_zI_,bits,caml_call2(_w3_,num_mantissa_bits,num_bits))}
      var
       _bKE_=
        caml_call2
         (_AC_,epoch,caml_call1(pred$2,caml_call2(_zI_,one$2,num_bits)));
      return caml_call2(_nQ_[9][4][3],_bKE_,_bKD_)}
    var
     _I7_=caml_call2(_xJ_,0,num_mantissa_bits),
     gen_normal_mantissa=caml_call2(_nQ_[9][4][2],_I7_,_I6_),
     upper_bound$0=caml_call1(ieee_exponent,1),
     _Ja_=0;
    function _I8_(offset){return caml_call2(_w4_,upper_bound$0,offset)}
    var
     _I9_=caml_call2(_xL_,0,caml_call2(_w3_,upper_bound,upper_bound$0)),
     _Jb_=[0,[0,0.5,caml_call2(_nQ_[9][4][3],_I9_,_I8_)],_Ja_];
    function _I__(offset){return caml_call2(_w3_,upper_bound$0,offset)}
    var
     _I$_=caml_call2(_xL_,0,caml_call2(_w3_,upper_bound$0,lower_bound)),
     _Jc_=[0,[0,0.5,caml_call2(_nQ_[9][4][3],_I$_,_I__)],_Jb_],
     gen_exponent=caml_call1(_nQ_[66],_Jc_);
    function _Jd_(negative)
     {return caml_call3(create_ieee_exn,negative,zero_exponent,zero_mantissa)}
    var gen_zero=caml_call2(_nQ_[9][4][3],_B7_,_Jd_);
    function _Je_(param){return test_class(gen_zero,4)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_test_class_gen_zero_Zero,
      0,
      cst_src_float_ml$0,
      177,
      2,
      44,
      _Je_);
    var
     let_syntax_002=caml_call1(_nQ_[9][1],subnormal_exponent),
     let_syntax_003=
      caml_call2(_AF_,min_subnormal_mantissa,max_subnormal_mantissa);
    function _Jf_(param)
     {var
       match=param[2],
       mantissa=match[2],
       exponent=match[1],
       negative=param[1];
      return caml_call3(create_ieee_exn,negative,exponent,mantissa)}
    var
     _Jg_=caml_call2(_nQ_[9][4][4],let_syntax_002,let_syntax_003),
     _Jh_=caml_call2(_nQ_[9][4][4],_B7_,_Jg_),
     gen_subnormal=caml_call2(_nQ_[9][4][3],_Jh_,_Jf_);
    function _Ji_(param){return test_class(gen_subnormal,3)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_test_class_gen_subnormal_Subnormal,
      0,
      cst_src_float_ml$1,
      186,
      2,
      54,
      _Ji_);
    function _Jj_(param)
     {var
       match=param[2],
       mantissa=match[2],
       exponent=match[1],
       negative=param[1];
      return caml_call3(create_ieee_exn,negative,exponent,mantissa)}
    var
     _Jk_=caml_call2(_nQ_[9][4][4],gen_exponent,gen_normal_mantissa),
     _Jl_=caml_call2(_nQ_[9][4][4],_B7_,_Jk_),
     gen_normal=caml_call2(_nQ_[9][4][3],_Jl_,_Jj_);
    function _Jm_(param){return test_class(gen_normal,2)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_test_class_gen_normal_Normal,
      0,
      cst_src_float_ml$2,
      195,
      2,
      48,
      _Jm_);
    function _Jn_(negative)
     {return caml_call3(create_ieee_exn,negative,inf_exponent,inf_mantissa)}
    var gen_infinite=caml_call2(_nQ_[9][4][3],_B7_,_Jn_);
    function _Jo_(param){return test_class(gen_infinite,0)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_test_class_gen_infinite_Infinite,
      0,
      cst_src_float_ml$3,
      202,
      2,
      52,
      _Jo_);
    var
     let_syntax_008=caml_call1(_nQ_[9][1],nan_exponent),
     let_syntax_009=caml_call2(_AC_,min_nan_mantissa,max_nan_mantissa);
    function _Jp_(param)
     {var
       match=param[2],
       mantissa=match[2],
       exponent=match[1],
       negative=param[1];
      return caml_call3(create_ieee_exn,negative,exponent,mantissa)}
    var
     _Jq_=caml_call2(_nQ_[9][4][4],let_syntax_008,let_syntax_009),
     _Jr_=caml_call2(_nQ_[9][4][4],_B7_,_Jq_),
     gen_nan=caml_call2(_nQ_[9][4][3],_Jr_,_Jp_);
    function _Js_(param){return test_class(gen_nan,1)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_test_class_gen_nan_Nan,
      0,
      cst_src_float_ml$4,
      211,
      2,
      42,
      _Js_);
    function gen_matching_classes(filter)
     {function _bKz_(c)
       {if(caml_call1(filter,c))
         {switch(c)
           {case 0:var _bKB_=gen_infinite;break;
            case 1:var _bKB_=gen_nan;break;
            case 2:var _bKB_=gen_normal;break;
            case 3:var _bKB_=gen_subnormal;break;
            default:var _bKB_=gen_zero}
          switch(c)
           {case 0:var _bKC_=1;break;
            case 1:var _bKC_=1;break;
            case 2:var _bKC_=100;break;
            case 3:var _bKC_=10;break;
            default:var _bKC_=1}
          return [0,[0,_bKC_,_bKB_]]}
        return 0}
      var _bKA_=caml_call2(Base_List[120],Base_Float[111][2],_bKz_);
      return caml_call1(_nQ_[66],_bKA_)}
    var
     gen_finite=gen_matching_classes(function(param){return 2 <= param?1:0}),
     gen_without_nan=
      gen_matching_classes(function(param){return 1 === param?0:1}),
     gen$14=gen_matching_classes(function(param){return 1}),
     gen_finite_non_zero=
      gen_matching_classes
       (function(param)
         {var switcher=param - 2 | 0;return 1 < switcher >>> 0?0:1});
    function _Jt_(t){return caml_call1(abs$4,t)}
    var gen_positive=caml_call2(_nQ_[9][4][3],gen_finite_non_zero,_Jt_);
    function _Ju_(t){return caml_call1(_aR_,caml_call1(abs$4,t))}
    var gen_negative=caml_call2(_nQ_[9][4][3],gen_finite_non_zero,_Ju_);
    function gen_uniform_excl(lower_bound,upper_bound)
     {var
       _bKs_=1 - caml_call1(is_finite,lower_bound),
       _bKt_=_bKs_ || 1 - caml_call1(is_finite,upper_bound);
      if(_bKt_)
       {var
         _bKu_=[0,[1,[0,_Jv_,[0,caml_call1(sexp_of_t$59,upper_bound),0]]],0],
         _bKv_=
          [0,[1,[0,_Jw_,[0,caml_call1(sexp_of_t$59,lower_bound),0]]],_bKu_];
        caml_call1
         (_aX_,
          [1,
           [0,
            caml_call1
             (Sexplib0_Sexp_conv[7],
              cst_Float_gen_uniform_excl_bounds_are_not_finite),
            _bKv_]])}
      var
       lower_incl=caml_call2(one_ulp,19067,lower_bound),
       upper_incl=caml_call2(one_ulp,759637122,upper_bound);
      if(caml_call2(_Iv_,lower_incl,upper_incl))
       {var
         _bKw_=[0,[1,[0,_Jx_,[0,caml_call1(sexp_of_t$59,upper_bound),0]]],0],
         _bKx_=
          [0,[1,[0,_Jy_,[0,caml_call1(sexp_of_t$59,lower_bound),0]]],_bKw_];
        caml_call1
         (_aX_,
          [1,
           [0,
            caml_call1
             (Sexplib0_Sexp_conv[7],
              cst_Float_gen_uniform_excl_requested_range_is_empty),
            _bKx_]])}
      function _bKy_(param,random)
       {return caml_call3(Splittable_random[8],random,lower_incl,upper_incl)}
      return caml_call1(_nQ_[1],_bKy_)}
    function gen_incl$0(lower_bound,upper_bound)
     {var
       _bKp_=[0,[0,0.9,gen_uniform_excl(lower_bound,upper_bound)],0],
       _bKq_=[0,[0,0.05,caml_call1(_nQ_[10],upper_bound)],_bKp_],
       _bKr_=[0,[0,0.05,caml_call1(_nQ_[10],lower_bound)],_bKq_];
      return caml_call1(_nQ_[66],_bKr_)}
    var
     obs$12=caml_call2(_nP_[19],_zi_,bits_of_float),
     shrinker$12=caml_call1(_nO_[3],0);
    function _Jz_(param)
     {var
       before=runtime.core_kernel_gc_minor_words(0),
       _bKo_=caml_call1(_Aw_,1);
      if(caml_call2(equal$20,caml_call1(int63_round_nearest_exn,0.8),_bKo_))
       {var after=runtime.core_kernel_gc_minor_words(0);
        return caml_call2(_xr_,before,after)}
      throw [0,Assert_failure,_JA_]}
    caml_call8
     (Ppx_inline_test_lib_Runtime[4],
      Inline_test_config,
      cst_assert_Int63_equal_int63_round_nearest_exn,
      _JB_,
      cst_src_float_ml$5,
      304,
      0,
      206,
      _Jz_);
    function _JC_(param)
     {var initial_words=runtime.core_kernel_gc_minor_words(0);
      caml_call1(validate_positive$3,1);
      var
       got=
        caml_call2(_w3_,runtime.core_kernel_gc_minor_words(0),initial_words);
      return caml_call8
              (Ppx_assert_lib_Runtime[3],pos$56,sexp_of_t$0,_t_,0,0,0,0,got)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_Float_validate_positive_doesn_t_allocate_on_success,
      0,
      cst_src_float_ml$6,
      310,
      0,
      264,
      _JC_);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$208);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     include$72=
      [0,
       typerep_of_t$15,
       typename_of_t$14,
       Robust_compare,
       _IA_,
       _IB_,
       _IC_,
       _ID_,
       _IE_,
       _IF_,
       _IG_,
       robustly_compare,
       [0,
        _II_,
        _IJ_,
        _IK_,
        _IL_,
        _IM_,
        _IN_,
        _IO_,
        _IP_,
        _IQ_,
        _IR_,
        _IS_,
        _IT_,
        abs$5,
        neg$4,
        zero$5,
        of_int$3,
        of_float$4,
        _IU_,
        _IV_,
        _IW_,
        _IX_,
        _IY_,
        _IZ_,
        robustly_compare$0],
       [0,
        bin_t$51,
        bin_read_t$5,
        bin_read_t$6,
        bin_reader_t$51,
        bin_size_t$2,
        bin_write_t$2,
        bin_writer_t$51,
        bin_shape_t$56,
        t_of_sexp$48,
        sexp_of_t$60,
        of_string$9,
        to_string$10],
       bin_t$50,
       bin_read_t$5,
       bin_read_t$6,
       bin_reader_t$50,
       bin_size_t$2,
       bin_write_t$2,
       bin_writer_t$50,
       bin_shape_t$55,
       Replace_polymorphic_compare$7,
       Map$11,
       Set$11,
       hashable$4,
       Table$5,
       Hash_set$5,
       Hash_queue$5,
       of_float$3,
       to_float$3,
       hash_fold_t$27,
       hash$20,
       t_of_sexp$47,
       sexp_of_t$59,
       of_string$8,
       _Iy_,
       _Ix_,
       _Iw_,
       _Iv_,
       _Iu_,
       _It_,
       equal$28,
       compare$48,
       min$10,
       max$10,
       ascending$9,
       descending$9,
       between$9,
       clamp_exn$9,
       clamp$9,
       comparator$19,
       validate_lbound$9,
       validate_ubound$9,
       validate_bound$9,
       pp$5,
       validate_positive$3,
       validate_non_negative$3,
       validate_negative$3,
       validate_non_positive$3,
       is_positive$3,
       is_non_negative$3,
       is_negative$3,
       is_non_positive$3,
       validate_ordinary,
       nan$0,
       infinity$0,
       neg_infinity$0,
       max_value$3,
       min_value$3,
       zero$4,
       one$4,
       minus_one$3,
       pi,
       sqrt_pi,
       sqrt_2pi,
       euler,
       epsilon_float$0,
       max_finite_value,
       min_positive_subnormal_value,
       min_positive_normal_value,
       to_int64_preserve_order,
       to_int64_preserve_order_exn,
       of_int64_preserve_order,
       one_ulp,
       of_int$2,
       to_int$2,
       of_int63,
       of_int64$2,
       to_int64$3,
       round$3,
       iround,
       iround_exn,
       round_towards_zero$3,
       round_down$3,
       round_up$3,
       round_nearest$3,
       round_nearest_half_to_even,
       iround_towards_zero,
       iround_down,
       iround_up,
       iround_nearest,
       iround_towards_zero_exn,
       iround_down_exn,
       iround_up_exn,
       iround_nearest_exn,
       int63_round_down_exn,
       int63_round_up_exn,
       int63_round_nearest_exn,
       iround_lbound,
       iround_ubound,
       round_significant,
       round_decimal,
       is_nan,
       is_inf,
       min_inan,
       max_inan,
       _Is_,
       _Ir_,
       _Iq_,
       scale$0,
       _Ip_,
       _Io_,
       Parts,
       modf,
       mod_float,
       add$12,
       sub$5,
       neg$3,
       scale,
       abs$4,
       O_dot,
       to_string_hum$6,
       to_padded_compact_string,
       int_pow,
       ldexp,
       frexp,
       Class,
       classify,
       is_finite,
       sign$3,
       Sign_or_nan,
       sign_or_nan,
       create_ieee,
       create_ieee_exn,
       ieee_negative,
       ieee_exponent,
       ieee_mantissa,
       Private$2,
       to_string_12,
       to_string$9,
       to_string$9,
       gen$14,
       obs$12,
       shrinker$12,
       sign$4,
       sign$4,
       gen_uniform_excl,
       gen_incl$0,
       gen_finite,
       gen_positive,
       gen_negative,
       gen_without_nan];
    caml_register_global(7445,include$72,"Core_kernel__Float");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$209);
    caml_call1(Expect_test_collector[4][1],cst_src_int32_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$210,cst$76);
    var
     Typename_of_t$15=caml_call1(Typerep_lib_Make_typename[1],[0,name$24]),
     typename_of_t$15=Typename_of_t$15[2],
     name_of_t$11=Typename_of_t$15[1],
     typerep_of_t$16=[9,[0,name_of_t$11,[0,typerep_of_int32]]],
     _JD_=[0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$123),0,_ct_],0],
     _JE_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_int32_ml_6_4),
     group$60=caml_call2(Bin_prot_Shape[6],_JE_,_JD_),
     _JF_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$124),
     bin_shape_t$57=caml_call1(caml_call2(Bin_prot_Shape[14],group$60,_JF_),0),
     bin_writer_t$52=[0,_bd_,_cv_],
     bin_reader_t$52=[0,_cx_,_cy_],
     bin_t$52=[0,bin_shape_t$57,bin_writer_t$52,bin_reader_t$52],
     include$166=
      _v$_
       ([0,
         Base_Int32[5],
         Base_Int32[6],
         Base_Int32[7],
         Base_Int32[8],
         Base_Int32[9],
         Base_Int32[10],
         Base_Int32[11],
         Base_Int32[12],
         Base_Int32[13],
         Base_Int32[14],
         Base_Int32[15],
         Base_Int32[16],
         Base_Int32[17],
         Base_Int32[18],
         Base_Int32[19],
         Base_Int32[20],
         Base_Int32[21],
         Base_Int32[22],
         Base_Int32[23],
         Base_Int32[24],
         Base_Int32[25],
         Base_Int32[26],
         Base_Int32[27],
         Base_Int32[28],
         Base_Int32[29],
         Base_Int32[30]],
        [0,
         _bd_,
         _cv_,
         _cx_,
         _cy_,
         bin_shape_t$57,
         bin_writer_t$52,
         bin_reader_t$52,
         bin_t$52]),
     bin_t$53=include$166[1],
     bin_read_t$91=include$166[2],
     bin_read_t$92=include$166[3],
     bin_reader_t$53=include$166[4],
     bin_size_t$45=include$166[5],
     bin_write_t$45=include$166[6],
     bin_writer_t$53=include$166[7],
     bin_shape_t$58=include$166[8],
     Replace_polymorphic_compare$8=include$166[32],
     Map$12=include$166[34],
     Set$12=include$166[35],
     hashable$5=include$166[38],
     Table$6=include$166[39],
     Hash_set$6=include$166[40],
     Hash_queue$6=include$166[41],
     Typename_of_t$16=caml_call1(Typerep_lib_Make_typename[1],[0,name$25]),
     typename_of_t$16=Typename_of_t$16[2],
     name_of_t$12=Typename_of_t$16[1],
     typerep_of_t$17=[9,[0,name_of_t$12,[0,typerep_of_t$16]]],
     _JG_=
      [0,
       [0,
        caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$125),
        0,
        bin_shape_t$58],
       0],
     _JH_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_int32_ml_10_2),
     group$61=caml_call2(Bin_prot_Shape[6],_JH_,_JG_),
     _JI_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$126),
     bin_shape_t$59=caml_call1(caml_call2(Bin_prot_Shape[14],group$61,_JI_),0),
     bin_writer_t$54=[0,bin_size_t$45,bin_write_t$45],
     bin_reader_t$54=[0,bin_read_t$91,bin_read_t$92],
     bin_t$54=[0,bin_shape_t$59,bin_writer_t$54,bin_reader_t$54],
     include$73=Base_Int32[40],
     t_of_sexp$49=include$73[1],
     sexp_of_t$61=include$73[2],
     compare$49=include$73[3],
     hash_fold_t$28=include$73[4],
     hash$21=include$73[5],
     of_string$10=include$73[6],
     to_string$11=include$73[7],
     to_string_hum$7=include$73[8],
     float_of_bits$0=Base_Int32[105],
     bits_of_float$0=Base_Int32[104],
     of_int64_trunc$1=Base_Int32[103],
     of_nativeint_trunc$1=Base_Int32[102],
     to_int_trunc$1=Base_Int32[101],
     of_int_trunc=Base_Int32[100],
     of_int64$3=Base_Int32[99],
     to_nativeint$2=Base_Int32[98],
     of_nativeint$2=Base_Int32[97],
     to_int32$2=Base_Int32[96],
     of_int32$2=Base_Int32[95],
     to_int$3=Base_Int32[94],
     of_int$4=Base_Int32[93],
     _JZ_=Base_Int32[76],
     _J3_=Base_Int32[72],
     _KS_=Base_Int32[18],
     _K2_=Base_Int32[8],
     _K3_=Base_Int32[7],
     _K4_=Base_Int32[6],
     _K5_=Base_Int32[5],
     _K6_=Base_Int32[4],
     _K7_=Base_Int32[3],
     _K8_=Base_Int32[2],
     of_float$5=Base_Int32[1],
     to_float$4=Base_Int32[2],
     of_int_exn$3=Base_Int32[3],
     to_int_exn$4=Base_Int32[4],
     hash_fold_t$29=Base_Int32[5],
     hash$22=Base_Int32[6],
     t_of_sexp$50=Base_Int32[7],
     sexp_of_t$62=Base_Int32[8],
     of_string$11=Base_Int32[9],
     to_string$12=Base_Int32[10],
     equal$29=Base_Int32[17],
     compare$50=Base_Int32[18],
     min$11=Base_Int32[19],
     max$11=Base_Int32[20],
     ascending$10=Base_Int32[21],
     descending$10=Base_Int32[22],
     between$10=Base_Int32[23],
     clamp_exn$10=Base_Int32[24],
     clamp$10=Base_Int32[25],
     comparator$20=Base_Int32[26],
     validate_lbound$10=Base_Int32[27],
     validate_ubound$10=Base_Int32[28],
     validate_bound$10=Base_Int32[29],
     pp$6=Base_Int32[30],
     validate_positive$4=Base_Int32[31],
     validate_non_negative$4=Base_Int32[32],
     validate_negative$4=Base_Int32[33],
     validate_non_positive$4=Base_Int32[34],
     is_positive$4=Base_Int32[35],
     is_non_negative$4=Base_Int32[36],
     is_negative$4=Base_Int32[37],
     is_non_positive$4=Base_Int32[38],
     sign$5=Base_Int32[39],
     Hex$5=Base_Int32[40],
     to_string_hum$8=Base_Int32[41],
     zero$6=Base_Int32[42],
     one$5=Base_Int32[43],
     minus_one$4=Base_Int32[44],
     neg$5=Base_Int32[49],
     rem$3=Base_Int32[54],
     land$3=Base_Int32[56],
     lor$3=Base_Int32[57],
     lxor$3=Base_Int32[58],
     lnot$4=Base_Int32[59],
     lsl$3=Base_Int32[60],
     asr$3=Base_Int32[61],
     succ$4=Base_Int32[62],
     pred$4=Base_Int32[63],
     round$4=Base_Int32[64],
     round_towards_zero$4=Base_Int32[65],
     round_down$4=Base_Int32[66],
     round_up$4=Base_Int32[67],
     round_nearest$4=Base_Int32[68],
     abs$6=Base_Int32[69],
     pow$3=Base_Int32[70],
     bit_and$3=Base_Int32[71],
     bit_or$3=Base_Int32[72],
     bit_xor$3=Base_Int32[73],
     bit_not$3=Base_Int32[74],
     popcount$3=Base_Int32[75],
     shift_left$4=Base_Int32[76],
     shift_right$4=Base_Int32[77],
     decr$4=Base_Int32[78],
     incr$4=Base_Int32[79],
     of_int32_exn$3=Base_Int32[80],
     to_int32_exn$3=Base_Int32[81],
     of_int64_exn$3=Base_Int32[82],
     to_int64$4=Base_Int32[83],
     of_nativeint_exn$3=Base_Int32[84],
     to_nativeint_exn$3=Base_Int32[85],
     of_float_unchecked$3=Base_Int32[86],
     num_bits$4=Base_Int32[87],
     max_value$4=Base_Int32[88],
     min_value$4=Base_Int32[89],
     lsr$3=Base_Int32[90],
     shift_right_logical$3=Base_Int32[91],
     O$4=Base_Int32[92],
     splittable_random$3=Splittable_random[4],
     _JJ_=Base_Int32[92],
     _JK_=Base_Int32[91],
     _JL_=Base_Int32[90],
     _JM_=Base_Int32[89],
     _JN_=Base_Int32[88],
     _JO_=Base_Int32[87],
     _JP_=Base_Int32[86],
     _JQ_=Base_Int32[85],
     _JR_=Base_Int32[84],
     _JS_=Base_Int32[83],
     _JT_=Base_Int32[82],
     _JU_=Base_Int32[81],
     _JV_=Base_Int32[80],
     _JW_=Base_Int32[79],
     _JX_=Base_Int32[78],
     _JY_=Base_Int32[77],
     _J0_=Base_Int32[75],
     _J1_=Base_Int32[74],
     _J2_=Base_Int32[73],
     _J4_=Base_Int32[71],
     _J5_=Base_Int32[70],
     _J6_=Base_Int32[69],
     _J7_=Base_Int32[68],
     _J8_=Base_Int32[67],
     _J9_=Base_Int32[66],
     _J__=Base_Int32[65],
     _J$_=Base_Int32[64],
     _Ka_=Base_Int32[63],
     _Kb_=Base_Int32[62],
     _Kc_=Base_Int32[61],
     _Kd_=Base_Int32[60],
     _Ke_=Base_Int32[59],
     _Kf_=Base_Int32[58],
     _Kg_=Base_Int32[57],
     _Kh_=Base_Int32[56],
     _Ki_=Base_Int32[55],
     _Kj_=Base_Int32[54],
     _Kk_=Base_Int32[53],
     _Kl_=Base_Int32[52],
     _Km_=Base_Int32[51],
     _Kn_=Base_Int32[50],
     _Ko_=Base_Int32[49],
     _Kp_=Base_Int32[48],
     _Kq_=Base_Int32[47],
     _Kr_=Base_Int32[46],
     _Ks_=Base_Int32[45],
     _Kt_=Base_Int32[44],
     _Ku_=Base_Int32[43],
     _Kv_=Base_Int32[42],
     _Kw_=Base_Int32[41],
     _Kx_=Base_Int32[39],
     _Ky_=Base_Int32[38],
     _Kz_=Base_Int32[37],
     _KA_=Base_Int32[36],
     _KB_=Base_Int32[35],
     _KC_=Base_Int32[34],
     _KD_=Base_Int32[33],
     _KE_=Base_Int32[32],
     _KF_=Base_Int32[31],
     _KG_=Base_Int32[30],
     _KH_=Base_Int32[29],
     _KI_=Base_Int32[28],
     _KJ_=Base_Int32[27],
     _KK_=Base_Int32[26],
     _KL_=Base_Int32[25],
     _KM_=Base_Int32[24],
     _KN_=Base_Int32[23],
     _KO_=Base_Int32[22],
     _KP_=Base_Int32[21],
     _KQ_=Base_Int32[20],
     _KR_=Base_Int32[19],
     _KT_=Base_Int32[17],
     _KU_=Base_Int32[16],
     _KV_=Base_Int32[15],
     _KW_=Base_Int32[14],
     _KX_=Base_Int32[13],
     _KY_=Base_Int32[12],
     _KZ_=Base_Int32[11],
     _K0_=Base_Int32[10],
     _K1_=Base_Int32[9],
     _K9_=Base_Int32[1],
     include$74=
      Make_int
       ([0,
         of_float$5,
         to_float$4,
         of_int_exn$3,
         to_int_exn$4,
         hash_fold_t$29,
         hash$22,
         t_of_sexp$50,
         sexp_of_t$62,
         of_string$11,
         to_string$12,
         Base_Int32[11],
         Base_Int32[12],
         Base_Int32[13],
         Base_Int32[14],
         Base_Int32[15],
         Base_Int32[16],
         equal$29,
         compare$50,
         min$11,
         max$11,
         ascending$10,
         descending$10,
         between$10,
         clamp_exn$10,
         clamp$10,
         comparator$20,
         validate_lbound$10,
         validate_ubound$10,
         validate_bound$10,
         pp$6,
         validate_positive$4,
         validate_non_negative$4,
         validate_negative$4,
         validate_non_positive$4,
         is_positive$4,
         is_non_negative$4,
         is_negative$4,
         is_non_positive$4,
         sign$5,
         Hex$5,
         to_string_hum$8,
         zero$6,
         one$5,
         minus_one$4,
         Base_Int32[45],
         Base_Int32[46],
         Base_Int32[47],
         Base_Int32[48],
         neg$5,
         Base_Int32[50],
         Base_Int32[51],
         Base_Int32[52],
         Base_Int32[53],
         rem$3,
         Base_Int32[55],
         land$3,
         lor$3,
         lxor$3,
         lnot$4,
         lsl$3,
         asr$3,
         succ$4,
         pred$4,
         round$4,
         round_towards_zero$4,
         round_down$4,
         round_up$4,
         round_nearest$4,
         abs$6,
         pow$3,
         bit_and$3,
         bit_or$3,
         bit_xor$3,
         bit_not$3,
         popcount$3,
         shift_left$4,
         shift_right$4,
         decr$4,
         incr$4,
         of_int32_exn$3,
         to_int32_exn$3,
         of_int64_exn$3,
         to_int64$4,
         of_nativeint_exn$3,
         to_nativeint_exn$3,
         of_float_unchecked$3,
         num_bits$4,
         max_value$4,
         min_value$4,
         lsr$3,
         shift_right_logical$3,
         O$4,
         splittable_random$3]),
     _K__=include$74[1],
     _K$_=include$74[2],
     _La_=include$74[3],
     _Lb_=include$74[4],
     _Lc_=include$74[5],
     _Ld_=include$74[6],
     _Le_=include$74[7];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$211);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Int32=
      [0,
       _K9_,
       _K8_,
       _K7_,
       _K6_,
       _KF_,
       _KE_,
       _KD_,
       _KC_,
       _KB_,
       _KA_,
       _Kz_,
       _Ky_,
       _Kx_,
       _Kw_,
       _Kv_,
       _Ku_,
       _Kt_,
       _Ks_,
       _Kr_,
       _Kq_,
       _Kp_,
       _Ko_,
       _Kn_,
       _Km_,
       _Kl_,
       _Kk_,
       _Kj_,
       _Ki_,
       _Kh_,
       _Kg_,
       _Kf_,
       _Ke_,
       _Kd_,
       _Kc_,
       _Kb_,
       _Ka_,
       _J$_,
       _J__,
       _J9_,
       _J8_,
       _J7_,
       _J6_,
       _J5_,
       _J4_,
       _J3_,
       _J2_,
       _J1_,
       _J0_,
       _JZ_,
       _JY_,
       _JX_,
       _JW_,
       _JV_,
       _JU_,
       _JT_,
       _JS_,
       _JR_,
       _JQ_,
       _JP_,
       _JO_,
       _JN_,
       _JM_,
       _JL_,
       _JK_,
       _JJ_,
       of_int$4,
       to_int$3,
       of_int32$2,
       to_int32$2,
       of_nativeint$2,
       to_nativeint$2,
       of_int64$3,
       of_int_trunc,
       to_int_trunc$1,
       of_nativeint_trunc$1,
       of_int64_trunc$1,
       bits_of_float$0,
       float_of_bits$0,
       typerep_of_t$16,
       typename_of_t$15,
       [0,
        bin_t$54,
        bin_read_t$91,
        bin_read_t$92,
        bin_reader_t$54,
        bin_size_t$45,
        bin_write_t$45,
        bin_writer_t$54,
        bin_shape_t$59,
        t_of_sexp$49,
        sexp_of_t$61,
        compare$49,
        hash_fold_t$28,
        hash$21,
        typerep_of_t$17,
        typename_of_t$16,
        of_string$10,
        to_string$11,
        to_string_hum$7],
       bin_t$53,
       bin_read_t$91,
       bin_read_t$92,
       bin_reader_t$53,
       bin_size_t$45,
       bin_write_t$45,
       bin_writer_t$53,
       bin_shape_t$58,
       _K3_,
       _K2_,
       _K1_,
       _K0_,
       _KG_,
       _KZ_,
       _KY_,
       _KX_,
       _KW_,
       _KV_,
       _KU_,
       _KT_,
       _KS_,
       _KR_,
       _KQ_,
       _KP_,
       _KO_,
       _KN_,
       _KM_,
       _KL_,
       _KJ_,
       _KI_,
       _KH_,
       Replace_polymorphic_compare$8,
       _KK_,
       Map$12,
       Set$12,
       _K5_,
       _K4_,
       hashable$5,
       Table$6,
       Hash_set$6,
       Hash_queue$6,
       _K__,
       _K$_,
       _La_,
       _Lb_,
       _Lc_,
       _Ld_,
       _Le_];
    caml_register_global(7447,Core_kernel_Int32,"Core_kernel__Int32");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$212);
    caml_call1(Expect_test_collector[4][1],cst_src_lazy_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$213,cst$77);
    var
     _Lf_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$43),
     _Lg_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_lazy_ml_6_16),
     _Lh_=caml_call1(_cV_,caml_call2(Bin_prot_Shape[15],_Lg_,_Lf_)),
     _Li_=[0,caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$44),0],
     _Lj_=
      [0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$127),_Li_,_Lh_],0],
     _Lk_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_lazy_ml_6_4),
     group$62=caml_call2(Bin_prot_Shape[6],_Lk_,_Lj_);
    function bin_shape_t$60(a)
     {var _bKn_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$128);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$62,_bKn_),[0,a,0])}
    function bin_size_t$46(size_of_a,v){return caml_call2(_bi_,size_of_a,v)}
    function bin_write_t$46(write_a,buf,pos,v)
     {return caml_call3(caml_call1(_cX_,write_a),buf,pos,v)}
    function bin_writer_t$55(bin_writer_a)
     {function _bKj_(v)
       {var _bKk_=bin_writer_a[2];
        return function(_bKl_,_bKm_)
         {return bin_write_t$46(_bKk_,v,_bKl_,_bKm_)}}
      return [0,function(v){return bin_size_t$46(bin_writer_a[1],v)},_bKj_]}
    function bin_read_t$93(of_a,buf,pos_ref,vint)
     {return caml_call3(caml_call1(_c0_,of_a),buf,pos_ref,vint)}
    function bin_read_t$94(of_a,buf,pos_ref)
     {return caml_call2(caml_call1(_cZ_,of_a),buf,pos_ref)}
    function bin_reader_t$55(bin_reader_a)
     {function _bKi_(buf,pos_ref,vtag)
       {return bin_read_t$93(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$94(bin_reader_a[1],buf,pos_ref)},
              _bKi_]}
    function bin_t$55(bin_a)
     {var _bKg_=bin_reader_t$55(bin_a[3]),_bKh_=bin_writer_t$55(bin_a[2]);
      return [0,bin_shape_t$60(bin_a[1]),_bKh_,_bKg_]}
    var
     t_of_sexp$51=Sexplib_Std[25],
     sexp_of_t$63=Sexplib_Std[24],
     Typename_of_t$17=caml_call1(Typerep_lib_Make_typename[2],[0,name$26]),
     typename_of_t$17=Typename_of_t$17[2];
    function typerep_of_t$18(of_a)
     {var name_of_t=caml_call1(Typename_of_t$17[1],of_a);
      return [9,
              [0,
               name_of_t,
               [0,
                [246,
                 function(_bKf_){return caml_call1(typerep_of_lazy_t,of_a)}]]]]}
    var
     map$28=include$75[10],
     compare$51=include$75[1],
     _Ll_=include$75[1],
     _Lm_=include$75[2],
     _Ln_=include$75[3],
     _Lo_=include$75[4],
     _Lp_=include$75[5],
     _Lq_=include$75[6],
     _Lr_=include$75[7],
     _Ls_=include$75[8],
     _Lt_=include$75[9],
     _Lu_=include$75[10],
     _Lv_=include$75[11],
     _Lw_=include$75[12],
     _Lx_=include$75[13],
     _Ly_=include$75[14],
     _Lz_=include$75[15],
     _LA_=include$75[16],
     _LD_=include$75[19],
     _LB_=include$75[17],
     _LC_=include$75[18],
     _LE_=include$75[20],
     _LF_=include$75[21],
     _LG_=include$75[22];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$214);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     include$76=
      [0,
       bin_t$55,
       bin_read_t$94,
       bin_read_t$93,
       bin_reader_t$55,
       bin_size_t$46,
       bin_write_t$46,
       bin_writer_t$55,
       bin_shape_t$60,
       typerep_of_t$18,
       typename_of_t$17,
       _Ll_,
       _Lm_,
       _Ln_,
       _Lo_,
       _Lp_,
       _Lq_,
       _Lr_,
       _Ls_,
       _Lt_,
       _Lu_,
       _Lv_,
       _Lw_,
       _Lx_,
       _Ly_,
       _Lz_,
       _LA_,
       _LB_,
       _LC_,
       _LD_,
       _LE_,
       _LF_,
       _LG_,
       [0,
        [0,
         bin_t$55,
         bin_read_t$94,
         bin_read_t$93,
         bin_reader_t$55,
         bin_size_t$46,
         bin_write_t$46,
         bin_writer_t$55,
         bin_shape_t$60,
         compare$51,
         t_of_sexp$51,
         sexp_of_t$63,
         map$28]]];
    caml_register_global(7450,include$76,"Core_kernel__Lazy");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$215);
    caml_call1(Expect_test_collector[4][1],cst_src_nativeint_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$216,cst$78);
    var
     Typename_of_t$18=caml_call1(Typerep_lib_Make_typename[1],[0,name$27]),
     typename_of_t$18=Typename_of_t$18[2],
     name_of_t$13=Typename_of_t$18[1],
     typerep_of_t$19=[9,[0,name_of_t$13,[0,typerep_of_nativeint]]],
     _LH_=[0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$129),0,_cH_],0],
     _LI_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_nativeint_ml_6_4),
     group$63=caml_call2(Bin_prot_Shape[6],_LI_,_LH_),
     _LJ_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$130),
     bin_shape_t$61=caml_call1(caml_call2(Bin_prot_Shape[14],group$63,_LJ_),0),
     bin_writer_t$56=[0,_bf_,_cJ_],
     bin_reader_t$56=[0,_cL_,_cM_],
     bin_t$56=[0,bin_shape_t$61,bin_writer_t$56,bin_reader_t$56],
     include$167=
      _v$_
       ([0,
         Base_Nativeint[5],
         Base_Nativeint[6],
         Base_Nativeint[7],
         Base_Nativeint[8],
         Base_Nativeint[9],
         Base_Nativeint[10],
         Base_Nativeint[11],
         Base_Nativeint[12],
         Base_Nativeint[13],
         Base_Nativeint[14],
         Base_Nativeint[15],
         Base_Nativeint[16],
         Base_Nativeint[17],
         Base_Nativeint[18],
         Base_Nativeint[19],
         Base_Nativeint[20],
         Base_Nativeint[21],
         Base_Nativeint[22],
         Base_Nativeint[23],
         Base_Nativeint[24],
         Base_Nativeint[25],
         Base_Nativeint[26],
         Base_Nativeint[27],
         Base_Nativeint[28],
         Base_Nativeint[29],
         Base_Nativeint[30]],
        [0,
         _bf_,
         _cJ_,
         _cL_,
         _cM_,
         bin_shape_t$61,
         bin_writer_t$56,
         bin_reader_t$56,
         bin_t$56]),
     bin_t$57=include$167[1],
     bin_read_t$95=include$167[2],
     bin_read_t$96=include$167[3],
     bin_reader_t$57=include$167[4],
     bin_size_t$47=include$167[5],
     bin_write_t$47=include$167[6],
     bin_writer_t$57=include$167[7],
     bin_shape_t$62=include$167[8],
     Replace_polymorphic_compare$9=include$167[32],
     Map$13=include$167[34],
     Set$13=include$167[35],
     hashable$6=include$167[38],
     Table$7=include$167[39],
     Hash_set$7=include$167[40],
     Hash_queue$7=include$167[41],
     Typename_of_t$19=caml_call1(Typerep_lib_Make_typename[1],[0,name$28]),
     typename_of_t$19=Typename_of_t$19[2],
     name_of_t$14=Typename_of_t$19[1],
     typerep_of_t$20=[9,[0,name_of_t$14,[0,typerep_of_t$19]]],
     _LK_=
      [0,
       [0,
        caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$131),
        0,
        bin_shape_t$62],
       0],
     _LL_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_nativeint_ml_10_2),
     group$64=caml_call2(Bin_prot_Shape[6],_LL_,_LK_),
     _LM_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$132),
     bin_shape_t$63=caml_call1(caml_call2(Bin_prot_Shape[14],group$64,_LM_),0),
     bin_writer_t$58=[0,bin_size_t$47,bin_write_t$47],
     bin_reader_t$58=[0,bin_read_t$95,bin_read_t$96],
     bin_t$58=[0,bin_shape_t$63,bin_writer_t$58,bin_reader_t$58],
     include$77=Base_Nativeint[40],
     t_of_sexp$52=include$77[1],
     sexp_of_t$64=include$77[2],
     compare$52=include$77[3],
     hash_fold_t$30=include$77[4],
     hash$23=include$77[5],
     of_string$12=include$77[6],
     to_string$13=include$77[7],
     to_string_hum$9=include$77[8],
     of_int64_trunc$2=Base_Nativeint[102],
     to_int32_trunc$2=Base_Nativeint[101],
     to_int_trunc$2=Base_Nativeint[100],
     of_int64$4=Base_Nativeint[99],
     to_nativeint$3=Base_Nativeint[98],
     of_nativeint$3=Base_Nativeint[97],
     to_int32$3=Base_Nativeint[96],
     of_int32$3=Base_Nativeint[95],
     to_int$4=Base_Nativeint[94],
     of_int$5=Base_Nativeint[93],
     _MW_=Base_Nativeint[18],
     _M6_=Base_Nativeint[8],
     _M7_=Base_Nativeint[7],
     _M8_=Base_Nativeint[6],
     _M9_=Base_Nativeint[5],
     of_float$6=Base_Nativeint[1],
     to_float$5=Base_Nativeint[2],
     of_int_exn$4=Base_Nativeint[3],
     to_int_exn$5=Base_Nativeint[4],
     hash_fold_t$31=Base_Nativeint[5],
     hash$24=Base_Nativeint[6],
     t_of_sexp$53=Base_Nativeint[7],
     sexp_of_t$65=Base_Nativeint[8],
     of_string$13=Base_Nativeint[9],
     to_string$14=Base_Nativeint[10],
     equal$30=Base_Nativeint[17],
     compare$53=Base_Nativeint[18],
     min$12=Base_Nativeint[19],
     max$12=Base_Nativeint[20],
     ascending$11=Base_Nativeint[21],
     descending$11=Base_Nativeint[22],
     between$11=Base_Nativeint[23],
     clamp_exn$11=Base_Nativeint[24],
     clamp$11=Base_Nativeint[25],
     comparator$21=Base_Nativeint[26],
     validate_lbound$11=Base_Nativeint[27],
     validate_ubound$11=Base_Nativeint[28],
     validate_bound$11=Base_Nativeint[29],
     pp$7=Base_Nativeint[30],
     validate_positive$5=Base_Nativeint[31],
     validate_non_negative$5=Base_Nativeint[32],
     validate_negative$5=Base_Nativeint[33],
     validate_non_positive$5=Base_Nativeint[34],
     is_positive$5=Base_Nativeint[35],
     is_non_negative$5=Base_Nativeint[36],
     is_negative$5=Base_Nativeint[37],
     is_non_positive$5=Base_Nativeint[38],
     sign$6=Base_Nativeint[39],
     Hex$6=Base_Nativeint[40],
     to_string_hum$10=Base_Nativeint[41],
     zero$7=Base_Nativeint[42],
     one$6=Base_Nativeint[43],
     minus_one$5=Base_Nativeint[44],
     neg$6=Base_Nativeint[49],
     rem$4=Base_Nativeint[54],
     land$4=Base_Nativeint[56],
     lor$4=Base_Nativeint[57],
     lxor$4=Base_Nativeint[58],
     lnot$5=Base_Nativeint[59],
     lsl$4=Base_Nativeint[60],
     asr$4=Base_Nativeint[61],
     succ$5=Base_Nativeint[62],
     pred$5=Base_Nativeint[63],
     round$5=Base_Nativeint[64],
     round_towards_zero$5=Base_Nativeint[65],
     round_down$5=Base_Nativeint[66],
     round_up$5=Base_Nativeint[67],
     round_nearest$5=Base_Nativeint[68],
     abs$7=Base_Nativeint[69],
     pow$4=Base_Nativeint[70],
     bit_and$4=Base_Nativeint[71],
     bit_or$4=Base_Nativeint[72],
     bit_xor$4=Base_Nativeint[73],
     bit_not$4=Base_Nativeint[74],
     popcount$4=Base_Nativeint[75],
     shift_left$5=Base_Nativeint[76],
     shift_right$5=Base_Nativeint[77],
     decr$5=Base_Nativeint[78],
     incr$5=Base_Nativeint[79],
     of_int32_exn$4=Base_Nativeint[80],
     to_int32_exn$4=Base_Nativeint[81],
     of_int64_exn$4=Base_Nativeint[82],
     to_int64$5=Base_Nativeint[83],
     of_nativeint_exn$4=Base_Nativeint[84],
     to_nativeint_exn$4=Base_Nativeint[85],
     of_float_unchecked$4=Base_Nativeint[86],
     num_bits$5=Base_Nativeint[87],
     max_value$5=Base_Nativeint[88],
     min_value$5=Base_Nativeint[89],
     lsr$4=Base_Nativeint[90],
     shift_right_logical$4=Base_Nativeint[91],
     O$5=Base_Nativeint[92],
     splittable_random$4=Splittable_random[7],
     _LN_=Base_Nativeint[92],
     _LO_=Base_Nativeint[91],
     _LP_=Base_Nativeint[90],
     _LQ_=Base_Nativeint[89],
     _LR_=Base_Nativeint[88],
     _LS_=Base_Nativeint[87],
     _LT_=Base_Nativeint[86],
     _LU_=Base_Nativeint[85],
     _LV_=Base_Nativeint[84],
     _LW_=Base_Nativeint[83],
     _LX_=Base_Nativeint[82],
     _LY_=Base_Nativeint[81],
     _LZ_=Base_Nativeint[80],
     _L0_=Base_Nativeint[79],
     _L1_=Base_Nativeint[78],
     _L2_=Base_Nativeint[77],
     _L3_=Base_Nativeint[76],
     _L4_=Base_Nativeint[75],
     _L5_=Base_Nativeint[74],
     _L6_=Base_Nativeint[73],
     _L7_=Base_Nativeint[72],
     _L8_=Base_Nativeint[71],
     _L9_=Base_Nativeint[70],
     _L__=Base_Nativeint[69],
     _L$_=Base_Nativeint[68],
     _Ma_=Base_Nativeint[67],
     _Mb_=Base_Nativeint[66],
     _Mc_=Base_Nativeint[65],
     _Md_=Base_Nativeint[64],
     _Me_=Base_Nativeint[63],
     _Mf_=Base_Nativeint[62],
     _Mg_=Base_Nativeint[61],
     _Mh_=Base_Nativeint[60],
     _Mi_=Base_Nativeint[59],
     _Mj_=Base_Nativeint[58],
     _Mk_=Base_Nativeint[57],
     _Ml_=Base_Nativeint[56],
     _Mm_=Base_Nativeint[55],
     _Mn_=Base_Nativeint[54],
     _Mo_=Base_Nativeint[53],
     _Mp_=Base_Nativeint[52],
     _Mq_=Base_Nativeint[51],
     _Mr_=Base_Nativeint[50],
     _Ms_=Base_Nativeint[49],
     _Mt_=Base_Nativeint[48],
     _Mu_=Base_Nativeint[47],
     _Mv_=Base_Nativeint[46],
     _Mw_=Base_Nativeint[45],
     _Mx_=Base_Nativeint[44],
     _My_=Base_Nativeint[43],
     _Mz_=Base_Nativeint[42],
     _MA_=Base_Nativeint[41],
     _MB_=Base_Nativeint[39],
     _MC_=Base_Nativeint[38],
     _MD_=Base_Nativeint[37],
     _ME_=Base_Nativeint[36],
     _MF_=Base_Nativeint[35],
     _MG_=Base_Nativeint[34],
     _MH_=Base_Nativeint[33],
     _MI_=Base_Nativeint[32],
     _MJ_=Base_Nativeint[31],
     _MK_=Base_Nativeint[30],
     _ML_=Base_Nativeint[29],
     _MM_=Base_Nativeint[28],
     _MN_=Base_Nativeint[27],
     _MO_=Base_Nativeint[26],
     _MP_=Base_Nativeint[25],
     _MQ_=Base_Nativeint[24],
     _MR_=Base_Nativeint[23],
     _MS_=Base_Nativeint[22],
     _MT_=Base_Nativeint[21],
     _MU_=Base_Nativeint[20],
     _MV_=Base_Nativeint[19],
     _MX_=Base_Nativeint[17],
     _MY_=Base_Nativeint[16],
     _MZ_=Base_Nativeint[15],
     _M0_=Base_Nativeint[14],
     _M1_=Base_Nativeint[13],
     _M2_=Base_Nativeint[12],
     _M3_=Base_Nativeint[11],
     _M4_=Base_Nativeint[10],
     _M5_=Base_Nativeint[9],
     _M__=Base_Nativeint[4],
     _M$_=Base_Nativeint[3],
     _Na_=Base_Nativeint[2],
     _Nb_=Base_Nativeint[1],
     include$78=
      Make_int
       ([0,
         of_float$6,
         to_float$5,
         of_int_exn$4,
         to_int_exn$5,
         hash_fold_t$31,
         hash$24,
         t_of_sexp$53,
         sexp_of_t$65,
         of_string$13,
         to_string$14,
         Base_Nativeint[11],
         Base_Nativeint[12],
         Base_Nativeint[13],
         Base_Nativeint[14],
         Base_Nativeint[15],
         Base_Nativeint[16],
         equal$30,
         compare$53,
         min$12,
         max$12,
         ascending$11,
         descending$11,
         between$11,
         clamp_exn$11,
         clamp$11,
         comparator$21,
         validate_lbound$11,
         validate_ubound$11,
         validate_bound$11,
         pp$7,
         validate_positive$5,
         validate_non_negative$5,
         validate_negative$5,
         validate_non_positive$5,
         is_positive$5,
         is_non_negative$5,
         is_negative$5,
         is_non_positive$5,
         sign$6,
         Hex$6,
         to_string_hum$10,
         zero$7,
         one$6,
         minus_one$5,
         Base_Nativeint[45],
         Base_Nativeint[46],
         Base_Nativeint[47],
         Base_Nativeint[48],
         neg$6,
         Base_Nativeint[50],
         Base_Nativeint[51],
         Base_Nativeint[52],
         Base_Nativeint[53],
         rem$4,
         Base_Nativeint[55],
         land$4,
         lor$4,
         lxor$4,
         lnot$5,
         lsl$4,
         asr$4,
         succ$5,
         pred$5,
         round$5,
         round_towards_zero$5,
         round_down$5,
         round_up$5,
         round_nearest$5,
         abs$7,
         pow$4,
         bit_and$4,
         bit_or$4,
         bit_xor$4,
         bit_not$4,
         popcount$4,
         shift_left$5,
         shift_right$5,
         decr$5,
         incr$5,
         of_int32_exn$4,
         to_int32_exn$4,
         of_int64_exn$4,
         to_int64$5,
         of_nativeint_exn$4,
         to_nativeint_exn$4,
         of_float_unchecked$4,
         num_bits$5,
         max_value$5,
         min_value$5,
         lsr$4,
         shift_right_logical$4,
         O$5,
         splittable_random$4]),
     _Nc_=include$78[1],
     _Nd_=include$78[2],
     _Ne_=include$78[3],
     _Nf_=include$78[4],
     _Ng_=include$78[5],
     _Nh_=include$78[6],
     _Ni_=include$78[7];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$217);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Nativeint=
      [0,
       _Nb_,
       _Na_,
       _M$_,
       _M__,
       _MJ_,
       _MI_,
       _MH_,
       _MG_,
       _MF_,
       _ME_,
       _MD_,
       _MC_,
       _MB_,
       _MA_,
       _Mz_,
       _My_,
       _Mx_,
       _Mw_,
       _Mv_,
       _Mu_,
       _Mt_,
       _Ms_,
       _Mr_,
       _Mq_,
       _Mp_,
       _Mo_,
       _Mn_,
       _Mm_,
       _Ml_,
       _Mk_,
       _Mj_,
       _Mi_,
       _Mh_,
       _Mg_,
       _Mf_,
       _Me_,
       _Md_,
       _Mc_,
       _Mb_,
       _Ma_,
       _L$_,
       _L__,
       _L9_,
       _L8_,
       _L7_,
       _L6_,
       _L5_,
       _L4_,
       _L3_,
       _L2_,
       _L1_,
       _L0_,
       _LZ_,
       _LY_,
       _LX_,
       _LW_,
       _LV_,
       _LU_,
       _LT_,
       _LS_,
       _LR_,
       _LQ_,
       _LP_,
       _LO_,
       _LN_,
       of_int$5,
       to_int$4,
       of_int32$3,
       to_int32$3,
       of_nativeint$3,
       to_nativeint$3,
       of_int64$4,
       to_int_trunc$2,
       to_int32_trunc$2,
       of_int64_trunc$2,
       typerep_of_t$19,
       typename_of_t$18,
       [0,
        bin_t$58,
        bin_read_t$95,
        bin_read_t$96,
        bin_reader_t$58,
        bin_size_t$47,
        bin_write_t$47,
        bin_writer_t$58,
        bin_shape_t$63,
        t_of_sexp$52,
        sexp_of_t$64,
        compare$52,
        hash_fold_t$30,
        hash$23,
        typerep_of_t$20,
        typename_of_t$19,
        of_string$12,
        to_string$13,
        to_string_hum$9],
       bin_t$57,
       bin_read_t$95,
       bin_read_t$96,
       bin_reader_t$57,
       bin_size_t$47,
       bin_write_t$47,
       bin_writer_t$57,
       bin_shape_t$62,
       _M7_,
       _M6_,
       _M5_,
       _M4_,
       _MK_,
       _M3_,
       _M2_,
       _M1_,
       _M0_,
       _MZ_,
       _MY_,
       _MX_,
       _MW_,
       _MV_,
       _MU_,
       _MT_,
       _MS_,
       _MR_,
       _MQ_,
       _MP_,
       _MN_,
       _MM_,
       _ML_,
       Replace_polymorphic_compare$9,
       _MO_,
       Map$13,
       Set$13,
       _M9_,
       _M8_,
       hashable$6,
       Table$7,
       Hash_set$7,
       Hash_queue$7,
       _Nc_,
       _Nd_,
       _Ne_,
       _Nf_,
       _Ng_,
       _Nh_,
       _Ni_];
    caml_register_global(7452,Core_kernel_Nativeint,"Core_kernel__Nativeint");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$218);
    caml_call1(Expect_test_collector[4][1],cst_src_nothing_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$219,cst$79);
    function never_returns(param){throw [0,Match_failure,_Nj_]}
    var
     _Nk_=caml_call1(Bin_prot_Shape[9],0),
     _Nl_=[0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$133),0,_Nk_],0],
     _Nm_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_nothing_ml_11_6),
     group$65=caml_call2(Bin_prot_Shape[6],_Nm_,_Nl_),
     _Nn_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$134),
     bin_shape_t$64=caml_call1(caml_call2(Bin_prot_Shape[14],group$65,_Nn_),0),
     tp_loc$21=caml_call2(_aS_,_No_[1],cst_Stable_V1_t),
     all$3=0;
    function hash_fold_t$32(param,t){return never_returns(t)}
    function compare$54(a,param){return never_returns(a)}
    function bin_write_t$48(buf,param,t){return never_returns(t)}
    var bin_writer_t$59=[0,never_returns,bin_write_t$48];
    function bin_read_t$97(buf,pos_ref,param)
     {return caml_call2(Bin_prot_Common[19],tp_loc$21,pos_ref[1])}
    function bin_read_t$98(buf,pos_ref)
     {return caml_call2(Bin_prot_Common[18],[5,tp_loc$21],pos_ref[1])}
    var
     bin_reader_t$59=[0,bin_read_t$98,bin_read_t$97],
     bin_t$59=[0,bin_shape_t$64,bin_writer_t$59,bin_reader_t$59];
    function t_of_sexp$54(sexp)
     {return caml_call2(Sexplib_Conv_error[26],tp_loc$21,sexp)}
    function to_string$15(param){throw [0,Match_failure,_Np_]}
    function of_string$14(param)
     {return caml_call1(_aV_,cst_Nothing_of_string_not_supported)}
    var
     include$79=
      _wd_
       ([0,
         bin_t$59,
         bin_read_t$98,
         bin_read_t$97,
         bin_reader_t$59,
         never_returns,
         bin_write_t$48,
         bin_writer_t$59,
         bin_shape_t$64,
         compare$54,
         hash_fold_t$32,
         never_returns,
         t_of_sexp$54,
         never_returns,
         of_string$14,
         to_string$15,
         module_name$7]),
     _Nz_=include$79[10],
     _Nq_=include$79[1],
     _Nr_=include$79[2],
     _Ns_=include$79[3],
     _Nt_=include$79[4],
     _Nu_=include$79[5],
     _Nv_=include$79[6],
     _Nw_=include$79[7],
     _Nx_=include$79[8],
     _Ny_=include$79[9],
     _NA_=include$79[11],
     _NB_=include$79[12],
     _NC_=include$79[13],
     _ND_=include$79[14],
     _NE_=include$79[15],
     _NF_=include$79[16],
     _NG_=include$79[17],
     _NH_=include$79[18],
     _NI_=include$79[19],
     _NJ_=include$79[20],
     _NK_=include$79[21],
     _NL_=include$79[22],
     _NM_=include$79[23],
     _NN_=include$79[24],
     _NO_=include$79[25],
     _NP_=include$79[26],
     _NQ_=include$79[27],
     _NR_=include$79[28],
     _NS_=include$79[29],
     _NT_=include$79[30],
     _NU_=include$79[31],
     _NV_=include$79[32],
     _NW_=include$79[33],
     _NX_=include$79[34],
     _NY_=include$79[35],
     _NZ_=include$79[36],
     _N0_=include$79[37],
     _N1_=include$79[38],
     _N2_=include$79[39],
     _N3_=include$79[40],
     _N4_=include$79[41];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$220);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Nothing=
      [0,
       all$3,
       never_returns,
       _Nq_,
       _Nr_,
       _Ns_,
       _Nt_,
       _Nu_,
       _Nv_,
       _Nw_,
       _Nx_,
       _Ny_,
       _Nz_,
       _NA_,
       _NB_,
       _NC_,
       _ND_,
       _NE_,
       _NF_,
       _NG_,
       _NH_,
       _NI_,
       _NJ_,
       _NK_,
       _NL_,
       _NM_,
       _NN_,
       _NO_,
       _NP_,
       _NQ_,
       _NR_,
       _NS_,
       _NT_,
       _NU_,
       _NV_,
       _NW_,
       _NX_,
       _NY_,
       _NZ_,
       _N0_,
       _N1_,
       _N2_,
       _N3_,
       _N4_,
       [0,
        [0,
         t_of_sexp$54,
         never_returns,
         bin_t$59,
         bin_read_t$98,
         bin_read_t$97,
         bin_reader_t$59,
         never_returns,
         bin_write_t$48,
         bin_writer_t$59,
         bin_shape_t$64,
         compare$54,
         hash_fold_t$32,
         never_returns]]];
    caml_register_global(7454,Core_kernel_Nothing,"Core_kernel__Nothing");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$221);
    caml_call1(Expect_test_collector[4][1],cst_src_never_returns_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$222,cst$80);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$223);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Never_returns=[0,_Nz_,never_returns];
    caml_register_global
     (7455,Core_kernel_Never_returns,"Core_kernel__Never_returns");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$224);
    caml_call1(Expect_test_collector[4][1],cst_src_ordering_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$225,cst$81);
    var
     _N6_=caml_call1(Bin_prot_Shape[9],_N5_),
     _N7_=[0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$135),0,_N6_],0],
     _N8_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_ordering_ml_3_0),
     group$66=caml_call2(Bin_prot_Shape[6],_N8_,_N7_),
     _N9_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$136),
     bin_shape_t$65=caml_call1(caml_call2(Bin_prot_Shape[14],group$66,_N9_),0);
    function bin_size_t$48(param){return 1}
    function bin_write_t$49(buf,pos,param)
     {switch(param)
       {case 0:return caml_call3(Bin_prot_Write[30],buf,pos,0);
        case 1:return caml_call3(Bin_prot_Write[30],buf,pos,1);
        default:return caml_call3(Bin_prot_Write[30],buf,pos,2)}}
    var bin_writer_t$60=[0,bin_size_t$48,bin_write_t$49];
    function bin_read_t$99(buf,pos_ref,vint)
     {return caml_call2(Bin_prot_Common[19],cst_src_ordering_ml_t,pos_ref[1])}
    function bin_read_t$100(buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[29],buf,pos_ref);
      if(2 < match >>> 0)
       return caml_call2(Bin_prot_Common[18],_N__,pos_ref[1]);
      switch(match){case 0:return 0;case 1:return 1;default:return 2}}
    var
     bin_reader_t$60=[0,bin_read_t$100,bin_read_t$99],
     bin_t$60=[0,bin_shape_t$65,bin_writer_t$60,bin_reader_t$60],
     _N$_=include$80[1],
     _Oa_=include$80[2],
     _Ob_=include$80[3],
     _Oc_=include$80[4],
     _Od_=include$80[5],
     _Oe_=include$80[6],
     _Of_=include$80[7],
     _Og_=include$80[8],
     _Oh_=include$80[9],
     _Oi_=include$80[10];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$226);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Ordering=
      [0,
       bin_t$60,
       bin_read_t$100,
       bin_read_t$99,
       bin_reader_t$60,
       bin_size_t$48,
       bin_write_t$49,
       bin_writer_t$60,
       bin_shape_t$65,
       _N$_,
       _Oa_,
       _Ob_,
       _Oc_,
       _Od_,
       _Oe_,
       _Of_,
       _Og_,
       _Oh_,
       _Oi_];
    caml_register_global(7457,Core_kernel_Ordering,"Core_kernel__Ordering");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$227);
    caml_call1(Expect_test_collector[4][1],cst_src_ref_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$228,cst$82);
    var
     _Oj_=include$81[1],
     _Ok_=include$81[2],
     _Ol_=include$81[3],
     _Om_=include$81[4],
     _On_=include$81[5],
     _Oo_=include$81[6],
     _Op_=include$81[7],
     _Oq_=include$81[8],
     _Or_=include$81[9],
     _Os_=include$81[10],
     _Ot_=include$81[11],
     _Ou_=include$81[12],
     _Ov_=include$81[13],
     _Ow_=include$81[14],
     _Ox_=include$81[15],
     _Oy_=include$81[16],
     _Oz_=include$81[17],
     _OA_=include$81[18],
     _OB_=include$81[19],
     _OC_=include$81[20],
     _OD_=include$81[21],
     _OE_=include$81[22],
     _OF_=include$81[23],
     _OG_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$45),
     _OH_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_ref_ml_7_16),
     _OI_=caml_call1(_cO_,caml_call2(Bin_prot_Shape[15],_OH_,_OG_)),
     _OJ_=[0,caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$46),0],
     _OK_=
      [0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$137),_OJ_,_OI_],0],
     _OL_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_ref_ml_7_4),
     group$67=caml_call2(Bin_prot_Shape[6],_OL_,_OK_);
    function bin_shape_t$66(a)
     {var _bKe_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$138);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$67,_bKe_),[0,a,0])}
    function bin_size_t$49(size_of_a,v){return caml_call2(_bh_,size_of_a,v)}
    function bin_write_t$50(write_a,buf,pos,v)
     {return caml_call3(caml_call1(_cQ_,write_a),buf,pos,v)}
    function bin_writer_t$61(bin_writer_a)
     {function _bKa_(v)
       {var _bKb_=bin_writer_a[2];
        return function(_bKc_,_bKd_)
         {return bin_write_t$50(_bKb_,v,_bKc_,_bKd_)}}
      return [0,function(v){return bin_size_t$49(bin_writer_a[1],v)},_bKa_]}
    function bin_read_t$101(of_a,buf,pos_ref,vint)
     {return caml_call3(caml_call1(_cT_,of_a),buf,pos_ref,vint)}
    function bin_read_t$102(of_a,buf,pos_ref)
     {return caml_call2(caml_call1(_cS_,of_a),buf,pos_ref)}
    function bin_reader_t$61(bin_reader_a)
     {function _bJ$_(buf,pos_ref,vtag)
       {return bin_read_t$101(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$102(bin_reader_a[1],buf,pos_ref)},
              _bJ$_]}
    function bin_t$61(bin_a)
     {var _bJ9_=bin_reader_t$61(bin_a[3]),_bJ__=bin_writer_t$61(bin_a[2]);
      return [0,bin_shape_t$66(bin_a[1]),_bJ__,_bJ9_]}
    var
     Typename_of_t$20=caml_call1(Typerep_lib_Make_typename[2],[0,name$29]),
     typename_of_t$20=Typename_of_t$20[2];
    function typerep_of_t$21(of_a)
     {var name_of_t=caml_call1(Typename_of_t$20[1],of_a);
      return [9,
              [0,
               name_of_t,
               [0,
                [246,function(_bJ8_){return caml_call1(typerep_of_ref,of_a)}]]]]}
    var
     _OM_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$47),
     _ON_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_ref_ml_18_25),
     _OO_=bin_shape_t$66(caml_call2(Bin_prot_Shape[15],_ON_,_OM_)),
     _OP_=[0,caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_perms$4),0],
     _OQ_=[0,caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$48),_OP_],
     _OR_=
      [0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$139),_OQ_,_OO_],0],
     _OS_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_ref_ml_18_2),
     group$68=caml_call2(Bin_prot_Shape[6],_OS_,_OR_);
    function bin_shape_t$67(a,perms)
     {var _bJ7_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$140);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$68,_bJ7_),
               [0,a,[0,perms,0]])}
    function bin_size_t$50(size_of_a,size_of_perms,v)
     {return bin_size_t$49(size_of_a,v)}
    function bin_write_t$51(write_a,write_perms,buf,pos,v)
     {return bin_write_t$50(write_a,buf,pos,v)}
    function bin_writer_t$62(bin_writer_a,bin_writer_perms)
     {function _bJ2_(v)
       {var _bJ3_=bin_writer_perms[2],_bJ4_=bin_writer_a[2];
        return function(_bJ5_,_bJ6_)
         {return bin_write_t$51(_bJ4_,_bJ3_,v,_bJ5_,_bJ6_)}}
      return [0,
              function(v)
               {return bin_size_t$50(bin_writer_a[1],bin_writer_perms[1],v)},
              _bJ2_]}
    function bin_read_t$103(of_a,of_perms,buf,pos_ref,vint)
     {return bin_read_t$101(of_a,buf,pos_ref,vint)}
    function bin_read_t$104(of_a,of_perms,buf,pos_ref)
     {return bin_read_t$102(of_a,buf,pos_ref)}
    function bin_reader_t$62(bin_reader_a,bin_reader_perms)
     {function _bJ1_(buf,pos_ref,vtag)
       {return bin_read_t$103
                (bin_reader_a[1],bin_reader_perms[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$104
                        (bin_reader_a[1],bin_reader_perms[1],buf,pos_ref)},
              _bJ1_]}
    function bin_t$62(bin_a,bin_perms)
     {var
       _bJZ_=bin_reader_t$62(bin_a[3],bin_perms[3]),
       _bJ0_=bin_writer_t$62(bin_a[2],bin_perms[2]);
      return [0,bin_shape_t$67(bin_a[1],bin_perms[1]),_bJ0_,_bJZ_]}
    function t_of_sexp$55(of_a,of_perms,t){return caml_call2(_Ok_,of_a,t)}
    function sexp_of_t$66(of_a,of_perms,v){return caml_call2(_Ol_,of_a,v)}
    function read_only(_bJY_){return _bJY_}
    function of_ref(_bJX_){return _bJX_}
    function to_ref(_bJW_){return _bJW_}
    function set$7(_bJV_,_bJU_){_bJV_[1] = _bJU_;return 0}
    function get$4(_bJT_){return _bJT_[1]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$229);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    function _OT_(_bJS_,_bJR_){_bJS_[1] = _bJR_;return 0}
    function _OU_(_bJQ_){return _bJQ_[1]}
    var
     Core_kernel_Ref=
      [0,
       bin_t$61,
       bin_read_t$102,
       bin_read_t$101,
       bin_reader_t$61,
       bin_size_t$49,
       bin_write_t$50,
       bin_writer_t$61,
       bin_shape_t$66,
       typerep_of_t$21,
       typename_of_t$20,
       _Oj_,
       _Ok_,
       _Ol_,
       _Om_,
       _On_,
       _Oo_,
       _Op_,
       _Oq_,
       _Or_,
       _Os_,
       _Ot_,
       _Ou_,
       _Ov_,
       _Ow_,
       _Ox_,
       _Oy_,
       _Oz_,
       _OA_,
       _OB_,
       _OC_,
       _OD_,
       _OE_,
       _OF_,
       [0,
        t_of_sexp$55,
        sexp_of_t$66,
        bin_t$62,
        bin_read_t$104,
        bin_read_t$103,
        bin_reader_t$62,
        bin_size_t$50,
        bin_write_t$51,
        bin_writer_t$62,
        bin_shape_t$67,
        _Om_,
        _On_,
        _Oo_,
        _Op_,
        _Oq_,
        _Or_,
        _Os_,
        _Ot_,
        _Ou_,
        _Ov_,
        _Ow_,
        _Ox_,
        _Oy_,
        _Oz_,
        _OA_,
        _OB_,
        _OC_,
        function(_bJP_){return [0,_bJP_]},
        read_only,
        _OU_,
        get$4,
        set$7,
        _OT_,
        of_ref,
        to_ref,
        _OD_,
        _OE_,
        _OF_]];
    caml_register_global(7459,Core_kernel_Ref,"Core_kernel__Ref");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$230);
    caml_call1(Expect_test_collector[4][1],cst_src_sexp_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$231,cst$83);
    var
     _OV_=Base[192],
     _OW_=_OV_[1],
     _OX_=_OV_[2],
     _OY_=_OV_[6],
     _OZ_=_OV_[16],
     _O0_=_OV_[17],
     _O2_=include$16[2],
     _O3_=include$16[3],
     _O4_=include$16[4],
     _O5_=include$16[5],
     _O6_=include$16[6],
     _O7_=include$16[7],
     _O8_=include$16[8],
     _O9_=include$16[9],
     _O__=include$16[10],
     _O$_=include$16[11],
     _Pa_=include$16[12],
     _Pb_=include$16[13],
     _Pc_=include$16[14],
     _Pd_=include$16[15],
     _Pe_=include$16[16],
     _Pf_=include$16[17],
     _Pg_=include$16[18],
     _Ph_=include$16[19],
     _Pi_=include$16[20],
     _Pj_=include$16[21],
     _Pk_=include$16[22],
     _Pl_=include$16[23],
     _Pm_=include$16[24],
     _Pn_=include$16[25],
     _Po_=include$16[26],
     _Pp_=include$16[27],
     _Pq_=include$16[28],
     _Pr_=include$16[29],
     _Ps_=include$16[30],
     _Pt_=include$16[31],
     _Pu_=include$16[32],
     _Pv_=include$16[33],
     _Pw_=include$16[34],
     _Px_=include$16[35],
     _Py_=include$16[36],
     _Pz_=include$16[37],
     _PA_=include$16[38],
     _PB_=include$16[39],
     _PC_=include$16[40],
     _PD_=include$16[41],
     _PE_=include$16[42],
     _PF_=include$16[43],
     _PG_=include$16[44],
     _PH_=include$16[45],
     _PI_=include$16[46],
     _PJ_=include$16[47],
     _PK_=include$16[48],
     _PL_=include$16[49],
     _PM_=include$16[50],
     _PN_=include$16[51],
     _PO_=include$16[52],
     _PP_=include$16[53],
     _PQ_=include$16[54],
     _PR_=include$16[55],
     _PS_=include$16[56],
     _PT_=include$16[57],
     _PU_=include$16[58],
     _PV_=include$16[59],
     _PW_=include$16[60],
     _PX_=include$16[61],
     _O1_=include$16[1],
     _PY_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$141),
     _PZ_=
      [0,
       [0,cst_Atom$1,[0,_b1_,0]],
       [0,
        [0,
         cst_List$1,
         [0,
          caml_call1(_de_,caml_call1(caml_call1(Bin_prot_Shape[13],_PY_),0)),
          0]],
        0]],
     _P0_=caml_call1(Bin_prot_Shape[9],_PZ_),
     _P1_=[0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$142),0,_P0_],0],
     _P2_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_sexp_ml_10_2),
     group$69=caml_call2(Bin_prot_Shape[6],_P2_,_P1_),
     _P3_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$143),
     bin_shape_t$68=caml_call1(caml_call2(Bin_prot_Shape[14],group$69,_P3_),0);
    function bin_size_t$51(param)
     {if(0 === param[0])
       {var v1=param[1];return 1 + caml_call1(bin_size_t,v1) | 0}
      var v1$0=param[1];
      return 1 + caml_call2(_bn_,bin_size_t$51,v1$0) | 0}
    function bin_write_t$52(buf,pos,param)
     {if(0 === param[0])
       {var v1=param[1],pos$0=caml_call3(Bin_prot_Write[30],buf,pos,0);
        return caml_call3(bin_write_t,buf,pos$0,v1)}
      var v1$0=param[1],pos$1=caml_call3(Bin_prot_Write[30],buf,pos,1);
      return caml_call3(caml_call1(_dg_,bin_write_t$52),buf,pos$1,v1$0)}
    var bin_writer_t$63=[0,bin_size_t$51,bin_write_t$52];
    function bin_read_t$105(buf,pos_ref,vint)
     {return caml_call2(Bin_prot_Common[19],cst_src_sexp_ml_t,pos_ref[1])}
    function bin_read_t$106(buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[29],buf,pos_ref);
      if(0 === match)
       {var arg_1=caml_call2(bin_read_t,buf,pos_ref);return [0,arg_1]}
      if(1 === match)
       {var arg_1$0=caml_call2(caml_call1(_di_,bin_read_t$106),buf,pos_ref);
        return [1,arg_1$0]}
      return caml_call2(Bin_prot_Common[18],_P4_,pos_ref[1])}
    var
     bin_reader_t$63=[0,bin_read_t$106,bin_read_t$105],
     bin_t$63=[0,bin_shape_t$68,bin_writer_t$63,bin_reader_t$63],
     O$6=[0],
     _P5_=
      [0,
       [0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_sexp),0,bin_shape_t$68],
       0],
     _P6_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_sexp_ml_21_2),
     group$70=caml_call2(Bin_prot_Shape[6],_P6_,_P5_),
     _P7_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_sexp$0),
     bin_shape_sexp=caml_call1(caml_call2(Bin_prot_Shape[14],group$70,_P7_),0),
     include$82=_s__([0,_ku_,sexp_of_t$18]),
     compare$55=include$82[8],
     _P8_=
      caml_call1(Bin_prot_Shape[7],[0,bin_shape_sexp,[0,bin_shape_t$20,0]]),
     _P9_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$49),
     _P__=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_sexp_ml_29_15),
     _aYI_=bin_shape_t$6(caml_call2(Bin_prot_Shape[15],_P__,_P9_),_P8_),
     _P$_=[0,caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$50),0],
     _Qa_=
      [0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$144),_P$_,_aYI_],0],
     _Qb_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_sexp_ml_29_2),
     group$71=caml_call2(Bin_prot_Shape[6],_Qb_,_Qa_);
    function bin_shape_t$69(a)
     {var _bJO_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$145);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$71,_bJO_),[0,a,0])}
    function bin_size_t$52(size_of_a,v)
     {return bin_size_t$11
              (size_of_a,
               function(param)
                {var v2=param[2],v1=param[1],size=bin_size_t$51(v1) | 0;
                 return size + caml_call1(bin_size_t$23,v2) | 0},
               v)}
    function bin_write_t$53(write_a,buf,pos,v)
     {return bin_write_t$11
              (write_a,
               function(buf,pos,param)
                {var v2=param[2],v1=param[1],pos$0=bin_write_t$52(buf,pos,v1);
                 return caml_call3(bin_write_t$23,buf,pos$0,v2)},
               buf,
               pos,
               v)}
    function bin_writer_t$64(bin_writer_a)
     {function _bJK_(v)
       {var _bJL_=bin_writer_a[2];
        return function(_bJM_,_bJN_)
         {return bin_write_t$53(_bJL_,v,_bJM_,_bJN_)}}
      return [0,function(v){return bin_size_t$52(bin_writer_a[1],v)},_bJK_]}
    function bin_read_t$107(of_a,buf,pos_ref,vint)
     {return bin_read_t$25
              (of_a,
               function(buf,pos_ref)
                {var
                  v1=bin_read_t$106(buf,pos_ref),
                  v2=caml_call2(bin_read_t$48,buf,pos_ref);
                 return [0,v1,v2]},
               buf,
               pos_ref,
               vint)}
    function bin_read_t$108(of_a,buf,pos_ref)
     {return bin_read_t$26
              (of_a,
               function(buf,pos_ref)
                {var
                  v1=bin_read_t$106(buf,pos_ref),
                  v2=caml_call2(bin_read_t$48,buf,pos_ref);
                 return [0,v1,v2]},
               buf,
               pos_ref)}
    function bin_reader_t$64(bin_reader_a)
     {function _bJJ_(buf,pos_ref,vtag)
       {return bin_read_t$107(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$108(bin_reader_a[1],buf,pos_ref)},
              _bJJ_]}
    function bin_t$64(bin_a)
     {var _bJH_=bin_reader_t$64(bin_a[3]),_bJI_=bin_writer_t$64(bin_a[2]);
      return [0,bin_shape_t$69(bin_a[1]),_bJI_,_bJH_]}
    function compare$56(cmp_a,a_003,b_004)
     {return caml_call4
              (_g0_,
               cmp_a,
               function(a_007,b_008)
                {var
                  t_010=a_007[2],
                  t_009=a_007[1],
                  t_012=b_008[2],
                  t_011=b_008[1],
                  n=caml_call2(_O1_,t_009,t_011);
                 return 0 === n?caml_call2(compare$55,t_010,t_012):n},
               a_003,
               b_004)}
    function hash_fold_t$33(hash_fold_a,hsv,arg)
     {return caml_call4
              (_g1_,
               hash_fold_a,
               function(hsv,arg)
                {var
                  e1=arg[2],
                  e0=arg[1],
                  hsv$0=caml_call2(_OW_,hsv,e0),
                  hsv$1=caml_call2(hash_fold_t$9,hsv$0,e1);
                 return hsv$1},
               hsv,
               arg)}
    function sexp_of_t$67(sexp_of_a,t)
     {if(0 === t[0]){var a=t[1];return caml_call1(sexp_of_a,a)}
      var match=t[1],err=match[2],sexp=match[1];
      return [1,[0,_Qc_,[0,sexp,[0,caml_call1(sexp_of_t$18,err),0]]]]}
    function t_of_sexp$56(a_of_sexp,sexp)
     {if(1 === sexp[0])
       {var _bJD_=sexp[1];
        if(_bJD_)
         {var _bJE_=_bJD_[1];
          if(0 === _bJE_[0])
           if(caml_string_notequal(_bJE_[1],cst_sexp_parse_error))
            var switch$0=0;
           else
            {var _bJF_=_bJD_[2];
             if(_bJF_)
              {var _bJG_=_bJF_[2];
               if(_bJG_)
                if(_bJG_[2])
                 var switch$0=0;
                else
                 var sexp$0=_bJF_[1],switch$0=1;
               else
                var switch$0=0}
             else
              var switch$0=0}
          else
           var switch$0=0}
        else
         var switch$0=0}
      else
       var switch$0=0;
      if(! switch$0)var sexp$0=sexp;
      try
       {var _bJC_=[0,caml_call1(a_of_sexp,sexp$0)];return _bJC_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        return [1,[0,sexp$0,caml_call2(of_exn,0,exn)]]}}
    var
     _Qd_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$51),
     _Qe_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_sexp_ml_54_13),
     _Qf_=
      [0,
       [0,cst_value,caml_call2(Bin_prot_Shape[15],_Qe_,_Qd_)],
       [0,[0,cst_text,_b1_],0]],
     _Qg_=caml_call1(Bin_prot_Shape[8],_Qf_),
     _Qh_=[0,caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$52),0],
     _Qi_=
      [0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$146),_Qh_,_Qg_],0],
     _Qj_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_sexp_ml_53_2),
     group$72=caml_call2(Bin_prot_Shape[6],_Qj_,_Qi_);
    function bin_shape_t$70(a)
     {var _bJB_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$147);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$72,_bJB_),[0,a,0])}
    function bin_size_t$53(size_of_a,param)
     {var v2=param[2],v1=param[1],size=caml_call1(size_of_a,v1) | 0;
      return size + caml_call1(bin_size_t,v2) | 0}
    function bin_write_t$54(write_a,buf,pos,param)
     {var v2=param[2],v1=param[1],pos$0=caml_call3(write_a,buf,pos,v1);
      return caml_call3(bin_write_t,buf,pos$0,v2)}
    function bin_writer_t$65(bin_writer_a)
     {function _bJx_(v)
       {var _bJy_=bin_writer_a[2];
        return function(_bJz_,_bJA_)
         {return bin_write_t$54(_bJy_,v,_bJz_,_bJA_)}}
      return [0,function(v){return bin_size_t$53(bin_writer_a[1],v)},_bJx_]}
    function bin_read_t$109(of_a,buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_src_sexp_ml_With_text_t,pos_ref[1])}
    function bin_read_t$110(of_a,buf,pos_ref)
     {var
       v_value=caml_call2(of_a,buf,pos_ref),
       v_text=caml_call2(bin_read_t,buf,pos_ref);
      return [0,v_value,v_text]}
    function bin_reader_t$65(bin_reader_a)
     {function _bJw_(buf,pos_ref,vtag)
       {return bin_read_t$109(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$110(bin_reader_a[1],buf,pos_ref)},
              _bJw_]}
    function bin_t$65(bin_a)
     {var _bJu_=bin_reader_t$65(bin_a[3]),_bJv_=bin_writer_t$65(bin_a[2]);
      return [0,bin_shape_t$70(bin_a[1]),_bJv_,_bJu_]}
    function sexp_of_t$68(param,t){return [0,t[2]]}
    function of_text(value_of_sexp,opt,text)
     {if(opt)var sth=opt[1],filename=sth;else var filename=cst$84;
      var
       err=
        caml_call2
         (_lp_,
          0,
          function(param)
           {return caml_call2(include$16[43],text,value_of_sexp)});
      if(0 === err[0])
       {var _bJt_=err[1];
        if(1025039613 <= _bJt_[1])
         {var value=_bJt_[2];return [0,[0,value,text]]}
        var match=_bJt_[2],annotated=match[2],exn=match[1];
        return [1,
                caml_call2
                 (of_exn,
                  0,
                  caml_call3(include$16[13][17],filename,exn,annotated))]}
      return err}
    function t_of_sexp$57(a_of_sexp,sexp)
     {if(0 === sexp[0])
       {var text=sexp[1];return caml_call1(_ls_,of_text(a_of_sexp,0,text))}
      return caml_call2
              (_er_,
               cst_With_text_t_should_be_stored_as_an_atom_but_instead_a_list_was_found,
               sexp)}
    function text(t){return t[2]}
    function value$2(t){return t[1]}
    function of_value(sexp_of_value,value)
     {var
       _bJs_=caml_call1(sexp_of_value,value),
       text=caml_call2(include$16[48],0,_bJs_);
      return [0,value,text]}
    var
     _Qk_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$53),
     _Ql_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_sexp_ml_87_19),
     _Qm_=caml_call2(Bin_prot_Shape[15],_Ql_,_Qk_),
     _Qn_=[0,caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$54),0],
     _Qo_=
      [0,
       [0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_no_raise),_Qn_,_Qm_],
       0],
     _Qp_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_sexp_ml_87_0),
     group$73=caml_call2(Bin_prot_Shape[6],_Qp_,_Qo_);
    function bin_shape_no_raise(a)
     {var _bJr_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_no_raise$0);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$73,_bJr_),[0,a,0])}
    function bin_size_no_raise(size_of_a){return size_of_a}
    function bin_write_no_raise(write_a){return write_a}
    function bin_writer_no_raise(bin_writer_a)
     {function _bJq_(v){return caml_call1(bin_writer_a[2],v)}
      return [0,function(v){return caml_call1(bin_writer_a[1],v)},_bJq_]}
    function bin_read_no_raise(of_a,buf,pos_ref,vint)
     {return caml_call2(Bin_prot_Common[18],_Qq_,pos_ref[1])}
    function bin_read_no_raise$0(of_a){return of_a}
    function bin_reader_no_raise(bin_reader_a)
     {function _bJp_(buf,pos_ref,vtag)
       {return bin_read_no_raise(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return caml_call2(bin_reader_a[1],buf,pos_ref)},
              _bJp_]}
    function bin_no_raise(bin_a)
     {var
       _bJn_=bin_reader_no_raise(bin_a[3]),
       _bJo_=bin_writer_no_raise(bin_a[2]);
      return [0,bin_shape_no_raise(bin_a[1]),_bJo_,_bJn_]}
    function no_raise_of_sexp(of_a,t){return caml_call1(of_a,t)}
    function sexp_of_no_raise(sexp_of_a,a)
     {try
       {var _bJl_=caml_call1(sexp_of_a,a);return _bJl_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        try
         {var _bJk_=[1,[0,_Qs_,[0,caml_call1(sexp_of_t,exn),0]]];return _bJk_}
        catch(_bJm_){return _Qr_}}}
    var
     _Qt_=Base[192],
     _Qu_=Base[192],
     include$168=
      _tc_
       ([0,
         _Qu_[20],
         _Qu_[21],
         _Qu_[22],
         _Qu_[23],
         _Qu_[24],
         _Qu_[25],
         _Qu_[26],
         _Qu_[27],
         _Qu_[28],
         _Qu_[29],
         _Qu_[30],
         _Qu_[31],
         _Qu_[32],
         _Qu_[33],
         _Qu_[34],
         _Qu_[35],
         _Qu_[36],
         _Qu_[37],
         _Qu_[38]],
        [0,_Qt_[3],_Qt_[4]]),
     _Qv_=include$168[1],
     _Qw_=include$168[2],
     _Qx_=include$168[3],
     _Qy_=include$168[4],
     _Qz_=include$168[5],
     _QA_=include$168[6],
     _QB_=include$168[7],
     _QC_=include$168[8],
     _QD_=include$168[9],
     _QE_=include$168[10],
     _QF_=include$168[11],
     _QG_=include$168[12],
     _QH_=include$168[13],
     _QI_=include$168[14],
     _QJ_=include$168[15],
     _QK_=include$168[16],
     _QL_=include$168[17],
     _QM_=include$168[18],
     _QN_=include$168[19],
     _QO_=include$168[20],
     _QP_=include$168[21],
     _QQ_=include$168[22];
    function of_sexp_allow_extra_fields(of_sexp,sexp)
     {var r=Sexplib_Conv[26],prev=r[1];
      function _bJi_(param){r[1] = prev;return 0}
      function _bJj_(param){r[1] = 0;return caml_call1(of_sexp,sexp)}
      return caml_call2(Base_Exn[12],_bJj_,_bJi_)}
    function _QR_(self)
     {function _bJc_(size)
       {function _bJd_(param)
         {if(0 === param)
           {var _bJf_=function(atom){return [0,atom]};
            return caml_call2(_nQ_[9][4][3],gen$13,_bJf_)}
          function _bJg_(list){return [1,list]}
          var _bJh_=caml_call1(_o__,self);
          return caml_call2(_nQ_[9][4][3],_bJh_,_bJg_)}
        var _bJe_=caml_call2(_xK_,0,caml_call2(_ah_,size,1));
        return caml_call2(_nQ_[9][4][2],_bJe_,_bJd_)}
      return caml_call2(_nQ_[9][4][2],_nQ_[23],_bJc_)}
    var gen$15=caml_call1(_nQ_[64],_QR_);
    function _QS_(t_obs)
     {function _bI$_(param)
       {if(0 === param[0]){var atom=param[1];return [0,65,atom]}
        var list=param[1];
        return [0,66,list]}
      var
       _bJa_=caml_call1(_pc_,t_obs),
       _bJb_=caml_call2(_nP_[11],obs$11,_bJa_);
      return caml_call2(_nP_[19],_bJb_,_bI$_)}
    var obs$13=caml_call1(_nP_[9],_QS_);
    function _QT_(shrinker)
     {function _bI7_(param)
       {if(0 === param[0])return empty;
        var list=param[1];
        function _bI8_(l){return [1,l]}
        var
         _bI9_=caml_call1(_pd_,shrinker),
         _bI__=caml_call2(_nO_[1],_bI9_,list),
         shrink_list=caml_call2(Base_Sequence[28][2],_bI__,_bI8_),
         shrink_tree=caml_call1(of_list$0,list);
        return caml_call1(round_robin,[0,shrink_list,[0,shrink_tree,0]])}
      return caml_call1(_nO_[2],_bI7_)}
    var shrinker$13=caml_call1(_nO_[17],_QT_);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$232);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     With_text=
      [0,
       t_of_sexp$57,
       sexp_of_t$68,
       bin_t$65,
       bin_read_t$110,
       bin_read_t$109,
       bin_reader_t$65,
       bin_size_t$53,
       bin_write_t$54,
       bin_writer_t$65,
       bin_shape_t$70,
       of_value,
       of_text,
       value$2,
       text],
     Sexp_maybe=
      [0,
       bin_t$64,
       bin_read_t$108,
       bin_read_t$107,
       bin_reader_t$64,
       bin_size_t$52,
       bin_write_t$53,
       bin_writer_t$64,
       bin_shape_t$69,
       compare$56,
       hash_fold_t$33,
       t_of_sexp$56,
       sexp_of_t$67],
     include$83=
      [0,
       bin_t$63,
       bin_read_t$106,
       bin_read_t$105,
       bin_reader_t$63,
       bin_size_t$51,
       bin_write_t$52,
       bin_writer_t$63,
       bin_shape_t$68,
       _OW_,
       _OX_,
       O$6,
       _Qv_,
       _Qw_,
       _Qx_,
       _Qy_,
       _Qz_,
       _QA_,
       _QB_,
       _QD_,
       _QE_,
       _QF_,
       _QG_,
       _QH_,
       _QI_,
       _QJ_,
       _QK_,
       _QL_,
       _QM_,
       _QN_,
       _QO_,
       _QP_,
       _QQ_,
       gen$15,
       obs$13,
       shrinker$13,
       _QC_,
       _O2_,
       _O3_,
       _O4_,
       _O5_,
       _O6_,
       _O7_,
       _O8_,
       _O9_,
       _O__,
       _O$_,
       _Pa_,
       _Pb_,
       _Pc_,
       _Pd_,
       _Pe_,
       _Pf_,
       _Pg_,
       _Ph_,
       _Pi_,
       _Pj_,
       _Pk_,
       _Pl_,
       _Pm_,
       _Pn_,
       _Po_,
       _Pp_,
       _Pq_,
       _Pr_,
       _Ps_,
       _Pt_,
       _Pu_,
       _Pv_,
       _Pw_,
       _Px_,
       _Py_,
       _Pz_,
       _PA_,
       _PB_,
       _PC_,
       _PD_,
       _PE_,
       _PF_,
       _PG_,
       _PH_,
       _PI_,
       _PJ_,
       _PK_,
       _PL_,
       _PM_,
       _PN_,
       _PO_,
       _PP_,
       _PQ_,
       _PR_,
       _PS_,
       _PT_,
       _PU_,
       _PV_,
       _PW_,
       _PX_,
       _OY_,
       _OZ_,
       _O0_,
       bin_no_raise,
       bin_read_no_raise$0,
       bin_read_no_raise,
       bin_reader_no_raise,
       bin_size_no_raise,
       bin_write_no_raise,
       bin_writer_no_raise,
       bin_shape_no_raise,
       no_raise_of_sexp,
       sexp_of_no_raise,
       Sexp_maybe,
       With_text,
       of_sexp_allow_extra_fields];
    caml_register_global(7460,include$83,"Core_kernel__Sexp");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$233);
    caml_call1(Expect_test_collector[4][1],cst_src_std_internal_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$234,cst$85);
    var
     t_of_sexp$58=include[1],
     sexpifier=include[2],
     _QU_=include[3],
     _QV_=include[4],
     _QW_=include[5],
     _QX_=include[6],
     _QY_=include[7],
     _QZ_=include[8],
     _Q0_=include[9],
     _Q1_=include[10],
     _Q2_=include[11],
     _Q3_=include[12],
     _Q4_=include[13],
     _Q5_=Base_List[140][1],
     _Q6_=_gz_[1],
     _Q7_=_gz_[2],
     _Q8_=_gz_[3],
     _Q9_=_gz_[4],
     _Q__=_gz_[5],
     _Q$_=_gz_[6],
     _Ra_=_gz_[7],
     _Rb_=_gz_[8],
     _Rc_=_gz_[9],
     _Rd_=_gz_[10],
     _Re_=_gz_[11],
     _Rf_=_gz_[12],
     _Rg_=_gz_[13],
     _Rh_=_gz_[14],
     _Ri_=_gz_[15],
     _Rj_=_gz_[16],
     _Rk_=_gz_[17],
     _Rl_=_gz_[18],
     _Rm_=_gz_[19],
     _Rn_=_gz_[20],
     _Ro_=_gz_[21],
     _Rp_=_gz_[22],
     _Rq_=_gz_[23],
     _Rr_=_gz_[24],
     _Rs_=_gz_[25],
     _Rt_=_gz_[26],
     _Ru_=_gz_[27],
     _Rv_=_gz_[28],
     _Rw_=_gz_[29],
     _Rx_=_gz_[30],
     _Ry_=_gz_[31],
     _Rz_=_gz_[32],
     _RA_=_gz_[33],
     _RB_=_gz_[34],
     _RC_=_gz_[35],
     _RD_=_gz_[36],
     _RE_=_gz_[37],
     _RF_=_gz_[38],
     _RG_=_gz_[39],
     _RH_=_gz_[40],
     _RI_=_gz_[41],
     _RJ_=_gz_[42],
     _RK_=_gz_[43],
     _RL_=_gz_[44],
     _RM_=_gz_[45],
     _RN_=_gz_[46],
     _RO_=_gz_[47],
     _RP_=_gz_[48],
     _RQ_=_gz_[49],
     _RR_=_gz_[50],
     _RS_=_gz_[51],
     _RT_=_gz_[52],
     _RU_=_gz_[53],
     _RV_=_gz_[54],
     _RW_=_gz_[55],
     _RX_=_gz_[56],
     _RY_=_hw_[1],
     _RZ_=_hw_[2],
     Bug=[248,cst_Core_kernel_Std_internal_Bug,caml_fresh_oo_id(0)];
    function _R0_(param)
     {if(param[1] === Bug)
       {var v0=param[2],v0$0=caml_call1(_Z_,v0);
        return [1,[0,_R1_,[0,v0$0,0]]]}
      throw [0,Assert_failure,_R2_]}
    caml_call3(Sexplib0_Sexp_conv[51][2],0,Bug,_R0_);
    var
     C_malloc_exn=
      [248,cst_Core_kernel_Std_internal_C_malloc_exn,caml_fresh_oo_id(0)];
    caml_call2(Stdlib_callback[2],cst_C_malloc_exn,[0,C_malloc_exn,0,0]);
    var _R3_=Base_Exn[3];
    function fst3(param){var x=param[1];return x}
    function snd3(param){var y=param[2];return y}
    function trd3(param){var z=param[3];return z}
    function uw(param){if(param){var x=param[1];return x}throw Caml[141]}
    function phys_same(a,b){return caml_call2(_aY_,a,b)}
    function _R4_(a,b){var _bI5_=1 - a,_bI6_=_bI5_ || b;return _bI6_}
    function print_s(mach,sexp)
     {var _bI4_=mach?caml_call1(_PL_,sexp):caml_call2(_PK_,0,sexp);
      return caml_call1(print_endline,_bI4_)}
    var _R5_=include$4[6];
    function force(_bI2_)
     {var _bI3_=caml_obj_tag(_bI2_);
      return 250 === _bI3_
              ?_bI2_[1]
              :246 === _bI3_?caml_call1(CamlinternalLazy[2],_bI2_):_bI2_}
    function ident(_bI1_){return _bI1_}
    var
     _R6_=include$4[7],
     _R7_=Base[302],
     _R8_=Base_Exn[12],
     _R9_=Base_Exn[11],
     _R__=Base_Staged[1],
     _R$_=Base_Staged[2],
     _Sa_=Base_With_return[1],
     _Sb_=Base_With_return[2],
     _Sc_=include$26[1],
     _Sd_=include$26[12],
     _Se_=include$26[18],
     _Sf_=include$26[19],
     _Sg_=include$26[20],
     _Sh_=include$26[21],
     _Si_=include$26[22],
     _Sj_=include$26[23],
     _Sk_=include$26[39],
     _Sl_=include$26[40],
     _Sm_=include$26[41],
     _Sn_=include$26[42],
     _So_=include$26[43],
     _Sp_=include$26[44],
     _Sq_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$55),
     _Sr_=
      caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_std_internal_ml_99_19),
     _Ss_=bin_shape_t$9(caml_call2(Bin_prot_Shape[15],_Sr_,_Sq_)),
     _St_=[0,caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$56),0],
     _Su_=
      [0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_array),_St_,_Ss_],0],
     _Sv_=
      caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_std_internal_ml_99_2),
     group$74=caml_call2(Bin_prot_Shape[6],_Sv_,_Su_);
    function bin_shape_array(a)
     {var _bI0_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_array$0);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$74,_bI0_),[0,a,0])}
    function bin_size_array(size_of_a,v){return bin_size_t$14(size_of_a,v)}
    function bin_write_array(write_a,buf,pos,v)
     {return bin_write_t$14(write_a,buf,pos,v)}
    function bin_writer_array(bin_writer_a)
     {function _bIW_(v)
       {var _bIX_=bin_writer_a[2];
        return function(_bIY_,_bIZ_)
         {return bin_write_array(_bIX_,v,_bIY_,_bIZ_)}}
      return [0,function(v){return bin_size_array(bin_writer_a[1],v)},_bIW_]}
    function bin_read_array(of_a,buf,pos_ref,vint)
     {return bin_read_t$31(of_a,buf,pos_ref,vint)}
    function bin_read_array$0(of_a,buf,pos_ref)
     {return bin_read_t$32(of_a,buf,pos_ref)}
    function bin_reader_array(bin_reader_a)
     {function _bIV_(buf,pos_ref,vtag)
       {return bin_read_array(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_array$0(bin_reader_a[1],buf,pos_ref)},
              _bIV_]}
    function bin_array(bin_a)
     {var _bIT_=bin_reader_array(bin_a[3]),_bIU_=bin_writer_array(bin_a[2]);
      return [0,bin_shape_array(bin_a[1]),_bIU_,_bIT_]}
    var
     Typename_of_array=caml_call1(Typerep_lib_Make_typename[2],[0,name$30]),
     _Sw_=Typename_of_array[2];
    function typerep_of_array$0(of_a)
     {var name_of_array=caml_call1(Typename_of_array[1],of_a);
      return [9,
              [0,
               name_of_array,
               [0,[246,function(_bIS_){return typerep_of_t(of_a)}]]]]}
    var
     _Sx_=
      [0,
       [0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_bool),0,bin_shape_t$45],
       0],
     _Sy_=
      caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_std_internal_ml_100_2),
     group$75=caml_call2(Bin_prot_Shape[6],_Sy_,_Sx_),
     _Sz_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_bool$0),
     bin_shape_bool=caml_call1(caml_call2(Bin_prot_Shape[14],group$75,_Sz_),0),
     bin_writer_bool=[0,_bb_,_bW_],
     bin_reader_bool=[0,_bY_,_bZ_],
     bin_bool=[0,bin_shape_bool,bin_writer_bool,bin_reader_bool];
    function hash_bool(x){return caml_call1(_BG_,x)}
    var
     Typename_of_bool=caml_call1(Typerep_lib_Make_typename[1],[0,name$31]),
     typename_of_bool$0=Typename_of_bool[2],
     name_of_bool=Typename_of_bool[1],
     typerep_of_bool$0=[9,[0,name_of_bool,[0,typerep_of_t$10]]],
     _SA_=[0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_char),0,_Cc_],0],
     _SB_=
      caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_std_internal_ml_101_2),
     group$76=caml_call2(Bin_prot_Shape[6],_SB_,_SA_),
     _SC_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_char$0),
     bin_shape_char=caml_call1(caml_call2(Bin_prot_Shape[14],group$76,_SC_),0),
     bin_writer_char=[0,_Cf_,_Ce_],
     bin_reader_char=[0,_Ci_,_Ch_],
     bin_char=[0,bin_shape_char,bin_writer_char,bin_reader_char];
    function hash_char(x){return caml_call1(_Cm_,x)}
    var
     Typename_of_char=caml_call1(Typerep_lib_Make_typename[1],[0,name$32]),
     typename_of_char$0=Typename_of_char[2],
     name_of_char=Typename_of_char[1],
     typerep_of_char$0=[9,[0,name_of_char,[0,typerep_of_t$11]]],
     _SD_=
      [0,
       [0,
        caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_float),
        0,
        bin_shape_t$55],
       0],
     _SE_=
      caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_std_internal_ml_102_2),
     group$77=caml_call2(Bin_prot_Shape[6],_SE_,_SD_),
     _SF_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_float$0),
     bin_shape_float=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$77,_SF_),0),
     bin_writer_float=[0,bin_size_t$2,bin_write_t$2],
     bin_reader_float=[0,bin_read_t$5,bin_read_t$6],
     bin_float=[0,bin_shape_float,bin_writer_float,bin_reader_float];
    function hash_float(x){return caml_call1(hash$20,x)}
    var
     Typename_of_float=caml_call1(Typerep_lib_Make_typename[1],[0,name$33]),
     typename_of_float$0=Typename_of_float[2],
     name_of_float=Typename_of_float[1],
     typerep_of_float$0=[9,[0,name_of_float,[0,typerep_of_t$15]]],
     _SG_=
      [0,
       [0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_int),0,bin_shape_t$35],
       0],
     _SH_=
      caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_std_internal_ml_103_2),
     group$78=caml_call2(Bin_prot_Shape[6],_SH_,_SG_),
     _SI_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_int$0),
     bin_shape_int=caml_call1(caml_call2(Bin_prot_Shape[14],group$78,_SI_),0),
     bin_writer_int=[0,bin_size_t$36,bin_write_t$36],
     bin_reader_int=[0,bin_read_t$74,bin_read_t$73],
     bin_int=[0,bin_shape_int,bin_writer_int,bin_reader_int];
    function hash_int(x){return caml_call1(_xA_,x)}
    var
     Typename_of_int=caml_call1(Typerep_lib_Make_typename[1],[0,name$34]),
     typename_of_int$0=Typename_of_int[2],
     name_of_int=Typename_of_int[1],
     typerep_of_int$0=[9,[0,name_of_int,[0,typerep_of_t$3]]],
     _SJ_=
      [0,
       [0,
        caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_int32),
        0,
        bin_shape_t$58],
       0],
     _SK_=
      caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_std_internal_ml_104_2),
     group$79=caml_call2(Bin_prot_Shape[6],_SK_,_SJ_),
     _SL_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_int32$0),
     bin_shape_int32=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$79,_SL_),0),
     bin_writer_int32=[0,bin_size_t$45,bin_write_t$45],
     bin_reader_int32=[0,bin_read_t$91,bin_read_t$92],
     bin_int32=[0,bin_shape_int32,bin_writer_int32,bin_reader_int32];
    function hash_int32(x){return caml_call1(_K4_,x)}
    var
     Typename_of_int32=caml_call1(Typerep_lib_Make_typename[1],[0,name$35]),
     typename_of_int32$0=Typename_of_int32[2],
     name_of_int32=Typename_of_int32[1],
     typerep_of_int32$0=[9,[0,name_of_int32,[0,typerep_of_t$16]]],
     _SM_=
      [0,
       [0,
        caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_int64),
        0,
        bin_shape_t$38],
       0],
     _SN_=
      caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_std_internal_ml_105_2),
     group$80=caml_call2(Bin_prot_Shape[6],_SN_,_SM_),
     _SO_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_int64$0),
     bin_shape_int64=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$80,_SO_),0),
     bin_writer_int64=[0,bin_size_t$37,bin_write_t$37],
     bin_reader_int64=[0,bin_read_t$75,bin_read_t$76],
     bin_int64=[0,bin_shape_int64,bin_writer_int64,bin_reader_int64];
    function hash_int64(x){return caml_call1(_zb_,x)}
    var
     Typename_of_int64=caml_call1(Typerep_lib_Make_typename[1],[0,name$36]),
     typename_of_int64$0=Typename_of_int64[2],
     name_of_int64=Typename_of_int64[1],
     typerep_of_int64$0=[9,[0,name_of_int64,[0,typerep_of_t$5]]],
     _SP_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$57),
     _SQ_=
      caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_std_internal_ml_106_19),
     _SR_=bin_shape_t$60(caml_call2(Bin_prot_Shape[15],_SQ_,_SP_)),
     _SS_=[0,caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$58),0],
     _ST_=
      [0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_lazy_t),_SS_,_SR_],0],
     _SU_=
      caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_std_internal_ml_106_2),
     group$81=caml_call2(Bin_prot_Shape[6],_SU_,_ST_);
    function bin_shape_lazy_t(a)
     {var _bIR_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_lazy_t$0);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$81,_bIR_),[0,a,0])}
    function bin_size_lazy_t(size_of_a,v){return bin_size_t$46(size_of_a,v)}
    function bin_write_lazy_t(write_a,buf,pos,v)
     {return bin_write_t$46(write_a,buf,pos,v)}
    function bin_writer_lazy_t(bin_writer_a)
     {function _bIN_(v)
       {var _bIO_=bin_writer_a[2];
        return function(_bIP_,_bIQ_)
         {return bin_write_lazy_t(_bIO_,v,_bIP_,_bIQ_)}}
      return [0,function(v){return bin_size_lazy_t(bin_writer_a[1],v)},_bIN_]}
    function bin_read_lazy_t(of_a,buf,pos_ref,vint)
     {return bin_read_t$93(of_a,buf,pos_ref,vint)}
    function bin_read_lazy_t$0(of_a,buf,pos_ref)
     {return bin_read_t$94(of_a,buf,pos_ref)}
    function bin_reader_lazy_t(bin_reader_a)
     {function _bIM_(buf,pos_ref,vtag)
       {return bin_read_lazy_t(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_lazy_t$0(bin_reader_a[1],buf,pos_ref)},
              _bIM_]}
    function bin_lazy_t(bin_a)
     {var _bIK_=bin_reader_lazy_t(bin_a[3]),_bIL_=bin_writer_lazy_t(bin_a[2]);
      return [0,bin_shape_lazy_t(bin_a[1]),_bIL_,_bIK_]}
    var
     Typename_of_lazy_t=caml_call1(Typerep_lib_Make_typename[2],[0,name$37]),
     _SV_=Typename_of_lazy_t[2];
    function typerep_of_lazy_t$0(of_a)
     {var name_of_lazy_t=caml_call1(Typename_of_lazy_t[1],of_a);
      return [9,
              [0,
               name_of_lazy_t,
               [0,[246,function(_bIJ_){return typerep_of_t$18(of_a)}]]]]}
    var
     _SW_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$59),
     _SX_=
      caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_std_internal_ml_107_19),
     _SY_=bin_shape_t$25(caml_call2(Bin_prot_Shape[15],_SX_,_SW_)),
     _SZ_=[0,caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$60),0],
     _S0_=
      [0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_list),_SZ_,_SY_],0],
     _S1_=
      caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_std_internal_ml_107_2),
     group$82=caml_call2(Bin_prot_Shape[6],_S1_,_S0_);
    function bin_shape_list(a)
     {var _bII_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_list$0);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$82,_bII_),[0,a,0])}
    function bin_size_list(size_of_a,v){return bin_size_t$28(size_of_a,v)}
    function bin_write_list(write_a,buf,pos,v)
     {return bin_write_t$28(write_a,buf,pos,v)}
    function bin_writer_list(bin_writer_a)
     {function _bIE_(v)
       {var _bIF_=bin_writer_a[2];
        return function(_bIG_,_bIH_)
         {return bin_write_list(_bIF_,v,_bIG_,_bIH_)}}
      return [0,function(v){return bin_size_list(bin_writer_a[1],v)},_bIE_]}
    function bin_read_list(of_a,buf,pos_ref,vint)
     {return bin_read_t$57(of_a,buf,pos_ref,vint)}
    function bin_read_list$0(of_a,buf,pos_ref)
     {return bin_read_t$58(of_a,buf,pos_ref)}
    function bin_reader_list(bin_reader_a)
     {function _bID_(buf,pos_ref,vtag)
       {return bin_read_list(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_list$0(bin_reader_a[1],buf,pos_ref)},
              _bID_]}
    function bin_list(bin_a)
     {var _bIB_=bin_reader_list(bin_a[3]),_bIC_=bin_writer_list(bin_a[2]);
      return [0,bin_shape_list(bin_a[1]),_bIC_,_bIB_]}
    var
     Typename_of_list=caml_call1(Typerep_lib_Make_typename[2],[0,name$38]),
     _S2_=Typename_of_list[2];
    function typerep_of_list$0(of_a)
     {var name_of_list=caml_call1(Typename_of_list[1],of_a);
      return [9,
              [0,
               name_of_list,
               [0,[246,function(_bIA_){return typerep_of_t$1(of_a)}]]]]}
    var
     _S3_=
      [0,
       [0,
        caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_nativeint),
        0,
        bin_shape_t$62],
       0],
     _S4_=
      caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_std_internal_ml_108_2),
     group$83=caml_call2(Bin_prot_Shape[6],_S4_,_S3_),
     _S5_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_nativeint$0),
     bin_shape_nativeint=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$83,_S5_),0),
     bin_writer_nativeint=[0,bin_size_t$47,bin_write_t$47],
     bin_reader_nativeint=[0,bin_read_t$95,bin_read_t$96],
     bin_nativeint=
      [0,bin_shape_nativeint,bin_writer_nativeint,bin_reader_nativeint];
    function hash_nativeint(x){return caml_call1(_M8_,x)}
    var
     Typename_of_nativeint=
      caml_call1(Typerep_lib_Make_typename[1],[0,name$39]),
     typename_of_nativeint$0=Typename_of_nativeint[2],
     name_of_nativeint=Typename_of_nativeint[1],
     typerep_of_nativeint$0=[9,[0,name_of_nativeint,[0,typerep_of_t$19]]],
     _S6_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$61),
     _S7_=
      caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_std_internal_ml_109_19),
     _S8_=bin_shape_t$32(caml_call2(Bin_prot_Shape[15],_S7_,_S6_)),
     _S9_=[0,caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$62),0],
     _S__=
      [0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_option),_S9_,_S8_],0],
     _S$_=
      caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_std_internal_ml_109_2),
     group$84=caml_call2(Bin_prot_Shape[6],_S$_,_S__);
    function bin_shape_option(a)
     {var _bIz_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_option$0);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$84,_bIz_),[0,a,0])}
    function bin_size_option(size_of_a,v){return bin_size_t$35(size_of_a,v)}
    function bin_write_option(write_a,buf,pos,v)
     {return bin_write_t$35(write_a,buf,pos,v)}
    function bin_writer_option(bin_writer_a)
     {function _bIv_(v)
       {var _bIw_=bin_writer_a[2];
        return function(_bIx_,_bIy_)
         {return bin_write_option(_bIw_,v,_bIx_,_bIy_)}}
      return [0,function(v){return bin_size_option(bin_writer_a[1],v)},_bIv_]}
    function bin_read_option(of_a,buf,pos_ref,vint)
     {return bin_read_t$71(of_a,buf,pos_ref,vint)}
    function bin_read_option$0(of_a,buf,pos_ref)
     {return bin_read_t$72(of_a,buf,pos_ref)}
    function bin_reader_option(bin_reader_a)
     {function _bIu_(buf,pos_ref,vtag)
       {return bin_read_option(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_option$0(bin_reader_a[1],buf,pos_ref)},
              _bIu_]}
    function bin_option(bin_a)
     {var _bIs_=bin_reader_option(bin_a[3]),_bIt_=bin_writer_option(bin_a[2]);
      return [0,bin_shape_option(bin_a[1]),_bIt_,_bIs_]}
    var
     Typename_of_option=caml_call1(Typerep_lib_Make_typename[2],[0,name$40]),
     _Ta_=Typename_of_option[2];
    function typerep_of_option$0(of_a)
     {var name_of_option=caml_call1(Typename_of_option[1],of_a);
      return [9,
              [0,
               name_of_option,
               [0,[246,function(_bIr_){return typerep_of_t$2(of_a)}]]]]}
    var
     _Tb_=
      [0,
       [0,
        caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_string),
        0,
        bin_shape_t$54],
       0],
     _Tc_=
      caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_std_internal_ml_110_2),
     group$85=caml_call2(Bin_prot_Shape[6],_Tc_,_Tb_),
     _Td_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_string$0),
     bin_shape_string=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$85,_Td_),0),
     bin_writer_string=[0,bin_size_t$44,bin_write_t$44],
     bin_reader_string=[0,bin_read_t$89,bin_read_t$90],
     bin_string=[0,bin_shape_string,bin_writer_string,bin_reader_string];
    function hash_string(x){return caml_call1(hash$18,x)}
    var
     Typename_of_string=caml_call1(Typerep_lib_Make_typename[1],[0,name$41]),
     typename_of_string$0=Typename_of_string[2],
     name_of_string=Typename_of_string[1],
     typerep_of_string$0=[9,[0,name_of_string,[0,typerep_of_t$14]]],
     _Te_=
      [0,
       [0,
        caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_bytes),
        0,
        bin_shape_t$47],
       0],
     _Tf_=
      caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_std_internal_ml_111_2),
     group$86=caml_call2(Bin_prot_Shape[6],_Tf_,_Te_),
     _Tg_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_bytes$0),
     bin_shape_bytes=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$86,_Tg_),0),
     bin_writer_bytes=[0,bin_size_t$0,bin_write_t$0],
     bin_reader_bytes=[0,bin_read_t$1,bin_read_t$2],
     bin_bytes=[0,bin_shape_bytes,bin_writer_bytes,bin_reader_bytes],
     Typename_of_bytes=caml_call1(Typerep_lib_Make_typename[1],[0,name$42]),
     typename_of_bytes$0=Typename_of_bytes[2],
     name_of_bytes=Typename_of_bytes[1],
     typerep_of_bytes$0=[9,[0,name_of_bytes,[0,typerep_of_t$12]]],
     _Th_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$63),
     _Ti_=
      caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_std_internal_ml_112_19),
     _Tj_=bin_shape_t$66(caml_call2(Bin_prot_Shape[15],_Ti_,_Th_)),
     _Tk_=[0,caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$64),0],
     _Tl_=
      [0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_ref),_Tk_,_Tj_],0],
     _Tm_=
      caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_std_internal_ml_112_2),
     group$87=caml_call2(Bin_prot_Shape[6],_Tm_,_Tl_);
    function bin_shape_ref(a)
     {var _bIq_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_ref$0);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$87,_bIq_),[0,a,0])}
    function bin_size_ref(size_of_a,v){return bin_size_t$49(size_of_a,v)}
    function bin_write_ref(write_a,buf,pos,v)
     {return bin_write_t$50(write_a,buf,pos,v)}
    function bin_writer_ref(bin_writer_a)
     {function _bIm_(v)
       {var _bIn_=bin_writer_a[2];
        return function(_bIo_,_bIp_)
         {return bin_write_ref(_bIn_,v,_bIo_,_bIp_)}}
      return [0,function(v){return bin_size_ref(bin_writer_a[1],v)},_bIm_]}
    function bin_read_ref(of_a,buf,pos_ref,vint)
     {return bin_read_t$101(of_a,buf,pos_ref,vint)}
    function bin_read_ref$0(of_a,buf,pos_ref)
     {return bin_read_t$102(of_a,buf,pos_ref)}
    function bin_reader_ref(bin_reader_a)
     {function _bIl_(buf,pos_ref,vtag)
       {return bin_read_ref(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_ref$0(bin_reader_a[1],buf,pos_ref)},
              _bIl_]}
    function bin_ref(bin_a)
     {var _bIj_=bin_reader_ref(bin_a[3]),_bIk_=bin_writer_ref(bin_a[2]);
      return [0,bin_shape_ref(bin_a[1]),_bIk_,_bIj_]}
    var
     Typename_of_ref=caml_call1(Typerep_lib_Make_typename[2],[0,name$43]),
     _Tn_=Typename_of_ref[2];
    function typerep_of_ref$0(of_a)
     {var name_of_ref=caml_call1(Typename_of_ref[1],of_a);
      return [9,
              [0,
               name_of_ref,
               [0,[246,function(_bIi_){return typerep_of_t$21(of_a)}]]]]}
    var
     _To_=[0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_unit),0,_AX_],0],
     _Tp_=
      caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_std_internal_ml_113_2),
     group$88=caml_call2(Bin_prot_Shape[6],_Tp_,_To_),
     _Tq_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_unit$0),
     bin_shape_unit=caml_call1(caml_call2(Bin_prot_Shape[14],group$88,_Tq_),0),
     bin_writer_unit=[0,_AU_,_AV_],
     bin_reader_unit=[0,_AR_,_AS_],
     bin_unit=[0,bin_shape_unit,bin_writer_unit,bin_reader_unit];
    function hash_unit(x){return caml_call1(_A7_,x)}
    var
     Typename_of_unit=caml_call1(Typerep_lib_Make_typename[1],[0,name$44]),
     typename_of_unit$0=Typename_of_unit[2],
     name_of_unit=Typename_of_unit[1],
     typerep_of_unit$0=[9,[0,name_of_unit,[0,typerep_of_t$9]]],
     _Tr_=Bin_prot_Std[94],
     _Ts_=
      [0,
       [0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_float_array),0,_Tr_],
       0],
     _Tt_=
      caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_std_internal_ml_116_2),
     group$89=caml_call2(Bin_prot_Shape[6],_Tt_,_Ts_),
     _Tu_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_float_array$0),
     bin_shape_float_array=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$89,_Tu_),0),
     bin_size_float_array=Bin_prot_Std[28],
     bin_write_float_array=Bin_prot_Std[96],
     bin_writer_float_array=[0,bin_size_float_array,bin_write_float_array],
     bin_read_float_array=Bin_prot_Std[99],
     bin_read_float_array$0=Bin_prot_Std[98],
     bin_reader_float_array=[0,bin_read_float_array$0,bin_read_float_array],
     bin_float_array=
      [0,bin_shape_float_array,bin_writer_float_array,bin_reader_float_array];
    function compare_float_array(a_041,b_042)
     {return caml_call3(_iI_,compare$48,a_041,b_042)}
    function float_array_of_sexp(t){return caml_call2(_iK_,t_of_sexp$47,t)}
    function sexp_of_float_array(v){return caml_call2(_iJ_,sexp_of_t$59,v)}
    var
     Typename_of_float_array=
      caml_call1(Typerep_lib_Make_typename[1],[0,name$45]),
     typename_of_float_array=Typename_of_float_array[2],
     name_of_float_array=Typename_of_float_array[1],
     typerep_of_float_array=
      [9,
       [0,
        name_of_float_array,
        [0,[246,function(_bIh_){return typerep_of_array$0(typerep_of_t$15)}]]]],
     _Tv_=Base_Exn[1],
     _Tw_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$65),
     _Tx_=
      caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_std_internal_ml_165_22),
     _Ty_=bin_shape_array(caml_call2(Bin_prot_Shape[15],_Tx_,_Tw_)),
     _Tz_=[0,caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$66),0],
     _TA_=
      [0,
       [0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_sexp_array),_Tz_,_Ty_],
       0],
     _TB_=
      caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_std_internal_ml_165_0),
     group$90=caml_call2(Bin_prot_Shape[6],_TB_,_TA_);
    function bin_shape_sexp_array(a)
     {var _bIg_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_sexp_array$0);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$90,_bIg_),[0,a,0])}
    function bin_size_sexp_array(size_of_a,v)
     {return bin_size_array(size_of_a,v)}
    function bin_write_sexp_array(write_a,buf,pos,v)
     {return bin_write_array(write_a,buf,pos,v)}
    function bin_writer_sexp_array(bin_writer_a)
     {function _bIc_(v)
       {var _bId_=bin_writer_a[2];
        return function(_bIe_,_bIf_)
         {return bin_write_sexp_array(_bId_,v,_bIe_,_bIf_)}}
      return [0,
              function(v){return bin_size_sexp_array(bin_writer_a[1],v)},
              _bIc_]}
    function bin_read_sexp_array(of_a,buf,pos_ref,vint)
     {return bin_read_array(of_a,buf,pos_ref,vint)}
    function bin_read_sexp_array$0(of_a,buf,pos_ref)
     {return bin_read_array$0(of_a,buf,pos_ref)}
    function bin_reader_sexp_array(bin_reader_a)
     {function _bIb_(buf,pos_ref,vtag)
       {return bin_read_sexp_array(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_sexp_array$0(bin_reader_a[1],buf,pos_ref)},
              _bIb_]}
    function bin_sexp_array(bin_a)
     {var
       _bH$_=bin_reader_sexp_array(bin_a[3]),
       _bIa_=bin_writer_sexp_array(bin_a[2]);
      return [0,bin_shape_sexp_array(bin_a[1]),_bIa_,_bH$_]}
    var
     Typename_of_sexp_array=
      caml_call1(Typerep_lib_Make_typename[2],[0,name$46]),
     _TC_=Typename_of_sexp_array[2];
    function typerep_of_sexp_array(of_a)
     {var name_of_sexp_array=caml_call1(Typename_of_sexp_array[1],of_a);
      return [9,
              [0,
               name_of_sexp_array,
               [0,[246,function(_bH__){return typerep_of_array$0(of_a)}]]]]}
    var
     _TD_=
      [0,
       [0,
        caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_sexp_bool),
        0,
        bin_shape_bool],
       0],
     _TE_=
      caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_std_internal_ml_166_0),
     group$91=caml_call2(Bin_prot_Shape[6],_TE_,_TD_),
     _TF_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_sexp_bool$0),
     bin_shape_sexp_bool=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$91,_TF_),0),
     bin_writer_sexp_bool=[0,_bb_,_bW_],
     bin_reader_sexp_bool=[0,_bY_,_bZ_],
     bin_sexp_bool=
      [0,bin_shape_sexp_bool,bin_writer_sexp_bool,bin_reader_sexp_bool];
    function hash_sexp_bool(x){return hash_bool(x)}
    var
     Typename_of_sexp_bool=
      caml_call1(Typerep_lib_Make_typename[1],[0,name$47]),
     typename_of_sexp_bool=Typename_of_sexp_bool[2],
     name_of_sexp_bool=Typename_of_sexp_bool[1],
     typerep_of_sexp_bool=[9,[0,name_of_sexp_bool,[0,typerep_of_bool$0]]],
     _TG_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$67),
     _TH_=
      caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_std_internal_ml_167_22),
     _TI_=bin_shape_list(caml_call2(Bin_prot_Shape[15],_TH_,_TG_)),
     _TJ_=[0,caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$68),0],
     _TK_=
      [0,
       [0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_sexp_list),_TJ_,_TI_],
       0],
     _TL_=
      caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_std_internal_ml_167_0),
     group$92=caml_call2(Bin_prot_Shape[6],_TL_,_TK_);
    function bin_shape_sexp_list(a)
     {var _bH9_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_sexp_list$0);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$92,_bH9_),[0,a,0])}
    function bin_size_sexp_list(size_of_a,v)
     {return bin_size_list(size_of_a,v)}
    function bin_write_sexp_list(write_a,buf,pos,v)
     {return bin_write_list(write_a,buf,pos,v)}
    function bin_writer_sexp_list(bin_writer_a)
     {function _bH5_(v)
       {var _bH6_=bin_writer_a[2];
        return function(_bH7_,_bH8_)
         {return bin_write_sexp_list(_bH6_,v,_bH7_,_bH8_)}}
      return [0,
              function(v){return bin_size_sexp_list(bin_writer_a[1],v)},
              _bH5_]}
    function bin_read_sexp_list(of_a,buf,pos_ref,vint)
     {return bin_read_list(of_a,buf,pos_ref,vint)}
    function bin_read_sexp_list$0(of_a,buf,pos_ref)
     {return bin_read_list$0(of_a,buf,pos_ref)}
    function bin_reader_sexp_list(bin_reader_a)
     {function _bH4_(buf,pos_ref,vtag)
       {return bin_read_sexp_list(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_sexp_list$0(bin_reader_a[1],buf,pos_ref)},
              _bH4_]}
    function bin_sexp_list(bin_a)
     {var
       _bH2_=bin_reader_sexp_list(bin_a[3]),
       _bH3_=bin_writer_sexp_list(bin_a[2]);
      return [0,bin_shape_sexp_list(bin_a[1]),_bH3_,_bH2_]}
    var
     Typename_of_sexp_list=
      caml_call1(Typerep_lib_Make_typename[2],[0,name$48]),
     _TM_=Typename_of_sexp_list[2];
    function typerep_of_sexp_list(of_a)
     {var name_of_sexp_list=caml_call1(Typename_of_sexp_list[1],of_a);
      return [9,
              [0,
               name_of_sexp_list,
               [0,[246,function(_bH1_){return typerep_of_list$0(of_a)}]]]]}
    var
     _TN_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$69),
     _TO_=
      caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_std_internal_ml_168_22),
     _TP_=bin_shape_option(caml_call2(Bin_prot_Shape[15],_TO_,_TN_)),
     _TQ_=[0,caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$70),0],
     _TR_=
      [0,
       [0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_sexp_option),_TQ_,_TP_],
       0],
     _TS_=
      caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_std_internal_ml_168_0),
     group$93=caml_call2(Bin_prot_Shape[6],_TS_,_TR_);
    function bin_shape_sexp_option(a)
     {var _bH0_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_sexp_option$0);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$93,_bH0_),[0,a,0])}
    function bin_size_sexp_option(size_of_a,v)
     {return bin_size_option(size_of_a,v)}
    function bin_write_sexp_option(write_a,buf,pos,v)
     {return bin_write_option(write_a,buf,pos,v)}
    function bin_writer_sexp_option(bin_writer_a)
     {function _bHW_(v)
       {var _bHX_=bin_writer_a[2];
        return function(_bHY_,_bHZ_)
         {return bin_write_sexp_option(_bHX_,v,_bHY_,_bHZ_)}}
      return [0,
              function(v){return bin_size_sexp_option(bin_writer_a[1],v)},
              _bHW_]}
    function bin_read_sexp_option(of_a,buf,pos_ref,vint)
     {return bin_read_option(of_a,buf,pos_ref,vint)}
    function bin_read_sexp_option$0(of_a,buf,pos_ref)
     {return bin_read_option$0(of_a,buf,pos_ref)}
    function bin_reader_sexp_option(bin_reader_a)
     {function _bHV_(buf,pos_ref,vtag)
       {return bin_read_sexp_option(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_sexp_option$0(bin_reader_a[1],buf,pos_ref)},
              _bHV_]}
    function bin_sexp_option(bin_a)
     {var
       _bHT_=bin_reader_sexp_option(bin_a[3]),
       _bHU_=bin_writer_sexp_option(bin_a[2]);
      return [0,bin_shape_sexp_option(bin_a[1]),_bHU_,_bHT_]}
    var
     Typename_of_sexp_option=
      caml_call1(Typerep_lib_Make_typename[2],[0,name$49]),
     _TT_=Typename_of_sexp_option[2];
    function typerep_of_sexp_option(of_a)
     {var name_of_sexp_option=caml_call1(Typename_of_sexp_option[1],of_a);
      return [9,
              [0,
               name_of_sexp_option,
               [0,[246,function(_bHS_){return typerep_of_option$0(of_a)}]]]]}
    var
     _TU_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$71),
     _TV_=
      caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_std_internal_ml_170_22),
     _TW_=caml_call2(Bin_prot_Shape[15],_TV_,_TU_),
     _TX_=[0,caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$72),0],
     _TY_=
      [0,
       [0,
        caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_sexp_opaque$1),
        _TX_,
        _TW_],
       0],
     _TZ_=
      caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_std_internal_ml_170_0),
     group$94=caml_call2(Bin_prot_Shape[6],_TZ_,_TY_);
    function bin_shape_sexp_opaque$0(a)
     {var _bHR_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_sexp_opaque$2);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$94,_bHR_),[0,a,0])}
    function bin_size_sexp_opaque$0(size_of_a){return size_of_a}
    function bin_write_sexp_opaque$0(write_a){return write_a}
    function bin_writer_sexp_opaque$0(bin_writer_a)
     {function _bHQ_(v){return caml_call1(bin_writer_a[2],v)}
      return [0,function(v){return caml_call1(bin_writer_a[1],v)},_bHQ_]}
    function bin_read_sexp_opaque$1(of_a,buf,pos_ref,vint)
     {return caml_call2(Bin_prot_Common[18],_T0_,pos_ref[1])}
    function bin_read_sexp_opaque$2(of_a){return of_a}
    function bin_reader_sexp_opaque$0(bin_reader_a)
     {function _bHP_(buf,pos_ref,vtag)
       {return bin_read_sexp_opaque$1(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return caml_call2(bin_reader_a[1],buf,pos_ref)},
              _bHP_]}
    function bin_sexp_opaque$0(bin_a)
     {var
       _bHN_=bin_reader_sexp_opaque$0(bin_a[3]),
       _bHO_=bin_writer_sexp_opaque$0(bin_a[2]);
      return [0,bin_shape_sexp_opaque$0(bin_a[1]),_bHO_,_bHN_]}
    function compare_sexp_opaque$0(cmp_a,a_059,b_060)
     {return caml_call2(cmp_a,a_059,b_060)}
    function hash_fold_sexp_opaque$0(hash_fold_a,hsv,arg)
     {return caml_call2(hash_fold_a,hsv,arg)}
    var
     Typename_of_sexp_opaque$0=
      caml_call1(Typerep_lib_Make_typename[2],[0,name$50]),
     typename_of_sexp_opaque$0=Typename_of_sexp_opaque$0[2];
    function typerep_of_sexp_opaque$0(of_a)
     {var name_of_sexp_opaque=caml_call1(Typename_of_sexp_opaque$0[1],of_a);
      return [9,[0,name_of_sexp_opaque,[0,of_a]]]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$235);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Std_internal=
      [0,
       invalid_arg,
       failwith,
       Exit,
       min$5,
       max$5,
       abs$3,
       max_int,
       min_int,
       lnot$3,
       infinity,
       neg_infinity,
       nan,
       max_float,
       min_float,
       epsilon_float,
       _Dw_,
       char_of_int,
       string_of_bool,
       bool_of_string,
       string_of_int,
       string_of_float,
       stdin,
       stdout,
       stderr,
       print_char,
       print_string,
       print_bytes,
       print_int,
       print_float,
       print_endline,
       print_newline,
       prerr_char,
       prerr_string,
       prerr_bytes,
       prerr_int,
       prerr_float,
       prerr_endline,
       prerr_newline,
       read_line,
       read_int,
       read_float,
       open_out,
       open_out_bin,
       open_out_gen,
       flush,
       flush_all,
       output_char,
       output_string,
       output_bytes,
       output,
       output_substring,
       output_byte,
       output_binary_int,
       output_value,
       seek_out,
       pos_out,
       out_channel_length,
       close_out,
       close_out_noerr,
       set_binary_mode_out,
       open_in,
       open_in_bin,
       open_in_gen,
       input_char,
       input_line,
       input,
       really_input,
       really_input_string,
       input_byte,
       input_binary_int,
       input_value,
       seek_in,
       pos_in,
       in_channel_length,
       close_in,
       close_in_noerr,
       set_binary_mode_in,
       LargeFile,
       string_of_format,
       _Dy_,
       exit,
       at_exit,
       valid_float_lexem,
       unsafe_really_input,
       do_at_exit,
       _hQ_,
       _IB_,
       _IC_,
       _ID_,
       _IE_,
       _IF_,
       _IG_,
       robustly_compare,
       t_of_sexp$58,
       sexpifier,
       _QU_,
       _QV_,
       _QW_,
       _QX_,
       _QY_,
       _QZ_,
       _Q0_,
       _Q1_,
       _Q2_,
       _Q3_,
       _Q4_,
       _Q5_,
       _Nz_,
       never_returns,
       _Q6_,
       _Q7_,
       _Q8_,
       _Q9_,
       _Q__,
       _Q$_,
       _Ra_,
       _Rb_,
       _Rc_,
       _Rd_,
       _Re_,
       _Rf_,
       _Rg_,
       _Rh_,
       _Ri_,
       _Rj_,
       _Rk_,
       _Rl_,
       _Rm_,
       _Rn_,
       _Ro_,
       _Rp_,
       _Rq_,
       _Rr_,
       _Rs_,
       _Rt_,
       _Ru_,
       _Rv_,
       _Rw_,
       _Rx_,
       _Ry_,
       _Rz_,
       _RA_,
       _RB_,
       _RC_,
       _RD_,
       _RE_,
       _RF_,
       _RG_,
       _RH_,
       _RI_,
       _RJ_,
       _RK_,
       _RL_,
       _RM_,
       _RN_,
       _RO_,
       _RP_,
       _RQ_,
       _RR_,
       _RS_,
       _RT_,
       _RU_,
       _RV_,
       _RW_,
       _RX_,
       _RY_,
       _RZ_,
       Bug,
       C_malloc_exn,
       _R3_,
       fst3,
       snd3,
       trd3,
       uw,
       _wX_,
       _wY_,
       _wU_,
       _R4_,
       print_s,
       _eK_,
       _hR_,
       _eO_,
       _lv_,
       _lw_,
       _R5_,
       failwithp,
       failwiths,
       force,
       _eP_,
       ident,
       _R6_,
       _eI_,
       is_none,
       is_some,
       _eL_,
       _ls_,
       _R7_,
       phys_same,
       _eR_,
       _R8_,
       _R9_,
       _kM_,
       round$3,
       _eJ_,
       _R__,
       _R$_,
       _Sa_,
       _Sb_,
       _Sc_,
       _Sd_,
       _Se_,
       _Sf_,
       _Sg_,
       _Sh_,
       _Si_,
       _Sj_,
       _Sk_,
       _Sl_,
       _Sm_,
       _Sn_,
       _So_,
       _Sp_,
       bin_array,
       bin_read_array$0,
       bin_read_array,
       bin_reader_array,
       bin_size_array,
       bin_write_array,
       bin_writer_array,
       bin_shape_array,
       _iI_,
       _iK_,
       _iJ_,
       typerep_of_array$0,
       _Sw_,
       bin_bool,
       _bY_,
       _bZ_,
       bin_reader_bool,
       _bb_,
       _bW_,
       bin_writer_bool,
       bin_shape_bool,
       _BS_,
       _BF_,
       hash_bool,
       _Bz_,
       _BA_,
       typerep_of_bool$0,
       typename_of_bool$0,
       bin_char,
       _Ci_,
       _Ch_,
       bin_reader_char,
       _Cf_,
       _Ce_,
       bin_writer_char,
       bin_shape_char,
       _Cx_,
       _Cl_,
       hash_char,
       _Cn_,
       _Co_,
       typerep_of_char$0,
       typename_of_char$0,
       bin_float,
       bin_read_t$5,
       bin_read_t$6,
       bin_reader_float,
       bin_size_t$2,
       bin_write_t$2,
       bin_writer_float,
       bin_shape_float,
       compare$48,
       hash_fold_t$27,
       hash_float,
       t_of_sexp$47,
       sexp_of_t$59,
       typerep_of_float$0,
       typename_of_float$0,
       bin_int,
       bin_read_t$74,
       bin_read_t$73,
       bin_reader_int,
       bin_size_t$36,
       bin_write_t$36,
       bin_writer_int,
       bin_shape_int,
       compare$30,
       hash_fold_t$15,
       hash_int,
       t_of_sexp$32,
       sexp_of_t$43,
       typerep_of_int$0,
       typename_of_int$0,
       bin_int32,
       bin_read_t$91,
       bin_read_t$92,
       bin_reader_int32,
       bin_size_t$45,
       bin_write_t$45,
       bin_writer_int32,
       bin_shape_int32,
       _KS_,
       _K5_,
       hash_int32,
       _K3_,
       _K2_,
       typerep_of_int32$0,
       typename_of_int32$0,
       bin_int64,
       bin_read_t$75,
       bin_read_t$76,
       bin_reader_int64,
       bin_size_t$37,
       bin_write_t$37,
       bin_writer_int64,
       bin_shape_int64,
       _y1_,
       _zc_,
       hash_int64,
       _za_,
       _y$_,
       typerep_of_int64$0,
       typename_of_int64$0,
       bin_lazy_t,
       bin_read_lazy_t$0,
       bin_read_lazy_t,
       bin_reader_lazy_t,
       bin_size_lazy_t,
       bin_write_lazy_t,
       bin_writer_lazy_t,
       bin_shape_lazy_t,
       _Ll_,
       _Lm_,
       _Ln_,
       _Lo_,
       typerep_of_lazy_t$0,
       _SV_,
       bin_list,
       bin_read_list$0,
       bin_read_list,
       bin_reader_list,
       bin_size_list,
       bin_write_list,
       bin_writer_list,
       bin_shape_list,
       compare$19,
       hash_fold_t$12,
       t_of_sexp$23,
       sexp_of_t$25,
       typerep_of_list$0,
       _S2_,
       bin_nativeint,
       bin_read_t$95,
       bin_read_t$96,
       bin_reader_nativeint,
       bin_size_t$47,
       bin_write_t$47,
       bin_writer_nativeint,
       bin_shape_nativeint,
       _MW_,
       _M9_,
       hash_nativeint,
       _M7_,
       _M6_,
       typerep_of_nativeint$0,
       typename_of_nativeint$0,
       bin_option,
       bin_read_option$0,
       bin_read_option,
       bin_reader_option,
       bin_size_option,
       bin_write_option,
       bin_writer_option,
       bin_shape_option,
       compare$27,
       hash_fold_t$13,
       t_of_sexp$29,
       sexp_of_t$39,
       typerep_of_option$0,
       _Ta_,
       bin_string,
       bin_read_t$89,
       bin_read_t$90,
       bin_reader_string,
       bin_size_t$44,
       bin_write_t$44,
       bin_writer_string,
       bin_shape_string,
       compare$47,
       hash_fold_t$25,
       hash_string,
       t_of_sexp$46,
       sexp_of_t$58,
       typerep_of_string$0,
       typename_of_string$0,
       bin_bytes,
       bin_read_t$1,
       bin_read_t$2,
       bin_reader_bytes,
       bin_size_t$0,
       bin_write_t$0,
       bin_writer_bytes,
       bin_shape_bytes,
       compare$38,
       t_of_sexp$40,
       sexp_of_t$51,
       typerep_of_bytes$0,
       typename_of_bytes$0,
       bin_ref,
       bin_read_ref$0,
       bin_read_ref,
       bin_reader_ref,
       bin_size_ref,
       bin_write_ref,
       bin_writer_ref,
       bin_shape_ref,
       _Oj_,
       _Ok_,
       _Ol_,
       typerep_of_ref$0,
       _Tn_,
       bin_unit,
       _AR_,
       _AS_,
       bin_reader_unit,
       _AU_,
       _AV_,
       bin_writer_unit,
       bin_shape_unit,
       _Bh_,
       _A6_,
       hash_unit,
       _A8_,
       _A9_,
       typerep_of_unit$0,
       typename_of_unit$0,
       bin_float_array,
       bin_read_float_array$0,
       bin_read_float_array,
       bin_reader_float_array,
       bin_size_float_array,
       bin_write_float_array,
       bin_writer_float_array,
       bin_shape_float_array,
       compare_float_array,
       float_array_of_sexp,
       sexp_of_float_array,
       typerep_of_float_array,
       typename_of_float_array,
       _Tv_,
       bin_shape_sexp_array,
       bin_size_sexp_array,
       bin_write_sexp_array,
       bin_writer_sexp_array,
       bin_read_sexp_array,
       bin_read_sexp_array$0,
       bin_reader_sexp_array,
       bin_sexp_array,
       _iI_,
       Typename_of_sexp_array,
       _TC_,
       typerep_of_sexp_array,
       bin_shape_sexp_bool,
       _bb_,
       _bW_,
       bin_writer_sexp_bool,
       _bZ_,
       _bY_,
       bin_reader_sexp_bool,
       bin_sexp_bool,
       _BS_,
       _BF_,
       hash_sexp_bool,
       Typename_of_sexp_bool,
       typename_of_sexp_bool,
       typerep_of_sexp_bool,
       bin_shape_sexp_list,
       bin_size_sexp_list,
       bin_write_sexp_list,
       bin_writer_sexp_list,
       bin_read_sexp_list,
       bin_read_sexp_list$0,
       bin_reader_sexp_list,
       bin_sexp_list,
       compare$19,
       hash_fold_t$12,
       Typename_of_sexp_list,
       _TM_,
       typerep_of_sexp_list,
       bin_shape_sexp_option,
       bin_size_sexp_option,
       bin_write_sexp_option,
       bin_writer_sexp_option,
       bin_read_sexp_option,
       bin_read_sexp_option$0,
       bin_reader_sexp_option,
       bin_sexp_option,
       compare$27,
       hash_fold_t$13,
       Typename_of_sexp_option,
       _TT_,
       typerep_of_sexp_option,
       bin_shape_sexp_opaque$0,
       bin_size_sexp_opaque$0,
       bin_write_sexp_opaque$0,
       bin_writer_sexp_opaque$0,
       bin_read_sexp_opaque$1,
       bin_read_sexp_opaque$2,
       bin_reader_sexp_opaque$0,
       bin_sexp_opaque$0,
       compare_sexp_opaque$0,
       hash_fold_sexp_opaque$0,
       Typename_of_sexp_opaque$0,
       typename_of_sexp_opaque$0,
       typerep_of_sexp_opaque$0];
    caml_register_global
     (7463,Core_kernel_Std_internal,"Core_kernel__Std_internal");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$236);
    caml_call1(Expect_test_collector[4][1],cst_src_byte_units_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$237,cst$86);
    var
     bytes_per_word=0 === Base_Word_size[3]?4:8,
     kbyte=1024,
     mbyte=1048576,
     gbyte=1073741824;
    function t_of_sexp$59(sexp)
     {if(0 === sexp[0])
       {var atom=sexp[1];
        return caml_string_notequal(atom,cst_Bytes)
                ?caml_string_notequal(atom,cst_Gigabytes)
                  ?caml_string_notequal(atom,cst_Kilobytes)
                    ?caml_string_notequal(atom,cst_Megabytes)
                      ?caml_string_notequal(atom,cst_Words)
                        ?caml_call1(Sexplib0_Sexp_conv_error[18],0)
                        :caml_call2(Sexplib0_Sexp_conv_error[22],tp_loc$22,sexp)
                      :caml_call2(Sexplib0_Sexp_conv_error[22],tp_loc$22,sexp)
                    :caml_call2(Sexplib0_Sexp_conv_error[22],tp_loc$22,sexp)
                  :caml_call2(Sexplib0_Sexp_conv_error[22],tp_loc$22,sexp)
                :caml_call2(Sexplib0_Sexp_conv_error[22],tp_loc$22,sexp)}
      var _bHL_=sexp[1];
      if(_bHL_)
       {var _bHM_=_bHL_[1];
        if(0 === _bHM_[0])
         {var sexp_args=_bHL_[2],atom$0=_bHM_[1];
          if(caml_string_notequal(atom$0,cst_Bytes$0))
           {if(caml_string_notequal(atom$0,cst_Gigabytes$0))
             {if(caml_string_notequal(atom$0,cst_Kilobytes$0))
               {if(caml_string_notequal(atom$0,cst_Megabytes$0))
                 {if(caml_string_notequal(atom$0,cst_Words$0))
                   return caml_call1(Sexplib0_Sexp_conv_error[18],0);
                  if(sexp_args)
                   if(! sexp_args[2])
                    {var v0=sexp_args[1],v0$0=caml_call1(t_of_sexp$47,v0);
                     return [0,-510525623,v0$0]}
                  return caml_call3
                          (Sexplib0_Sexp_conv_error[21],tp_loc$22,atom$0,sexp)}
                if(sexp_args)
                 if(! sexp_args[2])
                  {var v0$1=sexp_args[1],v0$2=caml_call1(t_of_sexp$47,v0$1);
                   return [0,-992187495,v0$2]}
                return caml_call3
                        (Sexplib0_Sexp_conv_error[21],tp_loc$22,atom$0,sexp)}
              if(sexp_args)
               if(! sexp_args[2])
                {var v0$3=sexp_args[1],v0$4=caml_call1(t_of_sexp$47,v0$3);
                 return [0,-324157174,v0$4]}
              return caml_call3
                      (Sexplib0_Sexp_conv_error[21],tp_loc$22,atom$0,sexp)}
            if(sexp_args)
             if(! sexp_args[2])
              {var v0$5=sexp_args[1],v0$6=caml_call1(t_of_sexp$47,v0$5);
               return [0,939376143,v0$6]}
            return caml_call3
                    (Sexplib0_Sexp_conv_error[21],tp_loc$22,atom$0,sexp)}
          if(sexp_args)
           if(! sexp_args[2])
            {var v0$7=sexp_args[1],v0$8=caml_call1(t_of_sexp$47,v0$7);
             return [0,-792364981,v0$8]}
          return caml_call3
                  (Sexplib0_Sexp_conv_error[21],tp_loc$22,atom$0,sexp)}
        return caml_call2(Sexplib0_Sexp_conv_error[23],tp_loc$22,sexp)}
      return caml_call2(Sexplib0_Sexp_conv_error[24],tp_loc$22,sexp)}
    function t_of_sexp$60(sexp)
     {if(0 === sexp[0])
       {var atom=sexp[1];
        return caml_string_notequal(atom,cst_Bytes$1)
                ?caml_string_notequal(atom,cst_Gigabytes$1)
                  ?caml_string_notequal(atom,cst_Kilobytes$1)
                    ?caml_string_notequal(atom,cst_Megabytes$1)
                      ?caml_string_notequal(atom,cst_Words$1)
                        ?caml_call1(Sexplib0_Sexp_conv_error[18],0)
                        :-510525623
                      :-992187495
                    :-324157174
                  :939376143
                :-792364981}
      var _bHJ_=sexp[1];
      if(_bHJ_)
       {var _bHK_=_bHJ_[1];
        if(0 === _bHK_[0])
         {var atom$0=_bHK_[1];
          return caml_string_notequal(atom$0,cst_Bytes$2)
                  ?caml_string_notequal(atom$0,cst_Gigabytes$2)
                    ?caml_string_notequal(atom$0,cst_Kilobytes$2)
                      ?caml_string_notequal(atom$0,cst_Megabytes$2)
                        ?caml_string_notequal(atom$0,cst_Words$2)
                          ?caml_call1(Sexplib0_Sexp_conv_error[18],0)
                          :caml_call2(Sexplib0_Sexp_conv_error[20],tp_loc$24,sexp)
                        :caml_call2(Sexplib0_Sexp_conv_error[20],tp_loc$24,sexp)
                      :caml_call2(Sexplib0_Sexp_conv_error[20],tp_loc$24,sexp)
                    :caml_call2(Sexplib0_Sexp_conv_error[20],tp_loc$24,sexp)
                  :caml_call2(Sexplib0_Sexp_conv_error[20],tp_loc$24,sexp)}
        return caml_call2(Sexplib0_Sexp_conv_error[23],tp_loc$24,sexp)}
      return caml_call2(Sexplib0_Sexp_conv_error[24],tp_loc$24,sexp)}
    function t_of_sexp$61(sexp)
     {try
       {var _bHH_=t_of_sexp$60(sexp);return _bHH_}
      catch(_bHI_)
       {_bHI_ = caml_wrap_exception(_bHI_);
        if(_bHI_ === Sexplib0_Sexp_conv_error[17])
         return caml_call2(Sexplib0_Sexp_conv_error[19],tp_loc$25,sexp);
        throw _bHI_}}
    function sexp_of_t$69(param)
     {return -792364981 === param
              ?_T6_
              :-324157174 <= param
                ?939376143 <= param?_T7_:_T8_
                :-510525623 <= param?_T9_:_T__}
    var
     _T$_=[0,caml_call2(Bin_prot_Shape[10],cst_Words$3,0),0],
     _Ua_=[0,caml_call2(Bin_prot_Shape[10],cst_Gigabytes$3,0),_T$_],
     _Ub_=[0,caml_call2(Bin_prot_Shape[10],cst_Megabytes$3,0),_Ua_],
     _Uc_=[0,caml_call2(Bin_prot_Shape[10],cst_Kilobytes$3,0),_Ub_],
     _Ud_=[0,caml_call2(Bin_prot_Shape[10],cst_Bytes$3,0),_Uc_],
     _Ue_=
      caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_byte_units_ml_30_11),
     _Uf_=caml_call2(Bin_prot_Shape[12],_Ue_,_Ud_),
     _Ug_=[0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$148),0,_Uf_],0],
     _Uh_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_byte_units_ml_30_2),
     group$95=caml_call2(Bin_prot_Shape[6],_Uh_,_Ug_),
     _Ui_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$149),
     bin_shape_t$71=caml_call1(caml_call2(Bin_prot_Shape[14],group$95,_Ui_),0);
    function bin_size_t$54(param){return 4}
    function bin_write_t$55(buf,pos,param)
     {return -792364981 === param
              ?caml_call3(Bin_prot_Write[29],buf,pos,-792364981)
              :-324157174 <= param
                ?939376143 <= param
                  ?caml_call3(Bin_prot_Write[29],buf,pos,939376143)
                  :caml_call3(Bin_prot_Write[29],buf,pos,-324157174)
                :-510525623 <= param
                  ?caml_call3(Bin_prot_Write[29],buf,pos,-510525623)
                  :caml_call3(Bin_prot_Write[29],buf,pos,-992187495)}
    var bin_writer_t$66=[0,bin_size_t$54,bin_write_t$55];
    function bin_read_t$111(buf,param,vint)
     {if(-510525623 <= vint)
       {if(-324157174 === vint)return -324157174;
        if(939376143 === vint)return 939376143;
        if(! (-510525622 <= vint))return -510525623}
      else
       {if(-992187495 === vint)return -992187495;
        if(-792364981 === vint)return -792364981}
      throw Bin_prot_Common[13]}
    function bin_read_t$112(buf,pos_ref)
     {var vint=caml_call2(Bin_prot_Read[28],buf,pos_ref);
      try
       {var _bHF_=bin_read_t$111(buf,pos_ref,vint);return _bHF_}
      catch(_bHG_)
       {_bHG_ = caml_wrap_exception(_bHG_);
        if(_bHG_ === Bin_prot_Common[13])
         return caml_call2(Bin_prot_Common[18],err$4,pos_ref[1]);
        throw _bHG_}}
    var
     bin_reader_t$66=[0,bin_read_t$112,bin_read_t$111],
     bin_t$66=[0,bin_shape_t$71,bin_writer_t$66,bin_reader_t$66];
    function bytes(param)
     {return -792364981 === param
              ?1
              :-324157174 <= param
                ?939376143 <= param?gbyte:kbyte
                :-510525623 <= param?bytes_per_word:mbyte}
    var
     _Uj_=
      [0,
       [0,
        caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$150),
        0,
        bin_shape_float],
       0],
     _Uk_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_byte_units_ml_44_4),
     group$96=caml_call2(Bin_prot_Shape[6],_Uk_,_Uj_),
     _Ul_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$151),
     bin_shape_t$72=caml_call1(caml_call2(Bin_prot_Shape[14],group$96,_Ul_),0),
     bin_writer_t$67=[0,bin_size_t$2,bin_write_t$2],
     bin_reader_t$67=[0,bin_read_t$5,bin_read_t$6],
     bin_t$67=[0,bin_shape_t$72,bin_writer_t$67,bin_reader_t$67],
     Infix$1=[0,_Ir_,_Is_,_Iq_,_Iq_];
    function largest_measure(t)
     {return caml_call2(_Iv_,t,gbyte)
              ?939376143
              :caml_call2(_Iv_,t,mbyte)
                ?-992187495
                :caml_call2(_Iv_,t,kbyte)?-324157174:-792364981}
    function number_of_measures(t,measure){return t / bytes(measure)}
    function create$17(m,n){return n * bytes(m)}
    function internalize(t)
     {var _bHE_=t[1];
      if(-792364981 === _bHE_){var n=t[2];return create$17(-792364981,n)}
      if(-324157174 <= _bHE_)
       {if(939376143 <= _bHE_){var n$0=t[2];return create$17(939376143,n$0)}
        var n$1=t[2];
        return create$17(-324157174,n$1)}
      if(-510525623 <= _bHE_){var n$2=t[2];return create$17(-510525623,n$2)}
      var n$3=t[2];
      return create$17(-992187495,n$3)}
    function of_string$15(s)
     {var length=caml_ml_string_length(s);
      if(length < 2)caml_call3(_R6_,_Um_,s,0);
      var
       base_str=caml_call3(_HE_,s,0,length - 1 | 0),
       ext_char=caml_call1(_CQ_,caml_string_get(s,length - 1 | 0));
      try
       {var _bHC_=caml_call1(of_string$8,base_str),base=_bHC_}
      catch(_bHD_){var base=caml_call4(_R6_,_Un_,s,base_str,0)}
      var switcher=ext_char - 98 | 0;
      if(21 < switcher >>> 0)
       var switch$0=0;
      else
       {switch(switcher)
         {case 0:var _bHB_=-792364981,switch$1=1;break;
          case 5:var _bHB_=939376143,switch$1=1;break;
          case 9:var _bHB_=-324157174,switch$1=1;break;
          case 11:var _bHB_=-992187495,switch$1=1;break;
          case 21:var _bHB_=-510525623,switch$1=1;break;
          default:var switch$0=0,switch$1=0}
        if(switch$1)var measure=_bHB_,switch$0=1}
      if(! switch$0)var measure=caml_call4(_R6_,_Uo_,s,ext_char,0);
      return create$17(measure,base)}
    function t_of_sexp$62(sexp)
     {if(0 === sexp[0])
       {var s=sexp[1];
        try
         {var _bHy_=of_string$15(s);return _bHy_}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          if(exn[1] === Invalid_argument)
           {var msg=exn[2];return caml_call2(_Q3_,msg,sexp)}
          throw exn}}
      try
       {var _bHx_=t_of_sexp$59(sexp),_bHz_=_bHx_}
      catch(_bHA_)
       {_bHA_ = caml_wrap_exception(_bHA_);
        if(_bHA_ !== Sexplib0_Sexp_conv_error[17])throw _bHA_;
        var _bHz_=caml_call2(Sexplib0_Sexp_conv_error[19],tp_loc$23,sexp)}
      return internalize(_bHz_)}
    function sexp_of_t$70(t)
     {var
       used_measure=largest_measure(t),
       v0=number_of_measures(t,used_measure),
       param=
        -792364981 === used_measure
         ?[0,-792364981,v0]
         :-324157174 <= used_measure
           ?939376143 <= used_measure?[0,939376143,v0]:[0,-324157174,v0]
           :-510525623 <= used_measure?[0,-510525623,v0]:[0,-992187495,v0],
       _bHw_=param[1];
      return -792364981 === _bHw_
              ?[1,[0,_T1_,[0,caml_call1(sexp_of_t$59,v0),0]]]
              :-324157174 <= _bHw_
                ?939376143 <= _bHw_
                  ?[1,[0,_T2_,[0,caml_call1(sexp_of_t$59,v0),0]]]
                  :[1,[0,_T3_,[0,caml_call1(sexp_of_t$59,v0),0]]]
                :-510525623 <= _bHw_
                  ?[1,[0,_T4_,[0,caml_call1(sexp_of_t$59,v0),0]]]
                  :[1,[0,_T5_,[0,caml_call1(sexp_of_t$59,v0),0]]]}
    function bytes$0(t){return t}
    function kilobytes(t){return t / 1024}
    function megabytes(t){return t / 1048576}
    function gigabytes(t){return t / 1073741824}
    function words(t){return t / bytes_per_word}
    function to_string_hum$11(measure,t)
     {if(measure)
       var m=measure[1],measure$0=m;
      else
       var measure$0=largest_measure(t);
      var
       ext=
        -792364981 === measure$0
         ?98
         :-324157174 <= measure$0
           ?939376143 <= measure$0?103:107
           :-510525623 <= measure$0?119:109;
      return caml_call3(_eJ_,_Up_,number_of_measures(t,measure$0),ext)}
    function to_string$16(t){return to_string_hum$11(0,t)}
    var
     _Uq_=Make$2([0,compare$48,t_of_sexp$62,sexp_of_t$70]),
     _Ur_=_Uq_[1],
     _Us_=_Uq_[2],
     _Ut_=_Uq_[3],
     _Uu_=_Uq_[4],
     _Uv_=_Uq_[5],
     _Uw_=_Uq_[6],
     _Ux_=_Uq_[7],
     _Uy_=_Uq_[9],
     _Uz_=_Uq_[10],
     _UA_=_Uq_[11],
     _UB_=_Uq_[12],
     _UC_=_Uq_[13],
     _UD_=_Uq_[14],
     _UE_=_Uq_[15],
     _UF_=_Uq_[16],
     _UG_=_Uq_[17],
     _UH_=_Uq_[18],
     _UI_=_Uq_[19],
     _UJ_=_Uq_[20],
     _UK_=_Uq_[21],
     _UL_=_Uq_[22],
     include$84=
      Make$5([0,hash_fold_t$27,t_of_sexp$62,compare$48,sexp_of_t$70,hash$20]),
     _UM_=include$84[1],
     _UN_=include$84[2],
     _UO_=include$84[3],
     _UP_=include$84[4],
     _UQ_=include$84[5],
     _UR_=include$84[6],
     _US_=include$84[7];
    function _UT_(param)
     {function f(measure,input,expected_output)
       {if(typeof measure === "number")
         var observed_output=to_string_hum$11(0,of_string$15(input));
        else
         var
          measure$1=measure[2],
          observed_output=to_string_hum$11([0,measure$1],of_string$15(input));
        var result=caml_call2(equal$27,expected_output,observed_output);
        if(1 - result)
         {if(typeof measure === "number")
           var _bHv_=_UU_;
          else
           var v0=measure[2],_bHv_=[1,[0,_UV_,[0,sexp_of_t$69(v0),0]]];
          var measure$0=caml_call1(_PM_,_bHv_);
          caml_call5
           (_eO_,_UW_,measure$0,input,expected_output,observed_output)}
        return result}
      function _bHl_(param){return f(151872764,cst_3b$0,cst_3b)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_f_Largest_3b_3b,
        0,
        cst_src_byte_units_ml$0,
        188,
        4,
        37,
        _bHl_);
      function _bHm_(param)
       {return f(151872764,cst_3w,caml_call2(_eJ_,_UX_,3 * bytes_per_word))}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_f_Largest_3w_sprintf_gb_3_0_bytes,
        0,
        cst_src_byte_units_ml$1,
        189,
        4,
        72,
        _bHm_);
      function _bHn_(param){return f(151872764,cst_3k$0,cst_3k)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_f_Largest_3k_3k,
        0,
        cst_src_byte_units_ml$2,
        190,
        4,
        37,
        _bHn_);
      function _bHo_(param){return f(151872764,cst_3m$0,cst_3m)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_f_Largest_3m_3m,
        0,
        cst_src_byte_units_ml$3,
        191,
        4,
        37,
        _bHo_);
      function _bHp_(param){return f(151872764,cst_3g$0,cst_3g)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_f_Largest_3g_3g,
        0,
        cst_src_byte_units_ml$4,
        192,
        4,
        37,
        _bHp_);
      function _bHq_(param){return f(_UY_,cst_3k$1,cst_3072b)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_f_Specific_Bytes_3k_3072b,
        0,
        cst_src_byte_units_ml$5,
        194,
        4,
        54,
        _bHq_);
      function _bHr_(param){return f(_UZ_,cst_3k$3,cst_3k$2)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_f_Specific_Kilobytes_3k_3k,
        0,
        cst_src_byte_units_ml$6,
        195,
        4,
        51,
        _bHr_);
      function _bHs_(param){return f(_U0_,cst_3k$4,cst_0_00292969m)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_f_Specific_Megabytes_3k_0_00292969m,
        0,
        cst_src_byte_units_ml$7,
        196,
        4,
        60,
        _bHs_);
      function _bHt_(param){return f(_U1_,cst_3k$5,cst_2_86102e_06g)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_f_Specific_Gigabytes_3k_2_86102e_06g,
        0,
        cst_src_byte_units_ml$8,
        197,
        4,
        61,
        _bHt_);
      function _bHu_(param)
       {return f(_U3_,cst_3k$6,caml_call2(_eJ_,_U2_,3072 / bytes_per_word))}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_f_Specific_Words_3k_sprintf_gw_3,
        0,
        cst_src_byte_units_ml$9,
        198,
        4,
        97,
        _bHu_);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst_of_to_string,
      0,
      cst_src_byte_units_ml$10,
      166,
      0,
      1208,
      _UT_);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$238);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Byte_units=
      [0,
       [0,
        t_of_sexp$61,
        t_of_sexp$60,
        sexp_of_t$69,
        bin_t$66,
        bin_read_t$112,
        bin_read_t$111,
        bin_reader_t$66,
        bin_size_t$54,
        bin_write_t$55,
        bin_writer_t$66,
        bin_shape_t$71],
       bin_t$67,
       bin_read_t$5,
       bin_read_t$6,
       bin_reader_t$67,
       bin_size_t$2,
       bin_write_t$2,
       bin_writer_t$67,
       bin_shape_t$72,
       t_of_sexp$62,
       sexp_of_t$70,
       create$17,
       _Ur_,
       _Us_,
       _Ut_,
       _Uu_,
       _Uv_,
       _Uw_,
       _Ux_,
       _Uy_,
       _Uz_,
       _UA_,
       _UB_,
       _UC_,
       _UD_,
       _UE_,
       _UF_,
       _UG_,
       _UH_,
       _UI_,
       _UJ_,
       _UK_,
       _UL_,
       _UM_,
       _UN_,
       _UO_,
       _UP_,
       _UQ_,
       _UR_,
       _US_,
       of_string$15,
       to_string$16,
       to_string_hum$11,
       bytes$0,
       kilobytes,
       megabytes,
       gigabytes,
       words,
       scale$0,
       Infix$1,
       [0,
        [0,
         bin_t$67,
         bin_read_t$5,
         bin_read_t$6,
         bin_reader_t$67,
         bin_size_t$2,
         bin_write_t$2,
         bin_writer_t$67,
         bin_shape_t$72,
         compare$48,
         t_of_sexp$62,
         sexp_of_t$70]]];
    caml_register_global
     (7464,Core_kernel_Byte_units,"Core_kernel__Byte_units");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$239);
    caml_call1(Expect_test_collector[4][1],cst_src_bigstring_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$240,cst$87);
    var
     _U4_=[0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$152),0,_dz_],0],
     _U5_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_bigstring_ml_10_2),
     group$97=caml_call2(Bin_prot_Shape[6],_U5_,_U4_),
     _U6_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$153),
     bin_shape_t$73=caml_call1(caml_call2(Bin_prot_Shape[14],group$97,_U6_),0),
     bin_writer_t$68=[0,bin_size_t$3,bin_write_t$3],
     bin_reader_t$68=[0,bin_read_t$7,bin_read_t$8],
     bin_t$68=[0,bin_shape_t$73,bin_writer_t$68,bin_reader_t$68],
     arch_sixtyfour=64 === Stdlib_sys[10]?1:0,
     arch_big_endian=Stdlib_sys[12];
    function create$18(max_mem_waiting_gc,size)
     {if(max_mem_waiting_gc)
       var
        v=max_mem_waiting_gc[1],
        max_mem_waiting_gc$0=caml_call1(to_int$2,v);
      else
       var max_mem_waiting_gc$0=-1;
      if(size < 0)caml_call3(_R6_,_U7_,size,0);
      return runtime.bigstring_alloc(max_mem_waiting_gc$0,size)}
    var length$20=caml_ba_dim_1;
    function init$6(n,f)
     {var t=create$18(0,n),_bHj_=n - 1 | 0,_bHi_=0;
      if(! (_bHj_ < 0))
       {var i=_bHi_;
        for(;;)
         {caml_ba_set_1(t,i,caml_call1(f,i));
          var _bHk_=i + 1 | 0;
          if(_bHj_ !== i){var i=_bHk_;continue}
          break}}
      return t}
    function check_args(loc,pos,len,bstr)
     {if(pos < 0)caml_call1(invalid_arg,caml_call2(_Dw_,loc,cst_pos_0));
      if(len < 0)caml_call1(invalid_arg,caml_call2(_Dw_,loc,cst_len_0));
      var bstr_len=caml_ba_dim_1(bstr),_bHh_=bstr_len < (pos + len | 0)?1:0;
      return _bHh_?caml_call1(invalid_arg,caml_call2(_eJ_,_U8_,loc)):_bHh_}
    function get_opt_len(bstr,pos,param)
     {if(param){var len=param[1];return len}
      return caml_ba_dim_1(bstr) - pos | 0}
    function sub_shared(opt,len,bstr)
     {if(opt)var sth=opt[1],pos=sth;else var pos=0;
      var len$0=get_opt_len(bstr,pos,len);
      return runtime.caml_ba_sub(bstr,pos,len$0)}
    function create$19(len){return create$18(0,len)}
    var get$5=caml_ba_get_1,set$8=caml_ba_set_1;
    function create$20(len){return caml_call1(create$13,len)}
    function of_bool$1(b){return b?97:98}
    var
     unsafe_blit$1=runtime.bigstring_blit_stub,
     include$85=
      caml_call1
       (caml_call1(Base_for_tests_Test_blit[5],[0,equal$22,of_bool$1]),
        [0,create$19,length$20,get$5,set$8,unsafe_blit$1]),
     blit$3=include$85[1],
     blito$3=include$85[2],
     unsafe_blit$2=include$85[3],
     sub$6=include$85[4],
     subo$3=include$85[5],
     From_bytes=
      caml_call1
       (caml_call1
         (caml_call1(Base_for_tests_Test_blit[6],[0,equal$22,of_bool$1]),
          [0,create$20,length$18,get$2,set$6]),
        [0,
         create$19,
         length$20,
         get$5,
         set$8,
         runtime.bigstring_blit_bytes_bigstring_stub]),
     To_bytes=
      caml_call1
       (caml_call1
         (caml_call1(Base_for_tests_Test_blit[6],[0,equal$22,of_bool$1]),
          [0,create$19,length$20,get$5,set$8]),
        [0,
         create$20,
         length$18,
         get$2,
         set$6,
         runtime.bigstring_blit_bigstring_bytes_stub]),
     length$21=caml_ml_string_length,
     From_string$0=
      caml_call1
       (caml_call1(include$6[2],[0,length$21]),
        [0,length$20,create$19,runtime.bigstring_blit_string_bigstring_stub]),
     blit$4=To_bytes[1],
     blito$4=To_bytes[2],
     unsafe_blit$3=To_bytes[3],
     _U9_=To_bytes[4],
     _U__=To_bytes[5];
    function sub$7(src,pos,len)
     {return caml_call1(unsafe_to_string,caml_call3(_U9_,src,pos,len))}
    function subo$4(pos,len,src)
     {return caml_call1(unsafe_to_string,caml_call3(_U__,pos,len,src))}
    var
     To_string$0=[0,blit$4,blito$4,unsafe_blit$3,sub$7,subo$4],
     arg=From_string$0[5],
     of_bytes=From_bytes[5],
     to_string$17=To_string$0[5],
     to_bytes=To_bytes[5];
    function append$6(src,dst,dst_pos_ref)
     {var len=caml_ba_dim_1(src),dst_pos=dst_pos_ref[1];
      caml_call5(blit$3,src,0,dst,dst_pos,len);
      dst_pos_ref[1] = dst_pos + len | 0;
      return 0}
    function concat$2(sep,list)
     {if(list)
       {var
         tail=list[2],
         head=list[1],
         head_len=caml_ba_dim_1(head),
         sep_len=caml_call3(value_map$0,sep,0,length$20),
         tail_count=caml_call1(length$4,tail),
         len=
          (head_len + caml_mul(sep_len,tail_count) | 0)
          +
          caml_call3
           (sum$2,[0,t_of_sexp$32,sexp_of_t$43,_w7_,_w4_,_w3_],tail,length$20)
          |
          0,
         dst=create$18(0,len),
         dst_pos_ref=[0,0];
        append$6(head,dst,dst_pos_ref);
        caml_call2
         (iter$2,
          tail,
          function(src)
           {if(sep){var sep$0=sep[1];append$6(sep$0,dst,dst_pos_ref)}
            return append$6(src,dst,dst_pos_ref)});
        if(dst_pos_ref[1] === len)return dst;
        throw [0,Assert_failure,_U$_]}
      return create$18(0,0)}
    function _Va_(param)
     {function test(sep,list)
       {var
         _bHg_=
          caml_call2
           (map$11,list,function(eta){return caml_call3(arg,0,0,eta)}),
         got=
          concat$2
           (caml_call2
             (map$23,sep,function(eta){return caml_call3(arg,0,0,eta)}),
            _bHg_),
         expect=caml_call3(arg,0,0,caml_call2(_Hg_,sep,list)),
         comparator=caml_compare;
        return caml_call8
                (Ppx_assert_lib_Runtime[3],
                 pos$57,
                 sexpifier,
                 comparator,
                 0,
                 0,
                 0,
                 expect,
                 got)}
      function _bG7_(param){return test(0,0)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test,
        0,
        cst_src_bigstring_ml$0,
        193,
        4,
        29,
        _bG7_);
      function _bG8_(param){return test(0,_Vb_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test$0,
        0,
        cst_src_bigstring_ml$1,
        194,
        4,
        31,
        _bG8_);
      function _bG9_(param){return test(0,_Vc_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_foo,
        0,
        cst_src_bigstring_ml$2,
        195,
        4,
        34,
        _bG9_);
      function _bG__(param){return test(0,_Vd_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_foo_bar,
        0,
        cst_src_bigstring_ml$3,
        196,
        4,
        41,
        _bG__);
      function _bG$_(param){return test(0,_Ve_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_foo_bar_baz,
        0,
        cst_src_bigstring_ml$4,
        197,
        4,
        48,
        _bG$_);
      function _bHa_(param){return test(_Vf_,0)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_sep,
        0,
        cst_src_bigstring_ml$5,
        198,
        4,
        38,
        _bHa_);
      function _bHb_(param){return test(_Vh_,_Vg_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_sep$0,
        0,
        cst_src_bigstring_ml$6,
        199,
        4,
        40,
        _bHb_);
      function _bHc_(param){return test(_Vj_,_Vi_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_sep_foo,
        0,
        cst_src_bigstring_ml$7,
        200,
        4,
        43,
        _bHc_);
      function _bHd_(param){return test(_Vl_,_Vk_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_sep_foo_bar,
        0,
        cst_src_bigstring_ml$8,
        201,
        4,
        50,
        _bHd_);
      function _bHe_(param){return test(_Vn_,_Vm_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_sep_foo_bar_baz,
        0,
        cst_src_bigstring_ml$9,
        202,
        4,
        57,
        _bHe_);
      function _bHf_(param){return test(_Vp_,_Vo_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_sep_Strings_of_different,
        0,
        cst_src_bigstring_ml$10,
        203,
        4,
        80,
        _bHf_);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst_concat,
      0,
      cst_src_bigstring_ml$11,
      184,
      0,
      749,
      _Va_);
    function compare_t_frozen(t1,t2)
     {if(caml_call2(_R7_,t1,t2))return 0;
      var
       len1=caml_ba_dim_1(t1),
       len2=caml_ba_dim_1(t2),
       len=caml_call2(_xq_,len1,len2),
       n=bigstring_memcmp_stub(t1,0,t2,0,len);
      return 0 === n?len1 < len2?-1:len2 < len1?1:0:n}
    function hash_fold_t_frozen(_bG6_,_bG5_)
     {return runtime.internalhash_fold_bigstring(_bG6_,_bG5_)}
    var hash$25=caml_call1(Base_Hash[12],hash_fold_t_frozen);
    function _Vq_(param)
     {function check(s)
       {var t2=hash_string(s),t1=caml_call1(hash$25,caml_call3(arg,0,0,s));
        return caml_call8
                (Ppx_assert_lib_Runtime[2],
                 pos$58,
                 sexp_of_t$43,
                 compare$30,
                 0,
                 0,
                 0,
                 t1,
                 t2)}
      return caml_call2(iter$2,_Vr_,check)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_List_iter_f_check_a_ab_a,
      _Vs_,
      cst_src_bigstring_ml$12,
      234,
      0,
      274,
      _Vq_);
    function _Vt_(param)
     {function check(s)
       {var
         t2=caml_call3(Base_Hash[14],0,hash_fold_t$25,s),
         _bG4_=caml_call3(arg,0,0,s),
         t1=caml_call3(Base_Hash[14],0,hash_fold_t_frozen,_bG4_);
        return caml_call8
                (Ppx_assert_lib_Runtime[2],
                 pos$59,
                 sexp_of_t$43,
                 compare$30,
                 0,
                 0,
                 0,
                 t1,
                 t2)}
      return caml_call2(iter$2,_Vu_,check)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_List_iter_f_check_a_ab_a$0,
      0,
      cst_src_bigstring_ml$13,
      245,
      0,
      279,
      _Vt_);
    var
     _Vv_=
      [0,
       [0,
        caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t_frozen),
        0,
        bin_shape_t$73],
       0],
     _Vw_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_bigstring_ml_256_0),
     group$98=caml_call2(Bin_prot_Shape[6],_Vw_,_Vv_),
     _Vx_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t_frozen$0),
     bin_shape_t_frozen=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$98,_Vx_),0),
     bin_writer_t_frozen=[0,bin_size_t$3,bin_write_t$3],
     bin_reader_t_frozen=[0,bin_read_t$7,bin_read_t$8],
     bin_t_frozen=
      [0,bin_shape_t_frozen,bin_writer_t_frozen,bin_reader_t_frozen];
    function hash_t_frozen(x){return caml_call1(hash$25,x)}
    function equal$31(t1,t2)
     {if(caml_call2(_R7_,t1,t2))return 1;
      var
       len1=caml_ba_dim_1(t1),
       len2=caml_ba_dim_1(t2),
       _bG3_=caml_call2(_xr_,len1,len2);
      return _bG3_
              ?caml_call2(_xr_,bigstring_memcmp_stub(t1,0,t2,0,len1),0)
              :_bG3_}
    function _Vy_(param)
     {function check(t1,t2,int$0)
       {var
         bool=0 === int$0?1:0,
         n=compare_t_frozen(t1,t2),
         _bG2_=0 <= n?0 < n?1:0:-1;
        caml_call8
         (Ppx_assert_lib_Runtime[3],
          pos$60,
          sexp_of_t$43,
          compare$30,
          0,
          0,
          0,
          int$0,
          _bG2_);
        var got=equal$31(t1,t2);
        return caml_call8
                (Ppx_assert_lib_Runtime[3],pos$61,_BA_,_BS_,0,0,0,bool,got)}
      function _bGN_(param)
       {var t=caml_call3(arg,0,0,cst_cat);return check(t,t,0)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_check_t_t_0,
        0,
        cst_src_bigstring_ml$14,
        277,
        4,
        60,
        _bGN_);
      function _bGO_(param)
       {var _bG1_=caml_call3(arg,0,0,cst_cat$0);
        return check(caml_call3(arg,0,0,cst_cat$1),_bG1_,0)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_check_of_string_cat_of_string_cat_0,
        0,
        cst_src_bigstring_ml$15,
        278,
        4,
        67,
        _bGO_);
      function _bGP_(param)
       {var _bG0_=caml_call3(arg,0,0,cst_cab);
        return check(caml_call3(arg,0,0,cst_cat$2),_bG0_,1)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_check_of_string_cat_of_string_cab_1,
        0,
        cst_src_bigstring_ml$16,
        279,
        4,
        67,
        _bGP_);
      function _bGQ_(param)
       {var _bGZ_=caml_call3(arg,0,0,cst_caz);
        return check(caml_call3(arg,0,0,cst_cat$3),_bGZ_,-1)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_check_of_string_cat_of_string_caz_1,
        0,
        cst_src_bigstring_ml$17,
        280,
        4,
        67,
        _bGQ_);
      function _bGR_(param)
       {var _bGY_=caml_call3(arg,0,0,cst_c);
        return check(caml_call3(arg,0,0,cst_cat$4),_bGY_,1)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_check_of_string_cat_of_string_c_1,
        0,
        cst_src_bigstring_ml$18,
        281,
        4,
        67,
        _bGR_);
      function _bGS_(param)
       {var _bGX_=caml_call3(arg,0,0,cst_cat$5);
        return check(caml_call3(arg,0,0,cst_c$0),_bGX_,-1)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_check_of_string_c_of_string_cat_1,
        0,
        cst_src_bigstring_ml$19,
        282,
        4,
        67,
        _bGS_);
      function _bGT_(param)
       {var _bGW_=caml_call3(arg,0,0,cst_dog);
        return check(caml_call3(arg,0,0,cst_cat$6),_bGW_,-1)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_check_of_string_cat_of_string_dog_1,
        0,
        cst_src_bigstring_ml$20,
        283,
        4,
        67,
        _bGT_);
      function _bGU_(param)
       {var _bGV_=caml_call3(arg,0,0,cst_cat$7);
        return check(caml_call3(arg,0,0,cst_dog$0),_bGV_,1)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_check_of_string_dog_of_string_cat_1,
        0,
        cst_src_bigstring_ml$21,
        284,
        4,
        67,
        _bGU_);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst_comparison,
      0,
      cst_src_bigstring_ml$22,
      265,
      0,
      887,
      _Vy_);
    function read_bin_prot_verbose_errors(t,opt,len,reader)
     {if(opt)var sth=opt[1],pos=sth;else var pos=0;
      var len$0=get_opt_len(t,pos,len),limit=pos + len$0 | 0;
      check_args(cst_read_bin_prot_verbose_errors,pos,len$0,t);
      function invalid_data(message,a,sexp_of_a)
       {return [0,-810630190,caml_call5(_kC_,0,0,message,a,sexp_of_a)]}
      function read(bin_reader,pos,len)
       {if((limit - pos | 0) < len)return 658743757;
        var pos_ref=[0,pos];
        try
         {var _bGM_=[0,17724,caml_call2(bin_reader,t,pos_ref)],_bGK_=_bGM_}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          var _bGK_=[0,-810630190,caml_call2(of_exn,0,exn)]}
        if(17724 <= _bGK_[1])
         {var result=_bGK_[2],expected_pos=pos + len | 0;
          if(pos_ref[1] === expected_pos)
           return [0,17724,[0,result,expected_pos]];
          var
           _bGL_=
            function(param)
             {var
               v1=param[2],
               v0=param[1],
               v0$0=caml_call1(sexp_of_t$43,v0),
               v1$0=caml_call1(sexp_of_t$43,v1);
              return [1,[0,v0$0,[0,v1$0,0]]]};
          return invalid_data
                  (cst_pos_ref_expected_pos,[0,pos_ref[1],expected_pos],_bGL_)}
        return _bGK_}
      var x=read(Bin_prot_Utils[2],pos,Bin_prot_Utils[1]);
      if(typeof x !== "number")
       if(17724 <= x[1])
        {var match=x[2],pos$0=match[2],element_length=match[1];
         return 0 <= element_length
                 ?read(reader[1],pos$0,element_length)
                 :invalid_data
                   (cst_negative_element_length_d,element_length,sexp_of_t$43)}
      return x}
    function _Vz_(param)
     {function make_t(size,input)
       {var t=create$18(0,caml_ml_string_length(input) + 8 | 0);
        caml_call3(Bin_prot_Write[33],t,0,size);
        function _bGJ_(i,c){return caml_ba_set_1(t,i + 8 | 0,c)}
        caml_call2(iteri$1,caml_call1(_Hr_,input),_bGJ_);
        return t}
      function test(size,input,pos,len,reader,sexp_of_a,compare_a,expect)
       {var
         match=
          read_bin_prot_verbose_errors(make_t(size,input),pos,len,reader);
        if(typeof match === "number")
         var result=658743757;
        else
         {if(17724 <= match[1])
           var match$0=match[2],x=match$0[1],_bGI_=[0,17724,x];
          else
           var _bGI_=-810630190;
          var result=_bGI_}
        var equal=0,message=0,here=0;
        function sexpifier(param)
         {if(typeof param === "number")return 658743757 <= param?_VA_:_VB_;
          var v0=param[2];
          return [1,[0,_VC_,[0,caml_call1(sexp_of_a,v0),0]]]}
        function comparator(a_013,b_014)
         {if(caml_call2(Ppx_compare_lib[1],a_013,b_014))return 0;
          if(typeof a_013 === "number")
           {if(658743757 <= a_013)
             {if(658743757 === b_014)return 0}
            else
             if(-810630190 === b_014)return 0}
          else
           if(typeof b_014 !== "number")
            if(17724 === b_014[1])
             {var right_016=b_014[2],left_015=a_013[2];
              return caml_call2(compare_a,left_015,right_016)}
          return caml_compare(a_013,b_014)}
        return caml_call8
                (Ppx_assert_lib_Runtime[3],
                 pos$62,
                 sexpifier,
                 comparator,
                 here,
                 message,
                 equal,
                 expect,
                 result)}
      function test_int(pos,len,size,input,expect)
       {return test
                (size,
                 input,
                 pos,
                 len,
                 bin_reader_t$30,
                 sexp_of_t$43,
                 compare$30,
                 expect)}
      function test_string(pos,len,size,input,expect)
       {return test
                (size,
                 input,
                 pos,
                 len,
                 bin_reader_t$49,
                 sexp_of_t$58,
                 compare$47,
                 expect)}
      function _bGy_(param){return test_int(0,0,1,cst$88,_VD_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_int_size_1_expect_Ok_42,
        0,
        cst_src_bigstring_ml$23,
        353,
        4,
        76,
        _bGy_);
      function _bGz_(param){return test_int(0,0,1,cst_suffix,_VE_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_int_size_1_suffix_expect_Ok_42,
        0,
        cst_src_bigstring_ml$24,
        354,
        4,
        76,
        _bGz_);
      function _bGA_(param){return test_string(0,0,4,cst_foo,_VF_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_string_size_4_003foo_expect_Ok_foo,
        0,
        cst_src_bigstring_ml$25,
        355,
        4,
        79,
        _bGA_);
      function _bGB_(param){return test_string(0,_VH_,4,cst_foo$0,_VG_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_string_size_4_003foo_len_12_expect,
        0,
        cst_src_bigstring_ml$26,
        356,
        4,
        79,
        _bGB_);
      function _bGC_(param)
       {var
         t=
          caml_call3
           (arg,
            0,
            0,
            caml_call2
             (_Dw_,
              cst_prefix,
              caml_call2
               (_Dw_,
                caml_call3(to_string$17,0,0,make_t(4,cst_foo$1)),
                cst_suffix$0)));
        return caml_equal
                (read_bin_prot_verbose_errors(t,_VJ_,0,bin_reader_t$49),_VI_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_pos_0$0,
        0,
        cst_src_bigstring_ml$27,
        358,
        4,
        220,
        _bGC_);
      function _bGD_(param){return test_string(0,0,-1,cst_foo$2,-810630190)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_negative_size,
        0,
        cst_src_bigstring_ml$28,
        365,
        4,
        90,
        _bGD_);
      function _bGE_(param){return test_string(0,0,3,cst_foo$3,-810630190)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_wrong_size,
        0,
        cst_src_bigstring_ml$29,
        366,
        4,
        90,
        _bGE_);
      function _bGF_(param){return test_string(0,0,4,cst_foo$4,-810630190)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_bad_bin_prot,
        0,
        cst_src_bigstring_ml$30,
        367,
        4,
        90,
        _bGF_);
      function _bGG_(param){return test_string(0,_VK_,4,cst_foo$5,658743757)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_len_too_short,
        0,
        cst_src_bigstring_ml$31,
        369,
        4,
        97,
        _bGG_);
      function _bGH_(param)
       {var t=caml_call3(arg,0,0,cst_foo$6);
        return 658743757
                ===
                read_bin_prot_verbose_errors(t,0,0,bin_reader_t$49)
                ?1
                :0}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_no_header,
        0,
        cst_src_bigstring_ml$32,
        371,
        4,
        139,
        _bGH_);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst$89,
      0,
      cst_src_bigstring_ml$33,
      326,
      0,
      2334,
      _Vz_);
    function read_bin_prot(t,pos,len,reader)
     {var match=read_bin_prot_verbose_errors(t,pos,len,reader);
      if(typeof match === "number")
       return caml_call1(_lx_,cst_not_enough_data);
      if(17724 <= match[1]){var x=match[2];return [0,x]}
      var e=match[2];
      return [1,caml_call2(_kF_,e,cst_Invalid_data)]}
    function write_bin_prot(t,opt,writer,v)
     {if(opt)var sth=opt[1],pos=sth;else var pos=0;
      var
       data_len=caml_call1(writer[1],v),
       total_len=data_len + Bin_prot_Utils[1] | 0;
      if(pos < 0)
       failwiths
        (0,_VL_,cst_Bigstring_write_bin_prot_negative_pos,pos,sexp_of_t$43);
      if(caml_ba_dim_1(t) < (pos + total_len | 0))
       {var
         _bGw_=
          function(param)
           {var
             v2=param[3],
             v1=param[2],
             v0=param[1],
             v0$0=v0[2],
             v0$1=[1,[0,_VM_,[0,caml_call1(sexp_of_t$43,v0$0),0]]],
             v0$2=v1[2],
             v1$0=[1,[0,_VN_,[0,caml_call1(sexp_of_t$43,v0$2),0]]],
             v0$3=v2[2],
             v2$0=[1,[0,_VO_,[0,caml_call1(sexp_of_t$43,v0$3),0]]];
            return [1,[0,v0$1,[0,v1$0,[0,v2$0,0]]]]};
        failwiths
         (0,
          _VP_,
          cst_Bigstring_write_bin_prot_not_enough_room,
          [0,
           [0,5594516,pos],
           [0,179941454,pos + total_len | 0],
           [0,-978093804,caml_ba_dim_1(t)]],
          _bGw_)}
      var
       pos_after_size_header=caml_call3(Bin_prot_Utils[3],t,pos,data_len),
       pos_after_data=caml_call3(writer[2],t,pos_after_size_header,v);
      if((pos_after_data - pos | 0) !== total_len)
       {var
         _bGx_=
          function(param)
           {var
             v4=param[5],
             v3=param[4],
             v2=param[3],
             v1=param[2],
             v0=param[1],
             v0$0=v0[2],
             v0$1=[1,[0,_VQ_,[0,caml_call1(sexp_of_t$43,v0$0),0]]],
             v0$2=v1[2],
             v1$0=[1,[0,_VR_,[0,caml_call1(sexp_of_t$43,v0$2),0]]],
             v0$3=v2[2],
             v2$0=[1,[0,_VS_,[0,caml_call1(sexp_of_t$43,v0$3),0]]],
             v0$4=v3[2],
             v3$0=[1,[0,_VT_,[0,caml_call1(sexp_of_t$43,v0$4),0]]],
             v0$5=v4[2],
             v4$0=[1,[0,_VU_,[0,caml_call1(sexp_of_t$43,v0$5),0]]];
            return [1,[0,v0$1,[0,v1$0,[0,v2$0,[0,v3$0,[0,v4$0,0]]]]]]};
        failwiths
         (0,
          _VV_,
          cst_Bigstring_write_bin_prot_bug,
          [0,
           [0,187782776,pos_after_data],
           [0,221966327,pos],
           [0,-494937222,Bin_prot_Utils[1]],
           [0,330843136,data_len],
           [0,-251717990,total_len]],
          _bGx_)}
      return pos_after_data}
    function _VW_(param)
     {function test(pos,writer,v,expect)
       {var size=caml_call1(writer[1],v) + 8 | 0,t=create$18(0,size);
        write_bin_prot(t,pos,writer,v);
        var got=caml_call3(to_string$17,0,0,t);
        return caml_call8
                (Ppx_assert_lib_Runtime[3],
                 pos$63,
                 sexp_of_t$58,
                 compare$47,
                 0,
                 0,
                 0,
                 expect,
                 got)}
      function _bGs_(param)
       {return test(0,bin_writer_t$49,cst_foo$8,cst_foo$7)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_String_bin_writer_t_foo_expect_00,
        0,
        cst_src_bigstring_ml$34,
        417,
        4,
        108,
        _bGs_);
      function _bGt_(param){return test(0,bin_writer_t$30,123,cst$90)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_Int_bin_writer_t_123_expect_001_000_0,
        0,
        cst_src_bigstring_ml$35,
        419,
        4,
        105,
        _bGt_);
      function _bGu_(param)
       {var _bGv_=caml_call1(_lx_,cst_test$2);
        return test(0,bin_writer_t$16(_AW_),_bGv_,cst_test$1)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_Or_error_bin_writer_t_Unit_bin_writer_t,
        0,
        cst_src_bigstring_ml$36,
        421,
        4,
        188,
        _bGu_);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst$91,
      0,
      cst_src_bigstring_ml$37,
      409,
      0,
      682,
      _VW_);
    function find$14(opt,len,chr,bstr)
     {if(opt)var sth=opt[1],pos=sth;else var pos=0;
      var len$0=get_opt_len(bstr,pos,len);
      check_args(cst_find,pos,len$0,bstr);
      var res=runtime.bigstring_find(bstr,chr,pos,len$0);
      return 0 <= res?[0,res]:0}
    var
     get$6=caml_ba_get_1,
     include$86=_Di_([0,length$20,get$6]),
     _VX_=include$86[1];
    function get_16(t,pos)
     {check_args(cst_get_16,pos,2,t);return caml_ba_uint8_get16(t,pos)}
    function get_32(t,pos)
     {check_args(cst_get_32,pos,4,t);return caml_ba_uint8_get32(t,pos)}
    function get_64(t,pos)
     {check_args(cst_get_64,pos,8,t);return caml_ba_uint8_get64(t,pos)}
    function set_16(t,pos,v)
     {check_args(cst_set_16,pos,2,t);return caml_ba_uint8_set16(t,pos,v)}
    function set_32(t,pos,v)
     {check_args(cst_set_32,pos,4,t);return caml_ba_uint8_set32(t,pos,v)}
    function set_64(t,pos,v)
     {check_args(cst_set_64,pos,8,t);return caml_ba_uint8_set64(t,pos,v)}
    function sign_extend_16(u)
     {return u << (num_bits$0 - 16 | 0) >> (num_bits$0 - 16 | 0)}
    function _VY_(param)
     {return caml_call2
              (iter$2,
               _V0_,
               function(param)
                {var expect=param[2],i=param[1];
                 if(0 <= i)
                  {var got=sign_extend_16(i);
                   return caml_call8
                           (Ppx_assert_lib_Runtime[3],
                            pos$64,
                            sexp_of_t$43,
                            compare$30,
                            0,
                            0,
                            0,
                            expect,
                            got)}
                 throw [0,Assert_failure,_VZ_]})}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_List_iter_0_0_1_1_0x7fff_32767,
      0,
      cst_src_bigstring_ml$38,
      505,
      0,
      245,
      _VY_);
    function check_valid_uint16(loc,x)
     {var _bGq_=x < 0?1:0,_bGr_=_bGq_ || (65535 < x?1:0);
      return _bGr_?caml_call1(invalid_arg,caml_call3(_eJ_,_V1_,loc,x)):_bGr_}
    function check_valid_int16(loc,x)
     {var _bGo_=x < -32768?1:0,_bGp_=_bGo_ || (32767 < x?1:0);
      return _bGp_?caml_call1(invalid_arg,caml_call3(_eJ_,_V2_,loc,x)):_bGp_}
    var
     _V6_=
      arch_sixtyfour
       ?function(x,loc)
         {if(-2147483648 <= x)if(x < -2147483648)return 0;
          return caml_call1(invalid_arg,caml_call3(_eJ_,_V5_,loc,x))}
       :function(param,_bGn_){return 0},
     _V8_=
      arch_sixtyfour
       ?function(x,loc)
         {if(0 <= x)if(x < 1)return 0;
          return caml_call1(invalid_arg,caml_call3(_eJ_,_V7_,loc,x))}
       :function(x,loc)
         {return 0 <= x?0:caml_call1(invalid_arg,caml_call3(_eJ_,_aYD_,loc,x))};
    function check_valid_uint64(x,loc)
     {return 0 <= x?0:caml_call1(invalid_arg,caml_call3(_eJ_,_V9_,loc,x))}
    function unsafe_read_int16(t,pos)
     {return sign_extend_16(caml_ba_uint8_get16(t,pos))}
    function unsafe_read_int16_swap(t,pos)
     {return sign_extend_16(caml_bswap16(caml_ba_uint8_get16(t,pos)))}
    var unsafe_write_int16=caml_ba_uint8_set16;
    function unsafe_write_int16_swap(t,pos,x)
     {return caml_ba_uint8_set16(t,pos,caml_bswap16(x))}
    function read_int16(t,pos){return sign_extend_16(get_16(t,pos))}
    function read_int16_swap(t,pos)
     {return sign_extend_16(caml_bswap16(get_16(t,pos)))}
    function write_int16(t,pos,x)
     {check_valid_int16(cst_write_int16,x);return set_16(t,pos,x)}
    function write_int16_swap(t,pos,x)
     {check_valid_int16(cst_write_int16$0,x);
      return set_16(t,pos,caml_bswap16(x))}
    var unsafe_read_uint16=caml_ba_uint8_get16;
    function unsafe_read_uint16_swap(t,pos)
     {return caml_bswap16(caml_ba_uint8_get16(t,pos))}
    var unsafe_write_uint16=caml_ba_uint8_set16;
    function unsafe_write_uint16_swap(t,pos,x)
     {return caml_ba_uint8_set16(t,pos,caml_bswap16(x))}
    function read_uint16(t,pos){return get_16(t,pos)}
    function read_uint16_swap(t,pos){return caml_bswap16(get_16(t,pos))}
    function write_uint16(t,pos,x)
     {check_valid_uint16(cst_write_uint16,x);return set_16(t,pos,x)}
    function write_uint16_swap(t,pos,x)
     {check_valid_uint16(cst_write_uint16$0,x);
      return set_16(t,pos,caml_bswap16(x))}
    var unsafe_read_int32_int=caml_ba_uint8_get32;
    function unsafe_read_int32_int_swap(t,pos)
     {return caml_int32_bswap(caml_ba_uint8_get32(t,pos))}
    var unsafe_read_int32=caml_ba_uint8_get32;
    function unsafe_read_int32_swap(t,pos)
     {return caml_int32_bswap(caml_ba_uint8_get32(t,pos))}
    var unsafe_write_int32=caml_ba_uint8_set32;
    function unsafe_write_int32_swap(t,pos,x)
     {return caml_ba_uint8_set32(t,pos,caml_int32_bswap(x))}
    var unsafe_write_int32_int=caml_ba_uint8_set32;
    function unsafe_write_int32_int_swap(t,pos,x)
     {return caml_ba_uint8_set32(t,pos,caml_int32_bswap(x))}
    function read_int32_int(t,pos){return get_32(t,pos)}
    function read_int32_int_swap(t,pos)
     {return caml_int32_bswap(get_32(t,pos))}
    function read_int32(t,pos){return get_32(t,pos)}
    function read_int32_swap(t,pos){return caml_int32_bswap(get_32(t,pos))}
    function write_int32(t,pos,x){return set_32(t,pos,x)}
    function write_int32_swap(t,pos,x)
     {return set_32(t,pos,caml_int32_bswap(x))}
    function write_int32_int(t,pos,x)
     {_V6_(x,cst_write_int32_int);return set_32(t,pos,x)}
    function write_int32_int_swap(t,pos,x)
     {_V6_(x,cst_write_int32_int$0);return set_32(t,pos,caml_int32_bswap(x))}
    function unsafe_read_int64_int(t,pos)
     {return caml_int64_to_int32(caml_ba_uint8_get64(t,pos))}
    function unsafe_read_int64_int_swap(t,pos)
     {return caml_int64_to_int32(caml_int64_bswap(caml_ba_uint8_get64(t,pos)))}
    var unsafe_read_int64=caml_ba_uint8_get64;
    function unsafe_read_int64_swap(t,pos)
     {return caml_int64_bswap(caml_ba_uint8_get64(t,pos))}
    var unsafe_write_int64=caml_ba_uint8_set64;
    function unsafe_write_int64_swap(t,pos,x)
     {return caml_ba_uint8_set64(t,pos,caml_int64_bswap(x))}
    function unsafe_write_int64_int(t,pos,x)
     {return caml_ba_uint8_set64(t,pos,caml_int64_of_int32(x))}
    function unsafe_write_int64_int_swap(t,pos,x)
     {return caml_ba_uint8_set64
              (t,pos,caml_int64_bswap(caml_int64_of_int32(x)))}
    function read_int64_int(t,pos){return caml_int64_to_int32(get_64(t,pos))}
    function read_int64_int_swap(t,pos)
     {return caml_int64_to_int32(caml_int64_bswap(get_64(t,pos)))}
    function read_int64(t,pos){return get_64(t,pos)}
    function read_int64_swap(t,pos){return caml_int64_bswap(get_64(t,pos))}
    function write_int64(t,pos,x){return set_64(t,pos,x)}
    function write_int64_swap(t,pos,x)
     {return set_64(t,pos,caml_int64_bswap(x))}
    function write_int64_int(t,pos,x)
     {return set_64(t,pos,caml_int64_of_int32(x))}
    function write_int64_int_swap(t,pos,x)
     {return set_64(t,pos,caml_int64_bswap(caml_int64_of_int32(x)))}
    var
     unsafe_read_int16$0=
      arch_big_endian?unsafe_read_int16:unsafe_read_int16_swap,
     unsafe_read_int16_swap$0=
      arch_big_endian?unsafe_read_int16_swap:unsafe_read_int16,
     unsafe_read_uint16$0=
      arch_big_endian?unsafe_read_uint16:unsafe_read_uint16_swap,
     unsafe_read_uint16_swap$0=
      arch_big_endian?unsafe_read_uint16_swap:unsafe_read_uint16,
     read_int16$0=arch_big_endian?read_int16:read_int16_swap,
     read_int16_swap$0=arch_big_endian?read_int16_swap:read_int16,
     read_uint16$0=arch_big_endian?read_uint16:read_uint16_swap,
     read_uint16_swap$0=arch_big_endian?read_uint16_swap:read_uint16,
     unsafe_write_int16$0=
      arch_big_endian?unsafe_write_int16:unsafe_write_int16_swap,
     unsafe_write_int16_swap$0=
      arch_big_endian?unsafe_write_int16_swap:unsafe_write_int16,
     unsafe_write_uint16$0=
      arch_big_endian?unsafe_write_uint16:unsafe_write_uint16_swap,
     unsafe_write_uint16_swap$0=
      arch_big_endian?unsafe_write_uint16_swap:unsafe_write_uint16,
     write_int16$0=arch_big_endian?write_int16:write_int16_swap,
     write_int16_swap$0=arch_big_endian?write_int16_swap:write_int16,
     write_uint16$0=arch_big_endian?write_uint16:write_uint16_swap,
     write_uint16_swap$0=arch_big_endian?write_uint16_swap:write_uint16,
     unsafe_read_int32$0=
      arch_big_endian?unsafe_read_int32:unsafe_read_int32_swap,
     unsafe_read_int32_swap$0=
      arch_big_endian?unsafe_read_int32_swap:unsafe_read_int32,
     unsafe_write_int32$0=
      arch_big_endian?unsafe_write_int32:unsafe_write_int32_swap,
     unsafe_write_int32_swap$0=
      arch_big_endian?unsafe_write_int32_swap:unsafe_write_int32,
     read_int32$0=arch_big_endian?read_int32:read_int32_swap,
     read_int32_swap$0=arch_big_endian?read_int32_swap:read_int32,
     write_int32$0=arch_big_endian?write_int32:write_int32_swap,
     write_int32_swap$0=arch_big_endian?write_int32_swap:write_int32,
     unsafe_read_int32_int$0=
      arch_big_endian?unsafe_read_int32_int:unsafe_read_int32_int_swap,
     unsafe_read_int32_int_swap$0=
      arch_big_endian?unsafe_read_int32_int_swap:unsafe_read_int32_int,
     unsafe_write_int32_int$0=
      arch_big_endian?unsafe_write_int32_int:unsafe_write_int32_int_swap,
     unsafe_write_int32_int_swap$0=
      arch_big_endian?unsafe_write_int32_int_swap:unsafe_write_int32_int,
     read_int32_int$0=arch_big_endian?read_int32_int:read_int32_int_swap,
     read_int32_int_swap$0=arch_big_endian?read_int32_int_swap:read_int32_int,
     write_int32_int$0=arch_big_endian?write_int32_int:write_int32_int_swap,
     write_int32_int_swap$0=
      arch_big_endian?write_int32_int_swap:write_int32_int,
     unsafe_read_int64_int$0=
      arch_big_endian?unsafe_read_int64_int:unsafe_read_int64_int_swap,
     unsafe_read_int64_int_swap$0=
      arch_big_endian?unsafe_read_int64_int_swap:unsafe_read_int64_int,
     unsafe_write_int64_int$0=
      arch_big_endian?unsafe_write_int64_int:unsafe_write_int64_int_swap,
     unsafe_write_int64_int_swap$0=
      arch_big_endian?unsafe_write_int64_int_swap:unsafe_write_int64_int,
     read_int64_int$0=arch_big_endian?read_int64_int:read_int64_int_swap,
     read_int64_int_swap$0=arch_big_endian?read_int64_int_swap:read_int64_int,
     write_int64_int$0=arch_big_endian?write_int64_int:write_int64_int_swap,
     write_int64_int_swap$0=
      arch_big_endian?write_int64_int_swap:write_int64_int,
     unsafe_read_int64$0=
      arch_big_endian?unsafe_read_int64:unsafe_read_int64_swap,
     unsafe_read_int64_swap$0=
      arch_big_endian?unsafe_read_int64_swap:unsafe_read_int64,
     unsafe_write_int64$0=
      arch_big_endian?unsafe_write_int64:unsafe_write_int64_swap,
     unsafe_write_int64_swap$0=
      arch_big_endian?unsafe_write_int64_swap:unsafe_write_int64,
     read_int64$0=arch_big_endian?read_int64:read_int64_swap,
     read_int64_swap$0=arch_big_endian?read_int64_swap:read_int64,
     write_int64$0=arch_big_endian?write_int64:write_int64_swap,
     write_int64_swap$0=arch_big_endian?write_int64_swap:write_int64;
    function int64_conv_error(param)
     {return caml_call1
              (failwith,
               cst_unsafe_read_int64_value_cannot_be_represented_unboxed)}
    function uint64_conv_error(param)
     {return caml_call1
              (failwith,
               cst_unsafe_read_uint64_value_cannot_be_represented_unboxed)}
    function int64_to_int_exn(n)
     {if(arch_sixtyfour)
       {if(caml_greaterequal(n,_V__))
         if(caml_lessthan(n,_V$_))return caml_int64_to_int32(n);
        return int64_conv_error(0)}
      if(caml_greaterequal(n,_Wa_))
       if(caml_lessthan(n,_Wb_))return caml_int64_to_int32(n);
      return int64_conv_error(0)}
    function uint64_to_int_exn(n)
     {if(arch_sixtyfour)
       {if(caml_greaterequal(n,_Wc_))
         if(caml_lessthan(n,_Wd_))return caml_int64_to_int32(n);
        return uint64_conv_error(0)}
      if(caml_greaterequal(n,_We_))
       if(caml_lessthan(n,_Wf_))return caml_int64_to_int32(n);
      return uint64_conv_error(0)}
    function unsafe_get_int64_be_exn(t,pos)
     {return int64_to_int_exn(unsafe_read_int64$0(t,pos))}
    function unsafe_get_int64_le_exn(t,pos)
     {return int64_to_int_exn(unsafe_read_int64_swap$0(t,pos))}
    function get_int64_be_exn(t,pos)
     {return int64_to_int_exn(read_int64$0(t,pos))}
    function get_int64_le_exn(t,pos)
     {return int64_to_int_exn(read_int64_swap$0(t,pos))}
    function unsafe_get_uint64_be_exn(t,pos)
     {return uint64_to_int_exn(unsafe_read_int64$0(t,pos))}
    function unsafe_get_uint64_le_exn(t,pos)
     {return uint64_to_int_exn(unsafe_read_int64_swap$0(t,pos))}
    function get_uint64_be_exn(t,pos)
     {return uint64_to_int_exn(read_int64$0(t,pos))}
    function get_uint64_le_exn(t,pos)
     {return uint64_to_int_exn(read_int64_swap$0(t,pos))}
    function set_uint64_be(t,pos,n)
     {check_valid_uint64(n,cst_set_uint64_be);
      return write_int64_int$0(t,pos,n)}
    function set_uint64_le(t,pos,n)
     {check_valid_uint64(n,cst_set_uint64_le);
      return write_int64_int_swap$0(t,pos,n)}
    function unsafe_set_uint8(t,pos,n)
     {return caml_ba_set_1(t,pos,caml_call1(_CO_,n))}
    function unsafe_set_int8(t,pos,n)
     {var n$0=0 <= n?n:n + 256 | 0;
      return caml_ba_set_1(t,pos,caml_call1(_CO_,n$0))}
    function unsafe_get_uint8(t,pos)
     {return caml_call1(_CL_,caml_ba_get_1(t,pos))}
    function unsafe_get_int8(t,pos)
     {var n=caml_call1(_CL_,caml_ba_get_1(t,pos));
      return 128 <= n?n - 256 | 0:n}
    function set_uint8(t,pos,n)
     {var _bGl_=n < 0?1:0,_bGm_=_bGl_ || (255 < n?1:0);
      if(_bGm_)caml_call1(invalid_arg,caml_call3(_eJ_,_V3_,loc,n));
      return caml_ba_set_1(t,pos,caml_call1(_CO_,n))}
    function set_int8(t,pos,n)
     {var _bGj_=n < -128?1:0,_bGk_=_bGj_ || (127 < n?1:0);
      if(_bGk_)caml_call1(invalid_arg,caml_call3(_eJ_,_V4_,loc$0,n));
      var n$0=0 <= n?n:n + 256 | 0;
      return caml_ba_set_1(t,pos,caml_call1(_CO_,n$0))}
    function get_uint8(t,pos){return caml_call1(_CL_,caml_ba_get_1(t,pos))}
    function get_int8(t,pos)
     {var n=caml_call1(_CL_,caml_ba_get_1(t,pos));
      return 128 <= n?n - 256 | 0:n}
    var not_on_32bit=32 < Stdlib_sys[10]?1:0;
    function unsafe_set_uint32_le(t,pos,n)
     {if(not_on_32bit)
       if(-2147483648 <= n)var n$0=n - 1 | 0,switch$0=1;else var switch$0=0;
      else
       var switch$0=0;
      if(! switch$0)var n$0=n;
      return unsafe_write_int32_int_swap$0(t,pos,n$0)}
    function unsafe_set_uint32_be(t,pos,n)
     {if(not_on_32bit)
       if(-2147483648 <= n)var n$0=n - 1 | 0,switch$0=1;else var switch$0=0;
      else
       var switch$0=0;
      if(! switch$0)var n$0=n;
      return unsafe_write_int32_int$0(t,pos,n$0)}
    function unsafe_get_uint32_le(t,pos)
     {var n=unsafe_read_int32_int_swap$0(t,pos);
      if(not_on_32bit)if(! (0 <= n))return n + 1 | 0;
      return n}
    function unsafe_get_uint32_be(t,pos)
     {var n=unsafe_read_int32_int$0(t,pos);
      if(not_on_32bit)if(! (0 <= n))return n + 1 | 0;
      return n}
    function set_uint32_le(t,pos,n)
     {_V8_(n,cst_set_uint32_le);
      if(not_on_32bit)
       if(-2147483648 <= n)var n$0=n - 1 | 0,switch$0=1;else var switch$0=0;
      else
       var switch$0=0;
      if(! switch$0)var n$0=n;
      return write_int32_int_swap$0(t,pos,n$0)}
    function set_uint32_be(t,pos,n)
     {_V8_(n,cst_set_uint32_be);
      if(not_on_32bit)
       if(-2147483648 <= n)var n$0=n - 1 | 0,switch$0=1;else var switch$0=0;
      else
       var switch$0=0;
      if(! switch$0)var n$0=n;
      return write_int32_int$0(t,pos,n$0)}
    function get_uint32_le(t,pos)
     {var n=read_int32_int_swap$0(t,pos);
      if(not_on_32bit)if(! (0 <= n))return n + 1 | 0;
      return n}
    function get_uint32_be(t,pos)
     {var n=read_int32_int$0(t,pos);
      if(not_on_32bit)if(! (0 <= n))return n + 1 | 0;
      return n}
    function _Wg_(param)
     {var buf=create$18(0,256);
      function test_accessor(buf,to_str,fget,fset,vals)
       {return caml_call3
                (foldi$1,
                 vals,
                 1,
                 function(i,passing,x)
                  {caml_call3(fset,buf,0,x);
                   var y=caml_call2(fget,buf,0);
                   if(caml_notequal(x,y))
                    {var _bGh_=caml_call1(to_str,y);
                     caml_call4(_eO_,_Wh_,i,caml_call1(to_str,x),_bGh_)}
                   var _bGi_=caml_equal(x,y),passing$0=_bGi_?passing:_bGi_;
                   return passing$0})}
      function _bFI_(param)
       {return test_accessor
                (buf,
                 _xy_,
                 unsafe_read_int16_swap$0,
                 unsafe_write_int16_swap$0,
                 _Wi_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_test_accessor_buf_Int_to_string_fget_unsafe,
        0,
        cst_src_bigstring_ml$39,
        985,
        4,
        184,
        _bFI_);
      function _bFJ_(param)
       {return test_accessor
                (buf,
                 _xy_,
                 unsafe_read_uint16_swap$0,
                 unsafe_write_uint16_swap$0,
                 _Wj_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_test_accessor_buf_Int_to_string_fget_unsafe$0,
        0,
        cst_src_bigstring_ml$40,
        990,
        4,
        174,
        _bFJ_);
      function _bFK_(param)
       {return test_accessor
                (buf,_xy_,unsafe_read_int16$0,unsafe_write_int16$0,_Wk_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_test_accessor_buf_Int_to_string_fget_unsafe$1,
        0,
        cst_src_bigstring_ml$41,
        995,
        4,
        184,
        _bFK_);
      function _bFL_(param)
       {return test_accessor
                (buf,_xy_,unsafe_read_uint16$0,unsafe_write_uint16$0,_Wl_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_test_accessor_buf_Int_to_string_fget_unsafe$2,
        0,
        cst_src_bigstring_ml$42,
        1e3,
        4,
        174,
        _bFL_);
      function _bFM_(param)
       {var _bGg_=[0,-1,[0,0,[0,1,[0,caml_call1(_zd_,_Wm_),0]]]];
        return test_accessor
                (buf,
                 _xy_,
                 unsafe_read_int32_int_swap$0,
                 unsafe_write_int32_int_swap$0,
                 [0,caml_call1(_zd_,_Wn_),_bGg_])}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_test_accessor_buf_Int_to_string_fget_unsafe$3,
        _Wo_,
        cst_src_bigstring_ml$43,
        1006,
        4,
        228,
        _bFM_);
      function _bFN_(param)
       {var _bGf_=[0,-1,[0,0,[0,1,[0,caml_call1(_zd_,_Wp_),0]]]];
        return test_accessor
                (buf,
                 _xy_,
                 unsafe_read_int32_int$0,
                 unsafe_write_int32_int$0,
                 [0,caml_call1(_zd_,_Wq_),_bGf_])}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_test_accessor_buf_Int_to_string_fget_unsafe$4,
        _Wr_,
        cst_src_bigstring_ml$44,
        1012,
        4,
        228,
        _bFN_);
      function _bFO_(param)
       {var _bGe_=[0,-1,[0,0,[0,1,[0,caml_call1(_zd_,_Ws_),0]]]];
        return test_accessor
                (buf,
                 _xy_,
                 unsafe_get_int64_le_exn,
                 unsafe_write_int64_int_swap$0,
                 [0,caml_call1(_zd_,_Wt_),_bGe_])}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_test_accessor_buf_Int_to_string_fget_unsafe$5,
        _Wu_,
        cst_src_bigstring_ml$45,
        1018,
        4,
        232,
        _bFO_);
      function _bFP_(param)
       {var
         _bGb_=[0,caml_call1(_zd_,_Wv_),0],
         _bGc_=[0,-1,[0,0,[0,1,[0,caml_call1(_zd_,_Ww_),_bGb_]]]],
         _bGd_=[0,caml_call1(_zd_,_Wx_),_bGc_];
        return test_accessor
                (buf,
                 _xy_,
                 unsafe_get_int64_be_exn,
                 unsafe_write_int64_int$0,
                 [0,caml_call1(_zd_,_Wy_),_bGd_])}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_test_accessor_buf_Int_to_string_fget_unsafe$6,
        _Wz_,
        cst_src_bigstring_ml$46,
        1024,
        4,
        335,
        _bFP_);
      function _bFQ_(param)
       {return caml_call2
                (for_all$1,
                 [0,
                  [0,unsafe_get_uint64_be_exn,unsafe_write_int64_int$0],
                  [0,
                   [0,unsafe_get_uint64_le_exn,unsafe_write_int64_int_swap$0],
                   0]],
                 function(param)
                  {var fset=param[2],fget=param[1];
                   return test_accessor
                           (buf,_xy_,fget,fset,caml_call2(map$11,_WA_,_zd_))})}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_List_for_all_unsafe_get_uint64_be_exn_un,
        _WB_,
        cst_src_bigstring_ml$47,
        1032,
        4,
        432,
        _bFQ_);
      function _bFR_(param)
       {return caml_call2
                (iter$2,
                 _WE_,
                 function(string)
                  {function _bF$_(param)
                    {return unsafe_get_uint64_be_exn
                             (caml_call3(arg,0,0,string),0)}
                   if(caml_call1(Base_Exn[16],_bF$_))
                    {var
                      _bGa_=
                       function(param)
                        {return unsafe_get_uint64_le_exn
                                 (caml_call3(arg,0,0,caml_call1(_GU_,string)),0)};
                     if(caml_call1(Base_Exn[16],_bGa_))return 0;
                     throw [0,Assert_failure,_WC_]}
                   throw [0,Assert_failure,_WD_]})}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_List_iter_000_000_000_000_000_000_000,
        0,
        cst_src_bigstring_ml$48,
        1046,
        4,
        590,
        _bFR_);
      function _bFS_(param)
       {return test_accessor
                (buf,
                 _y9_,
                 unsafe_read_int64_swap$0,
                 unsafe_write_int64_swap$0,
                 [0,_WI_,[0,_WH_,[0,_WG_,[0,_yC_,[0,_yE_,[0,_yD_,_WF_]]]]]])}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_test_accessor_buf_Int64_to_string_fget_unsa,
        0,
        cst_src_bigstring_ml$49,
        1059,
        4,
        451,
        _bFS_);
      function _bFT_(param)
       {return test_accessor
                (buf,
                 _y9_,
                 unsafe_read_int64$0,
                 unsafe_write_int64$0,
                 [0,_WM_,[0,_WL_,[0,_WK_,[0,_yC_,[0,_yE_,[0,_yD_,_WJ_]]]]]])}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_test_accessor_buf_Int64_to_string_fget_unsa$0,
        0,
        cst_src_bigstring_ml$50,
        1071,
        4,
        451,
        _bFT_);
      function _bFU_(param)
       {return test_accessor
                (buf,
                 _y9_,
                 unsafe_read_int64$0,
                 unsafe_write_int64$0,
                 [0,_WQ_,[0,_WP_,[0,_WO_,[0,_yC_,[0,_yE_,[0,_yD_,_WN_]]]]]])}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_test_accessor_buf_Int64_to_string_fget_unsa$1,
        0,
        cst_src_bigstring_ml$51,
        1083,
        4,
        451,
        _bFU_);
      function test_int64(get_exn,get_trunc,set_t,double_check_set)
       {function _bFX_(too_big)
         {var trunc=caml_int64_to_int32(too_big);
          try
           {caml_call3(set_t,buf,0,too_big);
            var
             _bF3_=caml_call2(double_check_set,buf,0),
             _bF4_=0,
             _bF5_=0,
             _bF6_=0;
            (function(opt,message,equal,expect,got)
               {if(opt)var sth=opt[1],here=sth;else var here=0;
                return caml_call8
                        (Ppx_assert_lib_Runtime[3],
                         pos$65,
                         _y$_,
                         _y1_,
                         here,
                         message,
                         equal,
                         expect,
                         got)}
              (_bF6_,_bF5_,_bF4_,too_big,_bF3_));
            var
             test_get=
              function(name,got)
               {var
                 t=
                  caml_call2
                   (_lC_,got,function(i){return caml_call3(_eJ_,_WU_,i,i)}),
                 message=[0,name],
                 sexpifier=caml_call1(_k2_,sexp_of_t$58);
                return caml_call6
                        (Ppx_assert_lib_Runtime[1],
                         pos$66,
                         sexpifier,
                         0,
                         message,
                         _RZ_,
                         t)},
             got_exn=
              caml_call2
               (_lp_,0,function(param){return caml_call2(get_exn,buf,0)});
            test_get(cst_get_exn,got_exn);
            var
             _bF7_=caml_call2(get_trunc,buf,0),
             _bF8_=0,
             _bF9_=0,
             _bF__=
              function(opt,message,equal,expect,got)
                {if(opt)var sth=opt[1],here=sth;else var here=0;
                 return caml_call8
                         (Ppx_assert_lib_Runtime[3],
                          pos$67,
                          sexp_of_t$43,
                          compare$30,
                          here,
                          message,
                          equal,
                          expect,
                          got)}
               (_bF9_,_WV_,_bF8_,trunc,_bF7_);
            return _bF__}
          catch(e)
           {e = caml_wrap_exception(e);
            var
             _bF1_=
              function(param)
               {var
                 v2=param[3],
                 v1=param[2],
                 v0=param[1],
                 v0$0=caml_call1(sexp_of_t$58,v0),
                 v1$0=caml_call1(sexp_of_t$58,v1),
                 v2$0=caml_call1(_Tv_,v2);
                return [1,[0,v0$0,[0,v1$0,[0,v2$0,0]]]]},
             _bF2_=caml_call3(_eJ_,_WR_,trunc,trunc);
            return failwiths
                    (0,
                     _WT_,
                     cst_test_int64,
                     [0,caml_call3(_eJ_,_WS_,too_big,too_big),_bF2_,e],
                     _bF1_)}}
        var
         _bFY_=[0,caml_call1(_yj_,_xW_),0],
         _bFZ_=[0,_xV_,[0,_xW_,[0,caml_call1(_yk_,_xV_),_bFY_]]],
         _bF0_=[0,caml_call1(_yj_,caml_call1(of_int$0,_wp_)),_bFZ_];
        return caml_call2
                (iter$2,
                 [0,_WW_,[0,caml_call1(_yk_,caml_call1(of_int$0,_wq_)),_bF0_]],
                 _bFX_)}
      function _bFV_(param)
       {return test_int64
                (unsafe_get_int64_le_exn,
                 unsafe_read_int64_int_swap$0,
                 unsafe_write_int64_swap$0,
                 unsafe_read_int64_swap$0)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_unsafe_get_int64_le,
        0,
        cst_src_bigstring_ml$52,
        1133,
        4,
        184,
        _bFV_);
      function _bFW_(param)
       {return test_int64
                (unsafe_get_int64_be_exn,
                 unsafe_read_int64_int$0,
                 unsafe_write_int64$0,
                 unsafe_read_int64$0)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_unsafe_get_int64_be,
        0,
        cst_src_bigstring_ml$53,
        1139,
        4,
        184,
        _bFW_);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst_unsafe_binary_accessors,
      0,
      cst_src_bigstring_ml$54,
      972,
      0,
      6551,
      _Wg_);
    function get_tail_padded_fixed_string(padding,t,pos$1,len,param)
     {var pos$2=pos$1 + len | 0,pos=pos$2;
      for(;;)
       {var pos$0=pos - 1 | 0;
        if(pos$1 <= pos$0)
         if(caml_call2(_Ct_,caml_ba_get_1(t,pos$0),padding))
          {var pos=pos$0;continue}
        return caml_call3(to_string$17,[0,pos$1],[0,pos - pos$1 | 0],t)}}
    function set_tail_padded_fixed_string(padding,t,pos,len,value)
     {var slen=caml_ml_string_length(value);
      if(len < slen)caml_call4(_R5_,_WX_,value,len,0);
      caml_call5(From_string$0[1],value,0,t,pos,slen);
      var _bFF_=pos + slen | 0,_bFG_=(pos + len | 0) - 1 | 0;
      if(! (_bFG_ < _bFF_))
       {var i=_bFF_;
        for(;;)
         {caml_ba_set_1(t,i,padding);
          var _bFH_=i + 1 | 0;
          if(_bFG_ !== i){var i=_bFH_;continue}
          break}}
      return 0}
    function set_head_padded_fixed_string(padding,t,pos,len,value)
     {var slen=caml_ml_string_length(value);
      if(len < slen)caml_call4(_R5_,_WY_,value,len,0);
      caml_call5(From_string$0[1],value,0,t,(pos + len | 0) - slen | 0,slen);
      var _bFD_=((pos + len | 0) - slen | 0) - 1 | 0;
      if(! (_bFD_ < pos))
       {var i=pos;
        for(;;)
         {caml_ba_set_1(t,i,padding);
          var _bFE_=i + 1 | 0;
          if(_bFD_ !== i){var i=_bFE_;continue}
          break}}
      return 0}
    function get_head_padded_fixed_string(padding,t,pos$1,len,param)
     {var max_pos=(pos$1 + len | 0) - 1 | 0,pos=pos$1;
      for(;;)
       {if(pos <= max_pos)
         if(caml_call2(_Ct_,caml_ba_get_1(t,pos),padding))
          {var pos$0=pos + 1 | 0,pos=pos$0;continue}
        return caml_call3
                (to_string$17,[0,pos],[0,len - (pos - pos$1 | 0) | 0],t)}}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$241);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Bigstring=
      [0,
       bin_t$68,
       bin_read_t$7,
       bin_read_t$8,
       bin_reader_t$68,
       bin_size_t$3,
       bin_write_t$3,
       bin_writer_t$68,
       bin_shape_t$73,
       compare_t_frozen,
       t_of_sexp$58,
       sexpifier,
       bin_t_frozen,
       bin_read_t$7,
       bin_read_t$8,
       bin_reader_t_frozen,
       bin_size_t$3,
       bin_write_t$3,
       bin_writer_t_frozen,
       bin_shape_t_frozen,
       compare_t_frozen,
       hash_fold_t_frozen,
       hash_t_frozen,
       t_of_sexp$58,
       sexpifier,
       equal$31,
       _VX_,
       create$18,
       init$6,
       arg,
       of_bytes,
       to_string$17,
       to_bytes,
       concat$2,
       check_args,
       get_opt_len,
       length$20,
       sub_shared,
       blit$3,
       blito$3,
       unsafe_blit$2,
       sub$6,
       subo$3,
       To_string$0,
       From_string$0,
       To_bytes,
       From_bytes,
       write_bin_prot,
       read_bin_prot,
       read_bin_prot_verbose_errors,
       find$14,
       get_int8,
       set_int8,
       get_uint8,
       set_uint8,
       unsafe_get_int8,
       unsafe_set_int8,
       unsafe_get_uint8,
       unsafe_set_uint8,
       read_int16_swap$0,
       read_int16$0,
       write_int16_swap$0,
       write_int16$0,
       unsafe_read_int16_swap$0,
       unsafe_read_int16$0,
       unsafe_write_int16_swap$0,
       unsafe_write_int16$0,
       read_uint16_swap$0,
       read_uint16$0,
       write_uint16_swap$0,
       write_uint16$0,
       unsafe_read_uint16_swap$0,
       unsafe_read_uint16$0,
       unsafe_write_uint16_swap$0,
       unsafe_write_uint16$0,
       read_int32_int_swap$0,
       read_int32_int$0,
       write_int32_int_swap$0,
       write_int32_int$0,
       unsafe_read_int32_int_swap$0,
       unsafe_read_int32_int$0,
       unsafe_write_int32_int_swap$0,
       unsafe_write_int32_int$0,
       get_uint32_le,
       get_uint32_be,
       set_uint32_le,
       set_uint32_be,
       unsafe_get_uint32_le,
       unsafe_get_uint32_be,
       unsafe_set_uint32_le,
       unsafe_set_uint32_be,
       get_int64_le_exn,
       get_int64_be_exn,
       read_int64_int_swap$0,
       read_int64_int$0,
       write_int64_int_swap$0,
       write_int64_int$0,
       unsafe_get_int64_le_exn,
       unsafe_get_int64_be_exn,
       unsafe_read_int64_int_swap$0,
       unsafe_read_int64_int$0,
       unsafe_write_int64_int_swap$0,
       unsafe_write_int64_int$0,
       get_uint64_be_exn,
       get_uint64_le_exn,
       set_uint64_le,
       set_uint64_be,
       unsafe_get_uint64_be_exn,
       unsafe_get_uint64_le_exn,
       unsafe_write_int64_int_swap$0,
       unsafe_write_int64_int$0,
       read_int32_swap$0,
       read_int32$0,
       write_int32_swap$0,
       write_int32$0,
       unsafe_read_int32_swap$0,
       unsafe_read_int32$0,
       unsafe_write_int32_swap$0,
       unsafe_write_int32$0,
       read_int64_swap$0,
       read_int64$0,
       write_int64_swap$0,
       write_int64$0,
       unsafe_read_int64_swap$0,
       unsafe_read_int64$0,
       unsafe_write_int64_swap$0,
       unsafe_write_int64$0,
       get_tail_padded_fixed_string,
       set_tail_padded_fixed_string,
       get_head_padded_fixed_string,
       set_head_padded_fixed_string];
    caml_register_global(7465,Core_kernel_Bigstring,"Core_kernel__Bigstring");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$242);
    caml_call1(Expect_test_collector[4][1],cst_src_core_bin_prot_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$243,cst$92);
    var
     Binable$2=include$87[1],
     Blob=include$87[2],
     Common=include$87[3],
     Md5=include$87[4],
     Nat0=include$87[5],
     Read$0=include$87[6],
     Shape$0=include$87[7],
     Size=include$87[8],
     Std=include$87[9],
     Type_class=include$87[10],
     Utils=include$87[11],
     Write$0=include$87[12];
    function to_string$18(t,v)
     {var
       len=caml_call1(t[1],v),
       buf=create$18(0,len),
       pos=caml_call3(t[2],buf,0,v);
      if(caml_call2(_aD_,pos,caml_ba_dim_1(buf)))
       {var str=caml_call3(to_string$17,0,0,buf);
        runtime.bigstring_destroy_stub(buf);
        return str}
      throw [0,Assert_failure,_WZ_]}
    var Writer=[0,to_string$18];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$244);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Core_bin_prot=
      [0,
       Binable$2,
       Blob,
       Common,
       Md5,
       Nat0,
       Read$0,
       Shape$0,
       Size,
       Std,
       Type_class,
       Utils,
       Write$0,
       Writer];
    caml_register_global
     (7467,Core_kernel_Core_bin_prot,"Core_kernel__Core_bin_prot");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$245);
    caml_call1(Expect_test_collector[4][1],cst_src_binable_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$246,cst$93);
    function of_string$16(m,string)
     {return of_bigstring(m,caml_call3(arg,0,0,string))}
    function to_string$19(m,t)
     {return caml_call3(to_string$17,0,0,to_bigstring(0,m,t))}
    function _W0_(param)
     {var
       _bFs_=
        [0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$154),0,_ce_],0],
       _bFt_=
        caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_binable_ml_11_24),
       group=caml_call2(Bin_prot_Shape[6],_bFt_,_bFs_),
       _bFu_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$155),
       bin_shape_t=caml_call1(caml_call2(Bin_prot_Shape[14],group,_bFu_),0),
       bin_writer_t=[0,bin_size_t$1,bin_write_t$1],
       bin_reader_t=[0,bin_read_t$3,bin_read_t$4],
       bin_t=[0,bin_shape_t,bin_writer_t,bin_reader_t],
       m=
        [0,
         bin_size_t$1,
         bin_write_t$1,
         bin_read_t$3,
         bin_read_t$4,
         bin_shape_t,
         bin_writer_t,
         bin_reader_t,
         bin_t];
      function _bFv_(i)
       {function check(name,of_x,to_x)
         {var
           i$0=caml_call2(of_x,m,caml_call2(to_x,m,i)),
           _bFB_=caml_call2(_aC_,i,i$0);
          if(_bFB_)
           {var
             _bFC_=
              function(param)
               {var
                 v1=param[2],
                 v0=param[1],
                 v0$0=caml_call1(sexp_of_t$0,v0),
                 v0$1=v1[2],
                 v1$0=[1,[0,_W1_,[0,caml_call1(sexp_of_t$0,v0$1),0]]];
                return [1,[0,v0$0,[0,v1$0,0]]]};
            return failwiths
                    (0,
                     0,
                     caml_call2(_eJ_,_W2_,name),
                     [0,i,[0,-1007959935,i$0]],
                     _bFC_)}
          return _bFB_}
        check(cst_string$1,of_string$16,to_string$19);
        return check
                (cst_bigstring,
                 of_bigstring,
                 function(eta)
                  {var _bFz_=0;
                   return function(_bFA_){return to_bigstring(_bFz_,eta,_bFA_)}})}
      var
       _bFw_=[0,Stdlib[8],0],
       _bFx_=[0,-1,[0,0,[0,1,[0,caml_call2(_ak_,Stdlib[8],2),_bFw_]]]],
       _bFy_=[0,caml_call2(_ak_,Stdlib[9],2),_bFx_];
      return caml_call2(Base_List[8],[0,Stdlib[9],_bFy_],_bFv_)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_List_iter_min_int_min_int_2_1_0_1,
      0,
      cst_src_binable_ml$0,
      10,
      0,
      585,
      _W0_);
    function _W3_(param)
     {var
       include=caml_call1(Stable$0[5][1],[0,t_of_sexp,sexp_of_t$0]),
       bin_size_t=include[1],
       bin_write_t=include[2],
       bin_read_t=include[3],
       bin_read_t$0=include[4],
       bin_shape_t=include[5],
       bin_writer_t=include[6],
       bin_reader_t=include[7],
       bin_t=include[8],
       M=
        [0,
         bin_size_t,
         bin_write_t,
         bin_read_t,
         bin_read_t$0,
         bin_shape_t,
         bin_writer_t,
         bin_reader_t,
         bin_t];
      function _bFr_(expect)
       {var got=of_string$16(M,to_string$19(M,expect));
        return caml_call8
                (Ppx_assert_lib_Runtime[3],
                 pos$68,
                 sexp_of_t$0,
                 _t_,
                 0,
                 0,
                 0,
                 expect,
                 got)}
      return caml_call2
              (Base_List[8],[0,_wp_,[0,-1,[0,0,[0,1,[0,_wq_,0]]]]],_bFr_)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_Of_sexpable,
      0,
      cst_src_binable_ml$1,
      26,
      0,
      339,
      _W3_);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$247);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     _W4_=Stable$0[2][1],
     _W5_=Stable$0[1][1],
     Core_kernel_Binable=
      [0,
       Minimal,
       _W5_,
       _W4_,
       Stable$0[3][1],
       Stable$0[4][1],
       Stable$0[5][1],
       Stable$0[6][1],
       of_bigstring,
       to_bigstring,
       of_string$16,
       to_string$19,
       Stable$0];
    caml_register_global(7468,Core_kernel_Binable,"Core_kernel__Binable");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$248);
    caml_call1(Expect_test_collector[4][1],cst_src_stable_unit_test_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$249,cst$94);
    function Make_sexp_deserialization_test(_bFo_)
     {function _bFp_(param)
       {function _bFq_(param)
         {var
           sexp_as_string=param[2],
           t=param[1],
           error=
            caml_call2
             (_lp_,
              0,
              function(param)
               {var sexp=caml_call1(_PE_,sexp_as_string);
                return caml_call1(_bFo_[1],sexp)});
          if(0 === error[0])
           {var t$0=error[1];
            return caml_call2(_bFo_[11],t,t$0)
                    ?_W6_
                    :caml_call4
                      (_lv_,
                       0,
                       cst_sexp_deserialization_mismatch,
                       [0,[0,434236056,t],[0,165604846,t$0]],
                       function(param)
                        {var
                          v1=param[2],
                          v0=param[1],
                          v0$0=v0[2],
                          v0$1=[1,[0,_W7_,[0,caml_call1(_bFo_[2],v0$0),0]]],
                          v0$2=v1[2],
                          v1$0=[1,[0,_W8_,[0,caml_call1(_bFo_[2],v0$2),0]]];
                         return [1,[0,v0$1,[0,v1$0,0]]]})}
          return caml_call4
                  (_lA_,
                   error,
                   cst_could_not_deserialize_sexp,
                   [0,sexp_as_string,[0,434236056,t]],
                   function(param)
                    {var
                      v1=param[2],
                      v0=param[1],
                      v0$0=caml_call1(sexp_of_t$58,v0),
                      v0$1=v1[2],
                      v1$0=[1,[0,_W9_,[0,caml_call1(_bFo_[2],v0$1),0]]];
                     return [1,[0,v0$0,[0,v1$0,0]]]})}
        return caml_call1
                (_ls_,caml_call1(_lG_,caml_call2(map$11,_bFo_[12],_bFq_)))}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_sexp_deserialization,
        0,
        cst_src_stable_unit_test_ml$0,
        5,
        2,
        784,
        _bFp_);
      return [0]}
    function Make_sexp_serialization_test(_bFk_)
     {function _bFl_(param)
       {function _bFm_(param)
         {var sexp_as_string=param[2],t=param[1];
          return caml_call2
                  (_lp_,
                   0,
                   function(param)
                    {var
                      sexp=caml_call1(_PE_,sexp_as_string),
                      serialized_sexp=caml_call1(_bFk_[2],t),
                      _bFn_=caml_notequal(serialized_sexp,sexp);
                     return _bFn_
                             ?failwiths
                               (0,
                                _Xa_,
                                cst_sexp_serialization_mismatch,
                                [0,[0,434236056,sexp],[0,165604846,serialized_sexp]],
                                function(param)
                                 {var
                                   v1=param[2],
                                   v0=param[1],
                                   v0$0=v0[2],
                                   v0$1=[1,[0,_W__,[0,caml_call1(_PT_,v0$0),0]]],
                                   v0$2=v1[2],
                                   v1$0=[1,[0,_W$_,[0,caml_call1(_PT_,v0$2),0]]];
                                  return [1,[0,v0$1,[0,v1$0,0]]]})
                             :_bFn_})}
        return caml_call1
                (_ls_,caml_call1(_lG_,caml_call2(map$11,_bFk_[12],_bFm_)))}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_sexp_serialization,
        0,
        cst_src_stable_unit_test_ml$1,
        29,
        2,
        557,
        _bFl_);
      return [0]}
    function Make_bin_io_test(_bFg_)
     {function _bFh_(param)
       {function _bFi_(param)
         {var
           expected_bin_io=param[3],
           t=param[1],
           binable_m=
            [0,
             _bFg_[7],
             _bFg_[8],
             _bFg_[4],
             _bFg_[5],
             _bFg_[10],
             _bFg_[9],
             _bFg_[6],
             _bFg_[3]],
           serialized_bin_io=to_string$19(binable_m,t);
          if(caml_string_notequal(serialized_bin_io,expected_bin_io))
           failwiths
            (0,
             _Xd_,
             cst_bin_io_serialization_mismatch,
             [0,
              t,
              [0,434236056,expected_bin_io],
              [0,165604846,serialized_bin_io]],
             function(param)
              {var
                v2=param[3],
                v1=param[2],
                v0=param[1],
                v0$0=caml_call1(_bFg_[2],v0),
                v0$1=v1[2],
                v1$0=[1,[0,_Xb_,[0,caml_call1(sexp_of_t$58,v0$1),0]]],
                v0$2=v2[2],
                v2$0=[1,[0,_Xc_,[0,caml_call1(sexp_of_t$58,v0$2),0]]];
               return [1,[0,v0$0,[0,v1$0,[0,v2$0,0]]]]});
          var
           t$0=of_string$16(binable_m,serialized_bin_io),
           _bFj_=1 - caml_call2(_bFg_[11],t,t$0);
          return _bFj_
                  ?failwiths
                    (0,
                     _Xg_,
                     cst_bin_io_deserialization_mismatch,
                     [0,[0,434236056,t],[0,165604846,t$0]],
                     function(param)
                      {var
                        v1=param[2],
                        v0=param[1],
                        v0$0=v0[2],
                        v0$1=[1,[0,_Xe_,[0,caml_call1(_bFg_[2],v0$0),0]]],
                        v0$2=v1[2],
                        v1$0=[1,[0,_Xf_,[0,caml_call1(_bFg_[2],v0$2),0]]];
                       return [1,[0,v0$1,[0,v1$0,0]]]})
                  :_bFj_}
        return caml_call2(iter$2,_bFg_[12],_bFi_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_bin_io,
        0,
        cst_src_stable_unit_test_ml$2,
        45,
        2,
        789,
        _bFh_);
      return [0]}
    function Make$8(T)
     {Make_sexp_deserialization_test(T);
      Make_sexp_serialization_test(T);
      Make_bin_io_test(T);
      return [0]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$250);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    function _Xu_(T)
     {function _bE$_(param)
       {function _bFe_(param)
         {var
           match=param[2],
           sexps=match[1],
           t=param[1],
           sexps$0=caml_call2(map$11,sexps,_PE_),
           match$0=caml_call1(T[2],t);
          if(0 === match$0[0])
           var
            serialized_elements=
             failwiths
              (0,
               _Xh_,
               cst_expected_list_when_serializing_unordered_container,
               t,
               T[2]);
          else
           var sexps$1=match$0[1],serialized_elements=sexps$1;
          var
           sorted_sexps=caml_call2(sort$0,caml_compare,sexps$0),
           sorted_serialized=
            caml_call2(sort$0,caml_compare,serialized_elements);
          if
           (1 - caml_call3(equal$4,sorted_sexps,sorted_serialized,caml_equal))
           failwiths
            (0,
             _Xk_,
             cst_sexp_serialization_mismatch$0,
             [0,[0,434236056,sexps$0],[0,165604846,serialized_elements]],
             function(param)
              {var
                v1=param[2],
                v0=param[1],
                v0$0=v0[2],
                v0$1=[1,[0,_Xi_,[0,caml_call2(sexp_of_t$25,_PT_,v0$0),0]]],
                v0$2=v1[2],
                v1$0=[1,[0,_Xj_,[0,caml_call2(sexp_of_t$25,_PT_,v0$2),0]]];
               return [1,[0,v0$1,[0,v1$0,0]]]});
          var
           sexp_permutations=
            caml_call2
             (init$1,
              10,
              function(param){return caml_call2(permute$0,0,sexps$0)});
          return caml_call2
                  (iter$2,
                   sexp_permutations,
                   function(sexps)
                    {var
                      t$0=caml_call1(T[1],[1,sexps]),
                      _bFf_=1 - caml_call2(T[11],t,t$0);
                     return _bFf_
                             ?failwiths
                               (0,
                                _Xn_,
                                cst_sexp_deserialization_msimatch,
                                [0,[0,434236056,t],[0,165604846,t$0]],
                                function(param)
                                 {var
                                   v1=param[2],
                                   v0=param[1],
                                   v0$0=v0[2],
                                   v0$1=[1,[0,_Xl_,[0,caml_call1(T[2],v0$0),0]]],
                                   v0$2=v1[2],
                                   v1$0=[1,[0,_Xm_,[0,caml_call1(T[2],v0$2),0]]];
                                  return [1,[0,v0$1,[0,v1$0,0]]]})
                             :_bFf_})}
        return caml_call2(iter$2,T[12],_bFe_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_sexp$1,
        0,
        cst_src_stable_unit_test_ml$3,
        72,
        2,
        1184,
        _bE$_);
      function is_concatenation(string,strings)
       {if(caml_call1(_Gp_,string))return caml_call2(for_all$1,strings,_Gp_);
        function loop(rev_skipped,strings)
         {if(strings)
           {var
             strings$0=strings[2],
             prefix=strings[1],
             continue$0=
              function(param){return loop([0,prefix,rev_skipped],strings$0)},
             match=caml_call2(_Gv_,string,prefix);
            if(match)
             {var
               string$0=match[1],
               _bFd_=
                is_concatenation
                 (string$0,caml_call2(rev_append,rev_skipped,strings$0));
              return _bFd_?_bFd_:continue$0(0)}
            return continue$0(0)}
          return 0}
        return loop(0,strings)}
      function _bFa_(param)
       {function _bFb_(param)
         {var
           match=param[2],
           bin_io_elements=match[3],
           bin_io_header=match[2],
           t=param[1],
           binable_m=[0,T[7],T[8],T[4],T[5],T[10],T[9],T[6],T[3]],
           serialized=to_string$19(binable_m,t),
           match$0=caml_call2(_Gv_,serialized,bin_io_header);
          if(match$0)
           var
            elements_string=match$0[1],
            serialization_matches=
             is_concatenation(elements_string,bin_io_elements);
          else
           var serialization_matches=0;
          if(1 - serialization_matches)
           failwiths
            (0,
             _Xq_,
             cst_serialization_mismatch,
             [0,
              [0,434236056,[0,bin_io_header,bin_io_elements]],
              [0,165604846,serialized]],
             function(param)
              {var
                v1=param[2],
                v0=param[1],
                v0$0=v0[2],
                v1$0=v0$0[2],
                v0$1=v0$0[1],
                v0$2=caml_call1(sexp_of_t$58,v0$1),
                v1$1=caml_call2(sexp_of_t$25,sexp_of_t$58,v1$0),
                v0$3=[1,[0,_Xo_,[0,[1,[0,v0$2,[0,v1$1,0]]],0]]],
                v0$4=v1[2],
                v1$2=[1,[0,_Xp_,[0,caml_call1(sexp_of_t$58,v0$4),0]]];
               return [1,[0,v0$3,[0,v1$2,0]]]});
          var
           permutatations=
            caml_call2
             (init$1,
              10,
              function(param){return caml_call2(permute$0,0,bin_io_elements)});
          return caml_call2
                  (iter$2,
                   permutatations,
                   function(elements)
                    {var
                      t$0=
                       of_string$16
                        (binable_m,
                         caml_call2(_Dw_,bin_io_header,caml_call2(_Hg_,0,elements))),
                      _bFc_=1 - caml_call2(T[11],t,t$0);
                     return _bFc_
                             ?failwiths
                               (0,
                                _Xt_,
                                cst_bin_io_deserialization_mismatch$0,
                                [0,[0,434236056,t],[0,165604846,t$0]],
                                function(param)
                                 {var
                                   v1=param[2],
                                   v0=param[1],
                                   v0$0=v0[2],
                                   v0$1=[1,[0,_Xr_,[0,caml_call1(T[2],v0$0),0]]],
                                   v0$2=v1[2],
                                   v1$0=[1,[0,_Xs_,[0,caml_call1(T[2],v0$2),0]]];
                                  return [1,[0,v0$1,[0,v1$0,0]]]})
                             :_bFc_})}
        return caml_call2(iter$2,T[12],_bFb_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_bin_io$0,
        0,
        cst_src_stable_unit_test_ml$4,
        117,
        2,
        1260,
        _bFa_);
      return [0]}
    var
     Core_kernel_Stable_unit_test=
      [0,
       Make_sexp_deserialization_test,
       Make_sexp_serialization_test,
       Make_bin_io_test,
       Make$8,
       _Xu_];
    caml_register_global
     (7469,Core_kernel_Stable_unit_test,"Core_kernel__Stable_unit_test");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$251);
    caml_call1(Expect_test_collector[4][1],cst_src_md5_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$252,cst$95);
    var
     to_hex=Bin_prot_Md5[6],
     of_hex_exn=Bin_prot_Md5[7],
     compare$57=Bin_prot_Md5[8],
     to_binable$1=Bin_prot_Md5[9],
     of_binable$1=Bin_prot_Md5[10];
    function sexp_of_t$71(t)
     {return caml_call1(sexp_of_t$58,caml_call1(to_hex,t))}
    function t_of_sexp$63(s)
     {return caml_call1(of_hex_exn,caml_call1(t_of_sexp$46,s))}
    function hash_fold_t$34(accum,t)
     {return caml_call2(hash_fold_t$25,accum,caml_call1(to_binable$1,t))}
    function hash$26(t){return caml_call1(hash$18,caml_call1(to_binable$1,t))}
    function sexp_of_t$72(x)
     {return caml_call1(sexp_of_t$58,caml_call1(to_binable$1,x))}
    function t_of_sexp$64(x)
     {return caml_call1(of_binable$1,caml_call1(t_of_sexp$46,x))}
    var
     include$88=
      caml_call1
       (Bin_prot_Utils[7],
        [0,
         [0,
          bin_shape_t$54,
          bin_size_t$44,
          bin_write_t$44,
          bin_read_t$89,
          bin_read_t$90],
         to_binable$1,
         of_binable$1]),
     bin_size_t$55=include$88[1],
     bin_write_t$56=include$88[2],
     bin_read_t$113=include$88[3],
     bin_read_t$114=include$88[4],
     bin_shape_t$74=include$88[5],
     bin_writer_t$69=include$88[6],
     bin_reader_t$69=include$88[7],
     bin_t$69=include$88[8],
     _Xv_=Make$2([0,compare$57,t_of_sexp$64,sexp_of_t$72]),
     equal$32=_Xv_[7],
     min$13=_Xv_[9],
     max$13=_Xv_[10],
     ascending$12=_Xv_[11],
     descending$12=_Xv_[12],
     between$12=_Xv_[13],
     clamp_exn$12=_Xv_[14],
     clamp$12=_Xv_[15],
     comparator$22=_Xv_[16],
     validate_lbound$12=_Xv_[17],
     validate_ubound$12=_Xv_[18],
     validate_bound$12=_Xv_[19],
     Replace_polymorphic_compare$10=_Xv_[20],
     Map$14=_Xv_[21],
     Set$14=_Xv_[22],
     _Xw_=_Xv_[1],
     _Xx_=_Xv_[2],
     _Xy_=_Xv_[3],
     _Xz_=_Xv_[4],
     _XA_=_Xv_[5],
     _XB_=_Xv_[6],
     include$89=
      Make$5([0,hash_fold_t$34,t_of_sexp$64,compare$57,sexp_of_t$72,hash$26]),
     compare$58=include$89[1],
     hash_fold_t$35=include$89[2],
     hash$27=include$89[3],
     hashable$7=include$89[4],
     Table$8=include$89[5],
     Hash_set$8=include$89[6],
     Hash_queue$8=include$89[7];
    function to_binable$2(_bE__){return _bE__}
    function of_binable$2(_bE9_){return _bE9_}
    var
     include$90=
      caml_call1
       (Bin_prot_Utils[7],
        [0,
         [0,
          Bin_prot_Md5[1],
          Bin_prot_Md5[2],
          Bin_prot_Md5[3],
          Bin_prot_Md5[4],
          Bin_prot_Md5[5]],
         to_binable$2,
         of_binable$2]),
     bin_size_t$56=include$90[1],
     bin_write_t$57=include$90[2],
     bin_read_t$115=include$90[3],
     bin_read_t$116=include$90[4],
     bin_shape_t$75=include$90[5],
     bin_writer_t$70=include$90[6],
     bin_reader_t$70=include$90[7],
     bin_t$70=include$90[8];
    function string(s){return caml_call1(Md5_lib[8],s)}
    function _XC_(param)
     {function equal(x_005,x_006)
       {var match=caml_call2(compare$57,x_005,x_006);return 0 === match?1:0}
      var
       _bE8_=
        [0,
         [0,
          string(cst_x),
          cst_157_212_228a_140_1284_245_200VN_021_g_166,
          cst_a_4_VN_g],
         0],
       tests=
        [0,
         [0,
          string(cst$96),
          cst_212_029_140_217_143_000_178_004_233_128_t_152_236_248B,
          cst_B$1],
         _bE8_];
      Make$8
       ([0,
         t_of_sexp$64,
         sexp_of_t$72,
         bin_t$69,
         bin_read_t$113,
         bin_read_t$114,
         bin_reader_t$69,
         bin_size_t$55,
         bin_write_t$56,
         bin_writer_t$69,
         bin_shape_t$74,
         equal,
         tests]);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst_Md5_As_binary_string_V1,
      0,
      cst_src_md5_ml$0,
      55,
      2,
      522,
      _XC_);
    function _XD_(param)
     {function equal(x_009,x_010)
       {var match=caml_call2(compare$57,x_009,x_010);return 0 === match?1:0}
      var
       _bE7_=
        [0,
         [0,
          string(cst_x$0),
          cst_9dd4e461268c8034f5c8564e155c67a6,
          cst_a_4_VN_g$0],
         0],
       tests=
        [0,
         [0,string(cst$97),cst_d41d8cd98f00b204e9800998ecf8427e,cst_B$2],
         _bE7_];
      Make$8
       ([0,
         t_of_sexp$63,
         sexp_of_t$71,
         bin_t$70,
         bin_read_t$115,
         bin_read_t$116,
         bin_reader_t$70,
         bin_size_t$56,
         bin_write_t$57,
         bin_writer_t$70,
         bin_shape_t$75,
         equal,
         tests]);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst_Md5_V1,
      0,
      cst_src_md5_ml$1,
      68,
      2,
      429,
      _XD_);
    var
     _XE_=Make$2([0,compare$57,t_of_sexp$63,sexp_of_t$71]),
     _XF_=_XE_[1],
     _XG_=_XE_[2],
     _XH_=_XE_[3],
     _XI_=_XE_[4],
     _XJ_=_XE_[5],
     _XK_=_XE_[6],
     _XL_=_XE_[7],
     _XM_=_XE_[9],
     _XN_=_XE_[10],
     _XO_=_XE_[11],
     _XP_=_XE_[12],
     _XQ_=_XE_[13],
     _XR_=_XE_[14],
     _XS_=_XE_[15],
     _XT_=_XE_[16],
     _XU_=_XE_[17],
     _XV_=_XE_[18],
     _XW_=_XE_[19],
     _XX_=_XE_[20],
     _XY_=_XE_[21],
     _XZ_=_XE_[22],
     include$91=
      Make$5([0,hash_fold_t$34,t_of_sexp$63,compare$57,sexp_of_t$71,hash$26]),
     _X7_=Md5_lib[9],
     _X0_=include$91[1],
     _X1_=include$91[2],
     _X2_=include$91[3],
     _X3_=include$91[4],
     _X4_=include$91[5],
     _X5_=include$91[6],
     _X6_=include$91[7],
     digest_num_bytes=16;
    function file(f)
     {return caml_call1(of_binable$1,caml_call1(Stdlib_digest[7],f))}
    function digest_channel_blocking_without_releasing_runtime_lock
     (channel,len)
     {return caml_call1(of_binable$1,runtime.caml_md5_chan(channel,len))}
    function channel(channel,len)
     {return digest_channel_blocking_without_releasing_runtime_lock
              (channel,len)}
    function output_blocking(t,oc)
     {var _bE6_=caml_call1(to_binable$1,t);
      return caml_call2(Stdlib_digest[8],oc,_bE6_)}
    function output$0(oc,t){return output_blocking(t,oc)}
    function input$0(ic)
     {return caml_call1(of_binable$1,caml_call1(Stdlib_digest[9],ic))}
    var _X8_=Md5_lib[10];
    function subbytes(s,pos,len){return caml_call3(_X8_,s,pos,len)}
    function digest_bin_prot(writer,value)
     {return string(caml_call2(Writer[1],writer,value))}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$253);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     _X9_=
      [0,
       [0,
        [0,
         t_of_sexp$64,
         sexp_of_t$72,
         bin_t$69,
         bin_read_t$113,
         bin_read_t$114,
         bin_reader_t$69,
         bin_size_t$55,
         bin_write_t$56,
         bin_writer_t$69,
         bin_shape_t$74,
         compare$57,
         hash_fold_t$34,
         hash$26]],
       t_of_sexp$64,
       sexp_of_t$72,
       _Xw_,
       _Xx_,
       _Xy_,
       _Xz_,
       _XA_,
       _XB_,
       equal$32,
       min$13,
       max$13,
       ascending$12,
       descending$12,
       between$12,
       clamp_exn$12,
       clamp$12,
       comparator$22,
       validate_lbound$12,
       validate_ubound$12,
       validate_bound$12,
       Replace_polymorphic_compare$10,
       Map$14,
       Set$14,
       bin_size_t$55,
       bin_write_t$56,
       bin_read_t$113,
       bin_read_t$114,
       bin_shape_t$74,
       bin_writer_t$69,
       bin_reader_t$69,
       bin_t$69,
       compare$58,
       hash_fold_t$35,
       hash$27,
       hashable$7,
       Table$8,
       Hash_set$8,
       Hash_queue$8],
     Core_kernel_Md5=
      [0,
       [0,
        [0,
         t_of_sexp$63,
         sexp_of_t$71,
         bin_t$70,
         bin_read_t$115,
         bin_read_t$116,
         bin_reader_t$70,
         bin_size_t$56,
         bin_write_t$57,
         bin_writer_t$70,
         bin_shape_t$75,
         compare$57,
         hash_fold_t$34,
         hash$26]],
       _X9_,
       t_of_sexp$63,
       sexp_of_t$71,
       _XF_,
       _XG_,
       _XH_,
       _XI_,
       _XJ_,
       _XK_,
       _XL_,
       _XM_,
       _XN_,
       _XO_,
       _XP_,
       _XQ_,
       _XR_,
       _XS_,
       _XT_,
       _XU_,
       _XV_,
       _XW_,
       _XX_,
       _XY_,
       _XZ_,
       bin_size_t$56,
       bin_write_t$57,
       bin_read_t$115,
       bin_read_t$116,
       bin_shape_t$75,
       bin_writer_t$70,
       bin_reader_t$70,
       bin_t$70,
       _X0_,
       _X1_,
       _X2_,
       _X3_,
       _X4_,
       _X5_,
       _X6_,
       digest_num_bytes,
       to_binable$1,
       of_binable$1,
       to_hex,
       of_hex_exn,
       string,
       _X7_,
       _X8_,
       file,
       digest_channel_blocking_without_releasing_runtime_lock,
       input$0,
       output_blocking,
       string,
       _X7_,
       subbytes,
       of_hex_exn,
       file,
       channel,
       output$0,
       input$0,
       digest_bin_prot];
    caml_register_global(7473,Core_kernel_Md5,"Core_kernel__Md5");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$254);
    caml_call1(Expect_test_collector[4][1],cst_src_zone_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$255,cst$98);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$256);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Zone_intf=[0];
    caml_register_global(7474,Core_kernel_Zone_intf,"Core_kernel__Zone_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$257);
    caml_call1(Expect_test_collector[4][1],cst_src_zone_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$258,cst$99);
    var
     Invalid_file_format=
      [248,cst_Core_kernel_Zone_Invalid_file_format,caml_fresh_oo_id(0)];
    function _X__(param)
     {if(param[1] === Invalid_file_format)
       {var v0=param[2],v0$0=caml_call1(sexp_of_t$58,v0);
        return [1,[0,_X$_,[0,v0$0,0]]]}
      throw [0,Assert_failure,_Ya_]}
    caml_call3(Sexplib0_Sexp_conv[51][2],0,Invalid_file_format,_X__);
    var before_first_transition=-1;
    function to_external(t)
     {return caml_call2(Replace_polymorphic_compare[10],0,t)}
    function of_external(t){return t}
    var
     include$92=
      caml_call1
       (caml_call1
         (_W5_,
          [0,
           bin_shape_t$35,
           bin_size_t$36,
           bin_write_t$36,
           bin_read_t$74,
           bin_read_t$73]),
        [0,to_external,of_external]),
     bin_size_t$57=include$92[1],
     bin_write_t$58=include$92[2],
     bin_read_t$117=include$92[3],
     bin_shape_t$76=include$92[5],
     include$93=
      caml_call1
       (caml_call1(include$1[1],[0,t_of_sexp$32,sexp_of_t$43]),
        [0,to_external,of_external]),
     t_of_sexp$65=include$93[1],
     sexp_of_t$73=include$93[2],
     _Yb_=
      caml_call1
       (Bin_prot_Shape[8],
        [0,
         [0,cst_utc_offset_in_seconds,Stable$4[1][8]],
         [0,
          [0,cst_is_dst,bin_shape_bool],
          [0,[0,cst_abbrv,bin_shape_string],0]]]),
     _Yc_=[0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$156),0,_Yb_],0],
     _Yd_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_zone_ml_48_8),
     group$99=caml_call2(Bin_prot_Shape[6],_Yd_,_Yc_),
     _Ye_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$157),
     bin_shape_t$77=caml_call1(caml_call2(Bin_prot_Shape[14],group$99,_Ye_),0);
    function bin_size_t$58(param)
     {var
       v3=param[3],
       v2=param[2],
       v1=param[1],
       size=caml_call1(Stable$4[1][5],v1) | 0,
       size$0=size + caml_call1(_bb_,v2) | 0;
      return size$0 + caml_call1(bin_size_t$44,v3) | 0}
    function bin_write_t$59(buf,pos,param)
     {var
       v3=param[3],
       v2=param[2],
       v1=param[1],
       pos$0=caml_call3(Stable$4[1][6],buf,pos,v1),
       pos$1=caml_call3(_bW_,buf,pos$0,v2);
      return caml_call3(bin_write_t$44,buf,pos$1,v3)}
    function bin_read_t$118(buf,pos_ref)
     {var
       v_utc_offset_in_seconds=caml_call2(Stable$4[1][2],buf,pos_ref),
       v_is_dst=caml_call2(_bY_,buf,pos_ref),
       v_abbrv=caml_call2(bin_read_t$89,buf,pos_ref);
      return [0,v_utc_offset_in_seconds,v_is_dst,v_abbrv]}
    function t_of_sexp$66(sexp)
     {if(0 === sexp[0])
       return caml_call2(Sexplib0_Sexp_conv_error[15],tp_loc$26,sexp);
      var
       field_sexps=sexp[1],
       utc_offset_in_seconds_field=[0,0],
       is_dst_field=[0,0],
       abbrv_field=[0,0],
       duplicates=[0,0],
       extra=[0,0],
       param=field_sexps;
      for(;;)
       {if(param)
         {var _bEY_=param[1];
          if(1 === _bEY_[0])
           {var _bEZ_=_bEY_[1];
            if(_bEZ_)
             {var _bE0_=_bEZ_[1];
              if(0 === _bE0_[0])
               {var _bE1_=_bEZ_[2],_bE2_=_bE0_[1];
                if(! _bE1_)
                 {var tail$0=param[2];
                  if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_bE2_,extra[1]];
                  var param=tail$0;
                  continue}
                if(! _bE1_[2])
                 {var tail=param[2],field_sexp=_bE1_[1];
                  if(caml_string_notequal(_bE2_,cst_abbrv$0))
                   if(caml_string_notequal(_bE2_,cst_is_dst$0))
                    if(caml_string_notequal(_bE2_,cst_utc_offset_in_seconds$0))
                     {if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_bE2_,extra[1]]}
                    else
                     if(utc_offset_in_seconds_field[1])
                      duplicates[1] = [0,_bE2_,duplicates[1]];
                     else
                      {var fvalue=caml_call1(Stable$4[1][10],field_sexp);
                       utc_offset_in_seconds_field[1] = [0,fvalue]}
                   else
                    if(is_dst_field[1])
                     duplicates[1] = [0,_bE2_,duplicates[1]];
                    else
                     {var fvalue$0=caml_call1(_Bz_,field_sexp);
                      is_dst_field[1] = [0,fvalue$0]}
                  else
                   if(abbrv_field[1])
                    duplicates[1] = [0,_bE2_,duplicates[1]];
                   else
                    {var fvalue$1=caml_call1(t_of_sexp$46,field_sexp);
                     abbrv_field[1] = [0,fvalue$1]}
                  var param=tail;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[9],tp_loc$26,_bEY_)}
        if(duplicates[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[11],tp_loc$26,duplicates[1],sexp);
        if(extra[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],tp_loc$26,extra[1],sexp);
        var
         _bE3_=utc_offset_in_seconds_field[1],
         _bE4_=is_dst_field[1],
         _bE5_=abbrv_field[1];
        if(_bE3_)
         if(_bE4_)
          if(_bE5_)
           {var
             abbrv_value=_bE5_[1],
             is_dst_value=_bE4_[1],
             utc_offset_in_seconds_value=_bE3_[1];
            return [0,utc_offset_in_seconds_value,is_dst_value,abbrv_value]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[14],
                 tp_loc$26,
                 sexp,
                 [0,
                  [0,
                   0 === utc_offset_in_seconds_field[1]?1:0,
                   cst_utc_offset_in_seconds$1],
                  [0,
                   [0,0 === is_dst_field[1]?1:0,cst_is_dst$1],
                   [0,[0,0 === abbrv_field[1]?1:0,cst_abbrv$1],0]]])}}
    function sexp_of_t$74(param)
     {var
       v_abbrv=param[3],
       v_is_dst=param[2],
       v_utc_offset_in_seconds=param[1],
       arg=caml_call1(sexp_of_t$58,v_abbrv),
       bnds=[0,[1,[0,_Yf_,[0,arg,0]]],0],
       arg$0=caml_call1(_BA_,v_is_dst),
       bnds$0=[0,[1,[0,_Yg_,[0,arg$0,0]]],bnds],
       arg$1=caml_call1(Stable$4[1][11],v_utc_offset_in_seconds),
       bnds$1=[0,[1,[0,_Yh_,[0,arg$1,0]]],bnds$0];
      return [1,bnds$1]}
    var
     _Yi_=
      caml_call1
       (Bin_prot_Shape[8],
        [0,
         [0,cst_time_in_seconds_since_epoch,Stable$4[1][8]],
         [0,[0,cst_seconds,bin_shape_int],0]]),
     _Yj_=[0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$158),0,_Yi_],0],
     _Yk_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_zone_ml_60_8),
     group$100=caml_call2(Bin_prot_Shape[6],_Yk_,_Yj_),
     _Yl_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$159),
     bin_shape_t$78=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$100,_Yl_),0);
    function bin_size_t$59(param)
     {var v2=param[2],v1=param[1],size=caml_call1(Stable$4[1][5],v1) | 0;
      return size + caml_call1(bin_size_t$36,v2) | 0}
    function bin_write_t$60(buf,pos,param)
     {var v2=param[2],v1=param[1],pos$0=caml_call3(Stable$4[1][6],buf,pos,v1);
      return caml_call3(bin_write_t$36,buf,pos$0,v2)}
    function bin_read_t$119(buf,pos_ref)
     {var
       v_time_in_seconds_since_epoch=caml_call2(Stable$4[1][2],buf,pos_ref),
       v_seconds=caml_call2(bin_read_t$74,buf,pos_ref);
      return [0,v_time_in_seconds_since_epoch,v_seconds]}
    function t_of_sexp$67(sexp)
     {if(0 === sexp[0])
       return caml_call2(Sexplib0_Sexp_conv_error[15],tp_loc$27,sexp);
      var
       field_sexps=sexp[1],
       time_in_seconds_since_epoch_field=[0,0],
       seconds_field=[0,0],
       duplicates=[0,0],
       extra=[0,0],
       param=field_sexps;
      for(;;)
       {if(param)
         {var _bER_=param[1];
          if(1 === _bER_[0])
           {var _bES_=_bER_[1];
            if(_bES_)
             {var _bET_=_bES_[1];
              if(0 === _bET_[0])
               {var _bEU_=_bES_[2],_bEV_=_bET_[1];
                if(! _bEU_)
                 {var tail$0=param[2];
                  if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_bEV_,extra[1]];
                  var param=tail$0;
                  continue}
                if(! _bEU_[2])
                 {var tail=param[2],field_sexp=_bEU_[1];
                  if(caml_string_notequal(_bEV_,cst_seconds$0))
                   if
                    (caml_string_notequal
                      (_bEV_,cst_time_in_seconds_since_epoch$0))
                    {if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_bEV_,extra[1]]}
                   else
                    if(time_in_seconds_since_epoch_field[1])
                     duplicates[1] = [0,_bEV_,duplicates[1]];
                    else
                     {var fvalue=caml_call1(Stable$4[1][10],field_sexp);
                      time_in_seconds_since_epoch_field[1] = [0,fvalue]}
                  else
                   if(seconds_field[1])
                    duplicates[1] = [0,_bEV_,duplicates[1]];
                   else
                    {var fvalue$0=caml_call1(t_of_sexp$32,field_sexp);
                     seconds_field[1] = [0,fvalue$0]}
                  var param=tail;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[9],tp_loc$27,_bER_)}
        if(duplicates[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[11],tp_loc$27,duplicates[1],sexp);
        if(extra[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],tp_loc$27,extra[1],sexp);
        var _bEW_=time_in_seconds_since_epoch_field[1],_bEX_=seconds_field[1];
        if(_bEW_)
         if(_bEX_)
          {var
            seconds_value=_bEX_[1],
            time_in_seconds_since_epoch_value=_bEW_[1];
           return [0,time_in_seconds_since_epoch_value,seconds_value]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[14],
                 tp_loc$27,
                 sexp,
                 [0,
                  [0,
                   0 === time_in_seconds_since_epoch_field[1]?1:0,
                   cst_time_in_seconds_since_epoch$1],
                  [0,[0,0 === seconds_field[1]?1:0,cst_seconds$1],0]])}}
    function sexp_of_t$75(param)
     {var
       v_seconds=param[2],
       v_time_in_seconds_since_epoch=param[1],
       arg=caml_call1(sexp_of_t$43,v_seconds),
       bnds=[0,[1,[0,_Ym_,[0,arg,0]]],0],
       arg$0=caml_call1(Stable$4[1][11],v_time_in_seconds_since_epoch),
       bnds$0=[0,[1,[0,_Yn_,[0,arg$0,0]]],bnds];
      return [1,bnds$0]}
    var
     _Yo_=
      caml_call1
       (Bin_prot_Shape[8],
        [0,
         [0,cst_start_time_in_seconds_since_epoch,Stable$4[1][8]],
         [0,[0,cst_new_regime,bin_shape_t$77],0]]),
     _Yp_=[0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$160),0,_Yo_],0],
     _Yq_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_zone_ml_68_8),
     group$101=caml_call2(Bin_prot_Shape[6],_Yq_,_Yp_),
     _Yr_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$161),
     bin_shape_t$79=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$101,_Yr_),0);
    function bin_size_t$60(param)
     {var v2=param[2],v1=param[1],size=caml_call1(Stable$4[1][5],v1) | 0;
      return size + bin_size_t$58(v2) | 0}
    function bin_write_t$61(buf,pos,param)
     {var v2=param[2],v1=param[1],pos$0=caml_call3(Stable$4[1][6],buf,pos,v1);
      return bin_write_t$59(buf,pos$0,v2)}
    function bin_read_t$120(buf,pos_ref)
     {var
       v_start_time_in_seconds_since_epoch=
        caml_call2(Stable$4[1][2],buf,pos_ref),
       v_new_regime=bin_read_t$118(buf,pos_ref);
      return [0,v_start_time_in_seconds_since_epoch,v_new_regime]}
    function t_of_sexp$68(sexp)
     {if(0 === sexp[0])
       return caml_call2(Sexplib0_Sexp_conv_error[15],tp_loc$28,sexp);
      var
       field_sexps=sexp[1],
       start_time_in_seconds_since_epoch_field=[0,0],
       new_regime_field=[0,0],
       duplicates=[0,0],
       extra=[0,0],
       param=field_sexps;
      for(;;)
       {if(param)
         {var _bEK_=param[1];
          if(1 === _bEK_[0])
           {var _bEL_=_bEK_[1];
            if(_bEL_)
             {var _bEM_=_bEL_[1];
              if(0 === _bEM_[0])
               {var _bEN_=_bEL_[2],_bEO_=_bEM_[1];
                if(! _bEN_)
                 {var tail$0=param[2];
                  if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_bEO_,extra[1]];
                  var param=tail$0;
                  continue}
                if(! _bEN_[2])
                 {var tail=param[2],field_sexp=_bEN_[1];
                  if(caml_string_notequal(_bEO_,cst_new_regime$0))
                   if
                    (caml_string_notequal
                      (_bEO_,cst_start_time_in_seconds_since_epoch$0))
                    {if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_bEO_,extra[1]]}
                   else
                    if(start_time_in_seconds_since_epoch_field[1])
                     duplicates[1] = [0,_bEO_,duplicates[1]];
                    else
                     {var fvalue=caml_call1(Stable$4[1][10],field_sexp);
                      start_time_in_seconds_since_epoch_field[1] = [0,fvalue]}
                  else
                   if(new_regime_field[1])
                    duplicates[1] = [0,_bEO_,duplicates[1]];
                   else
                    {var fvalue$0=t_of_sexp$66(field_sexp);
                     new_regime_field[1] = [0,fvalue$0]}
                  var param=tail;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[9],tp_loc$28,_bEK_)}
        if(duplicates[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[11],tp_loc$28,duplicates[1],sexp);
        if(extra[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],tp_loc$28,extra[1],sexp);
        var
         _bEP_=start_time_in_seconds_since_epoch_field[1],
         _bEQ_=new_regime_field[1];
        if(_bEP_)
         if(_bEQ_)
          {var
            new_regime_value=_bEQ_[1],
            start_time_in_seconds_since_epoch_value=_bEP_[1];
           return [0,start_time_in_seconds_since_epoch_value,new_regime_value]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[14],
                 tp_loc$28,
                 sexp,
                 [0,
                  [0,
                   0 === start_time_in_seconds_since_epoch_field[1]?1:0,
                   cst_start_time_in_seconds_since_epoch$1],
                  [0,[0,0 === new_regime_field[1]?1:0,cst_new_regime$1],0]])}}
    function sexp_of_t$76(param)
     {var
       v_new_regime=param[2],
       v_start_time_in_seconds_since_epoch=param[1],
       arg=sexp_of_t$74(v_new_regime),
       bnds=[0,[1,[0,_Ys_,[0,arg,0]]],0],
       arg$0=caml_call1(Stable$4[1][11],v_start_time_in_seconds_since_epoch),
       bnds$0=[0,[1,[0,_Yt_,[0,arg$0,0]]],bnds];
      return [1,bnds$0]}
    var
     _Yu_=
      [0,
       [0,cst_last_regime_index,bin_shape_t$76],
       [0,
        [0,cst_default_local_time_type,bin_shape_t$77],
        [0,[0,cst_leap_seconds,bin_shape_list(bin_shape_t$78)],0]]],
     _Yv_=[0,[0,cst_transitions,bin_shape_array(bin_shape_t$79)],_Yu_],
     _Yw_=[0,[0,cst_digest,bin_shape_option(_X9_[29])],_Yv_],
     _Yx_=
      [0,
       [0,cst_name,bin_shape_string],
       [0,[0,cst_original_filename,bin_shape_option(bin_shape_string)],_Yw_]],
     _Yy_=caml_call1(Bin_prot_Shape[8],_Yx_),
     _Yz_=[0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$162),0,_Yy_],0],
     _YA_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_zone_ml_75_6),
     group$102=caml_call2(Bin_prot_Shape[6],_YA_,_Yz_),
     _YB_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$163),
     bin_shape_t$80=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$102,_YB_),0);
    function bin_size_t$61(param)
     {var
       v4=param[4],
       v3=param[3],
       v2=param[2],
       v1=param[1],
       v5=param[5],
       v7=param[7],
       v6=param[6],
       size=caml_call1(bin_size_t$44,v1) | 0,
       size$0=size + bin_size_option(bin_size_t$44,v2) | 0,
       size$1=size$0 + bin_size_option(_X9_[25],v3) | 0,
       size$2=size$1 + bin_size_array(bin_size_t$60,v4) | 0,
       size$3=size$2 + caml_call1(bin_size_t$57,v5) | 0,
       size$4=size$3 + bin_size_t$58(v6) | 0;
      return size$4 + bin_size_list(bin_size_t$59,v7) | 0}
    function bin_write_t$62(buf,pos,param)
     {var
       v4=param[4],
       v3=param[3],
       v2=param[2],
       v1=param[1],
       v5=param[5],
       v7=param[7],
       v6=param[6],
       pos$0=caml_call3(bin_write_t$44,buf,pos,v1),
       pos$3=bin_write_option(bin_write_t$44,buf,pos$0,v2),
       pos$4=bin_write_option(_X9_[26],buf,pos$3,v3),
       pos$5=bin_write_array(bin_write_t$61,buf,pos$4,v4),
       pos$1=caml_call3(bin_write_t$58,buf,pos$5,v5),
       pos$2=bin_write_t$59(buf,pos$1,v6);
      return bin_write_list(bin_write_t$60,buf,pos$2,v7)}
    var bin_writer_t$71=[0,bin_size_t$61,bin_write_t$62];
    function bin_read_t$121(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],
               cst_src_zone_ml_Stable_Full_data_V1_t,
               pos_ref[1])}
    function bin_read_t$122(buf,pos_ref)
     {var
       v_name=caml_call2(bin_read_t$89,buf,pos_ref),
       v_original_filename=bin_read_option$0(bin_read_t$89,buf,pos_ref),
       v_digest=bin_read_option$0(_X9_[27],buf,pos_ref),
       v_transitions=bin_read_array$0(bin_read_t$120,buf,pos_ref),
       v_last_regime_index=caml_call2(bin_read_t$117,buf,pos_ref),
       v_default_local_time_type=bin_read_t$118(buf,pos_ref),
       v_leap_seconds=bin_read_list$0(bin_read_t$119,buf,pos_ref);
      return [0,
              v_name,
              v_original_filename,
              v_digest,
              v_transitions,
              v_last_regime_index,
              v_default_local_time_type,
              v_leap_seconds]}
    var
     bin_reader_t$71=[0,bin_read_t$122,bin_read_t$121],
     bin_t$71=[0,bin_shape_t$80,bin_writer_t$71,bin_reader_t$71];
    function t_of_sexp$69(sexp)
     {if(0 === sexp[0])
       return caml_call2(Sexplib0_Sexp_conv_error[15],tp_loc$29,sexp);
      var
       field_sexps=sexp[1],
       name_field=[0,0],
       original_filename_field=[0,0],
       digest_field=[0,0],
       transitions_field=[0,0],
       last_regime_index_field=[0,0],
       default_local_time_type_field=[0,0],
       leap_seconds_field=[0,0],
       duplicates=[0,0],
       extra=[0,0],
       param=field_sexps;
      for(;;)
       {if(param)
         {var _bEy_=param[1];
          if(1 === _bEy_[0])
           {var _bEz_=_bEy_[1];
            if(_bEz_)
             {var _bEA_=_bEz_[1];
              if(0 === _bEA_[0])
               {var _bEB_=_bEz_[2],_bEC_=_bEA_[1];
                if(! _bEB_)
                 {var tail$0=param[2];
                  if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_bEC_,extra[1]];
                  var param=tail$0;
                  continue}
                if(! _bEB_[2])
                 {var tail=param[2],field_sexp=_bEB_[1];
                  if
                   (caml_string_notequal(_bEC_,cst_default_local_time_type$0))
                   if(caml_string_notequal(_bEC_,cst_digest$0))
                    if(caml_string_notequal(_bEC_,cst_last_regime_index$0))
                     if(caml_string_notequal(_bEC_,cst_leap_seconds$0))
                      if(caml_string_notequal(_bEC_,cst_name$0))
                       if(caml_string_notequal(_bEC_,cst_original_filename$0))
                        if(caml_string_notequal(_bEC_,cst_transitions$0))
                         {if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_bEC_,extra[1]]}
                        else
                         if(transitions_field[1])
                          duplicates[1] = [0,_bEC_,duplicates[1]];
                         else
                          {var fvalue=caml_call2(_iK_,t_of_sexp$68,field_sexp);
                           transitions_field[1] = [0,fvalue]}
                       else
                        if(original_filename_field[1])
                         duplicates[1] = [0,_bEC_,duplicates[1]];
                        else
                         {var
                           fvalue$0=
                            caml_call2(t_of_sexp$29,t_of_sexp$46,field_sexp);
                          original_filename_field[1] = [0,fvalue$0]}
                      else
                       if(name_field[1])
                        duplicates[1] = [0,_bEC_,duplicates[1]];
                       else
                        {var fvalue$1=caml_call1(t_of_sexp$46,field_sexp);
                         name_field[1] = [0,fvalue$1]}
                     else
                      if(leap_seconds_field[1])
                       duplicates[1] = [0,_bEC_,duplicates[1]];
                      else
                       {var
                         fvalue$2=
                          caml_call2(t_of_sexp$23,t_of_sexp$67,field_sexp);
                        leap_seconds_field[1] = [0,fvalue$2]}
                    else
                     if(last_regime_index_field[1])
                      duplicates[1] = [0,_bEC_,duplicates[1]];
                     else
                      {var fvalue$3=caml_call1(t_of_sexp$65,field_sexp);
                       last_regime_index_field[1] = [0,fvalue$3]}
                   else
                    if(digest_field[1])
                     duplicates[1] = [0,_bEC_,duplicates[1]];
                    else
                     {var fvalue$4=caml_call2(t_of_sexp$29,_X9_[2],field_sexp);
                      digest_field[1] = [0,fvalue$4]}
                  else
                   if(default_local_time_type_field[1])
                    duplicates[1] = [0,_bEC_,duplicates[1]];
                   else
                    {var fvalue$5=t_of_sexp$66(field_sexp);
                     default_local_time_type_field[1] = [0,fvalue$5]}
                  var param=tail;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[9],tp_loc$29,_bEy_)}
        if(duplicates[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[11],tp_loc$29,duplicates[1],sexp);
        if(extra[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],tp_loc$29,extra[1],sexp);
        var
         _bED_=name_field[1],
         _bEE_=original_filename_field[1],
         _bEF_=digest_field[1],
         _bEG_=transitions_field[1],
         _bEH_=last_regime_index_field[1],
         _bEI_=default_local_time_type_field[1],
         _bEJ_=leap_seconds_field[1];
        if(_bED_)
         if(_bEE_)
          if(_bEF_)
           if(_bEG_)
            if(_bEH_)
             if(_bEI_)
              if(_bEJ_)
               {var
                 leap_seconds_value=_bEJ_[1],
                 default_local_time_type_value=_bEI_[1],
                 last_regime_index_value=_bEH_[1],
                 transitions_value=_bEG_[1],
                 digest_value=_bEF_[1],
                 original_filename_value=_bEE_[1],
                 name_value=_bED_[1];
                return [0,
                        name_value,
                        original_filename_value,
                        digest_value,
                        transitions_value,
                        last_regime_index_value,
                        default_local_time_type_value,
                        leap_seconds_value]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[14],
                 tp_loc$29,
                 sexp,
                 [0,
                  [0,0 === name_field[1]?1:0,cst_name$1],
                  [0,
                   [0,
                    0 === original_filename_field[1]?1:0,
                    cst_original_filename$1],
                   [0,
                    [0,0 === digest_field[1]?1:0,cst_digest$1],
                    [0,
                     [0,0 === transitions_field[1]?1:0,cst_transitions$1],
                     [0,
                      [0,
                       0 === last_regime_index_field[1]?1:0,
                       cst_last_regime_index$1],
                      [0,
                       [0,
                        0 === default_local_time_type_field[1]?1:0,
                        cst_default_local_time_type$1],
                       [0,[0,0 === leap_seconds_field[1]?1:0,cst_leap_seconds$1],0]]]]]]])}}
    function sexp_of_t$77(param)
     {var
       v_transitions=param[4],
       v_digest=param[3],
       v_original_filename=param[2],
       v_name=param[1],
       v_last_regime_index=param[5],
       v_leap_seconds=param[7],
       v_default_local_time_type=param[6],
       arg=caml_call2(sexp_of_t$25,sexp_of_t$75,v_leap_seconds),
       bnds=[0,[1,[0,_YC_,[0,arg,0]]],0],
       arg$0=sexp_of_t$74(v_default_local_time_type),
       bnds$0=[0,[1,[0,_YD_,[0,arg$0,0]]],bnds],
       arg$1=caml_call1(sexp_of_t$73,v_last_regime_index),
       bnds$1=[0,[1,[0,_YE_,[0,arg$1,0]]],bnds$0],
       arg$2=caml_call2(_iJ_,sexp_of_t$76,v_transitions),
       bnds$2=[0,[1,[0,_YF_,[0,arg$2,0]]],bnds$1],
       arg$3=caml_call2(sexp_of_t$39,_X9_[3],v_digest),
       bnds$3=[0,[1,[0,_YG_,[0,arg$3,0]]],bnds$2],
       arg$4=caml_call2(sexp_of_t$39,sexp_of_t$58,v_original_filename),
       bnds$4=[0,[1,[0,_YH_,[0,arg$4,0]]],bnds$3],
       arg$5=caml_call1(sexp_of_t$58,v_name),
       bnds$5=[0,[1,[0,_YI_,[0,arg$5,0]]],bnds$4];
      return [1,bnds$5]}
    function compare$59(t1,t2){return caml_call2(compare$47,t1[1],t2[1])}
    function original_filename(zone){return zone[2]}
    function digest(zone){return zone[3]}
    function bool_of_int(i)
     {return caml_call2(Replace_polymorphic_compare[6],i,0)}
    var long$0=caml_call1(create$13,4);
    function int32_of_char(chr){return caml_call1(_K7_,chr)}
    function input_long_as_int32(ic)
     {caml_call4(Stdio_In_channel[8],ic,long$0,0,4);
      var
       sb1=caml_call2(_JZ_,int32_of_char(caml_call2(get$2,long$0,0)),24),
       sb2=caml_call2(_JZ_,int32_of_char(caml_call2(get$2,long$0,1)),16),
       sb3=caml_call2(_JZ_,int32_of_char(caml_call2(get$2,long$0,2)),8),
       sb4=int32_of_char(caml_call2(get$2,long$0,3)),
       _bEx_=caml_call2(_J3_,sb3,sb4);
      return caml_call2(_J3_,caml_call2(_J3_,sb1,sb2),_bEx_)}
    function input_long_as_int(ic)
     {return caml_call1(_K6_,input_long_as_int32(ic))}
    function input_long_as_int63(ic)
     {return caml_call1(of_int32$1,input_long_as_int32(ic))}
    function input_long_long_as_int63(ic)
     {function int63_of_char(chr){return caml_call1(_Aw_,chr)}
      function shift(c,bits){return caml_call2(_zI_,int63_of_char(c),bits)}
      var long_long=caml_call1(create$13,8);
      caml_call4(Stdio_In_channel[8],ic,long_long,0,8);
      var
       result=shift(caml_call2(get$2,long_long,0),56),
       result$0=
        caml_call2(_zM_,result,shift(caml_call2(get$2,long_long,1),48)),
       result$1=
        caml_call2(_zM_,result$0,shift(caml_call2(get$2,long_long,2),40)),
       result$2=
        caml_call2(_zM_,result$1,shift(caml_call2(get$2,long_long,3),32)),
       result$3=
        caml_call2(_zM_,result$2,shift(caml_call2(get$2,long_long,4),24)),
       result$4=
        caml_call2(_zM_,result$3,shift(caml_call2(get$2,long_long,5),16)),
       result$5=
        caml_call2(_zM_,result$4,shift(caml_call2(get$2,long_long,6),8)),
       result$6=
        caml_call2(_zM_,result$5,int63_of_char(caml_call2(get$2,long_long,7)));
      return result$6}
    function input_list(ic,c,f)
     {var c$0=c,lst=0;
      for(;;)
       {if(caml_call2(Replace_polymorphic_compare[4],c$0,0))
         {var
           lst$0=[0,caml_call1(f,ic),lst],
           c$1=c$0 - 1 | 0,
           c$0=c$1,
           lst=lst$0;
          continue}
        return caml_call1(rev,lst)}}
    function input_array(ic,len,f)
     {return caml_call1(of_list$1,input_list(ic,len,f))}
    function input_regime(ic)
     {var
       utc_offset_in_seconds=input_long_as_int63(ic),
       is_dst=
        bool_of_int
         (caml_call4(value_exn,0,0,0,caml_call1(Stdio_In_channel[10],ic))),
       abbrv_index=
        caml_call4(value_exn,0,0,0,caml_call1(Stdio_In_channel[10],ic));
      function lt(abbrv){return [0,utc_offset_in_seconds,is_dst,abbrv]}
      return [0,lt,abbrv_index]}
    function input_tz_file_gen(input_transition,input_leap_second,ic)
     {var
       utc_local_count=input_long_as_int(ic),
       std_wall_count=input_long_as_int(ic),
       leap_count=input_long_as_int(ic),
       transition_count=input_long_as_int(ic),
       type_count=input_long_as_int(ic),
       len=input_long_as_int(ic),
       transition_times=input_list(ic,transition_count,input_transition),
       transition_indices=
        input_list
         (ic,
          transition_count,
          function(ic)
           {return caml_call4
                    (value_exn,0,0,0,caml_call1(Stdio_In_channel[10],ic))}),
       regimes=input_list(ic,type_count,input_regime),
       raw_abbrvs=
        input_list
         (ic,
          len,
          function(ic)
           {return caml_call4
                    (value_exn,0,0,0,caml_call1(Stdio_In_channel[9],ic))}),
       buf=caml_call1(Stdlib_buffer[1],len);
      function _bEv_(param,c)
       {var abbrvs=param[2],index=param[1];
        if(0 === c)
         {var
           data=caml_call1(Stdlib_buffer[2],buf),
           next_index=(index + caml_ml_string_length(data) | 0) + 1 | 0,
           abbrvs$0=caml_call3(set$2,abbrvs,index,data);
          caml_call1(Stdlib_buffer[8],buf);
          return [0,next_index,abbrvs$0]}
        caml_call2(Stdlib_buffer[10],buf,c);
        return [0,index,abbrvs]}
      var
       match=caml_call3(fold$2,raw_abbrvs,[0,0,_r__[13]],_bEv_),
       indexed_abbrvs=match[2],
       _bEw_=caml_call1(Stdlib_buffer[7],buf);
      if(caml_call2(Replace_polymorphic_compare[6],_bEw_,0))
       throw [0,
              Invalid_file_format,
              cst_missing_terminating_character_in_input_abbreviations];
      var leap_seconds=input_list(ic,leap_count,input_leap_second);
      input_array
       (ic,
        std_wall_count,
        function(ic)
         {return bool_of_int
                  (caml_call4
                    (value_exn,0,0,0,caml_call1(Stdio_In_channel[10],ic)))});
      input_array
       (ic,
        utc_local_count,
        function(ic)
         {return bool_of_int
                  (caml_call4
                    (value_exn,0,0,0,caml_call1(Stdio_In_channel[10],ic)))});
      var
       regimes$0=
        caml_call1
         (of_list$1,
          caml_call2
           (map$11,
            regimes,
            function(param)
             {var
               abbrv_index=param[2],
               lt=param[1],
               abbrv=caml_call2(find_exn$5,indexed_abbrvs,abbrv_index);
              return caml_call1(lt,abbrv)})),
       l=
        caml_call3
         (map2_exn$0,
          transition_times,
          transition_indices,
          function(time,index)
           {var regime=caml_check_bound(regimes$0,index)[index + 1];
            return [0,time,regime]}),
       acc=0,
       l$0=l;
      for(;;)
       {if(l$0)
         {var
           l$1=l$0[2],
           match$0=l$0[1],
           new_regime=match$0[2],
           start_time_in_seconds_since_epoch=match$0[1],
           acc$0=[0,[0,start_time_in_seconds_since_epoch,new_regime],acc],
           acc=acc$0,
           l$0=l$1;
          continue}
        var
         transitions=caml_call1(of_list$1,caml_call1(rev,acc)),
         match$1=caml_call2(find$0,regimes$0,function(r){return 1 - r[2]});
        if(match$1)
         var ltt=match$1[1],default_local_time_type=ltt;
        else
         var default_local_time_type=caml_check_bound(regimes$0,0)[1];
        return function(name,original_filename,digest)
         {return [0,
                  name,
                  [0,original_filename],
                  [0,digest],
                  transitions,
                  before_first_transition,
                  default_local_time_type,
                  leap_seconds]}}}
    function input_leap_second_gen(input_leap_second,ic)
     {var
       time_in_seconds_since_epoch=caml_call1(input_leap_second,ic),
       seconds=input_long_as_int(ic);
      return [0,time_in_seconds_since_epoch,seconds]}
    function read_header(ic)
     {var buf=caml_call1(create$13,4);
      caml_call4(Stdio_In_channel[8],ic,buf,0,4);
      var magic=caml_call1(unsafe_to_string,buf);
      if(1 - caml_call2(equal$27,magic,cst_TZif))
       throw [0,Invalid_file_format,cst_magic_characters_TZif_not_present];
      var match=caml_call1(Stdio_In_channel[9],ic);
      if(match)
       {var _bEs_=match[1],switcher=_bEs_ - 50 | 0;
        if(1 < switcher >>> 0)
         {if(-49 <= switcher)
           throw [0,Invalid_file_format,caml_call2(_eJ_,_YJ_,_bEs_)];
          var _bEt_=19227}
        else
         var _bEt_=0 === switcher?19228:19229;
        var _bEu_=caml_call1(create$13,15);
        caml_call4(Stdio_In_channel[8],ic,_bEu_,0,15);
        return _bEt_}
      throw [0,Invalid_file_format,cst_expected_version_found_nothing]}
    function input_tz_file_v1(ic)
     {function input_leap_second(_bEr_)
       {return input_leap_second_gen(input_long_as_int63,_bEr_)}
      return input_tz_file_gen(input_long_as_int63,input_leap_second,ic)}
    function input_tz_file(zonename,filename)
     {try
       {var
         _bEm_=Stdio_In_channel[5],
         _bEn_=caml_call2(Stdio_In_channel[3],0,filename),
         _bEo_=
          caml_call3
           (_R9_,
            function(ic)
             {var version=read_header(ic);
              if(19228 <= version)
               {input_tz_file_v1(ic);
                var x_001=read_header(ic);
                if(caml_call2(Ppx_compare_lib[1],x_001,version))
                 var match=0;
                else
                 {if(19228 === x_001)
                   if(19228 === version)
                    var match=0,switch$0=1;
                   else
                    var switch$0=0;
                  else
                   if(19229 <= x_001)
                    if(19229 === version)
                     var match=0,switch$0=1;
                    else
                     var switch$0=0;
                   else
                    if(19227 === version)
                     var match=0,switch$0=1;
                    else
                     var switch$0=0;
                  if(! switch$0)var match=caml_int_compare(x_001,version)}
                var _bEp_=0 === match?1:0;
                if(! _bEp_)throw [0,Assert_failure,_YK_];
                var
                 input_leap_second=
                  function(_bEq_)
                   {return input_leap_second_gen
                            (input_long_long_as_int63,_bEq_)},
                 make_zone=
                  input_tz_file_gen
                   (input_long_long_as_int63,input_leap_second,ic)}
              else
               var make_zone=input_tz_file_v1(ic);
              var
               digest=file(filename),
               r=caml_call3(make_zone,zonename,filename,digest);
              return r},
            _bEn_,
            _bEm_);
        return _bEo_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] === Invalid_file_format)
         {var reason=exn[2];
          throw [0,Invalid_file_format,caml_call3(_eJ_,_YL_,filename,reason)]}
        throw exn}}
    function of_utc_offset(offset)
     {if(caml_call2(Replace_polymorphic_compare[1],offset,-24))
       if(caml_call2(Replace_polymorphic_compare[2],offset,24))
        {if(caml_call2(Replace_polymorphic_compare[3],offset,0))
          var name=cst_UTC;
         else
          var
           _bEk_=caml_call1(abs$3,offset),
           _bEl_=
            caml_call2(Replace_polymorphic_compare[5],offset,0)
             ?cst$100
             :cst$101,
           name=caml_call3(_eJ_,_YM_,_bEl_,_bEk_);
         var
          utc_offset_in_seconds=
           caml_call1(of_int$1,(offset * 60 | 0) * 60 | 0);
         return [0,
                 name,
                 0,
                 0,
                 [0],
                 before_first_transition,
                 [0,utc_offset_in_seconds,0,name],
                 0]}
      throw [0,Assert_failure,_YN_]}
    function sexp_of_t$78(t){return [0,t[1]]}
    var likely_machine_zones=[0,_YO_],utc=of_utc_offset(0);
    function name$51(zone){return zone[1]}
    function reset_transition_cache(t)
     {t[5] = before_first_transition;return 0}
    function get_regime_exn(t,index)
     {return caml_call2(Replace_polymorphic_compare[5],index,0)
              ?t[6]
              :caml_check_bound(t[4],index)[index + 1][2]}
    function effective_start_time(mode,x)
     {return 0 === mode?x[1]:caml_call2(Base_Int63[92][1],x[1],x[2][1])}
    function index_lower_bound_contains_seconds_since_epoch
     (t,index,mode,seconds)
     {var _bEj_=caml_call2(Replace_polymorphic_compare[5],index,0);
      return _bEj_
              ?_bEj_
              :caml_call2
                (_Ar_,
                 seconds,
                 effective_start_time
                  (mode,caml_check_bound(t[4],index)[index + 1]))}
    function index_upper_bound_contains_seconds_since_epoch
     (t,index,mode,seconds)
     {var
       _bEg_=caml_call1(length$1,t[4]),
       _bEh_=caml_call2(Replace_polymorphic_compare[1],index + 1 | 0,_bEg_);
      if(_bEh_)return _bEh_;
      var _bEi_=index + 1 | 0;
      return caml_call2
              (_An_,
               seconds,
               effective_start_time
                (mode,caml_check_bound(t[4],_bEi_)[_bEi_ + 1]))}
    function binary_search_index_of_seconds_since_epoch(t,mode,seconds)
     {var _bEe_=125585502;
      function _bEf_(transition)
       {return caml_call2(_Aq_,effective_start_time(mode,transition),seconds)
                ?847852583
                :-57574468}
      return caml_call2
              (value$0,
               caml_call5(binary_search_segmented,0,0,t[4],_bEf_,_bEe_),
               before_first_transition)}
    function index_of_seconds_since_epoch(t,mode,seconds)
     {var index=t[5];
      if(index_lower_bound_contains_seconds_since_epoch(t,index,mode,seconds))
       if
        (index_upper_bound_contains_seconds_since_epoch(t,index,mode,seconds))
        var index$0=index;
       else
        var
         index$1=index + 1 | 0,
         index$2=
          index_upper_bound_contains_seconds_since_epoch
            (t,index$1,mode,seconds)
           ?index$1
           :binary_search_index_of_seconds_since_epoch(t,mode,seconds),
         index$0=index$2;
      else
       var
        index$3=index - 1 | 0,
        index$4=
         index_lower_bound_contains_seconds_since_epoch
           (t,index$3,mode,seconds)
          ?index$3
          :binary_search_index_of_seconds_since_epoch(t,mode,seconds),
        index$0=index$4;
      t[5] = index$0;
      return index$0}
    var
     Span=[0,ident,ident],
     Relative_to_unspecified_zone=[0,ident,ident],
     Time_in_seconds=[0,Span,Relative_to_unspecified_zone,ident,ident];
    function index(t,time)
     {var _bEd_=caml_call1(Time_in_seconds[4],time);
      return index_of_seconds_since_epoch
              (t,0,caml_call1(Time_in_seconds[1][2],_bEd_))}
    function index_of_relative(t,time)
     {var _bEc_=caml_call1(Time_in_seconds[2][2],time);
      return index_of_seconds_since_epoch
              (t,1,caml_call1(Time_in_seconds[1][2],_bEc_))}
    function index_has_prev_clock_shift(t,index)
     {var _bEa_=caml_call2(Replace_polymorphic_compare[1],index,0);
      if(_bEa_)
       {var _bEb_=caml_call1(length$1,t[4]);
        return caml_call2(Replace_polymorphic_compare[5],index,_bEb_)}
      return _bEa_}
    function index_has_next_clock_shift(t,index)
     {return index_has_prev_clock_shift(t,index + 1 | 0)}
    function index_prev_clock_shift_time_exn(t,index)
     {var
       transition=caml_check_bound(t[4],index)[index + 1],
       _bD$_=caml_call1(Time_in_seconds[1][1],transition[1]);
      return caml_call1(Time_in_seconds[3],_bD$_)}
    function index_next_clock_shift_time_exn(t,index)
     {return index_prev_clock_shift_time_exn(t,index + 1 | 0)}
    function index_prev_clock_shift_amount_exn(t,index)
     {var
       transition=caml_check_bound(t[4],index)[index + 1],
       after=transition[2];
      if(caml_call2(Replace_polymorphic_compare[3],index,0))
       var before=t[6];
      else
       var
        _bD__=index - 1 | 0,
        before=caml_check_bound(t[4],_bD__)[_bD__ + 1][2];
      var _bD9_=caml_call2(_z__,after[1],before[1]);
      return caml_call1(Time_in_seconds[1][1],_bD9_)}
    function index_next_clock_shift_amount_exn(t,index)
     {return index_prev_clock_shift_amount_exn(t,index + 1 | 0)}
    function index_abbreviation_exn(t,index)
     {var regime=get_regime_exn(t,index);return regime[3]}
    function index_offset_from_utc_exn(t,index)
     {var regime=get_regime_exn(t,index);
      return caml_call1(Time_in_seconds[1][1],regime[1])}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$259);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     _YP_=
      [0,
       [0,
        [0,
         bin_t$71,
         bin_read_t$122,
         bin_read_t$121,
         bin_reader_t$71,
         bin_size_t$61,
         bin_write_t$62,
         bin_writer_t$71,
         bin_shape_t$80,
         compare$59,
         t_of_sexp$69,
         sexp_of_t$77]]],
     Index=[0,next$1,prev$1],
     include$94=
      [0,
       sexp_of_t$78,
       compare$59,
       input_tz_file,
       likely_machine_zones,
       of_utc_offset,
       utc,
       name$51,
       original_filename,
       digest,
       Time_in_seconds,
       reset_transition_cache,
       Index,
       index,
       index_of_relative,
       index_offset_from_utc_exn,
       index_abbreviation_exn,
       index_has_prev_clock_shift,
       index_prev_clock_shift_time_exn,
       index_prev_clock_shift_amount_exn,
       index_has_next_clock_shift,
       index_next_clock_shift_time_exn,
       index_next_clock_shift_amount_exn,
       _YP_];
    caml_register_global(7477,include$94,"Core_kernel__Zone");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$260);
    caml_call1(Expect_test_collector[4][1],cst_src_weak_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$261,cst$102);
    function create$21(len){return caml_call1(Stdlib_weak[1],len)}
    function length$22(t){return caml_call1(Stdlib_weak[2],t)}
    var _YQ_=Stdlib_weak[3],_YR_=Stdlib_weak[4];
    function is_some$0(t,i){return caml_call2(Stdlib_weak[6],t,i)}
    function is_none$0(t,i){return 1 - is_some$0(t,i)}
    function sexp_of_t$79(sexp_of_a,t)
     {function _bD7_(i){return caml_call2(_YR_,t,i)}
      var _bD8_=caml_call2(init$0,length$22(t),_bD7_);
      return caml_call1
              (caml_call1
                (_iJ_,
                 caml_call1
                  (sexp_of_t$39,caml_call1(Base_Heap_block[1],sexp_of_a))),
               _bD8_)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$262);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Weak=
      [0,sexp_of_t$79,create$21,length$22,_YQ_,_YR_,is_some$0,is_none$0];
    caml_register_global(7478,Core_kernel_Weak,"Core_kernel__Weak");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$263);
    caml_call1(Expect_test_collector[4][1],cst_src_weak_pointer_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$264,cst$103);
    function create$22(param){return create$21(1)}
    var index$0=0;
    function get$7(t){return caml_call2(_YR_,t,index$0)}
    function sexp_of_t$80(sexp_of_a,t)
     {var _bD6_=get$7(t);
      return caml_call2
              (sexp_of_t$39,caml_call1(Base_Heap_block[1],sexp_of_a),_bD6_)}
    function is_none$1(t){return is_none$0(t,index$0)}
    function is_some$1(t){return is_some$0(t,index$0)}
    function set$9(t,block){return caml_call3(_YQ_,t,index$0,[0,block])}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$265);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Weak_pointer=
      [0,sexp_of_t$80,create$22,get$7,is_some$1,is_none$1,set$9];
    caml_register_global
     (7479,Core_kernel_Weak_pointer,"Core_kernel__Weak_pointer");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$266);
    caml_call1(Expect_test_collector[4][1],cst_src_arg_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$267,cst$104);
    var
     _Y2_=include$95[11],
     _YS_=include$95[1],
     _YT_=include$95[2],
     _YU_=include$95[3],
     _YV_=include$95[4],
     _YW_=include$95[5],
     _YX_=include$95[6],
     _YY_=include$95[7],
     _YZ_=include$95[8],
     _Y0_=include$95[9],
     _Y1_=include$95[10],
     _Y3_=include$95[12],
     _Y4_=include$95[13],
     _Y5_=include$95[14],
     _Y6_=include$95[15],
     _Y7_=include$95[16];
    function sort_and_align(lst)
     {function _bD4_(param,_bD5_)
       {var b=_bD5_[1],a=param[1];return caml_call2(compare$47,a,b)}
      return caml_call2(_Y2_,0,caml_call2(Base_List[60],_bD4_,lst))}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$268);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Arg=
      [0,
       _YS_,
       _YT_,
       _YU_,
       _YV_,
       _YW_,
       _YX_,
       _YY_,
       _YZ_,
       _Y0_,
       _Y1_,
       _Y2_,
       _Y3_,
       _Y4_,
       _Y5_,
       _Y6_,
       _Y7_,
       sort_and_align];
    caml_register_global(7481,Core_kernel_Arg,"Core_kernel__Arg");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$269);
    caml_call1(Expect_test_collector[4][1],cst_src_stable_internal_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$270,cst$105);
    var
     _Y8_=Bin_prot_Std[1],
     _Y9_=Bin_prot_Std[2],
     _Y__=Bin_prot_Std[3],
     _Y$_=Bin_prot_Std[4],
     _Za_=Bin_prot_Std[5],
     _Zb_=Bin_prot_Std[6],
     _Zc_=Bin_prot_Std[7],
     _Zd_=Bin_prot_Std[8],
     _Ze_=Bin_prot_Std[9],
     _Zf_=Bin_prot_Std[10],
     _Zg_=Bin_prot_Std[11],
     _Zh_=Bin_prot_Std[12],
     _Zi_=Bin_prot_Std[13],
     _Zj_=Bin_prot_Std[14],
     _Zk_=Bin_prot_Std[15],
     _Zl_=Bin_prot_Std[16],
     _Zm_=Bin_prot_Std[17],
     _Zn_=Bin_prot_Std[18],
     _Zo_=Bin_prot_Std[19],
     _Zp_=Bin_prot_Std[20],
     _Zq_=Bin_prot_Std[21],
     _Zr_=Bin_prot_Std[22],
     _Zs_=Bin_prot_Std[23],
     _Zt_=Bin_prot_Std[24],
     _Zu_=Bin_prot_Std[25],
     _Zv_=Bin_prot_Std[26],
     _Zw_=Bin_prot_Std[27],
     _Zx_=Bin_prot_Std[28],
     _Zy_=Bin_prot_Std[29],
     _Zz_=Bin_prot_Std[30],
     _ZA_=Bin_prot_Std[31],
     _ZB_=Bin_prot_Std[32],
     _ZC_=Bin_prot_Std[33],
     _ZD_=Bin_prot_Std[34],
     _ZE_=Bin_prot_Std[35],
     _ZF_=Bin_prot_Std[36],
     _ZG_=Bin_prot_Std[37],
     _ZH_=Bin_prot_Std[38],
     _ZI_=Bin_prot_Std[39],
     _ZJ_=Bin_prot_Std[40],
     _ZK_=Bin_prot_Std[41],
     _ZL_=Bin_prot_Std[42],
     _ZM_=Bin_prot_Std[43],
     _ZN_=Bin_prot_Std[44],
     _ZO_=Bin_prot_Std[45],
     _ZP_=Bin_prot_Std[46],
     _ZQ_=Bin_prot_Std[47],
     _ZR_=Bin_prot_Std[48],
     _ZS_=Bin_prot_Std[49],
     _ZT_=Bin_prot_Std[50],
     _ZU_=Bin_prot_Std[51],
     _ZV_=Bin_prot_Std[52],
     _ZW_=Bin_prot_Std[53],
     _ZX_=Bin_prot_Std[54],
     _ZY_=Bin_prot_Std[55],
     _ZZ_=Bin_prot_Std[56],
     _Z0_=Bin_prot_Std[57],
     _Z1_=Bin_prot_Std[58],
     _Z2_=Bin_prot_Std[59],
     _Z3_=Bin_prot_Std[60],
     _Z4_=Bin_prot_Std[61],
     _Z5_=Bin_prot_Std[62],
     _Z6_=Bin_prot_Std[63],
     _Z7_=Bin_prot_Std[64],
     _Z8_=Bin_prot_Std[65],
     _Z9_=Bin_prot_Std[66],
     _Z__=Bin_prot_Std[67],
     _Z$_=Bin_prot_Std[68],
     __a_=Bin_prot_Std[69],
     __b_=Bin_prot_Std[70],
     __c_=Bin_prot_Std[71],
     __d_=Bin_prot_Std[72],
     __e_=Bin_prot_Std[73],
     __f_=Bin_prot_Std[74],
     __g_=Bin_prot_Std[75],
     __h_=Bin_prot_Std[76],
     __i_=Bin_prot_Std[77],
     __j_=Bin_prot_Std[78],
     __k_=Bin_prot_Std[79],
     __l_=Bin_prot_Std[80],
     __m_=Bin_prot_Std[81],
     __n_=Bin_prot_Std[82],
     __o_=Bin_prot_Std[83],
     __p_=Bin_prot_Std[84],
     __q_=Bin_prot_Std[85],
     __r_=Bin_prot_Std[86],
     __s_=Bin_prot_Std[87],
     __t_=Bin_prot_Std[88],
     __u_=Bin_prot_Std[89],
     __v_=Bin_prot_Std[90],
     __w_=Bin_prot_Std[91],
     __x_=Bin_prot_Std[92],
     __y_=Bin_prot_Std[93],
     __z_=Bin_prot_Std[94],
     __A_=Bin_prot_Std[95],
     __B_=Bin_prot_Std[96],
     __C_=Bin_prot_Std[97],
     __D_=Bin_prot_Std[98],
     __E_=Bin_prot_Std[99],
     __F_=Bin_prot_Std[100],
     __G_=Bin_prot_Std[101],
     __H_=Bin_prot_Std[102],
     __I_=Bin_prot_Std[103],
     __J_=Bin_prot_Std[104],
     __K_=Bin_prot_Std[105],
     __L_=Bin_prot_Std[106],
     __M_=Bin_prot_Std[107],
     __N_=Bin_prot_Std[108],
     __O_=Bin_prot_Std[109],
     __P_=Bin_prot_Std[110],
     __Q_=Bin_prot_Std[111],
     __R_=Bin_prot_Std[112],
     __S_=Bin_prot_Std[113],
     __T_=Bin_prot_Std[114],
     __U_=Bin_prot_Std[115],
     __V_=Bin_prot_Std[116],
     __W_=Bin_prot_Std[117],
     __X_=Bin_prot_Std[118],
     __Y_=Bin_prot_Std[119],
     __Z_=Bin_prot_Std[120],
     __0_=Bin_prot_Std[121],
     __1_=Bin_prot_Std[122],
     __2_=Bin_prot_Std[123],
     __3_=Bin_prot_Std[124],
     __4_=Bin_prot_Std[125],
     __5_=Bin_prot_Std[126],
     __6_=Bin_prot_Std[127],
     __7_=Bin_prot_Std[128],
     __8_=Bin_prot_Std[129],
     __9_=Bin_prot_Std[130],
     ____=Bin_prot_Std[131],
     __$_=Bin_prot_Std[132],
     _$a_=Bin_prot_Std[133],
     _$b_=Bin_prot_Std[134],
     _$c_=Bin_prot_Std[135],
     _$d_=Bin_prot_Std[136],
     _$e_=Bin_prot_Std[137],
     _$f_=Bin_prot_Std[138],
     _$g_=Bin_prot_Std[139],
     _$h_=Bin_prot_Std[140],
     _$i_=Bin_prot_Std[141],
     _$j_=Bin_prot_Std[142],
     _$k_=Bin_prot_Std[143],
     _$l_=Bin_prot_Std[144],
     _$m_=Bin_prot_Std[145],
     _$n_=Bin_prot_Std[146],
     _$o_=Bin_prot_Std[147],
     _$p_=Bin_prot_Std[148],
     _$q_=Bin_prot_Std[149],
     _$r_=Bin_prot_Std[150],
     _$s_=Bin_prot_Std[151],
     _$t_=Bin_prot_Std[152],
     _$u_=Bin_prot_Std[153],
     _$v_=Bin_prot_Std[154],
     _$w_=Bin_prot_Std[155],
     _$x_=Bin_prot_Std[156],
     _$y_=Bin_prot_Std[157],
     _$z_=Bin_prot_Std[158],
     _$A_=Bin_prot_Std[159],
     _$B_=Bin_prot_Std[160],
     _$C_=Bin_prot_Std[161],
     _$D_=Bin_prot_Std[162],
     _$E_=Bin_prot_Std[163],
     _$F_=Bin_prot_Std[164],
     _$G_=Bin_prot_Std[165],
     _$H_=Bin_prot_Std[166],
     _$I_=Bin_prot_Std[167],
     _$J_=Bin_prot_Std[168],
     _$K_=Bin_prot_Std[169],
     _$L_=Bin_prot_Std[170],
     _$M_=Bin_prot_Std[171],
     _$N_=Bin_prot_Std[172],
     _$O_=Bin_prot_Std[173],
     _$P_=Bin_prot_Std[174],
     _$Q_=Bin_prot_Std[175],
     _$R_=Bin_prot_Std[176],
     _$S_=Bin_prot_Std[177],
     _$T_=Bin_prot_Std[178],
     _$U_=Bin_prot_Std[179],
     _$V_=Bin_prot_Std[180],
     _$W_=Bin_prot_Std[181],
     _$X_=Bin_prot_Std[182],
     _$Y_=Bin_prot_Std[183],
     _$Z_=Bin_prot_Std[184],
     _$0_=Bin_prot_Std[185],
     _$1_=Bin_prot_Std[186],
     _$2_=Bin_prot_Std[187],
     _$3_=Bin_prot_Std[188],
     _$4_=Bin_prot_Std[189],
     _$5_=Bin_prot_Std[190],
     _$6_=Bin_prot_Std[191],
     _$7_=Bin_prot_Std[192],
     _$8_=Bin_prot_Std[193],
     _$9_=Bin_prot_Std[194],
     _$__=Bin_prot_Std[195],
     _$$_=Bin_prot_Std[196],
     _aaa_=Bin_prot_Std[197],
     _aab_=Bin_prot_Std[198],
     _aac_=Bin_prot_Std[199],
     _aad_=Bin_prot_Std[200],
     _aae_=Bin_prot_Std[201],
     _aaf_=Bin_prot_Std[202],
     _aag_=Bin_prot_Std[203],
     _aah_=Bin_prot_Std[204],
     _aai_=Bin_prot_Std[205],
     _aaj_=Bin_prot_Std[206],
     _aak_=Bin_prot_Std[207],
     _aal_=Bin_prot_Std[208],
     _aam_=Bin_prot_Std[209],
     _aan_=Bin_prot_Std[210],
     _aao_=Bin_prot_Std[211],
     _aap_=Bin_prot_Std[212],
     _aaq_=Bin_prot_Std[213],
     _aar_=Bin_prot_Std[214],
     _aas_=Bin_prot_Std[215],
     _aat_=Bin_prot_Std[216],
     _aau_=Bin_prot_Std[217],
     _aav_=Bin_prot_Std[218],
     _aaw_=Base_Hash[13],
     _aax_=_aaw_[1],
     _aay_=_aaw_[2],
     _aaz_=_aaw_[3],
     _aaA_=_aaw_[4],
     _aaB_=_aaw_[5],
     _aaC_=_aaw_[6],
     _aaD_=_aaw_[7],
     hash_fold_t$36=_aaw_[8],
     _aaE_=_aaw_[9],
     _aaF_=_aaw_[10],
     _aaG_=_aaw_[11],
     _aaH_=_aaw_[12],
     _aaI_=_aaw_[13],
     _aaJ_=_aaw_[14],
     _aaK_=_aaw_[15],
     _aaL_=_aaw_[16],
     _aaM_=_aaw_[17],
     _aaN_=_aaw_[18],
     _aaO_=_aaw_[19],
     _aaP_=_aaw_[20],
     _aaQ_=_aaw_[21],
     _aaR_=_aaw_[22],
     _aaS_=_aaw_[23],
     _aaT_=Base[257],
     _aaU_=Base[256],
     _aaV_=Base[252],
     _aaW_=Base[251],
     _aaX_=Base[249],
     _aaY_=Base[248],
     _aaZ_=Base[244],
     _aa0_=Base[243],
     _aa1_=Base[241],
     _aa2_=Base[240],
     _aa3_=Base[237],
     _aa4_=Base[236],
     _aa5_=Base[232],
     _aa6_=Base[231],
     _aa7_=Base[228],
     _aa8_=Base[227],
     _aa9_=Base[223],
     _aa__=Base[222],
     _aa$_=Base[218],
     _aba_=Base[217],
     _abb_=Base[213],
     _abc_=Base[212],
     _abd_=Base[208],
     _abe_=Base[207],
     _abf_=Base[206],
     _abg_=Base[202],
     _abh_=Base[201],
     _abi_=Base[197],
     _abj_=Base[196],
     _abk_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$73),
     _abl_=
      caml_call1
       (Bin_shape_lib_Bin_shape[4][1],cst_src_stable_internal_ml_39_22),
     _abm_=bin_shape_sexp_option(caml_call2(Bin_prot_Shape[15],_abl_,_abk_)),
     _abn_=[0,caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$74),0],
     _abo_=
      [0,
       [0,
        caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_sexp_option$1),
        _abn_,
        _abm_],
       0],
     _abp_=
      caml_call1
       (Bin_shape_lib_Bin_shape[4][1],cst_src_stable_internal_ml_39_0),
     group$103=caml_call2(Bin_prot_Shape[6],_abp_,_abo_);
    function bin_shape_sexp_option$0(a)
     {var _bD3_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_sexp_option$2);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$103,_bD3_),[0,a,0])}
    function bin_size_sexp_option$0(size_of_a,v)
     {return bin_size_sexp_option(size_of_a,v)}
    function bin_write_sexp_option$0(write_a,buf,pos,v)
     {return bin_write_sexp_option(write_a,buf,pos,v)}
    function bin_writer_sexp_option$0(bin_writer_a)
     {function _bDZ_(v)
       {var _bD0_=bin_writer_a[2];
        return function(_bD1_,_bD2_)
         {return bin_write_sexp_option$0(_bD0_,v,_bD1_,_bD2_)}}
      return [0,
              function(v){return bin_size_sexp_option$0(bin_writer_a[1],v)},
              _bDZ_]}
    function bin_read_sexp_option$1(of_a,buf,pos_ref,vint)
     {return bin_read_sexp_option(of_a,buf,pos_ref,vint)}
    function bin_read_sexp_option$2(of_a,buf,pos_ref)
     {return bin_read_sexp_option$0(of_a,buf,pos_ref)}
    function bin_reader_sexp_option$0(bin_reader_a)
     {function _bDY_(buf,pos_ref,vtag)
       {return bin_read_sexp_option$1(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_sexp_option$2(bin_reader_a[1],buf,pos_ref)},
              _bDY_]}
    function bin_sexp_option$0(bin_a)
     {var
       _bDW_=bin_reader_sexp_option$0(bin_a[3]),
       _bDX_=bin_writer_sexp_option$0(bin_a[2]);
      return [0,bin_shape_sexp_option$0(bin_a[1]),_bDX_,_bDW_]}
    var
     _abq_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$75),
     _abr_=
      caml_call1
       (Bin_shape_lib_Bin_shape[4][1],cst_src_stable_internal_ml_40_22),
     _abs_=bin_shape_sexp_list(caml_call2(Bin_prot_Shape[15],_abr_,_abq_)),
     _abt_=[0,caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$76),0],
     _abu_=
      [0,
       [0,
        caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_sexp_list$1),
        _abt_,
        _abs_],
       0],
     _abv_=
      caml_call1
       (Bin_shape_lib_Bin_shape[4][1],cst_src_stable_internal_ml_40_0),
     group$104=caml_call2(Bin_prot_Shape[6],_abv_,_abu_);
    function bin_shape_sexp_list$0(a)
     {var _bDV_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_sexp_list$2);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$104,_bDV_),[0,a,0])}
    function bin_size_sexp_list$0(size_of_a,v)
     {return bin_size_sexp_list(size_of_a,v)}
    function bin_write_sexp_list$0(write_a,buf,pos,v)
     {return bin_write_sexp_list(write_a,buf,pos,v)}
    function bin_writer_sexp_list$0(bin_writer_a)
     {function _bDR_(v)
       {var _bDS_=bin_writer_a[2];
        return function(_bDT_,_bDU_)
         {return bin_write_sexp_list$0(_bDS_,v,_bDT_,_bDU_)}}
      return [0,
              function(v){return bin_size_sexp_list$0(bin_writer_a[1],v)},
              _bDR_]}
    function bin_read_sexp_list$1(of_a,buf,pos_ref,vint)
     {return bin_read_sexp_list(of_a,buf,pos_ref,vint)}
    function bin_read_sexp_list$2(of_a,buf,pos_ref)
     {return bin_read_sexp_list$0(of_a,buf,pos_ref)}
    function bin_reader_sexp_list$0(bin_reader_a)
     {function _bDQ_(buf,pos_ref,vtag)
       {return bin_read_sexp_list$1(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_sexp_list$2(bin_reader_a[1],buf,pos_ref)},
              _bDQ_]}
    function bin_sexp_list$0(bin_a)
     {var
       _bDO_=bin_reader_sexp_list$0(bin_a[3]),
       _bDP_=bin_writer_sexp_list$0(bin_a[2]);
      return [0,bin_shape_sexp_list$0(bin_a[1]),_bDP_,_bDO_]}
    var
     _abw_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$164),
     _abx_=
      [0,
       [0,cst_Atom$2,[0,_Z2_,0]],
       [0,
        [0,
         cst_List$2,
         [0,
          caml_call1(_$r_,caml_call1(caml_call1(Bin_prot_Shape[13],_abw_),0)),
          0]],
        0]],
     _aby_=caml_call1(Bin_prot_Shape[9],_abx_),
     _abz_=
      [0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$165),0,_aby_],0],
     _abA_=
      caml_call1
       (Bin_shape_lib_Bin_shape[4][1],cst_src_stable_internal_ml_44_2),
     group$105=caml_call2(Bin_prot_Shape[6],_abA_,_abz_),
     _abB_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$166);
    caml_call1(caml_call2(Bin_prot_Shape[14],group$105,_abB_),0);
    var
     hash_fold_t$37=function _bDN_(_bDL_,_bDM_){return _bDN_.fun(_bDL_,_bDM_)},
     hash$28=function _bDK_(_bDJ_){return _bDK_.fun(_bDJ_)};
    caml_update_dummy
     (hash_fold_t$37,
      function(hsv,arg)
       {if(0 === arg[0])
         {var a0=arg[1],hsv$0=caml_call2(Base_Hash[3],hsv,0);
          return caml_call2(_aaD_,hsv$0,a0)}
        var a0$0=arg[1],hsv$1=caml_call2(Base_Hash[3],hsv,1);
        return caml_call3(_aaG_,hash_fold_t$37,hsv$1,a0$0)});
    caml_update_dummy
     (hash$28,
      function(x)
       {var
         hsv=caml_call2(Base_Hash[11],0,0),
         _bDI_=caml_call2(hash_fold_t$37,hsv,x);
        return caml_call1(Base_Hash[9],_bDI_)});
    var
     Sexp=
      [0,
       bin_t$63,
       bin_read_t$106,
       bin_read_t$105,
       bin_reader_t$63,
       bin_size_t$51,
       bin_write_t$52,
       bin_writer_t$63,
       bin_shape_t$68,
       _OW_,
       _OX_,
       O$6,
       _Qv_,
       _Qw_,
       _Qx_,
       _Qy_,
       _Qz_,
       _QA_,
       _QB_,
       _QD_,
       _QE_,
       _QF_,
       _QG_,
       _QH_,
       _QI_,
       _QJ_,
       _QK_,
       _QL_,
       _QM_,
       _QN_,
       _QO_,
       _QP_,
       _QQ_,
       gen$15,
       obs$13,
       shrinker$13,
       _QC_,
       _O2_,
       _O3_,
       _O4_,
       _O5_,
       _O6_,
       _O7_,
       _O8_,
       _O9_,
       _O__,
       _O$_,
       _Pa_,
       _Pb_,
       _Pc_,
       _Pd_,
       _Pe_,
       _Pf_,
       _Pg_,
       _Ph_,
       _Pi_,
       _Pj_,
       _Pk_,
       _Pl_,
       _Pm_,
       _Pn_,
       _Po_,
       _Pp_,
       _Pq_,
       _Pr_,
       _Ps_,
       _Pt_,
       _Pu_,
       _Pv_,
       _Pw_,
       _Px_,
       _Py_,
       _Pz_,
       _PA_,
       _PB_,
       _PC_,
       _PD_,
       _PE_,
       _PF_,
       _PG_,
       _PH_,
       _PI_,
       _PJ_,
       _PK_,
       _PL_,
       _PM_,
       _PN_,
       _PO_,
       _PP_,
       _PQ_,
       _PR_,
       _PS_,
       _PT_,
       _PU_,
       _PV_,
       _PW_,
       _PX_,
       _OY_,
       _OZ_,
       _O0_,
       bin_no_raise,
       bin_read_no_raise$0,
       bin_read_no_raise,
       bin_reader_no_raise,
       bin_size_no_raise,
       bin_write_no_raise,
       bin_writer_no_raise,
       bin_shape_no_raise,
       no_raise_of_sexp,
       sexp_of_no_raise,
       Sexp_maybe,
       With_text,
       of_sexp_allow_extra_fields];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$271);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Stable_internal=
      [0,
       _Y8_,
       _Y9_,
       _Y__,
       _Y$_,
       _Za_,
       _Zb_,
       _Zc_,
       _Zd_,
       _Ze_,
       _Zf_,
       _Zg_,
       _Zh_,
       _Zi_,
       _Zj_,
       _Zk_,
       _Zl_,
       _Zm_,
       _Zn_,
       _Zo_,
       _Zp_,
       _Zq_,
       _Zr_,
       _Zs_,
       _Zt_,
       _Zu_,
       _Zv_,
       _Zw_,
       _Zx_,
       _Zy_,
       _Zz_,
       _ZA_,
       _ZB_,
       _ZC_,
       _ZD_,
       _ZE_,
       _ZF_,
       _ZG_,
       _ZH_,
       _ZI_,
       _ZJ_,
       _ZK_,
       _ZL_,
       _ZM_,
       _ZN_,
       _ZO_,
       _ZP_,
       _ZQ_,
       _ZR_,
       _ZS_,
       _ZT_,
       _ZU_,
       _ZV_,
       _ZW_,
       _ZX_,
       _ZY_,
       _ZZ_,
       _Z0_,
       _Z1_,
       _Z2_,
       _Z3_,
       _Z4_,
       _Z5_,
       _Z6_,
       _Z7_,
       _Z8_,
       _Z9_,
       _Z__,
       _Z$_,
       __a_,
       __b_,
       __c_,
       __d_,
       __e_,
       __f_,
       __g_,
       __h_,
       __i_,
       __j_,
       __k_,
       __l_,
       __m_,
       __n_,
       __o_,
       __p_,
       __q_,
       __r_,
       __s_,
       __t_,
       __u_,
       __v_,
       __w_,
       __x_,
       __y_,
       __z_,
       __A_,
       __B_,
       __C_,
       __D_,
       __E_,
       __F_,
       __G_,
       __H_,
       __I_,
       __J_,
       __K_,
       __L_,
       __M_,
       __N_,
       __O_,
       __P_,
       __Q_,
       __R_,
       __S_,
       __T_,
       __U_,
       __V_,
       __W_,
       __X_,
       __Y_,
       __Z_,
       __0_,
       __1_,
       __2_,
       __3_,
       __4_,
       __5_,
       __6_,
       __7_,
       __8_,
       __9_,
       ____,
       __$_,
       _$a_,
       _$b_,
       _$c_,
       _$d_,
       _$e_,
       _$f_,
       _$g_,
       _$h_,
       _$i_,
       _$j_,
       _$k_,
       _$l_,
       _$m_,
       _$n_,
       _$o_,
       _$p_,
       _$q_,
       _$r_,
       _$s_,
       _$t_,
       _$u_,
       _$v_,
       _$w_,
       _$x_,
       _$y_,
       _$z_,
       _$A_,
       _$B_,
       _$C_,
       _$D_,
       _$E_,
       _$F_,
       _$G_,
       _$H_,
       _$I_,
       _$J_,
       _$K_,
       _$L_,
       _$M_,
       _$N_,
       _$O_,
       _$P_,
       _$Q_,
       _$R_,
       _$S_,
       _$T_,
       _$U_,
       _$V_,
       _$W_,
       _$X_,
       _$Y_,
       _$Z_,
       _$0_,
       _$1_,
       _$2_,
       _$3_,
       _$4_,
       _$5_,
       _$6_,
       _$7_,
       _$8_,
       _$9_,
       _$__,
       _$$_,
       _aaa_,
       _aab_,
       _aac_,
       _aad_,
       _aae_,
       _aaf_,
       _aag_,
       _aah_,
       _aai_,
       _aaj_,
       _aak_,
       _aal_,
       _aam_,
       _aan_,
       _aao_,
       _aap_,
       _aaq_,
       _aar_,
       _aas_,
       _aat_,
       _aau_,
       _aav_,
       _aax_,
       _aay_,
       _aaz_,
       _aaA_,
       _aaB_,
       _aaC_,
       _aaD_,
       hash_fold_t$36,
       _aaE_,
       _aaF_,
       _aaG_,
       _aaH_,
       _aaI_,
       _aaJ_,
       _aaK_,
       _aaL_,
       _aaM_,
       _aaN_,
       _aaO_,
       _aaP_,
       _aaQ_,
       _aaR_,
       _aaS_,
       _abj_,
       _abi_,
       _abh_,
       _abg_,
       _abf_,
       _abe_,
       _abd_,
       _abc_,
       _abb_,
       _aba_,
       _aa$_,
       _aa__,
       _aa9_,
       _aa8_,
       _aa7_,
       _aa6_,
       _aa5_,
       _aa4_,
       _aa3_,
       _aa2_,
       _aa1_,
       _aa0_,
       _aaZ_,
       _aaY_,
       _aaX_,
       _aaW_,
       _aaV_,
       _aaU_,
       _aaT_,
       bin_shape_sexp_option$0,
       bin_size_sexp_option$0,
       bin_write_sexp_option$0,
       bin_writer_sexp_option$0,
       bin_read_sexp_option$1,
       bin_read_sexp_option$2,
       bin_reader_sexp_option$0,
       bin_sexp_option$0,
       compare$27,
       hash_fold_t$13,
       bin_shape_sexp_list$0,
       bin_size_sexp_list$0,
       bin_write_sexp_list$0,
       bin_writer_sexp_list$0,
       bin_read_sexp_list$1,
       bin_read_sexp_list$2,
       bin_reader_sexp_list$0,
       bin_sexp_list$0,
       compare$19,
       hash_fold_t$12,
       Sexp];
    caml_register_global
     (7482,Core_kernel_Stable_internal,"Core_kernel__Stable_internal");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$272);
    caml_call1(Expect_test_collector[4][1],cst_src_stable_containers_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$273,cst$106);
    function V1$13(_bDG_)
     {var _bDH_=_qR_(_bDG_);
      return [0,
              _bDH_[77],
              _bDH_[1],
              _bDH_[85],
              _bDH_[81],
              _bDH_[82],
              _bDH_[84],
              _bDH_[79],
              _bDH_[80],
              _bDH_[83],
              _bDH_[78]]}
    function _abC_(param)
     {var
       Table$0=
        V1$13
         ([0,
           bin_t$30,
           bin_read_t$74,
           bin_read_t$73,
           bin_reader_t$30,
           bin_size_t$36,
           bin_write_t$36,
           bin_writer_t$30,
           bin_shape_t$35,
           t_of_sexp$32,
           compare$30,
           sexp_of_t$43,
           _xA_]);
      function t_of_sexp(t){return caml_call2(Table$0[1],_aaY_,t)}
      function sexp_of_t(v){return caml_call2(Table$0[2],_aaX_,v)}
      var
       _bDC_=caml_call1(Table$0[10],_Z2_),
       _bDD_=
        [0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$167),0,_bDC_],0],
       _bDE_=
        caml_call1
         (Bin_shape_lib_Bin_shape[4][1],cst_src_stable_containers_ml_17_6),
       group=caml_call2(Bin_prot_Shape[6],_bDE_,_bDD_),
       _bDF_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$168),
       bin_shape_t=caml_call1(caml_call2(Bin_prot_Shape[14],group,_bDF_),0);
      function bin_size_t(v){return caml_call2(Table$0[7],_Y__,v)}
      function bin_write_t(buf,pos,v)
       {return caml_call3(caml_call1(Table$0[8],_Z4_),buf,pos,v)}
      var bin_writer_t=[0,bin_size_t,bin_write_t];
      function bin_read_t(buf,pos_ref,vint)
       {return caml_call3(caml_call1(Table$0[5],_Z6_),buf,pos_ref,vint)}
      function bin_read_t$0(buf,pos_ref)
       {return caml_call2(caml_call1(Table$0[4],_Z6_),buf,pos_ref)}
      var
       bin_reader_t=[0,bin_read_t$0,bin_read_t],
       bin_t=[0,bin_shape_t,bin_writer_t,bin_reader_t];
      function equal(t1,t2){return caml_call3(Table[66],t1,t2,equal$27)}
      var
       triple_table=caml_call3(Table[8],0,_abE_,_abD_),
       single_table=caml_call3(Table[8],0,0,_abF_),
       tests=
        [0,
         [0,triple_table,_abI_],
         [0,[0,caml_call3(Table[4],0,0,0),_abH_],[0,[0,single_table,_abG_],0]]];
      _Xu_
       ([0,
         t_of_sexp,
         sexp_of_t,
         bin_t,
         bin_read_t$0,
         bin_read_t,
         bin_reader_t,
         bin_size_t,
         bin_write_t,
         bin_writer_t,
         bin_shape_t,
         equal,
         tests]);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst_Hashtbl_V1,
      0,
      cst_src_stable_containers_ml$0,
      15,
      2,
      1098,
      _abC_);
    function V1$14(_bDA_)
     {var _bDB_=_qX_(_bDA_);
      return [0,
              _bDB_[6],
              _bDB_[1],
              _bDB_[14],
              _bDB_[9],
              _bDB_[10],
              _bDB_[13],
              _bDB_[7],
              _bDB_[8],
              _bDB_[12],
              _bDB_[11]]}
    function _abJ_(param)
     {var
       include=
        V1$14
         ([0,
           bin_t$30,
           bin_read_t$74,
           bin_read_t$73,
           bin_reader_t$30,
           bin_size_t$36,
           bin_write_t$36,
           bin_writer_t$30,
           bin_shape_t$35,
           t_of_sexp$32,
           compare$30,
           sexp_of_t$43,
           _xA_]),
       _bDn_=include[1],
       _bDo_=include[2],
       _bDp_=include[3],
       _bDq_=include[4],
       _bDr_=include[5],
       _bDs_=include[6],
       _bDt_=include[7],
       _bDu_=include[8],
       _bDv_=include[9],
       _bDw_=include[10],
       int_list=caml_call2(init$1,10,function(_bDz_){return _bDz_}),
       ten_set=caml_call3(Hash_set[3],0,_abK_,int_list),
       single_set=caml_call3(Hash_set[3],0,0,_abL_),
       _bDx_=
        [0,[0,caml_call3(Hash_set[2],0,0,0),_abN_],[0,[0,single_set,_abM_],0]],
       _bDy_=
        caml_call2
         (init$1,10,function(n){return caml_call1(_Cq_,caml_call1(_CN_,n))}),
       tests=
        [0,[0,ten_set,[0,caml_call2(init$1,10,_xy_),cst$107,_bDy_]],_bDx_];
      _Xu_
       ([0,
         _bDn_,
         _bDo_,
         _bDp_,
         _bDq_,
         _bDr_,
         _bDs_,
         _bDt_,
         _bDu_,
         _bDv_,
         _bDw_,
         equal$6,
         tests]);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst_Hash_set_V1,
      0,
      cst_src_stable_containers_ml$1,
      49,
      2,
      979,
      _abJ_);
    function _abO_(param)
     {var
       compare=comparator$5[1],
       Map=
        caml_call1
         (_r2_[1][1],
          [0,
           bin_t$30,
           bin_read_t$74,
           bin_read_t$73,
           bin_reader_t$30,
           bin_size_t$36,
           bin_write_t$36,
           bin_writer_t$30,
           bin_shape_t$35,
           compare,
           t_of_sexp$32,
           sexp_of_t$43,
           comparator$5]);
      function t_of_sexp(t){return caml_call2(Map[10],_aaY_,t)}
      function sexp_of_t(v){return caml_call2(Map[11],_aaX_,v)}
      var
       _bDh_=caml_call1(Map[8],_Z2_),
       _bDi_=
        [0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$169),0,_bDh_],0],
       _bDj_=
        caml_call1
         (Bin_shape_lib_Bin_shape[4][1],cst_src_stable_containers_ml_93_6),
       group=caml_call2(Bin_prot_Shape[6],_bDj_,_bDi_),
       _bDk_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$170),
       bin_shape_t=caml_call1(caml_call2(Bin_prot_Shape[14],group,_bDk_),0);
      function bin_size_t(v){return caml_call2(Map[5],_Y__,v)}
      function bin_write_t(buf,pos,v)
       {return caml_call3(caml_call1(Map[6],_Z4_),buf,pos,v)}
      var bin_writer_t=[0,bin_size_t,bin_write_t];
      function bin_read_t(buf,pos_ref,vint)
       {return caml_call3(caml_call1(Map[3],_Z6_),buf,pos_ref,vint)}
      function bin_read_t$0(buf,pos_ref)
       {return caml_call2(caml_call1(Map[2],_Z6_),buf,pos_ref)}
      var
       bin_reader_t=[0,bin_read_t$0,bin_read_t],
       bin_t=[0,bin_shape_t,bin_writer_t,bin_reader_t],
       equal=caml_call1(Map$1[54],equal$27),
       _bDl_=[0,[0,caml_call2(Map$1[5],0,cst_foo$10),cst_0_foo,cst_foo$9],0],
       _bDm_=[0,[0,Map$1[4],cst$109,cst$108],_bDl_],
       tests=
        [0,
         [0,caml_call1(Map$1[8],_abP_),cst_1_foo_2_bar_3_baz,cst_foo_bar_baz],
         _bDm_];
      Make$8
       ([0,
         t_of_sexp,
         sexp_of_t,
         bin_t,
         bin_read_t$0,
         bin_read_t,
         bin_reader_t,
         bin_size_t,
         bin_write_t,
         bin_writer_t,
         bin_shape_t,
         equal,
         tests]);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst_Map_V1,
      0,
      cst_src_stable_containers_ml$2,
      91,
      2,
      485,
      _abO_);
    function _abQ_(param)
     {var
       compare=comparator$5[1],
       _bC4_=
        caml_call1
         (_sY_[1][1],
          [0,
           bin_t$30,
           bin_read_t$74,
           bin_read_t$73,
           bin_reader_t$30,
           bin_size_t$36,
           bin_write_t$36,
           bin_writer_t$30,
           bin_shape_t$35,
           compare,
           t_of_sexp$32,
           sexp_of_t$43,
           comparator$5]),
       _bC5_=_bC4_[8],
       _bC6_=_bC4_[7],
       _bC7_=_bC4_[6],
       _bC8_=_bC4_[5],
       _bC9_=_bC4_[4],
       _bC__=_bC4_[3],
       _bC$_=_bC4_[2],
       _bDa_=_bC4_[1],
       _bDb_=_bC4_[11],
       _bDc_=_bC4_[10],
       _bDd_=[0,[0,caml_call1(Set$1[55],0),cst_0$0,cst$110],0],
       _bDe_=[0,[0,Set$1[54],cst$112,cst$111],_bDd_],
       _bDf_=caml_call2(init$1,10,function(_bDg_){return _bDg_}),
       tests=
        [0,
         [0,caml_call1(Set$1[57],_bDf_),cst_0_1_2_3_4_5_6_7_8_9,cst$113],
         _bDe_];
      Make$8
       ([0,
         _bDc_,
         _bDb_,
         _bDa_,
         _bC$_,
         _bC__,
         _bC9_,
         _bC8_,
         _bC7_,
         _bC6_,
         _bC5_,
         equal$13,
         tests]);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst_Set_V1,
      0,
      cst_src_stable_containers_ml$3,
      120,
      2,
      389,
      _abQ_);
    function Make$9(Key)
     {var Table=V1$13(Key),Hash_set=V1$14(Key);return [0,Table,Hash_set]}
    var V1$15=[0,Make$9],Hashable$0=[0,V1$15];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$274);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Stable_containers=[0,Hashable$0];
    caml_register_global
     (7483,Core_kernel_Stable_containers,"Core_kernel__Stable_containers");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$275);
    caml_call1(Expect_test_collector[4][1],cst_src_day_of_week_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$276,cst$114);
    var
     _abS_=caml_call1(Bin_prot_Shape[9],_abR_),
     _abT_=
      [0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$171),0,_abS_],0],
     _abU_=
      caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_day_of_week_ml_8_6),
     group$106=caml_call2(Bin_prot_Shape[6],_abU_,_abT_),
     _abV_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$172),
     bin_shape_t$81=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$106,_abV_),0);
    function bin_size_t$62(param){return 1}
    function bin_write_t$63(buf,pos,param)
     {switch(param)
       {case 0:return caml_call3(Bin_prot_Write[30],buf,pos,0);
        case 1:return caml_call3(Bin_prot_Write[30],buf,pos,1);
        case 2:return caml_call3(Bin_prot_Write[30],buf,pos,2);
        case 3:return caml_call3(Bin_prot_Write[30],buf,pos,3);
        case 4:return caml_call3(Bin_prot_Write[30],buf,pos,4);
        case 5:return caml_call3(Bin_prot_Write[30],buf,pos,5);
        default:return caml_call3(Bin_prot_Write[30],buf,pos,6)}}
    var bin_writer_t$72=[0,bin_size_t$62,bin_write_t$63];
    function bin_read_t$123(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],
               cst_src_day_of_week_ml_Stable_V1_T_t,
               pos_ref[1])}
    function bin_read_t$124(buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[29],buf,pos_ref);
      if(6 < match >>> 0)
       return caml_call2(Bin_prot_Common[18],_abW_,pos_ref[1]);
      switch(match)
       {case 0:return 0;
        case 1:return 1;
        case 2:return 2;
        case 3:return 3;
        case 4:return 4;
        case 5:return 5;
        default:return 6}}
    var
     bin_reader_t$72=[0,bin_read_t$124,bin_read_t$123],
     bin_t$72=[0,bin_shape_t$81,bin_writer_t$72,bin_reader_t$72];
    function compare$60(a_001,b_002)
     {if(caml_call2(Ppx_compare_lib[1],a_001,b_002))return 0;
      switch(a_001)
       {case 0:return 0 === b_002?0:-1;
        case 1:
         if(1 === b_002)return 0;
         if(0 !== b_002)return -1;
         var switch$0=0;
         break;
        case 2:
         switch(b_002)
          {case 2:return 0;
           case 0:var switch$0=0;break;
           case 1:var switch$0=1;break;
           default:return -1}
         break;
        case 3:
         switch(b_002)
          {case 3:return 0;
           case 0:var switch$0=0;break;
           case 1:var switch$0=1;break;
           case 2:var switch$0=2;break;
           default:return -1}
         break;
        case 4:
         switch(b_002)
          {case 4:return 0;
           case 0:var switch$0=0;break;
           case 1:var switch$0=1;break;
           case 2:var switch$0=2;break;
           case 3:var switch$0=3;break;
           default:return -1}
         break;
        case 5:
         switch(b_002)
          {case 5:return 0;
           case 6:return -1;
           case 0:var switch$0=0;break;
           case 1:var switch$0=1;break;
           case 2:var switch$0=2;break;
           case 3:var switch$0=3;break;
           default:var switch$0=4}
         break;
        default:
         switch(b_002)
          {case 5:return 1;
           case 6:return 0;
           case 0:var switch$0=0;break;
           case 1:var switch$0=1;break;
           case 2:var switch$0=2;break;
           case 3:var switch$0=3;break;
           default:var switch$0=4}}
      switch(switch$0)
       {case 0:return 1;
        case 1:return 1;
        case 2:return 1;
        case 3:return 1;
        default:return 1}}
    function hash_fold_t$38(hsv,arg)
     {switch(arg)
       {case 0:return caml_call2(Base_Hash[3],hsv,0);
        case 1:return caml_call2(Base_Hash[3],hsv,1);
        case 2:return caml_call2(Base_Hash[3],hsv,2);
        case 3:return caml_call2(Base_Hash[3],hsv,3);
        case 4:return caml_call2(Base_Hash[3],hsv,4);
        case 5:return caml_call2(Base_Hash[3],hsv,5);
        default:return caml_call2(Base_Hash[3],hsv,6)}}
    function hash$29(x)
     {var hsv=caml_call2(Base_Hash[11],0,0),_bC3_=hash_fold_t$38(hsv,x);
      return caml_call1(Base_Hash[9],_bC3_)}
    function to_string$20(t)
     {switch(t)
       {case 0:return cst_SUN;
        case 1:return cst_MON;
        case 2:return cst_TUE;
        case 3:return cst_WED;
        case 4:return cst_THU;
        case 5:return cst_FRI;
        default:return cst_SAT}}
    function to_string_long(t)
     {switch(t)
       {case 0:return cst_Sunday;
        case 1:return cst_Monday;
        case 2:return cst_Tuesday;
        case 3:return cst_Wednesday;
        case 4:return cst_Thursday;
        case 5:return cst_Friday;
        default:return cst_Saturday}}
    function of_string_internal(s)
     {var
       match=caml_call1(_Hd_,s),
       _bC2_=caml_string_compare(match,cst_SUNDAY);
      if(0 <= _bC2_)
       if(0 < _bC2_)
        {if(caml_string_notequal(match,cst_THU$0))
          if(caml_string_notequal(match,cst_THURSDAY))
           {if(caml_string_notequal(match,cst_TUE$0))
             if(caml_string_notequal(match,cst_TUESDAY))
              {if(caml_string_notequal(match,cst_WED$0))
                if(caml_string_notequal(match,cst_WEDNESDAY))
                 var switch$0=0,switch$1=0,switch$2=0,switch$3=0;
                else
                 var switch$3=1;
               else
                var switch$3=1;
               if(switch$3)return 3}
             else
              var switch$2=1;
            else
             var switch$2=1;
            if(switch$2)return 2}
          else
           var switch$1=1;
         else
          var switch$1=1;
         if(switch$1)return 4}
       else
        var switch$0=1;
      else
       {if(caml_string_notequal(match,cst_FRI$0))
         if(caml_string_notequal(match,cst_FRIDAY))
          {if(caml_string_notequal(match,cst_MON$0))
            if(caml_string_notequal(match,cst_MONDAY))
             {if(caml_string_notequal(match,cst_SAT$0))
               if(caml_string_notequal(match,cst_SATURDAY))
                if(caml_string_notequal(match,cst_SUN$0))
                 var switch$0=0,switch$4=0,switch$5=0,switch$6=0;
                else
                 var switch$0=1,switch$4=0,switch$5=0,switch$6=0;
               else
                var switch$6=1;
              else
               var switch$6=1;
              if(switch$6)return 6}
            else
             var switch$5=1;
           else
            var switch$5=1;
           if(switch$5)return 1}
         else
          var switch$4=1;
        else
         var switch$4=1;
        if(switch$4)return 5}
      return switch$0?0:caml_call3(failwithf,_abX_,s,0)}
    function of_int_exn$5(i)
     {if(6 < i >>> 0)return caml_call3(failwithf,_abY_,i,0);
      switch(i)
       {case 0:return 0;
        case 1:return 1;
        case 2:return 2;
        case 3:return 3;
        case 4:return 4;
        case 5:return 5;
        default:return 6}}
    function of_string$17(s)
     {try
       {var _bCZ_=of_string_internal(s);return _bCZ_}
      catch(_bC0_)
       {try
         {var _bCY_=of_int_exn$5(caml_call1(_xz_,s));return _bCY_}
        catch(_bC1_){return caml_call3(failwithf,_abZ_,s,0)}}}
    var
     include$96=caml_call1(Stable[5][1],[0,of_string$17,to_string$20]),
     t_of_sexp$70=include$96[1],
     sexp_of_t$81=include$96[2],
     _ab0_=
      _te_
       ([0,
         bin_t$72,
         bin_read_t$124,
         bin_read_t$123,
         bin_reader_t$72,
         bin_size_t$62,
         bin_write_t$63,
         bin_writer_t$72,
         bin_shape_t$81,
         compare$60,
         t_of_sexp$70,
         sexp_of_t$81]),
     _ab3_=_ab0_[3],
     equal$33=_ab0_[7],
     compare$61=_ab0_[8],
     min$14=_ab0_[9],
     max$14=_ab0_[10],
     ascending$13=_ab0_[11],
     descending$13=_ab0_[12],
     between$13=_ab0_[13],
     clamp_exn$13=_ab0_[14],
     clamp$13=_ab0_[15],
     validate_lbound$13=_ab0_[16],
     validate_ubound$13=_ab0_[17],
     validate_bound$13=_ab0_[18],
     Replace_polymorphic_compare$11=_ab0_[19],
     comparator$23=_ab0_[20],
     Map$15=_ab0_[21],
     Set$15=_ab0_[22],
     _ab1_=_ab0_[1],
     _ab2_=_ab0_[2],
     _ab4_=_ab0_[4],
     _ab5_=_ab0_[5],
     _ab6_=_ab0_[6],
     include$97=
      Make_binable
       ([0,
         hash_fold_t$38,
         bin_t$72,
         bin_read_t$124,
         bin_read_t$123,
         bin_reader_t$72,
         bin_size_t$62,
         bin_write_t$63,
         bin_writer_t$72,
         bin_shape_t$81,
         t_of_sexp$70,
         compare$60,
         sexp_of_t$81,
         hash$29]),
     hash_fold_t$39=include$97[1],
     hash$30=include$97[2],
     hashable$8=include$97[3],
     Table$9=include$97[4],
     Hash_set$9=include$97[5],
     Hash_queue$9=include$97[6],
     _ab7_=
      caml_call1
       (Stable$2[1][1],
        [0,
         bin_t$72,
         bin_read_t$124,
         bin_read_t$123,
         bin_reader_t$72,
         bin_size_t$62,
         bin_write_t$63,
         bin_writer_t$72,
         bin_shape_t$81,
         compare$61,
         t_of_sexp$70,
         sexp_of_t$81,
         comparator$23]),
     Map$16=_ab7_[1],
     Set$16=_ab7_[2],
     include$98=
      caml_call1
       (Hashable$0[1][1],
        [0,
         bin_t$72,
         bin_read_t$124,
         bin_read_t$123,
         bin_reader_t$72,
         bin_size_t$62,
         bin_write_t$63,
         bin_writer_t$72,
         bin_shape_t$81,
         t_of_sexp$70,
         compare$61,
         sexp_of_t$81,
         hash$30]),
     Table$10=include$98[1],
     Hash_set$10=include$98[2];
    function _ab8_(param)
     {function equal(a,b){return caml_call2(_aD_,compare$60(a,b),0)}
      Make$8
       ([0,
         t_of_sexp$70,
         sexp_of_t$81,
         bin_t$72,
         bin_read_t$124,
         bin_read_t$123,
         bin_reader_t$72,
         bin_size_t$62,
         bin_write_t$63,
         bin_writer_t$72,
         bin_shape_t$81,
         equal,
         tests$0]);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst_Day_of_week_V1,
      0,
      cst_src_day_of_week_ml$0,
      96,
      2,
      413,
      _ab8_);
    function _ab9_(param){return caml_call2(is_sorted$0,all$4,compare$61)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[4],
      Inline_test_config,
      cst_List_is_sorted_all_compare,
      0,
      cst_src_day_of_week_ml$1,
      125,
      0,
      40,
      _ab9_);
    function _ab__(param)
     {return caml_call2
              (for_all$1,
               all$4,
               function(d)
                {return caml_call2(_ab3_,d,of_string$17(to_string_long(d)))})}
    caml_call8
     (Ppx_inline_test_lib_Runtime[4],
      Inline_test_config,
      cst_to_string_long_output_parses_with_of_string,
      0,
      cst_src_day_of_week_ml$2,
      127,
      0,
      125,
      _ab__);
    function of_int$6(i)
     {try {var _bCW_=[0,of_int_exn$5(i)];return _bCW_}catch(_bCX_){return 0}}
    function to_int$5(t)
     {switch(t)
       {case 0:return 0;
        case 1:return 1;
        case 2:return 2;
        case 3:return 3;
        case 4:return 4;
        case 5:return 5;
        default:return 6}}
    function iso_8601_weekday_number(t)
     {switch(t)
       {case 0:return 7;
        case 1:return 1;
        case 2:return 2;
        case 3:return 3;
        case 4:return 4;
        case 5:return 5;
        default:return 6}}
    var num_days_in_week=7;
    function shift(t,i)
     {return of_int_exn$5
              (caml_call2
                (_wX_,caml_call2(_ah_,to_int$5(t),i),num_days_in_week))}
    function num_days(from,to)
     {var _bCV_=to_int$5(from),d=caml_call2(_ai_,to_int$5(to),_bCV_);
      return caml_call2(_xt_,d,0)?caml_call2(_ah_,d,num_days_in_week):d}
    function _ab$_(param){return caml_call2(_xv_,num_days(1,2),1)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[4],
      Inline_test_config,
      cst_let_open_Int_in_num_days_from_Mon_to_Tue_1,
      0,
      cst_src_day_of_week_ml$3,
      163,
      0,
      50,
      _ab$_);
    function _aca_(param){return caml_call2(_xv_,num_days(2,1),6)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[4],
      Inline_test_config,
      cst_let_open_Int_in_num_days_from_Tue_to_Mon_6,
      0,
      cst_src_day_of_week_ml$4,
      164,
      0,
      50,
      _aca_);
    function _acb_(param)
     {function _bCS_(param)
       {var
         to=param[2],
         from=param[1],
         i=num_days(from,to),
         _bCT_=caml_call2(_xw_,0,i),
         _bCU_=_bCT_?caml_call2(_xt_,i,num_days_in_week):_bCT_;
        return _bCU_?caml_call2(_ab3_,shift(from,i),to):_bCU_}
      return caml_call2
              (for_all$1,
               caml_call2(cartesian_product$1,all_days,all_days),
               _bCS_)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[4],
      Inline_test_config,
      cst_num_days_is_inverse_to_shift,
      0,
      cst_src_day_of_week_ml$5,
      165,
      0,
      285,
      _acb_);
    function is_sun_or_sat(t)
     {var _bCR_=caml_call2(_ab3_,t,0);
      return _bCR_?_bCR_:caml_call2(_ab3_,t,6)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$277);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Day_of_week=
      [0,
       bin_t$72,
       bin_read_t$124,
       bin_read_t$123,
       bin_reader_t$72,
       bin_size_t$62,
       bin_write_t$63,
       bin_writer_t$72,
       bin_shape_t$81,
       t_of_sexp$70,
       sexp_of_t$81,
       _ab1_,
       _ab2_,
       _ab3_,
       _ab4_,
       _ab5_,
       _ab6_,
       equal$33,
       compare$61,
       min$14,
       max$14,
       ascending$13,
       descending$13,
       between$13,
       clamp_exn$13,
       clamp$13,
       validate_lbound$13,
       validate_ubound$13,
       validate_bound$13,
       Replace_polymorphic_compare$11,
       comparator$23,
       Map$15,
       Set$15,
       hash_fold_t$39,
       hash$30,
       hashable$8,
       Table$9,
       Hash_set$9,
       Hash_queue$9,
       of_string$17,
       to_string$20,
       to_string_long,
       of_int_exn$5,
       of_int$6,
       to_int$5,
       iso_8601_weekday_number,
       shift,
       num_days,
       is_sun_or_sat,
       all$4,
       weekdays,
       weekends,
       [0,
        [0,
         bin_t$72,
         bin_read_t$124,
         bin_read_t$123,
         bin_reader_t$72,
         bin_size_t$62,
         bin_write_t$63,
         bin_writer_t$72,
         bin_shape_t$81,
         t_of_sexp$70,
         sexp_of_t$81,
         compare$60,
         hash_fold_t$38,
         hash$29,
         Map$16,
         Set$16,
         Table$10,
         Hash_set$10]]];
    caml_register_global
     (7484,Core_kernel_Day_of_week,"Core_kernel__Day_of_week");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$278);
    caml_call1(Expect_test_collector[4][1],cst_src_day_of_week_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$279,cst$115);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$280);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Day_of_week_intf=[0];
    caml_register_global
     (7485,Core_kernel_Day_of_week_intf,"Core_kernel__Day_of_week_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$281);
    caml_call1(Expect_test_collector[4][1],cst_src_digit_string_helpers_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$282,cst$116);
    var
     int63_ten=caml_call1(of_int$1,10),
     int63_billion=caml_call1(of_int$1,1e9),
     max_billions=caml_call2(_z3_,_zw_,int63_billion);
    function digits_of_positive_int63(n)
     {return caml_call2(_An_,n,int63_ten)
              ?1
              :caml_call1
                (next$1,
                 digits_of_positive_int63(caml_call2(_z3_,n,int63_ten)))}
    var digits_of_int63_max_value=digits_of_positive_int63(_zw_);
    function max_int63_with(digits)
     {var switcher=digits - 1 | 0;
      if(8 < switcher >>> 0)
       {if
         (caml_call2
           (Replace_polymorphic_compare[1],digits,digits_of_int63_max_value))
         return _zw_;
        var billions=caml_call1(succ$2,max_int63_with(digits - 9 | 0));
        return caml_call1(pred$2,caml_call2(_z9_,int63_billion,billions))}
      switch(switcher)
       {case 0:return caml_call1(of_int$1,9);
        case 1:return caml_call1(of_int$1,99);
        case 2:return caml_call1(of_int$1,999);
        case 3:return caml_call1(of_int$1,9999);
        case 4:return caml_call1(of_int$1,99999);
        case 5:return caml_call1(of_int$1,999999);
        case 6:return caml_call1(of_int$1,9999999);
        case 7:return caml_call1(of_int$1,99999999);
        default:return caml_call1(of_int$1,999999999)}}
    function _acc_(param)
     {var
       got=max_int63_with(11),
       expect=caml_call1(_At_,caml_call2(_Hj_,11,function(param){return 57}));
      return caml_call8
              (Ppx_assert_lib_Runtime[3],
               pos$69,
               sexp_of_t$49,
               compare$36,
               0,
               0,
               0,
               expect,
               got)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_max_int63_with,
      0,
      cst_src_digit_string_helpers_ml$0,
      38,
      0,
      165,
      _acc_);
    function write_1_digit_int(bytes,pos,int$0)
     {caml_bytes_unsafe_set
       (bytes,pos,caml_call1(_CO_,caml_call1(_CL_,48) + int$0 | 0));
      return 0}
    function return_tens_and_write_ones(bytes,pos,int$0)
     {var tens=int$0 / 10 | 0,ones=int$0 - (tens * 10 | 0) | 0;
      write_1_digit_int(bytes,pos,ones);
      return tens}
    function write_2_digit_int(bytes,pos,int$0)
     {var tens=return_tens_and_write_ones(bytes,pos + 1 | 0,int$0);
      return write_1_digit_int(bytes,pos,tens)}
    function write_3_digit_int(bytes,pos,int$0)
     {var tens=return_tens_and_write_ones(bytes,pos + 2 | 0,int$0);
      return write_2_digit_int(bytes,pos,tens)}
    function write_4_digit_int(bytes,pos,int$0)
     {var tens=return_tens_and_write_ones(bytes,pos + 3 | 0,int$0);
      return write_3_digit_int(bytes,pos,tens)}
    function write_5_digit_int(bytes,pos,int$0)
     {var tens=return_tens_and_write_ones(bytes,pos + 4 | 0,int$0);
      return write_4_digit_int(bytes,pos,tens)}
    function write_6_digit_int(bytes,pos,int$0)
     {var tens=return_tens_and_write_ones(bytes,pos + 5 | 0,int$0);
      return write_5_digit_int(bytes,pos,tens)}
    function write_7_digit_int(bytes,pos,int$0)
     {var tens=return_tens_and_write_ones(bytes,pos + 6 | 0,int$0);
      return write_6_digit_int(bytes,pos,tens)}
    function write_8_digit_int(bytes,pos,int$0)
     {var tens=return_tens_and_write_ones(bytes,pos + 7 | 0,int$0);
      return write_7_digit_int(bytes,pos,tens)}
    function write_9_digit_int(bytes,pos,int$0)
     {var tens=return_tens_and_write_ones(bytes,pos + 8 | 0,int$0);
      return write_8_digit_int(bytes,pos,tens)}
    function read_1_digit_int(string,pos)
     {var char$0=runtime.caml_string_unsafe_get(string,pos);
      return caml_call1(_C0_,char$0)}
    function read_2_digit_int(string,pos)
     {var _bCQ_=read_1_digit_int(string,pos + 1 | 0);
      return (read_1_digit_int(string,pos) * 10 | 0) + _bCQ_ | 0}
    function read_3_digit_int(string,pos)
     {var _bCP_=read_1_digit_int(string,pos + 2 | 0);
      return (read_2_digit_int(string,pos) * 10 | 0) + _bCP_ | 0}
    function read_4_digit_int(string,pos)
     {var _bCO_=read_1_digit_int(string,pos + 3 | 0);
      return (read_3_digit_int(string,pos) * 10 | 0) + _bCO_ | 0}
    function read_5_digit_int(string,pos)
     {var _bCN_=read_1_digit_int(string,pos + 4 | 0);
      return (read_4_digit_int(string,pos) * 10 | 0) + _bCN_ | 0}
    function read_6_digit_int(string,pos)
     {var _bCM_=read_1_digit_int(string,pos + 5 | 0);
      return (read_5_digit_int(string,pos) * 10 | 0) + _bCM_ | 0}
    function read_7_digit_int(string,pos)
     {var _bCL_=read_1_digit_int(string,pos + 6 | 0);
      return (read_6_digit_int(string,pos) * 10 | 0) + _bCL_ | 0}
    function read_8_digit_int(string,pos)
     {var _bCK_=read_1_digit_int(string,pos + 7 | 0);
      return (read_7_digit_int(string,pos) * 10 | 0) + _bCK_ | 0}
    function read_9_digit_int(string,pos)
     {var _bCJ_=read_1_digit_int(string,pos + 8 | 0);
      return (read_8_digit_int(string,pos) * 10 | 0) + _bCJ_ | 0}
    function raise_int63_overflow(name)
     {return caml_call4(_R6_,_acd_,module_name$8,name,0)}
    function read_int63(string,pos,digits)
     {var switcher=digits - 1 | 0;
      if(8 < switcher >>> 0)
       {var
         digits_of_billions=digits - 9 | 0,
         billions=read_int63(string,pos,digits_of_billions),
         remainder=
          caml_call1
           (of_int$1,read_9_digit_int(string,pos + digits_of_billions | 0));
        if(caml_call2(_Ao_,billions,max_billions))
         raise_int63_overflow(cst_read_int63);
        var
         sum=
          caml_call2(_z$_,caml_call2(_z9_,billions,int63_billion),remainder);
        if(caml_call2(_An_,sum,epoch))raise_int63_overflow(cst_read_int63$0);
        return sum}
      switch(switcher)
       {case 0:return caml_call1(of_int$1,read_1_digit_int(string,pos));
        case 1:return caml_call1(of_int$1,read_2_digit_int(string,pos));
        case 2:return caml_call1(of_int$1,read_3_digit_int(string,pos));
        case 3:return caml_call1(of_int$1,read_4_digit_int(string,pos));
        case 4:return caml_call1(of_int$1,read_5_digit_int(string,pos));
        case 5:return caml_call1(of_int$1,read_6_digit_int(string,pos));
        case 6:return caml_call1(of_int$1,read_7_digit_int(string,pos));
        case 7:return caml_call1(of_int$1,read_8_digit_int(string,pos));
        default:return caml_call1(of_int$1,read_9_digit_int(string,pos))}}
    function check_digits(name,digits)
     {var _bCI_=caml_call2(Replace_polymorphic_compare[5],digits,1);
      return _bCI_?caml_call5(_R6_,_ace_,module_name$8,name,digits,0):_bCI_}
    function check_pos(name,len,pos,digits)
     {var
       _bCG_=caml_call2(Replace_polymorphic_compare[5],pos,0),
       _bCH_=
        _bCG_
        ||
        caml_call2(Replace_polymorphic_compare[4],pos + digits | 0,len);
      if(_bCH_)
       {if(! caml_call2(Replace_polymorphic_compare[5],pos,0))
         if(! caml_call2(Replace_polymorphic_compare[1],pos,len))
          return caml_call7(_R6_,_acg_,module_name$8,name,digits,pos,len,0);
        return caml_call6(_R6_,_acf_,module_name$8,name,pos,len,0)}
      return _bCH_}
    function check_write(name,bytes,pos,digits,max,int$0)
     {var len=caml_call1(length$18,bytes);
      check_pos(name,len,pos,digits);
      var
       _bCE_=caml_call2(Replace_polymorphic_compare[5],int$0,0),
       _bCF_=_bCE_ || caml_call2(Replace_polymorphic_compare[4],int$0,max);
      return _bCF_?caml_call6(_R6_,_ach_,module_name$8,name,int$0,max,0):_bCF_}
    function write_1_digit_int$0(bytes,pos,int$0)
     {check_write(cst_write_1_digit_int,bytes,pos,1,9,int$0);
      return write_1_digit_int(bytes,pos,int$0)}
    function write_2_digit_int$0(bytes,pos,int$0)
     {check_write(cst_write_2_digit_int,bytes,pos,2,99,int$0);
      return write_2_digit_int(bytes,pos,int$0)}
    function write_3_digit_int$0(bytes,pos,int$0)
     {check_write(cst_write_3_digit_int,bytes,pos,3,999,int$0);
      return write_3_digit_int(bytes,pos,int$0)}
    function write_4_digit_int$0(bytes,pos,int$0)
     {check_write(cst_write_4_digit_int,bytes,pos,4,9999,int$0);
      return write_4_digit_int(bytes,pos,int$0)}
    function write_5_digit_int$0(bytes,pos,int$0)
     {check_write(cst_write_5_digit_int,bytes,pos,5,99999,int$0);
      return write_5_digit_int(bytes,pos,int$0)}
    function write_6_digit_int$0(bytes,pos,int$0)
     {check_write(cst_write_6_digit_int,bytes,pos,6,999999,int$0);
      return write_6_digit_int(bytes,pos,int$0)}
    function write_7_digit_int$0(bytes,pos,int$0)
     {check_write(cst_write_7_digit_int,bytes,pos,7,9999999,int$0);
      return write_7_digit_int(bytes,pos,int$0)}
    function write_8_digit_int$0(bytes,pos,int$0)
     {check_write(cst_write_8_digit_int,bytes,pos,8,99999999,int$0);
      return write_8_digit_int(bytes,pos,int$0)}
    function write_9_digit_int$0(bytes,pos,int$0)
     {check_write(cst_write_9_digit_int,bytes,pos,9,999999999,int$0);
      return write_9_digit_int(bytes,pos,int$0)}
    function write_int63(bytes,pos$0,digits$1,int63$1)
     {check_digits(name$52,digits$1);
      var max=max_int63_with(digits$1),len=caml_call1(length$18,bytes);
      check_pos(name$52,len,pos$0,digits$1);
      var
       _bCC_=caml_call2(_An_,int63$1,epoch),
       _bCD_=_bCC_ || caml_call2(_Ao_,int63$1,max);
      if(_bCD_)
       {var
         _bCA_=0,
         _bCB_=
          [11,
           cst_out_of_range_0,
           [24,
            _acj_,
            function(param,custom_printf_003)
             {return caml_call1(_As_,custom_printf_003)},
            _aci_]];
        caml_call6
         (_R6_,
          [0,
           [2,
            0,
            [12,
             46,
             [2,
              0,
              [11,
               cst$117,
               [24,
                _ack_,
                function(param,custom_printf_004)
                 {return caml_call1(_As_,custom_printf_004)},
                _bCB_]]]]],
           cst_s_s_Int63_out_of_range_0_Int63],
          module_name$8,
          name$52,
          int63$1,
          max,
          _bCA_)}
      var digits=digits$1,int63$0=int63$1;
      for(;;)
       {var switcher=digits - 1 | 0;
        if(8 < switcher >>> 0)
         {var
           digits$0=digits - 9 | 0,
           pos=pos$0 + digits$0 | 0,
           int63=caml_call2(_z3_,int63$0,int63_billion),
           remainder=
            caml_call2(_z__,int63$0,caml_call2(_z9_,int63,int63_billion));
          write_9_digit_int(bytes,pos,caml_call1(to_int_exn$2,remainder));
          var digits=digits$0,int63$0=int63;
          continue}
        switch(switcher)
         {case 0:
           return write_1_digit_int
                   (bytes,pos$0,caml_call1(to_int_exn$2,int63$0));
          case 1:
           return write_2_digit_int
                   (bytes,pos$0,caml_call1(to_int_exn$2,int63$0));
          case 2:
           return write_3_digit_int
                   (bytes,pos$0,caml_call1(to_int_exn$2,int63$0));
          case 3:
           return write_4_digit_int
                   (bytes,pos$0,caml_call1(to_int_exn$2,int63$0));
          case 4:
           return write_5_digit_int
                   (bytes,pos$0,caml_call1(to_int_exn$2,int63$0));
          case 5:
           return write_6_digit_int
                   (bytes,pos$0,caml_call1(to_int_exn$2,int63$0));
          case 6:
           return write_7_digit_int
                   (bytes,pos$0,caml_call1(to_int_exn$2,int63$0));
          case 7:
           return write_8_digit_int
                   (bytes,pos$0,caml_call1(to_int_exn$2,int63$0));
          default:
           return write_9_digit_int
                   (bytes,pos$0,caml_call1(to_int_exn$2,int63$0))}}}
    function check_read(name,string,pos,digits)
     {var len=caml_ml_string_length(string);
      return check_pos(name,len,pos,digits)}
    function read_1_digit_int$0(string,pos)
     {check_read(cst_read_1_digit_int,string,pos,1);
      return read_1_digit_int(string,pos)}
    function read_2_digit_int$0(string,pos)
     {check_read(cst_read_2_digit_int,string,pos,2);
      return read_2_digit_int(string,pos)}
    function read_3_digit_int$0(string,pos)
     {check_read(cst_read_3_digit_int,string,pos,3);
      return read_3_digit_int(string,pos)}
    function read_4_digit_int$0(string,pos)
     {check_read(cst_read_4_digit_int,string,pos,4);
      return read_4_digit_int(string,pos)}
    function read_5_digit_int$0(string,pos)
     {check_read(cst_read_5_digit_int,string,pos,5);
      return read_5_digit_int(string,pos)}
    function read_6_digit_int$0(string,pos)
     {check_read(cst_read_6_digit_int,string,pos,6);
      return read_6_digit_int(string,pos)}
    function read_7_digit_int$0(string,pos)
     {check_read(cst_read_7_digit_int,string,pos,7);
      return read_7_digit_int(string,pos)}
    function read_8_digit_int$0(string,pos)
     {check_read(cst_read_8_digit_int,string,pos,8);
      return read_8_digit_int(string,pos)}
    function read_9_digit_int$0(string,pos)
     {check_read(cst_read_9_digit_int,string,pos,9);
      return read_9_digit_int(string,pos)}
    function read_int63$0(string,pos,digits)
     {check_digits(name$53,digits);
      var len=caml_ml_string_length(string);
      check_pos(name$53,len,pos,digits);
      return read_int63(string,pos,digits)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$283);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Digit_string_helpers=
      [0,
       write_int63,
       write_1_digit_int$0,
       write_2_digit_int$0,
       write_3_digit_int$0,
       write_4_digit_int$0,
       write_5_digit_int$0,
       write_6_digit_int$0,
       write_7_digit_int$0,
       write_8_digit_int$0,
       write_9_digit_int$0,
       read_int63$0,
       read_1_digit_int$0,
       read_2_digit_int$0,
       read_3_digit_int$0,
       read_4_digit_int$0,
       read_5_digit_int$0,
       read_6_digit_int$0,
       read_7_digit_int$0,
       read_8_digit_int$0,
       read_9_digit_int$0];
    caml_register_global
     (7486,
      Core_kernel_Digit_string_helpers,
      "Core_kernel__Digit_string_helpers");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$284);
    caml_call1(Expect_test_collector[4][1],cst_src_month_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$285,cst$118);
    function t_of_sexp$71(sexp)
     {if(0 === sexp[0])
       {var _bCq_=sexp[1],_bCr_=caml_string_compare(_bCq_,cst_apr);
        if(0 <= _bCr_)
         if(0 < _bCr_)
          var
           _bCs_=caml_string_compare(_bCq_,cst_jun),
           switch$0=
            0 <= _bCs_
             ?0 < _bCs_
               ?caml_string_notequal(_bCq_,cst_mar)
                 ?caml_string_notequal(_bCq_,cst_may)
                   ?caml_string_notequal(_bCq_,cst_nov)
                     ?caml_string_notequal(_bCq_,cst_oct)
                       ?caml_string_notequal(_bCq_,cst_sep)?12:8
                       :9
                     :10
                   :4
                 :2
               :5
             :caml_string_notequal(_bCq_,cst_aug)
               ?caml_string_notequal(_bCq_,cst_dec)
                 ?caml_string_notequal(_bCq_,cst_feb)
                   ?caml_string_notequal(_bCq_,cst_jan)
                     ?caml_string_notequal(_bCq_,cst_jul)?12:6
                     :0
                   :1
                 :11
               :7;
         else
          var switch$0=3;
        else
         var
          _bCt_=caml_string_compare(_bCq_,cst_Jun),
          switch$0=
           0 <= _bCt_
            ?0 < _bCt_
              ?caml_string_notequal(_bCq_,cst_Mar)
                ?caml_string_notequal(_bCq_,cst_May)
                  ?caml_string_notequal(_bCq_,cst_Nov)
                    ?caml_string_notequal(_bCq_,cst_Oct)
                      ?caml_string_notequal(_bCq_,cst_Sep)?12:8
                      :9
                    :10
                  :4
                :2
              :5
            :caml_string_notequal(_bCq_,cst_Apr)
              ?caml_string_notequal(_bCq_,cst_Aug)
                ?caml_string_notequal(_bCq_,cst_Dec)
                  ?caml_string_notequal(_bCq_,cst_Feb)
                    ?caml_string_notequal(_bCq_,cst_Jan)
                      ?caml_string_notequal(_bCq_,cst_Jul)?12:6
                      :0
                    :1
                  :11
                :7
              :3;
        switch(switch$0)
         {case 0:return 0;
          case 1:return 1;
          case 2:return 2;
          case 3:return 3;
          case 4:return 4;
          case 5:return 5;
          case 6:return 6;
          case 7:return 7;
          case 8:return 8;
          case 9:return 9;
          case 10:return 10;
          case 11:return 11
          }}
      else
       {var _bCu_=sexp[1];
        if(! _bCu_)
         return caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc$30,sexp);
        var _bCv_=_bCu_[1];
        if(0 !== _bCv_[0])
         return caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc$30,sexp);
        var _bCw_=_bCv_[1],_bCx_=caml_string_compare(_bCw_,cst_apr$0);
        if(0 <= _bCx_)
         if(0 < _bCx_)
          var
           _bCy_=caml_string_compare(_bCw_,cst_jun$0),
           switch$1=
            0 <= _bCy_
             ?0 < _bCy_
               ?caml_string_notequal(_bCw_,cst_mar$0)
                 ?caml_string_notequal(_bCw_,cst_may$0)
                   ?caml_string_notequal(_bCw_,cst_nov$0)
                     ?caml_string_notequal(_bCw_,cst_oct$0)
                       ?caml_string_notequal(_bCw_,cst_sep$0)?12:8
                       :9
                     :10
                   :4
                 :2
               :5
             :caml_string_notequal(_bCw_,cst_aug$0)
               ?caml_string_notequal(_bCw_,cst_dec$0)
                 ?caml_string_notequal(_bCw_,cst_feb$0)
                   ?caml_string_notequal(_bCw_,cst_jan$0)
                     ?caml_string_notequal(_bCw_,cst_jul$0)?12:6
                     :0
                   :1
                 :11
               :7;
         else
          var switch$1=3;
        else
         var
          _bCz_=caml_string_compare(_bCw_,cst_Jun$0),
          switch$1=
           0 <= _bCz_
            ?0 < _bCz_
              ?caml_string_notequal(_bCw_,cst_Mar$0)
                ?caml_string_notequal(_bCw_,cst_May$0)
                  ?caml_string_notequal(_bCw_,cst_Nov$0)
                    ?caml_string_notequal(_bCw_,cst_Oct$0)
                      ?caml_string_notequal(_bCw_,cst_Sep$0)?12:8
                      :9
                    :10
                  :4
                :2
              :5
            :caml_string_notequal(_bCw_,cst_Apr$0)
              ?caml_string_notequal(_bCw_,cst_Aug$0)
                ?caml_string_notequal(_bCw_,cst_Dec$0)
                  ?caml_string_notequal(_bCw_,cst_Feb$0)
                    ?caml_string_notequal(_bCw_,cst_Jan$0)
                      ?caml_string_notequal(_bCw_,cst_Jul$0)?12:6
                      :0
                    :1
                  :11
                :7
              :3;
        switch(switch$1)
         {case 0:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$30,sexp);
          case 1:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$30,sexp);
          case 2:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$30,sexp);
          case 3:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$30,sexp);
          case 4:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$30,sexp);
          case 5:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$30,sexp);
          case 6:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$30,sexp);
          case 7:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$30,sexp);
          case 8:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$30,sexp);
          case 9:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$30,sexp);
          case 10:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$30,sexp);
          case 11:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$30,sexp)
          }}
      return caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc$30,sexp)}
    function sexp_of_t$82(param)
     {switch(param)
       {case 0:return _acl_;
        case 1:return _acm_;
        case 2:return _acn_;
        case 3:return _aco_;
        case 4:return _acp_;
        case 5:return _acq_;
        case 6:return _acr_;
        case 7:return _acs_;
        case 8:return _act_;
        case 9:return _acu_;
        case 10:return _acv_;
        default:return _acw_}}
    function compare$62(a_001,b_002)
     {if(caml_call2(Ppx_compare_lib[1],a_001,b_002))return 0;
      switch(a_001)
       {case 0:return 0 === b_002?0:-1;
        case 1:
         if(1 === b_002)return 0;
         if(0 !== b_002)return -1;
         var switch$0=0;
         break;
        case 2:
         switch(b_002)
          {case 2:return 0;
           case 0:var switch$0=0;break;
           case 1:var switch$0=1;break;
           default:return -1}
         break;
        case 3:
         switch(b_002)
          {case 3:return 0;
           case 0:var switch$0=0;break;
           case 1:var switch$0=1;break;
           case 2:var switch$0=2;break;
           default:return -1}
         break;
        case 4:
         switch(b_002)
          {case 4:return 0;
           case 0:var switch$0=0;break;
           case 1:var switch$0=1;break;
           case 2:var switch$0=2;break;
           case 3:var switch$0=3;break;
           default:return -1}
         break;
        case 5:
         switch(b_002)
          {case 5:return 0;
           case 0:var switch$0=0;break;
           case 1:var switch$0=1;break;
           case 2:var switch$0=2;break;
           case 3:var switch$0=3;break;
           case 4:var switch$0=4;break;
           default:return -1}
         break;
        case 6:
         switch(b_002)
          {case 6:return 0;
           case 0:var switch$0=0;break;
           case 1:var switch$0=1;break;
           case 2:var switch$0=2;break;
           case 3:var switch$0=3;break;
           case 4:var switch$0=4;break;
           case 5:var switch$0=5;break;
           default:return -1}
         break;
        case 7:
         switch(b_002)
          {case 7:return 0;
           case 0:var switch$0=0;break;
           case 1:var switch$0=1;break;
           case 2:var switch$0=2;break;
           case 3:var switch$0=3;break;
           case 4:var switch$0=4;break;
           case 5:var switch$0=5;break;
           case 6:var switch$0=6;break;
           default:return -1}
         break;
        case 8:
         switch(b_002)
          {case 8:return 0;
           case 0:var switch$0=0;break;
           case 1:var switch$0=1;break;
           case 2:var switch$0=2;break;
           case 3:var switch$0=3;break;
           case 4:var switch$0=4;break;
           case 5:var switch$0=5;break;
           case 6:var switch$0=6;break;
           case 7:var switch$0=7;break;
           default:return -1}
         break;
        case 9:
         switch(b_002)
          {case 9:return 0;
           case 0:var switch$0=0;break;
           case 1:var switch$0=1;break;
           case 2:var switch$0=2;break;
           case 3:var switch$0=3;break;
           case 4:var switch$0=4;break;
           case 5:var switch$0=5;break;
           case 6:var switch$0=6;break;
           case 7:var switch$0=7;break;
           case 8:var switch$0=8;break;
           default:return -1}
         break;
        case 10:
         switch(b_002)
          {case 10:return 0;
           case 11:return -1;
           case 0:var switch$0=0;break;
           case 1:var switch$0=1;break;
           case 2:var switch$0=2;break;
           case 3:var switch$0=3;break;
           case 4:var switch$0=4;break;
           case 5:var switch$0=5;break;
           case 6:var switch$0=6;break;
           case 7:var switch$0=7;break;
           case 8:var switch$0=8;break;
           default:var switch$0=9}
         break;
        default:
         switch(b_002)
          {case 10:return 1;
           case 11:return 0;
           case 0:var switch$0=0;break;
           case 1:var switch$0=1;break;
           case 2:var switch$0=2;break;
           case 3:var switch$0=3;break;
           case 4:var switch$0=4;break;
           case 5:var switch$0=5;break;
           case 6:var switch$0=6;break;
           case 7:var switch$0=7;break;
           case 8:var switch$0=8;break;
           default:var switch$0=9}}
      switch(switch$0)
       {case 0:return 1;
        case 1:return 1;
        case 2:return 1;
        case 3:return 1;
        case 4:return 1;
        case 5:return 1;
        case 6:return 1;
        case 7:return 1;
        case 8:return 1;
        default:return 1}}
    function hash_fold_t$40(hsv,arg)
     {switch(arg)
       {case 0:return caml_call2(Base_Hash[3],hsv,0);
        case 1:return caml_call2(Base_Hash[3],hsv,1);
        case 2:return caml_call2(Base_Hash[3],hsv,2);
        case 3:return caml_call2(Base_Hash[3],hsv,3);
        case 4:return caml_call2(Base_Hash[3],hsv,4);
        case 5:return caml_call2(Base_Hash[3],hsv,5);
        case 6:return caml_call2(Base_Hash[3],hsv,6);
        case 7:return caml_call2(Base_Hash[3],hsv,7);
        case 8:return caml_call2(Base_Hash[3],hsv,8);
        case 9:return caml_call2(Base_Hash[3],hsv,9);
        case 10:return caml_call2(Base_Hash[3],hsv,10);
        default:return caml_call2(Base_Hash[3],hsv,11)}}
    function hash$31(x)
     {var hsv=caml_call2(Base_Hash[11],0,0),_bCp_=hash_fold_t$40(hsv,x);
      return caml_call1(Base_Hash[9],_bCp_)}
    var
     jan=[0,cst_Jan$1,0,0],
     feb=[0,cst_Feb$1,1,1],
     mar=[0,cst_Mar$1,2,2],
     apr=[0,cst_Apr$1,3,3],
     may=[0,cst_May$1,4,4],
     jun=[0,cst_Jun$1,5,5],
     jul=[0,cst_Jul$1,6,6],
     aug=[0,cst_Aug$1,7,7],
     sep=[0,cst_Sep$1,8,8],
     oct=[0,cst_Oct$1,9,9],
     nov=[0,cst_Nov$1,10,10],
     dec=[0,cst_Dec$1,11,11];
    function of_int_exn$6(i)
     {var switcher=i - 1 | 0;
      if(11 < switcher >>> 0)return caml_call3(failwithf,_acx_,i,0);
      switch(switcher)
       {case 0:return 0;
        case 1:return 1;
        case 2:return 2;
        case 3:return 3;
        case 4:return 4;
        case 5:return 5;
        case 6:return 6;
        case 7:return 7;
        case 8:return 8;
        case 9:return 9;
        case 10:return 10;
        default:return 11}}
    function of_int$7(i)
     {try {var _bCn_=[0,of_int_exn$6(i)];return _bCn_}catch(_bCo_){return 0}}
    function to_int$6(t)
     {switch(t)
       {case 0:return 1;
        case 1:return 2;
        case 2:return 3;
        case 3:return 4;
        case 4:return 5;
        case 5:return 6;
        case 6:return 7;
        case 7:return 8;
        case 8:return 9;
        case 9:return 10;
        case 10:return 11;
        default:return 12}}
    function to_binable$3(t){return caml_call2(_ai_,to_int$6(t),1)}
    function of_binable$3(i){return of_int_exn$6(caml_call2(_ah_,i,1))}
    var
     include$99=
      caml_call1
       (caml_call1
         (Stable$0[1][1],
          [0,
           bin_shape_t$35,
           bin_size_t$36,
           bin_write_t$36,
           bin_read_t$74,
           bin_read_t$73]),
        [0,to_binable$3,of_binable$3]),
     bin_size_t$63=include$99[1],
     bin_write_t$64=include$99[2],
     bin_read_t$125=include$99[3],
     bin_read_t$126=include$99[4],
     bin_shape_t$82=include$99[5],
     bin_writer_t$73=include$99[6],
     bin_reader_t$73=include$99[7],
     bin_t$73=include$99[8];
    function _acy_(param)
     {function equal(t1,t2){return caml_call2(_xv_,0,compare$62(t1,t2))}
      function c(rank,sexp,bin_io,tests,variant)
       {if(caml_call2(_aD_,variant[2],rank))
         return [0,[0,variant[3],sexp,bin_io],tests];
        throw [0,Assert_failure,_acz_]}
      var
       tests=
        c
         (11,
          cst_Dec$2,
          cst$119,
          c
           (10,
            cst_Nov$2,
            cst$120,
            c
             (9,
              cst_Oct$2,
              cst$121,
              c
               (8,
                cst_Sep$2,
                cst$122,
                c
                 (7,
                  cst_Aug$2,
                  cst$123,
                  c
                   (6,
                    cst_Jul$2,
                    cst$124,
                    c
                     (5,
                      cst_Jun$2,
                      cst$125,
                      c
                       (4,
                        cst_May$2,
                        cst$126,
                        c
                         (3,
                          cst_Apr$2,
                          cst$127,
                          c
                           (2,
                            cst_Mar$2,
                            cst$128,
                            c(1,cst_Feb$2,cst$129,c(0,cst_Jan$2,cst$130,0,jan),feb),
                            mar),
                          apr),
                        may),
                      jun),
                    jul),
                  aug),
                sep),
              oct),
            nov),
          dec);
      Make$8
       ([0,
         t_of_sexp$71,
         sexp_of_t$82,
         bin_t$73,
         bin_read_t$125,
         bin_read_t$126,
         bin_reader_t$73,
         bin_size_t$63,
         bin_write_t$64,
         bin_writer_t$73,
         bin_shape_t$82,
         equal,
         tests]);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst_Month_V1,
      0,
      cst_src_month_ml$0,
      66,
      2,
      793,
      _acy_);
    var num_months=12;
    function _acA_(param)
     {return caml_call2(_aD_,caml_call1(length$4,all$5),num_months)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[4],
      Inline_test_config,
      cst_List_length_all_num_months,
      0,
      cst_src_month_ml$1,
      110,
      2,
      43,
      _acA_);
    function _acB_(param)
     {function _bCm_(last,cur)
       {if(caml_call2(_aD_,compare$62(last,cur),-1))return cur;
        throw [0,Assert_failure,_acC_]}
      var got=caml_call3(fold$2,caml_call1(tl_exn,all$5),0,_bCm_);
      return caml_call8
              (Ppx_assert_lib_Runtime[3],
               pos$70,
               sexp_of_t$82,
               compare$62,
               0,
               0,
               0,
               11,
               got)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_test_result_t_List_fold_List_tl_exn,
      0,
      cst_src_month_ml$2,
      112,
      2,
      182,
      _acB_);
    var
     _acD_=
      Make_binable
       ([0,
         hash_fold_t$40,
         bin_t$73,
         bin_read_t$125,
         bin_read_t$126,
         bin_reader_t$73,
         bin_size_t$63,
         bin_write_t$64,
         bin_writer_t$73,
         bin_shape_t$82,
         t_of_sexp$71,
         compare$62,
         sexp_of_t$82,
         to_int$6]),
     hash_fold_t$41=_acD_[1],
     hash$32=_acD_[2],
     hashable$9=_acD_[3],
     Table$11=_acD_[4],
     Hash_set$11=_acD_[5],
     Hash_queue$10=_acD_[6];
    function t_of_sexp$72(sexp)
     {var
       match=
        caml_call1
         (try_with,function(param){return caml_call1(t_of_sexp$32,sexp)});
      if(match){var i=match[1];return of_int_exn$6(caml_call2(_ah_,i,1))}
      return t_of_sexp$71(sexp)}
    var
     include$100=
      _te_
       ([0,
         bin_t$73,
         bin_read_t$125,
         bin_read_t$126,
         bin_reader_t$73,
         bin_size_t$63,
         bin_write_t$64,
         bin_writer_t$73,
         bin_shape_t$82,
         compare$62,
         t_of_sexp$72,
         sexp_of_t$82]),
     _acG_=include$100[3],
     _acJ_=include$100[6],
     _acL_=include$100[8],
     _acZ_=include$100[22],
     _acE_=include$100[1],
     _acF_=include$100[2],
     _acH_=include$100[4],
     _acI_=include$100[5],
     _acK_=include$100[7],
     _acM_=include$100[9],
     _acN_=include$100[10],
     _acO_=include$100[11],
     _acP_=include$100[12],
     _acQ_=include$100[13],
     _acR_=include$100[14],
     _acS_=include$100[15],
     _acT_=include$100[16],
     _acU_=include$100[17],
     _acV_=include$100[18],
     _acW_=include$100[19],
     _acX_=include$100[20],
     _acY_=include$100[21];
    function _ac0_(param)
     {var _bCk_=caml_call1(_acZ_[73],_ac1_),_bCl_=caml_call1(_acZ_[57],_ac2_);
      return caml_call2(_acZ_[26],_bCl_,_bCk_)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[4],
      Inline_test_config,
      cst_Set_equal_Set_of_list_Jan_Set_t_of_sex,
      0,
      cst_src_month_ml$3,
      148,
      0,
      81,
      _ac0_);
    function _ac3_(param){return caml_equal(sexp_of_t$82(0),_ac4_)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[4],
      Inline_test_config,
      cst_Pervasives_sexp_of_t_Jan_Sexp_Atom_Jan,
      0,
      cst_src_month_ml$4,
      149,
      0,
      61,
      _ac3_);
    function _ac5_(param){return caml_call2(_acG_,0,t_of_sexp$71(_ac6_))}
    caml_call8
     (Ppx_inline_test_lib_Runtime[4],
      Inline_test_config,
      cst_Jan_t_of_sexp_Sexp_Atom_Jan,
      0,
      cst_src_month_ml$5,
      150,
      0,
      46,
      _ac5_);
    function _ac7_(param)
     {return caml_call1
              (is_none,
               caml_call1
                (try_with,function(param){return t_of_sexp$71(_ac8_)}))}
    caml_call8
     (Ppx_inline_test_lib_Runtime[4],
      Inline_test_config,
      cst_Option_is_none_Option_try_with_fun_t,
      0,
      cst_src_month_ml$6,
      151,
      0,
      83,
      _ac7_);
    function shift$0(t,i)
     {return of_int_exn$6
              (caml_call2
                (_ah_,
                 1,
                 caml_call2
                  (_wX_,
                   caml_call2(_ah_,caml_call2(_ai_,to_int$6(t),1),i),
                   num_months)))}
    function _ac9_(param){return caml_call2(_acG_,shift$0(0,12),0)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[4],
      Inline_test_config,
      cst_shift_Jan_12_Jan,
      0,
      cst_src_month_ml$7,
      154,
      0,
      31,
      _ac9_);
    function _ac__(param){return caml_call2(_acG_,shift$0(0,-12),0)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[4],
      Inline_test_config,
      cst_shift_Jan_12_Jan$0,
      0,
      cst_src_month_ml$8,
      155,
      0,
      34,
      _ac__);
    function _ac$_(param){return caml_call2(_acG_,shift$0(0,16),4)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[4],
      Inline_test_config,
      cst_shift_Jan_16_May,
      0,
      cst_src_month_ml$9,
      156,
      0,
      31,
      _ac$_);
    function _ada_(param){return caml_call2(_acG_,shift$0(0,-16),8)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[4],
      Inline_test_config,
      cst_shift_Jan_16_Sep,
      0,
      cst_src_month_ml$10,
      157,
      0,
      34,
      _ada_);
    function _adb_(param){return caml_call2(_acG_,shift$0(8,1),9)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[4],
      Inline_test_config,
      cst_shift_Sep_1_Oct,
      0,
      cst_src_month_ml$11,
      158,
      0,
      30,
      _adb_);
    function _adc_(param){return caml_call2(_acG_,shift$0(8,-1),7)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[4],
      Inline_test_config,
      cst_shift_Sep_1_Aug,
      0,
      cst_src_month_ml$12,
      159,
      0,
      33,
      _adc_);
    var
     all_strings=
      [246,
       function(_bCj_)
        {return caml_call1
                 (of_list$1,
                  caml_call2
                   (map$11,
                    all$5,
                    function(variant)
                     {return caml_call1(_PM_,sexp_of_t$82(variant))}))}];
    function to_string$21(t)
     {var
       _bCh_=caml_obj_tag(all_strings),
       all_strings$0=
        250 === _bCh_
         ?all_strings[1]
         :246 === _bCh_
           ?caml_call1(CamlinternalLazy[2],all_strings)
           :all_strings,
       _bCi_=caml_call2(_ai_,to_int$6(t),1);
      return caml_check_bound(all_strings$0,_bCi_)[_bCi_ + 1]}
    var
     table=
      [246,
       function(_bCd_)
        {var
          table=caml_call3(Table$4[4],0,[0,num_months],0),
          _bCf_=caml_obj_tag(all_strings);
         function _bCe_(i,s)
          {var t=of_int_exn$6(caml_call2(_ah_,i,1));
           caml_call3(set$0,table,s,t);
           caml_call3(set$0,table,caml_call1(_Hc_,s),t);
           return caml_call3(set$0,table,caml_call1(_Hd_,s),t)}
         var
          _bCg_=
           250 === _bCf_
            ?all_strings[1]
            :246 === _bCf_
              ?caml_call1(CamlinternalLazy[2],all_strings)
              :all_strings;
         caml_call2(iteri$0,_bCg_,_bCe_);
         return table}];
    function of_string$18(str)
     {var
       _bCb_=caml_obj_tag(table),
       _bCc_=
        250 === _bCb_
         ?table[1]
         :246 === _bCb_?caml_call1(CamlinternalLazy[2],table):table,
       match=caml_call2(find$3,_bCc_,str);
      if(match){var x=match[1];return x}
      return caml_call3(failwithf,_add_,str,0)}
    var Export$0=[0];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$286);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     _ade_=
      [0,
       [0,
        t_of_sexp$71,
        sexp_of_t$82,
        bin_t$73,
        bin_read_t$125,
        bin_read_t$126,
        bin_reader_t$73,
        bin_size_t$63,
        bin_write_t$64,
        bin_writer_t$73,
        bin_shape_t$82,
        compare$62,
        hash_fold_t$40,
        hash$31]],
     Core_kernel_Month=
      [0,
       bin_t$73,
       bin_read_t$125,
       bin_read_t$126,
       bin_reader_t$73,
       bin_size_t$63,
       bin_write_t$64,
       bin_writer_t$73,
       bin_shape_t$82,
       t_of_sexp$71,
       sexp_of_t$82,
       _acE_,
       _acF_,
       _acG_,
       _acH_,
       _acI_,
       _acJ_,
       _acK_,
       _acL_,
       _acM_,
       _acN_,
       _acO_,
       _acP_,
       _acQ_,
       _acR_,
       _acS_,
       _acT_,
       _acU_,
       _acV_,
       _acW_,
       _acX_,
       _acY_,
       _acZ_,
       hash_fold_t$41,
       hash$32,
       hashable$9,
       Table$11,
       Hash_set$11,
       Hash_queue$10,
       of_string$18,
       to_string$21,
       all$5,
       of_int$7,
       of_int_exn$6,
       to_int$6,
       shift$0,
       Export$0,
       _ade_];
    caml_register_global(7487,Core_kernel_Month,"Core_kernel__Month");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$287);
    caml_call1(Expect_test_collector[4][1],cst_src_month_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$288,cst$131);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$289);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Month_intf=[0];
    caml_register_global
     (7488,Core_kernel_Month_intf,"Core_kernel__Month_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$290);
    caml_call1(Expect_test_collector[4][1],cst_src_date0_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$291,cst$132);
    function is_leap_year(year)
     {var
       _bB__=0 === (year % 4 | 0)?1:0,
       _bB$_=_bB__?1 - (0 === (year % 100 | 0)?1:0):_bB__,
       _bCa_=_bB$_ || (0 === (year % 400 | 0)?1:0);
      return _bCa_}
    function hash$33(x){return hash_int(x)}
    var
     _adf_=
      caml_call1
       (Bin_shape_lib_Bin_shape[5][1],
        cst_899ee3e0_490a_11e6_a10a_a3734f733566),
     bin_shape_t$83=caml_call1(caml_call1(Bin_prot_Shape[16],_adf_),0);
    function create0(year,month,day)
     {return year << 16 | to_int$6(month) << 8 | day}
    function year(t){return t >>> 16 | 0}
    function month(t){return of_int_exn$6((t >>> 8 | 0) & 255)}
    function day(t){return t & 255}
    function create_exn(year,month,day)
     {function invalid(year,month,day,msg)
       {return caml_call6(_R6_,_adg_,year,to_string$21(month),day,msg,0)}
      var _bB8_=year < 0?1:0,_bB9_=_bB8_ || (9999 < year?1:0);
      if(_bB9_)invalid(year,month,day,cst_year_outside_of_0_9999);
      if(day <= 0)invalid(year,month,day,cst_day_0);
      switch(month)
       {case 1:
         if(is_leap_year(year))
          {if(29 < day)invalid(year,month,day,cst_29_day_month_violation)}
         else
          if(28 < day)invalid(year,month,day,cst_28_day_month_violation);
         break;
        case 3:
        case 5:
        case 8:
        case 10:
         if(30 < day)invalid(year,month,day,cst_30_day_month_violation);break;
        default:if(31 < day)invalid(year,month,day,cst_31_day_month_violation)}
      return create0(year,month,day)}
    function bin_read_t$127(buf,pos_ref)
     {var
       year=caml_call2(bin_read_t$74,buf,pos_ref),
       month=caml_call2(_ade_[1][4],buf,pos_ref),
       day=caml_call2(bin_read_t$74,buf,pos_ref);
      return create0(year,month,day)}
    function bin_read_t$128(buf,pos_ref)
     {return caml_call2(Bin_prot_Common[19],cst_Date_t,pos_ref[1])}
    var bin_reader_t$74=[0,bin_read_t$127,bin_read_t$128];
    function bin_size_t$64(t)
     {var
       _bB6_=caml_call1(bin_size_t$36,t & 255),
       _bB7_=caml_call1(bin_size_t$63,month(t));
      return (caml_call1(bin_size_t$36,t >>> 16 | 0) + _bB7_ | 0) + _bB6_ | 0}
    function bin_write_t$65(buf,pos,t)
     {var
       pos$0=caml_call3(bin_write_t$36,buf,pos,t >>> 16 | 0),
       pos$1=caml_call3(bin_write_t$64,buf,pos$0,month(t));
      return caml_call3(bin_write_t$36,buf,pos$1,t & 255)}
    var
     bin_writer_t$74=[0,bin_size_t$64,bin_write_t$65],
     bin_t$74=[0,bin_shape_t$83,bin_writer_t$74,bin_reader_t$74];
    function to_string$22(t)
     {var buf=caml_call1(create$13,10);
      write_4_digit_int$0(buf,0,t >>> 16 | 0);
      caml_call3(set$6,buf,4,45);
      write_2_digit_int$0(buf,5,to_int$6(month(t)));
      caml_call3(set$6,buf,7,45);
      write_2_digit_int$0(buf,8,t & 255);
      return caml_call1(unsafe_to_string,buf)}
    function to_string_iso8601_basic(t)
     {var buf=caml_call1(create$13,8);
      write_4_digit_int$0(buf,0,t >>> 16 | 0);
      write_2_digit_int$0(buf,4,to_int$6(month(t)));
      write_2_digit_int$0(buf,6,t & 255);
      return caml_call1(unsafe_to_string,buf)}
    function to_string_american(t)
     {var buf=caml_call1(create$13,10);
      write_2_digit_int$0(buf,0,to_int$6(month(t)));
      caml_call3(set$6,buf,2,47);
      write_2_digit_int$0(buf,3,t & 255);
      caml_call3(set$6,buf,5,47);
      write_4_digit_int$0(buf,6,t >>> 16 | 0);
      return caml_call1(unsafe_to_string,buf)}
    function parse_year4(str,pos){return read_4_digit_int$0(str,pos)}
    function parse_month(str,pos)
     {return of_int_exn$6(read_2_digit_int$0(str,pos))}
    function parse_day(str,pos){return read_2_digit_int$0(str,pos)}
    function of_string_iso8601_basic(str,pos)
     {if(caml_ml_string_length(str) < (pos + 8 | 0))
       caml_call1
        (invalid_arg,cst_Date_of_string_iso8601_basic_pos_8_string_length);
      var _bB4_=parse_day(str,pos + 6 | 0),_bB5_=parse_month(str,pos + 4 | 0);
      return create_exn(parse_year4(str,pos),_bB5_,_bB4_)}
    function _adh_(s)
     {function invalid(param)
       {return caml_call1(failwith,caml_call2(_Dw_,cst_invalid_date,s))}
      function ensure(b){var _bB3_=1 - b;return _bB3_?invalid(0):_bB3_}
      function month_num(year,month,day)
       {var _bB1_=parse_day(s,day),_bB2_=parse_month(s,month);
        return create_exn(parse_year4(s,year),_bB2_,_bB1_)}
      function month_abrv(year,month,day)
       {var
         _bBZ_=parse_day(s,day),
         _bB0_=of_string$18(caml_call3(_HE_,s,month,3));
        return create_exn(parse_year4(s,year),_bB0_,_bBZ_)}
      if(caml_call4(_He_,0,0,s,47))
       {var match=caml_call2(_GN_,s,47);
        if(match)
         {var _bBQ_=match[2];
          if(_bBQ_)
           {var _bBR_=_bBQ_[2];
            if(_bBR_)
             if(_bBR_[2])
              var switch$0=0;
             else
              {var c=_bBR_[1],b=_bBQ_[1],a=match[1];
               if(4 === caml_ml_string_length(a))
                var y=a,m=b,d=c,switch$0=1;
               else
                var y=c,m=a,d=b,switch$0=1}
            else
             var switch$0=0}
          else
           var switch$0=0}
        else
         var switch$0=0;
        if(! switch$0)var _bBS_=invalid(0),y=_bBS_[1],m=_bBS_[2],d=_bBS_[3];
        var
         year=caml_call1(_xz_,y),
         year$0=100 <= year?year:75 <= year?1900 + year | 0:2e3 + year | 0,
         month=of_int_exn$6(caml_call1(_xz_,m)),
         day=caml_call1(_xz_,d);
        return create_exn(year$0,month,day)}
      if(caml_call4(_He_,0,0,s,45))
       {var _bBT_=10 === caml_ml_string_length(s)?1:0;
        if(_bBT_)
         var
          _bBU_=45 === caml_string_get(s,4)?1:0,
          _bBV_=_bBU_?45 === caml_string_get(s,7)?1:0:_bBU_;
        else
         var _bBV_=_bBT_;
        ensure(_bBV_);
        return month_num(0,5,8)}
      if(caml_call4(_He_,0,0,s,32))
       {if(11 === caml_ml_string_length(s))
         if(32 === caml_string_get(s,2))
          if(32 === caml_string_get(s,6))return month_abrv(7,3,0);
        var _bBW_=11 === caml_ml_string_length(s)?1:0;
        if(_bBW_)
         var
          _bBX_=32 === caml_string_get(s,4)?1:0,
          _bBY_=_bBX_?32 === caml_string_get(s,8)?1:0:_bBX_;
        else
         var _bBY_=_bBW_;
        ensure(_bBY_);
        return month_abrv(0,5,9)}
      return 9 === caml_ml_string_length(s)
              ?month_abrv(5,2,0)
              :8 === caml_ml_string_length(s)?month_num(0,4,6):invalid(0)}
    function of_string$19(s)
     {try
       {var _bBP_=_adh_(s);return _bBP_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        return caml_call4(_R6_,_adi_,s,caml_call1(Base_Exn[9],exn),0)}}
    function _adj_(sexp)
     {if(0 === sexp[0]){var s=sexp[1];return of_string$19(s)}
      if(0 === sexp[0])
       var _bBO_=caml_call2(Sexplib0_Sexp_conv_error[15],tp_loc$31,sexp);
      else
       {var
         field_sexps=sexp[1],
         y_field=[0,0],
         m_field=[0,0],
         d_field=[0,0],
         duplicates=[0,0],
         extra=[0,0],
         param=field_sexps;
        for(;;)
         {if(param)
           {var _bBE_=param[1];
            if(1 === _bBE_[0])
             {var _bBF_=_bBE_[1];
              if(_bBF_)
               {var _bBG_=_bBF_[1];
                if(0 === _bBG_[0])
                 {var _bBH_=_bBF_[2],_bBI_=_bBG_[1];
                  if(! _bBH_)
                   {var tail$0=param[2];
                    if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_bBI_,extra[1]];
                    var param=tail$0;
                    continue}
                  if(! _bBH_[2])
                   {var tail=param[2],field_sexp=_bBH_[1];
                    if(caml_string_notequal(_bBI_,cst_d))
                     if(caml_string_notequal(_bBI_,cst_m))
                      if(caml_string_notequal(_bBI_,cst_y))
                       {if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_bBI_,extra[1]]}
                      else
                       if(y_field[1])
                        duplicates[1] = [0,_bBI_,duplicates[1]];
                       else
                        {var fvalue=caml_call1(t_of_sexp$32,field_sexp);
                         y_field[1] = [0,fvalue]}
                     else
                      if(m_field[1])
                       duplicates[1] = [0,_bBI_,duplicates[1]];
                      else
                       {var fvalue$0=caml_call1(t_of_sexp$32,field_sexp);
                        m_field[1] = [0,fvalue$0]}
                    else
                     if(d_field[1])
                      duplicates[1] = [0,_bBI_,duplicates[1]];
                     else
                      {var fvalue$1=caml_call1(t_of_sexp$32,field_sexp);
                       d_field[1] = [0,fvalue$1]}
                    var param=tail;
                    continue}}}}
            caml_call2(Sexplib0_Sexp_conv_error[9],tp_loc$31,_bBE_)}
          if(duplicates[1])
           var
            _bBO_=
             caml_call3
              (Sexplib0_Sexp_conv_error[11],tp_loc$31,duplicates[1],sexp);
          else
           if(extra[1])
            var
             _bBO_=
              caml_call3(Sexplib0_Sexp_conv_error[12],tp_loc$31,extra[1],sexp);
           else
            {var _bBJ_=y_field[1],_bBK_=m_field[1],_bBL_=d_field[1];
             if(_bBJ_)
              if(_bBK_)
               if(_bBL_)
                var
                 d_value=_bBL_[1],
                 m_value=_bBK_[1],
                 y_value=_bBJ_[1],
                 _bBO_=[0,y_value,m_value,d_value],
                 switch$0=1;
               else
                var switch$0=0;
              else
               var switch$0=0;
             else
              var switch$0=0;
             if(! switch$0)
              var
               _bBO_=
                caml_call3
                 (Sexplib0_Sexp_conv_error[14],
                  tp_loc$31,
                  sexp,
                  [0,
                   [0,0 === y_field[1]?1:0,cst_y$0],
                   [0,
                    [0,0 === m_field[1]?1:0,cst_m$0],
                    [0,[0,0 === d_field[1]?1:0,cst_d$0],0]]])}
          break}}
      var _bBM_=_bBO_[3],_bBN_=of_int_exn$6(_bBO_[2]);
      return create_exn(_bBO_[1],_bBN_,_bBM_)}
    function t_of_sexp$73(s)
     {try
       {var _bBD_=_adj_(s);return _bBD_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] === _Q2_)throw exn;
        if(exn[1] === Invalid_argument)
         {var a=exn[2];return caml_call2(_Q3_,a,s)}
        throw exn}}
    function sexp_of_t$83(t){return [0,to_string$22(t)]}
    function compare$63(t1,t2)
     {var n=caml_call2(compare$30,t1 >>> 16 | 0,t2 >>> 16 | 0);
      if(0 === n)
       {var _bBC_=month(t2),n$0=caml_call2(_acL_,month(t1),_bBC_);
        return 0 === n$0?caml_call2(compare$30,t1 & 255,t2 & 255):n$0}
      return n}
    var
     include$101=caml_call2(_gG_[1][1],compare$63,sexp_of_t$83),
     comparator$24=include$101[1],
     include$102=
      caml_call1
       (Stable$2[1][1],
        [0,
         bin_t$74,
         bin_read_t$127,
         bin_read_t$128,
         bin_reader_t$74,
         bin_size_t$64,
         bin_write_t$65,
         bin_writer_t$74,
         bin_shape_t$83,
         compare$63,
         t_of_sexp$73,
         sexp_of_t$83,
         comparator$24]),
     Map$17=include$102[1],
     Set$17=include$102[2],
     C$1=
      _td_
       ([0,
         bin_t$74,
         bin_read_t$127,
         bin_read_t$128,
         bin_reader_t$74,
         bin_size_t$64,
         bin_write_t$65,
         bin_writer_t$74,
         bin_shape_t$83,
         t_of_sexp$73,
         sexp_of_t$83,
         comparator$24]),
     _adk_=C$1[1],
     _adl_=C$1[2],
     _adm_=C$1[3],
     _adn_=C$1[4],
     _ado_=C$1[5],
     _adp_=C$1[6],
     equal$34=C$1[7],
     compare$64=C$1[8],
     min$15=C$1[9],
     max$15=C$1[10],
     ascending$14=C$1[11],
     descending$14=C$1[12],
     between$14=C$1[13],
     clamp_exn$14=C$1[14],
     clamp$14=C$1[15],
     validate_lbound$14=C$1[16],
     validate_ubound$14=C$1[17],
     validate_bound$14=C$1[18],
     Replace_polymorphic_compare$12=C$1[19],
     comparator$25=C$1[20],
     Map$18=C$1[21],
     Set$18=C$1[22],
     O$7=[0,C$1[1],C$1[2],C$1[3],C$1[4],C$1[5],C$1[6]];
    function compare$65(a,b){return caml_call2(compare$64,a,b)}
    var
     include$103=
      Make_binable
       ([0,
         hash_fold_t$15,
         bin_t$74,
         bin_read_t$127,
         bin_read_t$128,
         bin_reader_t$74,
         bin_size_t$64,
         bin_write_t$65,
         bin_writer_t$74,
         bin_shape_t$83,
         t_of_sexp$73,
         compare$65,
         sexp_of_t$83,
         hash$33]),
     hash_fold_t$42=include$103[1],
     hash$34=include$103[2],
     hashable$10=include$103[3],
     Table$12=include$103[4],
     Hash_set$12=include$103[5],
     Hash_queue$11=include$103[6],
     include$104=
      caml_call1(Base_Pretty_printer[2],[0,module_name$9,to_string$22]),
     _adq_=include$104[1],
     unix_epoch=create_exn(1970,0,1);
    function of_year(y)
     {var
       _bBz_=caml_call2(_wW_,y,400),
       _bBA_=caml_call2(_wW_,y,100),
       _bBB_=caml_call2(_wW_,y,4);
      return caml_call2
              (_w4_,
               caml_call2
                (_w3_,caml_call2(_w4_,caml_call2(_w2_,365,y),_bBB_),_bBA_),
               _bBz_)}
    function of_date(date)
     {var
       m=caml_call2(_wX_,caml_call2(_w4_,to_int$6(month(date)),9),12),
       y=caml_call2(_w3_,date >>> 16 | 0,caml_call2(_wW_,m,10)),
       _bBx_=caml_call2(_w3_,date & 255,1),
       _bBy_=caml_call2(_wW_,caml_call2(_w4_,caml_call2(_w2_,m,306),5),10);
      return caml_call2(_w4_,caml_call2(_w4_,of_year(y),_bBy_),_bBx_)}
    var
     c_10_000=caml_call1(of_int$1,1e4),
     c_14_780=caml_call1(of_int$1,14780),
     c_3_652_425=caml_call1(of_int$1,3652425);
    function to_date(days)
     {var
       y=
        caml_call1
         (to_int_exn$2,
          caml_call2
           (_z3_,
            caml_call2
             (_z$_,
              caml_call2(_z9_,c_10_000,caml_call1(of_int$1,days)),
              c_14_780),
            c_3_652_425)),
       ddd=caml_call2(_w3_,days,of_year(y));
      if(caml_call2(_xt_,ddd,0))
       var
        y$0=caml_call2(_w3_,y,1),
        y$1=y$0,
        ddd$0=caml_call2(_w3_,days,of_year(y$0));
      else
       var y$1=y,ddd$0=ddd;
      var
       mi=caml_call2(_wW_,caml_call2(_w4_,caml_call2(_w2_,100,ddd$0),52),3060),
       y$2=caml_call2(_w4_,y$1,caml_call2(_wW_,caml_call2(_w4_,mi,2),12)),
       m=caml_call2(_w4_,caml_call2(_wX_,caml_call2(_w4_,mi,2),12),1),
       d=
        caml_call2
         (_w4_,
          caml_call2
           (_w3_,
            ddd$0,
            caml_call2(_wW_,caml_call2(_w4_,caml_call2(_w2_,mi,306),5),10)),
          1);
      return create_exn(y$2,of_int_exn$6(m),d)}
    var unix_epoch$0=of_date(unix_epoch);
    function add_days(t,days){return caml_call2(_w4_,t,days)}
    function diff$4(t1,t2){return caml_call2(_w3_,t1,t2)}
    var Days=[0,of_date,to_date,diff$4,add_days,unix_epoch$0];
    function add_days$0(t,days)
     {var _bBv_=caml_call1(Days[1],t),_bBw_=caml_call2(Days[4],_bBv_,days);
      return caml_call1(Days[2],_bBw_)}
    function diff$5(t1,t2)
     {var _bBt_=caml_call1(Days[1],t2),_bBu_=caml_call1(Days[1],t1);
      return caml_call2(Days[3],_bBu_,_bBt_)}
    function add_months(t,n)
     {var
       total_months=to_int$6(month(t)) + n | 0,
       y=(t >>> 16 | 0) + caml_call2(_wY_,total_months,12) | 0,
       m=caml_call2(_wX_,total_months,12);
      if(caml_call2(_xv_,m,0))
       var y$0=y - 1 | 0,m$0=m + 12 | 0;
      else
       var y$0=y,m$0=m;
      var m$1=of_int_exn$6(m$0);
      function try_create(d)
       {var d$0=d;
        for(;;)
         try
          {var _bBr_=create_exn(y$0,m$1,d$0);return _bBr_}
         catch(_bBs_)
          {if(caml_call2(_xx_,d$0,1)){var d$1=d$0 - 1 | 0,d$0=d$1;continue}
           throw [0,Assert_failure,_adr_]}}
      return try_create(t & 255)}
    function add_years(t,n){return add_months(t,n * 12 | 0)}
    var table$0=_ads_.slice();
    function day_of_week(t)
     {var
       m=to_int$6(month(t)),
       y=caml_call2(_xt_,m,3)?(t >>> 16 | 0) - 1 | 0:t >>> 16 | 0,
       _bBq_=m - 1 | 0;
      return of_int_exn$5
              (caml_call2
                (_wX_,
                 ((((y + (y / 4 | 0) | 0) - (y / 100 | 0) | 0)
                   +
                   (y / 400 | 0)
                   |
                   0)
                  +
                  caml_check_bound(table$0,_bBq_)[_bBq_ + 1]
                  |
                  0)
                 +
                 (t & 255)
                 |
                 0,
                 7))}
    var non_leap_year_table=_adt_.slice(),leap_year_table=_adu_.slice();
    function ordinal_date(t)
     {var
       table=is_leap_year(t >>> 16 | 0)?leap_year_table:non_leap_year_table,
       _bBp_=to_int$6(month(t)) - 1 | 0,
       offset=caml_check_bound(table,_bBp_)[_bBp_ + 1];
      return (t & 255) + offset | 0}
    function last_week_of_year(y)
     {var first_of_year=create_exn(y,0,1);
      function is(t,day){return caml_call2(equal$33,day_of_week(t),day)}
      if(! is(first_of_year,4))
       {var switch$0=is_leap_year(y)?is(first_of_year,3)?0:1:1;
        if(switch$0)return 52}
      return 53}
    function week_number(t)
     {var
       ordinal=ordinal_date(t),
       weekday=iso_8601_weekday_number(day_of_week(t)),
       week=((ordinal - weekday | 0) + 10 | 0) / 7 | 0,
       year=t >>> 16 | 0;
      return caml_call2(_xt_,week,1)
              ?last_week_of_year(year - 1 | 0)
              :caml_call2(_xu_,week,last_week_of_year(year))?1:week}
    function _adv_(param)
     {function _bBf_(param)
       {var got=ordinal_date(create_exn(2014,0,1));
        return caml_call8
                (Ppx_assert_lib_Runtime[3],
                 pos$71,
                 sexp_of_t$43,
                 compare$30,
                 0,
                 0,
                 0,
                 1,
                 got)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_result_int_ordinal_date_create_e,
        0,
        cst_src_date0_ml$0,
        442,
        4,
        99,
        _bBf_);
      function _bBg_(param)
       {var got=ordinal_date(create_exn(2014,11,31));
        return caml_call8
                (Ppx_assert_lib_Runtime[3],
                 pos$72,
                 sexp_of_t$43,
                 compare$30,
                 0,
                 0,
                 0,
                 365,
                 got)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_result_int_ordinal_date_create_e$0,
        0,
        cst_src_date0_ml$1,
        443,
        4,
        102,
        _bBg_);
      function _bBh_(param)
       {var got=ordinal_date(create_exn(2014,1,28));
        return caml_call8
                (Ppx_assert_lib_Runtime[3],
                 pos$73,
                 sexp_of_t$43,
                 compare$30,
                 0,
                 0,
                 0,
                 59,
                 got)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_result_int_ordinal_date_create_e$1,
        0,
        cst_src_date0_ml$2,
        444,
        4,
        101,
        _bBh_);
      function test_week_number(y,m,d,expect)
       {var got=week_number(create_exn(y,m,d));
        return caml_call8
                (Ppx_assert_lib_Runtime[3],
                 pos$74,
                 sexp_of_t$43,
                 compare$30,
                 0,
                 0,
                 0,
                 expect,
                 got)}
      function _bBi_(param){return test_week_number(2014,0,1,1)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_week_number_2014_Jan_1_expect_1,
        0,
        cst_src_date0_ml$3,
        449,
        4,
        60,
        _bBi_);
      function _bBj_(param){return test_week_number(2014,11,31,1)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_week_number_2014_Dec_31_expect_1,
        0,
        cst_src_date0_ml$4,
        450,
        4,
        60,
        _bBj_);
      function _bBk_(param){return test_week_number(2010,0,1,53)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_week_number_2010_Jan_1_expect_53,
        0,
        cst_src_date0_ml$5,
        451,
        4,
        61,
        _bBk_);
      function _bBl_(param){return test_week_number(2017,0,1,52)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_week_number_2017_Jan_1_expect_52,
        0,
        cst_src_date0_ml$6,
        452,
        4,
        61,
        _bBl_);
      function _bBm_(param){return test_week_number(2014,0,10,2)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_week_number_2014_Jan_10_expect_2,
        0,
        cst_src_date0_ml$7,
        453,
        4,
        60,
        _bBm_);
      function _bBn_(param){return test_week_number(2012,0,1,52)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_week_number_2012_Jan_1_expect_52,
        0,
        cst_src_date0_ml$8,
        454,
        4,
        61,
        _bBn_);
      function _bBo_(param){return test_week_number(2012,11,31,1)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_week_number_2012_Dec_31_expect_1,
        0,
        cst_src_date0_ml$9,
        455,
        4,
        60,
        _bBo_);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst_week_number,
      0,
      cst_src_date0_ml$10,
      440,
      0,
      902,
      _adv_);
    function is_weekend(t){return is_sun_or_sat(day_of_week(t))}
    function is_weekday(t){return 1 - is_weekend(t)}
    function is_business_day(t,is_holiday)
     {var _bBd_=is_weekday(t),_bBe_=_bBd_?1 - caml_call1(is_holiday,t):_bBd_;
      return _bBe_}
    function diff_weekend_days(t1,t2)
     {if(caml_call2(_ado_,t1,t2))return - diff_weekend_days(t2,t1) | 0;
      var
       diff=diff$5(t1,t2),
       d1=day_of_week(t1),
       d2=day_of_week(t2),
       _bBa_=to_int$5(d2),
       num_satsun_crossings=
        caml_call2(_xt_,to_int$5(d1),_bBa_)
         ?1 + (diff / 7 | 0) | 0
         :diff / 7 | 0,
       _bBb_=caml_call2(_ab3_,d1,0)?-1:0,
       _bBc_=caml_call2(_ab3_,d2,0)?1:0;
      return ((num_satsun_crossings * 2 | 0) + _bBc_ | 0) + _bBb_ | 0}
    function diff_weekdays(t1,t2)
     {var _bA$_=diff_weekend_days(t1,t2);return diff$5(t1,t2) - _bA$_ | 0}
    function _adw_(param)
     {function c(y,m,d){return create_exn(y,m,d)}
      function _bz2_(param)
       {return caml_call2(_ab3_,day_of_week(c(2014,0,1)),3)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_2014_Jan_1_is_a_Wednesday,
        0,
        cst_src_date0_ml$11,
        494,
        4,
        103,
        _bz2_);
      function _bz3_(param)
       {var _bA__=c(2014,0,1);
        return caml_call2(_xv_,diff_weekdays(c(2014,0,1),_bA__),0)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_diff_weekdays_c_2014_Jan_1_c_2014_Jan_1_0,
        0,
        cst_src_date0_ml$12,
        498,
        4,
        66,
        _bz3_);
      function _bz4_(param)
       {var _bA9_=c(2014,0,1);
        return caml_call2(_xv_,diff_weekdays(c(2014,0,2),_bA9_),1)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_diff_weekdays_c_2014_Jan_2_c_2014_Jan_1_1,
        0,
        cst_src_date0_ml$13,
        499,
        4,
        66,
        _bz4_);
      function _bz5_(param)
       {var _bA8_=c(2014,0,1);
        return caml_call2(_xv_,diff_weekdays(c(2014,0,3),_bA8_),2)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_diff_weekdays_c_2014_Jan_3_c_2014_Jan_1_2,
        0,
        cst_src_date0_ml$14,
        500,
        4,
        66,
        _bz5_);
      function _bz6_(param)
       {var _bA7_=c(2014,0,1);
        return caml_call2(_xv_,diff_weekdays(c(2014,0,4),_bA7_),3)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_diff_weekdays_c_2014_Jan_4_c_2014_Jan_1_3,
        0,
        cst_src_date0_ml$15,
        501,
        4,
        66,
        _bz6_);
      function _bz7_(param)
       {var _bA6_=c(2014,0,1);
        return caml_call2(_xv_,diff_weekdays(c(2014,0,5),_bA6_),3)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_diff_weekdays_c_2014_Jan_5_c_2014_Jan_1_3,
        0,
        cst_src_date0_ml$16,
        502,
        4,
        66,
        _bz7_);
      function _bz8_(param)
       {var _bA5_=c(2014,0,1);
        return caml_call2(_xv_,diff_weekdays(c(2014,0,6),_bA5_),3)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_diff_weekdays_c_2014_Jan_6_c_2014_Jan_1_3,
        0,
        cst_src_date0_ml$17,
        503,
        4,
        66,
        _bz8_);
      function _bz9_(param)
       {var _bA4_=c(2014,0,1);
        return caml_call2(_xv_,diff_weekdays(c(2014,0,7),_bA4_),4)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_diff_weekdays_c_2014_Jan_7_c_2014_Jan_1_4,
        0,
        cst_src_date0_ml$18,
        504,
        4,
        66,
        _bz9_);
      function _bz__(param)
       {var _bA3_=c(2014,0,1);
        return caml_call2(_xv_,diff_weekdays(c(2014,0,8),_bA3_),5)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_diff_weekdays_c_2014_Jan_8_c_2014_Jan_1_5,
        0,
        cst_src_date0_ml$19,
        505,
        4,
        66,
        _bz__);
      function _bz$_(param)
       {var _bA2_=c(2014,0,1);
        return caml_call2(_xv_,diff_weekdays(c(2014,0,9),_bA2_),6)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_diff_weekdays_c_2014_Jan_9_c_2014_Jan_1_6,
        0,
        cst_src_date0_ml$20,
        506,
        4,
        66,
        _bz$_);
      function _bAa_(param)
       {var _bA1_=c(2014,0,1);
        return caml_call2(_xv_,diff_weekdays(c(2014,0,10),_bA1_),7)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_diff_weekdays_c_2014_Jan_10_c_2014_Jan_1,
        0,
        cst_src_date0_ml$21,
        507,
        4,
        66,
        _bAa_);
      function _bAb_(param)
       {var _bA0_=c(2014,0,1);
        return caml_call2(_xv_,diff_weekdays(c(2014,0,11),_bA0_),8)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_diff_weekdays_c_2014_Jan_11_c_2014_Jan_1,
        0,
        cst_src_date0_ml$22,
        508,
        4,
        66,
        _bAb_);
      function _bAc_(param)
       {var _bAZ_=c(2014,0,1);
        return caml_call2(_xv_,diff_weekdays(c(2014,0,12),_bAZ_),8)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_diff_weekdays_c_2014_Jan_12_c_2014_Jan_1,
        0,
        cst_src_date0_ml$23,
        509,
        4,
        66,
        _bAc_);
      function _bAd_(param)
       {var _bAY_=c(2014,0,1);
        return caml_call2(_xv_,diff_weekdays(c(2014,0,13),_bAY_),8)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_diff_weekdays_c_2014_Jan_13_c_2014_Jan_1,
        0,
        cst_src_date0_ml$24,
        510,
        4,
        66,
        _bAd_);
      function _bAe_(param)
       {var _bAX_=c(2014,0,1);
        return caml_call2(_xv_,diff_weekdays(c(2014,0,14),_bAX_),9)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_diff_weekdays_c_2014_Jan_14_c_2014_Jan_1,
        0,
        cst_src_date0_ml$25,
        511,
        4,
        66,
        _bAe_);
      function _bAf_(param)
       {var _bAW_=c(2014,0,2);
        return caml_call2(_xv_,diff_weekdays(c(2014,0,1),_bAW_),-1)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_diff_weekdays_c_2014_Jan_1_c_2014_Jan_2,
        0,
        cst_src_date0_ml$26,
        514,
        4,
        69,
        _bAf_);
      function _bAg_(param)
       {var _bAV_=c(2014,0,3);
        return caml_call2(_xv_,diff_weekdays(c(2014,0,1),_bAV_),-2)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_diff_weekdays_c_2014_Jan_1_c_2014_Jan_3,
        0,
        cst_src_date0_ml$27,
        515,
        4,
        69,
        _bAg_);
      function _bAh_(param)
       {var _bAU_=c(2014,0,4);
        return caml_call2(_xv_,diff_weekdays(c(2014,0,1),_bAU_),-3)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_diff_weekdays_c_2014_Jan_1_c_2014_Jan_4,
        0,
        cst_src_date0_ml$28,
        516,
        4,
        69,
        _bAh_);
      function _bAi_(param)
       {var _bAT_=c(2014,0,5);
        return caml_call2(_xv_,diff_weekdays(c(2014,0,1),_bAT_),-3)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_diff_weekdays_c_2014_Jan_1_c_2014_Jan_5,
        0,
        cst_src_date0_ml$29,
        517,
        4,
        69,
        _bAi_);
      function _bAj_(param)
       {var _bAS_=c(2014,0,6);
        return caml_call2(_xv_,diff_weekdays(c(2014,0,1),_bAS_),-3)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_diff_weekdays_c_2014_Jan_1_c_2014_Jan_6,
        0,
        cst_src_date0_ml$30,
        518,
        4,
        69,
        _bAj_);
      function _bAk_(param)
       {var _bAR_=c(2014,0,7);
        return caml_call2(_xv_,diff_weekdays(c(2014,0,1),_bAR_),-4)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_diff_weekdays_c_2014_Jan_1_c_2014_Jan_7,
        0,
        cst_src_date0_ml$31,
        519,
        4,
        69,
        _bAk_);
      function _bAl_(param)
       {var _bAQ_=c(2014,0,8);
        return caml_call2(_xv_,diff_weekdays(c(2014,0,1),_bAQ_),-5)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_diff_weekdays_c_2014_Jan_1_c_2014_Jan_8,
        0,
        cst_src_date0_ml$32,
        520,
        4,
        69,
        _bAl_);
      function _bAm_(param)
       {var _bAP_=c(2014,0,9);
        return caml_call2(_xv_,diff_weekdays(c(2014,0,1),_bAP_),-6)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_diff_weekdays_c_2014_Jan_1_c_2014_Jan_9,
        0,
        cst_src_date0_ml$33,
        521,
        4,
        69,
        _bAm_);
      function _bAn_(param)
       {var _bAO_=c(2014,0,1);
        return caml_call2(_xv_,diff_weekend_days(c(2014,0,1),_bAO_),0)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_diff_weekend_days_c_2014_Jan_1_c_2014_Jan,
        0,
        cst_src_date0_ml$34,
        524,
        4,
        70,
        _bAn_);
      function _bAo_(param)
       {var _bAN_=c(2014,0,1);
        return caml_call2(_xv_,diff_weekend_days(c(2014,0,2),_bAN_),0)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_diff_weekend_days_c_2014_Jan_2_c_2014_Jan,
        0,
        cst_src_date0_ml$35,
        525,
        4,
        70,
        _bAo_);
      function _bAp_(param)
       {var _bAM_=c(2014,0,1);
        return caml_call2(_xv_,diff_weekend_days(c(2014,0,3),_bAM_),0)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_diff_weekend_days_c_2014_Jan_3_c_2014_Jan,
        0,
        cst_src_date0_ml$36,
        526,
        4,
        70,
        _bAp_);
      function _bAq_(param)
       {var _bAL_=c(2014,0,1);
        return caml_call2(_xv_,diff_weekend_days(c(2014,0,4),_bAL_),0)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_diff_weekend_days_c_2014_Jan_4_c_2014_Jan,
        0,
        cst_src_date0_ml$37,
        527,
        4,
        70,
        _bAq_);
      function _bAr_(param)
       {var _bAK_=c(2014,0,1);
        return caml_call2(_xv_,diff_weekend_days(c(2014,0,5),_bAK_),1)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_diff_weekend_days_c_2014_Jan_5_c_2014_Jan,
        0,
        cst_src_date0_ml$38,
        528,
        4,
        70,
        _bAr_);
      function _bAs_(param)
       {var _bAJ_=c(2014,0,1);
        return caml_call2(_xv_,diff_weekend_days(c(2014,0,6),_bAJ_),2)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_diff_weekend_days_c_2014_Jan_6_c_2014_Jan,
        0,
        cst_src_date0_ml$39,
        529,
        4,
        70,
        _bAs_);
      function _bAt_(param)
       {var _bAI_=c(2014,0,1);
        return caml_call2(_xv_,diff_weekend_days(c(2014,0,7),_bAI_),2)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_diff_weekend_days_c_2014_Jan_7_c_2014_Jan,
        0,
        cst_src_date0_ml$40,
        530,
        4,
        70,
        _bAt_);
      function _bAu_(param)
       {var _bAH_=c(2014,0,1);
        return caml_call2(_xv_,diff_weekend_days(c(2014,0,8),_bAH_),2)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_diff_weekend_days_c_2014_Jan_8_c_2014_Jan,
        0,
        cst_src_date0_ml$41,
        531,
        4,
        70,
        _bAu_);
      function _bAv_(param)
       {var _bAG_=c(2014,0,1);
        return caml_call2(_xv_,diff_weekend_days(c(2014,0,9),_bAG_),2)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_diff_weekend_days_c_2014_Jan_9_c_2014_Jan,
        0,
        cst_src_date0_ml$42,
        532,
        4,
        70,
        _bAv_);
      function _bAw_(param)
       {var _bAF_=c(2014,0,1);
        return caml_call2(_xv_,diff_weekend_days(c(2014,0,10),_bAF_),2)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_diff_weekend_days_c_2014_Jan_10_c_2014_Ja,
        0,
        cst_src_date0_ml$43,
        533,
        4,
        70,
        _bAw_);
      function _bAx_(param)
       {var _bAE_=c(2014,0,1);
        return caml_call2(_xv_,diff_weekend_days(c(2014,0,11),_bAE_),2)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_diff_weekend_days_c_2014_Jan_11_c_2014_Ja,
        0,
        cst_src_date0_ml$44,
        534,
        4,
        70,
        _bAx_);
      function _bAy_(param)
       {var _bAD_=c(2014,0,1);
        return caml_call2(_xv_,diff_weekend_days(c(2014,0,12),_bAD_),3)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_diff_weekend_days_c_2014_Jan_12_c_2014_Ja,
        0,
        cst_src_date0_ml$45,
        535,
        4,
        70,
        _bAy_);
      function _bAz_(param)
       {var _bAC_=c(2014,0,1);
        return caml_call2(_xv_,diff_weekend_days(c(2014,0,13),_bAC_),4)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_diff_weekend_days_c_2014_Jan_13_c_2014_Ja,
        0,
        cst_src_date0_ml$46,
        536,
        4,
        70,
        _bAz_);
      function _bAA_(param)
       {var _bAB_=c(2014,0,1);
        return caml_call2(_xv_,diff_weekend_days(c(2014,0,14),_bAB_),4)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_diff_weekend_days_c_2014_Jan_14_c_2014_Ja,
        0,
        cst_src_date0_ml$47,
        537,
        4,
        70,
        _bAA_);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst_diff_weekdays,
      0,
      cst_src_date0_ml$48,
      490,
      0,
      2810,
      _adw_);
    function add_days_skipping(t,skip,n)
     {var step=caml_call2(_xx_,n,0)?1:-1,k$1=caml_call1(abs$3,n),t$0=t,k=k$1;
      for(;;)
       {var t$1=add_days$0(t$0,step);
        if(caml_call1(skip,t$0)){var t$0=t$1;continue}
        if(caml_call2(_xv_,k,0))return t$0;
        var k$0=k - 1 | 0,t$0=t$1,k=k$0;
        continue}}
    function add_weekdays(t,n){return add_days_skipping(t,is_weekend,n)}
    function add_business_days(t,is_holiday,n)
     {return add_days_skipping
              (t,
               function(d)
                {var _bz1_=is_weekend(d);
                 return _bz1_?_bz1_:caml_call1(is_holiday,d)},
               n)}
    function dates_between(t1,t)
     {var t$0=t,l=0;
      for(;;)
       {if(caml_call2(_ado_,t$0,t1))return l;
        var l$0=[0,t$0,l],t$1=add_days$0(t$0,-1),t$0=t$1,l=l$0;
        continue}}
    function _adx_(param)
     {function check_table(year,ordinal_date_table)
       {var
         _bzY_=create_exn(year,11,31),
         days_of_year=dates_between(create_exn(year,0,1),_bzY_),
         got=caml_call1(length$4,days_of_year),
         _bzZ_=is_leap_year(year)?366:365;
        caml_call8
         (Ppx_assert_lib_Runtime[3],
          pos$75,
          sexp_of_t$43,
          compare$30,
          0,
          0,
          0,
          _bzZ_,
          got);
        var
         months=
          caml_call2
           (group$34,
            days_of_year,
            function(d$0,d)
             {var _bz0_=month(d);return caml_call2(_acJ_,month(d$0),_bz0_)}),
         got$0=
          caml_call3
           (foldi$1,
            months,
            0,
            function(index,sum,month)
             {var
               expect=
                caml_check_bound(ordinal_date_table,index)[index + 1];
              caml_call8
               (Ppx_assert_lib_Runtime[3],
                pos$76,
                sexp_of_t$43,
                compare$30,
                0,
                0,
                0,
                expect,
                sum);
              return sum + caml_call1(length$4,month) | 0}),
         expect=caml_call1(length$4,days_of_year);
        return caml_call8
                (Ppx_assert_lib_Runtime[3],
                 pos$77,
                 sexp_of_t$43,
                 compare$30,
                 0,
                 0,
                 0,
                 expect,
                 got$0)}
      function _bzW_(param){return check_table(2015,non_leap_year_table)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_check_table_2015_non_leap_year_table,
        0,
        cst_src_date0_ml$49,
        584,
        4,
        58,
        _bzW_);
      function _bzX_(param){return check_table(2e3,leap_year_table)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_check_table_2000_leap_year_table,
        0,
        cst_src_date0_ml$50,
        585,
        4,
        54,
        _bzX_);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst_ordinal_date,
      0,
      cst_src_date0_ml$51,
      565,
      0,
      913,
      _adx_);
    function weekdays_between(min,max)
     {var all_dates=dates_between(min,max);
      function _bzV_(first_date)
       {var
         first_weekday=day_of_week(first_date),
         date_and_weekdays=
          caml_call2
           (mapi$1,
            all_dates,
            function(i,date){return [0,date,shift(first_weekday,i)]});
        return caml_call2
                (filter_map$2,
                 date_and_weekdays,
                 function(param)
                  {var weekday=param[2],date=param[1];
                   return is_sun_or_sat(weekday)?0:[0,date]})}
      return caml_call3(value_map$0,caml_call1(hd$0,all_dates),0,_bzV_)}
    function _ady_(param)
     {function c(y,m,d){return create_exn(y,m,d)}
      var
       _bzF_=[0,c(2014,1,21),0],
       _bzG_=[0,c(2014,1,20),_bzF_],
       _bzH_=[0,c(2014,1,19),_bzG_],
       _bzI_=[0,c(2014,1,18),_bzH_],
       _bzJ_=[0,c(2014,1,17),_bzI_],
       _bzK_=[0,c(2014,1,16),_bzJ_],
       _bzL_=[0,c(2014,1,15),_bzK_],
       _bzM_=[0,c(2014,0,7),_bzL_],
       _bzN_=[0,c(2014,0,6),_bzM_],
       _bzO_=[0,c(2014,0,5),_bzN_],
       _bzP_=[0,c(2014,0,4),_bzO_],
       _bzQ_=[0,c(2014,0,3),_bzP_],
       _bzR_=[0,c(2014,0,2),_bzQ_],
       dates=[0,c(2014,0,1),_bzR_];
      function _bzS_(param)
       {return caml_call2
                (iter$2,
                 dates,
                 function(date1)
                  {return caml_call2
                           (iter$2,
                            dates,
                            function(date2)
                             {var _bzT_=caml_call2(_adl_,date1,date2);
                              if(_bzT_)
                               {var _bzU_=diff_weekdays(date2,date1);
                                if
                                 (caml_call2
                                   (_xv_,
                                    caml_call1
                                     (length$4,weekdays_between(date1,add_days$0(date2,-1))),
                                    _bzU_))
                                 return 0;
                                throw [0,Assert_failure,_adz_]}
                              return _bzT_})})}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_List_iter_dates_f_fun_date1_Li,
        0,
        cst_src_date0_ml$52,
        630,
        4,
        285,
        _bzS_);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst_weekdays_between,
      0,
      cst_src_date0_ml$53,
      609,
      0,
      818,
      _ady_);
    function business_dates_between(min,max,is_holiday)
     {function _bzE_(d){return 1 - caml_call1(is_holiday,d)}
      return caml_call2(filter$2,weekdays_between(min,max),_bzE_)}
    function previous_weekday(t)
     {var t$0=t;
      for(;;)
       {var t$1=add_days$0(t$0,-1);
        if(is_weekday(t$1))return t$1;
        var t$0=t$1;
        continue}}
    function following_weekday(t)
     {var t$0=t;
      for(;;)
       {var t$1=add_days$0(t$0,1);
        if(is_weekday(t$1))return t$1;
        var t$0=t$1;
        continue}}
    function first_strictly_after(t,dow)
     {var
       dow$0=to_int$5(dow),
       tplus1=add_days$0(t,1),
       cur=to_int$5(day_of_week(tplus1)),
       diff=((dow$0 + 7 | 0) - cur | 0) % 7 | 0;
      return add_days$0(tplus1,diff)}
    function _adA_(param)
     {var
       mon1=create_exn(2013,3,1),
       tue1=create_exn(2013,3,2),
       wed1=create_exn(2013,3,3),
       thu1=create_exn(2013,3,4),
       fri1=create_exn(2013,3,5),
       sat1=create_exn(2013,3,6),
       sun1=create_exn(2013,3,7),
       mon2=create_exn(2013,3,8),
       tue2=create_exn(2013,3,9);
      function _bzq_(param)
       {return caml_call2(equal$34,first_strictly_after(tue1,1),mon2)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_equal_first_strictly_after_tue1_on_Day_of_w,
        0,
        cst_src_date0_ml$54,
        681,
        4,
        75,
        _bzq_);
      function _bzr_(param)
       {return caml_call2(equal$34,first_strictly_after(tue1,2),tue2)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_equal_first_strictly_after_tue1_on_Day_of_w$0,
        0,
        cst_src_date0_ml$55,
        682,
        4,
        75,
        _bzr_);
      function _bzs_(param)
       {return caml_call2(equal$34,first_strictly_after(tue1,3),wed1)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_equal_first_strictly_after_tue1_on_Day_of_w$1,
        0,
        cst_src_date0_ml$56,
        683,
        4,
        75,
        _bzs_);
      function _bzt_(param)
       {return caml_call2(equal$34,first_strictly_after(tue1,4),thu1)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_equal_first_strictly_after_tue1_on_Day_of_w$2,
        0,
        cst_src_date0_ml$57,
        684,
        4,
        75,
        _bzt_);
      function _bzu_(param)
       {return caml_call2(equal$34,first_strictly_after(tue1,5),fri1)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_equal_first_strictly_after_tue1_on_Day_of_w$3,
        0,
        cst_src_date0_ml$58,
        685,
        4,
        75,
        _bzu_);
      function _bzv_(param)
       {return caml_call2(equal$34,first_strictly_after(tue1,6),sat1)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_equal_first_strictly_after_tue1_on_Day_of_w$4,
        0,
        cst_src_date0_ml$59,
        686,
        4,
        75,
        _bzv_);
      function _bzw_(param)
       {return caml_call2(equal$34,first_strictly_after(tue1,0),sun1)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_equal_first_strictly_after_tue1_on_Day_of_w$5,
        0,
        cst_src_date0_ml$60,
        687,
        4,
        75,
        _bzw_);
      function _bzx_(param)
       {return caml_call2(equal$34,first_strictly_after(mon1,1),mon2)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_equal_first_strictly_after_mon1_on_Day_of_w,
        0,
        cst_src_date0_ml$61,
        688,
        4,
        75,
        _bzx_);
      function _bzy_(param)
       {return caml_call2(equal$34,first_strictly_after(mon1,2),tue1)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_equal_first_strictly_after_mon1_on_Day_of_w$0,
        0,
        cst_src_date0_ml$62,
        689,
        4,
        75,
        _bzy_);
      function _bzz_(param)
       {return caml_call2(equal$34,first_strictly_after(mon1,3),wed1)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_equal_first_strictly_after_mon1_on_Day_of_w$1,
        0,
        cst_src_date0_ml$63,
        690,
        4,
        75,
        _bzz_);
      function _bzA_(param)
       {return caml_call2(equal$34,first_strictly_after(mon1,4),thu1)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_equal_first_strictly_after_mon1_on_Day_of_w$2,
        0,
        cst_src_date0_ml$64,
        691,
        4,
        75,
        _bzA_);
      function _bzB_(param)
       {return caml_call2(equal$34,first_strictly_after(mon1,5),fri1)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_equal_first_strictly_after_mon1_on_Day_of_w$3,
        0,
        cst_src_date0_ml$65,
        692,
        4,
        75,
        _bzB_);
      function _bzC_(param)
       {return caml_call2(equal$34,first_strictly_after(mon1,6),sat1)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_equal_first_strictly_after_mon1_on_Day_of_w$4,
        0,
        cst_src_date0_ml$66,
        693,
        4,
        75,
        _bzC_);
      function _bzD_(param)
       {return caml_call2(equal$34,first_strictly_after(mon1,0),sun1)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_equal_first_strictly_after_mon1_on_Day_of_w$5,
        0,
        cst_src_date0_ml$67,
        694,
        4,
        75,
        _bzD_);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst_first_strictly_after,
      0,
      cst_src_date0_ml$68,
      669,
      0,
      1596,
      _adA_);
    function gen_uniform_incl$0(d1,d2)
     {if(caml_call2(_adn_,d1,d2))
       {var
         _bzm_=[0,[1,[0,_adB_,[0,sexp_of_t$83(d2),0]]],0],
         _bzn_=[0,[1,[0,_adC_,[0,sexp_of_t$83(d1),0]]],_bzm_];
        caml_call1
         (_kM_,
          [1,
           [0,
            caml_call1
             (Sexplib0_Sexp_conv[7],
              cst_Date_gen_uniform_incl_bounds_are_crossed),
            _bzn_]])}
      function _bzo_(days){return add_days$0(d1,days)}
      var _bzp_=caml_call2(_xJ_,0,diff$5(d2,d1));
      return caml_call2(_nQ_[12],_bzp_,_bzo_)}
    function gen_incl$1(d1,d2)
     {var
       _bzj_=[0,[0,18,gen_uniform_incl$0(d1,d2)],0],
       _bzk_=[0,[0,1,caml_call1(_nQ_[10],d2)],_bzj_],
       _bzl_=[0,[0,1,caml_call1(_nQ_[10],d1)],_bzk_];
      return caml_call1(_nQ_[66],_bzl_)}
    var
     _adD_=of_string$19(cst_2100_01_01),
     gen$16=gen_incl$1(of_string$19(cst_1900_01_01),_adD_);
    function _adE_(t,param,hash){return caml_call2(hash_fold_t$42,hash,t)}
    var obs$14=caml_call1(_nP_[1],_adE_),shrinker$14=caml_call1(_nO_[3],0);
    function _adF_(param)
     {return caml_call6
              (_nM_,
               0,
               0,
               0,
               [0,sexp_of_t$83],
               gen$16,
               function(t)
                {return caml_call2(_adm_,t,of_string$19(cst_1900_01_01$0))})}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_test_can_generate_gen_sexp_of_sexp_of_t_f,
      0,
      cst_src_date0_ml$69,
      723,
      2,
      111,
      _adF_);
    function _adG_(param)
     {return caml_call6
              (_nM_,
               0,
               0,
               0,
               [0,sexp_of_t$83],
               gen$16,
               function(t)
                {return caml_call2(_adm_,t,of_string$19(cst_2100_01_01$0))})}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_test_can_generate_gen_sexp_of_sexp_of_t_f$0,
      0,
      cst_src_date0_ml$70,
      727,
      2,
      111,
      _adG_);
    function _adH_(param)
     {return caml_call6
              (_nM_,
               0,
               0,
               0,
               [0,sexp_of_t$83],
               gen$16,
               function(t)
                {var _bzi_=caml_call2(_ado_,of_string$19(cst_1900_01_01$1),t);
                 return _bzi_
                         ?caml_call2(_ado_,t,of_string$19(cst_2100_01_01$1))
                         :_bzi_})}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_test_can_generate_gen_sexp_of_sexp_of_t_f$1,
      0,
      cst_src_date0_ml$71,
      731,
      2,
      141,
      _adH_);
    function _adI_(param)
     {return caml_call7(_nL_,0,0,[0,sexp_of_t$83],gen$16,1e3,500,compare$64)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_test_distinct_values_gen_sexp_of_sexp_of_t,
      0,
      cst_src_date0_ml$72,
      735,
      2,
      135,
      _adI_);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$292);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Stable$5=
      [0,
       [0,
        hash_fold_t$15,
        hash$33,
        bin_t$74,
        bin_read_t$127,
        bin_read_t$128,
        bin_reader_t$74,
        bin_size_t$64,
        bin_write_t$65,
        bin_writer_t$74,
        bin_shape_t$83,
        compare$63,
        t_of_sexp$73,
        sexp_of_t$83,
        comparator$24,
        Map$17,
        Set$17]],
     include$105=
      [0,
       bin_t$74,
       bin_read_t$127,
       bin_read_t$128,
       bin_reader_t$74,
       bin_size_t$64,
       bin_write_t$65,
       bin_writer_t$74,
       bin_shape_t$83,
       t_of_sexp$73,
       sexp_of_t$83,
       hash_fold_t$42,
       hash$34,
       hashable$10,
       Table$12,
       Hash_set$12,
       Hash_queue$11,
       of_string$19,
       to_string$22,
       _adk_,
       _adl_,
       _adm_,
       _adn_,
       _ado_,
       _adp_,
       equal$34,
       compare$64,
       min$15,
       max$15,
       ascending$14,
       descending$14,
       between$14,
       clamp_exn$14,
       clamp$14,
       validate_lbound$14,
       validate_ubound$14,
       validate_bound$14,
       Replace_polymorphic_compare$12,
       comparator$25,
       Map$18,
       Set$18,
       _adq_,
       create_exn,
       of_string_iso8601_basic,
       to_string_iso8601_basic,
       to_string_american,
       day,
       month,
       year,
       day_of_week,
       week_number,
       is_weekend,
       is_weekday,
       is_business_day,
       add_days$0,
       add_months,
       add_years,
       diff$5,
       diff_weekdays,
       diff_weekend_days,
       add_weekdays,
       add_business_days,
       add_days_skipping,
       dates_between,
       business_dates_between,
       weekdays_between,
       previous_weekday,
       following_weekday,
       first_strictly_after,
       is_leap_year,
       unix_epoch,
       gen$16,
       obs$14,
       shrinker$14,
       gen_incl$1,
       gen_uniform_incl$0,
       Days,
       Stable$5,
       O$7];
    caml_register_global(7489,include$105,"Core_kernel__Date0");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$293);
    caml_call1(Expect_test_collector[4][1],cst_src_date0_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$294,cst$133);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$295);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Date0_intf=[0];
    caml_register_global
     (7490,Core_kernel_Date0_intf,"Core_kernel__Date0_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$296);
    caml_call1(Expect_test_collector[4][1],cst_src_ofday_parser_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$297,cst$134);
    function suffixes(char$0)
     {function _bzd_(suffix)
       {var _bzh_=[0,caml_call1(_Hd_,suffix),0];
        return [0,caml_call1(_Hc_,suffix),_bzh_]}
      var
       _bze_=[0,caml_call2(_eJ_,_adJ_,char$0),0],
       _bzf_=[0,caml_call2(_eJ_,_adK_,char$0),_bze_],
       _bzg_=[0,caml_call2(_eJ_,_adL_,char$0),_bzf_];
      return caml_call2
              (concat_map$1,[0,caml_call2(_eJ_,_adM_,char$0),_bzg_],_bzd_)}
    var
     am_suffixes=[246,function(_bzc_){return suffixes(65)}],
     pm_suffixes=[246,function(_bzb_){return suffixes(80)}];
    function find_suffix(string,suffixes)
     {var suffixes$0=suffixes;
      for(;;)
       {if(suffixes$0)
         {var suffixes$1=suffixes$0[2],suffix=suffixes$0[1];
          if(caml_call2(_GT_,string,suffix))return suffix;
          var suffixes$0=suffixes$1;
          continue}
        return cst$135}}
    function has_colon(string,pos,until)
     {var _bza_=caml_call2(_aA_,pos,until);
      return _bza_?caml_call2(equal$22,58,caml_string_get(string,pos)):_bza_}
    function decrement_length_if_ends_in_space(string,len)
     {if(caml_call2(_aE_,len,0))
       if
        (caml_call2
          (equal$22,32,caml_string_get(string,caml_call2(_ai_,len,1))))
        return caml_call2(_ai_,len,1);
      return len}
    function invalid_string(string,reason)
     {var
       _by__=[0,caml_call1(Sexplib0_Sexp_conv[7],reason),0],
       _by$_=[0,caml_call1(Sexplib0_Sexp_conv[7],string),_by__];
      return caml_call1
              (_aX_,
               [1,
                [0,
                 caml_call1
                  (Sexplib0_Sexp_conv[7],cst_Time_Ofday_invalid_string),
                 _by$_]])}
    function parse(string,f)
     {var
       len=caml_ml_string_length(string),
       _by1_=caml_obj_tag(am_suffixes),
       _by2_=
        250 === _by1_
         ?am_suffixes[1]
         :246 === _by1_
           ?caml_call1(CamlinternalLazy[2],am_suffixes)
           :am_suffixes,
       match$0=find_suffix(string,_by2_),
       _by3_=caml_obj_tag(pm_suffixes),
       _by4_=
        250 === _by3_
         ?pm_suffixes[1]
         :246 === _by3_
           ?caml_call1(CamlinternalLazy[2],pm_suffixes)
           :pm_suffixes,
       match$1=find_suffix(string,_by4_);
      if(caml_string_notequal(match$0,cst$136))
       var switch$0=0;
      else
       if(caml_string_notequal(match$1,cst$139))
        var switch$0=0;
       else
        var am_or_pm=760146199,until=len,switch$0=1;
      if(! switch$0)
       if(caml_string_notequal(match$1,cst$137))
        {if(caml_string_notequal(match$0,cst$138))
          throw [0,Assert_failure,_adN_];
         var
          am_or_pm=760152914,
          until=
           decrement_length_if_ends_in_space
            (string,caml_call2(_ai_,len,caml_ml_string_length(match$1)))}
       else
        var
         until$0=
          decrement_length_if_ends_in_space
           (string,caml_call2(_ai_,len,caml_ml_string_length(match$0))),
         am_or_pm=760149569,
         until=until$0;
      var pos$0=0;
      if(has_colon(string,caml_call2(_ah_,0,1),until))
       var
        hr=read_1_digit_int$0(string,pos$0),
        pos$1=caml_call2(_ah_,pos$0,2),
        hr$0=hr,
        expect_minutes_and_seconds=1047113856;
      else
       if(has_colon(string,caml_call2(_ah_,pos$0,2),until))
        var
         hr$2=read_2_digit_int$0(string,pos$0),
         pos$1=caml_call2(_ah_,pos$0,3),
         hr$0=hr$2,
         expect_minutes_and_seconds=1047113856;
       else
        if(caml_call2(_aD_,caml_call2(_ah_,pos$0,1),until))
         var
          hr$3=read_1_digit_int$0(string,pos$0),
          pos$1=caml_call2(_ah_,pos$0,1),
          hr$0=hr$3,
          expect_minutes_and_seconds=866457669;
        else
         if(caml_call2(_aD_,caml_call2(_ah_,pos$0,2),until))
          var
           hr$4=read_2_digit_int$0(string,pos$0),
           pos$1=caml_call2(_ah_,pos$0,2),
           hr$0=hr$4,
           expect_minutes_and_seconds=866457669;
         else
          var
           hr$5=read_2_digit_int$0(string,pos$0),
           pos$5=caml_call2(_ah_,pos$0,2),
           pos$1=pos$5,
           hr$0=hr$5,
           expect_minutes_and_seconds=-316951979;
      if(866457669 === expect_minutes_and_seconds)
       var pos$2=pos$1,min=0,expect_seconds=0;
      else
       if(has_colon(string,caml_call2(_ah_,pos$1,2),until))
        var
         _by8_=
          1047113856 <= expect_minutes_and_seconds
           ?1
           :invalid_string(string,cst_expected_end_of_string_after_minutes),
         min$1=read_2_digit_int$0(string,pos$1),
         pos$2=caml_call2(_ah_,pos$1,3),
         min=min$1,
         expect_seconds=_by8_;
       else
        if(caml_call2(_aD_,caml_call2(_ah_,pos$1,2),until))
         var
          min$2=read_2_digit_int$0(string,pos$1),
          pos$2=caml_call2(_ah_,pos$1,2),
          min=min$2,
          expect_seconds=0;
        else
         var
          _by9_=
           invalid_string
            (string,
             cst_expected_colon_or_am_pm_suffix_with_optional_space_after_minutes),
          pos$2=_by9_[1],
          min=_by9_[2],
          expect_seconds=_by9_[3];
      if(0 === expect_seconds)
       if(caml_call2(_aD_,pos$2,until))
        var sec=0,subsec_pos=pos$2,subsec_len=0,subsec_nonzero=0;
       else
        var
         _by5_=
          invalid_string(string,cst_BUG_did_not_expect_seconds_but_found_them),
         sec=_by5_[1],
         subsec_pos=_by5_[2],
         subsec_len=_by5_[3],
         subsec_nonzero=_by5_[4];
      else
       if(caml_call2(_aE_,caml_call2(_ah_,pos$2,2),until))
        var
         _by6_=invalid_string(string,cst_expected_two_digits_of_seconds),
         sec=_by6_[1],
         subsec_pos=_by6_[2],
         subsec_len=_by6_[3],
         subsec_nonzero=_by6_[4];
       else
        {var
          sec$1=read_2_digit_int$0(string,pos$2),
          pos$3=caml_call2(_ah_,pos$2,2);
         if(caml_call2(_aD_,pos$3,until))
          var sec=sec$1,subsec_pos=pos$3,subsec_len=0,subsec_nonzero=0;
         else
          {if(caml_call2(_aA_,pos$3,until))
            if(caml_call2(equal$22,46,caml_string_get(string,pos$3)))
             {var
               pos$4=caml_call2(_ah_,pos$3,1),
               nonzero=[0,0],
               _byY_=caml_call2(_ai_,until,1);
              if(! (_byY_ < pos$4))
               {var pos=pos$4;
                for(;;)
                 {var
                   match=caml_string_get(string,pos),
                   switcher=match - 48 | 0,
                   switch$2=
                    9 < switcher >>> 0
                     ?47 === switcher
                       ?1
                       :(invalid_string
                          (string,
                           cst_expected_digits_and_or_underscores_after_decimal_point),
                         0)
                     :0 === switcher?1:(nonzero[1] = 1,0),
                   _by0_=pos + 1 | 0;
                  if(_byY_ !== pos){var pos=_by0_;continue}
                  break}}
              var
               _byZ_=nonzero[1],
               sec=sec$1,
               subsec_pos=pos$3,
               subsec_len=caml_call2(_ai_,until,pos$3),
               subsec_nonzero=_byZ_,
               switch$1=1}
            else
             var switch$1=0;
           else
            var switch$1=0;
           if(! switch$1)
            var
             _by7_=
              invalid_string
               (string,
                cst_expected_decimal_point_or_am_pm_suffix_after_seconds),
             sec=_by7_[1],
             subsec_pos=_by7_[2],
             subsec_len=_by7_[3],
             subsec_nonzero=_by7_[4]}}
      if(760149569 === am_or_pm)
       {if(caml_call2(_aA_,hr$0,1))
         var switch$3=0;
        else
         if(caml_call2(_aE_,hr$0,12))
          var switch$3=0;
         else
          if(caml_call2(_aD_,hr$0,12))
           var hr$1=0,switch$3=1;
          else
           var hr$1=hr$0,switch$3=1;
        if(! switch$3)var hr$1=invalid_string(string,cst_hours_out_of_bounds)}
      else
       if(760152914 <= am_or_pm)
        {if(caml_call2(_aA_,hr$0,1))
          var switch$4=0;
         else
          if(caml_call2(_aE_,hr$0,12))
           var switch$4=0;
          else
           if(caml_call2(_aD_,hr$0,12))
            var hr$1=12,switch$4=1;
           else
            var hr$1=caml_call2(_ah_,hr$0,12),switch$4=1;
         if(! switch$4)
          var hr$1=invalid_string(string,cst_hours_out_of_bounds$0)}
       else
        if(866457669 === expect_minutes_and_seconds)
         var hr$1=invalid_string(string,cst_hours_without_minutes_or_AM_PM);
        else
         if(caml_call2(_aE_,hr$0,24))
          var hr$1=invalid_string(string,cst_hours_out_of_bounds$1);
         else
          {if(caml_call2(_aD_,hr$0,24))
            {if(caml_call2(_aE_,min,0))
              var switch$6=1;
             else
              if(caml_call2(_aE_,sec,0))
               var switch$6=1;
              else
               if(subsec_nonzero)
                var switch$6=1;
               else
                var switch$5=0,switch$6=0;
             if(switch$6)
              var
               hr$1=invalid_string(string,cst_time_is_past_24_00_00),
               switch$5=1}
           else
            var switch$5=0;
           if(! switch$5)var hr$1=hr$0}
      var
       min$0=
        caml_call2(_aE_,min,59)
         ?invalid_string(string,cst_minutes_out_of_bounds)
         :min,
       sec$0=
        caml_call2(_aE_,sec,60)
         ?invalid_string(string,cst_seconds_out_of_bounds)
         :sec;
      if(caml_call2(_aD_,sec$0,60))
       var switch$7=0;
      else
       if(subsec_nonzero)
        var subsec_len$0=subsec_len,switch$7=1;
       else
        var switch$7=0;
      if(! switch$7)var subsec_len$0=0;
      return caml_call6(f,string,hr$1,min$0,sec$0,subsec_pos,subsec_len$0)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$298);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Ofday_parser=
      [0,parse,invalid_string,am_suffixes,pm_suffixes];
    caml_register_global
     (7491,Core_kernel_Ofday_parser,"Core_kernel__Ofday_parser");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$299);
    caml_call1
     (Expect_test_collector[4][1],
      cst_src_float_with_finite_only_serialization_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$300,cst$140);
    var
     Nan_or_inf=
      [248,
       cst_Core_kernel_Float_with_finite_only_serialization_Stable_V1_Nan_or_inf,
       caml_fresh_oo_id(0)];
    function _adO_(param)
     {if(param === Nan_or_inf)return _adP_;throw [0,Assert_failure,_adQ_]}
    caml_call3(Sexplib0_Sexp_conv[51][2],0,Nan_or_inf,_adO_);
    var compare$66=Base_Ppx_compare_lib[3][3];
    function hash$35(x){return caml_call1(_aaR_,x)}
    function verify(t)
     {var match=runtime.caml_classify_float(t);
      if(3 <= match)throw Nan_or_inf;
      return 0}
    function of_binable$4(t){verify(t);return t}
    function to_binable$4(t){verify(t);return t}
    var
     include$106=
      caml_call1
       (caml_call1
         (Stable$0[1][1],
          [0,
           bin_shape_t$55,
           bin_size_t$2,
           bin_write_t$2,
           bin_read_t$5,
           bin_read_t$6]),
        [0,to_binable$4,of_binable$4]),
     bin_size_t$65=include$106[1],
     bin_write_t$66=include$106[2],
     bin_read_t$129=include$106[3],
     bin_read_t$130=include$106[4],
     bin_shape_t$84=include$106[5],
     bin_writer_t$75=include$106[6],
     bin_reader_t$75=include$106[7],
     bin_t$75=include$106[8];
    function t_of_sexp$74(sexp)
     {if(0 === sexp[0])
       {var t=caml_call1(t_of_sexp$47,sexp);
        try
         {verify(t)}
        catch(e)
         {e = caml_wrap_exception(e);
          caml_call2(_er_,caml_call1(Base_Exn[9],e),sexp)}
        return t}
      return caml_call2
              (_er_,cst_Decimal_t_of_sexp_Expected_Atom_found_List,sexp)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$301);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Float_with_finite_only_serialization=
      [0,
       bin_t$75,
       bin_read_t$129,
       bin_read_t$130,
       bin_reader_t$75,
       bin_size_t$65,
       bin_write_t$66,
       bin_writer_t$75,
       bin_shape_t$84,
       t_of_sexp$74,
       sexp_of_t$59,
       compare$66,
       hash_fold_t$36,
       hash$35,
       [0,
        [0,
         bin_t$75,
         bin_read_t$129,
         bin_read_t$130,
         bin_reader_t$75,
         bin_size_t$65,
         bin_write_t$66,
         bin_writer_t$75,
         bin_shape_t$84,
         t_of_sexp$74,
         sexp_of_t$59,
         compare$66,
         hash_fold_t$36,
         hash$35]]];
    caml_register_global
     (7493,
      Core_kernel_Float_with_finite_only_serialization,
      "Core_kernel__Float_with_finite_only_serialization");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$302);
    caml_call1(Expect_test_collector[4][1],cst_src_percent_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$303,cst$141);
    function hash$36(x){return hash_float(x)}
    function of_mult(f){return f}
    function to_mult(t){return t}
    function of_percentage(f){return f / 100}
    function to_percentage(t){return t * 100}
    function of_bp(f){return f / 1e4}
    function to_bp(t){return t * 1e4}
    function of_bp_int(i){return caml_call1(of_int$2,i) / 1e4}
    function to_bp_int(t){return caml_call1(to_int$2,t * 1e4)}
    function sexp_of_t$84(param)
     {if(typeof param === "number")
       return _adR_;
      else
       switch(param[0])
        {case 0:
          var v0=param[1],v0$0=caml_call1(sexp_of_t$43,v0);
          return [1,[0,_adS_,[0,v0$0,0]]];
         case 1:
          var v0$1=param[1],v0$2=caml_call1(sexp_of_t$43,v0$1);
          return [1,[0,_adT_,[0,v0$2,0]]];
         case 2:
          var v0$3=param[1],v0$4=caml_call1(sexp_of_t$43,v0$3);
          return [1,[0,_adU_,[0,v0$4,0]]];
         case 3:
          var v0$5=param[1],v0$6=caml_call1(sexp_of_t$43,v0$5);
          return [1,[0,_adV_,[0,v0$6,0]]];
         case 4:
          var v0$7=param[1],v0$8=caml_call1(sexp_of_t$43,v0$7);
          return [1,[0,_adW_,[0,v0$8,0]]];
         case 5:
          var v0$9=param[1],v0$10=caml_call1(sexp_of_t$43,v0$9);
          return [1,[0,_adX_,[0,v0$10,0]]];
         default:
          var v0$11=param[1],v0$12=caml_call1(sexp_of_t$43,v0$11);
          return [1,[0,_adY_,[0,v0$12,0]]]}}
    function exponent(precision){return [0,precision]}
    function exponent_E(precision){return [1,precision]}
    function decimal(precision){return [2,precision]}
    var ocaml=0;
    function compact(precision){return [3,precision]}
    function compact_E(precision){return [4,precision]}
    function hex(precision){return [5,precision]}
    function hex_E(precision){return [6,precision]}
    function format(x,format)
     {var x_abs=caml_call1(abs$4,x);
      function string(float$0)
       {if(typeof format === "number")
         var _byX_=caml_call1(_eJ_,_adZ_);
        else
         switch(format[0])
          {case 0:
            var precision=format[1],_byX_=caml_call2(_eJ_,_ad0_,precision);
            break;
           case 1:
            var
             precision$0=format[1],
             _byX_=caml_call2(_eJ_,_ad1_,precision$0);
            break;
           case 2:
            var
             precision$1=format[1],
             _byX_=caml_call2(_eJ_,_ad2_,precision$1);
            break;
           case 3:
            var
             precision$2=format[1],
             _byX_=caml_call2(_eJ_,_ad3_,precision$2);
            break;
           case 4:
            var
             precision$3=format[1],
             _byX_=caml_call2(_eJ_,_ad4_,precision$3);
            break;
           case 5:
            var
             precision$4=format[1],
             _byX_=caml_call2(_eJ_,_ad5_,precision$4);
            break;
           default:
            var precision$5=format[1],_byX_=caml_call2(_eJ_,_ad6_,precision$5)}
        return caml_call1(_byX_,float$0)}
      return x_abs == 0
              ?cst_0x
              :1 <= x_abs
                ?caml_call2(_Dw_,string(x * 1),cst_x$1)
                :0.01 <= x_abs
                  ?caml_call2(_Dw_,string(x * 100),cst$142)
                  :caml_call2(_Dw_,string(x * 1e4),cst_bp)}
    function to_string$23(x)
     {var x_abs=caml_call1(abs$4,x);
      function string(float$0){return caml_call2(_eJ_,_ad7_,float$0)}
      return x_abs == 0
              ?cst_0x$0
              :1 <= x_abs
                ?caml_call2(_Dw_,string(x * 1),cst_x$2)
                :0.01 <= x_abs
                  ?caml_call2(_Dw_,string(x * 100),cst$143)
                  :caml_call2(_Dw_,string(x * 1e4),cst_bp$0)}
    function really_of_string(str,float_of_string)
     {var match=caml_call2(_Gw_,str,cst_x$3);
      if(match){var str$0=match[1];return caml_call1(float_of_string,str$0)}
      var match$0=caml_call2(_Gw_,str,cst$144);
      if(match$0)
       {var str$1=match$0[1];return caml_call1(float_of_string,str$1) * 0.01}
      var match$1=caml_call2(_Gw_,str,cst_bp$1);
      if(match$1)
       {var str$2=match$1[1];return caml_call1(float_of_string,str$2) / 1e4}
      return caml_call3(_R5_,_ad8_,str,0)}
    function of_string$20(str)
     {function float$0(str){return t_of_sexp$74([0,str])}
      return really_of_string(str,float$0)}
    var
     _ad9_=caml_call1(Stable[5][1],[0,of_string$20,to_string$23]),
     t_of_sexp$75=_ad9_[1],
     sexp_of_t$85=_ad9_[2],
     compare$67=caml_float_compare;
    function t_of_sexp$76(sexp)
     {try
       {var float$0=caml_call1(t_of_sexp$47,sexp);return float$0}
      catch(_byW_){return caml_call1(t_of_sexp$75,sexp)}}
    var
     include$107=Make$2([0,compare$67,t_of_sexp$76,sexp_of_t$85]),
     _aea_=include$107[3],
     _aeb_=include$107[4],
     _aec_=include$107[5],
     equal$35=include$107[7],
     compare$68=include$107[8],
     min$16=include$107[9],
     max$16=include$107[10],
     ascending$15=include$107[11],
     descending$15=include$107[12],
     between$15=include$107[13],
     clamp_exn$15=include$107[14],
     clamp$15=include$107[15],
     comparator$26=include$107[16],
     validate_lbound$15=include$107[17],
     validate_ubound$15=include$107[18],
     validate_bound$15=include$107[19],
     Replace_polymorphic_compare$13=include$107[20],
     Map$19=include$107[21],
     Set$19=include$107[22],
     _ad__=include$107[1],
     _ad$_=include$107[2],
     _aed_=include$107[6];
    function _aee_(param)
     {Make$8
       ([0,
         t_of_sexp$75,
         sexp_of_t$85,
         bin_t$50,
         bin_read_t$5,
         bin_read_t$6,
         bin_reader_t$50,
         bin_size_t$2,
         bin_write_t$2,
         bin_writer_t$50,
         bin_shape_t$55,
         equal$35,
         tests$1]);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst_Percent_V1,
      0,
      cst_src_percent_ml$0,
      126,
      2,
      404,
      _aee_);
    function _aef_(param)
     {var
       got=
        caml_float_compare
         (0.0363799999999999957,
          caml_call1
           (t_of_sexp$75,caml_call1(sexp_of_t$85,0.0363799999999999957)));
      return caml_call8
              (Ppx_assert_lib_Runtime[3],
               pos$78,
               sexp_of_t$43,
               compare$30,
               0,
               0,
               0,
               -1,
               got)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_BUG_The_sexp_functions_don_t_roundtrip_In_this_case_problem_is_of_percentage_divides_by_100_and_of_string_scales_by_0_01_which_can_yield_different_results,
      0,
      cst_src_percent_ml$1,
      141,
      2,
      322,
      _aef_);
    function is_zero(t){return caml_call2(_aea_,t,0)}
    function apply$0(t,f){return t * f}
    function scale$1(t,f){return t * f}
    function of_string_allow_nan_and_inf(s)
     {return really_of_string(s,of_string$8)}
    function t_of_sexp_allow_nan_and_inf(sexp)
     {return of_string_allow_nan_and_inf(caml_call1(_PM_,sexp))}
    function _aeg_(param)
     {return caml_call2
              (iter$2,
               _aei_,
               function(param)
                {var expected=param[2],string=param[1];
                 if
                  (caml_call2
                    (equal$35,caml_call1(t_of_sexp$75,[0,string]),expected))
                  return 0;
                 throw [0,Assert_failure,_aeh_]})}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_List_iter_f_fun_string_expected,
      0,
      cst_src_percent_ml$2,
      185,
      0,
      687,
      _aeg_);
    function _aej_(param)
     {return caml_call2
              (iter$2,
               _aem_,
               function(param)
                {var
                  expected=param[2],
                  t1=param[1],
                  s=caml_call1(_PM_,caml_call1(sexp_of_t$85,t1));
                 if(caml_call2(equal$27,s,expected))
                  {var t2=caml_call1(t_of_sexp$75,caml_call1(_PE_,s));
                   if(caml_call2(equal$35,t1,t2))return 0;
                   throw [0,Assert_failure,_aek_]}
                 throw [0,Assert_failure,_ael_]})}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_List_iter_f_fun_t1_expected,
      0,
      cst_src_percent_ml$3,
      217,
      0,
      515,
      _aej_);
    function _aen_(param)
     {return caml_call2
              (iter$2,
               [0,
                [0,0.3,3,[2,3],cst_30,cst_30_000],
                [0,
                 [0,0.333,4,[2,2],cst_33_3,cst_33_30],
                 [0,
                  [0,0.333333,4,[2,2],cst_33_33$0,cst_33_33],
                  [0,[0,0.000333,2,[2,2],cst_3_3bp,cst_3_33bp],0]]]],
               function(param)
                {var
                  expectf=param[5],
                  expect=param[4],
                  format$0=param[3],
                  precision=param[2],
                  t=param[1],
                  output=format(t,[4,precision]);
                 if(caml_call2(equal$27,output,expect))
                  {var outputf=format(t,format$0);
                   if(caml_call2(equal$27,outputf,expectf))return 0;
                   throw [0,Assert_failure,_aeo_]}
                 throw [0,Assert_failure,_aep_]})}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_List_iter_f_fun_t_precision_format_e,
      0,
      cst_src_percent_ml$4,
      239,
      0,
      599,
      _aen_);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$304);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Percent=
      [0,
       hash_fold_t$27,
       hash$36,
       of_string$20,
       to_string$23,
       bin_size_t$2,
       bin_write_t$2,
       bin_read_t$5,
       bin_read_t$6,
       bin_shape_t$55,
       bin_writer_t$50,
       bin_reader_t$50,
       bin_t$50,
       _ad__,
       _ad$_,
       _aea_,
       _aeb_,
       _aec_,
       _aed_,
       equal$35,
       compare$68,
       min$16,
       max$16,
       ascending$15,
       descending$15,
       between$15,
       clamp_exn$15,
       clamp$15,
       comparator$26,
       validate_lbound$15,
       validate_ubound$15,
       validate_bound$15,
       Replace_polymorphic_compare$13,
       Map$19,
       Set$19,
       validate_positive$3,
       validate_non_negative$3,
       validate_negative$3,
       validate_non_positive$3,
       is_positive$3,
       is_non_negative$3,
       is_negative$3,
       is_non_positive$3,
       _IB_,
       _IC_,
       _ID_,
       _IE_,
       _IF_,
       _IG_,
       robustly_compare,
       t_of_sexp$75,
       sexp_of_t$85,
       zero$4,
       _Is_,
       _Ir_,
       scale$0,
       neg$3,
       abs$4,
       is_zero,
       is_nan,
       is_inf,
       apply$0,
       scale$1,
       of_mult,
       to_mult,
       of_percentage,
       to_percentage,
       of_bp,
       to_bp,
       of_bp_int,
       to_bp_int,
       t_of_sexp_allow_nan_and_inf,
       of_string_allow_nan_and_inf,
       [0,
        sexp_of_t$84,
        exponent,
        exponent_E,
        decimal,
        ocaml,
        compact,
        compact_E,
        hex,
        hex_E],
       format,
       validate_ordinary,
       sign$3,
       sign$3,
       [0,
        [0,
         t_of_sexp$75,
         sexp_of_t$85,
         bin_t$50,
         bin_read_t$5,
         bin_read_t$6,
         bin_reader_t$50,
         bin_size_t$2,
         bin_write_t$2,
         bin_writer_t$50,
         bin_shape_t$55,
         compare$68,
         hash_fold_t$27,
         hash$36]]];
    caml_register_global(7494,Core_kernel_Percent,"Core_kernel__Percent");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$305);
    caml_call1(Expect_test_collector[4][1],cst_src_unit_of_time_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$306,cst$145);
    function t_of_sexp$77(sexp)
     {if(0 === sexp[0])
       {var
         _byQ_=sexp[1],
         _byR_=caml_string_compare(_byQ_,cst_day),
         switch$0=
          0 <= _byR_
           ?0 < _byR_
             ?caml_string_notequal(_byQ_,cst_hour)
               ?caml_string_notequal(_byQ_,cst_microsecond)
                 ?caml_string_notequal(_byQ_,cst_millisecond)
                   ?caml_string_notequal(_byQ_,cst_minute)
                     ?caml_string_notequal(_byQ_,cst_nanosecond)
                       ?caml_string_notequal(_byQ_,cst_second$1)?7:3
                       :0
                     :4
                   :2
                 :1
               :5
             :6
           :caml_string_notequal(_byQ_,cst_Day)
             ?caml_string_notequal(_byQ_,cst_Hour)
               ?caml_string_notequal(_byQ_,cst_Microsecond)
                 ?caml_string_notequal(_byQ_,cst_Millisecond)
                   ?caml_string_notequal(_byQ_,cst_Minute)
                     ?caml_string_notequal(_byQ_,cst_Nanosecond)
                       ?caml_string_notequal(_byQ_,cst_Second$3)?7:3
                       :0
                     :4
                   :2
                 :1
               :5
             :6;
        switch(switch$0)
         {case 0:return 0;
          case 1:return 1;
          case 2:return 2;
          case 3:return 3;
          case 4:return 4;
          case 5:return 5;
          case 6:return 6
          }}
      else
       {var _byS_=sexp[1];
        if(! _byS_)
         return caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc$32,sexp);
        var _byT_=_byS_[1];
        if(0 !== _byT_[0])
         return caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc$32,sexp);
        var
         _byU_=_byT_[1],
         _byV_=caml_string_compare(_byU_,cst_day$0),
         switch$1=
          0 <= _byV_
           ?0 < _byV_
             ?caml_string_notequal(_byU_,cst_hour$0)
               ?caml_string_notequal(_byU_,cst_microsecond$0)
                 ?caml_string_notequal(_byU_,cst_millisecond$0)
                   ?caml_string_notequal(_byU_,cst_minute$0)
                     ?caml_string_notequal(_byU_,cst_nanosecond$0)
                       ?caml_string_notequal(_byU_,cst_second$2)?7:3
                       :0
                     :4
                   :2
                 :1
               :5
             :6
           :caml_string_notequal(_byU_,cst_Day$0)
             ?caml_string_notequal(_byU_,cst_Hour$0)
               ?caml_string_notequal(_byU_,cst_Microsecond$0)
                 ?caml_string_notequal(_byU_,cst_Millisecond$0)
                   ?caml_string_notequal(_byU_,cst_Minute$0)
                     ?caml_string_notequal(_byU_,cst_Nanosecond$0)
                       ?caml_string_notequal(_byU_,cst_Second$4)?7:3
                       :0
                     :4
                   :2
                 :1
               :5
             :6;
        switch(switch$1)
         {case 0:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$32,sexp);
          case 1:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$32,sexp);
          case 2:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$32,sexp);
          case 3:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$32,sexp);
          case 4:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$32,sexp);
          case 5:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$32,sexp);
          case 6:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$32,sexp)
          }}
      return caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc$32,sexp)}
    function sexp_of_t$86(param)
     {switch(param)
       {case 0:return _aeq_;
        case 1:return _aer_;
        case 2:return _aes_;
        case 3:return _aet_;
        case 4:return _aeu_;
        case 5:return _aev_;
        default:return _aew_}}
    function compare$69(a_001,b_002)
     {if(caml_call2(Ppx_compare_lib[1],a_001,b_002))return 0;
      switch(a_001)
       {case 0:return 0 === b_002?0:-1;
        case 1:
         if(1 === b_002)return 0;
         if(0 !== b_002)return -1;
         var switch$0=0;
         break;
        case 2:
         switch(b_002)
          {case 2:return 0;
           case 0:var switch$0=0;break;
           case 1:var switch$0=1;break;
           default:return -1}
         break;
        case 3:
         switch(b_002)
          {case 3:return 0;
           case 0:var switch$0=0;break;
           case 1:var switch$0=1;break;
           case 2:var switch$0=2;break;
           default:return -1}
         break;
        case 4:
         switch(b_002)
          {case 4:return 0;
           case 0:var switch$0=0;break;
           case 1:var switch$0=1;break;
           case 2:var switch$0=2;break;
           case 3:var switch$0=3;break;
           default:return -1}
         break;
        case 5:
         switch(b_002)
          {case 5:return 0;
           case 6:return -1;
           case 0:var switch$0=0;break;
           case 1:var switch$0=1;break;
           case 2:var switch$0=2;break;
           case 3:var switch$0=3;break;
           default:var switch$0=4}
         break;
        default:
         switch(b_002)
          {case 5:return 1;
           case 6:return 0;
           case 0:var switch$0=0;break;
           case 1:var switch$0=1;break;
           case 2:var switch$0=2;break;
           case 3:var switch$0=3;break;
           default:var switch$0=4}}
      switch(switch$0)
       {case 0:return 1;
        case 1:return 1;
        case 2:return 1;
        case 3:return 1;
        default:return 1}}
    function hash_fold_t$43(hsv,arg)
     {switch(arg)
       {case 0:return caml_call2(Base_Hash[3],hsv,0);
        case 1:return caml_call2(Base_Hash[3],hsv,1);
        case 2:return caml_call2(Base_Hash[3],hsv,2);
        case 3:return caml_call2(Base_Hash[3],hsv,3);
        case 4:return caml_call2(Base_Hash[3],hsv,4);
        case 5:return caml_call2(Base_Hash[3],hsv,5);
        default:return caml_call2(Base_Hash[3],hsv,6)}}
    function hash$37(x)
     {var hsv=caml_call2(Base_Hash[11],0,0),_byP_=hash_fold_t$43(hsv,x);
      return caml_call1(Base_Hash[9],_byP_)}
    function _aex_(param)
     {var got=compare$69(0,1);
      caml_call8
       (Ppx_assert_lib_Runtime[3],pos$79,sexp_of_t$0,_t_,0,0,0,-1,got);
      var got$0=compare$69(1,2);
      caml_call8
       (Ppx_assert_lib_Runtime[3],pos$80,sexp_of_t$0,_t_,0,0,0,-1,got$0);
      var got$1=compare$69(2,3);
      caml_call8
       (Ppx_assert_lib_Runtime[3],pos$81,sexp_of_t$0,_t_,0,0,0,-1,got$1);
      var got$2=compare$69(3,4);
      caml_call8
       (Ppx_assert_lib_Runtime[3],pos$82,sexp_of_t$0,_t_,0,0,0,-1,got$2);
      var got$3=compare$69(4,5);
      caml_call8
       (Ppx_assert_lib_Runtime[3],pos$83,sexp_of_t$0,_t_,0,0,0,-1,got$3);
      var got$4=compare$69(5,6);
      return caml_call8
              (Ppx_assert_lib_Runtime[3],
               pos$84,
               sexp_of_t$0,
               _t_,
               0,
               0,
               0,
               -1,
               got$4)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_Span_Unit_of_time_t,
      0,
      cst_src_unit_of_time_ml$0,
      13,
      0,
      456,
      _aex_);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$307);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Unit_of_time=
      [0,t_of_sexp$77,sexp_of_t$86,compare$69,hash_fold_t$43,hash$37];
    caml_register_global
     (7495,Core_kernel_Unit_of_time,"Core_kernel__Unit_of_time");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$308);
    caml_call1(Expect_test_collector[4][1],cst_src_span_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$309,cst$146);
    function t_of_sexp$78(sexp)
     {if(0 === sexp[0])
       return caml_call2(Sexplib0_Sexp_conv_error[15],tp_loc$33,sexp);
      var
       field_sexps=sexp[1],
       sign_field=[0,0],
       hr_field=[0,0],
       min_field=[0,0],
       sec_field=[0,0],
       ms_field=[0,0],
       us_field=[0,0],
       ns_field=[0,0],
       duplicates=[0,0],
       extra=[0,0],
       param=field_sexps;
      for(;;)
       {if(param)
         {var _byD_=param[1];
          if(1 === _byD_[0])
           {var _byE_=_byD_[1];
            if(_byE_)
             {var _byF_=_byE_[1];
              if(0 === _byF_[0])
               {var _byG_=_byE_[2],_byH_=_byF_[1];
                if(! _byG_)
                 {var tail$0=param[2];
                  if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_byH_,extra[1]];
                  var param=tail$0;
                  continue}
                if(! _byG_[2])
                 {var tail=param[2],field_sexp=_byG_[1];
                  if(caml_string_notequal(_byH_,cst_hr))
                   if(caml_string_notequal(_byH_,cst_min))
                    if(caml_string_notequal(_byH_,cst_ms))
                     if(caml_string_notequal(_byH_,cst_ns))
                      if(caml_string_notequal(_byH_,cst_sec))
                       if(caml_string_notequal(_byH_,cst_sign))
                        if(caml_string_notequal(_byH_,cst_us))
                         {if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_byH_,extra[1]]}
                        else
                         if(us_field[1])
                          duplicates[1] = [0,_byH_,duplicates[1]];
                         else
                          {var fvalue=caml_call1(t_of_sexp$32,field_sexp);
                           us_field[1] = [0,fvalue]}
                       else
                        if(sign_field[1])
                         duplicates[1] = [0,_byH_,duplicates[1]];
                        else
                         {var fvalue$0=caml_call1(_Ft_,field_sexp);
                          sign_field[1] = [0,fvalue$0]}
                      else
                       if(sec_field[1])
                        duplicates[1] = [0,_byH_,duplicates[1]];
                       else
                        {var fvalue$1=caml_call1(t_of_sexp$32,field_sexp);
                         sec_field[1] = [0,fvalue$1]}
                     else
                      if(ns_field[1])
                       duplicates[1] = [0,_byH_,duplicates[1]];
                      else
                       {var fvalue$2=caml_call1(t_of_sexp$32,field_sexp);
                        ns_field[1] = [0,fvalue$2]}
                    else
                     if(ms_field[1])
                      duplicates[1] = [0,_byH_,duplicates[1]];
                     else
                      {var fvalue$3=caml_call1(t_of_sexp$32,field_sexp);
                       ms_field[1] = [0,fvalue$3]}
                   else
                    if(min_field[1])
                     duplicates[1] = [0,_byH_,duplicates[1]];
                    else
                     {var fvalue$4=caml_call1(t_of_sexp$32,field_sexp);
                      min_field[1] = [0,fvalue$4]}
                  else
                   if(hr_field[1])
                    duplicates[1] = [0,_byH_,duplicates[1]];
                   else
                    {var fvalue$5=caml_call1(t_of_sexp$32,field_sexp);
                     hr_field[1] = [0,fvalue$5]}
                  var param=tail;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[9],tp_loc$33,_byD_)}
        if(duplicates[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[11],tp_loc$33,duplicates[1],sexp);
        if(extra[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],tp_loc$33,extra[1],sexp);
        var
         _byI_=sign_field[1],
         _byJ_=hr_field[1],
         _byK_=min_field[1],
         _byL_=sec_field[1],
         _byM_=ms_field[1],
         _byN_=us_field[1],
         _byO_=ns_field[1];
        if(_byI_)
         if(_byJ_)
          if(_byK_)
           if(_byL_)
            if(_byM_)
             if(_byN_)
              if(_byO_)
               {var
                 ns_value=_byO_[1],
                 us_value=_byN_[1],
                 ms_value=_byM_[1],
                 sec_value=_byL_[1],
                 min_value=_byK_[1],
                 hr_value=_byJ_[1],
                 sign_value=_byI_[1];
                return [0,
                        sign_value,
                        hr_value,
                        min_value,
                        sec_value,
                        ms_value,
                        us_value,
                        ns_value]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[14],
                 tp_loc$33,
                 sexp,
                 [0,
                  [0,0 === sign_field[1]?1:0,cst_sign$0],
                  [0,
                   [0,0 === hr_field[1]?1:0,cst_hr$0],
                   [0,
                    [0,0 === min_field[1]?1:0,cst_min$0],
                    [0,
                     [0,0 === sec_field[1]?1:0,cst_sec$0],
                     [0,
                      [0,0 === ms_field[1]?1:0,cst_ms$0],
                      [0,
                       [0,0 === us_field[1]?1:0,cst_us$0],
                       [0,[0,0 === ns_field[1]?1:0,cst_ns$0],0]]]]]]])}}
    function sexp_of_t$87(param)
     {var
       v_ns=param[7],
       v_us=param[6],
       v_ms=param[5],
       v_sec=param[4],
       v_min=param[3],
       v_hr=param[2],
       v_sign=param[1],
       arg=caml_call1(sexp_of_t$43,v_ns),
       bnds=[0,[1,[0,_aey_,[0,arg,0]]],0],
       arg$0=caml_call1(sexp_of_t$43,v_us),
       bnds$0=[0,[1,[0,_aez_,[0,arg$0,0]]],bnds],
       arg$1=caml_call1(sexp_of_t$43,v_ms),
       bnds$1=[0,[1,[0,_aeA_,[0,arg$1,0]]],bnds$0],
       arg$2=caml_call1(sexp_of_t$43,v_sec),
       bnds$2=[0,[1,[0,_aeB_,[0,arg$2,0]]],bnds$1],
       arg$3=caml_call1(sexp_of_t$43,v_min),
       bnds$3=[0,[1,[0,_aeC_,[0,arg$3,0]]],bnds$2],
       arg$4=caml_call1(sexp_of_t$43,v_hr),
       bnds$4=[0,[1,[0,_aeD_,[0,arg$4,0]]],bnds$3],
       arg$5=caml_call1(_Fu_,v_sign),
       bnds$5=[0,[1,[0,_aeE_,[0,arg$5,0]]],bnds$4];
      return [1,bnds$5]}
    var Parts$0=[0,t_of_sexp$78,sexp_of_t$87];
    function next$2(t){return caml_call2(one_ulp,19067,t)}
    function prev$2(t){return caml_call2(one_ulp,759637122,t)}
    var
     include$108=caml_call1(Robust_compare[1],[0,1e-06]),
     robust_comparison_tolerance=include$108[1],
     _aeF_=include$108[2],
     _aeG_=include$108[3],
     _aeH_=include$108[4],
     _aeI_=include$108[5],
     _aeJ_=include$108[6],
     _aeK_=include$108[7],
     robustly_compare$1=include$108[8],
     nanosecond=caml_call1(of_float$3,1e-09),
     microsecond=caml_call1(of_float$3,1e-06),
     millisecond=caml_call1(of_float$3,0.001),
     second$0=caml_call1(of_float$3,1),
     minute=caml_call1(of_float$3,60),
     hour=caml_call1(of_float$3,3600),
     day$0=caml_call1(of_float$3,86400);
    function to_parts(t)
     {var
       sign=caml_call1(sign$3,t),
       t$0=caml_call1(abs$4,t),
       integral=caml_call1(round_down$3,t$0),
       fractional=t$0 - integral,
       seconds=caml_call1(iround_down_exn,integral),
       nanoseconds=caml_call1(iround_nearest_exn,fractional * 1e9);
      if(caml_call2(_xr_,nanoseconds,1e9))
       var seconds$0=caml_call1(next$1,seconds),nanoseconds$0=0;
      else
       var seconds$0=seconds,nanoseconds$0=nanoseconds;
      var
       sec=seconds$0 % 60 | 0,
       minutes=seconds$0 / 60 | 0,
       min=minutes % 60 | 0,
       hr=minutes / 60 | 0,
       ns=nanoseconds$0 % 1e3 | 0,
       microseconds=nanoseconds$0 / 1e3 | 0,
       us=microseconds % 1e3 | 0,
       milliseconds=microseconds / 1e3 | 0;
      return [0,sign,hr,min,sec,milliseconds,us,ns]}
    function format_decimal(n,tenths,units)
     {if(caml_call2(Replace_polymorphic_compare[1],tenths,0))
       if(caml_call2(Replace_polymorphic_compare[5],tenths,10))
        {if(caml_call2(Replace_polymorphic_compare[5],n,10))
          if(caml_call2(Replace_polymorphic_compare[6],tenths,0))
           return caml_call4(_eJ_,_aeL_,n,tenths,units);
         return caml_call3(_eJ_,_aeM_,n,units)}
      throw [0,Assert_failure,_aeN_]}
    function to_short_string(span)
     {var parts=to_parts(span);
      if(caml_call2(Replace_polymorphic_compare[4],parts[2],24))
       var
        _byC_=
         caml_call1
          (_xE_,caml_call1(of_int$2,caml_call2(_wX_,parts[2],24)) / 2.4),
        s=format_decimal(parts[2] / 24 | 0,_byC_,cst_d$1);
      else
       var
        s=
         caml_call2(Replace_polymorphic_compare[4],parts[2],0)
          ?format_decimal(parts[2],parts[3] / 6 | 0,cst_h)
          :caml_call2(Replace_polymorphic_compare[4],parts[3],0)
            ?format_decimal(parts[3],parts[4] / 6 | 0,cst_m$1)
            :caml_call2(Replace_polymorphic_compare[4],parts[4],0)
              ?format_decimal(parts[4],parts[5] / 100 | 0,cst_s$1)
              :caml_call2(Replace_polymorphic_compare[4],parts[5],0)
                ?format_decimal(parts[5],parts[6] / 100 | 0,cst_ms$1)
                :caml_call2(_eJ_,_aeO_,parts[6]);
      return 0 === parts[1]?caml_call2(_Dw_,cst$147,s):s}
    function _aeP_(t,f){return caml_call1(of_float$3,t / f)}
    function _aeQ_(f,t){return f / t}
    function to_ns(x){return x * 1e9}
    function to_us(x){return x * 1e6}
    function to_ms(x){return x * 1e3}
    function of_span_since_epoch(x){return x}
    function to_min(x){return x / minute}
    function to_hr(x){return x / hour}
    function to_day(x){return x / day$0}
    function to_int63_seconds_round_down_exn(x)
     {return caml_call1(int63_round_down_exn,x)}
    function _aeR_(f,t){return caml_call1(of_float$3,f * t)}
    function of_ns(x){return caml_call1(of_float$3,x / 1e9)}
    function of_us(x){return caml_call1(of_float$3,x / 1e6)}
    function of_ms(x){return caml_call1(of_float$3,x / 1e3)}
    function to_span_since_epoch(x){return caml_call1(of_float$3,x)}
    function of_int_sec(x){return to_span_since_epoch(caml_call1(of_int$2,x))}
    function of_int32_seconds(sec)
     {return to_span_since_epoch(caml_call1(_K8_,sec))}
    function of_int63_seconds(sec)
     {return to_span_since_epoch(caml_call1(_Ax_,sec))}
    function of_min(x){return _aeR_(x,minute)}
    function of_hr(x){return _aeR_(x,hour)}
    function of_day(x){return _aeR_(x,day$0)}
    function randomize(t,percent)
     {var
       _byy_=caml_call2(_aec_,percent,0),
       _byz_=_byy_ || caml_call2(_aeb_,percent,1);
      if(_byz_)
       {var _byA_=0;
        caml_call3
         (_R6_,
          [0,
           [11,
            cst_percent_must_be_between_0,
            [12,
             37,
             [11,
              cst_and_100,
              [12,
               37,
               [11,
                cst$148,
                [24,
                 _aeT_,
                 function(param,custom_printf_001)
                  {return to_string$23(custom_printf_001)},
                 _aeS_]]]]]],
           cst_percent_must_be_between_0_and_100_Percent_given],
          percent,
          _byA_)}
      var
       distance=caml_call1(Base_Random[9],percent * t),
       _byB_=caml_call1(Base_Random[15],0)?t + distance:t - distance;
      return to_span_since_epoch(_byB_)}
    function create$23(opt,_byr_,_byq_,_byp_,_byo_,_byn_,_bym_,_byl_,param)
     {if(opt)var sth=opt[1],sign=sth;else var sign=2;
      if(_byr_)var sth$0=_byr_[1],day=sth$0;else var day=0;
      if(_byq_)var sth$1=_byq_[1],hr=sth$1;else var hr=0;
      if(_byp_)var sth$2=_byp_[1],min=sth$2;else var min=0;
      if(_byo_)var sth$3=_byo_[1],sec=sth$3;else var sec=0;
      if(_byn_)var sth$4=_byn_[1],ms=sth$4;else var ms=0;
      if(_bym_)var sth$5=_bym_[1],us=sth$5;else var us=0;
      if(_byl_)var sth$6=_byl_[1],ns=sth$6;else var ns=0;
      var
       _bys_=of_ns(caml_call1(of_int$2,ns)),
       _byt_=of_us(caml_call1(of_int$2,us)),
       _byu_=of_ms(caml_call1(of_int$2,ms)),
       _byv_=to_span_since_epoch(caml_call1(of_int$2,sec)),
       _byw_=of_min(caml_call1(of_int$2,min)),
       _byx_=of_hr(caml_call1(of_int$2,hr)),
       t=
        caml_call2
         (_Is_,
          caml_call2
           (_Is_,
            caml_call2
             (_Is_,
              caml_call2
               (_Is_,
                caml_call2
                 (_Is_,
                  caml_call2(_Is_,of_day(caml_call1(of_int$2,day)),_byx_),
                  _byw_),
                _byv_),
              _byu_),
            _byt_),
          _bys_);
      return 0 === sign?caml_call2(_Ir_,zero$4,t):t}
    function of_string_v1_v2(s,is_v2)
     {try
       {if(caml_string_notequal(s,cst$149))
         {var
           float$0=
            function(n)
             {var s$0=caml_call2(_Gs_,s,n);
              if(caml_string_notequal(s$0,cst$150))
               {var
                 v=caml_call1(of_string$8,s$0),
                 _byk_=caml_call1(validate_ordinary,v);
                caml_call1(Base_Validate[17],_byk_);
                return v}
              return caml_call1(failwith,cst_no_number_given)},
           len=caml_ml_string_length(s),
           match=caml_string_get(s,caml_call2(_w3_,len,1)),
           switcher=match - 100 | 0;
          if(15 < switcher >>> 0)
           var switch$0=0;
          else
           {switch(switcher)
             {case 0:var _byj_=of_day(float$0(1)),switch$1=1;break;
              case 4:var _byj_=of_hr(float$0(1)),switch$1=1;break;
              case 9:var _byj_=of_min(float$0(1)),switch$1=1;break;
              case 15:
               if(caml_call2(_xx_,len,2))
                if
                 (caml_call2
                   (_Ct_,caml_string_get(s,caml_call2(_w3_,len,2)),109))
                 var _byj_=of_ms(float$0(2)),switch$1=1,switch$2=0;
                else
                 var switch$2=1;
               else
                var switch$2=1;
               if(switch$2)
                {if(is_v2)
                  if(caml_call2(_xx_,len,2))
                   if
                    (caml_call2
                      (_Ct_,caml_string_get(s,caml_call2(_w3_,len,2)),117))
                    var _byj_=of_us(float$0(2)),switch$1=1,switch$3=0;
                   else
                    var switch$3=1;
                  else
                   var switch$3=1;
                 else
                  var switch$3=1;
                 if(switch$3)
                  {if(is_v2)
                    if(caml_call2(_xx_,len,2))
                     if
                      (caml_call2
                        (_Ct_,caml_string_get(s,caml_call2(_w3_,len,2)),110))
                      var _byj_=of_ns(float$0(2)),switch$1=1,switch$4=0;
                     else
                      var switch$4=1;
                    else
                     var switch$4=1;
                   else
                    var switch$4=1;
                   if(switch$4)
                    var _byj_=caml_call1(of_float$3,float$0(1)),switch$1=1}}
               break;
              default:var switch$0=0,switch$1=0}
            if(switch$1)var _byh_=_byj_,switch$0=1}
          if(! switch$0)
           var
            _byh_=
             is_v2
              ?caml_call1
                (failwith,cst_Time_spans_must_end_in_ns_us_ms_s_m_h_or_d)
              :caml_call1(failwith,cst_Time_spans_must_end_in_ms_s_m_h_or_d);
          var _byi_=_byh_}
        else
         var _byi_=caml_call1(failwith,cst_empty_string);
        return _byi_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        return caml_call4(_R6_,_aeU_,s,caml_call1(Base_Exn[9],exn),0)}}
    function of_sexp_error_exn(exn,sexp)
     {return caml_call2(_Q3_,caml_call1(Base_Exn[9],exn),sexp)}
    var
     T_of_sexp=
      [248,cst_Core_kernel_Span_Stable_V1_T_of_sexp,caml_fresh_oo_id(0)];
    function _aeV_(param)
     {if(param[1] === T_of_sexp)
       {var
         v1=param[3],
         v0=param[2],
         v0$0=caml_call1(_PT_,v0),
         v1$0=caml_call1(_Tv_,v1);
        return [1,[0,_aeW_,[0,v0$0,[0,v1$0,0]]]]}
      throw [0,Assert_failure,_aeX_]}
    caml_call3(Sexplib0_Sexp_conv[51][2],0,T_of_sexp,_aeV_);
    var
     T_of_sexp_expected_atom_but_got=
      [248,
       cst_Core_kernel_Span_Stable_V1_T_of_sexp_expected_atom_but_got,
       caml_fresh_oo_id(0)];
    function _aeY_(param)
     {if(param[1] === T_of_sexp_expected_atom_but_got)
       {var v0=param[2],v0$0=caml_call1(_PT_,v0);
        return [1,[0,_aeZ_,[0,v0$0,0]]]}
      throw [0,Assert_failure,_ae0_]}
    caml_call3
     (Sexplib0_Sexp_conv[51][2],0,T_of_sexp_expected_atom_but_got,_aeY_);
    function t_of_sexp_v1_v2(sexp,is_v2)
     {if(0 === sexp[0])
       {var x=sexp[1];
        try
         {var _byg_=of_string_v1_v2(x,is_v2);return _byg_}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          return of_sexp_error_exn([0,T_of_sexp,sexp,exn],sexp)}}
      return of_sexp_error_exn([0,T_of_sexp_expected_atom_but_got,sexp],sexp)}
    function string$0(is_v2,suffix,float$0)
     {return is_v2
              ?caml_call2(_Dw_,caml_call1(Sexplib_Conv[1][1],float$0),suffix)
              :caml_call3(_eJ_,_ae1_,float$0,suffix)}
    function to_string_v1_v2(t,is_v2)
     {var match=caml_call1(classify,t);
      switch(match)
       {case 0:return caml_call2(_Iv_,t,zero$4)?cst_inf:cst_inf$0;
        case 1:return cst_nan;
        case 2:
         var abs_t=caml_call1(of_float$3,caml_call1(abs$4,t));
         if(is_v2)
          if(caml_call2(_Iu_,abs_t,microsecond))
           return string$0(is_v2,cst_ns$1,t * 1e9);
         if(is_v2)
          if(caml_call2(_Iu_,abs_t,millisecond))
           return string$0(is_v2,cst_us$1,t * 1e6);
         return caml_call2(_Iu_,abs_t,second$0)
                 ?string$0(is_v2,cst_ms$2,t * 1e3)
                 :caml_call2(_Iu_,abs_t,minute)
                   ?string$0(is_v2,cst_s$2,t)
                   :caml_call2(_Iu_,abs_t,hour)
                     ?string$0(is_v2,cst_m$2,to_min(t))
                     :caml_call2(_Iu_,abs_t,day$0)
                       ?string$0(is_v2,cst_h$0,to_hr(t))
                       :string$0(is_v2,cst_d$2,to_day(t));
        default:return cst_0s}}
    function sexp_of_t_v1_v2(t,is_v2){return [0,to_string_v1_v2(t,is_v2)]}
    function t_of_sexp$79(sexp){return t_of_sexp_v1_v2(sexp,0)}
    function sexp_of_t$88(t){return sexp_of_t_v1_v2(t,0)}
    function to_string$24(t){return to_string_v1_v2(t,0)}
    function t_of_sexp$80(sexp){return t_of_sexp_v1_v2(sexp,1)}
    function sexp_of_t$89(t){return sexp_of_t_v1_v2(t,1)}
    function of_string$21(s){return of_string_v1_v2(s,1)}
    function _ae2_(param)
     {function equal(t1,t2)
       {return caml_call2(_xv_,0,caml_call2(compare$48,t1,t2))}
      var
       _bx$_=[0,[0,to_span_since_epoch(80000006.4),cst_925_926d,cst_A$4],0],
       _bya_=[0,[0,to_span_since_epoch(39996),cst_11_11h,cst$151],_bx$_],
       _byb_=[0,[0,to_span_since_epoch(1234.56),cst_20_576m,cst_p_J],_bya_],
       _byc_=[0,[0,to_span_since_epoch(42),cst_42s,cst_E],_byb_],
       _byd_=[0,[0,to_span_since_epoch(0.707),cst_707ms,cst_9_v],_byc_],
       _bye_=[0,[0,to_span_since_epoch(1e-06),cst_0_001ms,cst$152],_byd_],
       _byf_=[0,[0,to_span_since_epoch(1.2e-09),cst_1_2e_06ms,cst_L_a],_bye_],
       tests=[0,[0,to_span_since_epoch(9.9e-11),cst_9_9e_08ms,cst_s_6],_byf_];
      Make$8
       ([0,
         t_of_sexp$79,
         sexp_of_t$88,
         bin_t$50,
         bin_read_t$5,
         bin_read_t$6,
         bin_reader_t$50,
         bin_size_t$2,
         bin_write_t$2,
         bin_writer_t$50,
         bin_shape_t$55,
         equal,
         tests]);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst_Span_V1,
      0,
      cst_src_span_ml$0,
      310,
      2,
      810,
      _ae2_);
    function _ae3_(param)
     {function equal(t1,t2)
       {return caml_call2(_xv_,0,caml_call2(compare$48,t1,t2))}
      var
       _bx4_=[0,[0,to_span_since_epoch(80000006.4),cst_925_926d$0,cst_A$5],0],
       _bx5_=[0,[0,to_span_since_epoch(39996),cst_11_11h$0,cst$153],_bx4_],
       _bx6_=
        [0,[0,to_span_since_epoch(1234.56),cst_20_576m$0,cst_p_J$0],_bx5_],
       _bx7_=[0,[0,to_span_since_epoch(42),cst_42s$0,cst_E$0],_bx6_],
       _bx8_=[0,[0,to_span_since_epoch(0.707),cst_707ms$0,cst_9_v$0],_bx7_],
       _bx9_=[0,[0,to_span_since_epoch(1e-06),cst_1us,cst$154],_bx8_],
       _bx__=[0,[0,to_span_since_epoch(1.2e-09),cst_1_2ns,cst_L_a$0],_bx9_],
       tests=
        [0,
         [0,to_span_since_epoch(9.9e-11),cst_0_098999999999999991ns,cst_s_6$0],
         _bx__];
      Make$8
       ([0,
         t_of_sexp$80,
         sexp_of_t$89,
         bin_t$50,
         bin_read_t$5,
         bin_read_t$6,
         bin_reader_t$50,
         bin_size_t$2,
         bin_write_t$2,
         bin_writer_t$50,
         bin_shape_t$55,
         equal,
         tests]);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst_Span_V2,
      0,
      cst_src_span_ml$1,
      328,
      2,
      914,
      _ae3_);
    function _ae4_(param)
     {var
       _bxW_=[0,to_span_since_epoch(80000006.4),0],
       _bxX_=[0,to_span_since_epoch(39996),_bxW_],
       _bxY_=[0,to_span_since_epoch(1234.56),_bxX_],
       _bxZ_=[0,to_span_since_epoch(42),_bxY_],
       _bx0_=[0,to_span_since_epoch(0.707),_bxZ_],
       _bx1_=[0,to_span_since_epoch(1e-06),_bx0_],
       _bx2_=[0,to_span_since_epoch(1.2e-09),_bx1_],
       tests=[0,to_span_since_epoch(9.9e-11),_bx2_];
      function _bx3_(param)
       {return caml_call2
                (iter$2,
                 tests,
                 function(expect)
                  {var
                    got$0=sexp_of_t$88(expect),
                    expect$0=sexp_of_t$88(expect);
                   caml_call8
                    (Ppx_assert_lib_Runtime[3],
                     pos$85,
                     _PT_,
                     _QC_,
                     0,
                     0,
                     0,
                     expect$0,
                     got$0);
                   var
                    got$1=to_string$24(expect),
                    expect$1=to_string$24(expect);
                   caml_call8
                    (Ppx_assert_lib_Runtime[3],
                     pos$86,
                     sexp_of_t$58,
                     compare$47,
                     0,
                     0,
                     0,
                     expect$1,
                     got$1);
                   var got$2=t_of_sexp$79(sexp_of_t$88(expect));
                   caml_call8
                    (Ppx_assert_lib_Runtime[3],
                     pos$87,
                     sexp_of_t$88,
                     compare$48,
                     0,
                     0,
                     0,
                     expect,
                     got$2);
                   var s=to_string$24(expect),got=of_string_v1_v2(s,0);
                   caml_call8
                    (Ppx_assert_lib_Runtime[3],
                     pos$88,
                     sexp_of_t$88,
                     compare$48,
                     0,
                     0,
                     0,
                     expect,
                     got);
                   var got$3=t_of_sexp$80(sexp_of_t$88(expect));
                   caml_call8
                    (Ppx_assert_lib_Runtime[3],
                     pos$89,
                     sexp_of_t$88,
                     compare$48,
                     0,
                     0,
                     0,
                     expect,
                     got$3);
                   var got$4=of_string$21(to_string$24(expect));
                   caml_call8
                    (Ppx_assert_lib_Runtime[3],
                     pos$90,
                     sexp_of_t$88,
                     compare$48,
                     0,
                     0,
                     0,
                     expect,
                     got$4);
                   var got$5=t_of_sexp$80(sexp_of_t$88(expect));
                   caml_call8
                    (Ppx_assert_lib_Runtime[3],
                     pos$91,
                     sexp_of_t$88,
                     compare$48,
                     0,
                     0,
                     0,
                     expect,
                     got$5);
                   var got$6=of_string$21(to_string$24(expect));
                   caml_call8
                    (Ppx_assert_lib_Runtime[3],
                     pos$92,
                     sexp_of_t$88,
                     compare$48,
                     0,
                     0,
                     0,
                     expect,
                     got$6);
                   var got$7=t_of_sexp$80(sexp_of_t$89(expect));
                   caml_call8
                    (Ppx_assert_lib_Runtime[3],
                     pos$93,
                     sexp_of_t$88,
                     compare$48,
                     0,
                     0,
                     0,
                     expect,
                     got$7);
                   var got$8=of_string$21(to_string_v1_v2(expect,1));
                   caml_call8
                    (Ppx_assert_lib_Runtime[3],
                     pos$94,
                     sexp_of_t$88,
                     compare$48,
                     0,
                     0,
                     0,
                     expect,
                     got$8);
                   var got$9=t_of_sexp$80(sexp_of_t$88(expect));
                   caml_call8
                    (Ppx_assert_lib_Runtime[3],
                     pos$95,
                     sexp_of_t$88,
                     compare$48,
                     0,
                     0,
                     0,
                     expect,
                     got$9);
                   var got$10=of_string$21(to_string$24(expect));
                   return caml_call8
                           (Ppx_assert_lib_Runtime[3],
                            pos$96,
                            sexp_of_t$88,
                            compare$48,
                            0,
                            0,
                            0,
                            expect,
                            got$10)})}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_List_iter_tests_f_fun_t_tes,
        0,
        cst_src_span_ml$2,
        366,
        4,
        1262,
        _bx3_);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst_conversion_compatibility,
      0,
      cst_src_span_ml$3,
      351,
      0,
      1548,
      _ae4_);
    function to_unit_of_time(t)
     {var abs_t=caml_call1(abs$4,t);
      return caml_call2(_Iy_,abs_t,day$0)
              ?6
              :caml_call2(_Iy_,abs_t,hour)
                ?5
                :caml_call2(_Iy_,abs_t,minute)
                  ?4
                  :caml_call2(_Iy_,abs_t,second$0)
                    ?3
                    :caml_call2(_Iy_,abs_t,millisecond)
                      ?2
                      :caml_call2(_Iy_,abs_t,microsecond)?1:0}
    function of_unit_of_time(param)
     {switch(param)
       {case 0:return nanosecond;
        case 1:return microsecond;
        case 2:return millisecond;
        case 3:return second$0;
        case 4:return minute;
        case 5:return hour;
        default:return day$0}}
    function to_string_hum$12(opt,_bxV_,_bxU_,unit_of_time,t)
     {if(opt)var sth=opt[1],delimiter=sth;else var delimiter=95;
      if(_bxV_)var sth$0=_bxV_[1],decimals=sth$0;else var decimals=3;
      if(_bxU_)
       var sth$1=_bxU_[1],align_decimal=sth$1;
      else
       var align_decimal=0;
      var match=caml_call2(value$0,unit_of_time,to_unit_of_time(t));
      switch(match)
       {case 0:var match$0=[0,t * 1e9,cst_ns$2];break;
        case 1:var match$0=[0,t * 1e6,cst_us$2];break;
        case 2:var match$0=[0,t * 1e3,cst_ms$3];break;
        case 3:var match$0=[0,t,cst_s$3];break;
        case 4:var match$0=[0,to_min(t),cst_m$3];break;
        case 5:var match$0=[0,to_hr(t),cst_h$1];break;
        default:var match$0=[0,to_day(t),cst_d$3]}
      var
       suffix=match$0[2],
       float$0=match$0[1],
       prefix=
        caml_call4
         (to_string_hum$6,
          [0,delimiter],
          [0,decimals],
          [0,1 - align_decimal],
          float$0);
      if(align_decimal)
       if(caml_call2(_xv_,caml_ml_string_length(suffix),1))
        var suffix$0=caml_call2(_Dw_,suffix,cst$155),switch$0=1;
       else
        var switch$0=0;
      else
       var switch$0=0;
      if(! switch$0)var suffix$0=suffix;
      return caml_call2(_Dw_,prefix,suffix$0)}
    function _ae5_(param)
     {var got=to_string_hum$12(0,0,0,0,nanosecond);
      caml_call8
       (Ppx_assert_lib_Runtime[3],
        pos$97,
        sexp_of_t$58,
        compare$47,
        0,
        0,
        0,
        expect$24,
        got);
      var got$0=to_string_hum$12(0,0,0,0,day$0);
      caml_call8
       (Ppx_assert_lib_Runtime[3],
        pos$98,
        sexp_of_t$58,
        compare$47,
        0,
        0,
        0,
        expect$25,
        got$0);
      var got$1=to_string_hum$12(0,_ae6_,0,0,day$0);
      caml_call8
       (Ppx_assert_lib_Runtime[3],
        pos$99,
        sexp_of_t$58,
        compare$47,
        0,
        0,
        0,
        expect$26,
        got$1);
      var got$2=to_string_hum$12(0,_ae8_,_ae7_,0,day$0);
      caml_call8
       (Ppx_assert_lib_Runtime[3],
        pos$100,
        sexp_of_t$58,
        compare$47,
        0,
        0,
        0,
        expect$27,
        got$2);
      var got$3=to_string_hum$12(0,_ae__,_ae9_,0,day$0);
      caml_call8
       (Ppx_assert_lib_Runtime[3],
        pos$101,
        sexp_of_t$58,
        compare$47,
        0,
        0,
        0,
        expect$28,
        got$3);
      var
       got$4=
        to_string_hum$12(0,_afb_,_afa_,_ae$_,caml_call2(_Is_,hour,minute));
      return caml_call8
              (Ppx_assert_lib_Runtime[3],
               pos$102,
               sexp_of_t$58,
               compare$47,
               0,
               0,
               0,
               expect$29,
               got$4)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_Span_to_string_hum,
      0,
      cst_src_span_ml$4,
      433,
      0,
      613,
      _ae5_);
    var
     include$109=
      caml_call1(Base_Pretty_printer[2],[0,module_name$10,to_string$24]),
     _afc_=include$109[1],
     _afd_=
      [0,
       [0,
        caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$173),
        0,
        bin_shape_t$55],
       0],
     _afe_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_span_ml_457_4),
     group$107=caml_call2(Bin_prot_Shape[6],_afe_,_afd_),
     _aff_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$174),
     bin_shape_t$85=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$107,_aff_),0),
     bin_writer_t$76=[0,bin_size_t$2,bin_write_t$2],
     bin_reader_t$76=[0,bin_read_t$5,bin_read_t$6],
     bin_t$76=[0,bin_shape_t$85,bin_writer_t$76,bin_reader_t$76];
    function hash$38(x){return caml_call1(hash$20,x)}
    function t_of_sexp$81(sexp)
     {try
       {var float$0=caml_call1(t_of_sexp$47,sexp)}
      catch(_bxT_){return t_of_sexp$80(sexp)}
      return caml_call1(of_float$3,float$0)}
    var
     include$110=
      Make_binable
       ([0,
         hash_fold_t$27,
         bin_t$76,
         bin_read_t$5,
         bin_read_t$6,
         bin_reader_t$76,
         bin_size_t$2,
         bin_write_t$2,
         bin_writer_t$76,
         bin_shape_t$85,
         t_of_sexp$81,
         compare$48,
         sexp_of_t$88,
         hash$38]),
     _afg_=include$110[1],
     _afh_=include$110[2],
     _afi_=include$110[3],
     _afj_=include$110[4],
     _afk_=include$110[5],
     _afl_=include$110[6],
     _afm_=
      [0,
       [0,
        caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$175),
        0,
        bin_shape_t$55],
       0],
     _afn_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_span_ml_469_2),
     group$108=caml_call2(Bin_prot_Shape[6],_afn_,_afm_),
     _afo_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$176),
     bin_shape_t$86=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$108,_afo_),0),
     bin_writer_t$77=[0,bin_size_t$2,bin_write_t$2],
     bin_reader_t$77=[0,bin_read_t$5,bin_read_t$6],
     bin_t$77=[0,bin_shape_t$86,bin_writer_t$77,bin_reader_t$77];
    function t_of_sexp$82(sexp)
     {var
       match=
        caml_call1
         (try_with,
          function(param)
           {return caml_call1(of_float$3,caml_call1(t_of_sexp$47,sexp))});
      if(match){var t=match[1];return t}
      return t_of_sexp$80(sexp)}
    var
     Map$20=
      _r4_
       ([0,
         bin_t$77,
         bin_read_t$5,
         bin_read_t$6,
         bin_reader_t$77,
         bin_size_t$2,
         bin_write_t$2,
         bin_writer_t$77,
         bin_shape_t$86,
         t_of_sexp$82,
         sexp_of_t$88,
         comparator$19]),
     Set$20=
      _s0_
       ([0,
         bin_t$77,
         bin_read_t$5,
         bin_read_t$6,
         bin_reader_t$77,
         bin_size_t$2,
         bin_write_t$2,
         bin_writer_t$77,
         bin_shape_t$86,
         t_of_sexp$82,
         sexp_of_t$88,
         comparator$19]);
    function _afp_(param)
     {var
       _bxQ_=[1,[0,caml_call1(sexp_of_t$59,caml_call1(to_float$3,hour)),0]],
       _bxR_=caml_call1(Set$20[73],_bxQ_),
       _bxS_=caml_call1(Set$20[57],[0,hour,0]);
      return caml_call2(Set$20[26],_bxS_,_bxR_)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[4],
      Inline_test_config,
      cst_Set_equal_Set_of_list_hour_Set_t_of_se,
      0,
      cst_src_span_ml$5,
      493,
      0,
      111,
      _afp_);
    function _afq_(param){return caml_call2(_aeH_,zero$4,microsecond)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[4],
      Inline_test_config,
      cst_zero_microsecond,
      0,
      cst_src_span_ml$6,
      499,
      0,
      34,
      _afq_);
    function _afr_(param){return 1 - caml_call2(_aeH_,zero$4,of_ns(1001))}
    caml_call8
     (Ppx_inline_test_lib_Runtime[4],
      Inline_test_config,
      cst_not_zero_of_ns_1001_0,
      0,
      cst_src_span_ml$7,
      500,
      0,
      43,
      _afr_);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$310);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     _afs_=
      [0,
       [0,
        t_of_sexp$79,
        sexp_of_t$88,
        bin_t$50,
        bin_read_t$5,
        bin_read_t$6,
        bin_reader_t$50,
        bin_size_t$2,
        bin_write_t$2,
        bin_writer_t$50,
        bin_shape_t$55,
        compare$48,
        hash_fold_t$27,
        hash$20],
       [0,
        t_of_sexp$80,
        sexp_of_t$89,
        bin_t$50,
        bin_read_t$5,
        bin_read_t$6,
        bin_reader_t$50,
        bin_size_t$2,
        bin_write_t$2,
        bin_writer_t$50,
        bin_shape_t$55,
        compare$48,
        hash_fold_t$27,
        hash$20]],
     Core_kernel_Span=
      [0,
       bin_t$50,
       bin_read_t$5,
       bin_read_t$6,
       bin_reader_t$50,
       bin_size_t$2,
       bin_write_t$2,
       bin_writer_t$50,
       bin_shape_t$55,
       t_of_sexp$80,
       sexp_of_t$88,
       Parts$0,
       _Iy_,
       _Ix_,
       _Iw_,
       _Iv_,
       _Iu_,
       _It_,
       equal$28,
       compare$48,
       min$10,
       max$10,
       ascending$9,
       descending$9,
       between$9,
       clamp_exn$9,
       clamp$9,
       validate_lbound$9,
       validate_ubound$9,
       validate_bound$9,
       Replace_polymorphic_compare$7,
       comparator$19,
       Map$20,
       Set$20,
       validate_positive$3,
       validate_non_negative$3,
       validate_negative$3,
       validate_non_positive$3,
       is_positive$3,
       is_non_negative$3,
       is_negative$3,
       is_non_positive$3,
       sign$3,
       _afg_,
       _afh_,
       _afi_,
       _afj_,
       _afk_,
       _afl_,
       _afc_,
       _aeF_,
       _aeG_,
       _aeH_,
       _aeI_,
       _aeJ_,
       _aeK_,
       robustly_compare$1,
       to_string$24,
       of_string$21,
       nanosecond,
       microsecond,
       millisecond,
       second$0,
       minute,
       hour,
       day$0,
       robust_comparison_tolerance,
       zero$4,
       create$23,
       to_parts,
       of_ns,
       of_us,
       of_ms,
       to_span_since_epoch,
       of_int_sec,
       of_int32_seconds,
       of_int63_seconds,
       of_min,
       of_hr,
       of_day,
       to_ns,
       to_us,
       to_ms,
       of_span_since_epoch,
       to_min,
       to_hr,
       to_day,
       to_int63_seconds_round_down_exn,
       to_float$3,
       _Is_,
       _Ir_,
       abs$4,
       neg$3,
       scale,
       _aeP_,
       _aeQ_,
       next$2,
       prev$2,
       to_short_string,
       to_unit_of_time,
       of_unit_of_time,
       to_string_hum$12,
       randomize,
       _afs_];
    caml_register_global(7497,Core_kernel_Span,"Core_kernel__Span");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$311);
    caml_call1(Expect_test_collector[4][1],cst_src_span_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$312,cst$156);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$313);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Span_intf=[0];
    caml_register_global(7498,Core_kernel_Span_intf,"Core_kernel__Span_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$314);
    caml_call1(Expect_test_collector[4][1],cst_src_ofday_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$315,cst$157);
    var
     include$111=caml_call1(Robust_compare[1],[0,1e-06]),
     _aft_=include$111[2],
     _afu_=include$111[3],
     _afv_=include$111[4],
     _afw_=include$111[5],
     _afx_=include$111[6],
     _afy_=include$111[7],
     _afz_=include$111[8];
    function to_span_since_start_of_day(t){return to_span_since_epoch(t)}
    function is_valid(t)
     {var t$0=to_span_since_start_of_day(t),_bxP_=caml_call2(_Ix_,zero$4,t$0);
      return _bxP_?caml_call2(_Ix_,t$0,day$0):_bxP_}
    function of_span_since_start_of_day(s)
     {var match=caml_call1(classify,s);
      return 1 === match
              ?caml_call1
                (invalid_arg,cst_Ofday_of_span_since_start_of_day_NaN_value)
              :0 === match
                ?caml_call1
                  (invalid_arg,
                   cst_Ofday_of_span_since_start_of_day_infinite_value)
                :is_valid(s)?s:caml_call3(_R6_,_afA_,s,0)}
    var start_of_next_day=of_span_since_start_of_day(day$0),start_of_day=0;
    function add$13(t,span){var t$0=t + span;return is_valid(t$0)?[0,t$0]:0}
    function sub$8(t,span){var t$0=t - span;return is_valid(t$0)?[0,t$0]:0}
    function next$3(t)
     {var candidate=caml_call2(one_ulp,19067,t);
      return is_valid(candidate)?[0,candidate]:0}
    function prev$3(t)
     {var candidate=caml_call2(one_ulp,759637122,t);
      return is_valid(candidate)?[0,candidate]:0}
    function diff$6(t1,t2)
     {var _bxO_=to_span_since_start_of_day(t2);
      return caml_call2(_Ir_,to_span_since_start_of_day(t1),_bxO_)}
    var
     approximate_end_of_day=
      caml_call4(value_exn,0,0,0,sub$8(start_of_next_day,microsecond));
    function create$24(hr,min,sec,ms,us,ns,param)
     {if(sec)
       if(60 === sec[1])
        var ms$0=_afD_,us$0=_afC_,ns$0=_afB_,switch$0=1;
       else
        var switch$0=0;
      else
       var switch$0=0;
      if(! switch$0)var ms$0=ms,us$0=us,ns$0=ns;
      return of_span_since_start_of_day
              (create$23(0,0,hr,min,sec,ms$0,us$0,ns$0,0))}
    function _afE_(param)
     {var last_second=create$24(_afF_,0,0,0,0,0,0);
      function _bxK_(v){return caml_call2(equal$28,v,last_second)}
      var
       _bxL_=[0,create$24(_afK_,_afJ_,_afI_,_afH_,_afG_,0,0),0],
       _bxM_=[0,create$24(_afP_,_afO_,_afN_,_afM_,_afL_,0,0),_bxL_],
       _bxN_=[0,create$24(_afT_,_afS_,_afR_,_afQ_,0,0,0),_bxM_];
      return caml_call2
              (for_all$1,[0,create$24(_afW_,_afV_,_afU_,0,0,0,0),_bxN_],_bxK_)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[4],
      Inline_test_config,
      cst_create_can_handle_a_leap_second,
      0,
      cst_src_ofday_ml$0,
      130,
      4,
      367,
      _afE_);
    function to_parts$0(t){return to_parts(to_span_since_start_of_day(t))}
    function to_string_gen(drop_ms,drop_us,trim,t)
     {var drop_us$0=drop_ms?drop_us:1;
      if(drop_us$0)
       {var
         float_sec=to_span_since_start_of_day(t),
         us=caml_call1(int63_round_nearest_exn,float_sec * 1e6),
         us$0=
          caml_call1
           (to_int_exn$2,caml_call2(_z2_,us,caml_call1(of_int$1,1e3))),
         ms=caml_call2(_z3_,us,caml_call1(of_int$1,1e3)),
         ms$0=
          caml_call1
           (to_int_exn$2,caml_call2(_z2_,ms,caml_call1(of_int$1,1e3))),
         sec=caml_call2(_z3_,ms,caml_call1(of_int$1,1e3)),
         sec$0=
          caml_call1
           (to_int_exn$2,caml_call2(_z2_,sec,caml_call1(of_int$1,60))),
         min=caml_call2(_z3_,sec,caml_call1(of_int$1,60)),
         min$0=
          caml_call1
           (to_int_exn$2,caml_call2(_z2_,min,caml_call1(of_int$1,60))),
         hr=caml_call2(_z3_,min,caml_call1(of_int$1,60)),
         hr$0=caml_call1(to_int_exn$2,hr),
         dont_print_us=
          drop_us
          ||
          (trim?caml_call2(Replace_polymorphic_compare[3],us$0,0):trim);
        if(drop_ms)
         var dont_print_ms=drop_ms;
        else
         if(trim)
          var
           _bxJ_=caml_call2(Replace_polymorphic_compare[3],ms$0,0),
           dont_print_ms=_bxJ_?dont_print_us:_bxJ_;
         else
          var dont_print_ms=trim;
        if(trim)
         var
          _bxI_=caml_call2(Replace_polymorphic_compare[3],sec$0,0),
          dont_print_s=_bxI_?dont_print_ms:_bxI_;
        else
         var dont_print_s=trim;
        var
         len=dont_print_s?5:dont_print_ms?8:dont_print_us?12:15,
         buf=caml_call1(create$13,len);
        write_2_digit_int$0(buf,0,hr$0);
        caml_call3(set$6,buf,2,58);
        write_2_digit_int$0(buf,3,min$0);
        if(! dont_print_s)
         {caml_call3(set$6,buf,5,58);
          write_2_digit_int$0(buf,6,sec$0);
          if(! dont_print_ms)
           {caml_call3(set$6,buf,8,46);
            write_3_digit_int$0(buf,9,ms$0);
            if(! dont_print_us)write_3_digit_int$0(buf,12,us$0)}}
        return caml_call1(unsafe_to_string,buf)}
      throw [0,Assert_failure,_afX_]}
    function to_string_trimmed(t){return to_string_gen(0,0,1,t)}
    function to_sec_string(t){return to_string_gen(1,1,0,t)}
    function to_millisec_string(t){return to_string_gen(0,1,0,t)}
    function of_string_iso8601_extended(pos,len,str)
     {var match=caml_call3(_hX_,pos,len,caml_ml_string_length(str));
      if(0 === match[0])
       var z=match[1],match$0=z;
      else
       var s=match[1],match$0=caml_call3(_R5_,_af0_,s,0);
      var len$0=match$0[2],pos$0=match$0[1];
      try
       {if(caml_call2(Replace_polymorphic_compare[5],len$0,2))
         var _bxz_=caml_call1(failwith,cst_len_2);
        else
         {var hour=read_2_digit_int$0(str,pos$0);
          if(caml_call2(Replace_polymorphic_compare[4],hour,24))
           caml_call1(failwith,cst_hour_24);
          var span=of_hr(hour);
          if(caml_call2(Replace_polymorphic_compare[3],len$0,2))
           var span$0=span;
          else
           if(caml_call2(Replace_polymorphic_compare[5],len$0,5))
            var span$0=caml_call1(failwith,cst_2_len_5);
           else
            if(caml_call2(equal$22,caml_string_get(str,pos$0 + 2 | 0),58))
             {var minute=read_2_digit_int$0(str,pos$0 + 3 | 0);
              if(caml_call2(Replace_polymorphic_compare[1],minute,60))
               caml_call1(failwith,cst_minute_60);
              var
               span$1=caml_call2(_Is_,span,of_min(minute)),
               _bxA_=caml_call2(Replace_polymorphic_compare[3],hour,24),
               _bxB_=
                _bxA_
                 ?caml_call2(Replace_polymorphic_compare[6],minute,0)
                 :_bxA_;
              if(_bxB_)caml_call1(failwith,cst_24_hours_and_non_zero_minute);
              if(caml_call2(Replace_polymorphic_compare[3],len$0,5))
               var span$2=span$1;
              else
               if(caml_call2(Replace_polymorphic_compare[5],len$0,8))
                var span$2=caml_call1(failwith,cst_5_len_8);
               else
                if(caml_call2(equal$22,caml_string_get(str,pos$0 + 5 | 0),58))
                 {var second=read_2_digit_int$0(str,pos$0 + 6 | 0);
                  if(caml_call2(Replace_polymorphic_compare[4],second,60))
                   caml_call3(_R5_,_afZ_,second,0);
                  var
                   _bxC_=caml_call2(Replace_polymorphic_compare[3],hour,24),
                   _bxD_=
                    _bxC_
                     ?caml_call2(Replace_polymorphic_compare[6],second,0)
                     :_bxC_;
                  if(_bxD_)
                   caml_call1(failwith,cst_24_hours_and_non_zero_seconds);
                  var seconds=to_span_since_epoch(second);
                  if(caml_call2(Replace_polymorphic_compare[3],len$0,8))
                   var _bxE_=caml_call2(_Is_,span$1,seconds);
                  else
                   if(caml_call2(Replace_polymorphic_compare[3],len$0,9))
                    var _bxE_=caml_call1(failwith,cst_length_9);
                   else
                    {var match$1=caml_string_get(str,pos$0 + 8 | 0);
                     if(44 === match$1)
                      var switch$0=0;
                     else
                      if(46 === match$1)
                       var switch$0=0;
                      else
                       var
                        _bxH_=caml_call1(failwith,cst_missing_subsecond_separator),
                        switch$0=1;
                     if(! switch$0)
                      {var
                        last=(pos$0 + len$0 | 0) - 1 | 0,
                        loop=
                         function(pos,subs)
                          {var pos$0=pos,subs$0=subs;
                           for(;;)
                            {var
                              subs$1=
                               (subs$0 * 10 | 0)
                               +
                               caml_call1(_C0_,caml_string_get(str,pos$0))
                               |
                               0;
                             if(caml_call2(Replace_polymorphic_compare[3],pos$0,last))
                              return subs$1;
                             var pos$1=pos$0 + 1 | 0,pos$0=pos$1,subs$0=subs$1;
                             continue}},
                        subs=loop(pos$0 + 9 | 0,0),
                        _bxF_=caml_call2(Replace_polymorphic_compare[3],hour,24),
                        _bxG_=
                         _bxF_
                          ?caml_call2(Replace_polymorphic_compare[6],subs,0)
                          :_bxF_;
                       if(_bxG_)
                        caml_call1(failwith,cst_24_hours_and_non_zero_subseconds);
                       var
                        seconds$0=
                         caml_call2
                          (_Is_,
                           seconds,
                           to_span_since_epoch(subs / Math.pow(10,len$0 - 9 | 0))),
                        seconds$1=
                         caml_call2(_Iv_,seconds$0,to_span_since_epoch(60))
                          ?to_span_since_epoch(60)
                          :seconds$0,
                        _bxH_=caml_call2(_Is_,span$1,seconds$1)}
                     var _bxE_=_bxH_}
                  var span$2=_bxE_}
                else
                 var span$2=caml_call1(failwith,cst_second_colon_missing);
              var span$0=span$2}
            else
             var span$0=caml_call1(failwith,cst_first_colon_missing);
          var _bxz_=of_span_since_start_of_day(span$0)}
        return _bxz_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        var _bxy_=caml_call1(Base_Exn[9],exn);
        return caml_call4(_R6_,_afY_,caml_call3(_HE_,str,pos$0,len$0),_bxy_,0)}}
    function _af1_(param)
     {var last_second=create$24(_af2_,0,0,0,0,0,0);
      return caml_call2
              (for_all$1,
               _af3_,
               function(s)
                {return caml_call2
                         (equal$28,of_string_iso8601_extended(0,0,s),last_second)})}
    caml_call8
     (Ppx_inline_test_lib_Runtime[4],
      Inline_test_config,
      cst_of_string_iso8601_extended_supports_leap_seconds,
      0,
      cst_src_ofday_ml$1,
      265,
      4,
      274,
      _af1_);
    function _af4_(param)
     {function _bxx_(param)
       {return of_string_iso8601_extended(0,0,cst_23_59_61)}
      return caml_call1(Base_Exn[16],_bxx_)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[4],
      Inline_test_config,
      cst_of_string_iso8601_extended_doesn_t_support_two_leap_seconds,
      0,
      cst_src_ofday_ml$2,
      274,
      4,
      147,
      _af4_);
    var hour$0=3600;
    function small_diff(ofday1,ofday2)
     {var
       ofday1$0=to_span_since_start_of_day(ofday1),
       ofday2$0=to_span_since_start_of_day(ofday2),
       diff=ofday1$0 - ofday2$0,
       d1=caml_call2(mod_float,diff,hour$0),
       d2=caml_call2(mod_float,d1 + 3600,hour$0),
       d=caml_call2(_Iv_,d2,1800)?d2 - 3600:d2;
      return to_span_since_epoch(d)}
    function to_string$25(t){return to_string_gen(0,0,0,t)}
    var
     include$112=
      caml_call1(Base_Pretty_printer[2],[0,module_name$11,to_string$25]),
     _af5_=include$112[1];
    function create_from_parsed(string,hr,min,sec,subsec_pos,subsec_len)
     {var
       subsec=
        caml_call2(_xr_,subsec_len,0)
         ?0
         :caml_call1
           (of_string$8,caml_call3(_HE_,string,subsec_pos,subsec_len));
      return of_span_since_start_of_day
              (to_span_since_epoch
                (caml_call1
                  (of_int$2,((hr * 3600 | 0) + (min * 60 | 0) | 0) + sec | 0)
                 +
                 subsec))}
    function of_string$22(s){return parse(s,create_from_parsed)}
    function _af6_(param)
     {function _bxu_(param){return of_string$22(cst_1_0_00)}
      if(caml_call1(Base_Exn[16],_bxu_))
       {var _bxv_=function(param){return of_string$22(cst_1_0_00$0)};
        if(caml_call1(Base_Exn[16],_bxv_))
         {var _bxw_=function(param){return of_string$22(cst_0o10_0x28_3e1)};
          if(caml_call1(Base_Exn[16],_bxw_))return 0;
          throw [0,Assert_failure,_af7_]}
        throw [0,Assert_failure,_af8_]}
      throw [0,Assert_failure,_af9_]}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_of_string_does_not_naively_dispatch_to_Int_of_string_and_Float_of_string,
      0,
      cst_src_ofday_ml$3,
      319,
      4,
      313,
      _af6_);
    if(Ppx_bench_lib_Benchmark_accumulator[3])
     {var f=function(param,_bxt_){return of_string$22(cst_12_00_00am)};
      caml_call8
       (Ppx_bench_lib_Benchmark_accumulator[5],
        cst_Time_Ofday_of_string,
        cst_of_string_12_00_00am,
        cst_src_ofday_ml$4,
        cst_src_ofday_ml_Stable_V1,
        326,
        4,
        61,
        [0,f])}
    function _af__(param)
     {var last_second=create$24(_af$_,0,0,0,0,0,0);
      return caml_call2
              (for_all$1,
               _aga_,
               function(s)
                {return caml_call2(_Iw_,of_string$22(s),last_second)})}
    caml_call8
     (Ppx_inline_test_lib_Runtime[4],
      Inline_test_config,
      cst_of_string_supports_leap_seconds,
      0,
      cst_src_ofday_ml$5,
      328,
      4,
      232,
      _af__);
    function _agb_(param)
     {var _bxs_=of_string$22(cst_07_21_00);
      if(caml_call2(_Iw_,create$24(_age_,_agd_,_agc_,0,0,0,0),_bxs_))return 0;
      throw [0,Assert_failure,_agf_]}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_of_string_supports_non_meridiem_times,
      0,
      cst_src_ofday_ml$6,
      337,
      4,
      128,
      _agb_);
    var
     Expect_test_collector$1=
      caml_call1
       (Expect_test_collector[2],
        [0,
         Expect_test_config[2],
         Expect_test_config[3],
         Expect_test_config[4],
         Expect_test_config[5],
         Expect_test_config[6]]);
    function _agg_(ppx_expect_instance_001)
     {var
       _bxn_=caml_obj_tag(am_suffixes),
       _bxo_=
        250 === _bxn_
         ?am_suffixes[1]
         :246 === _bxn_
           ?caml_call1(CamlinternalLazy[2],am_suffixes)
           :am_suffixes;
      caml_call2(_eR_,_agi_,caml_call2(_Hg_,_agh_,_bxo_));
      var
       _bxp_=caml_obj_tag(pm_suffixes),
       _bxq_=
        250 === _bxp_
         ?pm_suffixes[1]
         :246 === _bxp_
           ?caml_call1(CamlinternalLazy[2],pm_suffixes)
           :pm_suffixes;
      caml_call2(_eR_,_agk_,caml_call2(_Hg_,_agj_,_bxq_));
      var
       _bxr_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_ofday_ml$7),
         346,
         13817,
         13825,
         13831];
      return caml_call2
              (Expect_test_collector$1[1][1],ppx_expect_instance_001,_bxr_)}
    var
     _agl_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_ofday_ml$8),
       346,
       13817,
       13832,
       13915],
     _ago_=
      [0,
       [0,
        _agn_,
        _agm_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_ofday_ml$9),
         346,
         13817,
         13825,
         13831],
        _agl_],
       0],
     _agq_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_ofday_ml$11),
       343,
       13585,
       13589,
       13916],
     _agr_=
      caml_call1
       (Expect_test_common_File[4][3],cst_42361416b6571d86f5fdc7c660b4153a);
    caml_call8
     (Expect_test_collector$1[2],
      _agr_,
      _agq_,
      cst_src_ofday_ml$10,
      _agp_,
      0,
      _ago_,
      Inline_test_config,
      _agg_);
    function _ags_(param)
     {function test_excluding_noon(hr,zeroes,meridiem,param)
       {function plus_space(xs)
         {return caml_call2
                  (_Q5_,
                   xs,
                   caml_call2
                    (map$11,xs,function(x){return caml_call2(_Dw_,cst$158,x)}))}
        if(meridiem)
         if(17917 <= meridiem[1])
          var
           _bxj_=caml_obj_tag(pm_suffixes),
           _bxk_=
            250 === _bxj_
             ?pm_suffixes[1]
             :246 === _bxj_
               ?caml_call1(CamlinternalLazy[2],pm_suffixes)
               :pm_suffixes,
           hrs_to_add=12,
           suffixes=plus_space(_bxk_);
         else
          var
           _bxl_=caml_obj_tag(am_suffixes),
           _bxm_=
            250 === _bxl_
             ?am_suffixes[1]
             :246 === _bxl_
               ?caml_call1(CamlinternalLazy[2],am_suffixes)
               :am_suffixes,
           hrs_to_add=0,
           suffixes=plus_space(_bxm_);
        else
         var hrs_to_add=0,suffixes=suffixes$0;
        return caml_call2
                (iter$2,
                 suffixes,
                 function(suffix)
                  {var
                    t=create$24([0,hr + hrs_to_add | 0],0,0,0,0,0,0),
                    str=caml_call4(_eJ_,_agt_,hr,zeroes,suffix);
                   if(caml_call2(_Iw_,t,of_string$22(str)))return 0;
                   throw [0,Assert_failure,_agu_]})}
      function failure(f)
       {if(caml_call1(is_none,caml_call1(try_with,f)))return 0;
        throw [0,Assert_failure,_agv_]}
      function success(f)
       {var match=caml_call2(_lp_,0,f);
        if(0 === match[0])return 0;
        var e=match[1];
        return caml_call1(_kL_,caml_call2(_kF_,e,cst_expected_success))}
      caml_call2
       (iter$2,
        first_half_of_day_except_0_and_12,
        function(hr)
         {success
           (function(_bxi_)
             {return test_excluding_noon(hr,cst_00_00,_agw_,_bxi_)});
          success
           (function(_bxh_){return test_excluding_noon(hr,cst_00,_agx_,_bxh_)});
          success
           (function(_bxg_)
             {return test_excluding_noon(hr,cst$159,_agy_,_bxg_)});
          success
           (function(_bxf_)
             {return test_excluding_noon(hr,cst_00_00$0,_agz_,_bxf_)});
          success
           (function(_bxe_)
             {return test_excluding_noon(hr,cst_00$0,_agA_,_bxe_)});
          success
           (function(_bxd_)
             {return test_excluding_noon(hr,cst$160,_agB_,_bxd_)});
          var _bxb_=0;
          return failure
                  (function(_bxc_)
                    {return test_excluding_noon(hr,cst$161,_bxb_,_bxc_)})});
      caml_call2
       (iter$2,
        second_half_of_day,
        function(hr)
         {failure
           (function(_bxa_)
             {return test_excluding_noon(hr,cst_00_00$1,_agC_,_bxa_)});
          failure
           (function(_bw$_)
             {return test_excluding_noon(hr,cst_00$1,_agD_,_bw$_)});
          failure
           (function(_bw__)
             {return test_excluding_noon(hr,cst$162,_agE_,_bw__)});
          failure
           (function(_bw9_)
             {return test_excluding_noon(hr,cst_00_00$2,_agF_,_bw9_)});
          failure
           (function(_bw8_)
             {return test_excluding_noon(hr,cst_00$2,_agG_,_bw8_)});
          return failure
                  (function(_bw7_)
                    {return test_excluding_noon(hr,cst$163,_agH_,_bw7_)})});
      function _bwY_(hr)
       {var _bw1_=0;
        success
         (function(_bw6_)
           {return test_excluding_noon(hr,cst_00_00$3,_bw1_,_bw6_)});
        var _bw2_=0;
        success
         (function(_bw5_){return test_excluding_noon(hr,cst_00$3,_bw2_,_bw5_)});
        var _bw3_=0;
        return failure
                (function(_bw4_)
                  {return test_excluding_noon(hr,cst$164,_bw3_,_bw4_)})}
      caml_call2
       (iter$2,
        caml_call2
         (_Q5_,
          _agI_,
          caml_call2
           (_Q5_,first_half_of_day_except_0_and_12,second_half_of_day)),
        _bwY_);
      var _bwZ_=of_string$22(cst_12_00_00_PM);
      if(caml_call2(_Iw_,create$24(_agJ_,0,0,0,0,0,0),_bwZ_))
       {var _bw0_=of_string$22(cst_12_00_00_AM);
        if(caml_call2(_Iw_,create$24(_agK_,0,0,0,0,0,0),_bw0_))
         {failure(function(param){return of_string$22(cst_00_00_00_AM)});
          return failure
                  (function(param){return of_string$22(cst_00_00_00_PM)})}
        throw [0,Assert_failure,_agL_]}
      throw [0,Assert_failure,_agM_]}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_of_string_supports_meridiem_times,
      0,
      cst_src_ofday_ml$12,
      351,
      4,
      3207,
      _ags_);
    function t_of_sexp$83(sexp)
     {if(0 === sexp[0])
       {var s=sexp[1];
        try
         {var _bwX_=of_string$22(s);return _bwX_}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          if(exn[1] === Invalid_argument)
           {var s$0=exn[2];
            return caml_call2
                    (_Q3_,caml_call2(_Dw_,cst_Ofday_t_of_sexp,s$0),sexp)}
          throw exn}}
      return caml_call2(_Q3_,cst_Ofday_t_of_sexp$0,sexp)}
    function sexp_of_t$90(span){return [0,to_string$25(span)]}
    var
     _agN_=
      [0,
       [0,
        caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$177),
        0,
        bin_shape_t$55],
       0],
     _agO_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_ofday_ml_428_4),
     group$109=caml_call2(Bin_prot_Shape[6],_agO_,_agN_),
     _agP_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$178),
     bin_shape_t$87=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$109,_agP_),0),
     bin_writer_t$78=[0,bin_size_t$2,bin_write_t$2],
     bin_reader_t$78=[0,bin_read_t$5,bin_read_t$6],
     bin_t$78=[0,bin_shape_t$87,bin_writer_t$78,bin_reader_t$78];
    function hash$39(x){return caml_call1(hash$20,x)}
    function t_of_sexp$84(sexp)
     {try
       {var float$0=caml_call1(t_of_sexp$47,sexp)}
      catch(_bwW_){return t_of_sexp$83(sexp)}
      return caml_call1(of_float$3,float$0)}
    var
     include$113=
      Make_binable
       ([0,
         hash_fold_t$27,
         bin_t$78,
         bin_read_t$5,
         bin_read_t$6,
         bin_reader_t$78,
         bin_size_t$2,
         bin_write_t$2,
         bin_writer_t$78,
         bin_shape_t$87,
         t_of_sexp$84,
         compare$48,
         sexp_of_t$90,
         hash$39]),
     _agQ_=include$113[1],
     _agR_=include$113[2],
     _agS_=include$113[3],
     _agT_=include$113[4],
     _agU_=include$113[5],
     _agV_=include$113[6],
     _agW_=
      [0,
       [0,
        caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$179),
        0,
        bin_shape_t$55],
       0],
     _agX_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_ofday_ml_441_2),
     group$110=caml_call2(Bin_prot_Shape[6],_agX_,_agW_),
     _agY_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$180),
     bin_shape_t$88=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$110,_agY_),0),
     bin_writer_t$79=[0,bin_size_t$2,bin_write_t$2],
     bin_reader_t$79=[0,bin_read_t$5,bin_read_t$6],
     bin_t$79=[0,bin_shape_t$88,bin_writer_t$79,bin_reader_t$79];
    function t_of_sexp$85(sexp)
     {var
       match=
        caml_call1
         (try_with,
          function(param)
           {return caml_call1(of_float$3,caml_call1(t_of_sexp$47,sexp))});
      if(match){var t=match[1];return t}
      return t_of_sexp$83(sexp)}
    var
     Map$21=
      _r4_
       ([0,
         bin_t$79,
         bin_read_t$5,
         bin_read_t$6,
         bin_reader_t$79,
         bin_size_t$2,
         bin_write_t$2,
         bin_writer_t$79,
         bin_shape_t$88,
         t_of_sexp$85,
         sexp_of_t$90,
         comparator$19]),
     Set$21=
      _s0_
       ([0,
         bin_t$79,
         bin_read_t$5,
         bin_read_t$6,
         bin_reader_t$79,
         bin_size_t$2,
         bin_write_t$2,
         bin_writer_t$79,
         bin_shape_t$88,
         t_of_sexp$85,
         sexp_of_t$90,
         comparator$19]);
    function _agZ_(param)
     {var
       _bwT_=
        [1,[0,caml_call1(sexp_of_t$59,caml_call1(to_float$3,start_of_day)),0]],
       _bwU_=caml_call1(Set$21[73],_bwT_),
       _bwV_=caml_call1(Set$21[57],[0,start_of_day,0]);
      return caml_call2(Set$21[26],_bwV_,_bwU_)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[4],
      Inline_test_config,
      cst_Set_equal_Set_of_list_start_of_day_Set,
      0,
      cst_src_ofday_ml$13,
      465,
      0,
      127,
      _agZ_);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$316);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     _ag0_=
      [0,
       [0,
        bin_t$50,
        bin_read_t$5,
        bin_read_t$6,
        bin_reader_t$50,
        bin_size_t$2,
        bin_write_t$2,
        bin_writer_t$50,
        bin_shape_t$55,
        compare$48,
        hash_fold_t$27,
        hash$20,
        t_of_sexp$83,
        sexp_of_t$90]],
     Ofday=
      [0,
       bin_t$50,
       bin_read_t$5,
       bin_read_t$6,
       bin_reader_t$50,
       bin_size_t$2,
       bin_write_t$2,
       bin_writer_t$50,
       bin_shape_t$55,
       t_of_sexp$83,
       sexp_of_t$90,
       _Iy_,
       _Ix_,
       _Iw_,
       _Iv_,
       _Iu_,
       _It_,
       equal$28,
       compare$48,
       min$10,
       max$10,
       ascending$9,
       descending$9,
       between$9,
       clamp_exn$9,
       clamp$9,
       validate_lbound$9,
       validate_ubound$9,
       validate_bound$9,
       Replace_polymorphic_compare$7,
       comparator$19,
       Map$21,
       Set$21,
       validate_positive$3,
       validate_non_negative$3,
       validate_negative$3,
       validate_non_positive$3,
       is_positive$3,
       is_non_negative$3,
       is_negative$3,
       is_non_positive$3,
       sign$3,
       _agQ_,
       _agR_,
       _agS_,
       _agT_,
       _agU_,
       _agV_,
       _af5_,
       _aft_,
       _afu_,
       _afv_,
       _afw_,
       _afx_,
       _afy_,
       _afz_,
       of_string$22,
       to_string$25,
       create$24,
       to_parts$0,
       start_of_day,
       start_of_next_day,
       approximate_end_of_day,
       to_span_since_start_of_day,
       of_span_since_start_of_day,
       add$13,
       sub$8,
       next$3,
       prev$3,
       diff$6,
       small_diff,
       to_string_trimmed,
       to_sec_string,
       of_string_iso8601_extended,
       to_millisec_string,
       _ag0_];
    caml_register_global(7499,Ofday,"Core_kernel__Ofday");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$317);
    caml_call1(Expect_test_collector[4][1],cst_src_ofday_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$318,cst$165);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$319);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Ofday_intf=[0];
    caml_register_global
     (7500,Core_kernel_Ofday_intf,"Core_kernel__Ofday_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$320);
    caml_call1(Expect_test_collector[4][1],cst_src_time0_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$321,cst$166);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$322);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Time0_intf=[0];
    caml_register_global
     (7501,Core_kernel_Time0_intf,"Core_kernel__Time0_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$323);
    caml_call1(Expect_test_collector[4][1],cst_src_time_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$324,cst$167);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$325);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Time_intf=[0,0];
    caml_register_global(7502,Core_kernel_Time_intf,"Core_kernel__Time_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$326);
    caml_call1(Expect_test_collector[4][1],cst_src_time_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$327,cst$168);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$328);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    function _ahf_(Time0)
     {var
       _bvv_=Time0[17],
       _bvx_=Time0[19],
       _bvy_=Time0[20],
       _bvB_=Time0[23],
       _bvC_=Time0[24],
       _bvD_=Time0[25],
       _bvG_=Time0[28],
       _bvH_=Time0[29],
       _bvI_=Time0[30],
       _bvJ_=Time0[31],
       _bvK_=Time0[32],
       _bvL_=Time0[33],
       _bvM_=Time0[34],
       _bvf_=Time0[1],
       _bvg_=Time0[2],
       _bvh_=Time0[3],
       _bvi_=Time0[4],
       _bvj_=Time0[5],
       _bvk_=Time0[6],
       _bvl_=Time0[7],
       _bvm_=Time0[8],
       _bvn_=Time0[9],
       _bvo_=Time0[10],
       _bvp_=Time0[11],
       _bvq_=Time0[12],
       _bvr_=Time0[13],
       _bvs_=Time0[14],
       _bvt_=Time0[15],
       _bvu_=Time0[16],
       _bvw_=Time0[18],
       _bvz_=Time0[21],
       _bvA_=Time0[22],
       _bvE_=Time0[26],
       _bvF_=Time0[27],
       _bvN_=Time0[35],
       _bvO_=Time0[36],
       _bvP_=Time0[37],
       _bvQ_=Time0[38],
       _bvR_=Time0[39],
       _bvS_=Time0[40],
       _bvT_=Time0[41],
       _bvU_=Time0[42],
       _bvV_=Time0[43],
       _bvW_=Time0[44],
       _bvX_=Time0[45],
       _bvY_=Time0[46],
       _bvZ_=Time0[47],
       _bv0_=Time0[48],
       _bv1_=Time0[49],
       _bv2_=Time0[50],
       epoch=caml_call1(_bvH_,Time0[13][67]);
      function is_earlier(t1,t2){return caml_call2(_bvy_,t1,t2)}
      function is_later(t1,t2){return caml_call2(_bvx_,t1,t2)}
      function of_span_in_seconds(span_in_seconds)
       {var _bwS_=caml_call1(Time_in_seconds[1][2],span_in_seconds);
        return caml_call1(Time0[13][76],_bwS_)}
      function of_time_in_seconds(time_in_seconds)
       {var
         _bwP_=caml_call1(Time_in_seconds[4],time_in_seconds),
         _bwQ_=caml_call1(Time_in_seconds[1][2],_bwP_),
         _bwR_=caml_call1(Time0[13][76],_bwQ_);
        return caml_call1(Time0[29],_bwR_)}
      function index$0(t,time)
       {var
         _bwM_=caml_call1(Time0[28],time),
         _bwN_=caml_call1(Time0[13][87],_bwM_),
         _bwO_=caml_call1(Time_in_seconds[1][1],_bwN_);
        return index(t,caml_call1(Time_in_seconds[3],_bwO_))}
      function index_of_relative$0(t,relative)
       {var
         _bwJ_=caml_call1(Time0[49][24],relative),
         _bwK_=caml_call1(Time0[13][87],_bwJ_),
         _bwL_=caml_call1(Time_in_seconds[1][1],_bwK_);
        return index_of_relative(t,caml_call1(Time_in_seconds[2][1],_bwL_))}
      function index_offset_from_utc_exn$0(t,index)
       {return of_span_in_seconds(index_offset_from_utc_exn(t,index))}
      function index_prev_clock_shift_time_exn$0(t,index)
       {return of_time_in_seconds(index_prev_clock_shift_time_exn(t,index))}
      function index_next_clock_shift_time_exn$0(t,index)
       {return of_time_in_seconds(index_next_clock_shift_time_exn(t,index))}
      function index_prev_clock_shift_amount_exn$0(t,index)
       {return of_span_in_seconds(index_prev_clock_shift_amount_exn(t,index))}
      function index_next_clock_shift_amount_exn$0(t,index)
       {return of_span_in_seconds(index_next_clock_shift_amount_exn(t,index))}
      function abbreviation(t,time)
       {return index_abbreviation_exn(t,index$0(t,time))}
      function index_prev_clock_shift(t,index)
       {var match=index_has_prev_clock_shift(t,index);
        if(0 === match)return 0;
        var _bwI_=index_prev_clock_shift_amount_exn$0(t,index);
        return [0,[0,index_prev_clock_shift_time_exn$0(t,index),_bwI_]]}
      function prev_clock_shift(t,time)
       {return index_prev_clock_shift(t,index$0(t,time))}
      function next_clock_shift(t,time)
       {var index=index$0(t,time);
        return index_prev_clock_shift(t,caml_call1(Index[1],index))}
      function relative_time_of_absolute_time(t,time)
       {var
         index=index$0(t,time),
         offset_from_utc=index_offset_from_utc_exn$0(t,index);
        return caml_call2(Time0[49][30],time,offset_from_utc)}
      function absolute_time_of_relative_time(t,relative)
       {var
         index=index_of_relative$0(t,relative),
         offset_from_utc=index_offset_from_utc_exn$0(t,index);
        return caml_call2(Time0[49][31],relative,offset_from_utc)}
      var
       Zone=
        [0,
         sexp_of_t$78,
         compare$59,
         input_tz_file,
         likely_machine_zones,
         of_utc_offset,
         utc,
         name$51,
         original_filename,
         digest,
         reset_transition_cache,
         Index,
         index$0,
         index_of_relative$0,
         index_offset_from_utc_exn$0,
         index_abbreviation_exn,
         index_has_prev_clock_shift,
         index_prev_clock_shift_time_exn$0,
         index_prev_clock_shift_amount_exn$0,
         index_has_next_clock_shift,
         index_next_clock_shift_time_exn$0,
         index_next_clock_shift_amount_exn$0,
         abbreviation,
         absolute_time_of_relative_time,
         relative_time_of_absolute_time,
         next_clock_shift,
         prev_clock_shift];
      function abs_diff(t1,t2)
       {var _bwH_=caml_call2(_bvD_,t1,t2);
        return caml_call1(Time0[13][91],_bwH_)}
      function of_date_ofday(zone,date,ofday)
       {var relative=caml_call2(Time0[49][26],date,ofday);
        return caml_call2(Zone[23],zone,relative)}
      function of_date_ofday_precise(date,ofday,zone)
       {var
         start_of_day=of_date_ofday(zone,date,Time0[14][60]),
         proposed_time=
          caml_call2(_bvB_,start_of_day,caml_call1(Time0[14][63],ofday)),
         match=caml_call2(Zone[25],zone,start_of_day);
        if(match)
         {var
           match$0=match[1],
           shift_amount=match$0[2],
           shift_start=match$0[1],
           shift_backwards=
            caml_call2(Time0[13][16],shift_amount,Time0[13][67]);
          if(shift_backwards)
           var s=caml_call2(_bvB_,shift_start,shift_amount),e=shift_start;
          else
           var
            e$0=caml_call2(_bvB_,shift_start,shift_amount),
            s=shift_start,
            e=e$0;
          if(caml_call2(_bvM_,proposed_time,s))
           return [0,881568161,proposed_time];
          if(caml_call2(_bvJ_,s,proposed_time))
           if(caml_call2(_bvM_,proposed_time,e))
            return shift_backwards
                    ?[0,
                      748757384,
                      [0,
                       proposed_time,
                       caml_call2(_bvC_,proposed_time,shift_amount)]]
                    :[0,744337004,shift_start];
          return [0,881568161,caml_call2(_bvC_,proposed_time,shift_amount)]}
        return [0,881568161,proposed_time]}
      var date_cache=[0,Zone[6],epoch,epoch,epoch,unix_epoch];
      function reset_date_cache(param)
       {date_cache[1] = Zone[6];
        date_cache[2] = epoch;
        date_cache[3] = epoch;
        date_cache[4] = epoch;
        date_cache[5] = unix_epoch;
        return 0}
      function set_date_cache(time,zone)
       {var _bwB_=caml_call2(_R7_,zone,date_cache[1]);
        if(_bwB_)
         {var _bwC_=caml_call2(Time0[30],time,date_cache[2]);
          if(_bwC_)
           var match=caml_call2(Time0[34],time,date_cache[3]),switch$0=1;
          else
           var _bwD_=_bwC_,switch$0=0}
        else
         var _bwD_=_bwB_,switch$0=0;
        if(! switch$0)var match=_bwD_;
        if(0 === match)
         {var
           index=caml_call2(Zone[12],zone,time),
           offset_from_utc=caml_call2(Zone[14],zone,index),
           rel=caml_call2(Time0[49][30],time,offset_from_utc),
           date=caml_call1(Time0[49][28],rel),
           _bwE_=caml_call1(Time0[49][29],rel),
           span=caml_call1(Time0[14][63],_bwE_),
           rel_day_start=caml_call2(Time0[49][20],rel,span),
           rel_day_until=caml_call2(Time0[49][19],rel_day_start,Time0[13][65]),
           effective_day_start=
            caml_call2(Time0[49][31],rel_day_start,offset_from_utc),
           effective_day_until=
            caml_call2(Time0[49][31],rel_day_until,offset_from_utc),
           match$0=caml_call2(Zone[16],zone,index);
          if(0 === match$0)
           var cache_start_incl=effective_day_start;
          else
           var
            _bwG_=caml_call2(Zone[17],zone,index),
            cache_start_incl=caml_call2(Time0[39],_bwG_,effective_day_start);
          var match$1=caml_call2(Zone[19],zone,index);
          if(0 === match$1)
           var cache_until_excl=effective_day_until;
          else
           var
            _bwF_=caml_call2(Zone[20],zone,index),
            cache_until_excl=caml_call2(Time0[38],_bwF_,effective_day_until);
          date_cache[1] = zone;
          date_cache[2] = cache_start_incl;
          date_cache[3] = cache_until_excl;
          date_cache[4] = effective_day_start;
          date_cache[5] = date;
          return 0}
        return 0}
      function to_date(time,zone)
       {set_date_cache(time,zone);return date_cache[5]}
      function to_ofday(time,zone)
       {set_date_cache(time,zone);
        var _bwA_=caml_call2(Time0[25],time,date_cache[4]);
        return caml_call1(Time0[14][64],_bwA_)}
      function to_date_ofday(time,zone)
       {var _bwz_=to_ofday(time,zone);return [0,to_date(time,zone),_bwz_]}
      function to_date_ofday_precise(time,zone)
       {var
         match=to_date_ofday(time,zone),
         ofday=match[2],
         date=match[1],
         match$0=caml_call2(Zone[25],zone,time),
         clock_shift_before_or_at=caml_call2(Zone[26],zone,time);
        if(clock_shift_before_or_at)
         {var
           match$2=clock_shift_before_or_at[1],
           amount=match$2[2],
           start=match$2[1];
          if
           (caml_call2
             (_bvx_,
              caml_call2(_bvB_,start,caml_call1(Time0[13][91],amount)),
              time))
           {if(caml_call2(Time0[13][15],amount,Time0[13][67]))
             {var match$1=caml_call2(Time0[14][66],ofday,amount);
              if(match$1)
               var ofday$0=match$1[1],_bww_=[0,-687020392,[0,date,ofday$0]];
              else
               var
                _bwt_=[0,[1,[0,_ag1_,[0,caml_call1(Zone[1],zone),0]]],0],
                _bwu_=caml_call1(_bvG_,time),
                _bwv_=
                 [0,[1,[0,_ag2_,[0,caml_call1(Time0[13][10],_bwu_),0]]],_bwt_],
                _bww_=
                 caml_call1
                  (_kM_,
                   [1,
                    [0,
                     caml_call1
                      (Sexplib0_Sexp_conv[7],cst_Time_to_date_ofday_precise),
                     _bwv_]]);
              var _bwx_=_bww_}
            else
             {if(! caml_call2(Time0[13][16],amount,Time0[13][67]))
               throw [0,Assert_failure,_ag3_];
              var
               _bwx_=
                [0,
                 1043984139,
                 caml_call2(_bvC_,time,caml_call1(Time0[13][91],amount))]}
            var ambiguity=_bwx_,switch$0=1}
          else
           var switch$0=0}
        else
         var switch$0=0;
        if(! switch$0)
         {if(match$0)
           {var match$3=match$0[1],amount$0=match$3[2],start$0=match$3[1];
            if
             (caml_call2
               (_bvv_,
                caml_call2(_bvC_,start$0,caml_call1(Time0[13][91],amount$0)),
                time))
             {if(caml_call2(Time0[13][15],amount$0,Time0[13][67]))
               var _bwy_=881570188;
              else
               {if(! caml_call2(Time0[13][16],amount$0,Time0[13][67]))
                 throw [0,Assert_failure,_ag4_];
                var
                 _bwy_=
                  [0,
                   1043984139,
                   caml_call2(_bvB_,time,caml_call1(Time0[13][91],amount$0))]}
              var ambiguity=_bwy_,switch$1=1}
            else
             var switch$1=0}
          else
           var switch$1=0;
          if(! switch$1)var ambiguity=881570188}
        return [0,date,ofday,ambiguity]}
      function convert(from_tz,to_tz,date,ofday)
       {var start_time=of_date_ofday(from_tz,date,ofday);
        return to_date_ofday(start_time,to_tz)}
      function utc_offset$0(t,zone)
       {var
         utc_epoch=caml_call2(Zone[24],zone,t),
         _bwr_=caml_call1(_bvG_,t),
         _bws_=caml_call1(Time0[49][24],utc_epoch);
        return caml_call2(Time0[13][90],_bws_,_bwr_)}
      function offset_string(time,zone)
       {var
         utc_offset=utc_offset$0(time,zone),
         is_utc=caml_call2(Time0[13][14],utc_offset,Time0[13][67]);
        if(is_utc)return cst_Z;
        var
         _bwn_=caml_call1(Time0[13][91],utc_offset),
         _bwo_=caml_call1(Time0[14][64],_bwn_),
         _bwp_=[0,caml_call1(Time0[14][71],_bwo_),0],
         _bwq_=
          caml_call2(Time0[13][16],utc_offset,Time0[13][67])?cst$169:cst$170;
        return caml_call2(_Hg_,0,[0,_bwq_,_bwp_])}
      function to_string_abs_parts(time,zone)
       {var
         match=to_date_ofday(time,zone),
         ofday=match[2],
         date=match[1],
         offset_string$0=offset_string(time,zone),
         _bwm_=
          [0,
           caml_call2
            (_Hg_,
             _ag5_,
             [0,caml_call1(Time0[14][57],ofday),[0,offset_string$0,0]]),
           0];
        return [0,to_string$22(date),_bwm_]}
      function to_string_abs_trimmed(time,zone)
       {var
         match=to_date_ofday(time,zone),
         ofday=match[2],
         date=match[1],
         offset_string$0=offset_string(time,zone),
         _bwl_=
          [0,
           caml_call2(_Dw_,caml_call1(Time0[14][71],ofday),offset_string$0),
           0];
        return caml_call2(_Hg_,_ag6_,[0,to_string$22(date),_bwl_])}
      function to_string_abs(time,zone)
       {return caml_call2(_Hg_,_ag7_,to_string_abs_parts(time,zone))}
      function to_string(t){return to_string_abs(t,Zone[6])}
      function to_string_iso8601_basic(time,zone)
       {return caml_call2(_Hg_,_ag8_,to_string_abs_parts(time,zone))}
      function to_string_trimmed(t,zone)
       {var
         match=to_date_ofday(t,zone),
         sec=match[2],
         date=match[1],
         _bwk_=caml_call2(_Dw_,cst$171,caml_call1(Time0[14][71],sec));
        return caml_call2(_Dw_,to_string$22(date),_bwk_)}
      function to_sec_string(t,zone)
       {var
         match=to_date_ofday(t,zone),
         sec=match[2],
         date=match[1],
         _bwj_=caml_call2(_Dw_,cst$172,caml_call1(Time0[14][72],sec));
        return caml_call2(_Dw_,to_string$22(date),_bwj_)}
      function to_filename_string(t,zone)
       {var
         match=to_date_ofday(t,zone),
         ofday=match[2],
         date=match[1],
         _bwi_=
          caml_call2
           (_Dw_,
            cst$173,
            caml_call3(_GA_,58,45,caml_call1(Time0[14][57],ofday)));
        return caml_call2(_Dw_,to_string$22(date),_bwi_)}
      function of_filename_string(s,zone)
       {try
         {var match=caml_call2(_GP_,s,95);
          if(match)
           var
            match$0=match[1],
            ofday=match$0[2],
            date=match$0[1],
            date$0=of_string$19(date),
            ofday$0=caml_call3(_GA_,45,58,ofday),
            ofday$1=caml_call1(Time0[14][56],ofday$0),
            _bwh_=of_date_ofday(zone,date$0,ofday$1);
          else
           var _bwh_=caml_call1(failwith,cst_no_space_in_filename_string);
          return _bwh_}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          return caml_call4(_R6_,_ag9_,s,caml_call1(Base_Exn[9],exn),0)}}
      function of_localized_string(zone,str)
       {try
         {var match=caml_call2(_GP_,str,32);
          if(match)
           var
            match$0=match[1],
            time=match$0[2],
            date=match$0[1],
            date$0=of_string$19(date),
            ofday=caml_call1(Time0[14][56],time),
            _bwg_=of_date_ofday(zone,date$0,ofday);
          else
           var _bwg_=caml_call1(invalid_arg,caml_call2(_eJ_,_ag__,str));
          return _bwg_}
        catch(e)
         {e = caml_wrap_exception(e);
          return caml_call2(Base_Exn[7],e,cst_Time_of_localized_string)}}
      function occurrence(before_or_after,t,ofday,zone)
       {var
         first_guess_date=to_date(t,zone),
         first_guess=of_date_ofday(zone,first_guess_date,ofday);
        if(476625469 <= before_or_after)
         var cmp=_bvI_,increment=1;
        else
         var cmp=_bvJ_,increment=-1;
        return caml_call2(cmp,first_guess,t)
                ?first_guess
                :of_date_ofday
                  (zone,add_days$0(first_guess_date,increment),ofday)}
      function ensure_colon_in_offset(offset)
       {var offset_length=caml_ml_string_length(offset);
        if(caml_call2(_xw_,offset_length,2))
         if(caml_call1(_CS_,caml_string_get(offset,0)))
          if(caml_call1(_CS_,caml_string_get(offset,offset_length - 1 | 0)))
           return caml_call2(_Dw_,offset,cst_00$4);
        if(! caml_call2(_Ct_,caml_string_get(offset,1),58))
         if(! caml_call2(_Ct_,caml_string_get(offset,2),58))
          {if(! caml_call2(_xt_,offset_length,3))
            if(! caml_call2(_xu_,offset_length,4))
             {var
               _bwf_=
                [0,
                 cst$174,
                 [0,slice$2(offset,offset_length - 2 | 0,offset_length),0]];
              return caml_call2
                      (_Hg_,0,[0,slice$2(offset,0,offset_length - 2 | 0),_bwf_])}
           return caml_call3(_R5_,_ag$_,offset,0)}
        return offset}
      var
       Time_of_string=
        [248,
         cst_Core_kernel_Time_Make_Time0_Time_of_string,
         caml_fresh_oo_id(0)];
      function _bv3_(param)
       {if(param[1] === Time_of_string)
         {var
           v1=param[3],
           v0=param[2],
           v0$0=caml_call1(sexp_of_t$58,v0),
           v1$0=caml_call1(Base_Exn[1],v1);
          return [1,[0,_aha_,[0,v0$0,[0,v1$0,0]]]]}
        throw [0,Assert_failure,_ahb_]}
      caml_call3(Sexplib0_Sexp_conv[51][2],0,Time_of_string,_bv3_);
      function of_string_gen(default_zone,find_zone,s)
       {try
         {var match=caml_call2(_GN_,s,32);
          if(match)
           {var _bv5_=match[2],_bv6_=match[1];
            if(_bv5_)
             {var _bv7_=_bv5_[2],_bv8_=_bv5_[1];
              if(_bv7_)
               {var _bv9_=_bv7_[2],_bv__=_bv7_[1];
                if(_bv9_)
                 if(_bv9_[2])
                  var switch$0=0;
                 else
                  var
                   ofday$2=_bv9_[1],
                   date=
                    caml_call2
                     (_Hg_,
                      0,
                      [0,_bv6_,[0,cst$176,[0,_bv8_,[0,cst$175,[0,_bv__,0]]]]]),
                   ofday=ofday$2,
                   tz=0,
                   switch$0=1;
                else
                 var date=_bv6_,ofday=_bv8_,tz=[0,_bv__],switch$0=1}
              else
               var date=_bv6_,ofday=_bv8_,tz=0,switch$0=1}
            else
             {var match$4=caml_call2(_GO_,_bv6_,84);
              if(match$4)
               var
                match$5=match$4[1],
                ofday$3=match$5[2],
                date$1=match$5[1],
                date=date$1,
                ofday=ofday$3,
                tz=0,
                switch$0=1;
              else
               var
                _bwd_=caml_call1(failwith,cst_no_spaces_or_T_found),
                date=_bwd_[1],
                ofday=_bwd_[2],
                tz=_bwd_[3],
                switch$0=1}}
          else
           var switch$0=0;
          if(! switch$0)
           var
            _bv$_=caml_call1(failwith,cst_too_many_spaces),
            date=_bv$_[1],
            ofday=_bv$_[2],
            tz=_bv$_[3];
          var
           ofday_to_sec=
            function(od)
             {var _bwe_=caml_call1(Time0[14][63],od);
              return caml_call1(Time0[13][83],_bwe_)};
          if(tz)
           var ofday$0=ofday,utc_offset$0=0;
          else
           if
            (caml_call2
              (_Ct_,
               caml_string_get(ofday,caml_ml_string_length(ofday) - 1 | 0),
               90))
            var
             ofday$0=
              caml_call3(_HE_,ofday,0,caml_ml_string_length(ofday) - 1 | 0),
             utc_offset$0=utc_offset;
           else
            {var match$0=caml_call2(_GP_,ofday,43);
             if(match$0)
              var
               match$1=match$0[1],
               r=match$1[2],
               l=match$1[1],
               _bwb_=ensure_colon_in_offset(r),
               ofday$0=l,
               utc_offset$0=[0,ofday_to_sec(caml_call1(Time0[14][56],_bwb_))];
             else
              {var match$2=caml_call2(_GP_,ofday,45);
               if(match$2)
                var
                 match$3=match$2[1],
                 r$0=match$3[2],
                 l$0=match$3[1],
                 _bwc_=ensure_colon_in_offset(r$0),
                 ofday$0=l$0,
                 utc_offset$0=
                  [0,-1 * ofday_to_sec(caml_call1(Time0[14][56],_bwc_))];
               else
                var ofday$0=ofday,utc_offset$0=0}}
          var
           date$0=of_string$19(date),
           ofday$1=caml_call1(Time0[14][56],ofday$0);
          if(tz)
           var
            tz$0=tz[1],
            _bwa_=of_date_ofday(caml_call1(find_zone,tz$0),date$0,ofday$1);
          else
           if(utc_offset$0)
            var
             utc_offset$1=utc_offset$0[1],
             utc_t=of_date_ofday(Zone[6],date$0,ofday$1),
             _bwa_=
              caml_call2(_bvC_,utc_t,caml_call1(Time0[13][73],utc_offset$1));
           else
            var
             zone=caml_call1(default_zone,0),
             _bwa_=of_date_ofday(zone,date$0,ofday$1);
          return _bwa_}
        catch(e){e = caml_wrap_exception(e);throw [0,Time_of_string,s,e]}}
      function of_string(s)
       {function default_zone(param){return Zone[6]}
        function find_zone(zone_name)
         {return caml_call3(_R5_,_ahc_,zone_name,0)}
        return of_string_gen(default_zone,find_zone,s)}
      function next_multiple(opt,base,after,interval,param)
       {if(opt)var sth=opt[1],can_equal_after=sth;else var can_equal_after=0;
        if(caml_call2(Time0[13][13],interval,Time0[13][67]))
         failwiths
          (0,
           _ahd_,
           cst_Time_next_multiple_got_nonpositive_interval,
           interval,
           Time0[13][10]);
        var base_to_after=caml_call2(_bvD_,after,base);
        if(caml_call2(Time0[13][16],base_to_after,Time0[13][67]))return base;
        var
         _bv4_=
          caml_call2
           (round$3,_ahe_,caml_call2(Time0[13][95],base_to_after,interval)),
         next=caml_call2(_bvB_,base,caml_call2(Time0[13][93],interval,_bv4_));
        if(! caml_call2(_bvL_,next,after))
         {var switch$0=can_equal_after?caml_call2(_bvK_,next,after)?0:1:1;
          if(switch$0)return caml_call2(_bvB_,next,interval)}
        return next}
      return [0,
              _bvf_,
              _bvg_,
              _bvh_,
              _bvi_,
              _bvj_,
              _bvk_,
              _bvl_,
              _bvm_,
              _bvn_,
              _bvo_,
              _bvp_,
              _bvq_,
              _bvr_,
              _bvs_,
              _bvt_,
              _bvu_,
              _bvv_,
              _bvw_,
              _bvx_,
              _bvy_,
              _bvz_,
              _bvA_,
              _bvE_,
              _bvF_,
              _bvG_,
              _bvH_,
              _bvI_,
              _bvJ_,
              _bvK_,
              _bvL_,
              _bvM_,
              _bvN_,
              _bvO_,
              _bvP_,
              _bvQ_,
              _bvR_,
              _bvS_,
              _bvT_,
              _bvU_,
              _bvV_,
              _bvW_,
              _bvX_,
              _bvY_,
              _bvZ_,
              _bv0_,
              _bv1_,
              _bv2_,
              Zone,
              _bvB_,
              _bvC_,
              _bvD_,
              abs_diff,
              is_earlier,
              is_later,
              of_date_ofday,
              of_date_ofday_precise,
              to_date_ofday,
              to_date_ofday_precise,
              to_date,
              to_ofday,
              reset_date_cache,
              epoch,
              convert,
              utc_offset$0,
              of_string,
              to_string,
              to_filename_string,
              of_filename_string,
              to_string_trimmed,
              to_sec_string,
              of_localized_string,
              of_string_gen,
              to_string_abs,
              to_string_abs_trimmed,
              to_string_abs_parts,
              to_string_iso8601_basic,
              occurrence,
              next_multiple]}
    var Core_kernel_Time=[0,_ahf_];
    caml_register_global(7503,Core_kernel_Time,"Core_kernel__Time");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$329);
    caml_call1(Expect_test_collector[4][1],cst_src_time_ns_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$330,cst$177);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$331);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Time_ns_intf=[0];
    caml_register_global
     (7504,Core_kernel_Time_ns_intf,"Core_kernel__Time_ns_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$332);
    caml_call1(Expect_test_collector[4][1],cst_src_time_ns_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$333,cst$178);
    var arch_sixtyfour$0=64 === Stdlib_sys[10]?1:0;
    function float$0(x){return caml_call1(_Ax_,x)}
    function hash$40(x){return caml_call1(_Au_,x)}
    var
     _ahg_=
      [0,
       [0,
        caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$181),
        0,
        bin_shape_t$42],
       0],
     _ahh_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_time_ns_ml_22_4),
     group$111=caml_call2(Bin_prot_Shape[6],_ahh_,_ahg_),
     _ahi_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$182),
     bin_shape_t$89=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$111,_ahi_),0),
     bin_writer_t$80=[0,bin_size_t$40,bin_write_t$40],
     bin_reader_t$80=[0,bin_read_t$81,bin_read_t$82],
     bin_t$80=[0,bin_shape_t$89,bin_writer_t$80,bin_reader_t$80],
     Typename_of_t$21=caml_call1(Typerep_lib_Make_typename[1],[0,name$54]),
     typename_of_t$21=Typename_of_t$21[2],
     name_of_t$15=Typename_of_t$21[1],
     typerep_of_t$22=[9,[0,name_of_t$15,[0,typerep_of_t$7]]];
    function t_of_sexp$86(sexp)
     {if(0 === sexp[0])
       return caml_call2(Sexplib0_Sexp_conv_error[15],tp_loc$34,sexp);
      var
       field_sexps=sexp[1],
       sign_field=[0,0],
       hr_field=[0,0],
       min_field=[0,0],
       sec_field=[0,0],
       ms_field=[0,0],
       us_field=[0,0],
       ns_field=[0,0],
       duplicates=[0,0],
       extra=[0,0],
       param=field_sexps;
      for(;;)
       {if(param)
         {var _bu5_=param[1];
          if(1 === _bu5_[0])
           {var _bu6_=_bu5_[1];
            if(_bu6_)
             {var _bu7_=_bu6_[1];
              if(0 === _bu7_[0])
               {var _bu8_=_bu6_[2],_bu9_=_bu7_[1];
                if(! _bu8_)
                 {var tail$0=param[2];
                  if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_bu9_,extra[1]];
                  var param=tail$0;
                  continue}
                if(! _bu8_[2])
                 {var tail=param[2],field_sexp=_bu8_[1];
                  if(caml_string_notequal(_bu9_,cst_hr$1))
                   if(caml_string_notequal(_bu9_,cst_min$1))
                    if(caml_string_notequal(_bu9_,cst_ms$4))
                     if(caml_string_notequal(_bu9_,cst_ns$3))
                      if(caml_string_notequal(_bu9_,cst_sec$1))
                       if(caml_string_notequal(_bu9_,cst_sign$1))
                        if(caml_string_notequal(_bu9_,cst_us$3))
                         {if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_bu9_,extra[1]]}
                        else
                         if(us_field[1])
                          duplicates[1] = [0,_bu9_,duplicates[1]];
                         else
                          {var fvalue=caml_call1(t_of_sexp$32,field_sexp);
                           us_field[1] = [0,fvalue]}
                       else
                        if(sign_field[1])
                         duplicates[1] = [0,_bu9_,duplicates[1]];
                        else
                         {var fvalue$0=caml_call1(_Ft_,field_sexp);
                          sign_field[1] = [0,fvalue$0]}
                      else
                       if(sec_field[1])
                        duplicates[1] = [0,_bu9_,duplicates[1]];
                       else
                        {var fvalue$1=caml_call1(t_of_sexp$32,field_sexp);
                         sec_field[1] = [0,fvalue$1]}
                     else
                      if(ns_field[1])
                       duplicates[1] = [0,_bu9_,duplicates[1]];
                      else
                       {var fvalue$2=caml_call1(t_of_sexp$32,field_sexp);
                        ns_field[1] = [0,fvalue$2]}
                    else
                     if(ms_field[1])
                      duplicates[1] = [0,_bu9_,duplicates[1]];
                     else
                      {var fvalue$3=caml_call1(t_of_sexp$32,field_sexp);
                       ms_field[1] = [0,fvalue$3]}
                   else
                    if(min_field[1])
                     duplicates[1] = [0,_bu9_,duplicates[1]];
                    else
                     {var fvalue$4=caml_call1(t_of_sexp$32,field_sexp);
                      min_field[1] = [0,fvalue$4]}
                  else
                   if(hr_field[1])
                    duplicates[1] = [0,_bu9_,duplicates[1]];
                   else
                    {var fvalue$5=caml_call1(t_of_sexp$32,field_sexp);
                     hr_field[1] = [0,fvalue$5]}
                  var param=tail;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[9],tp_loc$34,_bu5_)}
        if(duplicates[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[11],tp_loc$34,duplicates[1],sexp);
        if(extra[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],tp_loc$34,extra[1],sexp);
        var
         _bu__=sign_field[1],
         _bu$_=hr_field[1],
         _bva_=min_field[1],
         _bvb_=sec_field[1],
         _bvc_=ms_field[1],
         _bvd_=us_field[1],
         _bve_=ns_field[1];
        if(_bu__)
         if(_bu$_)
          if(_bva_)
           if(_bvb_)
            if(_bvc_)
             if(_bvd_)
              if(_bve_)
               {var
                 ns_value=_bve_[1],
                 us_value=_bvd_[1],
                 ms_value=_bvc_[1],
                 sec_value=_bvb_[1],
                 min_value=_bva_[1],
                 hr_value=_bu$_[1],
                 sign_value=_bu__[1];
                return [0,
                        sign_value,
                        hr_value,
                        min_value,
                        sec_value,
                        ms_value,
                        us_value,
                        ns_value]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[14],
                 tp_loc$34,
                 sexp,
                 [0,
                  [0,0 === sign_field[1]?1:0,cst_sign$2],
                  [0,
                   [0,0 === hr_field[1]?1:0,cst_hr$2],
                   [0,
                    [0,0 === min_field[1]?1:0,cst_min$2],
                    [0,
                     [0,0 === sec_field[1]?1:0,cst_sec$2],
                     [0,
                      [0,0 === ms_field[1]?1:0,cst_ms$5],
                      [0,
                       [0,0 === us_field[1]?1:0,cst_us$4],
                       [0,[0,0 === ns_field[1]?1:0,cst_ns$4],0]]]]]]])}}
    function sexpifier$0(param)
     {var
       v_ns=param[7],
       v_us=param[6],
       v_ms=param[5],
       v_sec=param[4],
       v_min=param[3],
       v_hr=param[2],
       v_sign=param[1],
       arg=caml_call1(sexp_of_t$43,v_ns),
       bnds=[0,[1,[0,_ahj_,[0,arg,0]]],0],
       arg$0=caml_call1(sexp_of_t$43,v_us),
       bnds$0=[0,[1,[0,_ahk_,[0,arg$0,0]]],bnds],
       arg$1=caml_call1(sexp_of_t$43,v_ms),
       bnds$1=[0,[1,[0,_ahl_,[0,arg$1,0]]],bnds$0],
       arg$2=caml_call1(sexp_of_t$43,v_sec),
       bnds$2=[0,[1,[0,_ahm_,[0,arg$2,0]]],bnds$1],
       arg$3=caml_call1(sexp_of_t$43,v_min),
       bnds$3=[0,[1,[0,_ahn_,[0,arg$3,0]]],bnds$2],
       arg$4=caml_call1(sexp_of_t$43,v_hr),
       bnds$4=[0,[1,[0,_aho_,[0,arg$4,0]]],bnds$3],
       arg$5=caml_call1(_Fu_,v_sign),
       bnds$5=[0,[1,[0,_ahp_,[0,arg$5,0]]],bnds$4];
      return [1,bnds$5]}
    var
     comparator$27=caml_compare,
     nanosecond$0=caml_call1(of_int$1,1),
     microsecond$0=caml_call2(_z9_,caml_call1(of_int$1,1e3),nanosecond$0),
     millisecond$0=caml_call2(_z9_,caml_call1(of_int$1,1e3),microsecond$0),
     second$1=caml_call2(_z9_,caml_call1(of_int$1,1e3),millisecond$0),
     minute$0=caml_call2(_z9_,caml_call1(of_int$1,60),second$1),
     hour$1=caml_call2(_z9_,caml_call1(of_int$1,60),minute$0),
     day$1=caml_call2(_z9_,caml_call1(of_int$1,24),hour$1),
     _ahq_=caml_call1(of_int$1,365),
     max_value$6=
      caml_call2(_z9_,caml_call2(_z9_,caml_call1(of_int$1,135),_ahq_),day$1),
     min_value$6=caml_call1(_z7_,max_value$6);
    function create$25(opt,_buY_,_buX_,_buW_,_buV_,_buU_,_buT_,_buS_,param)
     {if(opt)var sth=opt[1],sign=sth;else var sign=2;
      if(_buY_)var sth$0=_buY_[1],days=sth$0;else var days=0;
      if(_buX_)var sth$1=_buX_[1],hr=sth$1;else var hr=0;
      if(_buW_)var sth$2=_buW_[1],minutes=sth$2;else var minutes=0;
      if(_buV_)var sth$3=_buV_[1],sec=sth$3;else var sec=0;
      if(_buU_)var sth$4=_buU_[1],ms=sth$4;else var ms=0;
      if(_buT_)var sth$5=_buT_[1],us=sth$5;else var us=0;
      if(_buS_)var sth$6=_buS_[1],ns=sth$6;else var ns=0;
      var
       _buZ_=caml_call2(_z9_,caml_call1(of_int$1,ns),nanosecond$0),
       _bu0_=caml_call2(_z9_,caml_call1(of_int$1,us),microsecond$0),
       _bu1_=caml_call2(_z9_,caml_call1(of_int$1,ms),millisecond$0),
       _bu2_=caml_call2(_z9_,caml_call1(of_int$1,sec),second$1),
       _bu3_=caml_call2(_z9_,caml_call1(of_int$1,minutes),minute$0),
       _bu4_=caml_call2(_z9_,caml_call1(of_int$1,hr),hour$1),
       t=
        caml_call2
         (_z$_,
          caml_call2
           (_z$_,
            caml_call2
             (_z$_,
              caml_call2
               (_z$_,
                caml_call2
                 (_z$_,
                  caml_call2
                   (_z$_,
                    caml_call2(_z9_,caml_call1(of_int$1,days),day$1),
                    _bu4_),
                  _bu3_),
                _bu2_),
              _bu1_),
            _bu0_),
          _buZ_);
      return 0 === sign?caml_call1(_z7_,t):t}
    function to_parts$1(t)
     {var
       mag=caml_call1(_zP_,t),
       _buL_=
        caml_call1
         (to_int_exn$2,
          caml_call2(_z3_,caml_call2(_z2_,mag,microsecond$0),nanosecond$0)),
       _buM_=
        caml_call1
         (to_int_exn$2,
          caml_call2(_z3_,caml_call2(_z2_,mag,millisecond$0),microsecond$0)),
       _buN_=
        caml_call1
         (to_int_exn$2,
          caml_call2(_z3_,caml_call2(_z2_,mag,second$1),millisecond$0)),
       _buO_=
        caml_call1
         (to_int_exn$2,
          caml_call2(_z3_,caml_call2(_z2_,mag,minute$0),second$1)),
       _buP_=
        caml_call1
         (to_int_exn$2,caml_call2(_z3_,caml_call2(_z2_,mag,hour$1),minute$0)),
       _buQ_=caml_call1(to_int_exn$2,caml_call2(_z3_,mag,hour$1)),
       _buR_=caml_call2(_An_,t,epoch)?0:caml_call2(_Ao_,t,epoch)?2:1;
      return [0,_buR_,_buQ_,_buP_,_buO_,_buN_,_buM_,_buL_]}
    function of_parts(param)
     {var
       ns=param[7],
       us=param[6],
       ms=param[5],
       sec=param[4],
       min=param[3],
       hr=param[2],
       sign=param[1];
      return create$25
              ([0,sign],0,[0,hr],[0,min],[0,sec],[0,ms],[0,us],[0,ns],0)}
    function of_ns$0(f){return caml_call1(int63_round_nearest_exn,f)}
    function of_int63_ns(i){return i}
    function of_int_us(i)
     {return caml_call2(_z9_,caml_call1(of_int$1,i),microsecond$0)}
    function of_int_ms(i)
     {return caml_call2(_z9_,caml_call1(of_int$1,i),millisecond$0)}
    function of_int_sec$0(i)
     {return caml_call2(_z9_,caml_call1(of_int$1,i),second$1)}
    function of_us$0(f)
     {return caml_call1(int63_round_nearest_exn,f * float$0(microsecond$0))}
    function of_ms$0(f)
     {return caml_call1(int63_round_nearest_exn,f * float$0(millisecond$0))}
    function of_sec(f)
     {return caml_call1(int63_round_nearest_exn,f * float$0(second$1))}
    function of_min$0(f)
     {return caml_call1(int63_round_nearest_exn,f * float$0(minute$0))}
    function of_hr$0(f)
     {return caml_call1(int63_round_nearest_exn,f * float$0(hour$1))}
    function of_day$0(f)
     {return caml_call1(int63_round_nearest_exn,f * float$0(day$1))}
    function of_sec_with_microsecond_precision(sec)
     {var us=caml_call1(int63_round_nearest_exn,sec * 1e6);
      return caml_call2(_z9_,us,caml_call1(of_int$1,1e3))}
    function to_ns$0(t){return float$0(t)}
    function to_int63_ns(t){return t}
    function to_us$0(t)
     {var _buK_=float$0(microsecond$0);return float$0(t) / _buK_}
    function to_ms$0(t)
     {var _buJ_=float$0(millisecond$0);return float$0(t) / _buJ_}
    function to_sec(t){var _buI_=float$0(second$1);return float$0(t) / _buI_}
    function to_min$0(t)
     {var _buH_=float$0(minute$0);return float$0(t) / _buH_}
    function to_hr$0(t){var _buG_=float$0(hour$1);return float$0(t) / _buG_}
    function to_day$0(t){var _buF_=float$0(day$1);return float$0(t) / _buF_}
    function to_int_us(t)
     {return caml_call1(to_int_exn$2,caml_call2(_z3_,t,microsecond$0))}
    function to_int_ms(t)
     {return caml_call1(to_int_exn$2,caml_call2(_z3_,t,millisecond$0))}
    function to_int_sec(t)
     {return caml_call1(to_int_exn$2,caml_call2(_z3_,t,second$1))}
    function _ahr_(param){return caml_call2(_xu_,to_int_sec(_zw_),0)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[4],
      Inline_test_config,
      cst_Int_to_int_sec_Int63_max_value_0,
      _ahs_,
      cst_src_time_ns_ml$0,
      135,
      2,
      76,
      _ahr_);
    var
     _aht_=
      arch_sixtyfour$0
       ?function(i){return caml_call1(of_int$1,i)}
       :function(param)
         {return caml_call1
                  (failwith,
                   cst_Time_ns_Span_of_int_ns_unsupported_on_32bit_machines)},
     _ahu_=
      arch_sixtyfour$0
       ?function(t){return caml_call1(to_int_exn$2,t)}
       :function(param)
         {return caml_call1
                  (failwith,
                   cst_Time_ns_Span_to_int_ns_unsupported_on_32bit_machines)};
    function add$14(t,u){return caml_call2(_z$_,t,u)}
    function diff$7(t,u){return caml_call2(_z__,t,u)}
    function scale$2(t,f)
     {return caml_call1(int63_round_nearest_exn,float$0(t) * f)}
    function scale_int63(t,i){return caml_call2(_z9_,t,i)}
    function scale_int(t,i){return scale_int63(t,caml_call1(of_int$1,i))}
    function _ahv_(t,f)
     {return caml_call1(int63_round_nearest_exn,float$0(t) / f)}
    function to_proportional_float(t){return caml_call1(_Ax_,t)}
    function _ahw_(param)
     {var doesn_t_raise=caml_call1(_hS_,Base_Exn[16]);
      function _bup_(param)
       {return caml_call1
                (doesn_t_raise,
                 function(param){return add$14(max_value$6,nanosecond$0)})}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_range_up,
        0,
        cst_src_time_ns_ml$1,
        166,
        6,
        84,
        _bup_);
      function _buq_(param)
       {return caml_call1
                (doesn_t_raise,
                 function(param)
                  {return add$14(min_value$6,caml_call1(_z7_,nanosecond$0))})}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_range_down,
        0,
        cst_src_time_ns_ml$2,
        167,
        6,
        84,
        _buq_);
      function _bur_(param)
       {return caml_call1
                (doesn_t_raise,
                 function(param){return add$14(max_value$6,max_value$6)})}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_overflow,
        0,
        cst_src_time_ns_ml$3,
        168,
        6,
        83,
        _bur_);
      function _bus_(param)
       {return caml_call1
                (doesn_t_raise,
                 function(param){return add$14(min_value$6,min_value$6)})}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_underflow,
        0,
        cst_src_time_ns_ml$4,
        169,
        6,
        83,
        _bus_);
      function _but_(param)
       {return caml_call1
                (doesn_t_raise,
                 function(param){return diff$7(min_value$6,nanosecond$0)})}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_range_down$0,
        0,
        cst_src_time_ns_ml$5,
        170,
        6,
        84,
        _but_);
      function _buu_(param)
       {return caml_call1
                (doesn_t_raise,
                 function(param)
                  {return diff$7(max_value$6,caml_call1(_z7_,nanosecond$0))})}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_range_up$0,
        0,
        cst_src_time_ns_ml$6,
        171,
        6,
        84,
        _buu_);
      function _buv_(param)
       {return caml_call1
                (doesn_t_raise,
                 function(param){return diff$7(min_value$6,max_value$6)})}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_underflow$0,
        0,
        cst_src_time_ns_ml$7,
        172,
        6,
        83,
        _buv_);
      function _buw_(param)
       {return caml_call1
                (doesn_t_raise,
                 function(param){return diff$7(max_value$6,min_value$6)})}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_overflow$0,
        0,
        cst_src_time_ns_ml$8,
        173,
        6,
        83,
        _buw_);
      function _bux_(param)
       {var
         margin_ns=caml_call2(_z__,min_value$6,_zv_),
         _buy_=caml_call2(_z3_,margin_ns,day$1),
         wrap_days=
          caml_call2
           (_z$_,
            caml_call2
             (_z$_,caml_call2(_z$_,caml_call2(_z3_,_zw_,day$1),one$2),_buy_),
            one$2);
        function _buz_(param)
         {var
           t=caml_call2(_z9_,wrap_days,day$1),
           _buD_=caml_call1(_z7_,nanosecond$0);
          function predicate(_buE_)
           {return caml_call3(between$2,_buE_,min_value$6,_buD_)}
          return caml_call6
                  (Ppx_assert_lib_Runtime[1],
                   pos$103,
                   sexp_of_t$49,
                   0,
                   0,
                   predicate,
                   t)}
        caml_call8
         (Ppx_inline_test_lib_Runtime[5],
          Inline_test_config,
          cst_wrap_days,
          0,
          cst_src_time_ns_ml$9,
          181,
          10,
          183,
          _buz_);
        var wrap_days_int=caml_call1(to_int_exn$2,wrap_days);
        function _buA_(param)
         {return caml_call1
                  (doesn_t_raise,
                   function(param){return scale_int63(day$1,wrap_days)})}
        caml_call8
         (Ppx_inline_test_lib_Runtime[4],
          Inline_test_config,
          cst_scale_int63,
          0,
          cst_src_time_ns_ml$10,
          187,
          10,
          86,
          _buA_);
        function _buB_(param)
         {return caml_call1
                  (doesn_t_raise,
                   function(param){return scale_int(day$1,wrap_days_int)})}
        caml_call8
         (Ppx_inline_test_lib_Runtime[4],
          Inline_test_config,
          cst_scale_int,
          0,
          cst_src_time_ns_ml$11,
          188,
          10,
          90,
          _buB_);
        function _buC_(param)
         {return caml_call1
                  (doesn_t_raise,
                   function(param)
                    {return create$25(0,[0,wrap_days_int],0,0,0,0,0,0,0)})}
        caml_call8
         (Ppx_inline_test_lib_Runtime[4],
          Inline_test_config,
          cst_create,
          0,
          cst_src_time_ns_ml$12,
          189,
          10,
          90,
          _buC_);
        return 0}
      caml_call8
       (Ppx_inline_test_lib_Runtime[6],
        Inline_test_config,
        cst_intermediate,
        0,
        cst_src_time_ns_ml$13,
        175,
        6,
        774,
        _bux_);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst_overflow_silently,
      0,
      cst_src_time_ns_ml$14,
      162,
      2,
      1577,
      _ahw_);
    function t_of_sexp$87(sexp)
     {if(0 === sexp[0])
       {var x=sexp[1];
        try
         {try
           {if(caml_string_notequal(x,cst$179))
             {var
               float$0=
                function(n)
                 {var s=caml_call2(_Gs_,x,n);
                  if(caml_string_notequal(s,cst$180))
                   {var
                     v=caml_call1(of_string$8,s),
                     _buo_=caml_call1(validate_ordinary,v);
                    caml_call1(Base_Validate[17],_buo_);
                    return v}
                  return caml_call1(failwith,cst_no_number_given$0)},
               len=caml_ml_string_length(x),
               match=caml_string_get(x,caml_call2(_w3_,len,1)),
               switcher=match - 100 | 0;
              if(15 < switcher >>> 0)
               var switch$0=0;
              else
               {switch(switcher)
                 {case 0:var _bum_=of_day$0(float$0(1)),switch$1=1;break;
                  case 4:var _bum_=of_hr$0(float$0(1)),switch$1=1;break;
                  case 9:var _bum_=of_min$0(float$0(1)),switch$1=1;break;
                  case 15:
                   if(caml_call2(_xx_,len,2))
                    if
                     (caml_call2
                       (_Ct_,caml_string_get(x,caml_call2(_w3_,len,2)),109))
                     var _bum_=of_ms$0(float$0(2)),switch$1=1,switch$2=0;
                    else
                     var switch$2=1;
                   else
                    var switch$2=1;
                   if(switch$2)
                    {if(caml_call2(_xx_,len,2))
                      if
                       (caml_call2
                         (_Ct_,caml_string_get(x,caml_call2(_w3_,len,2)),117))
                       var _bum_=of_us$0(float$0(2)),switch$1=1,switch$3=0;
                      else
                       var switch$3=1;
                     else
                      var switch$3=1;
                     if(switch$3)
                      {if(caml_call2(_xx_,len,2))
                        if
                         (caml_call2
                           (_Ct_,caml_string_get(x,caml_call2(_w3_,len,2)),110))
                         var _bum_=of_ns$0(float$0(2)),switch$1=1,switch$4=0;
                        else
                         var switch$4=1;
                       else
                        var switch$4=1;
                       if(switch$4)var _bum_=of_sec(float$0(1)),switch$1=1}}
                   break;
                  default:var switch$0=0,switch$1=0}
                if(switch$1)var _buk_=_bum_,switch$0=1}
              if(! switch$0)
               var
                _buk_=
                 caml_call1
                  (failwith,cst_Time_spans_must_end_in_ns_us_ms_s_m_h_or_d$0);
              var _bul_=_buk_}
            else
             var _bul_=caml_call1(failwith,cst_empty_string$0);
            var _bun_=_bul_}
          catch(exn)
           {exn = caml_wrap_exception(exn);
            var _bun_=caml_call4(_R5_,_ahx_,x,caml_call1(Base_Exn[9],exn),0)}
          return _bun_}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          return caml_call2(_Q3_,caml_call1(Base_Exn[9],exn),sexp)}}
      return caml_call2
              (_Q3_,cst_Time_ns_Span_t_of_sexp_sexp_must_be_an_Atom,sexp)}
    function sexp_of_t$91(t)
     {function string(suffix,float$0)
       {return caml_call2(_Dw_,caml_call1(Sexplib_Conv[1][1],float$0),suffix)}
      var
       abs_t=caml_call1(_zP_,t),
       _buj_=
        caml_call2(_An_,abs_t,microsecond$0)
         ?string(cst_ns$5,to_ns$0(t))
         :caml_call2(_An_,abs_t,millisecond$0)
           ?string(cst_us$5,to_us$0(t))
           :caml_call2(_An_,abs_t,second$1)
             ?string(cst_ms$6,to_ms$0(t))
             :caml_call2(_An_,abs_t,minute$0)
               ?string(cst_s$4,to_sec(t))
               :caml_call2(_An_,abs_t,hour$1)
                 ?string(cst_m$4,to_min$0(t))
                 :caml_call2(_An_,abs_t,day$1)
                   ?string(cst_h$2,to_hr$0(t))
                   :string(cst_d$4,to_day$0(t));
      return [0,_buj_]}
    var
     include$114=
      Validate_with_zero([0,compare$36,t_of_sexp$87,sexp_of_t$91,epoch]),
     _ahy_=include$114[1],
     _ahz_=include$114[2],
     _ahA_=include$114[3],
     _ahB_=include$114[4],
     _ahC_=include$114[5],
     _ahD_=include$114[6],
     _ahE_=include$114[7],
     _ahF_=include$114[8],
     _ahG_=include$114[9],
     _ahH_=include$114[10],
     _ahI_=include$114[11],
     _ahJ_=include$114[12];
    function of_unit_of_time$0(u)
     {switch(u)
       {case 0:return nanosecond$0;
        case 1:return microsecond$0;
        case 2:return millisecond$0;
        case 3:return second$1;
        case 4:return minute$0;
        case 5:return hour$1;
        default:return day$1}}
    function to_unit_of_time$0(t)
     {var abs_t=caml_call1(_zP_,t);
      return caml_call2(_Ar_,abs_t,day$1)
              ?6
              :caml_call2(_Ar_,abs_t,hour$1)
                ?5
                :caml_call2(_Ar_,abs_t,minute$0)
                  ?4
                  :caml_call2(_Ar_,abs_t,second$1)
                    ?3
                    :caml_call2(_Ar_,abs_t,millisecond$0)
                      ?2
                      :caml_call2(_Ar_,abs_t,microsecond$0)?1:0}
    function _ahK_(param)
     {function round_trip(expect)
       {var got=of_parts(to_parts$1(expect));
        return caml_call8
                (Ppx_assert_lib_Runtime[3],
                 pos$104,
                 sexp_of_t$91,
                 compare$36,
                 0,
                 0,
                 0,
                 expect,
                 got)}
      function eq(t,expect)
       {caml_call8
         (Ppx_assert_lib_Runtime[3],
          pos$105,
          sexp_of_t$91,
          compare$36,
          0,
          0,
          0,
          expect,
          t);
        var got=to_parts$1(t),expect$0=to_parts$1(expect);
        caml_call8
         (Ppx_assert_lib_Runtime[3],
          pos$106,
          sexpifier$0,
          comparator$27,
          0,
          0,
          0,
          expect$0,
          got);
        return round_trip(t)}
      function _btX_(param)
       {var _bui_=caml_call2(_z9_,caml_call1(of_int$1,2),microsecond$0);
        return eq(create$25(0,0,0,0,0,0,_ahL_,0,0),_bui_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_eq_create_us_2_of_int_2_microsecond,
        0,
        cst_src_time_ns_ml$15,
        302,
        4,
        81,
        _btX_);
      function _btY_(param)
       {var _buh_=caml_call2(_z9_,caml_call1(of_int$1,3),minute$0);
        return eq(create$25(0,0,0,_ahM_,0,0,0,0,0),_buh_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_eq_create_min_3_of_int_3_minute,
        0,
        cst_src_time_ns_ml$16,
        303,
        4,
        76,
        _btY_);
      function _btZ_(param)
       {var _bug_=caml_call2(_z9_,caml_call1(of_int$1,4),millisecond$0);
        return eq(create$25(0,0,0,0,0,_ahN_,0,0,0),_bug_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_eq_create_ms_4_of_int_4_millisecond,
        0,
        cst_src_time_ns_ml$17,
        304,
        4,
        81,
        _btZ_);
      function _bt0_(param)
       {var _buf_=caml_call2(_z9_,caml_call1(of_int$1,5),second$1);
        return eq(create$25(0,0,0,0,_ahO_,0,0,0,0),_buf_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_eq_create_sec_5_of_int_5_second,
        0,
        cst_src_time_ns_ml$18,
        305,
        4,
        76,
        _bt0_);
      function _bt1_(param)
       {var _bue_=caml_call2(_z9_,caml_call1(of_int$1,6),hour$1);
        return eq(create$25(0,0,_ahP_,0,0,0,0,0,0),_bue_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_eq_create_hr_6_of_int_6_hour,
        0,
        cst_src_time_ns_ml$19,
        306,
        4,
        74,
        _bt1_);
      function _bt2_(param)
       {var _bud_=caml_call2(_z9_,caml_call1(of_int$1,7),day$1);
        return eq(create$25(0,_ahQ_,0,0,0,0,0,0,0),_bud_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_eq_create_day_7_of_int_7_day,
        0,
        cst_src_time_ns_ml$20,
        307,
        4,
        73,
        _bt2_);
      function _bt3_(param)
       {var _buc_=caml_call2(_z9_,caml_call1(of_int$1,-8),microsecond$0);
        return eq(create$25(_ahS_,0,0,0,0,0,_ahR_,0,0),_buc_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_eq_create_us_8_sign_Neg_of_int_8,
        0,
        cst_src_time_ns_ml$21,
        308,
        4,
        81,
        _bt3_);
      function _bt4_(param)
       {var _bub_=caml_call2(_z9_,caml_call1(of_int$1,9),millisecond$0);
        return eq(create$25(_ahU_,0,0,0,0,_ahT_,0,0,0),_bub_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_eq_create_ms_9_sign_Zero_of_int_9,
        0,
        cst_src_time_ns_ml$22,
        309,
        4,
        81,
        _bt4_);
      function _bt5_(param)
       {var _bua_=caml_call2(_z9_,caml_call1(of_int$1,3),microsecond$0);
        return eq
                (of_sec_with_microsecond_precision
                  (to_sec(create$25(0,0,0,0,0,0,_ahW_,_ahV_,0))),
                 _bua_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_eq_create_us_3_ns_242_to_sec,
        0,
        cst_src_time_ns_ml$23,
        310,
        4,
        136,
        _bt5_);
      function _bt6_(param)
       {var for$0=1;
        for(;;)
         {var
           zero=caml_call1(Base_Random[15],0)?epoch:min_value$6,
           _bt__=caml_call1(_zB_,max_value$6),
           t=add$14(caml_call1(_zC_,caml_call1(Base_Random[8],_bt__)),zero);
          round_trip(t);
          var _bt$_=for$0 + 1 | 0;
          if(1e6 !== for$0){var for$0=_bt$_;continue}
          return 0}}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_for_1_to_1_000_000_do_let_t_Int6,
        0,
        cst_src_time_ns_ml$24,
        313,
        4,
        240,
        _bt6_);
      function round_trip$0(expect)
       {var got=to_parts$1(of_parts(expect));
        return caml_call8
                (Ppx_assert_lib_Runtime[3],
                 pos$107,
                 sexpifier$0,
                 comparator$27,
                 0,
                 0,
                 0,
                 expect,
                 got)}
      function _bt7_(param)
       {var
         parts=
          to_parts$1(create$25(_ah3_,0,_ah2_,_ah1_,_ah0_,_ahZ_,_ahY_,_ahX_,0));
        caml_call8
         (Ppx_assert_lib_Runtime[3],
          pos$108,
          sexpifier$0,
          comparator$27,
          0,
          0,
          0,
          expect$30,
          parts);
        var got=of_parts(parts),expect=of_parts(expect$30);
        caml_call8
         (Ppx_assert_lib_Runtime[3],
          pos$109,
          sexp_of_t$91,
          compare$36,
          0,
          0,
          0,
          expect,
          got);
        return round_trip$0(parts)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_eq_to_parts_create_sign_Neg_hr_2_min_3,
        0,
        cst_src_time_ns_ml$25,
        329,
        4,
        181,
        _bt7_);
      function _bt8_(param)
       {return round_trip$0(to_parts$1(create$25(0,0,_ah4_,0,0,0,0,0,0)))}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_round_trip_to_parts_create_hr_25,
        0,
        cst_src_time_ns_ml$26,
        332,
        4,
        62,
        _bt8_);
      function _bt9_(param)
       {var hr=0 === Base_Word_size[3]?_wq_:caml_call1(_zd_,_ah5_);
        return round_trip$0(to_parts$1(create$25(0,0,[0,hr],0,0,0,0,0,0)))}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_round_trip_to_parts_create_hr,
        0,
        cst_src_time_ns_ml$27,
        333,
        4,
        214,
        _bt9_);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst$181,
      0,
      cst_src_time_ns_ml$28,
      292,
      2,
      2055,
      _ahK_);
    function _ah6_(t,u)
     {return caml_call2(_Ar_,t,caml_call2(_z__,u,microsecond$0))}
    function _ah7_(t,u)
     {return caml_call2(_Aq_,t,caml_call2(_z$_,u,microsecond$0))}
    function _ah8_(t,u)
     {return caml_call2
              (_Aq_,caml_call1(_zP_,caml_call2(_z__,t,u)),microsecond$0)}
    function _ah9_(t,u)
     {return caml_call2(_Ao_,t,caml_call2(_z$_,u,microsecond$0))}
    function _ah__(t,u)
     {return caml_call2(_An_,t,caml_call2(_z__,u,microsecond$0))}
    function _ah$_(t,u)
     {return caml_call2
              (_Ao_,caml_call1(_zP_,caml_call2(_z__,t,u)),microsecond$0)}
    function robustly_compare$2(t,u){return _ah__(t,u)?-1:_ah9_(t,u)?1:0}
    function now(param)
     {var t=runtime.core_kernel_time_ns_gettime_or_zero(0);
      return caml_call2(_Am_,t,epoch)
              ?t
              :caml_call1(failwith,cst_clock_gettime_CLOCK_REALTIME_failed)}
    function random$0(state,param)
     {var
       _btW_=
        caml_call2(random,state,add$14(caml_call1(_z7_,min_value$6),one$2));
      return diff$7(caml_call2(random,state,add$14(max_value$6,one$2)),_btW_)}
    function _aia_(param)
     {var state=caml_call1(Base_Random[16][2],[0]),for$0=1;
      for(;;)
       {random$0([0,state],0);
        var _btV_=for$0 + 1 | 0;
        if(1e3 !== for$0){var for$0=_btV_;continue}
        return 0}}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_random_smoke,
      0,
      cst_src_time_ns_ml$29,
      379,
      2,
      145,
      _aia_);
    var
     _aid_=
      [0,
       [0,
        caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$183),
        0,
        bin_shape_t$89],
       0],
     _aie_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_time_ns_ml_387_0),
     group$112=caml_call2(Bin_prot_Shape[6],_aie_,_aid_),
     _aif_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$184),
     bin_shape_t$90=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$112,_aif_),0),
     bin_writer_t$81=[0,bin_size_t$40,bin_write_t$40],
     bin_reader_t$81=[0,bin_read_t$81,bin_read_t$82],
     bin_t$81=[0,bin_shape_t$90,bin_writer_t$81,bin_reader_t$81],
     _aib_=[0,t_of_sexp$87,sexp_of_t$91],
     _aic_=[0,t_of_sexp$86,sexpifier$0];
    function hash$41(x){return hash$40(x)}
    var
     Typename_of_t$22=caml_call1(Typerep_lib_Make_typename[1],[0,name$55]),
     typename_of_t$22=Typename_of_t$22[2],
     name_of_t$16=Typename_of_t$22[1],
     typerep_of_t$23=[9,[0,name_of_t$16,[0,typerep_of_t$22]]];
    function abs_diff(t,u){return caml_call1(_zP_,diff$7(t,u))}
    function to_span_since_epoch$0(t){return t}
    function of_span_since_epoch$0(s){return s}
    function to_int63_ns_since_epoch(t){return t}
    function of_int63_ns_since_epoch(i){return i}
    var
     to_int_ns_since_epoch=
      arch_sixtyfour$0
       ?function(t){return caml_call1(to_int_exn$2,t)}
       :function(param)
         {return caml_call1
                  (failwith,
                   cst_Time_ns_to_int_ns_since_epoch_unsupported_on_32bit_machines)},
     of_int_ns_since_epoch=
      arch_sixtyfour$0
       ?function(i){return caml_call1(of_int$1,i)}
       :function(param)
         {return caml_call1
                  (failwith,
                   cst_Time_ns_of_int_ns_since_epoch_unsupported_on_32bit_machines)};
    function next_multiple(opt,base,after,interval,param)
     {if(opt)var sth=opt[1],can_equal_after=sth;else var can_equal_after=0;
      if(caml_call2(_Aq_,interval,epoch))
       failwiths
        (0,
         _aig_,
         cst_Time_ns_next_multiple_got_nonpositive_interval,
         interval,
         sexp_of_t$91);
      var base_to_after=diff$7(after,base);
      if(caml_call2(_An_,base_to_after,epoch))return base;
      var
       next=
        add$14
         (base,scale_int63(interval,caml_call2(_z5_,base_to_after,interval)));
      if(! caml_call2(_Ao_,next,after))
       {var switch$0=can_equal_after?caml_call2(_Ap_,next,after)?0:1:1;
        if(switch$0)return add$14(next,interval)}
      return next}
    function random$1(state,param){return random$0(state,0)}
    function _aih_(param)
     {var state=caml_call1(Base_Random[16][2],[0]),for$0=1;
      for(;;)
       {random$1([0,state],0);
        var _btU_=for$0 + 1 | 0;
        if(1e3 !== for$0){var for$0=_btU_;continue}
        return 0}}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_random_smoke$0,
      0,
      cst_src_time_ns_ml$30,
      445,
      0,
      135,
      _aih_);
    function to_date_and_span_since_start_of_day(t)
     {function _btL_(i){return caml_call1(_Aw_,i)}
      var
       _btN_=_btL_(1e9),
       _btO_=_btL_(86400),
       ns_per_day=caml_call2(Base_Int63[92][3],_btO_,_btN_),
       approx_days_from_epoch=caml_call2(Base_Int63[92][4],t,ns_per_day),
       _btP_=_btL_(0);
      if(caml_call2(Base_Int63[92][11],t,_btP_))
       {var
         _btQ_=
          caml_call2(Base_Int63[92][3],approx_days_from_epoch,ns_per_day);
        if(caml_call2(Base_Int63[92][12],_btQ_,t))
         var
          _btR_=_btL_(1),
          days_from_epoch=
           caml_call2(Base_Int63[92][2],approx_days_from_epoch,_btR_),
          switch$0=1;
        else
         var switch$0=0}
      else
       var switch$0=0;
      if(! switch$0)var days_from_epoch=approx_days_from_epoch;
      var
       _btS_=caml_call2(Base_Int63[92][3],ns_per_day,days_from_epoch),
       span_since_start_of_day=caml_call2(Base_Int63[92][2],t,_btS_),
       _btM_=caml_call1(to_int_exn$2,days_from_epoch),
       _btT_=caml_call2(Days[4],Days[5],_btM_),
       date=caml_call1(Days[2],_btT_);
      return [0,date,span_since_start_of_day]}
    function of_date_and_span_since_start_of_day(date,span_since_start_of_day)
     {if(caml_call2(_Ar_,span_since_start_of_day,epoch))
       if(caml_call2(_An_,span_since_start_of_day,day$1))
        {var
          _btJ_=Days[5],
          _btK_=caml_call1(Days[1],date),
          days_from_epoch=caml_call2(Days[3],_btK_,_btJ_),
          span_in_days_since_epoch=scale_int(day$1,days_from_epoch),
          span_since_epoch=
           add$14(span_in_days_since_epoch,span_since_start_of_day);
         return span_since_epoch}
      throw [0,Assert_failure,_aii_]}
    var
     Utc=
      [0,
       to_date_and_span_since_start_of_day,
       of_date_and_span_since_start_of_day];
    function two_digit_of_string(string)
     {if(caml_call2(O$1[9],caml_ml_string_length(string),2))
       if(caml_call2(_Hw_,string,_CS_))return caml_call1(_xz_,string);
      throw [0,Assert_failure,_aik_]}
    var
     ns_of_100_ms=1e8,
     ns_of_10_ms=1e7,
     ns_of_1_ms=1e6,
     ns_of_100_us=1e5,
     ns_of_10_us=1e4,
     ns_of_1_us=1e3,
     ns_of_100_ns=100,
     ns_of_10_ns=10,
     ns_of_1_ns=1;
    function to_string$26(t)
     {var
       match=caml_call1(Utc[1],t),
       span_since_start_of_day=match[2],
       date=match[1];
      if(caml_call2(_Ar_,span_since_start_of_day,epoch))
       if(caml_call2(_An_,span_since_start_of_day,day$1))
        {var
          seconds_span=of_int_sec$0(to_int_sec(span_since_start_of_day)),
          sub_second_span=diff$7(span_since_start_of_day,seconds_span),
          ns=caml_call1(to_int_exn$2,sub_second_span);
         if(caml_call2(O$1[9],ns,0))
          var _btH_=cst$182;
         else
          {var _btz_=caml_call2(O$1[16],ns,ns_of_100_ms);
           if(caml_call2(O$1[9],_btz_,0))
            var
             _btH_=
              caml_call2(_eJ_,_aim_,caml_call2(O$1[4],ns,ns_of_100_ms));
           else
            {var _btA_=caml_call2(O$1[16],ns,ns_of_10_ms);
             if(caml_call2(O$1[9],_btA_,0))
              var
               _btH_=
                caml_call2(_eJ_,_ain_,caml_call2(O$1[4],ns,ns_of_10_ms));
             else
              {var _btB_=caml_call2(O$1[16],ns,ns_of_1_ms);
               if(caml_call2(O$1[9],_btB_,0))
                var
                 _btH_=
                  caml_call2(_eJ_,_aio_,caml_call2(O$1[4],ns,ns_of_1_ms));
               else
                {var _btC_=caml_call2(O$1[16],ns,ns_of_100_us);
                 if(caml_call2(O$1[9],_btC_,0))
                  var
                   _btH_=
                    caml_call2(_eJ_,_aip_,caml_call2(O$1[4],ns,ns_of_100_us));
                 else
                  {var _btD_=caml_call2(O$1[16],ns,ns_of_10_us);
                   if(caml_call2(O$1[9],_btD_,0))
                    var
                     _btH_=
                      caml_call2(_eJ_,_aiq_,caml_call2(O$1[4],ns,ns_of_10_us));
                   else
                    {var _btE_=caml_call2(O$1[16],ns,ns_of_1_us);
                     if(caml_call2(O$1[9],_btE_,0))
                      var
                       _btH_=
                        caml_call2(_eJ_,_air_,caml_call2(O$1[4],ns,ns_of_1_us));
                     else
                      {var _btF_=caml_call2(O$1[16],ns,ns_of_100_ns);
                       if(caml_call2(O$1[9],_btF_,0))
                        var
                         _btH_=
                          caml_call2(_eJ_,_ais_,caml_call2(O$1[4],ns,ns_of_100_ns));
                       else
                        var
                         _btG_=caml_call2(O$1[16],ns,ns_of_10_ns),
                         _btH_=
                          caml_call2(O$1[9],_btG_,0)
                           ?caml_call2(_eJ_,_ait_,caml_call2(O$1[4],ns,ns_of_10_ns))
                           :caml_call2(_eJ_,_aiu_,ns)}}}}}}}
         var
          seconds=to_int_sec(seconds_span),
          h=caml_call2(O$1[4],seconds,3600),
          _bty_=caml_call2(O$1[4],seconds,60),
          m=caml_call2(O$1[16],_bty_,60),
          s=caml_call2(O$1[16],seconds,60),
          _btI_=
           caml_call2
            (_Dw_,
             cst$184,
             caml_call2
              (_Dw_,
               caml_call2(_Dw_,caml_call4(_eJ_,_aij_,h,m,s),_btH_),
               cst_Z$0));
         return caml_call2(_Dw_,to_string$22(date),_btI_)}
      throw [0,Assert_failure,_aix_]}
    function of_string$23(string$0)
     {var
       match$1=caml_call2(_GR_,string$0,32),
       ofday_string_with_zone=match$1[2],
       date_string=match$1[1],
       string$1=caml_call2(_Gy_,ofday_string_with_zone,cst_Z$1),
       date=of_string$19(date_string),
       len=caml_ml_string_length(string$1),
       suffix_len=caml_call2(O$1[2],len,8),
       seconds_string=caml_call3(_HE_,string$1,0,8),
       string=caml_call3(_HE_,string$1,8,suffix_len),
       match=caml_call2(_GN_,seconds_string,58);
      if(match)
       {var _bts_=match[2];
        if(_bts_)
         {var _btt_=_bts_[2];
          if(_btt_)
           if(! _btt_[2])
            {var
              s_string=_btt_[1],
              m_string=_bts_[1],
              h_string=match[1],
              h=two_digit_of_string(h_string),
              m=two_digit_of_string(m_string),
              s=two_digit_of_string(s_string),
              _btu_=caml_call2(O$1[3],h,60),
              _btv_=caml_call2(O$1[1],_btu_,m),
              _btw_=caml_call2(O$1[3],_btv_,60),
              seconds_span=of_int_sec$0(caml_call2(O$1[1],_btw_,s));
             if(caml_call1(_Gp_,string))
              var sub_second_span=epoch;
             else
              {var digits=caml_call2(_Gx_,string,cst$183);
               if(! caml_call2(_Hw_,digits,_CS_))
                throw [0,Assert_failure,_aiw_];
               var
                match$0=caml_ml_string_length(digits),
                switcher=match$0 - 1 | 0;
               if(8 < switcher >>> 0)throw [0,Assert_failure,_aiv_];
               switch(switcher)
                {case 0:var multiplier=ns_of_100_ms;break;
                 case 1:var multiplier=ns_of_10_ms;break;
                 case 2:var multiplier=ns_of_1_ms;break;
                 case 3:var multiplier=ns_of_100_us;break;
                 case 4:var multiplier=ns_of_10_us;break;
                 case 5:var multiplier=ns_of_1_us;break;
                 case 6:var multiplier=ns_of_100_ns;break;
                 case 7:var multiplier=ns_of_10_ns;break;
                 default:var multiplier=ns_of_1_ns}
               var
                _btx_=caml_call1(_xz_,digits),
                sub_second_span=
                 caml_call1(of_int$1,caml_call2(O$1[3],_btx_,multiplier))}
             var ofday=add$14(seconds_span,sub_second_span);
             return caml_call2(Utc[2],date,ofday)}}}
      throw [0,Assert_failure,_ail_]}
    var
     include$115=caml_call1(include$1[5],[0,of_string$23,to_string$26]),
     _aiy_=include$115[1],
     _aiz_=include$115[2],
     _aiA_=
      [0,
       [0,
        caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$185),
        0,
        bin_shape_t$90],
       0],
     _aiB_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_time_ns_ml_611_6),
     group$113=caml_call2(Bin_prot_Shape[6],_aiB_,_aiA_),
     _aiC_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$186),
     bin_shape_t$91=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$113,_aiC_),0),
     bin_writer_t$82=[0,bin_size_t$40,bin_write_t$40],
     bin_reader_t$82=[0,bin_read_t$81,bin_read_t$82],
     bin_t$82=[0,bin_shape_t$91,bin_writer_t$82,bin_reader_t$82];
    function _aiD_(param)
     {function test(can_equal_after,interval_ns,after_ns)
       {var
         interval=caml_call1(of_int$1,interval_ns),
         after=caml_call1(_zC_,after_ns),
         result=next_multiple([0,can_equal_after],epoch,after,interval,0),
         upper_bound=add$14(after,interval);
        if(can_equal_after)
         var lower_bound=after,upper_bound$0=diff$7(upper_bound,nanosecond$0);
        else
         var
          lower_bound$0=add$14(after,nanosecond$0),
          lower_bound=lower_bound$0,
          upper_bound$0=upper_bound;
        var
         _btj_=caml_call2(_An_,result,lower_bound),
         _btk_=_btj_ || caml_call2(_Ao_,result,upper_bound$0);
        if(_btk_)
         {var
           _btl_=[0,[1,[0,_aiE_,[0,caml_call1(_aiz_,upper_bound$0),0]]],0],
           _btm_=[0,[1,[0,_aiF_,[0,caml_call1(_aiz_,lower_bound),0]]],_btl_],
           _btn_=[0,[1,[0,_aiG_,[0,caml_call1(_aiz_,result),0]]],_btm_],
           _bto_=[0,[1,[0,_aiH_,[0,caml_call1(_aiz_,after),0]]],_btn_],
           _btp_=[0,[1,[0,_aiI_,[0,caml_call1(_aiz_,epoch),0]]],_bto_],
           _btq_=[0,[1,[0,_aiJ_,[0,sexp_of_t$91(interval),0]]],_btp_],
           _btr_=
            [0,[1,[0,_aiK_,[0,caml_call1(_BA_,can_equal_after),0]]],_btq_];
          return caml_call1
                  (_kM_,
                   [1,
                    [0,
                     caml_call1(Sexplib0_Sexp_conv[7],cst_result_out_of_bounds),
                     _btr_]])}
        return _btk_}
      function _bqZ_(param){return test(1,71,_aiL_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_71_1666750235549516973L,
        0,
        cst_src_time_ns_ml$31,
        644,
        4,
        63,
        _bqZ_);
      function _bq0_(param){return test(1,4398,_aiM_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_4398_1232807081547132235L,
        0,
        cst_src_time_ns_ml$32,
        645,
        4,
        63,
        _bq0_);
      function _bq1_(param){return test(0,702561,_aiN_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_false_702561_1233263206897519979L,
        0,
        cst_src_time_ns_ml$33,
        646,
        4,
        63,
        _bq1_);
      function _bq2_(param){return test(1,65,_aiO_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_65_1813146216102385742L,
        0,
        cst_src_time_ns_ml$34,
        647,
        4,
        63,
        _bq2_);
      function _bq3_(param){return test(0,3376,_aiP_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_false_3376_1430224273339105389L,
        0,
        cst_src_time_ns_ml$35,
        648,
        4,
        63,
        _bq3_);
      function _bq4_(param){return test(1,25,_aiQ_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_25_1289744875932860592L,
        0,
        cst_src_time_ns_ml$36,
        649,
        4,
        63,
        _bq4_);
      function _bq5_(param){return test(1,2640,_aiR_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_2640_1289026286379471964L,
        0,
        cst_src_time_ns_ml$37,
        650,
        4,
        63,
        _bq5_);
      function _bq6_(param){return test(1,7062861,_aiS_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_7062861_1582734990009845838L,
        0,
        cst_src_time_ns_ml$38,
        651,
        4,
        63,
        _bq6_);
      function _bq7_(param){return test(0,26123810,_aiT_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_false_26123810_1509919129138733390L,
        0,
        cst_src_time_ns_ml$39,
        652,
        4,
        63,
        _bq7_);
      function _bq8_(param){return test(0,1076,_aiU_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_false_1076_1514456253942665045L,
        0,
        cst_src_time_ns_ml$40,
        653,
        4,
        63,
        _bq8_);
      function _bq9_(param){return test(0,47873597,_aiV_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_false_47873597_1567592770350241609L,
        0,
        cst_src_time_ns_ml$41,
        654,
        4,
        63,
        _bq9_);
      function _bq__(param){return test(1,147,_aiW_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_147_1794365064173405211L,
        0,
        cst_src_time_ns_ml$42,
        655,
        4,
        63,
        _bq__);
      function _bq$_(param){return test(1,37416,_aiX_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_37416_1703355717287748172L,
        0,
        cst_src_time_ns_ml$43,
        656,
        4,
        63,
        _bq$_);
      function _bra_(param){return test(0,11,_aiY_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_false_11_1627963384978464309L,
        0,
        cst_src_time_ns_ml$44,
        657,
        4,
        63,
        _bra_);
      function _brb_(param){return test(1,362857,_aiZ_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_362857_1477941666514490237L,
        0,
        cst_src_time_ns_ml$45,
        658,
        4,
        63,
        _brb_);
      function _brc_(param){return test(1,74,_ai0_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_74_1835379421104268809L,
        0,
        cst_src_time_ns_ml$46,
        659,
        4,
        63,
        _brc_);
      function _brd_(param){return test(0,95,_ai1_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_false_95_1518869409078948499L,
        0,
        cst_src_time_ns_ml$47,
        660,
        4,
        63,
        _brd_);
      function _bre_(param){return test(0,152,_ai2_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_false_152_1774086601023993329L,
        0,
        cst_src_time_ns_ml$48,
        661,
        4,
        63,
        _bre_);
      function _brf_(param){return test(1,2963474,_ai3_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_2963474_1177784542849146405L,
        0,
        cst_src_time_ns_ml$49,
        662,
        4,
        63,
        _brf_);
      function _brg_(param){return test(0,30,_ai4_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_false_30_1322037015396216447L,
        0,
        cst_src_time_ns_ml$50,
        663,
        4,
        63,
        _brg_);
      function _brh_(param){return test(1,25,_ai5_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_25_1686952462277171285L,
        0,
        cst_src_time_ns_ml$51,
        664,
        4,
        63,
        _brh_);
      function _bri_(param){return test(0,77747994,_ai6_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_false_77747994_1232530693599997021L,
        0,
        cst_src_time_ns_ml$52,
        665,
        4,
        63,
        _bri_);
      function _brj_(param){return test(1,39,_ai7_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_39_1418422346766901525L,
        0,
        cst_src_time_ns_ml$53,
        666,
        4,
        63,
        _brj_);
      function _brk_(param){return test(1,20,_ai8_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_20_1164906391254697606L,
        0,
        cst_src_time_ns_ml$54,
        667,
        4,
        63,
        _brk_);
      function _brl_(param){return test(0,492686918,_ai9_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_false_492686918_1350478871564364650L,
        0,
        cst_src_time_ns_ml$55,
        668,
        4,
        63,
        _brl_);
      function _brm_(param){return test(0,5626939,_ai__)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_false_5626939_1254841457643911520L,
        0,
        cst_src_time_ns_ml$56,
        669,
        4,
        63,
        _brm_);
      function _brn_(param){return test(1,1189147,_ai$_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_1189147_1566503665916540724L,
        0,
        cst_src_time_ns_ml$57,
        670,
        4,
        63,
        _brn_);
      function _bro_(param){return test(0,97968678,_aja_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_false_97968678_1202922821174442071L,
        0,
        cst_src_time_ns_ml$58,
        671,
        4,
        63,
        _bro_);
      function _brp_(param){return test(0,20,_ajb_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_false_20_1241457243504201837L,
        0,
        cst_src_time_ns_ml$59,
        672,
        4,
        63,
        _brp_);
      function _brq_(param){return test(1,99,_ajc_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_99_1063228554057138547L,
        0,
        cst_src_time_ns_ml$60,
        673,
        4,
        63,
        _brq_);
      function _brr_(param){return test(1,73,_ajd_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_73_1127965283765790199L,
        0,
        cst_src_time_ns_ml$61,
        674,
        4,
        63,
        _brr_);
      function _brs_(param){return test(1,92513,_aje_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_92513_1423525486630794877L,
        0,
        cst_src_time_ns_ml$62,
        675,
        4,
        63,
        _brs_);
      function _brt_(param){return test(1,208946207,_ajf_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_208946207_1512896538257529954L,
        0,
        cst_src_time_ns_ml$63,
        676,
        4,
        63,
        _brt_);
      function _bru_(param){return test(1,558,_ajg_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_558_1304902428047905868L,
        0,
        cst_src_time_ns_ml$64,
        677,
        4,
        63,
        _bru_);
      function _brv_(param){return test(1,27,_ajh_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_27_1454760325484042946L,
        0,
        cst_src_time_ns_ml$65,
        678,
        4,
        63,
        _brv_);
      function _brw_(param){return test(1,9511417,_aji_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_9511417_1224625971869008380L,
        0,
        cst_src_time_ns_ml$66,
        679,
        4,
        63,
        _brw_);
      function _brx_(param){return test(1,1112121,_ajj_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_1112121_1486628785456556405L,
        0,
        cst_src_time_ns_ml$67,
        680,
        4,
        63,
        _brx_);
      function _bry_(param){return test(1,36,_ajk_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_36_1226843097592112449L,
        0,
        cst_src_time_ns_ml$68,
        681,
        4,
        63,
        _bry_);
      function _brz_(param){return test(1,60,_ajl_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_60_1299700152825201828L,
        0,
        cst_src_time_ns_ml$69,
        682,
        4,
        63,
        _brz_);
      function _brA_(param){return test(1,114032,_ajm_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_114032_1507179377240642938L,
        0,
        cst_src_time_ns_ml$70,
        683,
        4,
        63,
        _brA_);
      function _brB_(param){return test(1,27905,_ajn_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_27905_1379112115218849615L,
        0,
        cst_src_time_ns_ml$71,
        684,
        4,
        63,
        _brB_);
      function _brC_(param){return test(1,368860702,_ajo_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_368860702_1318925554630500136L,
        0,
        cst_src_time_ns_ml$72,
        685,
        4,
        63,
        _brC_);
      function _brD_(param){return test(1,1636,_ajp_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_1636_1670399627434728314L,
        0,
        cst_src_time_ns_ml$73,
        686,
        4,
        63,
        _brD_);
      function _brE_(param){return test(0,27,_ajq_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_false_27_1735798120119522136L,
        0,
        cst_src_time_ns_ml$74,
        687,
        4,
        63,
        _brE_);
      function _brF_(param){return test(1,14,_ajr_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_14_1880325938102084694L,
        0,
        cst_src_time_ns_ml$75,
        688,
        4,
        63,
        _brF_);
      function _brG_(param){return test(1,155,_ajs_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_155_1488215974636830525L,
        0,
        cst_src_time_ns_ml$76,
        689,
        4,
        63,
        _brG_);
      function _brH_(param){return test(1,14319914,_ajt_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_14319914_1298824542911254370L,
        0,
        cst_src_time_ns_ml$77,
        690,
        4,
        63,
        _brH_);
      function _brI_(param){return test(1,94,_aju_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_94_1961333441294309841L,
        0,
        cst_src_time_ns_ml$78,
        691,
        4,
        63,
        _brI_);
      function _brJ_(param){return test(1,321,_ajv_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_321_1191344461619096942L,
        0,
        cst_src_time_ns_ml$79,
        692,
        4,
        63,
        _brJ_);
      function _brK_(param){return test(1,706626,_ajw_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_706626_1179098309603309142L,
        0,
        cst_src_time_ns_ml$80,
        693,
        4,
        63,
        _brK_);
      function _brL_(param){return test(1,5,_ajx_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_5_1180517413083401326L,
        0,
        cst_src_time_ns_ml$81,
        694,
        4,
        63,
        _brL_);
      function _brM_(param){return test(0,30523434,_ajy_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_false_30523434_1471069600394063742L,
        0,
        cst_src_time_ns_ml$82,
        695,
        4,
        63,
        _brM_);
      function _brN_(param){return test(0,106875447,_ajz_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_false_106875447_1789919428848820069L,
        0,
        cst_src_time_ns_ml$83,
        696,
        4,
        63,
        _brN_);
      function _brO_(param){return test(1,28,_ajA_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_28_1013606888178097611L,
        0,
        cst_src_time_ns_ml$84,
        697,
        4,
        63,
        _brO_);
      function _brP_(param){return test(1,5178,_ajB_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_5178_1168893256723816286L,
        0,
        cst_src_time_ns_ml$85,
        698,
        4,
        63,
        _brP_);
      function _brQ_(param){return test(1,146907740,_ajC_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_146907740_1402240657577530746L,
        0,
        cst_src_time_ns_ml$86,
        699,
        4,
        63,
        _brQ_);
      function _brR_(param){return test(1,127125596,_ajD_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_127125596_1332881548503325287L,
        0,
        cst_src_time_ns_ml$87,
        700,
        4,
        63,
        _brR_);
      function _brS_(param){return test(1,46691,_ajE_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_46691_1526532096462597222L,
        0,
        cst_src_time_ns_ml$88,
        701,
        4,
        63,
        _brS_);
      function _brT_(param){return test(1,1603,_ajF_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_1603_1745157292595832416L,
        0,
        cst_src_time_ns_ml$89,
        702,
        4,
        63,
        _brT_);
      function _brU_(param){return test(1,141650492,_ajG_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_141650492_1779813912846436672L,
        0,
        cst_src_time_ns_ml$90,
        703,
        4,
        63,
        _brU_);
      function _brV_(param){return test(0,20,_ajH_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_false_20_1916060142837991511L,
        0,
        cst_src_time_ns_ml$91,
        704,
        4,
        63,
        _brV_);
      function _brW_(param){return test(0,27,_ajI_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_false_27_1366845916494697310L,
        0,
        cst_src_time_ns_ml$92,
        705,
        4,
        63,
        _brW_);
      function _brX_(param){return test(1,61,_ajJ_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_61_1572832513125636690L,
        0,
        cst_src_time_ns_ml$93,
        706,
        4,
        63,
        _brX_);
      function _brY_(param){return test(0,11254,_ajK_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_false_11254_1301465801253970270L,
        0,
        cst_src_time_ns_ml$94,
        707,
        4,
        63,
        _brY_);
      function _brZ_(param){return test(1,2817556,_ajL_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_2817556_1220217790200673585L,
        0,
        cst_src_time_ns_ml$95,
        708,
        4,
        63,
        _brZ_);
      function _br0_(param){return test(1,46399240,_ajM_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_46399240_1371834303096963699L,
        0,
        cst_src_time_ns_ml$96,
        709,
        4,
        63,
        _br0_);
      function _br1_(param){return test(1,10280275,_ajN_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_10280275_1199022106578060117L,
        0,
        cst_src_time_ns_ml$97,
        710,
        4,
        63,
        _br1_);
      function _br2_(param){return test(1,163667,_ajO_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_163667_1277585249492511350L,
        0,
        cst_src_time_ns_ml$98,
        711,
        4,
        63,
        _br2_);
      function _br3_(param){return test(1,441771131,_ajP_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_441771131_1865810978398941565L,
        0,
        cst_src_time_ns_ml$99,
        712,
        4,
        63,
        _br3_);
      function _br4_(param){return test(1,22561070,_ajQ_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_22561070_1535418639166874210L,
        0,
        cst_src_time_ns_ml$100,
        713,
        4,
        63,
        _br4_);
      function _br5_(param){return test(1,677456,_ajR_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_677456_1356038574036607058L,
        0,
        cst_src_time_ns_ml$101,
        714,
        4,
        63,
        _br5_);
      function _br6_(param){return test(1,109,_ajS_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_109_1102385187927169659L,
        0,
        cst_src_time_ns_ml$102,
        715,
        4,
        63,
        _br6_);
      function _br7_(param){return test(1,169,_ajT_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_169_1592923082707947954L,
        0,
        cst_src_time_ns_ml$103,
        716,
        4,
        63,
        _br7_);
      function _br8_(param){return test(0,2150725,_ajU_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_false_2150725_1769663126416348286L,
        0,
        cst_src_time_ns_ml$104,
        717,
        4,
        63,
        _br8_);
      function _br9_(param){return test(1,159,_ajV_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_159_1051696934142612937L,
        0,
        cst_src_time_ns_ml$105,
        718,
        4,
        63,
        _br9_);
      function _br__(param){return test(1,29,_ajW_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_29_1844613926625333568L,
        0,
        cst_src_time_ns_ml$106,
        719,
        4,
        63,
        _br__);
      function _br$_(param){return test(1,30,_ajX_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_30_1361000119652263049L,
        0,
        cst_src_time_ns_ml$107,
        720,
        4,
        63,
        _br$_);
      function _bsa_(param){return test(0,21058,_ajY_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_false_21058_1323116357214603127L,
        0,
        cst_src_time_ns_ml$108,
        721,
        4,
        63,
        _bsa_);
      function _bsb_(param){return test(1,1163794,_ajZ_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_1163794_1221604356987291502L,
        0,
        cst_src_time_ns_ml$109,
        722,
        4,
        63,
        _bsb_);
      function _bsc_(param){return test(0,30,_aj0_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_false_30_1040042732593079852L,
        0,
        cst_src_time_ns_ml$110,
        723,
        4,
        63,
        _bsc_);
      function _bsd_(param){return test(0,106,_aj1_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_false_106_1997585750801910583L,
        0,
        cst_src_time_ns_ml$111,
        724,
        4,
        63,
        _bsd_);
      function _bse_(param){return test(1,78,_aj2_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_78_1292467707712256145L,
        0,
        cst_src_time_ns_ml$112,
        725,
        4,
        63,
        _bse_);
      function _bsf_(param){return test(0,882992,_aj3_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_false_882992_1557796972319309155L,
        0,
        cst_src_time_ns_ml$113,
        726,
        4,
        63,
        _bsf_);
      function _bsg_(param){return test(0,1821,_aj4_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_false_1821_1973683565069601822L,
        0,
        cst_src_time_ns_ml$114,
        727,
        4,
        63,
        _bsg_);
      function _bsh_(param){return test(0,34661,_aj5_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_false_34661_1737515124214074993L,
        0,
        cst_src_time_ns_ml$115,
        728,
        4,
        63,
        _bsh_);
      function _bsi_(param){return test(1,91661,_aj6_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_91661_1525765679206225703L,
        0,
        cst_src_time_ns_ml$116,
        729,
        4,
        63,
        _bsi_);
      function _bsj_(param){return test(0,55,_aj7_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_false_55_1287656410542943084L,
        0,
        cst_src_time_ns_ml$117,
        730,
        4,
        63,
        _bsj_);
      function _bsk_(param){return test(1,25,_aj8_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_25_1144756873630117512L,
        0,
        cst_src_time_ns_ml$118,
        731,
        4,
        63,
        _bsk_);
      function _bsl_(param){return test(1,121625,_aj9_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_121625_1374589039260879728L,
        0,
        cst_src_time_ns_ml$119,
        732,
        4,
        63,
        _bsl_);
      function _bsm_(param){return test(0,55,_aj__)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_false_55_1970197704905173942L,
        0,
        cst_src_time_ns_ml$120,
        733,
        4,
        63,
        _bsm_);
      function _bsn_(param){return test(1,17,_aj$_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_17_1013158341065700634L,
        0,
        cst_src_time_ns_ml$121,
        734,
        4,
        63,
        _bsn_);
      function _bso_(param){return test(1,5176,_aka_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_5176_1352936504880492660L,
        0,
        cst_src_time_ns_ml$122,
        735,
        4,
        63,
        _bso_);
      function _bsp_(param){return test(1,12,_akb_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_12_1955810895023292883L,
        0,
        cst_src_time_ns_ml$123,
        736,
        4,
        63,
        _bsp_);
      function _bsq_(param){return test(1,67034967,_akc_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_67034967_1556142079069258330L,
        0,
        cst_src_time_ns_ml$124,
        737,
        4,
        63,
        _bsq_);
      function _bsr_(param){return test(1,690258,_akd_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_690258_1241013338154557567L,
        0,
        cst_src_time_ns_ml$125,
        738,
        4,
        63,
        _bsr_);
      function _bss_(param){return test(0,5606142,_ake_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_false_5606142_1356689387566170970L,
        0,
        cst_src_time_ns_ml$126,
        739,
        4,
        63,
        _bss_);
      function _bst_(param){return test(1,548,_akf_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_548_1613807159903275820L,
        0,
        cst_src_time_ns_ml$127,
        740,
        4,
        63,
        _bst_);
      function _bsu_(param){return test(1,13,_akg_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_13_1425941806049471918L,
        0,
        cst_src_time_ns_ml$128,
        741,
        4,
        63,
        _bsu_);
      function _bsv_(param){return test(0,155572024,_akh_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_false_155572024_1398827221896378979L,
        0,
        cst_src_time_ns_ml$129,
        742,
        4,
        63,
        _bsv_);
      function _bsw_(param){return test(1,938925403,_aki_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_938925403_1550277848520025471L,
        0,
        cst_src_time_ns_ml$130,
        743,
        4,
        63,
        _bsw_);
      function _bsx_(param){return test(0,13058335,_akj_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_false_13058335_1306567871862304618L,
        0,
        cst_src_time_ns_ml$131,
        744,
        4,
        63,
        _bsx_);
      function _bsy_(param){return test(1,2,_akk_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_2_1997152439817382933L,
        0,
        cst_src_time_ns_ml$132,
        745,
        4,
        63,
        _bsy_);
      function _bsz_(param){return test(1,131456077,_akl_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_131456077_1809241097498435420L,
        0,
        cst_src_time_ns_ml$133,
        746,
        4,
        63,
        _bsz_);
      function _bsA_(param){return test(1,5,_akm_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_5_1531223674910420761L,
        0,
        cst_src_time_ns_ml$134,
        747,
        4,
        63,
        _bsA_);
      function _bsB_(param){return test(0,1125,_akn_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_false_1125_1175905228832358761L,
        0,
        cst_src_time_ns_ml$135,
        748,
        4,
        63,
        _bsB_);
      function _bsC_(param){return test(1,350,_ako_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_350_1573261556955534963L,
        0,
        cst_src_time_ns_ml$136,
        749,
        4,
        63,
        _bsC_);
      function _bsD_(param){return test(0,21,_akp_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_false_21_1529314545697532312L,
        0,
        cst_src_time_ns_ml$137,
        750,
        4,
        63,
        _bsD_);
      function _bsE_(param){return test(0,11816,_akq_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_false_11816_1222083468556908088L,
        0,
        cst_src_time_ns_ml$138,
        751,
        4,
        63,
        _bsE_);
      function _bsF_(param){return test(1,86085,_akr_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_86085_1436391155125371248L,
        0,
        cst_src_time_ns_ml$139,
        752,
        4,
        63,
        _bsF_);
      function _bsG_(param){return test(1,75063667,_aks_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_75063667_1395675403046737786L,
        0,
        cst_src_time_ns_ml$140,
        753,
        4,
        63,
        _bsG_);
      function _bsH_(param){return test(0,67,_akt_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_false_67_1765632860861960357L,
        0,
        cst_src_time_ns_ml$141,
        754,
        4,
        63,
        _bsH_);
      function _bsI_(param){return test(0,184086,_aku_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_false_184086_1232986716459688821L,
        0,
        cst_src_time_ns_ml$142,
        755,
        4,
        63,
        _bsI_);
      function _bsJ_(param){return test(1,53,_akv_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_53_1643034916467763402L,
        0,
        cst_src_time_ns_ml$143,
        756,
        4,
        63,
        _bsJ_);
      function _bsK_(param){return test(1,164,_akw_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_164_1931973285029689763L,
        0,
        cst_src_time_ns_ml$144,
        757,
        4,
        63,
        _bsK_);
      function _bsL_(param){return test(1,10,_akx_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_10_1317304422397637720L,
        0,
        cst_src_time_ns_ml$145,
        758,
        4,
        63,
        _bsL_);
      function _bsM_(param){return test(1,12566,_aky_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_12566_1421417764422298993L,
        0,
        cst_src_time_ns_ml$146,
        759,
        4,
        63,
        _bsM_);
      function _bsN_(param){return test(1,122903121,_akz_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_122903121_1389456412090860886L,
        0,
        cst_src_time_ns_ml$147,
        760,
        4,
        63,
        _bsN_);
      function _bsO_(param){return test(0,3831308,_akA_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_false_3831308_1617363073756443917L,
        0,
        cst_src_time_ns_ml$148,
        761,
        4,
        63,
        _bsO_);
      function _bsP_(param){return test(1,2274,_akB_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_2274_1256309428080267889L,
        0,
        cst_src_time_ns_ml$149,
        762,
        4,
        63,
        _bsP_);
      function _bsQ_(param){return test(1,69,_akC_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_69_1975893988922224788L,
        0,
        cst_src_time_ns_ml$150,
        763,
        4,
        63,
        _bsQ_);
      function _bsR_(param){return test(1,460408083,_akD_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_460408083_1956390486383825465L,
        0,
        cst_src_time_ns_ml$151,
        764,
        4,
        63,
        _bsR_);
      function _bsS_(param){return test(1,20,_akE_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_20_1294502403828905377L,
        0,
        cst_src_time_ns_ml$152,
        765,
        4,
        63,
        _bsS_);
      function _bsT_(param){return test(1,75279,_akF_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_75279_1210517500455430679L,
        0,
        cst_src_time_ns_ml$153,
        766,
        4,
        63,
        _bsT_);
      function _bsU_(param){return test(0,335,_akG_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_false_335_1184433858378833746L,
        0,
        cst_src_time_ns_ml$154,
        767,
        4,
        63,
        _bsU_);
      function _bsV_(param){return test(0,94523,_akH_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_false_94523_1420732229891051641L,
        0,
        cst_src_time_ns_ml$155,
        768,
        4,
        63,
        _bsV_);
      function _bsW_(param){return test(0,16,_akI_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_false_16_1310464979299616987L,
        0,
        cst_src_time_ns_ml$156,
        769,
        4,
        63,
        _bsW_);
      function _bsX_(param){return test(1,5886,_akJ_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_5886_1602668327390189086L,
        0,
        cst_src_time_ns_ml$157,
        770,
        4,
        63,
        _bsX_);
      function _bsY_(param){return test(0,9584,_akK_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_false_9584_1532134444641007990L,
        0,
        cst_src_time_ns_ml$158,
        771,
        4,
        63,
        _bsY_);
      function _bsZ_(param){return test(1,17,_akL_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_17_1362463965931411147L,
        0,
        cst_src_time_ns_ml$159,
        772,
        4,
        63,
        _bsZ_);
      function _bs0_(param){return test(0,2,_akM_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_false_2_1693027090042722358L,
        0,
        cst_src_time_ns_ml$160,
        773,
        4,
        63,
        _bs0_);
      function _bs1_(param){return test(0,228135731,_akN_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_false_228135731_1462077890315132778L,
        0,
        cst_src_time_ns_ml$161,
        774,
        4,
        63,
        _bs1_);
      function _bs2_(param){return test(0,11,_akO_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_false_11_1018644923234572949L,
        0,
        cst_src_time_ns_ml$162,
        775,
        4,
        63,
        _bs2_);
      function _bs3_(param){return test(0,132723,_akP_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_false_132723_1582399817588675962L,
        0,
        cst_src_time_ns_ml$163,
        776,
        4,
        63,
        _bs3_);
      function _bs4_(param){return test(0,3667,_akQ_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_false_3667_1506604922540283994L,
        0,
        cst_src_time_ns_ml$164,
        777,
        4,
        63,
        _bs4_);
      function _bs5_(param){return test(1,265541944,_akR_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_265541944_1695560402922008138L,
        0,
        cst_src_time_ns_ml$165,
        778,
        4,
        63,
        _bs5_);
      function _bs6_(param){return test(1,310,_akS_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_310_1875190738574556027L,
        0,
        cst_src_time_ns_ml$166,
        779,
        4,
        63,
        _bs6_);
      function _bs7_(param){return test(1,8570918,_akT_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_8570918_1184809728498232683L,
        0,
        cst_src_time_ns_ml$167,
        780,
        4,
        63,
        _bs7_);
      function _bs8_(param){return test(0,16536379,_akU_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_false_16536379_1490415593503829866L,
        0,
        cst_src_time_ns_ml$168,
        781,
        4,
        63,
        _bs8_);
      function _bs9_(param){return test(0,32222516,_akV_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_false_32222516_1519021258420540539L,
        0,
        cst_src_time_ns_ml$169,
        782,
        4,
        63,
        _bs9_);
      function _bs__(param){return test(1,152467451,_akW_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_152467451_1255624172539661165L,
        0,
        cst_src_time_ns_ml$170,
        783,
        4,
        63,
        _bs__);
      function _bs$_(param){return test(1,13,_akX_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_13_1803425272409148050L,
        0,
        cst_src_time_ns_ml$171,
        784,
        4,
        63,
        _bs$_);
      function _bta_(param){return test(1,26,_akY_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_26_1021777264383583552L,
        0,
        cst_src_time_ns_ml$172,
        785,
        4,
        63,
        _bta_);
      function _btb_(param){return test(1,11,_akZ_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_11_1400486869768403422L,
        0,
        cst_src_time_ns_ml$173,
        786,
        4,
        63,
        _btb_);
      function _btc_(param){return test(1,229637,_ak0_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_229637_1410589173350489612L,
        0,
        cst_src_time_ns_ml$174,
        787,
        4,
        63,
        _btc_);
      function _btd_(param){return test(1,32,_ak1_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_32_1960302290555348647L,
        0,
        cst_src_time_ns_ml$175,
        788,
        4,
        63,
        _btd_);
      function _bte_(param){return test(0,349881185,_ak2_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_false_349881185_1831970413297175407L,
        0,
        cst_src_time_ns_ml$176,
        789,
        4,
        63,
        _bte_);
      function _btf_(param){return test(0,35457345,_ak3_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_false_35457345_1967569813691929674L,
        0,
        cst_src_time_ns_ml$177,
        790,
        4,
        63,
        _btf_);
      function _btg_(param){return test(0,16,_ak4_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_false_16_1556051447243676249L,
        0,
        cst_src_time_ns_ml$178,
        791,
        4,
        63,
        _btg_);
      function _bth_(param){return test(0,302933078,_ak5_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_false_302933078_1816140399596962652L,
        0,
        cst_src_time_ns_ml$179,
        792,
        4,
        63,
        _bth_);
      function _bti_(param){return test(1,3609444,_ak6_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_true_3609444_1802393395129668217L,
        0,
        cst_src_time_ns_ml$180,
        793,
        4,
        63,
        _bti_);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst_next_multiple,
      0,
      cst_src_time_ns_ml$181,
      616,
      0,
      10824,
      _aiD_);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$334);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Stable$6=
      [0,
       [0,
        [0,
         bin_t$82,
         bin_read_t$81,
         bin_read_t$82,
         bin_reader_t$82,
         bin_size_t$40,
         bin_write_t$40,
         bin_writer_t$82,
         bin_shape_t$91,
         compare$36,
         _aiy_,
         _aiz_]]],
     Alternate_sexp=[0,_aiy_,_aiz_],
     Span$0=
      [0,
       _Av_,
       hash$40,
       typerep_of_t$22,
       typename_of_t$21,
       bin_t$80,
       bin_read_t$81,
       bin_read_t$82,
       bin_reader_t$80,
       bin_size_t$40,
       bin_write_t$40,
       bin_writer_t$80,
       bin_shape_t$89,
       _Ar_,
       _Aq_,
       _Ap_,
       _Ao_,
       _An_,
       _Am_,
       equal$20,
       compare$36,
       min$2,
       max$2,
       _ahy_,
       _ahz_,
       _ahA_,
       _ahB_,
       _ahC_,
       _ahD_,
       _ahE_,
       _ahF_,
       _ahG_,
       _ahH_,
       _ahI_,
       _ahJ_,
       nanosecond$0,
       microsecond$0,
       millisecond$0,
       second$1,
       minute$0,
       hour$1,
       day$1,
       of_ns$0,
       of_us$0,
       of_ms$0,
       of_sec,
       of_min$0,
       of_hr$0,
       of_day$0,
       to_ns$0,
       to_us$0,
       to_ms$0,
       to_sec,
       to_min$0,
       to_hr$0,
       to_day$0,
       of_sec_with_microsecond_precision,
       of_int_us,
       of_int_ms,
       of_int_sec$0,
       to_int_us,
       to_int_ms,
       to_int_sec,
       epoch,
       min_value$6,
       max_value$6,
       add$14,
       diff$7,
       _zP_,
       _z7_,
       scale$2,
       scale_int,
       scale_int63,
       _z5_,
       _ahv_,
       _z1_,
       create$25,
       _aic_,
       to_parts$1,
       to_unit_of_time$0,
       of_unit_of_time$0,
       _ah6_,
       _ah7_,
       _ah8_,
       _ah9_,
       _ah__,
       _ah$_,
       robustly_compare$2,
       to_int63_ns,
       of_int63_ns,
       _ahu_,
       _aht_,
       to_proportional_float,
       now,
       random$0,
       _aib_],
     include$116=
      [0,
       Span$0,
       _Av_,
       hash$41,
       typerep_of_t$23,
       typename_of_t$22,
       bin_t$81,
       bin_read_t$81,
       bin_read_t$82,
       bin_reader_t$81,
       bin_size_t$40,
       bin_write_t$40,
       bin_writer_t$81,
       bin_shape_t$90,
       _Ar_,
       _Aq_,
       _Ap_,
       _Ao_,
       _An_,
       _Am_,
       equal$20,
       compare$36,
       min$2,
       max$2,
       Alternate_sexp,
       epoch,
       min_value$6,
       max_value$6,
       now,
       add$14,
       diff$7,
       diff$7,
       abs_diff,
       to_span_since_epoch$0,
       of_span_since_epoch$0,
       to_int63_ns_since_epoch,
       of_int63_ns_since_epoch,
       to_int_ns_since_epoch,
       of_int_ns_since_epoch,
       next_multiple,
       random$1,
       Utc,
       Stable$6];
    caml_register_global(7505,include$116,"Core_kernel__Time_ns");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$335);
    caml_call1(Expect_test_collector[4][1],cst_src_time_float0_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$336,cst$185);
    var
     include$117=caml_call1(Robust_compare[1],[0,1e-06]),
     _ak7_=include$117[2],
     _ak8_=include$117[3],
     _ak9_=include$117[4],
     _ak__=include$117[5],
     _ak$_=include$117[6],
     _ala_=include$117[7],
     robustly_compare$3=include$117[8];
    function diff$8(t1,t2){return to_span_since_epoch(caml_call2(_Ir_,t1,t2))}
    function add$15(t,span){return t + span}
    function sub$9(t,span){return t - span}
    function prev$4(t){return caml_call2(one_ulp,759637122,t)}
    function next$4(t){return caml_call2(one_ulp,19067,t)}
    function of_date_ofday(date,ofday)
     {var
       _bqX_=Days[5],
       _bqY_=caml_call1(Days[1],date),
       days=caml_call1(of_int$2,caml_call2(Days[3],_bqY_,_bqX_));
      return days * 86400 + to_span_since_start_of_day(ofday)}
    function to_absolute(relative,offset_from_utc)
     {return relative - offset_from_utc}
    function of_absolute(absolute,offset_from_utc)
     {return absolute + offset_from_utc}
    var sec_per_day=caml_call1(of_int$1,86400);
    function to_days_from_epoch(t)
     {var
       _bqU_=caml_call2(_Iy_,t,253402300800),
       gmtime_lower_bound=-62167219200,
       _bqV_=_bqU_ || caml_call2(_Iu_,t,gmtime_lower_bound);
      if(_bqV_)caml_call3(_R5_,_alb_,t,0);
      var
       _bqW_=caml_call1(_Ay_,t),
       days_from_epoch_approx=caml_call2(Base_Int63[92][4],_bqW_,sec_per_day);
      return caml_call2
               (_Iu_,
                t,
                caml_call1
                 (_Ax_,
                  caml_call2
                   (Base_Int63[92][3],days_from_epoch_approx,sec_per_day)))
              ?caml_call1(pred$2,days_from_epoch_approx)
              :days_from_epoch_approx}
    function ofday_of_days_from_epoch(t,days_from_epoch)
     {var
       days_from_epoch_in_sec=
        caml_call1
         (_Ax_,caml_call2(Base_Int63[92][3],days_from_epoch,sec_per_day)),
       remainder=t - days_from_epoch_in_sec;
      return of_span_since_start_of_day(to_span_since_epoch(remainder))}
    function date_of_days_from_epoch(days_from_epoch)
     {var
       _bqS_=caml_call1(to_int_exn$2,days_from_epoch),
       _bqT_=caml_call2(Days[4],Days[5],_bqS_);
      return caml_call1(Days[2],_bqT_)}
    function to_date$0(t)
     {var days_from_epoch=to_days_from_epoch(t);
      return date_of_days_from_epoch(days_from_epoch)}
    function to_ofday(t)
     {var days_from_epoch=to_days_from_epoch(t);
      return ofday_of_days_from_epoch(t,days_from_epoch)}
    function to_date_ofday(t)
     {var
       days_from_epoch=to_days_from_epoch(t),
       date=date_of_days_from_epoch(days_from_epoch),
       ofday=ofday_of_days_from_epoch(t,days_from_epoch);
      return [0,date,ofday]}
    function now$0(param)
     {var float_ns=caml_call1(_Ax_,now(0));
      return to_span_since_epoch(float_ns * 1e-09)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$337);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     include$118=[0,_afs_,_ag0_],
     _alc_=
      [0,
       Replace_polymorphic_compare$7,
       _Iy_,
       _Ix_,
       _Iw_,
       _Iv_,
       _Iu_,
       _It_,
       equal$28,
       compare$48,
       min$10,
       max$10,
       _ak7_,
       _ak8_,
       _ak9_,
       _ak__,
       _ak$_,
       _ala_,
       robustly_compare$3,
       add$15,
       sub$9,
       diff$8,
       next$4,
       prev$4,
       to_span_since_epoch,
       of_span_since_epoch,
       of_date_ofday,
       to_date_ofday,
       to_date$0,
       to_ofday,
       of_absolute,
       to_absolute],
     _ald_=
      [0,
       bin_t$50,
       bin_read_t$5,
       bin_read_t$6,
       bin_reader_t$50,
       bin_size_t$2,
       bin_write_t$2,
       bin_writer_t$50,
       bin_shape_t$55,
       t_of_sexp$83,
       sexp_of_t$90,
       _Iy_,
       _Ix_,
       _Iw_,
       _Iv_,
       _Iu_,
       _It_,
       equal$28,
       compare$48,
       min$10,
       max$10,
       ascending$9,
       descending$9,
       between$9,
       clamp_exn$9,
       clamp$9,
       validate_lbound$9,
       validate_ubound$9,
       validate_bound$9,
       Replace_polymorphic_compare$7,
       comparator$19,
       Map$21,
       Set$21,
       validate_positive$3,
       validate_non_negative$3,
       validate_negative$3,
       validate_non_positive$3,
       is_positive$3,
       is_non_negative$3,
       is_negative$3,
       is_non_positive$3,
       sign$3,
       _agQ_,
       _agR_,
       _agS_,
       _agT_,
       _agU_,
       _agV_,
       _af5_,
       _aft_,
       _afu_,
       _afv_,
       _afw_,
       _afx_,
       _afy_,
       _afz_,
       of_string$22,
       to_string$25,
       create$24,
       to_parts$0,
       start_of_day,
       start_of_next_day,
       approximate_end_of_day,
       to_span_since_start_of_day,
       of_span_since_start_of_day,
       add$13,
       sub$8,
       next$3,
       prev$3,
       diff$6,
       small_diff,
       to_string_trimmed,
       to_sec_string,
       of_string_iso8601_extended,
       to_millisec_string],
     _ale_=
      [0,
       bin_t$50,
       bin_read_t$5,
       bin_read_t$6,
       bin_reader_t$50,
       bin_size_t$2,
       bin_write_t$2,
       bin_writer_t$50,
       bin_shape_t$55,
       t_of_sexp$80,
       sexp_of_t$88,
       Parts$0,
       _Iy_,
       _Ix_,
       _Iw_,
       _Iv_,
       _Iu_,
       _It_,
       equal$28,
       compare$48,
       min$10,
       max$10,
       ascending$9,
       descending$9,
       between$9,
       clamp_exn$9,
       clamp$9,
       validate_lbound$9,
       validate_ubound$9,
       validate_bound$9,
       Replace_polymorphic_compare$7,
       comparator$19,
       Map$20,
       Set$20,
       validate_positive$3,
       validate_non_negative$3,
       validate_negative$3,
       validate_non_positive$3,
       is_positive$3,
       is_non_negative$3,
       is_negative$3,
       is_non_positive$3,
       sign$3,
       _afg_,
       _afh_,
       _afi_,
       _afj_,
       _afk_,
       _afl_,
       _afc_,
       _aeF_,
       _aeG_,
       _aeH_,
       _aeI_,
       _aeJ_,
       _aeK_,
       robustly_compare$1,
       to_string$24,
       of_string$21,
       nanosecond,
       microsecond,
       millisecond,
       second$0,
       minute,
       hour,
       day$0,
       robust_comparison_tolerance,
       zero$4,
       create$23,
       to_parts,
       of_ns,
       of_us,
       of_ms,
       to_span_since_epoch,
       of_int_sec,
       of_int32_seconds,
       of_int63_seconds,
       of_min,
       of_hr,
       of_day,
       to_ns,
       to_us,
       to_ms,
       of_span_since_epoch,
       to_min,
       to_hr,
       to_day,
       to_int63_seconds_round_down_exn,
       to_float$3,
       _Is_,
       _Ir_,
       abs$4,
       neg$3,
       scale,
       _aeP_,
       _aeQ_,
       next$2,
       prev$2,
       to_short_string,
       to_unit_of_time,
       of_unit_of_time,
       to_string_hum$12,
       randomize],
     Core_kernel_Time_float0=
      [0,
       bin_t$50,
       bin_read_t$5,
       bin_read_t$6,
       bin_reader_t$50,
       bin_size_t$2,
       bin_write_t$2,
       bin_writer_t$50,
       bin_shape_t$55,
       hash_fold_t$27,
       hash$20,
       typerep_of_t$15,
       typename_of_t$14,
       _ale_,
       _ald_,
       Replace_polymorphic_compare$7,
       _ak7_,
       _ak8_,
       _ak9_,
       _ak__,
       _ak$_,
       _ala_,
       robustly_compare$3,
       add$15,
       sub$9,
       diff$8,
       next$4,
       prev$4,
       to_span_since_epoch,
       of_span_since_epoch,
       _Iy_,
       _Ix_,
       _Iw_,
       _Iv_,
       _Iu_,
       _It_,
       equal$28,
       compare$48,
       min$10,
       max$10,
       ascending$9,
       descending$9,
       between$9,
       clamp_exn$9,
       clamp$9,
       comparator$19,
       validate_lbound$9,
       validate_ubound$9,
       validate_bound$9,
       _alc_,
       now$0,
       include$118];
    caml_register_global
     (7506,Core_kernel_Time_float0,"Core_kernel__Time_float0");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$338);
    caml_call1(Expect_test_collector[4][1],cst_src_time_float_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$339,cst$186);
    var
     include$119=
      _ahf_
       ([0,
         bin_t$50,
         bin_read_t$5,
         bin_read_t$6,
         bin_reader_t$50,
         bin_size_t$2,
         bin_write_t$2,
         bin_writer_t$50,
         bin_shape_t$55,
         hash_fold_t$27,
         hash$20,
         typerep_of_t$15,
         typename_of_t$14,
         _ale_,
         _ald_,
         Replace_polymorphic_compare$7,
         _ak7_,
         _ak8_,
         _ak9_,
         _ak__,
         _ak$_,
         _ala_,
         robustly_compare$3,
         add$15,
         sub$9,
         diff$8,
         next$4,
         prev$4,
         to_span_since_epoch,
         of_span_since_epoch,
         _Iy_,
         _Ix_,
         _Iw_,
         _Iv_,
         _Iu_,
         _It_,
         equal$28,
         compare$48,
         min$10,
         max$10,
         ascending$9,
         descending$9,
         between$9,
         clamp_exn$9,
         clamp$9,
         comparator$19,
         validate_lbound$9,
         validate_ubound$9,
         validate_bound$9,
         _alc_,
         now$0]),
     _alf_=include$118[1],
     _alg_=include$118[2],
     _alh_=include$119[8],
     _ali_=
      [0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$187),0,_alh_],0],
     _alj_=
      caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_time_float_ml_13_6),
     group$114=caml_call2(Bin_prot_Shape[6],_alj_,_ali_),
     _alk_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$188),
     bin_shape_t$92=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$114,_alk_),0),
     bin_size_t$66=include$119[5],
     bin_write_t$67=include$119[6],
     bin_writer_t$83=[0,bin_size_t$66,bin_write_t$67],
     bin_read_t$131=include$119[3],
     bin_read_t$132=include$119[2],
     bin_reader_t$83=[0,bin_read_t$132,bin_read_t$131],
     bin_t$83=[0,bin_shape_t$92,bin_writer_t$83,bin_reader_t$83],
     compare$70=include$119[34];
    function sexp_of_t$92(t)
     {return caml_call2
              (sexp_of_t$25,sexp_of_t$58,caml_call2(include$119[75],t,utc))}
    function t_of_sexp$88(sexp)
     {try
       {if(1 === sexp[0])
         {var _bqM_=sexp[1];
          if(_bqM_)
           {var _bqN_=_bqM_[1];
            if(0 === _bqN_[0])
             {var _bqO_=_bqM_[2];
              if(_bqO_)
               {var _bqP_=_bqO_[1],_bqQ_=_bqN_[1];
                if(0 === _bqP_[0])
                 if(_bqO_[2])
                  var switch$0=0;
                 else
                  var
                   ofday_and_possibly_zone=_bqP_[1],
                   _bqR_=
                    caml_call2
                     (_Dw_,
                      _bqQ_,
                      caml_call2(_Dw_,cst$187,ofday_and_possibly_zone)),
                   _bqL_=caml_call1(include$119[65],_bqR_),
                   switch$0=1;
                else
                 var switch$0=0}
              else
               var switch$0=0}
            else
             var switch$0=0}
          else
           var switch$0=0}
        else
         var switch$0=0;
        if(! switch$0)
         var
          _bqL_=
           caml_call2(_Q3_,cst_Time_Stable_With_utc_V2_t_of_sexp,sexp);
        return _bqL_}
      catch(e)
       {e = caml_wrap_exception(e);
        if(e[1] === _Q2_)throw e;
        return caml_call2
                (_Q3_,caml_call2(_eJ_,_all_,caml_call1(Base_Exn[9],e)),sexp)}}
    var
     _aly_=include$119[13],
     _alz_=include$119[14],
     _al6_=include$119[47],
     _al7_=include$119[48],
     _amc_=include$119[55],
     _amg_=include$119[59],
     _alm_=include$119[1],
     _aln_=include$119[2],
     _alo_=include$119[3],
     _alp_=include$119[4],
     _alq_=include$119[5],
     _alr_=include$119[6],
     _als_=include$119[7],
     _alt_=include$119[8],
     _alu_=include$119[9],
     _alv_=include$119[10],
     _alw_=include$119[11],
     _alx_=include$119[12],
     _alA_=include$119[15],
     _alB_=include$119[16],
     _alC_=include$119[17],
     _alD_=include$119[18],
     _alE_=include$119[19],
     _alF_=include$119[20],
     _alG_=include$119[21],
     _alH_=include$119[22],
     _alI_=include$119[23],
     _alJ_=include$119[24],
     _alK_=include$119[25],
     _alL_=include$119[26],
     _alM_=include$119[27],
     _alN_=include$119[28],
     _alO_=include$119[29],
     _alP_=include$119[30],
     _alQ_=include$119[31],
     _alR_=include$119[32],
     _alS_=include$119[33],
     _alT_=include$119[34],
     _alU_=include$119[35],
     _alV_=include$119[36],
     _alW_=include$119[37],
     _alX_=include$119[38],
     _alY_=include$119[39],
     _alZ_=include$119[40],
     _al0_=include$119[41],
     _al1_=include$119[42],
     _al2_=include$119[43],
     _al3_=include$119[44],
     _al4_=include$119[45],
     _al5_=include$119[46],
     _al8_=include$119[49],
     _al9_=include$119[50],
     _al__=include$119[51],
     _al$_=include$119[52],
     _ama_=include$119[53],
     _amb_=include$119[54],
     _amd_=include$119[56],
     _ame_=include$119[57],
     _amf_=include$119[58],
     _amh_=include$119[60],
     _ami_=include$119[61],
     _amj_=include$119[62],
     _amk_=include$119[63],
     _aml_=include$119[64],
     _amm_=include$119[65],
     _amn_=include$119[66],
     _amo_=include$119[67],
     _amp_=include$119[68],
     _amq_=include$119[69],
     _amr_=include$119[70],
     _ams_=include$119[71],
     _amt_=include$119[72],
     _amu_=include$119[73],
     _amv_=include$119[74],
     _amw_=include$119[75],
     _amx_=include$119[76],
     _amy_=include$119[77],
     _amz_=include$119[78];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$340);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Time_float=
      [0,
       _alm_,
       _aln_,
       _alo_,
       _alp_,
       _alq_,
       _alr_,
       _als_,
       _alt_,
       _alu_,
       _alv_,
       _alw_,
       _alx_,
       _aly_,
       _alz_,
       _alA_,
       _alB_,
       _alC_,
       _alD_,
       _alE_,
       _alF_,
       _alG_,
       _alH_,
       _alI_,
       _alJ_,
       _alK_,
       _alL_,
       _alM_,
       _alN_,
       _alO_,
       _alP_,
       _alQ_,
       _alR_,
       _alS_,
       _alT_,
       _alU_,
       _alV_,
       _alW_,
       _alX_,
       _alY_,
       _alZ_,
       _al0_,
       _al1_,
       _al2_,
       _al3_,
       _al4_,
       _al5_,
       _al6_,
       _al7_,
       _al8_,
       _al9_,
       _al__,
       _al$_,
       _ama_,
       _amb_,
       _amc_,
       _amd_,
       _ame_,
       _amf_,
       _amg_,
       _amh_,
       _ami_,
       _amj_,
       _amk_,
       _aml_,
       _amm_,
       _amn_,
       _amo_,
       _amp_,
       _amq_,
       _amr_,
       _ams_,
       _amt_,
       _amu_,
       _amv_,
       _amw_,
       _amx_,
       _amy_,
       _amz_,
       [0,
        _alf_,
        _alg_,
        [0,
         [0,
          bin_t$83,
          bin_read_t$132,
          bin_read_t$131,
          bin_reader_t$83,
          bin_size_t$66,
          bin_write_t$67,
          bin_writer_t$83,
          bin_shape_t$92,
          compare$70,
          t_of_sexp$88,
          sexp_of_t$92]],
        _YP_]];
    caml_register_global
     (7507,Core_kernel_Time_float,"Core_kernel__Time_float");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$341);
    caml_call1(Expect_test_collector[4][1],cst_src_date_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$342,cst$188);
    function of_time(time,zone){return caml_call2(_amg_,time,zone)}
    function today(zone){return of_time(caml_call1(_al6_,0),zone)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$343);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Date=
      [0,
       bin_t$74,
       bin_read_t$127,
       bin_read_t$128,
       bin_reader_t$74,
       bin_size_t$64,
       bin_write_t$65,
       bin_writer_t$74,
       bin_shape_t$83,
       t_of_sexp$73,
       sexp_of_t$83,
       hash_fold_t$42,
       hash$34,
       hashable$10,
       Table$12,
       Hash_set$12,
       Hash_queue$11,
       of_string$19,
       to_string$22,
       _adk_,
       _adl_,
       _adm_,
       _adn_,
       _ado_,
       _adp_,
       equal$34,
       compare$64,
       min$15,
       max$15,
       ascending$14,
       descending$14,
       between$14,
       clamp_exn$14,
       clamp$14,
       validate_lbound$14,
       validate_ubound$14,
       validate_bound$14,
       Replace_polymorphic_compare$12,
       comparator$25,
       Map$18,
       Set$18,
       _adq_,
       create_exn,
       of_string_iso8601_basic,
       to_string_iso8601_basic,
       to_string_american,
       day,
       month,
       year,
       day_of_week,
       week_number,
       is_weekend,
       is_weekday,
       is_business_day,
       add_days$0,
       add_months,
       add_years,
       diff$5,
       diff_weekdays,
       diff_weekend_days,
       add_weekdays,
       add_business_days,
       add_days_skipping,
       dates_between,
       business_dates_between,
       weekdays_between,
       previous_weekday,
       following_weekday,
       first_strictly_after,
       is_leap_year,
       unix_epoch,
       gen$16,
       obs$14,
       shrinker$14,
       gen_incl$1,
       gen_uniform_incl$0,
       Days,
       Stable$5,
       O$7,
       of_time,
       today];
    caml_register_global(7508,Core_kernel_Date,"Core_kernel__Date");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$344);
    caml_call1(Expect_test_collector[4][1],cst_src_date_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$345,cst$189);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$346);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Date_intf=[0];
    caml_register_global(7509,Core_kernel_Date_intf,"Core_kernel__Date_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$347);
    caml_call1(Expect_test_collector[4][1],cst_src_version_util_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$348,cst$190);
    var
     build_info=runtime.generated_build_info(0),
     s$0=runtime.generated_hg_version(0),
     match=caml_call2(_Gw_,s$0,cst$191);
    if(match)var s=match[1],hg_version=s;else var hg_version=s$0;
    var
     version=caml_call3(_GA_,10,32,hg_version),
     version_list=caml_call2(_GN_,hg_version,10),
     _amA_=0,
     _amB_=
      [0,
       [0,
        cst_build_info,
        [0,
         function(param)
          {caml_call1(print_endline,build_info);return caml_call1(exit,0)}],
        cst_Print_build_info_as_sexp_and_exit],
       _amA_],
     arg_spec=
      [0,
       [0,
        cst_version,
        [0,
         function(param)
          {caml_call1(print_endline,hg_version);return caml_call1(exit,0)}],
        cst_Print_the_hg_revision_of_this_build_and_exit],
       _amB_];
    function t_of_sexp$89(t){return caml_call2(Map$10[87],_PU_,t)}
    function sexp_of_t$93(v){return caml_call2(Map$10[88],_PT_,v)}
    var Application_specific_fields=[0,t_of_sexp$89,sexp_of_t$93];
    function t_of_sexp$90(sexp)
     {var str=caml_call1(t_of_sexp$46,sexp);
      try
       {var match=caml_call2(_Gw_,str,cst_Z$2);
        if(match)
         {var rest=match[1],match$0=caml_call2(_GP_,rest,32);
          if(match$0)
           var
            match$1=match$0[1],
            ofday=match$1[2],
            date=match$1[1],
            date$0=t_of_sexp$73(caml_call1(sexp_of_t$58,date)),
            _bqH_=caml_call1(sexp_of_t$58,ofday),
            ofday$0=caml_call1(_alz_[9],_bqH_),
            _bqI_=[0,caml_call3(_amc_,_al7_[6],date$0,ofday$0),sexp];
          else
           var
            _bqI_=
             caml_call1
              (failwith,
               cst_time_must_contain_one_space_between_date_and_ofday);
          var _bqJ_=_bqI_}
        else
         var _bqJ_=caml_call1(failwith,cst_zone_must_be_Z);
        return _bqJ_}
      catch(_bqK_)
       {_bqK_ = caml_wrap_exception(_bqK_);
        var e=_bqK_[1] === Sexplib_Conv[25]?_bqK_[2]:_bqK_;
        throw [0,Sexplib_Conv[25],e,sexp]}}
    var sexp_of_t_ref=[0,function(param){var sexp=param[2];return sexp}];
    function _amN_(param){return caml_call1(_PE_,build_info)}
    var sexp=caml_call1(Base_Exn[14],_amN_);
    function _amO_(param$0)
     {if(0 === sexp[0])
       return caml_call2(Sexplib0_Sexp_conv_error[15],tp_loc$35,sexp);
      var
       field_sexps=sexp[1],
       username_field=[0,0],
       hostname_field=[0,0],
       kernel_field=[0,0],
       build_time_field=[0,0],
       x_library_inlining_field=[0,0],
       portable_int63_field=[0,0],
       dynlinkable_code_field=[0,0],
       ocaml_version_field=[0,0],
       executable_path_field=[0,0],
       build_system_field=[0,0],
       application_specific_fields_field=[0,0],
       duplicates=[0,0],
       extra=[0,0],
       param=field_sexps;
      for(;;)
       {if(param)
         {var _bqr_=param[1];
          if(1 === _bqr_[0])
           {var _bqs_=_bqr_[1];
            if(_bqs_)
             {var _bqt_=_bqs_[1];
              if(0 === _bqt_[0])
               {var _bqu_=_bqs_[2],_bqv_=_bqt_[1];
                if(! _bqu_)
                 {var tail$0=param[2];
                  if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_bqv_,extra[1]];
                  var param=tail$0;
                  continue}
                if(! _bqu_[2])
                 {var
                   tail=param[2],
                   field_sexp=_bqu_[1],
                   switch$0=caml_string_compare(_bqv_,cst_hostname);
                  if(0 <= switch$0)
                   if(0 < switch$0)
                    if(caml_string_notequal(_bqv_,cst_kernel))
                     if(caml_string_notequal(_bqv_,cst_ocaml_version))
                      if(caml_string_notequal(_bqv_,cst_portable_int63))
                       if(caml_string_notequal(_bqv_,cst_username))
                        if(caml_string_notequal(_bqv_,cst_x_library_inlining))
                         var switch$1=1;
                        else
                         {if(x_library_inlining_field[1])
                           duplicates[1] = [0,_bqv_,duplicates[1]];
                          else
                           {var fvalue=caml_call1(_Bz_,field_sexp);
                            x_library_inlining_field[1] = [0,fvalue]}
                          var switch$1=0}
                       else
                        {if(username_field[1])
                          duplicates[1] = [0,_bqv_,duplicates[1]];
                         else
                          {var fvalue$0=caml_call1(t_of_sexp$46,field_sexp);
                           username_field[1] = [0,fvalue$0]}
                         var switch$1=0}
                      else
                       {if(portable_int63_field[1])
                         duplicates[1] = [0,_bqv_,duplicates[1]];
                        else
                         {var fvalue$1=caml_call1(_Bz_,field_sexp);
                          portable_int63_field[1] = [0,fvalue$1]}
                        var switch$1=0}
                     else
                      {if(ocaml_version_field[1])
                        duplicates[1] = [0,_bqv_,duplicates[1]];
                       else
                        {var fvalue$2=caml_call1(t_of_sexp$46,field_sexp);
                         ocaml_version_field[1] = [0,fvalue$2]}
                       var switch$1=0}
                    else
                     {if(kernel_field[1])
                       duplicates[1] = [0,_bqv_,duplicates[1]];
                      else
                       {var fvalue$3=caml_call1(t_of_sexp$46,field_sexp);
                        kernel_field[1] = [0,fvalue$3]}
                      var switch$1=0}
                   else
                    {if(hostname_field[1])
                      duplicates[1] = [0,_bqv_,duplicates[1]];
                     else
                      {var fvalue$4=caml_call1(t_of_sexp$46,field_sexp);
                       hostname_field[1] = [0,fvalue$4]}
                     var switch$1=0}
                  else
                   if
                    (caml_string_notequal(_bqv_,cst_application_specific_fields))
                    if(caml_string_notequal(_bqv_,cst_build_system))
                     if(caml_string_notequal(_bqv_,cst_build_time))
                      if(caml_string_notequal(_bqv_,cst_dynlinkable_code))
                       if(caml_string_notequal(_bqv_,cst_executable_path))
                        var switch$1=1;
                       else
                        {if(executable_path_field[1])
                          duplicates[1] = [0,_bqv_,duplicates[1]];
                         else
                          {var fvalue$5=caml_call1(t_of_sexp$46,field_sexp);
                           executable_path_field[1] = [0,fvalue$5]}
                         var switch$1=0}
                      else
                       {if(dynlinkable_code_field[1])
                         duplicates[1] = [0,_bqv_,duplicates[1]];
                        else
                         {var fvalue$6=caml_call1(_Bz_,field_sexp);
                          dynlinkable_code_field[1] = [0,fvalue$6]}
                        var switch$1=0}
                     else
                      {if(build_time_field[1])
                        duplicates[1] = [0,_bqv_,duplicates[1]];
                       else
                        {var fvalue$7=t_of_sexp$90(field_sexp);
                         build_time_field[1] = [0,fvalue$7]}
                       var switch$1=0}
                    else
                     {if(build_system_field[1])
                       duplicates[1] = [0,_bqv_,duplicates[1]];
                      else
                       {var fvalue$8=caml_call1(t_of_sexp$46,field_sexp);
                        build_system_field[1] = [0,fvalue$8]}
                      var switch$1=0}
                   else
                    {if(application_specific_fields_field[1])
                      duplicates[1] = [0,_bqv_,duplicates[1]];
                     else
                      {var
                        fvalue$9=
                         caml_call1(Application_specific_fields[1],field_sexp);
                       application_specific_fields_field[1] = [0,fvalue$9]}
                     var switch$1=0}
                  if(switch$1)
                   if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_bqv_,extra[1]];
                  var param=tail;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[9],tp_loc$35,_bqr_)}
        if(duplicates[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[11],tp_loc$35,duplicates[1],sexp);
        if(extra[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],tp_loc$35,extra[1],sexp);
        var
         _bqA_=x_library_inlining_field[1],
         _bqB_=portable_int63_field[1],
         _bqC_=dynlinkable_code_field[1],
         _bqD_=ocaml_version_field[1],
         _bqE_=executable_path_field[1],
         _bqF_=build_system_field[1],
         _bqw_=username_field[1],
         _bqx_=hostname_field[1],
         _bqy_=kernel_field[1],
         _bqz_=build_time_field[1],
         _bqG_=application_specific_fields_field[1];
        if(_bqA_)
         if(_bqB_)
          if(_bqC_)
           if(_bqD_)
            if(_bqE_)
             if(_bqF_)
              {var
                build_system_value=_bqF_[1],
                executable_path_value=_bqE_[1],
                ocaml_version_value=_bqD_[1],
                dynlinkable_code_value=_bqC_[1],
                portable_int63_value=_bqB_[1],
                x_library_inlining_value=_bqA_[1];
               return [0,
                       _bqw_,
                       _bqx_,
                       _bqy_,
                       _bqz_,
                       x_library_inlining_value,
                       portable_int63_value,
                       dynlinkable_code_value,
                       ocaml_version_value,
                       executable_path_value,
                       build_system_value,
                       _bqG_]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[14],
                 tp_loc$35,
                 sexp,
                 [0,
                  [0,
                   0 === x_library_inlining_field[1]?1:0,
                   cst_x_library_inlining$0],
                  [0,
                   [0,0 === portable_int63_field[1]?1:0,cst_portable_int63$0],
                   [0,
                    [0,
                     0 === dynlinkable_code_field[1]?1:0,
                     cst_dynlinkable_code$0],
                    [0,
                     [0,0 === ocaml_version_field[1]?1:0,cst_ocaml_version$0],
                     [0,
                      [0,0 === executable_path_field[1]?1:0,cst_executable_path$0],
                      [0,[0,0 === build_system_field[1]?1:0,cst_build_system$0],0]]]]]])}}
    var
     param=caml_call1(Base_Exn[14],_amO_),
     _amT_=param[7],
     _amV_=param[5],
     _amW_=param[4],
     _amP_=param[11],
     _amQ_=param[10],
     _amR_=param[9],
     _amS_=param[8],
     _amU_=param[6],
     _amX_=param[3],
     _amY_=param[2],
     _amZ_=param[1];
    if(_amW_)
     var match$0=_amW_[1],time=match$0[1],_am0_=[0,time];
    else
     var _am0_=0;
    function reprint_build_info(sexp_of_time)
     {function _bqq_(param$0)
       {var
         v_application_specific_fields=param[11],
         v_build_system=param[10],
         v_executable_path=param[9],
         v_ocaml_version=param[8],
         v_dynlinkable_code=param[7],
         v_portable_int63=param[6],
         v_x_library_inlining=param[5],
         v_build_time=param[4],
         v_kernel=param[3],
         v_hostname=param[2],
         v_username=param[1],
         bnds=0;
        if(v_application_specific_fields)
         var
          v=v_application_specific_fields[1],
          arg$0=caml_call1(Application_specific_fields[2],v),
          bnd=[1,[0,_amC_,[0,arg$0,0]]],
          bnds$0=[0,bnd,bnds];
        else
         var bnds$0=bnds;
        var
         arg$1=caml_call1(sexp_of_t$58,v_build_system),
         bnds$1=[0,[1,[0,_amD_,[0,arg$1,0]]],bnds$0],
         arg$2=caml_call1(sexp_of_t$58,v_executable_path),
         bnds$2=[0,[1,[0,_amE_,[0,arg$2,0]]],bnds$1],
         arg$3=caml_call1(sexp_of_t$58,v_ocaml_version),
         bnds$3=[0,[1,[0,_amF_,[0,arg$3,0]]],bnds$2],
         arg$4=caml_call1(_BA_,v_dynlinkable_code),
         bnds$4=[0,[1,[0,_amG_,[0,arg$4,0]]],bnds$3],
         arg$5=caml_call1(_BA_,v_portable_int63),
         bnds$5=[0,[1,[0,_amH_,[0,arg$5,0]]],bnds$4],
         arg$6=caml_call1(_BA_,v_x_library_inlining),
         bnds$6=[0,[1,[0,_amI_,[0,arg$6,0]]],bnds$5];
        if(v_build_time)
         var
          v$0=v_build_time[1],
          arg=caml_call1(sexp_of_t_ref[1],v$0),
          bnd$0=[1,[0,_amJ_,[0,arg,0]]],
          bnds$7=[0,bnd$0,bnds$6];
        else
         var bnds$7=bnds$6;
        if(v_kernel)
         var
          v$1=v_kernel[1],
          arg$7=caml_call1(sexp_of_t$58,v$1),
          bnd$1=[1,[0,_amK_,[0,arg$7,0]]],
          bnds$8=[0,bnd$1,bnds$7];
        else
         var bnds$8=bnds$7;
        if(v_hostname)
         var
          v$2=v_hostname[1],
          arg$8=caml_call1(sexp_of_t$58,v$2),
          bnd$2=[1,[0,_amL_,[0,arg$8,0]]],
          bnds$9=[0,bnd$2,bnds$8];
        else
         var bnds$9=bnds$8;
        if(v_username)
         var
          v$3=v_username[1],
          arg$9=caml_call1(sexp_of_t$58,v$3),
          bnd$3=[1,[0,_amM_,[0,arg$9,0]]],
          bnds$10=[0,bnd$3,bnds$9];
        else
         var bnds$10=bnds$9;
        return caml_call1(_PM_,[1,bnds$10])}
      return caml_call3
              (_OF_,
               sexp_of_t_ref,
               function(param)
                {var time=param[1];return caml_call1(sexp_of_time,time)},
               _bqq_)}
    var _am1_=_amV_?1 - _amT_:_amV_;
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$349);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Version_util=
      [0,
       version,
       version_list,
       arg_spec,
       Application_specific_fields,
       build_info,
       sexp,
       reprint_build_info,
       _amZ_,
       _amY_,
       _amX_,
       _am0_,
       _amV_,
       _amU_,
       _amT_,
       _am1_,
       _amP_,
       _amS_,
       _amR_,
       _amQ_];
    caml_register_global
     (7510,Core_kernel_Version_util,"Core_kernel__Version_util");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$350);
    caml_call1(Expect_test_collector[4][1],cst_src_validated_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$351,cst$192);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$352);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Validated_intf=[0];
    caml_register_global
     (7511,Core_kernel_Validated_intf,"Core_kernel__Validated_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$353);
    caml_call1(Expect_test_collector[4][1],cst_src_validated_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$354,cst$193);
    function raw(t){return t}
    function Make$10(Raw)
     {var sexp_of_t=Raw[2];
      function validation_failed(t,error)
       {function _bqp_(param)
         {var
           v2=param[3],
           v1=param[2],
           v0=param[1],
           v0$0=caml_call1(Raw[2],v0),
           v1$0=caml_call1(sexp_of_t$18,v1),
           v2$0=caml_call1(_jC_,v2);
          return [1,[0,v0$0,[0,v1$0,[0,v2$0,0]]]]}
        return caml_call5
                (_kC_,0,0,cst_validation_failed,[0,t,error,Raw[3]],_bqp_)}
      function create_exn(t)
       {var
         _bqo_=caml_call1(Raw[4],t),
         match=caml_call1(Base_Validate[15],_bqo_);
        if(0 === match[0])return t;
        var error=match[1];
        return caml_call1(_kL_,validation_failed(t,error))}
      function create(t)
       {var
         _bqn_=caml_call1(Raw[4],t),
         match=caml_call1(Base_Validate[15],_bqn_);
        if(0 === match[0])return [0,t];
        var error=match[1];
        return [1,validation_failed(t,error)]}
      function t_of_sexp(sexp){return create_exn(caml_call1(Raw[1],sexp))}
      function raw(t){return t}
      return [0,sexp_of_t,validation_failed,create_exn,create,t_of_sexp,raw]}
    function Add_bin_io(Raw,Validated)
     {function of_binable(raw)
       {return Raw[13]?caml_call1(Validated[4],raw):raw}
      function to_binable(_bqm_){return _bqm_}
      var
       include=
        caml_call1
         (caml_call1(_W5_,[0,Raw[8],Raw[5],Raw[6],Raw[2],Raw[3]]),
          [0,to_binable,of_binable]),
       bin_size_t=include[1],
       bin_write_t=include[2],
       bin_read_t=include[3],
       bin_read_t$0=include[4],
       bin_shape_t=include[5],
       bin_writer_t=include[6],
       bin_reader_t=include[7],
       bin_t=include[8];
      return [0,
              bin_size_t,
              bin_write_t,
              bin_read_t,
              bin_read_t$0,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t]}
    function Add_compare(Raw,Validated)
     {function compare(t1,t2){return caml_call2(Raw[1],t1,t2)}
      return [0,compare]}
    function Add_hash(Raw,Validated)
     {function hash_fold_t(state,t)
       {var _bql_=caml_call1(Validated[5],t);
        return caml_call2(Raw[1],state,_bql_)}
      function hash(t)
       {var _bqk_=caml_call1(Validated[5],t);return caml_call1(Raw[2],_bqk_)}
      return [0,hash_fold_t,hash]}
    function Make_binable$0(Raw)
     {var
       T0=Make$10([0,Raw[9],Raw[10],Raw[11],Raw[12]]),
       sexp_of_t=T0[1],
       validation_failed=T0[2],
       create_exn=T0[3],
       create=T0[4],
       t_of_sexp=T0[5],
       raw=T0[6],
       include=Add_bin_io(Raw,[0,T0[5],T0[1],T0[4],T0[3],T0[6]]),
       bin_size_t=include[1],
       bin_write_t=include[2],
       bin_read_t=include[3],
       bin_read_t$0=include[4],
       bin_shape_t=include[5],
       bin_writer_t=include[6],
       bin_reader_t=include[7],
       bin_t=include[8];
      return [0,
              T0,
              sexp_of_t,
              validation_failed,
              create_exn,
              create,
              t_of_sexp,
              raw,
              bin_size_t,
              bin_write_t,
              bin_read_t,
              bin_read_t$0,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t]}
    function _am2_(param)
     {var
       _bp4_=
        [0,
         [0,
          caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$189),
          0,
          bin_shape_int],
         0],
       _bp5_=
        caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_validated_ml_113_6),
       group=caml_call2(Bin_prot_Shape[6],_bp5_,_bp4_),
       _bp6_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$190),
       bin_shape_t=caml_call1(caml_call2(Bin_prot_Shape[14],group,_bp6_),0),
       bin_writer_t=[0,bin_size_t$36,bin_write_t$36],
       bin_reader_t=[0,bin_read_t$74,bin_read_t$73],
       bin_t=[0,bin_shape_t,bin_writer_t,bin_reader_t];
      function validate(t)
       {return 0 < t
                ?Base_Validate[1]
                :caml_call1(Base_Validate[2],cst_must_be_positive)}
      var
       does_raise=Base_Exn[16],
       M=Make$10([0,t_of_sexp$32,sexp_of_t$43,here,validate]),
       _bp7_=M[5],
       _bp8_=M[1];
      function _bp9_(param)
       {if
         (caml_call1
           (does_raise,
            function(param)
             {return caml_call1(_bp7_,caml_call1(sexp_of_t$43,0))}))
         return 0;
        throw [0,Assert_failure,_am3_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_assert_does_raise_fun_t_of_sexp_s,
        0,
        cst_src_validated_ml$0,
        141,
        6,
        85,
        _bp9_);
      function _bp__(param)
       {var sexp=caml_call1(sexp_of_t$43,13);
        if(caml_equal(caml_call1(_bp8_,caml_call1(_bp7_,sexp)),sexp))return 0;
        throw [0,Assert_failure,_am4_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_assert_sexp_of_t_t_of_sexp_sexp_sexp,
        0,
        cst_src_validated_ml$1,
        143,
        6,
        115,
        _bp__);
      var _bp$_=M[4],_bqa_=M[3],_bqb_=M[6];
      function _bqc_(param)
       {if(caml_call1(does_raise,function(param){return caml_call1(_bqa_,0)}))
         return 0;
        throw [0,Assert_failure,_am5_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_assert_does_raise_fun_create_exn_0,
        0,
        cst_src_validated_ml$2,
        152,
        6,
        68,
        _bqc_);
      function _bqd_(param)
       {var match=caml_call1(_bp$_,0);
        if(0 === match[0])throw [0,Assert_failure,_am6_];
        return 0}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_match_create_0_with_Error_Ok,
        0,
        cst_src_validated_ml$3,
        154,
        6,
        106,
        _bqd_);
      function _bqe_(param)
       {var t=caml_call1(_bqa_,13);
        if(caml_call1(_bqb_,t) === 13)return 0;
        throw [0,Assert_failure,_am7_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_assert_raw_t_n,
        0,
        cst_src_validated_ml$4,
        160,
        6,
        104,
        _bqe_);
      function _bqf_(param)
       {var match=caml_call1(_bp$_,13);
        if(0 === match[0])
         {var t=match[1];if(t === 13)return 0;throw [0,Assert_failure,_am8_]}
        throw [0,Assert_failure,_am9_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_match_create_n_with_Error_assert_false,
        0,
        cst_src_validated_ml$5,
        166,
        6,
        149,
        _bqf_);
      var
       M1=
        Make_binable$0
         ([0,
           bin_t,
           bin_read_t$74,
           bin_read_t$73,
           bin_reader_t,
           bin_size_t$36,
           bin_write_t$36,
           bin_writer_t,
           bin_shape_t,
           t_of_sexp$32,
           sexp_of_t$43,
           here$0,
           validate,
           1]),
       M2=
        Make_binable$0
         ([0,
           bin_t,
           bin_read_t$74,
           bin_read_t$73,
           bin_reader_t,
           bin_size_t$36,
           bin_write_t$36,
           bin_writer_t,
           bin_shape_t,
           t_of_sexp$32,
           sexp_of_t$43,
           here$1,
           validate,
           0]),
       string=
        to_string$19
         ([0,
           bin_size_t$36,
           bin_write_t$36,
           bin_read_t$74,
           bin_read_t$73,
           bin_shape_t$35,
           bin_writer_t$30,
           bin_reader_t$30,
           bin_t$30],
          0);
      function _bqg_(param)
       {return caml_call1
                (does_raise,
                 function(param)
                  {return of_string$16
                           ([0,M1[8],M1[9],M1[10],M1[11],M1[12],M1[13],M1[14],M1[15]],
                            string)})}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_does_raise_fun_Binable_of_string_modu,
        0,
        cst_src_validated_ml$6,
        188,
        4,
        76,
        _bqg_);
      function _bqh_(param)
       {return of_string$16
                 ([0,M2[8],M2[9],M2[10],M2[11],M2[12],M2[13],M2[14],M2[15]],
                  string)
                ===
                0
                ?1
                :0}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_Binable_of_string_module_M2_string_int,
        0,
        cst_src_validated_ml$7,
        189,
        4,
        61,
        _bqh_);
      var
       string$0=
        to_string$19
         ([0,
           bin_size_t$36,
           bin_write_t$36,
           bin_read_t$74,
           bin_read_t$73,
           bin_shape_t$35,
           bin_writer_t$30,
           bin_reader_t$30,
           bin_t$30],
          1);
      function _bqi_(param)
       {return of_string$16
                 ([0,M1[8],M1[9],M1[10],M1[11],M1[12],M1[13],M1[14],M1[15]],
                  string$0)
                ===
                1
                ?1
                :0}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_Binable_of_string_module_M1_string_int,
        0,
        cst_src_validated_ml$8,
        193,
        4,
        59,
        _bqi_);
      function _bqj_(param)
       {return of_string$16
                 ([0,M2[8],M2[9],M2[10],M2[11],M2[12],M2[13],M2[14],M2[15]],
                  string$0)
                ===
                1
                ?1
                :0}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_Binable_of_string_module_M2_string_int$0,
        0,
        cst_src_validated_ml$9,
        194,
        4,
        59,
        _bqj_);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst$194,
      0,
      cst_src_validated_ml$10,
      109,
      0,
      2146,
      _am2_);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$355);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    function _am__(Raw,_bp3_)
     {var
       Typename_of_t=caml_call1(Typerep_lib_Make_typename[1],[0,name$56]),
       typename_of_t=Typename_of_t[2],
       name_of_t=Typename_of_t[1],
       typerep_of_t=[9,[0,name_of_t,[0,Raw[1]]]];
      return [0,typerep_of_t,typename_of_t]}
    function _am$_(_bp1_,_bp0_)
     {var _bp2_=Add_bin_io(_bp1_,_bp0_);
      return [0,
              _bp2_[8],
              _bp2_[3],
              _bp2_[4],
              _bp2_[7],
              _bp2_[1],
              _bp2_[2],
              _bp2_[6],
              _bp2_[5]]}
    function _ana_(Raw)
     {var
       T=
        Make_binable$0
         ([0,
           Raw[4],
           Raw[5],
           Raw[6],
           Raw[7],
           Raw[8],
           Raw[9],
           Raw[10],
           Raw[11],
           Raw[12],
           Raw[13],
           Raw[14],
           Raw[15],
           Raw[16]]),
       sexp_of_t=T[2],
       create_exn=T[4],
       create=T[5],
       t_of_sexp=T[6],
       raw=T[7],
       bin_size_t=T[8],
       bin_write_t=T[9],
       bin_read_t=T[10],
       bin_read_t$0=T[11],
       bin_shape_t=T[12],
       bin_writer_t=T[13],
       bin_reader_t=T[14],
       bin_t=T[15],
       compare=
        Add_compare
          ([0,Raw[1],Raw[12],Raw[13],Raw[14],Raw[15]],
           [0,T[6],T[2],T[5],T[4],T[7]])
         [1],
       include=
        Add_hash
         ([0,Raw[2],Raw[3],Raw[12],Raw[13],Raw[14],Raw[15]],
          [0,T[6],T[2],T[5],T[4],T[7]]),
       hash_fold_t=include[1],
       hash=include[2];
      return [0,
              t_of_sexp,
              sexp_of_t,
              create,
              create_exn,
              raw,
              bin_t,
              bin_read_t,
              bin_read_t$0,
              bin_reader_t,
              bin_size_t,
              bin_write_t,
              bin_writer_t,
              bin_shape_t,
              compare,
              hash_fold_t,
              hash]}
    var
     Core_kernel_Validated=
      [0,
       raw,
       function(_bpY_)
        {var _bpZ_=Make$10(_bpY_);
         return [0,_bpZ_[5],_bpZ_[1],_bpZ_[4],_bpZ_[3],_bpZ_[6]]},
       _ana_,
       _am$_,
       Add_compare,
       Add_hash,
       _am__];
    caml_register_global(7512,Core_kernel_Validated,"Core_kernel__Validated");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$356);
    caml_call1(Expect_test_collector[4][1],cst_src_queue_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$357,cst$195);
    var
     compare$71=include$120[1],
     t_of_sexp$91=include$120[2],
     sexp_of_t$94=include$120[3],
     mem$14=include$120[4],
     length$23=include$120[5],
     is_empty$15=include$120[6],
     iter$23=include$120[7],
     fold$19=include$120[8],
     fold_result$8=include$120[9],
     fold_until$8=include$120[10],
     exists$17=include$120[11],
     for_all$17=include$120[12],
     count$13=include$120[13],
     sum$9=include$120[14],
     find$15=include$120[15],
     find_map$8=include$120[16],
     to_list$15=include$120[17],
     to_array$9=include$120[18],
     min_elt$12=include$120[19],
     max_elt$12=include$120[20],
     foldi$2=include$120[21],
     iteri$7=include$120[22],
     existsi$7=include$120[23],
     for_alli$7=include$120[24],
     counti$7=include$120[25],
     findi$2=include$120[26],
     find_mapi$2=include$120[27],
     singleton$11=include$120[28],
     of_list$11=include$120[29],
     of_array$5=include$120[30],
     init$7=include$120[31],
     enqueue=include$120[32],
     enqueue_all=include$120[33],
     dequeue=include$120[34],
     dequeue_exn=include$120[35],
     peek=include$120[36],
     peek_exn=include$120[37],
     clear$2=include$120[38],
     copy$4=include$120[39],
     map$29=include$120[40],
     mapi$7=include$120[41],
     concat_map$2=include$120[42],
     concat_mapi$2=include$120[43],
     filter_map$12=include$120[44],
     filter_mapi$7=include$120[45],
     filter$14=include$120[46],
     filteri$7=include$120[47],
     filter_inplace$2=include$120[48],
     filteri_inplace$0=include$120[49],
     equal$36=include$120[50],
     invariant$5=include$120[51],
     create$26=include$120[52],
     last$2=include$120[53],
     last_exn$0=include$120[54],
     blit_transfer=include$120[55],
     get$8=include$120[56],
     set$10=include$120[57],
     capacity=include$120[58],
     set_capacity=include$120[59];
    function of_array$6(a)
     {var
       r=caml_call2(create$26,0,0),
       _bpT_=caml_call2(_ai_,caml_call1(length$1,a),1),
       _bpS_=0;
      if(! (_bpT_ < 0))
       {var i$0=_bpS_;
        for(;;)
         {caml_call2(enqueue,r,caml_check_bound(a,i$0)[i$0 + 1]);
          var _bpX_=i$0 + 1 | 0;
          if(_bpT_ !== i$0){var i$0=_bpX_;continue}
          break}}
      var _bpV_=caml_call2(_ai_,caml_call1(length$1,a),1),_bpU_=0;
      if(! (_bpV_ < 0))
       {var i=_bpU_;
        for(;;)
         {caml_call1(dequeue_exn,r);
          caml_call2(enqueue,r,caml_check_bound(a,i)[i + 1]);
          var _bpW_=i + 1 | 0;
          if(_bpV_ !== i){var i=_bpW_;continue}
          break}}
      return r}
    var
     For_test=[0,of_array$6],
     include$121=
      caml_call1
       (Base_for_tests_Test_binary_searchable[4],[0,get$8,length$23,For_test]),
     _anb_=include$121[1],
     _anc_=include$121[2],
     _and_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$77),
     _ane_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_queue_ml_36_25),
     _anf_=caml_call2(Bin_prot_Shape[15],_ane_,_and_),
     _ang_=[0,caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$78),0],
     _anh_=
      [0,
       [0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_el$13),_ang_,_anf_],
       0],
     _ani_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_queue_ml_36_6),
     group$115=caml_call2(Bin_prot_Shape[6],_ani_,_anh_);
    function bin_shape_el$2(a)
     {var _bpR_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_el$14);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$115,_bpR_),[0,a,0])}
    function bin_size_el$2(size_of_a){return size_of_a}
    function bin_write_el$2(write_a){return write_a}
    function bin_read_el$2(of_a){return of_a}
    var
     caller_identity$2=
      caml_call1
       (Bin_shape_lib_Bin_shape[5][1],
        cst_b4c84254_4992_11e6_9ba7_734e154027bd);
    function init$8(len,next)
     {return caml_call2(init$7,len,function(param){return caml_call1(next,0)})}
    var
     include$122=
      caml_call1
       (Bin_prot_Utils[12],
        [0,
         caller_identity$2,
         module_name$12,
         length$23,
         iter$23,
         init$8,
         bin_size_el$2,
         bin_write_el$2,
         bin_read_el$2,
         bin_shape_el$2]),
     bin_shape_t$93=include$122[1],
     bin_size_t$67=include$122[2],
     bin_write_t$68=include$122[3],
     bin_read_t$133=include$122[4],
     bin_read_t$134=include$122[5],
     bin_writer_t$84=include$122[6],
     bin_reader_t$84=include$122[7],
     bin_t$84=include$122[8];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$358);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Queue=
      [0,
       bin_t$84,
       bin_read_t$133,
       bin_read_t$134,
       bin_reader_t$84,
       bin_size_t$67,
       bin_write_t$68,
       bin_writer_t$84,
       bin_shape_t$93,
       compare$71,
       t_of_sexp$91,
       sexp_of_t$94,
       mem$14,
       length$23,
       is_empty$15,
       iter$23,
       fold$19,
       fold_result$8,
       fold_until$8,
       exists$17,
       for_all$17,
       count$13,
       sum$9,
       find$15,
       find_map$8,
       to_list$15,
       to_array$9,
       min_elt$12,
       max_elt$12,
       foldi$2,
       iteri$7,
       existsi$7,
       for_alli$7,
       counti$7,
       findi$2,
       find_mapi$2,
       singleton$11,
       of_list$11,
       of_array$5,
       init$7,
       enqueue,
       enqueue_all,
       dequeue,
       dequeue_exn,
       peek,
       peek_exn,
       clear$2,
       copy$4,
       map$29,
       mapi$7,
       concat_map$2,
       concat_mapi$2,
       filter_map$12,
       filter_mapi$7,
       filter$14,
       filteri$7,
       filter_inplace$2,
       filteri_inplace$0,
       equal$36,
       invariant$5,
       create$26,
       last$2,
       last_exn$0,
       blit_transfer,
       get$8,
       set$10,
       capacity,
       set_capacity,
       _anb_,
       _anc_,
       [0,
        [0,
         bin_t$84,
         bin_read_t$133,
         bin_read_t$134,
         bin_reader_t$84,
         bin_size_t$67,
         bin_write_t$68,
         bin_writer_t$84,
         bin_shape_t$93,
         compare$71,
         t_of_sexp$91,
         sexp_of_t$94,
         map$29]]];
    caml_register_global(7515,Core_kernel_Queue,"Core_kernel__Queue");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$359);
    caml_call1(Expect_test_collector[4][1],cst_src_unpack_buffer_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$360,cst$196);
    var debug=[0,0];
    function create_unpacked(unpack_one,partial_unpack,pos,len,buf)
     {var
       match=caml_call3(_hY_,pos,len,caml_ba_dim_1(buf)),
       len$0=match[2],
       pos$0=match[1];
      return caml_call4(unpack_one,partial_unpack,buf,pos$0,len$0)}
    function create$27(unpack_one)
     {return [0,
              function(_bpN_,_bpO_,_bpP_,_bpQ_)
               {return create_unpacked(unpack_one,_bpN_,_bpO_,_bpP_,_bpQ_)}]}
    function return$6(v)
     {return [0,function(param,_bpM_,_bpL_,_bpK_){return [0,17724,[0,v,0]]}]}
    function map$30(t,f)
     {var t$0=t[1];
      return [0,
              function(partial_unpack,pos,len,buf)
               {var x=caml_call4(t$0,partial_unpack,pos,len,buf);
                if(17724 === x[1])
                 {var match=x[2],pos$0=match[2],a=match[1];
                  return [0,17724,[0,caml_call1(f,a),pos$0]]}
                return x}]}
    var map$31=[0,-198771759,map$30];
    function do_b(na,partial_unpack,ub,buf,pos,len)
     {var x=caml_call4(ub,partial_unpack,[0,pos],[0,len],buf),_bpJ_=x[1];
      if(17724 === _bpJ_)
       {var match=x[2],nb=match[2],b=match[1];
        return [0,17724,[0,b,na + nb | 0]]}
      if(658743757 <= _bpJ_)
       {var match$0=x[2],nb$0=match$0[2],pb=match$0[1];
        return [0,658743757,[0,[1,pb,ub],nb$0 + na | 0]]}
      return x}
    function bind$4(param,f)
     {var ua=param[1];
      function do_a(partial_unpack,buf,pos,len)
       {var x=caml_call4(ua,partial_unpack,[0,pos],[0,len],buf),_bpI_=x[1];
        if(17724 === _bpI_)
         {var
           match=x[2],
           na=match[2],
           a=match[1],
           match$0=caml_call1(f,a),
           ub=match$0[1];
          return do_b(na,0,ub,buf,pos + na | 0,len - na | 0)}
        if(658743757 <= _bpI_)
         {var match$1=x[2],n=match$1[2],pa=match$1[1];
          return [0,658743757,[0,[0,pa],n]]}
        return x}
      return create$27
              (function(partial_unpack,buf,pos,len)
                {if(partial_unpack)
                  {var _bpH_=partial_unpack[1];
                   if(0 === _bpH_[0])
                    {var pa=_bpH_[1];return do_a([0,pa],buf,pos,len)}
                   var ub=_bpH_[2],pb=_bpH_[1];
                   return do_b(0,[0,pb],ub,buf,pos,len)}
                 return do_a(0,buf,pos,len)})}
    var
     include$123=caml_call1(Base_Monad[1],[0,bind$4,return$6,map$31]),
     _anj_=include$123[1],
     _ank_=include$123[2],
     _anl_=include$123[3],
     _anm_=include$123[4],
     _ann_=include$123[5],
     _ano_=include$123[6],
     _anp_=include$123[7],
     _anq_=include$123[8],
     _anr_=include$123[9],
     _ans_=include$123[10],
     _ant_=include$123[11],
     _anu_=include$123[12];
    function create_bin_prot_unpacked
     (bin_prot_reader,reader_expects_size_header)
     {var header_length=Bin_prot_Utils[1],pos_ref=[0,0];
      function invalid_data(message,a,sexp_of_a)
       {return [0,-810630190,caml_call5(_kC_,0,0,message,a,sexp_of_a)]}
      function read(bin_reader,buf,pos,len)
       {pos_ref[1] = pos;
        var result=caml_call2(bin_reader,buf,pos_ref);
        if(pos_ref[1] !== (pos + len | 0))
         {var
           _bpG_=
            function(param)
             {var
               v2=param[3],
               v1=param[2],
               v0=param[1],
               v0$0=caml_call1(sexp_of_t$43,v0),
               v1$0=caml_call1(sexp_of_t$43,v1),
               v2$0=caml_call1(sexp_of_t$43,v2);
              return [1,[0,v0$0,[0,v1$0,[0,v2$0,0]]]]};
          return invalid_data
                  (cst_pos_ref_pos_len,[0,pos_ref[1],pos,len],_bpG_)}
        return [0,17724,result]}
      function _bpB_(param,buf,pos,len)
       {if(len < header_length)return not_enough_data;
        var x=read(Bin_prot_Utils[2],buf,pos,header_length);
        if(17724 <= x[1])
         {var element_length=x[2];
          if(0 <= element_length)
           {if((len - header_length | 0) < element_length)
             return not_enough_data;
            var
             pos$0=
              0 === reader_expects_size_header?pos + header_length | 0:pos,
             len$0=
              0 === reader_expects_size_header
               ?element_length
               :header_length + element_length | 0,
             x$0=read(bin_prot_reader[1],buf,pos$0,len$0);
            if(17724 <= x$0[1])
             {var result=x$0[2];
              return [0,17724,[0,result,header_length + element_length | 0]]}
            return x$0}
          return invalid_data
                  (cst_negative_element_length_d$0,
                   element_length,
                   sexp_of_t$43)}
        return x}
      return function(_bpC_,_bpD_,_bpE_,_bpF_)
       {return create_unpacked(_bpB_,_bpC_,_bpD_,_bpE_,_bpF_)}}
    function create_bin_prot(bin_prot_reader)
     {return [0,create_bin_prot_unpacked(bin_prot_reader,0)]}
    var bin_blob=[0,create_bin_prot_unpacked(Bin_prot_Blob[9][1][7],1)];
    function partial_unpack_init(pos,len,buf)
     {return caml_call3
              (_Pe_,
               [0,caml_call5(include$16[11][1],0,0,[0,pos],0,0)],
               [0,len],
               buf)}
    var
     sexp$0=
      create$27
       (function(opt,buf,pos,len)
         {if(opt)
           var sth=opt[1],partial_unpack=sth;
          else
           var partial_unpack=partial_unpack_init;
          try
           {var match=caml_call3(partial_unpack,pos,len,buf);
            if(0 === match[0])
             var
              parse_pos=match[2],
              sexp=match[1],
              _bpA_=[0,17724,[0,sexp,parse_pos[4] - pos | 0]];
            else
             var k=match[2],_bpA_=[0,658743757,[0,k,len]];
            return _bpA_}
          catch(exn)
           {exn = caml_wrap_exception(exn);
            return [0,-810630190,caml_call2(of_exn,0,exn)]}}),
     char$3=
      create$27
       (function(param,buf,pos,len)
         {return 1 <= len?[0,17724,[0,caml_ba_get_1(buf,pos),1]]:_anv_});
    function expect$31(param,E,expected)
     {var u=param[1];
      return [0,
              function(partial_unpack,pos,len,buf)
               {var x=caml_call4(u,partial_unpack,pos,len,buf);
                if(17724 === x[1])
                 {var match=x[2],n=match[2],parsed=match[1];
                  return caml_call2(E[2],expected,parsed)
                          ?[0,17724,[0,0,n]]
                          :[0,
                            -810630190,
                            caml_call5
                             (_kC_,
                              0,
                              0,
                              cst_parsed_does_not_match_expected,
                              0,
                              function(param)
                               {var
                                 _bpz_=
                                  [0,[1,[0,_anw_,[0,caml_call1(E[1],expected),0]]],0];
                                return [1,
                                        [0,[1,[0,_anx_,[0,caml_call1(E[1],parsed),0]]],_bpz_]]})]}
                return x}]}
    var _any_=[0,_Co_,equal$22];
    function expect_char(_bpy_){return expect$31(char$3,_any_,_bpy_)}
    var newline=expect_char(10);
    function sexp_of_t$95(of_a,param)
     {var v_state=param[1],bnds$4=0;
      if(0 === v_state[0])
       var
        v0$0=v_state[1],
        of_b=function(param){return _anE_},
        v_partial_unpack=v0$0[1],
        v_unpack_one=v0$0[2],
        v_buf=v0$0[3],
        v_pos=v0$0[4],
        v_len=v0$0[5],
        arg=caml_call1(sexp_of_t$43,v_len),
        bnds=[0,[1,[0,_anz_,[0,arg,0]]],0],
        arg$0=caml_call1(sexp_of_t$43,v_pos),
        bnds$0=[0,[1,[0,_anA_,[0,arg$0,0]]],bnds],
        arg$1=caml_call1(sexpifier,v_buf),
        bnds$1=[0,[1,[0,_anB_,[0,arg$1,0]]],bnds$0],
        arg$2=caml_call1(Sexplib0_Sexp_conv[23],v_unpack_one),
        bnds$2=[0,[1,[0,_anC_,[0,arg$2,0]]],bnds$1],
        arg$3=caml_call2(sexp_of_t$39,of_b,v_partial_unpack),
        bnds$3=[0,[1,[0,_anD_,[0,arg$3,0]]],bnds$2],
        v0=[1,bnds$3],
        arg$4=[1,[0,_anF_,[0,v0,0]]];
      else
       var
        v0$1=v_state[1],
        v0$2=caml_call1(sexp_of_t$18,v0$1),
        arg$4=[1,[0,_anG_,[0,v0$2,0]]];
      var bnds$5=[0,[1,[0,_anH_,[0,arg$4,0]]],bnds$4];
      return [1,bnds$5]}
    function invariant$6(param,t)
     {try
       {var _bpv_=t[1];
        if(0 === _bpv_[0])
         {var t$0=_bpv_[1];
          if(! (0 <= t$0[4]))throw [0,Assert_failure,_anN_];
          if(! (0 <= t$0[5]))throw [0,Assert_failure,_anM_];
          if(0 === t$0[5])if(0 !== t$0[4])throw [0,Assert_failure,_anL_];
          var _bpw_=caml_ba_dim_1(t$0[3]);
          if(! ((t$0[4] + t$0[5] | 0) <= _bpw_))
           throw [0,Assert_failure,_anK_];
          var _bpx_=0}
        else
         var _bpx_=0;
        return _bpx_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        return failwiths
                (0,
                 _anJ_,
                 cst_invariant_failed,
                 [0,exn,t],
                 function(param)
                  {var
                    v1=param[2],
                    v0=param[1],
                    v0$0=caml_call1(_Tv_,v0),
                    v1$0=sexp_of_t$95(function(param){return _anI_},v1);
                   return [1,[0,v0$0,[0,v1$0,0]]]})}}
    function create_unpacked$0(partial_unpack,unpack_one)
     {return [0,[0,[0,partial_unpack,unpack_one,create$18(0,1),0,0]]]}
    function create$28(param)
     {var unpack_one=param[1];return create_unpacked$0(0,unpack_one)}
    function create_bin_prot$0(bin_prot_reader)
     {return create$28(create_bin_prot(bin_prot_reader))}
    function is_empty$16(t)
     {var _bps_=t[1];
      if(0 === _bps_[0])
       {var
         t$0=_bps_[1],
         _bpt_=caml_call1(is_none,t$0[1]),
         _bpu_=_bpt_?0 === t$0[5]?1:0:_bpt_;
        return [0,_bpu_]}
      var error=_bps_[1];
      return [1,error]}
    function is_available(t,len)
     {var
       input_start=t[4] + t[5] | 0,
       available=caml_ba_dim_1(t[3]) - input_start | 0;
      return len <= available?1:0}
    function feed_gen(buf_length,blit_buf_to_bigstring,pos,len,t,buf)
     {if(debug[1])invariant$6(function(_bpr_){return 0},t);
      var _bpq_=t[1];
      if(0 === _bpq_[0])
       {var
         t$0=_bpq_[1],
         match=caml_call3(_hY_,pos,len,caml_call1(buf_length,buf)),
         src_len=match[2],
         src_pos=match[1];
        if(1 - is_available(t$0,src_len))
         {var
           _bpp_=2 * caml_ba_dim_1(t$0[3]) | 0,
           new_buf=create$18(0,caml_call2(max$5,t$0[5] + src_len | 0,_bpp_));
          caml_call6(blito$3,t$0[3],[0,t$0[4]],[0,t$0[5]],new_buf,0,0);
          t$0[4] = 0;
          t$0[3] = new_buf;
          if(! is_available(t$0,src_len))throw [0,Assert_failure,_anO_]}
        caml_call6
         (blit_buf_to_bigstring,
          buf,
          [0,src_pos],
          [0,src_len],
          t$0[3],
          [0,t$0[4] + t$0[5] | 0],
          0);
        t$0[5] = t$0[5] + src_len | 0;
        return _anP_}
      var e=_bpq_[1];
      return [1,e]}
    function feed(pos,len,t,buf)
     {return feed_gen(length$20,blito$3,pos,len,t,buf)}
    function feed_string(pos,len,t,buf)
     {return feed_gen(caml_ml_string_length,From_string$0[2],pos,len,t,buf)}
    function feed_bytes(pos,len,t,buf)
     {return feed_gen(length$18,From_bytes[2],pos,len,t,buf)}
    function unpack_iter(t,f)
     {if(debug[1])invariant$6(function(_bpo_){return 0},t);
      var _bpm_=t[1];
      if(0 === _bpm_[0])
       {var
         alive=_bpm_[1],
         error=function(e){t[1] = [1,e];return [1,e]},
         consume=
          function(num_bytes)
           {alive[4] = alive[4] + num_bytes | 0;
            alive[5] = alive[5] - num_bytes | 0;
            return 0},
         loop=
          function(param)
           {for(;;)
             {if(0 === alive[5]){alive[4] = 0;return _anQ_}
              try
               {var
                 unpack_result=
                  caml_call4
                   (alive[2],alive[1],[0,alive[4]],[0,alive[5]],alive[3])}
              catch(exn)
               {exn = caml_wrap_exception(exn);
                return error
                        (caml_call5(_kC_,0,0,cst_unpack_error,exn,Base_Exn[1]))}
              var _bpn_=unpack_result[1];
              if(17724 === _bpn_)
               {var match=unpack_result[2],num_bytes=match[2],one=match[1];
                if(0 <= num_bytes)
                 if(! (alive[5] < num_bytes))
                  {if(0 === num_bytes)
                    if(caml_call1(is_none,alive[1]))
                     return error
                             (caml_call1
                               (_kz_,
                                cst_unpack_returned_a_value_but_consumed_0_bytes_without_partially_unpacked_data));
                   consume(num_bytes);
                   alive[1] = 0;
                   try
                    {caml_call1(f,one)}
                   catch(exn)
                    {exn = caml_wrap_exception(exn);
                     return error
                             (caml_call5
                               (_kC_,
                                0,
                                0,
                                cst_f_supplied_to_Unpack_buffer_unpack_iter_raised,
                                exn,
                                _Tv_))}
                   continue}
                return error
                        (caml_call5
                          (_kC_,
                           0,
                           0,
                           cst_unpack_consumed_invalid_amount,
                           num_bytes,
                           sexp_of_t$43))}
              if(658743757 <= _bpn_)
               {var
                 match$0=unpack_result[2],
                 num_bytes$0=match$0[2],
                 partial_unpack=match$0[1];
                if(0 <= num_bytes$0)
                 if(! (alive[5] < num_bytes$0))
                  {consume(num_bytes$0);
                   alive[1] = [0,partial_unpack];
                   if(0 < alive[5])
                    caml_call6
                     (blito$3,alive[3],[0,alive[4]],[0,alive[5]],alive[3],0,0);
                   alive[4] = 0;
                   return _anR_}
                return error
                        (caml_call5
                          (_kC_,
                           0,
                           0,
                           cst_partial_unpack_consumed_invalid_amount,
                           num_bytes$0,
                           sexp_of_t$43))}
              var e=unpack_result[2];
              return error(caml_call2(_kF_,e,cst_invalid_data))}};
        return loop(0)}
      var e=_bpm_[1];
      return [1,e]}
    function unpack_into(t,q){return unpack_iter(t,caml_call1(enqueue,q))}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$361);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Unpack_buffer=
      [0,
       [0,
        _anj_,
        _ank_,
        _anl_,
        _anm_,
        _ann_,
        _ano_,
        _anp_,
        _anq_,
        _anr_,
        _ans_,
        _ant_,
        _anu_,
        create$27,
        create_bin_prot,
        bin_blob,
        sexp$0,
        char$3,
        expect$31,
        expect_char,
        newline],
       sexp_of_t$95,
       invariant$6,
       create$28,
       create_unpacked$0,
       create_bin_prot$0,
       is_empty$16,
       feed,
       feed_string,
       feed_bytes,
       unpack_into,
       unpack_iter,
       debug];
    caml_register_global
     (7517,Core_kernel_Unpack_buffer,"Core_kernel__Unpack_buffer");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$362);
    caml_call1(Expect_test_collector[4][1],cst_src_type_equal_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$363,cst$197);
    var
     Composition_preserves_injectivity=Base_Type_equal[11],
     tuple2$2=Base_Type_equal[10],
     detuple2=Base_Type_equal[9],
     Lift3=Base_Type_equal[8],
     Lift2=Base_Type_equal[7],
     Lift=Base_Type_equal[6],
     conv=Base_Type_equal[5],
     trans=Base_Type_equal[4],
     sym=Base_Type_equal[3],
     refl=Base_Type_equal[2],
     _anT_=Base_Type_equal[12],
     same_witness_exn=_anT_[11],
     same_witness=_anT_[10],
     same=_anT_[9],
     hash_fold_t$44=_anT_[8],
     to_sexp=_anT_[7],
     name$57=_anT_[6],
     hash$42=_anT_[5],
     create$29=_anT_[4],
     uid=_anT_[3],
     sexp_of_t$96=_anT_[1],
     include$124=Base_Type_equal[12][2],
     t_of_sexp$92=include$124[3],
     sexp_of_t$97=include$124[4],
     t_of_sexp$93=Base_Type_equal[12][2][3],
     sexp_of_t$98=Base_Type_equal[12][2][4],
     _anU_=Base_Type_equal[12][2],
     _anS_=Base_Type_equal[1],
     _aYJ_=
      _tc_
       ([0,
         _anU_[5],
         _anU_[6],
         _anU_[7],
         _anU_[8],
         _anU_[9],
         _anU_[10],
         _anU_[11],
         _anU_[12],
         _anU_[13],
         _anU_[14],
         _anU_[15],
         _anU_[16],
         _anU_[17],
         _anU_[18],
         _anU_[19],
         _anU_[20],
         _anU_[21],
         _anU_[22],
         _anU_[23]],
        [0,t_of_sexp$93,sexp_of_t$98]),
     equal$37=_aYJ_[7],
     min$17=_aYJ_[9],
     max$17=_aYJ_[10],
     ascending$16=_aYJ_[11],
     descending$16=_aYJ_[12],
     between$16=_aYJ_[13],
     clamp_exn$16=_aYJ_[14],
     clamp$16=_aYJ_[15],
     comparator$28=_aYJ_[16],
     validate_lbound$16=_aYJ_[17],
     validate_ubound$16=_aYJ_[18],
     validate_bound$16=_aYJ_[19],
     Replace_polymorphic_compare$14=_aYJ_[20],
     Map$22=_aYJ_[21],
     Set$22=_aYJ_[22],
     _an1_=Base_Type_equal[12][2],
     _anV_=_aYJ_[1],
     _anW_=_aYJ_[2],
     _anX_=_aYJ_[3],
     _anY_=_aYJ_[4],
     _anZ_=_aYJ_[5],
     _an0_=_aYJ_[6],
     include$125=Make$5([0,_an1_[1],_an1_[3],_an1_[12],_an1_[4],_an1_[2]]),
     compare$72=include$125[1],
     hash_fold_t$45=include$125[2],
     hash$43=include$125[3],
     hashable$11=include$125[4],
     Table$13=include$125[5],
     Hash_set$13=include$125[6],
     Hash_queue$12=include$125[7];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$364);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     _an2_=
      [0,
       sexp_of_t$96,
       uid,
       create$29,
       hash$42,
       name$57,
       to_sexp,
       hash_fold_t$44,
       same,
       same_witness,
       same_witness_exn,
       [0,
        t_of_sexp$92,
        sexp_of_t$97,
        _anV_,
        _anW_,
        _anX_,
        _anY_,
        _anZ_,
        _an0_,
        equal$37,
        min$17,
        max$17,
        ascending$16,
        descending$16,
        between$16,
        clamp_exn$16,
        clamp$16,
        comparator$28,
        validate_lbound$16,
        validate_ubound$16,
        validate_bound$16,
        Replace_polymorphic_compare$14,
        Map$22,
        Set$22,
        compare$72,
        hash_fold_t$45,
        hash$43,
        hashable$11,
        Table$13,
        Hash_set$13,
        Hash_queue$12]],
     Core_kernel_Type_equal=
      [0,
       _anS_,
       refl,
       sym,
       trans,
       conv,
       Lift,
       Lift2,
       Lift3,
       detuple2,
       tuple2$2,
       Composition_preserves_injectivity,
       _an2_];
    caml_register_global
     (7519,Core_kernel_Type_equal,"Core_kernel__Type_equal");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$365);
    caml_call1(Expect_test_collector[4][1],cst_src_type_equal_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$366,cst$198);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$367);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Type_equal_intf=[0];
    caml_register_global
     (7520,Core_kernel_Type_equal_intf,"Core_kernel__Type_equal_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$368);
    caml_call1(Expect_test_collector[4][1],cst_src_univ_map_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$369,cst$199);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$370);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var include$126=[0,0];
    caml_register_global(7521,include$126,"Core_kernel__Univ_map_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$371);
    caml_call1(Expect_test_collector[4][1],cst_src_univ_map_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$372,cst$200);
    var Key=0;
    function Make1$0(Data)
     {function sexp_of_t(sexp_of_a,param)
       {var data=param[2],key=param[1],_bpl_=caml_call1(_an2_[6],key);
        return caml_call3(Data[1],sexp_of_a,_bpl_,data)}
      function type_id_name(param)
       {var key=param[1];return caml_call1(_an2_[5],key)}
      function type_id_uid(param)
       {var key=param[1];return caml_call1(_an2_[2],key)}
      var Packed=[0,sexp_of_t,type_id_name,type_id_uid];
      function sexp_of_t$0(sexp_of_a,t)
       {function _bph_(u){return [0,caml_call1(Packed[2],u),u]}
        var
         _bpi_=caml_call2(map$11,caml_call1(data$3,t),_bph_),
         _bpj_=
          caml_call2
           (sort$0,
            function(param,_bpk_)
             {var b=_bpk_[1],a=param[1];return caml_call2(compare$47,a,b)},
            _bpi_);
        return caml_call1
                (caml_call1
                  (sexp_of_t$25,
                   function(param)
                    {var
                      v1=param[2],
                      v0=param[1],
                      v0$0=caml_call1(sexp_of_t$58,v0),
                      v1$0=caml_call2(Packed[1],sexp_of_a,v1);
                     return [1,[0,v0$0,[0,v1$0,0]]]}),
                 _bpj_)}
      function invariant(t)
       {function _bpc_(param)
         {return caml_call2
                  (iteri$4,
                   t,
                   function(key,data)
                    {var _bpg_=caml_call1(Packed[3],data);
                     if(caml_call2(_an2_[11][9],key,_bpg_))return 0;
                     throw [0,Assert_failure,_an3_]})}
        function _bpd_(param){return _an4_}
        function _bpe_(_bpf_){return sexp_of_t$0(_bpd_,_bpf_)}
        return caml_call4(Base_Invariant[1],_an5_,t,_bpe_,_bpc_)}
      function set(t,key,data)
       {return caml_call3(set$2,t,caml_call1(_an2_[2],key),[0,key,data])}
      function mem_by_id(t,id){return caml_call2(mem$6,t,id)}
      function mem(t,key){return mem_by_id(t,caml_call1(_an2_[2],key))}
      function remove_by_id(t,id){return caml_call2(remove$3,t,id)}
      function remove(t,key){return remove_by_id(t,caml_call1(_an2_[2],key))}
      var empty=_an2_[11][22][4];
      function find(t,key)
       {var match=caml_call2(find$6,t,caml_call1(_an2_[2],key));
        if(match)
         {var match$0=match[1],value=match$0[2],key$0=match$0[1];
          caml_call2(_an2_[10],key,key$0);
          return [0,value]}
        return 0}
      function find_exn(t,key)
       {var match=find(t,key);
        if(match){var data=match[1];return data}
        return caml_call3(_R5_,_an6_,caml_call1(_an2_[5],key),0)}
      function add(t,key,data)
       {return mem(t,key)?-1024851605:[0,17724,set(t,key,data)]}
      function add_exn(t,key,data)
       {var match=add(t,key,data);
        if(typeof match === "number")
         return caml_call3(_R5_,_an7_,caml_call1(_an2_[5],key),0);
        var t$0=match[2];
        return t$0}
      function change_exn(t,key,update)
       {var match=find(t,key);
        if(match){var data=match[1];return set(t,key,caml_call1(update,data))}
        return caml_call3(_R5_,_an8_,caml_call1(_an2_[5],key),0)}
      function change(t,key,update)
       {var orig=find(t,key),next=caml_call1(update,orig);
        if(next){var data=next[1];return set(t,key,data)}
        return caml_call1(is_none,orig)?t:remove(t,key)}
      function update(t,key,f)
       {return change(t,key,function(data){return [0,caml_call1(f,data)]})}
      function to_alist(t){return caml_call1(data$3,t)}
      return [0,
              Packed,
              sexp_of_t$0,
              invariant,
              set,
              mem_by_id,
              mem,
              remove_by_id,
              remove,
              empty,
              is_empty$6,
              find,
              find_exn,
              add,
              add_exn,
              change_exn,
              change,
              update,
              to_alist]}
    function Make$11(Data)
     {function sexp_of_t(of_v_x_001,of_a,v){return caml_call2(Data[1],of_a,v)}
      var M=Make1$0([0,sexp_of_t]);
      function sexp_of_t$0(v){return caml_call2(M[2],_A9_,v)}
      var
       invariant=M[3],
       empty=M[9],
       is_empty=M[10],
       set=M[4],
       mem=M[6],
       mem_by_id=M[5],
       find=M[11],
       find_exn=M[12],
       add=M[13],
       add_exn=M[14],
       change=M[16],
       change_exn=M[15],
       update=M[17],
       remove=M[8],
       remove_by_id=M[7],
       Packed=[0];
      function to_alist(t)
       {function _bpb_(param)
         {var data=param[2],key=param[1];return [0,key,data]}
        return caml_call2(map$11,caml_call1(M[18],t),_bpb_)}
      return [0,
              M,
              sexp_of_t$0,
              invariant,
              empty,
              is_empty,
              set,
              mem,
              mem_by_id,
              find,
              find_exn,
              add,
              add_exn,
              change,
              change_exn,
              update,
              remove,
              remove_by_id,
              Packed,
              to_alist]}
    function sexp_of_t$99(of_a,v){return caml_call1(of_a,v)}
    var
     include$127=Make$11([0,sexp_of_t$99]),
     _an9_=include$127[2],
     _an$_=include$127[4],
     _aoa_=include$127[5],
     _aob_=include$127[6],
     _aoc_=include$127[7],
     _aoe_=include$127[9],
     _aof_=include$127[10],
     _aoi_=include$127[13],
     _aoj_=include$127[14],
     _aol_=include$127[16],
     _aom_=include$127[17],
     _an__=include$127[3],
     _aod_=include$127[8],
     _aog_=include$127[11],
     _aoh_=include$127[12],
     _aok_=include$127[15],
     _aon_=include$127[18],
     _aoo_=include$127[19];
    function _aop_(param)
     {var
       size=caml_call2(_an2_[3],cst_size,sexp_of_t$43),
       name=caml_call2(_an2_[3],cst_name$2,sexp_of_t$58),
       foo=caml_call2(_an2_[3],cst_foo$11,sexp_of_t$59),
       _bo3_=caml_call1(sexp_of_t$25,_an9_),
       kids=caml_call2(_an2_[3],cst_kids,_bo3_);
      function _bo4_(param){return caml_call1(_aoa_,_an$_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_is_empty_empty,
        0,
        cst_src_univ_map_ml$0,
        129,
        4,
        31,
        _bo4_);
      function test_contains(t,k,v)
       {if(caml_call1(_aoa_,t))throw [0,Assert_failure,_aoq_];
        if(caml_call2(_aoc_,t,k))
         {caml_call3(_aoj_,t,k,function(_bpa_){return _bpa_});
          caml_call3
           (_aoi_,
            t,
            k,
            function(o){if(o)return o;throw [0,Assert_failure,_aor_]});
          var match=caml_call2(_aoe_,t,k);
          if(match)
           {var v$0=match[1];
            if(caml_call2(_R7_,v,v$0))return 0;
            throw [0,Assert_failure,_aos_]}
          throw [0,Assert_failure,_aot_]}
        throw [0,Assert_failure,_aou_]}
      function test_add(t,k,v)
       {return test_contains(caml_call3(_aob_,t,k,v),k,v)}
      function test_find(t,k)
       {var
         f1=caml_call2(_aoe_,t,k),
         f2=caml_call1(try_with,function(param){return caml_call2(_aof_,t,k)});
        if(f1)
         {var _bo$_=f1[1];
          if(f2)
           {var v2=f2[1];
            if(caml_call2(_R7_,_bo$_,v2))return 0;
            throw [0,Assert_failure,_aov_]}
          throw [0,Assert_failure,_aow_]}
        if(f2)throw [0,Assert_failure,_aox_];
        return 0}
      function test_change(t,k,v)
       {var t_minus=caml_call3(_aoi_,t,k,function(param){return 0});
        if(caml_call2(_aoc_,t_minus,k))throw [0,Assert_failure,_aoy_];
        var t_plus=caml_call3(_aoi_,t,k,function(param){return [0,v]});
        test_contains(t_plus,k,v);
        return 0}
      function test_remove(t,k,v)
       {var t_minus=caml_call2(_aol_,t,k);
        if(caml_call2(_aoc_,t_minus,k))throw [0,Assert_failure,_aoz_];
        var t_plus=caml_call3(_aob_,t,k,v);
        test_contains(t_plus,k,v);
        var t_minus$0=caml_call2(_aol_,t_plus,k);
        if(caml_call2(_aoc_,t_minus$0,k))throw [0,Assert_failure,_aoA_];
        return 0}
      function test_remove_by_id(t,k,v)
       {var t_minus=caml_call2(_aom_,t,caml_call1(_an2_[2],k));
        if(caml_call2(_aoc_,t_minus,k))throw [0,Assert_failure,_aoB_];
        var t_plus=caml_call3(_aob_,t,k,v);
        test_contains(t_plus,k,v);
        var t_minus$0=caml_call2(_aom_,t_plus,caml_call1(_an2_[2],k));
        if(caml_call2(_aoc_,t_minus$0,k))throw [0,Assert_failure,_aoC_];
        return 0}
      function test(t)
       {test_add(t,size,12);
        test_add(t,name,cst_hank);
        test_add(t,kids,[0,t,[0,_an$_,0]]);
        test_find(t,size);
        test_find(t,name);
        test_find(t,kids);
        test_change(t,size,33);
        test_change(t,name,cst_frank);
        test_change(t,kids,0);
        test_remove(t,size,33);
        test_remove(t,name,cst_frank$0);
        test_remove(t,kids,0);
        test_remove_by_id(t,size,33);
        test_remove_by_id(t,name,cst_frank$1);
        test_remove_by_id(t,kids,0);
        return 0}
      var
       t1=caml_call3(_aob_,_an$_,size,9),
       t2=caml_call3(_aob_,t1,foo,13.25),
       t3=caml_call3(_aob_,t2,size,15);
      function _bo5_(param){return test(_an$_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_t0,
        0,
        cst_src_univ_map_ml$1,
        204,
        4,
        29,
        _bo5_);
      function _bo6_(param){return test(t1)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_t1,
        0,
        cst_src_univ_map_ml$2,
        205,
        4,
        29,
        _bo6_);
      function _bo7_(param){return test(t2)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_t2,
        0,
        cst_src_univ_map_ml$3,
        206,
        4,
        29,
        _bo7_);
      function _bo8_(param){return test(t3)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_t3,
        0,
        cst_src_univ_map_ml$4,
        207,
        4,
        29,
        _bo8_);
      function _bo9_(param)
       {var _bo__=caml_call1(_PE_,cst_foo_13_25_size_15);
        return caml_equal(caml_call1(_an9_,t3),_bo__)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_sexp_of_t_t3_Sexp_of_string_foo_13_25,
        0,
        cst_src_univ_map_ml$5,
        209,
        4,
        71,
        _bo9_);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst$201,
      0,
      cst_src_univ_map_ml$6,
      121,
      0,
      2628,
      _aop_);
    function create$30(default$0,name,sexp_of)
     {return [0,caml_call2(_an2_[3],name,sexp_of),default$0]}
    function id(t){return t[1]}
    var Key$0=[0,create$30,id];
    function find$16(t,param)
     {var default$0=param[2],key=param[1];
      return caml_call2(value$0,caml_call2(_aoe_,t,key),default$0)}
    function set$11(t,param,v)
     {var key=param[1];return caml_call3(_aob_,t,key,v)}
    function change$4(t,k,update)
     {return set$11(t,k,caml_call1(update,find$16(t,k)))}
    function _aoD_(param)
     {var key=caml_call3(Key$0[1],0,cst_default_0,sexp_of_t$43);
      if(0 === find$16(_an$_,key))
       {var t=set$11(_an$_,key,1);
        if(1 === find$16(t,key))
         {var t$0=set$11(_an$_,key,2);
          if(2 === find$16(t$0,key))
           {var t$1=change$4(t$0,key,function(_bo2_){return - _bo2_ | 0});
            if(-2 === find$16(t$1,key))return 0;
            throw [0,Assert_failure,_aoE_]}
          throw [0,Assert_failure,_aoF_]}
        throw [0,Assert_failure,_aoG_]}
      throw [0,Assert_failure,_aoH_]}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_assert_find_empty_key_0_let_t_set_e,
      0,
      cst_src_univ_map_ml$7,
      227,
      2,
      308,
      _aoD_);
    function _aoI_(param)
     {var key=caml_call3(Key$0[1],1,cst_default_1,sexp_of_t$43);
      return -1
              ===
              find$16
               (change$4(_an$_,key,function(_bo1_){return - _bo1_ | 0}),key)
              ?1
              :0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[4],
      Inline_test_config,
      cst_find_change_empty_key_f_key_1,
      0,
      cst_src_univ_map_ml$8,
      237,
      2,
      130,
      _aoI_);
    function create$31(init,f,name,sexp_of)
     {return [0,caml_call3(Key$0[1],init,name,sexp_of),f]}
    function id$0(t){return caml_call1(Key$0[2],t[1])}
    var Key$1=[0,create$31,id$0];
    function find$17(t,param){var key=param[1];return find$16(t,key)}
    function set$12(t,param,v){var key=param[1];return set$11(t,key,v)}
    function change$5(t,param,update)
     {var key=param[1];return change$4(t,key,update)}
    function add$16(t,param,v)
     {var f=param[2],key=param[1];
      return change$4(t,key,function(acc){return caml_call2(f,acc,v)})}
    function _aoJ_(param)
     {function _boX_(_bo0_,_boZ_){return _bo0_ + _boZ_ | 0}
      var key=caml_call4(Key$1[1],5,_boX_,cst_init_5,sexp_of_t$43);
      if(5 === find$17(_an$_,key))
       {var t=add$16(_an$_,key,3);
        if(8 === find$17(t,key))
         {var t$0=change$5(t,key,function(_boY_){return - _boY_ | 0});
          if(-8 === find$17(t$0,key))return 0;
          throw [0,Assert_failure,_aoK_]}
        throw [0,Assert_failure,_aoL_]}
      throw [0,Assert_failure,_aoM_]}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_assert_find_empty_key_5_let_t_add_e,
      0,
      cst_src_univ_map_ml$9,
      259,
      2,
      249,
      _aoJ_);
    function _aoN_(param)
     {function _boV_(param){throw [0,Assert_failure,_aoO_]}
      var key=caml_call4(Key$1[1],0,_boV_,cst_don_t_fold_this,sexp_of_t$43);
      if(0 === find$17(_an$_,key))
       {var t=set$12(_an$_,key,1);
        if(1 === find$17(t,key))
         {var t$0=change$5(t,key,function(_boW_){return - _boW_ | 0});
          if(-1 === find$17(t$0,key))return 0;
          throw [0,Assert_failure,_aoP_]}
        throw [0,Assert_failure,_aoQ_]}
      throw [0,Assert_failure,_aoR_]}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_assert_find_empty_key_0_let_t_set_e$0,
      0,
      cst_src_univ_map_ml$10,
      267,
      2,
      288,
      _aoN_);
    function create$32(name,sexp_of)
     {var _boT_=caml_call1(sexp_of_t$25,sexp_of);
      function _boU_(xs,x){return [0,x,xs]}
      return caml_call4(Key$1[1],0,_boU_,name,_boT_)}
    var id$1=Key$1[2],Key$2=[0,create$32,id$1];
    function _aoS_(param)
     {var key=caml_call2(Key$2[1],cst_int_list,sexp_of_t$43);
      if(0 === find$17(_an$_,key))
       {var t=add$16(_an$_,key,1);
        if(caml_equal(find$17(t,key),_aoT_))
         {var t$0=set$12(t,key,_aoU_);
          if(caml_equal(find$17(t$0,key),_aoV_))
           {var
             _boQ_=function(_boS_){return - _boS_ | 0},
             t$1=
              change$5
               (t$0,
                key,
                function(_boR_){return caml_call2(map$11,_boR_,_boQ_)});
            if(caml_equal(find$17(t$1,key),_aoW_))return 0;
            throw [0,Assert_failure,_aoX_]}
          throw [0,Assert_failure,_aoY_]}
        throw [0,Assert_failure,_aoZ_]}
      throw [0,Assert_failure,_ao0_]}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_assert_find_empty_key_let_t_add,
      0,
      cst_src_univ_map_ml$11,
      291,
      2,
      322,
      _aoS_);
    var Multi=[0,Key$2,set$12,find$17,add$16,change$5];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$373);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     _ao1_=[0,Key$1,set$12,find$17,add$16,change$5],
     _ao2_=[0,Key$0,set$11,find$16,change$4];
    function _ao3_(_boO_)
     {var _boP_=Make1$0(_boO_);
      return [0,
              _boP_[2],
              _boP_[3],
              _boP_[9],
              _boP_[10],
              _boP_[4],
              _boP_[6],
              _boP_[5],
              _boP_[11],
              _boP_[12],
              _boP_[13],
              _boP_[14],
              _boP_[16],
              _boP_[15],
              _boP_[17],
              _boP_[8],
              _boP_[7],
              [0],
              _boP_[18]]}
    var
     Core_kernel_Univ_map=
      [0,
       Key,
       _an9_,
       _an__,
       _an$_,
       _aoa_,
       _aob_,
       _aoc_,
       _aod_,
       _aoe_,
       _aof_,
       _aog_,
       _aoh_,
       _aoi_,
       _aoj_,
       _aok_,
       _aol_,
       _aom_,
       _aon_,
       _aoo_,
       function(_boM_)
        {var _boN_=Make$11(_boM_);
         return [0,
                 _boN_[2],
                 _boN_[3],
                 _boN_[4],
                 _boN_[5],
                 _boN_[6],
                 _boN_[7],
                 _boN_[8],
                 _boN_[9],
                 _boN_[10],
                 _boN_[11],
                 _boN_[12],
                 _boN_[13],
                 _boN_[14],
                 _boN_[15],
                 _boN_[16],
                 _boN_[17],
                 _boN_[18],
                 _boN_[19]]},
       _ao3_,
       _ao2_,
       _ao1_,
       Multi];
    caml_register_global(7523,Core_kernel_Univ_map,"Core_kernel__Univ_map");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$374);
    caml_call1(Expect_test_collector[4][1],cst_src_univ_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$375,cst$202);
    var View=[0];
    function view(_boL_){return _boL_}
    function create$33(id,value){return [0,id,value]}
    function type_id_name(param)
     {var id=param[1];return caml_call1(_an2_[5],id)}
    function type_id_uid(param)
     {var id=param[1];return caml_call1(_an2_[2],id)}
    function sexp_of_t$100(param)
     {var value=param[2],id=param[1];return caml_call2(_an2_[6],id,value)}
    function does_match(param,id2)
     {var id1=param[1];return caml_call2(_an2_[8],id1,id2)}
    function match$1(param,id2)
     {var value=param[2],id1=param[1],match=caml_call2(_an2_[9],id1,id2);
      return match?[0,value]:0}
    function match_exn(t,id2)
     {var value=t[2],id1=t[1],match=caml_call2(_an2_[9],id1,id2);
      return match
              ?value
              :failwiths
                (0,
                 _ao5_,
                 cst_Univ_match_exn_called_with_mismatched_value_and_type_id,
                 [0,t,id2],
                 function(param)
                  {var v1=param[2],v0=param[1],v0$0=sexp_of_t$100(v0);
                   function _boK_(param){return _ao4_}
                   var v1$0=caml_call2(_an2_[1],_boK_,v1);
                   return [1,[0,v0$0,[0,v1$0,0]]]})}
    function _ao6_(param)
     {var
       c1=caml_call2(_an2_[3],cst_c1,sexp_of_t$43),
       c2=caml_call2(_an2_[3],cst_c2,sexp_of_t$43),
       t1=[0,c1,13],
       t2=[0,c2,13];
      function _box_(param)
       {function _boJ_(param){return _ao7_}
        caml_call1(caml_call1(_an2_[1],_boJ_),c1);
        return 0}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_ignore_sexp_of_Id_t_c1_Sexp_t,
        0,
        cst_src_univ_ml$0,
        46,
        4,
        61,
        _box_);
      function _boy_(param){sexp_of_t$100(t1);return 0}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_ignore_sexp_of_t_t1_Sexp_t,
        0,
        cst_src_univ_ml$1,
        47,
        4,
        56,
        _boy_);
      function _boz_(param)
       {var _boI_=caml_call1(_an2_[5],c1);
        return caml_string_equal(type_id_name(t1),_boI_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_type_id_name_t1_Id_name_c1,
        0,
        cst_src_univ_ml$2,
        49,
        4,
        45,
        _boz_);
      function _boA_(param){return does_match(t1,c1)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_does_match_t1_c1,
        0,
        cst_src_univ_ml$3,
        51,
        4,
        33,
        _boA_);
      function _boB_(param){return 1 - does_match(t1,c2)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_not_does_match_t1_c2,
        0,
        cst_src_univ_ml$4,
        52,
        4,
        39,
        _boB_);
      function _boC_(param){return 1 - does_match(t2,c1)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_not_does_match_t2_c1,
        0,
        cst_src_univ_ml$5,
        53,
        4,
        39,
        _boC_);
      function _boD_(param){return does_match(t2,c2)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_does_match_t2_c2,
        0,
        cst_src_univ_ml$6,
        54,
        4,
        33,
        _boD_);
      function _boE_(param)
       {var match=match$1(t1,c1);
        if(match){var v=match[1];return 13 === v?1:0}
        return 0}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_match_match_t1_c1_with_None_false_Som,
        0,
        cst_src_univ_ml$7,
        56,
        4,
        93,
        _boE_);
      function _boF_(param){return caml_call1(is_none,match$1(t1,c2))}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_Option_is_none_match_t1_c2,
        0,
        cst_src_univ_ml$8,
        62,
        4,
        46,
        _boF_);
      function _boG_(param){return 13 === match_exn(t1,c1)?1:0}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_match_exn_t1_c1_13,
        0,
        cst_src_univ_ml$9,
        64,
        4,
        37,
        _boG_);
      function _boH_(param)
       {return caml_call1
                (_hf_,
                 caml_call1(_hu_,function(param){return match_exn(t1,c2)}))}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_Result_is_error_Result_try_with_fun_m,
        0,
        cst_src_univ_ml$10,
        65,
        4,
        78,
        _boH_);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst$203,
      0,
      cst_src_univ_ml$11,
      38,
      0,
      776,
      _ao6_);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$376);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Univ=
      [0,
       sexp_of_t$100,
       type_id_name,
       type_id_uid,
       create$33,
       does_match,
       match$1,
       match_exn,
       View,
       view];
    caml_register_global(7524,Core_kernel_Univ,"Core_kernel__Univ");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$377);
    caml_call1(Expect_test_collector[4][1],cst_src_unique_id_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$378,cst$204);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$379);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Unique_id_intf=[0];
    caml_register_global
     (7525,Core_kernel_Unique_id_intf,"Core_kernel__Unique_id_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$380);
    caml_call1(Expect_test_collector[4][1],cst_src_unique_id_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$381,cst$205);
    function race_free_create_loop(cell,make)
     {for(;;)
       {var x=cell[1],new_x=caml_call1(make,x);
        if(caml_call2(_R7_,cell[1],x)){cell[1] = new_x;return x}
        continue}}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$382);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    function _ao8_(_bow_)
     {var current=[0,epoch];
      function create(param){return race_free_create_loop(current,succ$2)}
      return [0,
              bin_t$37,
              bin_read_t$81,
              bin_read_t$82,
              bin_reader_t$37,
              bin_size_t$40,
              bin_write_t$40,
              bin_writer_t$37,
              bin_shape_t$42,
              t_of_sexp$38,
              sexp_of_t$49,
              typerep_of_t$7,
              typename_of_t$6,
              _Ar_,
              _Aq_,
              _Ap_,
              _Ao_,
              _An_,
              _Am_,
              equal$20,
              compare$36,
              min$2,
              max$2,
              ascending$2,
              descending$2,
              between$2,
              clamp_exn$2,
              clamp$2,
              validate_lbound$2,
              validate_ubound$2,
              validate_bound$2,
              Replace_polymorphic_compare$1,
              comparator$9,
              Map$4,
              Set$4,
              _Av_,
              _Au_,
              hashable$1,
              Table$1,
              Hash_set$1,
              Hash_queue$1,
              _Aw_,
              to_int_exn$2,
              _At_,
              _As_,
              create]}
    var
     Core_kernel_Unique_id=
      [0,
       function(_bov_)
        {var current=[0,_w7_];
         function create(param){return race_free_create_loop(current,next$1)}
         return [0,
                 bin_t$30,
                 bin_read_t$74,
                 bin_read_t$73,
                 bin_reader_t$30,
                 bin_size_t$36,
                 bin_write_t$36,
                 bin_writer_t$30,
                 bin_shape_t$35,
                 t_of_sexp$32,
                 sexp_of_t$43,
                 typerep_of_t$3,
                 typename_of_t$2,
                 _xx_,
                 _xw_,
                 _xv_,
                 _xu_,
                 _xt_,
                 _xs_,
                 _xr_,
                 compare$30,
                 _xq_,
                 _xp_,
                 _xo_,
                 _xn_,
                 _xm_,
                 _xl_,
                 _xk_,
                 _xj_,
                 _xi_,
                 _xh_,
                 Replace_polymorphic_compare,
                 comparator$5,
                 Map$1,
                 Set$1,
                 hash_fold_t$15,
                 _xA_,
                 hashable,
                 Table,
                 Hash_set,
                 Hash_queue,
                 _xC_,
                 _xB_,
                 _xz_,
                 _xy_,
                 create]},
       _ao8_];
    caml_register_global(7526,Core_kernel_Unique_id,"Core_kernel__Unique_id");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$383);
    caml_call1(Expect_test_collector[4][1],cst_src_uniform_array_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$384,cst$206);
    var
     t_of_sexp$94=include$128[1],
     sexp_of_t$101=include$128[2],
     empty$11=include$128[3],
     create$34=include$128[4],
     init$9=include$128[5],
     length$24=include$128[6],
     get$9=include$128[7],
     unsafe_get=include$128[8],
     set$13=include$128[9],
     unsafe_set=include$128[10],
     map$32=include$128[11],
     iter$24=include$128[12],
     of_array$7=include$128[13],
     to_array$10=include$128[14],
     of_list$12=include$128[15],
     to_list$16=include$128[16],
     blit$5=include$128[17],
     blito$5=include$128[18],
     unsafe_blit$4=include$128[19],
     sub$10=include$128[20],
     subo$5=include$128[21],
     copy$5=include$128[22],
     include$129=
      caml_call1
       (caml_call1
         (_W4_,
          [0,
           bin_shape_t$9,
           bin_size_t$14,
           bin_write_t$14,
           bin_read_t$32,
           bin_read_t$31]),
        [0,to_array$10,of_array$7]),
     _ao9_=include$129[1],
     _ao__=include$129[2],
     _ao$_=include$129[3],
     _apa_=include$129[4],
     _apb_=include$129[5],
     _apc_=include$129[6],
     _apd_=include$129[7],
     _ape_=include$129[8];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$385);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Uniform_array=
      [0,
       _ape_,
       _apa_,
       _apb_,
       _apd_,
       _ao__,
       _ao$_,
       _apc_,
       _ao9_,
       t_of_sexp$94,
       sexp_of_t$101,
       empty$11,
       create$34,
       init$9,
       length$24,
       get$9,
       unsafe_get,
       set$13,
       unsafe_set,
       map$32,
       iter$24,
       of_array$7,
       to_array$10,
       of_list$12,
       to_list$16,
       blit$5,
       blito$5,
       unsafe_blit$4,
       sub$10,
       subo$5,
       copy$5];
    caml_register_global
     (7528,Core_kernel_Uniform_array,"Core_kernel__Uniform_array");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$386);
    caml_call1(Expect_test_collector[4][1],cst_src_type_immediacy_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$387,cst$207);
    function hash$44(x){return x}
    var Key$3=[0,_t_,sexp_of_t$0,hash$44];
    function equal$38(x_005,x_006)
     {if(caml_call2(Ppx_compare_lib[1],x_005,x_006))
       var match=0;
      else
       {switch(x_005)
         {case 0:
           if(0 === x_006)var match=0,switch$0=1;else var match=-1,switch$0=1;
           break;
          case 1:
           switch(x_006)
            {case 1:var match=0,switch$0=1;break;
             case 2:var match=-1,switch$0=1;break;
             default:var switch$0=0}
           break;
          default:
           switch(x_006)
            {case 1:var match=1,switch$0=1;break;
             case 2:var match=0,switch$0=1;break;
             default:var switch$0=0}}
        if(! switch$0)var match=1}
      return 0 === match?1:0}
    function to_string$27(param)
     {switch(param)
       {case 0:return cst_Always;
        case 1:return cst_Sometimes;
        default:return cst_Never}}
    function create$35(typename,immediacy,allowed_ints)
     {return [0,
              immediacy,
              allowed_ints,
              caml_call1(Typerep_lib_Typename[10],typename)]}
    function never_with_name(name){return [0,2,0,name]}
    function never(typename){return create$35(typename,2,0)}
    var
     option=[0,1,_apf_,cst_option$1],
     list$0=[0,1,_apg_,cst_list$1],
     int32=never(typename_of_int32),
     int64=never(typename_of_int64),
     nativeint=never(typename_of_nativeint),
     float$1=never(typename_of_float),
     string$1=never(typename_of_string),
     bytes$1=never(typename_of_bytes),
     array=never_with_name(cst_array$1),
     ref=never_with_name(cst_ref$1),
     tuple2$3=never_with_name(cst_tuple2),
     tuple3$2=never_with_name(cst_tuple3),
     tuple4$2=never_with_name(cst_tuple4),
     tuple5$2=never_with_name(cst_tuple5),
     function$0=never_with_name(cst_function),
     int$0=create$35(typename_of_int,0,1),
     unit=create$35(typename_of_unit,0,_aph_),
     bool$2=create$35(typename_of_bool,0,_api_),
     char$4=create$35(typename_of_char,0,_apj_),
     _apk_=caml_call1(Typerep_lib_Type_generic[1][1],[0]),
     Tag_internal=_apk_[1],
     Tag=_apk_[2],
     Variant_internal=_apk_[3],
     Variant=_apk_[4],
     Field_internal=_apk_[5],
     Field$0=_apk_[6],
     Record_internal=_apk_[7],
     Record=_apk_[8];
    function ref$0(param){return ref}
    function array$0(param){return array}
    function tuple2$4(param,_bou_){return tuple2$3}
    function tuple3$3(param,_bot_,_bos_){return tuple3$2}
    function tuple4$3(param,_bor_,_boq_,_bop_){return tuple4$2}
    function tuple5$3(param,_boo_,_bon_,_bom_,_bol_){return tuple5$2}
    function function$1(param,_bok_){return function$0}
    function option$0(param){return option}
    function list$1(param){return list$0}
    function lazy_t(t)
     {var match=t[1],immediacy=2 <= match?2:1;
      return [0,immediacy,t[2],cst_lazy_t$1]}
    function record(r){return never(caml_call1(Record[1],r))}
    function variant(variant)
     {function _bof_(list,tag)
       {var t=tag[1];
        return caml_call2(_aD_,caml_call1(Tag[2],t),0)?[0,tag,list]:list}
      var
       _bog_=caml_call3(Variant[6],variant,0,_bof_),
       no_arg_list=caml_call1(Base_List[36],_bog_),
       no_arg_count=caml_call1(Base_List[6],no_arg_list);
      if(caml_call2(_aD_,no_arg_count,0))
       return never(caml_call1(Variant[1],variant));
      if(caml_call1(Variant[4],variant))
       {var
         _boh_=[0,caml_call2(_aj_,no_arg_count,2)],
         hash_set=caml_call3(include$29[2],0,_boh_,Key$3),
         _boi_=
          function(param)
           {var tag=param[1],match=caml_call1(Tag[6],tag);
            if(0 === match[0])throw [0,Assert_failure,_apl_];
            var _boj_=caml_call1(Tag[5],tag);
            return caml_call2(include$29[22],hash_set,_boj_)};
        caml_call2(Base_List[8],no_arg_list,_boi_);
        var allowed_ints=[0,hash_set]}
      else
       var allowed_ints=[1,caml_call2(_ai_,no_arg_count,1)];
      var
       immediacy=
        caml_call2(_aE_,caml_call1(Variant[2],variant),no_arg_count)?1:0;
      return create$35(caml_call1(Variant[1],variant),immediacy,allowed_ints)}
    var required=0;
    function create$36(param){return 0}
    var Context=[0,create$36];
    function init$10(param,name){return [0,create$35(name,1,0)]}
    function get_wip_computation(comp){return comp[1]}
    function set_final_computation(r,t){r[1] = t;return t}
    function share(param){return 1}
    var
     Named$3=
      [0,Context,init$10,get_wip_computation,set_final_computation,share],
     Generic=
      caml_call1
       (Typerep_lib_Type_generic[5],
        [0,
         name$58,
         required,
         Tag_internal,
         Tag,
         Variant_internal,
         Variant,
         Field_internal,
         Field$0,
         Record_internal,
         Record,
         int$0,
         int32,
         int64,
         nativeint,
         char$4,
         float$1,
         string$1,
         bytes$1,
         bool$2,
         unit,
         option$0,
         list$1,
         array$0,
         lazy_t,
         ref$0,
         function$1,
         tuple2$4,
         tuple3$3,
         tuple4$3,
         tuple5$3,
         record,
         variant,
         Named$3]);
    function of_typerep(typerep)
     {var match=caml_call1(Generic[10],typerep),t=match[2];return t}
    function For_all_parameters(M)
     {function witness(typerep1,typerep2)
       {var t1=of_typerep(typerep1),t2=of_typerep(typerep2),i1=t1[1],i2=t2[1];
        if(equal$38(i1,i2))
         {if(equal$38(i1,M[1]))return t1;
          var
           _bob_=to_string$27(i1),
           _boc_=to_string$27(M[1]),
           _bod_=caml_call1(include$26[1][14],typerep1);
          return caml_call1
                  (_aV_,
                   caml_call4
                    (_eJ_,
                     _apm_,
                     caml_call1(Typerep_lib_Typename[10],_bod_),
                     _boc_,
                     _bob_))}
        var _boe_=caml_call1(include$26[1][14],typerep1);
        return caml_call1
                (_aV_,
                 caml_call2
                  (_eJ_,_apn_,caml_call1(Typerep_lib_Typename[10],_boe_)))}
      var ra=0,rn=6;
      function For_all_parameters_S1(X)
       {var _boa_=caml_call1(X[1],rn),t=witness(caml_call1(X[1],ra),_boa_);
        function witness$0(param){return t}
        return [0,t,witness$0]}
      function For_all_parameters_S2(X)
       {var
         _bn$_=caml_call2(X[1],rn,rn),
         t=witness(caml_call2(X[1],ra,ra),_bn$_);
        function witness$0(param){return t}
        return [0,t,witness$0]}
      function For_all_parameters_S3(X)
       {var
         _bn__=caml_call3(X[1],rn,rn,rn),
         t=witness(caml_call3(X[1],ra,ra,ra),_bn__);
        function witness$0(param){return t}
        return [0,t,witness$0]}
      function For_all_parameters_S4(X)
       {var
         _bn9_=caml_call4(X[1],rn,rn,rn,rn),
         t=witness(caml_call4(X[1],ra,ra,ra,ra),_bn9_);
        function witness$0(param){return t}
        return [0,t,witness$0]}
      function For_all_parameters_S5(X)
       {var
         _bn8_=caml_call5(X[1],rn,rn,rn,rn,rn),
         t=witness(caml_call5(X[1],ra,ra,ra,ra,ra),_bn8_);
        function witness$0(param){return t}
        return [0,t,witness$0]}
      return [0,
              witness,
              ra,
              rn,
              For_all_parameters_S1,
              For_all_parameters_S2,
              For_all_parameters_S3,
              For_all_parameters_S4,
              For_all_parameters_S5]}
    function int_is_value(t,int$0)
     {var _bn7_=t[2];
      if(typeof _bn7_ === "number")
       return 0 === _bn7_?0:1;
      else
       {if(0 === _bn7_[0])
         {var hash_set=_bn7_[1];
          return caml_call2(include$29[20],hash_set,int$0)}
        var n=_bn7_[1],_bn6_=caml_call2(_aB_,0,int$0);
        return _bn6_?caml_call2(_aB_,int$0,n):_bn6_}}
    function int_as_value(t,int$0){return int_is_value(t,int$0)?[0,int$0]:0}
    function int_as_value_exn(t,int$0)
     {return int_is_value(t,int$0)
              ?int$0
              :caml_call1(_aV_,caml_call3(_eJ_,_apo_,t[3],int$0))}
    function value_as_int_exn(t,a)
     {return typeof a === "number"
              ?a
              :caml_call1(_aV_,caml_call2(_eJ_,_app_,t[3]))}
    function value_as_int(param,a){return typeof a === "number"?[0,a]:0}
    function value_is_int(param,a){return typeof a === "number"}
    var
     include$130=For_all_parameters([0,0]),
     For_all_parameters_S1=include$130[4],
     For_all_parameters_S2=include$130[5],
     For_all_parameters_S3=include$130[6],
     For_all_parameters_S4=include$130[7],
     For_all_parameters_S5=include$130[8];
    function of_typerep$0(typerep)
     {var t=of_typerep(typerep),match=t[1];return 0 === match?[0,t]:0}
    function value_as_int$0(param,a){return a}
    var
     include$131=For_all_parameters([0,1]),
     For_all_parameters_S1$0=include$131[4],
     For_all_parameters_S2$0=include$131[5],
     For_all_parameters_S3$0=include$131[6],
     For_all_parameters_S4$0=include$131[7],
     For_all_parameters_S5$0=include$131[8];
    function of_typerep$1(typerep)
     {var t=of_typerep(typerep),match=t[1];return 1 === match?[0,t]:0}
    var
     _apq_=For_all_parameters([0,2]),
     For_all_parameters_S1$1=_apq_[4],
     For_all_parameters_S2$1=_apq_[5],
     For_all_parameters_S3$1=_apq_[6],
     For_all_parameters_S4$1=_apq_[7],
     For_all_parameters_S5$1=_apq_[8];
    function of_typerep$2(typerep)
     {var t=of_typerep(typerep),match=t[1];return 2 <= match?[0,t]:0}
    function dest(t)
     {var match=t[1];
      switch(match)
       {case 0:return [0,t];case 1:return [1,t];default:return [2,t]}}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$388);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    function _apr_(_bn5_)
     {return [0,caml_call1(For_all_parameters_S5$1,_bn5_)[2]]}
    function _aps_(_bn4_)
     {return [0,caml_call1(For_all_parameters_S4$1,_bn4_)[2]]}
    function _apt_(_bn3_)
     {return [0,caml_call1(For_all_parameters_S3$1,_bn3_)[2]]}
    function _apu_(_bn2_)
     {return [0,caml_call1(For_all_parameters_S2$1,_bn2_)[2]]}
    var
     _apv_=
      [0,
       of_typerep$2,
       function(_bn1_)
        {return [0,caml_call1(For_all_parameters_S1$1,_bn1_)[2]]},
       _apu_,
       _apt_,
       _aps_,
       _apr_,
       int32,
       int64,
       nativeint,
       float$1,
       string$1,
       array,
       ref,
       tuple2$3,
       tuple3$2,
       tuple4$2,
       tuple5$2];
    function _apw_(_bn0_)
     {return [0,caml_call1(For_all_parameters_S5$0,_bn0_)[2]]}
    function _apx_(_bnZ_)
     {return [0,caml_call1(For_all_parameters_S4$0,_bnZ_)[2]]}
    function _apy_(_bnY_)
     {return [0,caml_call1(For_all_parameters_S3$0,_bnY_)[2]]}
    function _apz_(_bnX_)
     {return [0,caml_call1(For_all_parameters_S2$0,_bnX_)[2]]}
    var
     _apA_=
      [0,
       of_typerep$1,
       int_as_value,
       int_as_value_exn,
       int_is_value,
       value_as_int,
       value_as_int_exn,
       value_is_int,
       function(_bnW_)
        {return [0,caml_call1(For_all_parameters_S1$0,_bnW_)[2]]},
       _apz_,
       _apy_,
       _apx_,
       _apw_,
       option,
       list$0];
    function _apB_(_bnV_)
     {return [0,caml_call1(For_all_parameters_S5,_bnV_)[2]]}
    function _apC_(_bnU_)
     {return [0,caml_call1(For_all_parameters_S4,_bnU_)[2]]}
    function _apD_(_bnT_)
     {return [0,caml_call1(For_all_parameters_S3,_bnT_)[2]]}
    function _apE_(_bnS_)
     {return [0,caml_call1(For_all_parameters_S2,_bnS_)[2]]}
    var
     Core_kernel_Type_immediacy=
      [0,
       [0,
        of_typerep$0,
        int_as_value,
        int_as_value_exn,
        int_is_value,
        value_as_int$0,
        function(_bnR_){return [0,caml_call1(For_all_parameters_S1,_bnR_)[2]]},
        _apE_,
        _apD_,
        _apC_,
        _apB_,
        int$0,
        char$4,
        bool$2,
        unit],
       _apA_,
       _apv_,
       of_typerep,
       dest,
       int_as_value,
       int_as_value_exn,
       int_is_value,
       value_as_int,
       value_as_int_exn,
       value_is_int];
    caml_register_global
     (7530,Core_kernel_Type_immediacy,"Core_kernel__Type_immediacy");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$389);
    caml_call1(Expect_test_collector[4][1],cst_src_tuple_type_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$390,cst$208);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$391);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Tuple_type_intf=[0];
    caml_register_global
     (7531,Core_kernel_Tuple_type_intf,"Core_kernel__Tuple_type_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$392);
    caml_call1(Expect_test_collector[4][1],cst_src_tuple_type_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$393,cst$209);
    function sexp_of_t$102(param)
     {var
       v0=param[2],
       v_slots_per_tuple=v0[1],
       arg=caml_call1(sexp_of_t$0,v_slots_per_tuple),
       bnds=[0,[1,[0,_apF_,[0,arg,0]]],0];
      return [1,[0,_apG_,[0,[1,bnds],0]]]}
    function sexp_of_t$103(of_tuple,of_variant,v){return sexp_of_t$102(v)}
    function slots_per_tuple(param){var match=param[2],n=match[1];return n}
    function sexp_of_t1(of_a0,v){return sexp_of_t$102(v)}
    function sexp_of_t2(of_a0,of_a1,v){return sexp_of_t$102(v)}
    function sexp_of_t3(of_a0,of_a1,of_a2,v){return sexp_of_t$102(v)}
    function sexp_of_t4(of_a0,of_a1,of_a2,of_a3,v){return sexp_of_t$102(v)}
    function sexp_of_t5(of_a0,of_a1,of_a2,of_a3,of_a4,v)
     {return sexp_of_t$102(v)}
    function sexp_of_t6(of_a0,of_a1,of_a2,of_a3,of_a4,of_a5,v)
     {return sexp_of_t$102(v)}
    function sexp_of_t7(of_a0,of_a1,of_a2,of_a3,of_a4,of_a5,of_a6,v)
     {return sexp_of_t$102(v)}
    function sexp_of_t8(of_a0,of_a1,of_a2,of_a3,of_a4,of_a5,of_a6,of_a7,v)
     {return sexp_of_t$102(v)}
    function sexp_of_t9
     (of_a0,of_a1,of_a2,of_a3,of_a4,of_a5,of_a6,of_a7,of_a8,v)
     {return sexp_of_t$102(v)}
    function sexp_of_t10
     (of_a0,of_a1,of_a2,of_a3,of_a4,of_a5,of_a6,of_a7,of_a8,of_a9,v)
     {return sexp_of_t$102(v)}
    function sexp_of_t11
     (of_a0,of_a1,of_a2,of_a3,of_a4,of_a5,of_a6,of_a7,of_a8,of_a9,of_a10,v)
     {return sexp_of_t$102(v)}
    function sexp_of_t12
     (of_a0,
      of_a1,
      of_a2,
      of_a3,
      of_a4,
      of_a5,
      of_a6,
      of_a7,
      of_a8,
      of_a9,
      of_a10,
      of_a11,
      v)
     {return sexp_of_t$102(v)}
    function sexp_of_t13
     (of_a0,
      of_a1,
      of_a2,
      of_a3,
      of_a4,
      of_a5,
      of_a6,
      of_a7,
      of_a8,
      of_a9,
      of_a10,
      of_a11,
      of_a12,
      v)
     {return sexp_of_t$102(v)}
    function sexp_of_t14
     (of_a0,
      of_a1,
      of_a2,
      of_a3,
      of_a4,
      of_a5,
      of_a6,
      of_a7,
      of_a8,
      of_a9,
      of_a10,
      of_a11,
      of_a12,
      of_a13,
      v)
     {return sexp_of_t$102(v)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$394);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     _apH_=
      [0,
       sexp_of_t$103,
       slots_per_tuple,
       sexp_of_t1,
       sexp_of_t2,
       sexp_of_t3,
       sexp_of_t4,
       sexp_of_t5,
       sexp_of_t6,
       sexp_of_t7,
       sexp_of_t8,
       sexp_of_t9,
       sexp_of_t10,
       sexp_of_t11,
       sexp_of_t12,
       sexp_of_t13,
       sexp_of_t14,
       t1$0,
       t2$0,
       t3$0,
       t4$0,
       t5$0,
       t6,
       t7,
       t8,
       t9,
       t10,
       t11,
       t12,
       t13,
       t14],
     Core_kernel_Tuple_type=[0,_apH_];
    caml_register_global
     (7532,Core_kernel_Tuple_type,"Core_kernel__Tuple_type");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$395);
    caml_call1(Expect_test_collector[4][1],cst_src_tuple_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$396,cst$210);
    function Make$12(T1,T2){return [0]}
    function t_of_sexp$95(of_a,of_b,sexp)
     {if(1 === sexp[0])
       {var _bnP_=sexp[1];
        if(_bnP_)
         {var _bnQ_=_bnP_[2];
          if(_bnQ_)
           if(! _bnQ_[2])
            {var
              v1=_bnQ_[1],
              v0=_bnP_[1],
              v0$0=caml_call1(of_a,v0),
              v1$0=caml_call1(of_b,v1);
             return [0,v0$0,v1$0]}}}
      return caml_call3(Sexplib0_Sexp_conv_error[2],tp_loc$36,2,sexp)}
    function sexp_of_t$104(of_a,of_b,param)
     {var
       v1=param[2],
       v0=param[1],
       v0$0=caml_call1(of_a,v0),
       v1$0=caml_call1(of_b,v1);
      return [1,[0,v0$0,[0,v1$0,0]]]}
    var
     Typename_of_t$23=caml_call1(Typerep_lib_Make_typename[3],[0,name$59]),
     typename_of_t$23=Typename_of_t$23[2];
    function typerep_of_t$24(of_a,of_b)
     {var name_of_t=caml_call2(Typename_of_t$23[1],of_a,of_b);
      return [9,
              [0,
               name_of_t,
               [0,
                [246,
                 function(_bnO_)
                  {return caml_call2(typerep_of_tuple2,of_a,of_b)}]]]]}
    function create$37(a,b){return [0,a,b]}
    function curry(f){return function(a,b){return caml_call1(f,[0,a,b])}}
    function uncurry(f)
     {return function(param)
       {var b=param[2],a=param[1];return caml_call2(f,a,b)}}
    function map1(f,param)
     {var y=param[2],x=param[1];return [0,caml_call1(f,x),y]}
    function map2$1(f,param)
     {var y=param[2],x=param[1];return [0,x,caml_call1(f,y)]}
    function map_fst(param,f)
     {var y=param[2],x=param[1];return [0,caml_call1(f,x),y]}
    function map_snd(param,f)
     {var y=param[2],x=param[1];return [0,x,caml_call1(f,y)]}
    function compare$73(cmp1,cmp2,param,_bnN_)
     {var
       y=_bnN_[2],
       x=_bnN_[1],
       y$0=param[2],
       x$0=param[1],
       i=caml_call2(cmp1,x$0,x);
      return 0 === i?caml_call2(cmp2,y$0,y):i}
    function equal$39(eq1,eq2,param,_bnL_)
     {var
       y=_bnL_[2],
       x=_bnL_[1],
       y$0=param[2],
       x$0=param[1],
       _bnM_=caml_call2(eq1,x$0,x);
      return _bnM_?caml_call2(eq2,y$0,y):_bnM_}
    function swap$1(param){var b=param[2],a=param[1];return [0,b,a]}
    function compare$74(cmp1,cmp2)
     {return function(_bnJ_,_bnK_){return compare$73(cmp1,cmp2,_bnJ_,_bnK_)}}
    var
     include$132=caml_call1(Derived2,[0,compare$74,sexp_of_t$104]),
     comparator$29=include$132[1];
    function t_of_sexp$96(of_a,of_b,of_c,sexp)
     {if(1 === sexp[0])
       {var _bnG_=sexp[1];
        if(_bnG_)
         {var _bnH_=_bnG_[2];
          if(_bnH_)
           {var _bnI_=_bnH_[2];
            if(_bnI_)
             if(! _bnI_[2])
              {var
                v2=_bnI_[1],
                v1=_bnH_[1],
                v0=_bnG_[1],
                v0$0=caml_call1(of_a,v0),
                v1$0=caml_call1(of_b,v1),
                v2$0=caml_call1(of_c,v2);
               return [0,v0$0,v1$0,v2$0]}}}}
      return caml_call3(Sexplib0_Sexp_conv_error[2],tp_loc$37,3,sexp)}
    function sexp_of_t$105(of_a,of_b,of_c,param)
     {var
       v2=param[3],
       v1=param[2],
       v0=param[1],
       v0$0=caml_call1(of_a,v0),
       v1$0=caml_call1(of_b,v1),
       v2$0=caml_call1(of_c,v2);
      return [1,[0,v0$0,[0,v1$0,[0,v2$0,0]]]]}
    var
     Typename_of_t$24=caml_call1(Typerep_lib_Make_typename[4],[0,name$60]),
     typename_of_t$24=Typename_of_t$24[2];
    function typerep_of_t$25(of_a,of_b,of_c)
     {var name_of_t=caml_call3(Typename_of_t$24[1],of_a,of_b,of_c);
      return [9,
              [0,
               name_of_t,
               [0,
                [246,
                 function(_bnF_)
                  {return caml_call3(typerep_of_tuple3,of_a,of_b,of_c)}]]]]}
    function create$38(a,b,c){return [0,a,b,c]}
    function curry$0(f)
     {return function(a,b,c){return caml_call1(f,[0,a,b,c])}}
    function uncurry$0(f)
     {return function(param)
       {var c=param[3],b=param[2],a=param[1];return caml_call3(f,a,b,c)}}
    function map1$0(f,param)
     {var z=param[3],y=param[2],x=param[1];return [0,caml_call1(f,x),y,z]}
    function map2$2(f,param)
     {var z=param[3],y=param[2],x=param[1];return [0,x,caml_call1(f,y),z]}
    function map3$0(f,param)
     {var z=param[3],y=param[2],x=param[1];return [0,x,y,caml_call1(f,z)]}
    function map_fst$0(param,f)
     {var z=param[3],y=param[2],x=param[1];return [0,caml_call1(f,x),y,z]}
    function map_snd$0(param,f)
     {var z=param[3],y=param[2],x=param[1];return [0,x,caml_call1(f,y),z]}
    function map_trd(param,f)
     {var z=param[3],y=param[2],x=param[1];return [0,x,y,caml_call1(f,z)]}
    function get3(param){var a=param[3];return a}
    function compare$75(cmp1,cmp2,cmp3,param,_bnE_)
     {var
       z=_bnE_[3],
       y=_bnE_[2],
       x=_bnE_[1],
       z$0=param[3],
       y$0=param[2],
       x$0=param[1],
       c1=caml_call2(cmp1,x$0,x);
      if(caml_call2(_aC_,c1,0))return c1;
      var c2=caml_call2(cmp2,y$0,y);
      return caml_call2(_aC_,c2,0)?c2:caml_call2(cmp3,z$0,z)}
    function equal$40(eq1,eq2,eq3,param,_bnA_)
     {var
       z=_bnA_[3],
       y=_bnA_[2],
       x=_bnA_[1],
       z$0=param[3],
       y$0=param[2],
       x$0=param[1],
       _bnB_=caml_call2(eq1,x$0,x);
      if(_bnB_)
       {var _bnC_=caml_call2(eq2,y$0,y);
        if(_bnC_)return caml_call2(eq3,z$0,z);
        var _bnD_=_bnC_}
      else
       var _bnD_=_bnB_;
      return _bnD_}
    function Sexpable(S1,S2)
     {function t_of_sexp(sexp)
       {if(1 === sexp[0])
         {var _bny_=sexp[1];
          if(_bny_)
           {var _bnz_=_bny_[2];
            if(_bnz_)
             if(! _bnz_[2])
              {var
                v1=_bnz_[1],
                v0=_bny_[1],
                v0$0=caml_call1(S1[1],v0),
                v1$0=caml_call1(S2[1],v1);
               return [0,v0$0,v1$0]}}}
        return caml_call3(Sexplib0_Sexp_conv_error[2],tp_loc$38,2,sexp)}
      function sexp_of_t(param)
       {var
         v1=param[2],
         v0=param[1],
         v0$0=caml_call1(S1[2],v0),
         v1$0=caml_call1(S2[2],v1);
        return [1,[0,v0$0,[0,v1$0,0]]]}
      return [0,t_of_sexp,sexp_of_t]}
    function Hasher$0(H1,H2)
     {function compare(a_001,b_002)
       {var
         t_004=a_001[2],
         t_003=a_001[1],
         t_006=b_002[2],
         t_005=b_002[1],
         n=caml_call2(H1[1],t_003,t_005);
        return 0 === n?caml_call2(H2[1],t_004,t_006):n}
      function hash_fold_t(hsv,arg)
       {var
         e1=arg[2],
         e0=arg[1],
         hsv$0=caml_call2(H1[2],hsv,e0),
         hsv$1=caml_call2(H2[2],hsv$0,e1);
        return hsv$1}
      function hash(x)
       {var hsv=caml_call2(Base_Hash[11],0,0),_bnx_=hash_fold_t(hsv,x);
        return caml_call1(Base_Hash[9],_bnx_)}
      function t_of_sexp(sexp)
       {if(1 === sexp[0])
         {var _bnv_=sexp[1];
          if(_bnv_)
           {var _bnw_=_bnv_[2];
            if(_bnw_)
             if(! _bnw_[2])
              {var
                v1=_bnw_[1],
                v0=_bnv_[1],
                v0$0=caml_call1(H1[4],v0),
                v1$0=caml_call1(H2[4],v1);
               return [0,v0$0,v1$0]}}}
        return caml_call3(Sexplib0_Sexp_conv_error[2],tp_loc$39,2,sexp)}
      function sexp_of_t(param)
       {var
         v1=param[2],
         v0=param[1],
         v0$0=caml_call1(H1[5],v0),
         v1$0=caml_call1(H2[5],v1);
        return [1,[0,v0$0,[0,v1$0,0]]]}
      var
       T=[0,compare,hash_fold_t,hash,t_of_sexp,sexp_of_t],
       t_of_sexp$0=T[4],
       sexp_of_t$0=T[5],
       include=Make$5([0,T[2],T[4],T[1],T[5],T[3]]),
       compare$0=include[1],
       hash_fold_t$0=include[2],
       hash$0=include[3],
       hashable=include[4],
       Table=include[5],
       Hash_set=include[6],
       Hash_queue=include[7];
      return [0,
              T,
              t_of_sexp$0,
              sexp_of_t$0,
              compare$0,
              hash_fold_t$0,
              hash$0,
              hashable,
              Table,
              Hash_set,
              Hash_queue]}
    function Hasher_sexpable_of_hashable_sexpable(S)
     {var t_of_sexp=S[1],sexp_of_t=S[2],compare=S[3],hash=S[5];
      function hash_fold_t$0(state,t)
       {return caml_call2(hash_fold_t,state,caml_call1(hash,t))}
      return [0,compare,hash_fold_t$0,hash,t_of_sexp,sexp_of_t]}
    function Hashable_t(_bnt_,_bns_)
     {var _bnu_=Hasher_sexpable_of_hashable_sexpable(_bns_);
      return Hasher$0(Hasher_sexpable_of_hashable_sexpable(_bnt_),_bnu_)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$397);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    function _apI_(_bnq_,_bnp_)
     {var _bnr_=Hasher$0(_bnq_,_bnp_);
      return [0,
              _bnr_[2],
              _bnr_[3],
              _bnr_[4],
              _bnr_[5],
              _bnr_[6],
              _bnr_[7],
              _bnr_[8],
              _bnr_[9],
              _bnr_[10]]}
    function _apJ_(B1,B2)
     {var
       _bnl_=caml_call1(Bin_prot_Shape[7],[0,B1[5],[0,B2[5],0]]),
       _bnm_=
        [0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$191),0,_bnl_],0],
       _bnn_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_tuple_ml_97_2),
       group=caml_call2(Bin_prot_Shape[6],_bnn_,_bnm_),
       _bno_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$192),
       bin_shape_t=caml_call1(caml_call2(Bin_prot_Shape[14],group,_bno_),0);
      function bin_size_t(param)
       {var v2=param[2],v1=param[1],size=caml_call1(B1[1],v1) | 0;
        return size + caml_call1(B2[1],v2) | 0}
      function bin_write_t(buf,pos,param)
       {var v2=param[2],v1=param[1],pos$0=caml_call3(B1[2],buf,pos,v1);
        return caml_call3(B2[2],buf,pos$0,v2)}
      var bin_writer_t=[0,bin_size_t,bin_write_t];
      function bin_read_t(buf,pos_ref,vint)
       {return caml_call2
                (Bin_prot_Common[19],cst_src_tuple_ml_Binable_t,pos_ref[1])}
      function bin_read_t$0(buf,pos_ref)
       {var v1=caml_call2(B1[3],buf,pos_ref),v2=caml_call2(B2[3],buf,pos_ref);
        return [0,v1,v2]}
      var
       bin_reader_t=[0,bin_read_t$0,bin_read_t],
       bin_t=[0,bin_shape_t,bin_writer_t,bin_reader_t];
      return [0,
              bin_size_t,
              bin_write_t,
              bin_read_t$0,
              bin_read_t,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t]}
    function _apK_(_bnj_,_bni_)
     {var _bnk_=Hashable_t(_bnj_,_bni_);
      return [0,
              _bnk_[2],
              _bnk_[3],
              _bnk_[4],
              _bnk_[5],
              _bnk_[6],
              _bnk_[7],
              _bnk_[8],
              _bnk_[9],
              _bnk_[10]]}
    function _apL_(_bng_,_bnf_)
     {var _bnh_=Hashable_t(_bng_,_bnf_);
      return [0,
              _bnh_[2],
              _bnh_[3],
              _bnh_[4],
              _bnh_[5],
              _bnh_[6],
              _bnh_[7],
              _bnh_[8],
              _bnh_[9],
              _bnh_[10]]}
    var
     Core_kernel_Tuple=
      [0,
       [0,
        t_of_sexp$95,
        sexp_of_t$104,
        typerep_of_t$24,
        typename_of_t$23,
        comparator$29,
        create$37,
        curry,
        uncurry,
        compare$73,
        equal$39,
        map1,
        map2$1,
        map_fst,
        map_snd,
        swap$1],
       [0,
        t_of_sexp$96,
        sexp_of_t$105,
        typerep_of_t$25,
        typename_of_t$24,
        create$38,
        curry$0,
        uncurry$0,
        equal$40,
        compare$75,
        get3,
        map1$0,
        map2$2,
        map3$0,
        map_fst$0,
        map_snd$0,
        map_trd],
       Make$12,
       function(S1,S2)
        {var
          include$0=Sexpable([0,S1[1],S1[2]],[0,S2[1],S2[2]]),
          t_of_sexp=include$0[1],
          sexp_of_t=include$0[2];
         function compare(param,_bne_)
          {var
            s2=_bne_[2],
            s1=_bne_[1],
            s2$0=param[2],
            s1$0=param[1],
            x=caml_call2(S1[10],s1$0,s1);
           return 0 === x?caml_call2(S2[10],s2$0,s2):x}
         var
          include=Make$2([0,compare,t_of_sexp,sexp_of_t]),
          equal=include[7],
          compare$0=include[8],
          min=include[9],
          max=include[10],
          ascending=include[11],
          descending=include[12],
          between=include[13],
          clamp_exn=include[14],
          clamp=include[15],
          comparator=include[16],
          validate_lbound=include[17],
          validate_ubound=include[18],
          validate_bound=include[19],
          Replace_polymorphic_compare=include[20],
          Map=include[21],
          Set=include[22];
         return [0,
                 t_of_sexp,
                 sexp_of_t,
                 include[1],
                 include[2],
                 include[3],
                 include[4],
                 include[5],
                 include[6],
                 equal,
                 compare$0,
                 min,
                 max,
                 ascending,
                 descending,
                 between,
                 clamp_exn,
                 clamp,
                 comparator,
                 validate_lbound,
                 validate_ubound,
                 validate_bound,
                 Replace_polymorphic_compare,
                 Map,
                 Set]},
       _apL_,
       _apK_,
       Sexpable,
       _apJ_,
       _apI_];
    caml_register_global(7533,Core_kernel_Tuple,"Core_kernel__Tuple");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$398);
    caml_call1(Expect_test_collector[4][1],cst_src_total_map_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$399,cst$211);
    function to_map$2(t){return t}
    function key_not_in_enumeration(t,key)
     {return failwiths
              (0,
               _apM_,
               cst_Key_was_not_provided_in_the_enumeration_given_to_Total_map_Make,
               key,
               caml_call1(comparator$2,t)[2])}
    function change$6(t,k,f)
     {return caml_call3
              (update$1,
               t,
               k,
               function(param)
                {if(param){var x=param[1];return caml_call1(f,x)}
                 return key_not_in_enumeration(t,k)})}
    function find$18(t,k)
     {var match=caml_call2(find$6,t,k);
      if(match){var x=match[1];return x}
      return key_not_in_enumeration(t,k)}
    function pair(t1,t2,key,param)
     {var _bnd_=param[1];
      if(737457313 === _bnd_)
       {var match=param[2],v2=match[2],v1=match[1];return [0,v1,v2]}
      return 847852583 <= _bnd_
              ?key_not_in_enumeration(t2,key)
              :key_not_in_enumeration(t1,key)}
    function iter2$8(t1,t2,f)
     {return caml_call3
              (iter2$1,
               t1,
               t2,
               function(key,data)
                {var match=pair(t1,t2,key,data),v2=match[2],v1=match[1];
                 return caml_call3(f,key,v1,v2)})}
    function map2$3(t1,t2,f)
     {return caml_call3
              (merge$4,
               t1,
               t2,
               function(key,v)
                {var match=pair(t1,t2,key,v),v2=match[2],v1=match[1];
                 return [0,caml_call2(f,v1,v2)]})}
    function set$14(t,key,data){return caml_call3(set$2,t,key,data)}
    function Sequence(A)
     {function sequence(t)
       {function _bm__(acc,param)
         {var data=param[2],key=param[1];
          function _bnc_(acc,data){return caml_call3(set$2,acc,key,data)}
          return caml_call3(A[4],acc,data,_bnc_)}
        var
         _bm$_=caml_call1(comparator$2,t),
         _bna_=caml_call1(_r$_[1],_bm$_),
         _bnb_=caml_call1(A[1],_bna_);
        return caml_call3(fold$2,caml_call2(to_alist$1,0,t),_bnb_,_bm__)}
      return [0,sequence]}
    function Make_using_comparator$3(Key)
     {var
       t_of_sexp=Key[1],
       sexp_of_t=Key[2],
       bin_t=Key[3],
       bin_read_t=Key[4],
       bin_read_t$0=Key[5],
       bin_reader_t=Key[6],
       bin_size_t=Key[7],
       bin_write_t=Key[8],
       bin_writer_t=Key[9],
       bin_shape_t=Key[10],
       all=Key[12],
       include=
        _td_
         ([0,
           Key[3],
           Key[4],
           Key[5],
           Key[6],
           Key[7],
           Key[8],
           Key[9],
           Key[10],
           Key[1],
           Key[2],
           Key[13]]),
       equal=include[7],
       compare=include[8],
       min=include[9],
       max=include[10],
       ascending=include[11],
       descending=include[12],
       between=include[13],
       clamp_exn=include[14],
       clamp=include[15],
       validate_lbound=include[16],
       validate_ubound=include[17],
       validate_bound=include[18],
       Replace_polymorphic_compare=include[19],
       comparator=include[20],
       Map=include[21],
       Set=include[22],
       Key$0=
        [0,
         t_of_sexp,
         sexp_of_t,
         bin_t,
         bin_read_t,
         bin_read_t$0,
         bin_reader_t,
         bin_size_t,
         bin_write_t,
         bin_writer_t,
         bin_shape_t,
         all,
         include[1],
         include[2],
         include[3],
         include[4],
         include[5],
         include[6],
         equal,
         compare,
         min,
         max,
         ascending,
         descending,
         between,
         clamp_exn,
         clamp,
         validate_lbound,
         validate_ubound,
         validate_bound,
         Replace_polymorphic_compare,
         comparator,
         Map,
         Set],
       _bm0_=Key$0[32][87],
       _bm1_=Key$0[32][88],
       _bm2_=Key$0[32][3],
       all_set=caml_call1(Key$0[33][57],Key$0[11]);
      function validate_map_from_serialization(map)
       {var
         keys=of_map_keys$0(map),
         keys_minus_all=caml_call2(diff$2,keys,all_set),
         all_minus_keys=caml_call2(diff$2,all_set,keys),
         _bm5_=0,
         _bm6_=
          caml_call1(is_empty$11,all_minus_keys)
           ?Base_Validate[1]
           :caml_call3
             (Base_Validate[3],
              cst_map_from_serialization_doesn_t_have_keys_it_should_have,
              all_minus_keys,
              Key$0[33][74]),
         _bm7_=[0,_bm6_,_bm5_],
         _bm8_=
          caml_call1(is_empty$11,keys_minus_all)
           ?Base_Validate[1]
           :caml_call3
             (Base_Validate[3],
              cst_map_from_serialization_has_keys_not_provided_in_the_enumeration,
              keys_minus_all,
              Key$0[33][74]),
         _bm9_=caml_call1(Base_Validate[7],[0,_bm8_,_bm7_]);
        return caml_call1(Base_Validate[17],_bm9_)}
      function t_of_sexp$0(a_of_sexp,sexp)
       {var t=caml_call2(_bm0_,a_of_sexp,sexp);
        validate_map_from_serialization(t);
        return t}
      function to_binable(x){return x}
      function of_binable(x){validate_map_from_serialization(x);return x}
      var
       _bm3_=Key$0[32],
       include$0=
        caml_call1
         (Bin_prot_Utils[8],
          [0,
           [0,_bm3_[89],_bm3_[90],_bm3_[91],_bm3_[92],_bm3_[93]],
           to_binable,
           of_binable]),
       bin_shape_t$0=include$0[1],
       bin_size_t$0=include$0[2],
       bin_write_t$0=include$0[3],
       bin_read_t$1=include$0[4],
       bin_read_t$2=include$0[5],
       bin_writer_t$0=include$0[6],
       bin_reader_t$0=include$0[7],
       bin_t$0=include$0[8];
      function create(f)
       {function _bm4_(t,key)
         {return caml_call3(set$2,t,key,caml_call1(f,key))}
        return caml_call3(fold$2,Key$0[11],Key$0[32][4],_bm4_)}
      function return$0(x){return create(function(param){return x})}
      function apply(t1,t2)
       {return map2$3(t1,t2,function(f,x){return caml_call1(f,x)})}
      var
       map=[0,-198771759,map$14],
       include$1=caml_call1(Base_Applicative[4],[0,return$0,apply,map]),
       return$1=include$1[1],
       apply$0=include$1[2],
       map$0=include$1[3],
       map2=include$1[4],
       map3=include$1[5],
       all$0=include$1[6],
       all_unit=include$1[7],
       all_ignore=include$1[8],
       both=include$1[9],
       Applicative_infix=include$1[10];
      return [0,
              Key$0,
              _bm1_,
              _bm2_,
              all_set,
              validate_map_from_serialization,
              t_of_sexp$0,
              bin_shape_t$0,
              bin_size_t$0,
              bin_write_t$0,
              bin_read_t$1,
              bin_read_t$2,
              bin_writer_t$0,
              bin_reader_t$0,
              bin_t$0,
              create,
              return$1,
              apply$0,
              map$0,
              map2,
              map3,
              all$0,
              all_unit,
              all_ignore,
              both,
              Applicative_infix,
              include$1[11],
              include$1[12],
              include$1[13]]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$400);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    function _apN_(_bmX_)
     {var _bmY_=Make_using_comparator$3(_bmX_),_bmZ_=_bmY_[1];
      return [0,
              [0,
               _bmZ_[1],
               _bmZ_[2],
               _bmZ_[3],
               _bmZ_[4],
               _bmZ_[5],
               _bmZ_[6],
               _bmZ_[7],
               _bmZ_[8],
               _bmZ_[9],
               _bmZ_[10],
               _bmZ_[19],
               _bmZ_[11],
               _bmZ_[31]],
              _bmY_[6],
              _bmY_[2],
              _bmY_[14],
              _bmY_[10],
              _bmY_[11],
              _bmY_[13],
              _bmY_[8],
              _bmY_[9],
              _bmY_[12],
              _bmY_[7],
              _bmY_[3],
              _bmY_[16],
              _bmY_[17],
              _bmY_[18],
              _bmY_[19],
              _bmY_[20],
              _bmY_[21],
              _bmY_[22],
              _bmY_[23],
              _bmY_[24],
              _bmY_[25],
              _bmY_[26],
              _bmY_[27],
              _bmY_[28],
              _bmY_[15]]}
    var
     Core_kernel_Total_map=
      [0,
       to_map$2,
       map$14,
       mapi$4,
       map2$3,
       iter_keys$1,
       iter$7,
       iteri$4,
       iter2$8,
       set$14,
       to_alist$1,
       find$18,
       change$6,
       data$3,
       for_all$5,
       Sequence,
       function(Key)
        {var
          t_of_sexp=Key[1],
          sexp_of_t=Key[2],
          bin_t=Key[3],
          bin_read_t=Key[4],
          bin_read_t$0=Key[5],
          bin_reader_t=Key[6],
          bin_size_t=Key[7],
          bin_write_t=Key[8],
          bin_writer_t=Key[9],
          bin_shape_t=Key[10],
          all=Key[12],
          include=
           _te_
            ([0,
              Key[3],
              Key[4],
              Key[5],
              Key[6],
              Key[7],
              Key[8],
              Key[9],
              Key[10],
              Key[11],
              Key[1],
              Key[2]]),
          compare=include[8],
          comparator=include[20],
          _bmV_=
           Make_using_comparator$3
            ([0,
              t_of_sexp,
              sexp_of_t,
              bin_t,
              bin_read_t,
              bin_read_t$0,
              bin_reader_t,
              bin_size_t,
              bin_write_t,
              bin_writer_t,
              bin_shape_t,
              compare,
              all,
              comparator]),
          _bmW_=_bmV_[1];
         return [0,
                 [0,
                  _bmW_[1],
                  _bmW_[2],
                  _bmW_[3],
                  _bmW_[4],
                  _bmW_[5],
                  _bmW_[6],
                  _bmW_[7],
                  _bmW_[8],
                  _bmW_[9],
                  _bmW_[10],
                  _bmW_[19],
                  _bmW_[11]],
                 _bmV_[6],
                 _bmV_[2],
                 _bmV_[14],
                 _bmV_[10],
                 _bmV_[11],
                 _bmV_[13],
                 _bmV_[8],
                 _bmV_[9],
                 _bmV_[12],
                 _bmV_[7],
                 _bmV_[3],
                 _bmV_[16],
                 _bmV_[17],
                 _bmV_[18],
                 _bmV_[19],
                 _bmV_[20],
                 _bmV_[21],
                 _bmV_[22],
                 _bmV_[23],
                 _bmV_[24],
                 _bmV_[25],
                 _bmV_[26],
                 _bmV_[27],
                 _bmV_[28],
                 _bmV_[15]]},
       _apN_];
    caml_register_global(7534,Core_kernel_Total_map,"Core_kernel__Total_map");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$401);
    caml_call1(Expect_test_collector[4][1],cst_src_timing_wheel_ns_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$402,cst$212);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$403);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Timing_wheel_ns_intf=[0];
    caml_register_global
     (7535,
      Core_kernel_Timing_wheel_ns_intf,
      "Core_kernel__Timing_wheel_ns_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$404);
    caml_call1(Expect_test_collector[4][1],cst_src_debug_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$405,cst$213);
    function eprint(message){return caml_call2(_eO_,_apO_,message)}
    function eprint_s(sexp){return eprint(caml_call2(_PK_,0,sexp))}
    function eprints(v0,v1,sexp_of_a)
     {var v0$0=caml_call1(_Z_,v0),v1$0=caml_call1(sexp_of_a,v1);
      return eprint_s([1,[0,v0$0,[0,v1$0,0]]])}
    function eprintf(format){return caml_call2(_eL_,eprint,format)}
    function Make$13(_bmT_)
     {var check_invariant=[0,1],show_messages=[0,1];
      function debug
       (invariant,module_name,name,ts,arg,sexp_of_arg,sexp_of_result,f)
       {if(show_messages[1])
         eprints
          (caml_call2
            (Base_String[53],_apP_,[0,module_name,[0,cst$214,[0,name,0]]]),
           arg,
           sexp_of_arg);
        if(check_invariant[1])
         try
          {caml_call2(Base_List[8],ts,invariant)}
         catch(exn)
          {exn = caml_wrap_exception(exn);
           failwiths
            (0,
             _apQ_,
             cst_invariant_pre_condition_failed,
             [0,name,exn],
             function(param)
              {var
                v1=param[2],
                v0=param[1],
                v0$0=caml_call1(_Z_,v0),
                v1$0=caml_call1(sexp_of_t,v1);
               return [1,[0,v0$0,[0,v1$0,0]]]})}
        var result_or_exn=caml_call1(_hu_,f);
        if(check_invariant[1])
         try
          {caml_call2(Base_List[8],ts,invariant)}
         catch(exn)
          {exn = caml_wrap_exception(exn);
           failwiths
            (0,
             _apR_,
             cst_invariant_post_condition_failed,
             [0,name,exn],
             function(param)
              {var
                v1=param[2],
                v0=param[1],
                v0$0=caml_call1(_Z_,v0),
                v1$0=caml_call1(sexp_of_t,v1);
               return [1,[0,v0$0,[0,v1$0,0]]]})}
        if(show_messages[1])
         {var _bmU_=caml_call2(_gZ_,sexp_of_result,sexp_of_t);
          eprints
           (caml_call2
             (Base_String[53],
              _apT_,
              [0,module_name,[0,cst$215,[0,name,_apS_]]]),
            result_or_exn,
            _bmU_)}
        return caml_call1(_hh_,result_or_exn)}
      return [0,check_invariant,show_messages,debug]}
    var should_print_backtrace=[0,0];
    function am_internal(here,message)
     {caml_call2(_eO_,_apU_,caml_call1(_jB_,here));
      if(should_print_backtrace[1])
       {var _bmS_=caml_call2(Base_Backtrace[2],0,0);
        caml_call2
         (_eO_,_apV_,caml_call2(_PK_,0,caml_call1(Base_Backtrace[1],_bmS_)))}
      if(message){var message$0=message[1];caml_call2(_eO_,_apW_,message$0)}
      return caml_call1(_eO_,_apX_)}
    function am(here){return am_internal(here,0)}
    function amf(here,fmt)
     {return caml_call2
              (_eL_,function(string){return am_internal(here,[0,string])},fmt)}
    function ams(here,v0,v1,sexp_of_a)
     {var v0$0=caml_call1(_Z_,v0),v1$0=caml_call1(sexp_of_a,v1);
      return am_internal(here,[0,caml_call2(_PK_,0,[1,[0,v0$0,[0,v1$0,0]]])])}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$406);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Debug=
      [0,
       eprint,
       eprints,
       eprint_s,
       eprintf,
       Make$13,
       am,
       ams,
       amf,
       should_print_backtrace];
    caml_register_global(7537,Core_kernel_Debug,"Core_kernel__Debug");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$407);
    caml_call1(Expect_test_collector[4][1],cst_src_pool_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$408,cst$216);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$409);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Pool_intf=[0];
    caml_register_global(7538,Core_kernel_Pool_intf,"Core_kernel__Pool_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$410);
    caml_call1(Expect_test_collector[4][1],cst_src_pool_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$411,cst$217);
    var
     arch_sixtyfour$1=caml_call2(_aD_,Stdlib_sys[10],64),
     max_value$7=Stdlib[1][7],
     to_string$28=Stdlib[22],
     Tuple_type=0;
    function concat$3(l){return caml_call2(Base_String[53],_apY_,l)}
    var max_slot=14;
    function sexp_of_t$106(of_slots,of_a,v){return caml_call1(sexp_of_t$0,v)}
    function equal$41(t1,t2){return caml_call2(_aD_,t1,t2)}
    var
     t0$0=1,
     t1$1=2,
     t2$1=3,
     t3$1=4,
     t4$1=5,
     t5$1=6,
     t6$0=7,
     t7$0=8,
     t8$0=9,
     t9$0=10,
     t10$0=11,
     t11$0=12,
     t12$0=13,
     t13$0=14;
    function _ap2_(param){return caml_call2(_aD_,t13$0,max_slot)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[4],
      Inline_test_config,
      cst_t13_max_slot,
      0,
      cst_src_pool_ml$0,
      87,
      4,
      31,
      _ap2_);
    var
     Slot=
      [0,
       sexp_of_t$106,
       equal$41,
       t0$0,
       t1$1,
       t2$1,
       t3$1,
       t4$1,
       t5$1,
       t6$0,
       t7$0,
       t8$0,
       t9$0,
       t10$0,
       t11$0,
       t12$0,
       t13$0];
    if(arch_sixtyfour$1)
     {if(! caml_call2(_aD_,num_bits$0,63))throw [0,Assert_failure,_aYB_];
      var _ap3_=30}
    else
     {if(! caml_call2(_aD_,num_bits$0,31))
       if(! caml_call2(_aD_,num_bits$0,32))throw [0,Assert_failure,_aYC_];
      var _ap3_=22}
    var masked_tuple_id_num_bits=caml_call2(_ai_,num_bits$0,_ap3_);
    function _ap4_(param){return caml_call2(_aE_,_ap3_,0)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[4],
      Inline_test_config,
      cst_array_index_num_bits_0,
      0,
      cst_src_pool_ml$1,
      113,
      2,
      39,
      _ap4_);
    function _ap5_(param){return caml_call2(_aE_,masked_tuple_id_num_bits,0)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[4],
      Inline_test_config,
      cst_masked_tuple_id_num_bits_0,
      0,
      cst_src_pool_ml$2,
      114,
      2,
      43,
      _ap5_);
    function _ap6_(param)
     {return caml_call2
              (_aB_,
               caml_call2(_ah_,_ap3_,masked_tuple_id_num_bits),
               num_bits$0)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[4],
      Inline_test_config,
      cst_array_index_num_bits_masked_tuple_id_num_b,
      0,
      cst_src_pool_ml$3,
      115,
      2,
      78,
      _ap6_);
    var max_array_length=caml_call2(_ax_,1,_ap3_);
    function invariant$7(t)
     {if(caml_call2(_aF_,t,0))return 0;throw [0,Assert_failure,_ap7_]}
    var init$11=0;
    function of_int$8(i)
     {if(caml_call2(_aA_,i,0))
       failwiths(0,_ap8_,cst_Tuple_id_of_int_got_negative_int,i,sexp_of_t$0);
      return i}
    var
     examples=[0,0,[0,1,[0,536870911,[0,max_value$7,0]]]],
     tuple_id_mask=
      caml_call2(_ai_,caml_call2(_ax_,1,masked_tuple_id_num_bits),1),
     Typename_of_t$25=caml_call1(Typerep_lib_Make_typename[2],[0,name$61]),
     _ap9_=Typename_of_t$25[2];
    function typerep_of_t$26(of_slots)
     {var name_of_t=caml_call1(Typename_of_t$25[1],of_slots);
      return [9,[0,name_of_t,[0,typerep_of_int]]]}
    function sexp_of_t$107(param,t){return [0,caml_call2(_eJ_,_ap__,t)]}
    function phys_equal$0(t1,t2){return t1 === t2?1:0}
    function null$0(param)
     {return caml_call2(_ai_,caml_call1(_al_,max_slot),1)}
    function is_null(t){return t === null$0(0)?1:0}
    function _ap$_(param)
     {return caml_call2(_aA_,caml_call2(_ah_,null$0(0),max_slot),0)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[4],
      Inline_test_config,
      cst_null_max_slot_0,
      0,
      cst_src_pool_ml$4,
      223,
      4,
      39,
      _ap$_);
    function create$39(header_index,tuple_id)
     {return caml_call2
              (_au_,
               header_index,
               caml_call2(_ax_,caml_call2(_at_,tuple_id,tuple_id_mask),_ap3_))}
    var header_index_mask=caml_call2(_ai_,caml_call2(_ax_,1,_ap3_),1);
    function masked_tuple_id(t){return caml_call2(_az_,t,_ap3_)}
    function header_index(t){return caml_call2(_at_,t,header_index_mask)}
    function invariant$8(param,t)
     {var _bmR_=1 - is_null(t);
      if(_bmR_)
       {if(caml_call2(_aE_,header_index(t),0))return 0;
        throw [0,Assert_failure,_aqa_]}
      return _bmR_}
    function _aqb_(param)
     {var _bmP_=null$0(0);return invariant$8(function(_bmQ_){return 0},_bmP_)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_invariant_ignore_null,
      0,
      cst_src_pool_ml$5,
      240,
      4,
      48,
      _aqb_);
    function _aqc_(param)
     {return caml_call2
              (iter$2,
               examples,
               function(tuple_id)
                {var _bmN_=create$39(1,tuple_id);
                 return invariant$8(function(_bmO_){return 0},_bmN_)})}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_List_iter_Tuple_id_examples_f_fun_tuple_i,
      0,
      cst_src_pool_ml$6,
      242,
      4,
      135,
      _aqc_);
    function slot_index(t,slot){return caml_call2(_ah_,header_index(t),slot)}
    function first_slot_index(t){return slot_index(t,Slot[3])}
    function to_int63(t){return t}
    function of_int63$0(i){return i}
    var
     _aqg_=
      [0,
       bin_t$37,
       bin_read_t$81,
       bin_read_t$82,
       bin_reader_t$37,
       bin_size_t$40,
       bin_write_t$40,
       bin_writer_t$37,
       bin_shape_t$42,
       t_of_sexp$38,
       sexp_of_t$49,
       to_int63,
       of_int63$0],
     null$1=0;
    function is_null$0(t){return caml_call2(_aD_,t,0)}
    function is_free(t){return caml_call2(_aE_,t,0)}
    function used(tuple_id){return caml_call2(_ai_,-1,tuple_id)}
    function is_used(t){return caml_call2(_aA_,t,0)}
    function tuple_id(t)
     {return of_int$8(caml_call1(_al_,caml_call2(_ah_,t,1)))}
    function _aqh_(param)
     {return caml_call2
              (iter$2,
               examples,
               function(id)
                {var t=used(id);
                 if(is_used(t))
                  {var t1=tuple_id(t);
                   if(caml_call2(_aD_,t1,id))return 0;
                   throw [0,Assert_failure,_aqi_]}
                 throw [0,Assert_failure,_aqj_]})}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_List_iter_Tuple_id_examples_f_fun_id,
      0,
      cst_src_pool_ml$7,
      317,
      4,
      173,
      _aqh_);
    var metadata_index=0,start_of_tuples_index=1;
    function max_capacity(slots_per_tuple)
     {var _bmM_=caml_call2(_ah_,1,slots_per_tuple);
      return caml_call2
              (_ak_,
               caml_call2(_ai_,max_array_length,start_of_tuples_index),
               _bmM_)}
    function _aqn_(param)
     {var slots_per_tuple=1;
      for(;;)
       {var _bmK_=max_capacity(slots_per_tuple);
        if
         (caml_call2
           (_aB_,
            caml_call2
             (_ah_,
              start_of_tuples_index,
              caml_call2(_aj_,caml_call2(_ah_,1,slots_per_tuple),_bmK_)),
            max_array_length))
         {var _bmL_=slots_per_tuple + 1 | 0;
          if(14 !== slots_per_tuple){var slots_per_tuple=_bmL_;continue}
          return 0}
        throw [0,Assert_failure,_aqo_]}}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_for_slots_per_tuple_1_to_max_slot_do_asse,
      0,
      cst_src_pool_ml$8,
      342,
      2,
      216,
      _aqn_);
    function dummy(r){return r[6]}
    function first_free(r){return r[5]}
    function set_first_free(r,v){r[5] = v;return 0}
    function next_id(r){return r[4]}
    function set_next_id(r,v){r[4] = v;return 0}
    function length$25(r){return r[3]}
    function set_length(r,v){r[3] = v;return 0}
    function capacity$0(r){return r[2]}
    function slots_per_tuple$0(r){return r[1]}
    function _aqp_(r,v){return [0,r[1],r[2],r[3],r[4],r[5],v]}
    var
     _aqq_=0,
     dummy$0=[0,[0,function(param){return 0},cst_dummy,_aqq_,dummy,_aqp_]];
    function _aqr_(r,v){return [0,r[1],r[2],r[3],r[4],v,r[6]]}
    var
     _aqs_=[0,set_first_free],
     first_free$0=
      [0,[0,function(param){return 0},cst_first_free,_aqs_,first_free,_aqr_]];
    function _aqt_(r,v){return [0,r[1],r[2],r[3],v,r[5],r[6]]}
    var
     _aqu_=[0,set_next_id],
     next_id$0=
      [0,[0,function(param){return 0},cst_next_id,_aqu_,next_id,_aqt_]];
    function _aqv_(r,v){return [0,r[1],r[2],v,r[4],r[5],r[6]]}
    var
     _aqw_=[0,set_length],
     length$26=
      [0,[0,function(param){return 0},cst_length,_aqw_,length$25,_aqv_]];
    function _aqx_(r,v){return [0,r[1],v,r[3],r[4],r[5],r[6]]}
    var
     _aqy_=0,
     capacity$1=
      [0,[0,function(param){return 0},cst_capacity,_aqy_,capacity$0,_aqx_]];
    function _aqz_(r,v){return [0,v,r[2],r[3],r[4],r[5],r[6]]}
    var
     _aqA_=0,
     slots_per_tuple$1=
      [0,
       [0,
        function(param){return 0},
        cst_slots_per_tuple,
        _aqA_,
        slots_per_tuple$0,
        _aqz_]];
    function iter$25
     (slots_per_tuple_fun,
      capacity_fun,
      length_fun,
      next_id_fun,
      first_free_fun,
      dummy_fun)
     {caml_call1(slots_per_tuple_fun,slots_per_tuple$1);
      caml_call1(capacity_fun,capacity$1);
      caml_call1(length_fun,length$26);
      caml_call1(next_id_fun,next_id$0);
      caml_call1(first_free_fun,first_free$0);
      return caml_call1(dummy_fun,dummy$0)}
    function array_indices_per_tuple(t){return caml_call2(_ah_,1,t[1])}
    function array_length(t)
     {var _bmJ_=array_indices_per_tuple(t);
      return caml_call2
              (_ah_,start_of_tuples_index,caml_call2(_aj_,t[2],_bmJ_))}
    function tuple_num_to_header_index(t,tuple_num)
     {return caml_call2
              (_ah_,
               start_of_tuples_index,
               caml_call2(_aj_,tuple_num,array_indices_per_tuple(t)))}
    function tuple_num_to_first_slot_index(t,tuple_num)
     {return caml_call2(_ah_,tuple_num_to_header_index(t,tuple_num),1)}
    function metadata(t)
     {return caml_call2(Base_Obj_array[15],t,metadata_index)}
    function length$27(t){return metadata(t)[3]}
    function sexp_of_t$108(sexp_of_ty,t)
     {var
       param=metadata(t),
       v_capacity=param[2],
       v_slots_per_tuple=param[1],
       v_length=param[3],
       v_next_id=param[4],
       v_first_free=param[5],
       v_dummy=param[6],
       arg=caml_call2(_R_,Sexplib0_Sexp_conv[23],v_dummy),
       bnds=[0,[1,[0,_aqB_,[0,arg,0]]],0],
       arg$0=
        is_null$0(v_first_free)
         ?_aqk_
         :is_free(v_first_free)
           ?[1,[0,_aql_,[0,[0,caml_call1(to_string$28,v_first_free)],0]]]
           :[1,
             [0,
              _aqm_,
              [0,[0,caml_call1(to_string$28,tuple_id(v_first_free))],0]]],
       bnds$0=[0,[1,[0,_aqC_,[0,arg$0,0]]],bnds],
       arg$1=caml_call1(sexp_of_t$0,v_next_id),
       bnds$1=[0,[1,[0,_aqD_,[0,arg$1,0]]],bnds$0],
       arg$2=caml_call1(sexp_of_t$0,v_length),
       bnds$2=[0,[1,[0,_aqE_,[0,arg$2,0]]],bnds$1],
       arg$3=caml_call1(sexp_of_t$0,v_capacity),
       bnds$3=[0,[1,[0,_aqF_,[0,arg$3,0]]],bnds$2],
       arg$4=caml_call1(sexp_of_t$0,v_slots_per_tuple),
       bnds$4=[0,[1,[0,_aqG_,[0,arg$4,0]]],bnds$3];
      return [1,bnds$4]}
    function unsafe_header(t,header_index)
     {return caml_call2(Base_Obj_array[15],t,header_index)}
    function unsafe_set_header(t,header_index,header)
     {return caml_call3(Base_Obj_array[19],t,header_index,header)}
    function header_index_is_in_bounds(t,header_index)
     {var _bmI_=caml_call2(_aF_,header_index,start_of_tuples_index);
      return _bmI_
              ?caml_call2(_aA_,header_index,caml_call1(Base_Obj_array[13],t))
              :_bmI_}
    function unsafe_pointer_is_live(t,pointer)
     {var
       header_index$0=header_index(pointer),
       header=unsafe_header(t,header_index$0),
       _bmG_=is_used(header);
      if(_bmG_)
       {var _bmH_=masked_tuple_id(pointer);
        return caml_call2
                (_aD_,caml_call2(_at_,tuple_id(header),tuple_id_mask),_bmH_)}
      return _bmG_}
    function pointer_is_valid(t,pointer)
     {var _bmF_=header_index_is_in_bounds(t,header_index(pointer));
      return _bmF_?unsafe_pointer_is_live(t,pointer):_bmF_}
    function id_of_pointer(t,pointer){return caml_call1(of_int$1,pointer)}
    function is_valid_header_index(t,header_index)
     {var
       metadata$0=metadata(t),
       _bmD_=header_index_is_in_bounds(t,header_index);
      if(_bmD_)
       {var _bmE_=array_indices_per_tuple(metadata$0);
        return caml_call2
                (_aD_,
                 0,
                 runtime.caml_mod
                  (caml_call2(_ai_,header_index,start_of_tuples_index),_bmE_))}
      return _bmD_}
    function pointer_of_id_exn(t$2,id)
     {try
       {try
         {var t=caml_call1(to_int_exn$2,id);
          if(is_null(t))
           var t$0=t;
          else
           {var
             _bmA_=of_int$8(masked_tuple_id(t)),
             should_equal=create$39(header_index(t),_bmA_);
            if(t === should_equal)
             var t$1=t;
            else
             var
              _bmB_=function(param){return _aqe_},
              t$1=
               failwiths
                (0,
                 _aqf_,
                 cst_should_equal,
                 should_equal,
                 function(_bmC_){return sexp_of_t$107(_bmB_,_bmC_)});
            var t$0=t$1}
          var pointer=t$0}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          var
           pointer=
            failwiths
             (0,
              _aqd_,
              cst_Pointer_of_id_exn_got_strange_id,
              [0,id,exn],
              function(param)
               {var
                 v1=param[2],
                 v0=param[1],
                 v0$0=caml_call1(sexp_of_t$49,v0),
                 v1$0=caml_call1(sexp_of_t,v1);
                return [1,[0,v0$0,[0,v1$0,0]]]})}
        if(1 - is_null(pointer))
         {var header_index$0=header_index(pointer);
          if(1 - is_valid_header_index(t$2,header_index$0))
           failwiths
            (0,_aqJ_,cst_invalid_header_index,header_index$0,sexp_of_t$0);
          if(1 - unsafe_pointer_is_live(t$2,pointer))
           caml_call1(_aV_,cst_pointer_not_live)}
        return pointer}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        return failwiths
                (0,
                 _aqI_,
                 cst_Pool_pointer_of_id_exn_got_invalid_id,
                 [0,id,t$2,exn],
                 function(param)
                  {var
                    v2=param[3],
                    v1=param[2],
                    v0=param[1],
                    v0$0=caml_call1(_aqg_[10],v0),
                    v1$0=sexp_of_t$108(function(param){return _aqH_},v1),
                    v2$0=caml_call1(sexp_of_t,v2);
                   return [1,[0,v0$0,[0,v1$0,[0,v2$0,0]]]]})}}
    function invariant$9(invariant_a,t)
     {try
       {var
         t$0=metadata(t),
         check=
          function(f,field)
           {return caml_call1(f,caml_call2(Base_Field[3],field,t$0))},
         _bl$_=
          function(param)
           {if(param)
             {var dummy=param[1],_bms_=t$0[1];
              if(caml_call2(_aD_,caml_call1(Base_Obj_array[13],dummy),_bms_))
               return 0;
              throw [0,Assert_failure,_aqM_]}
            var _bmu_=caml_call2(_ai_,t$0[2],1),_bmt_=0;
            if(! (_bmu_ < 0))
             {var tuple_num=_bmt_;
              for(;;)
               {var
                 header_index=tuple_num_to_header_index(t$0,tuple_num),
                 header=unsafe_header(t,header_index);
                if(is_free(header))
                 {var
                   first_slot=tuple_num_to_first_slot_index(t$0,tuple_num),
                   _bmw_=caml_call2(_ai_,t$0[1],1),
                   _bmv_=0;
                  if(! (_bmw_ < 0))
                   {var slot=_bmv_;
                    for(;;)
                     {var _bmy_=caml_call2(_ah_,first_slot,slot);
                      if
                       (typeof caml_call2(Base_Obj_array[14],t,_bmy_) !== "number")
                       throw [0,Assert_failure,_aqN_];
                      var _bmz_=slot + 1 | 0;
                      if(_bmw_ !== slot){var slot=_bmz_;continue}
                      break}}}
                var _bmx_=tuple_num + 1 | 0;
                if(_bmu_ !== tuple_num){var tuple_num=_bmx_;continue}
                break}}
            return 0},
         _bma_=function(_bmr_){return check(_bl$_,_bmr_)},
         _bmb_=
          function(first_free)
           {var free=caml_call2(create$0,t$0[2],0),r=[0,first_free];
            for(;;)
             {if(is_null$0(r[1]))return 0;
              var header=r[1];
              if(is_free(header))
               {if(is_valid_header_index(t,header))
                 {var
                   _bmq_=array_indices_per_tuple(t$0),
                   tuple_num=
                    caml_call2
                     (_ak_,caml_call2(_ai_,header,start_of_tuples_index),_bmq_);
                  if(caml_check_bound(free,tuple_num)[tuple_num + 1])
                   failwiths
                    (0,_aqO_,cst_cycle_in_free_list,tuple_num,sexp_of_t$0);
                  caml_check_bound(free,tuple_num)[tuple_num + 1] = 1;
                  r[1] = unsafe_header(t,header);
                  continue}
                throw [0,Assert_failure,_aqP_]}
              throw [0,Assert_failure,_aqQ_]}},
         _bmc_=function(_bmp_){return check(_bmb_,_bmp_)},
         _bmd_=function(_bmo_){return check(invariant$7,_bmo_)},
         _bme_=
          function(length)
           {if(caml_call2(_aF_,length,0))
             {if(caml_call2(_aB_,length,t$0[2]))return 0;
              throw [0,Assert_failure,_aqR_]}
            throw [0,Assert_failure,_aqS_]},
         _bmf_=function(_bmn_){return check(_bme_,_bmn_)},
         _bmg_=
          function(capacity)
           {if(caml_call2(_aF_,capacity,0))
             {var _bmm_=array_length(t$0);
              if(caml_call2(_aD_,caml_call1(Base_Obj_array[13],t),_bmm_))
               return 0;
              throw [0,Assert_failure,_aqT_]}
            throw [0,Assert_failure,_aqU_]},
         _bmh_=function(_bml_){return check(_bmg_,_bml_)},
         _bmi_=
          function(slots_per_tuple)
           {if(caml_call2(_aE_,slots_per_tuple,0))return 0;
            throw [0,Assert_failure,_aqV_]},
         _bmj_=
          iter$25
           (function(_bmk_){return check(_bmi_,_bmk_)},
            _bmh_,
            _bmf_,
            _bmd_,
            _bmc_,
            _bma_);
        return _bmj_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        return failwiths
                (0,
                 _aqL_,
                 cst_Pool_invariant_failed,
                 [0,exn,t],
                 function(param)
                  {var
                    v1=param[2],
                    v0=param[1],
                    v0$0=caml_call1(sexp_of_t,v0),
                    v1$0=sexp_of_t$108(function(param){return _aqK_},v1);
                   return [1,[0,v0$0,[0,v1$0,0]]]})}}
    function capacity$2(t){return metadata(t)[2]}
    function is_full(t)
     {var t$0=metadata(t);return caml_call2(_aD_,t$0[3],t$0[2])}
    function unsafe_add_to_free_list(t,metadata,header_index)
     {unsafe_set_header(t,header_index,metadata[5]);
      metadata[5] = header_index;
      return 0}
    function set_metadata(t,metadata)
     {return caml_call3(Base_Obj_array[16],t,metadata_index,metadata)}
    function create_array(metadata)
     {var _bl__=array_length(metadata),t=caml_call1(Base_Obj_array[9],_bl__);
      set_metadata(t,metadata);
      return t}
    function unsafe_init_range(t,metadata,lo,hi)
     {var _bl3_=metadata[6];
      if(_bl3_)
       {var dummy=_bl3_[1],_bl4_=caml_call2(_ai_,hi,1);
        if(! (_bl4_ < lo))
         {var tuple_num$0=lo;
          for(;;)
           {var
             _bl7_=metadata[1],
             _bl8_=tuple_num_to_first_slot_index(metadata,tuple_num$0);
            caml_call5(Base_Obj_array[2],dummy,0,t,_bl8_,_bl7_);
            var _bl9_=tuple_num$0 + 1 | 0;
            if(_bl4_ !== tuple_num$0){var tuple_num$0=_bl9_;continue}
            break}}}
      var _bl5_=caml_call2(_ai_,hi,1);
      if(! (_bl5_ < lo))
       {var tuple_num=_bl5_;
        for(;;)
         {unsafe_add_to_free_list
           (t,metadata,tuple_num_to_header_index(metadata,tuple_num));
          var _bl6_=tuple_num - 1 | 0;
          if(lo !== tuple_num){var tuple_num=_bl6_;continue}
          break}}
      return 0}
    function create_with_dummy(slots,capacity,dummy)
     {if(caml_call2(_aA_,capacity,0))
       failwiths
        (0,_aqW_,cst_Pool_create_got_invalid_capacity,capacity,sexp_of_t$0);
      var
       slots_per_tuple=caml_call1(_apH_[2],slots),
       max_capacity$0=max_capacity(slots_per_tuple);
      if(caml_call2(_aE_,capacity,max_capacity$0))
       failwiths
        (0,
         _aqY_,
         cst_Pool_create_got_too_large_capacity,
         [0,capacity,[0,5442212,max_capacity$0]],
         function(param)
          {var
            v1=param[2],
            v0=param[1],
            v0$0=caml_call1(sexp_of_t$0,v0),
            v0$1=v1[2],
            v1$0=[1,[0,_aqX_,[0,caml_call1(sexp_of_t$0,v0$1),0]]];
           return [1,[0,v0$0,[0,v1$0,0]]]});
      var
       metadata=[0,slots_per_tuple,capacity,0,init$11,null$1,dummy],
       t=create_array(metadata);
      unsafe_init_range(t,metadata,0,capacity);
      return t}
    function create$40(slots,capacity,dummy)
     {var
       dummy$0=
        caml_call2(_aD_,caml_call1(_apH_[2],slots),1)
         ?caml_call1(Base_Obj_array[11],dummy)
         :dummy;
      return create_with_dummy(slots,capacity,[0,dummy$0])}
    function grow(capacity$0,t)
     {var
       match=metadata(t),
       old_capacity=match[2],
       slots_per_tuple=match[1],
       length=match[3],
       next_id=match[4],
       dummy=match[6];
      if(capacity$0)
       {var capacity=capacity$0[1];
        if(caml_call2(_aB_,capacity,old_capacity))
         failwiths
          (0,
           _ap1_,
           cst_Pool_grow_got_too_small_capacity,
           [0,[0,-1011154630,capacity],[0,138253074,old_capacity]],
           function(param)
            {var
              v1=param[2],
              v0=param[1],
              v0$0=v0[2],
              v0$1=[1,[0,_apZ_,[0,caml_call1(sexp_of_t$0,v0$0),0]]],
              v0$2=v1[2],
              v1$0=[1,[0,_ap0_,[0,caml_call1(sexp_of_t$0,v0$2),0]]];
             return [1,[0,v0$1,[0,v1$0,0]]]});
        var _blZ_=capacity}
      else
       var
        _blZ_=
         caml_call2(_aD_,old_capacity,0)?1:caml_call2(_aj_,old_capacity,2);
      var capacity$1=caml_call2(_aL_,max_capacity(slots_per_tuple),_blZ_);
      if(caml_call2(_aD_,capacity$1,old_capacity))
       failwiths
        (0,
         _aqZ_,
         cst_Pool_grow_cannot_grow_pool_capacity_already_at_maximum,
         capacity$1,
         sexp_of_t$0);
      var
       metadata$2=[0,slots_per_tuple,capacity$1,length,next_id,null$1,dummy],
       t$0=create_array(metadata$2),
       _bl0_=caml_call2(_aj_,old_capacity,array_indices_per_tuple(metadata$2));
      caml_call5
       (Base_Obj_array[2],
        t,
        start_of_tuples_index,
        t$0,
        start_of_tuples_index,
        _bl0_);
      var
       metadata$0=metadata(t),
       metadata$1=[0,metadata$0[1],0,0,metadata$0[4],null$1,metadata$0[6]];
      set_metadata(t,metadata$1);
      caml_call2(Base_Obj_array[23],t,1);
      unsafe_init_range(t$0,metadata$2,old_capacity,capacity$1);
      var _bl1_=caml_call2(_ai_,old_capacity,1);
      if(! (_bl1_ < 0))
       {var tuple_num=_bl1_;
        for(;;)
         {var
           header_index=tuple_num_to_header_index(metadata$2,tuple_num),
           header=unsafe_header(t$0,header_index);
          if(1 - is_used(header))
           unsafe_add_to_free_list(t$0,metadata$2,header_index);
          var _bl2_=tuple_num - 1 | 0;
          if(0 !== tuple_num){var tuple_num=_bl2_;continue}
          break}}
      return t$0}
    function malloc(t)
     {var metadata$0=metadata(t),first_free=metadata$0[5];
      if(is_null$0(first_free))
       {var _blW_=function(param){return _aq0_};
        failwiths
         (0,
          _aq1_,
          cst_Pool_malloc_of_full_pool,
          t,
          function(_blY_){return sexp_of_t$108(_blW_,_blY_)})}
      metadata$0[5] = unsafe_header(t,first_free);
      metadata$0[3] = caml_call2(_ah_,metadata$0[3],1);
      var tuple_id=metadata$0[4];
      unsafe_set_header(t,first_free,used(tuple_id));
      var
       _blX_=
        arch_sixtyfour$1
         ?caml_call2(_ah_,tuple_id,1)
         :caml_call2(_aD_,tuple_id,max_value$7)?0:caml_call2(_ah_,tuple_id,1);
      metadata$0[4] = _blX_;
      return create$39(first_free,tuple_id)}
    function unsafe_free(t,pointer)
     {var metadata$0=metadata(t);
      metadata$0[3] = caml_call2(_ai_,metadata$0[3],1);
      unsafe_add_to_free_list(t,metadata$0,header_index(pointer));
      var _blP_=metadata$0[6];
      if(_blP_)
       {var
         dummy=_blP_[1],
         _blQ_=metadata$0[1],
         _blR_=first_slot_index(pointer);
        return caml_call5(Base_Obj_array[4],dummy,0,t,_blR_,_blQ_)}
      var
       pos=first_slot_index(pointer),
       _blT_=caml_call2(_ai_,metadata$0[1],1),
       _blS_=0;
      if(! (_blT_ < 0))
       {var i=_blS_;
        for(;;)
         {var _blU_=caml_call2(_ah_,pos,i);
          caml_call2(Base_Obj_array[22],t,_blU_);
          var _blV_=i + 1 | 0;
          if(_blT_ !== i){var i=_blV_;continue}
          break}}
      return 0}
    function free(t,pointer)
     {if(1 - pointer_is_valid(t,pointer))
       failwiths
        (0,
         _aq4_,
         cst_Pool_free_of_invalid_pointer,
         [0,pointer,t],
         function(param)
          {var
            v1=param[2],
            v0=param[1],
            v0$0=sexp_of_t$107(function(param){return _aq2_},v0),
            v1$0=sexp_of_t$108(function(param){return _aq3_},v1);
           return [1,[0,v0$0,[0,v1$0,0]]]});
      return unsafe_free(t,pointer)}
    function new1(t,a0)
     {var
       pointer=malloc(t),
       offset=header_index(pointer),
       _blO_=caml_call2(_ah_,offset,1);
      caml_call3(Base_Obj_array[17],t,_blO_,a0);
      return pointer}
    function new2(t,a0,a1)
     {var
       pointer=malloc(t),
       offset=header_index(pointer),
       _blM_=caml_call2(_ah_,offset,1);
      caml_call3(Base_Obj_array[17],t,_blM_,a0);
      var _blN_=caml_call2(_ah_,offset,2);
      caml_call3(Base_Obj_array[17],t,_blN_,a1);
      return pointer}
    function new3(t,a0,a1,a2)
     {var
       pointer=malloc(t),
       offset=header_index(pointer),
       _blJ_=caml_call2(_ah_,offset,1);
      caml_call3(Base_Obj_array[17],t,_blJ_,a0);
      var _blK_=caml_call2(_ah_,offset,2);
      caml_call3(Base_Obj_array[17],t,_blK_,a1);
      var _blL_=caml_call2(_ah_,offset,3);
      caml_call3(Base_Obj_array[17],t,_blL_,a2);
      return pointer}
    function new4(t,a0,a1,a2,a3)
     {var
       pointer=malloc(t),
       offset=header_index(pointer),
       _blF_=caml_call2(_ah_,offset,1);
      caml_call3(Base_Obj_array[17],t,_blF_,a0);
      var _blG_=caml_call2(_ah_,offset,2);
      caml_call3(Base_Obj_array[17],t,_blG_,a1);
      var _blH_=caml_call2(_ah_,offset,3);
      caml_call3(Base_Obj_array[17],t,_blH_,a2);
      var _blI_=caml_call2(_ah_,offset,4);
      caml_call3(Base_Obj_array[17],t,_blI_,a3);
      return pointer}
    function new5(t,a0,a1,a2,a3,a4)
     {var
       pointer=malloc(t),
       offset=header_index(pointer),
       _blA_=caml_call2(_ah_,offset,1);
      caml_call3(Base_Obj_array[17],t,_blA_,a0);
      var _blB_=caml_call2(_ah_,offset,2);
      caml_call3(Base_Obj_array[17],t,_blB_,a1);
      var _blC_=caml_call2(_ah_,offset,3);
      caml_call3(Base_Obj_array[17],t,_blC_,a2);
      var _blD_=caml_call2(_ah_,offset,4);
      caml_call3(Base_Obj_array[17],t,_blD_,a3);
      var _blE_=caml_call2(_ah_,offset,5);
      caml_call3(Base_Obj_array[17],t,_blE_,a4);
      return pointer}
    function new6(t,a0,a1,a2,a3,a4,a5)
     {var
       pointer=malloc(t),
       offset=header_index(pointer),
       _blu_=caml_call2(_ah_,offset,1);
      caml_call3(Base_Obj_array[17],t,_blu_,a0);
      var _blv_=caml_call2(_ah_,offset,2);
      caml_call3(Base_Obj_array[17],t,_blv_,a1);
      var _blw_=caml_call2(_ah_,offset,3);
      caml_call3(Base_Obj_array[17],t,_blw_,a2);
      var _blx_=caml_call2(_ah_,offset,4);
      caml_call3(Base_Obj_array[17],t,_blx_,a3);
      var _bly_=caml_call2(_ah_,offset,5);
      caml_call3(Base_Obj_array[17],t,_bly_,a4);
      var _blz_=caml_call2(_ah_,offset,6);
      caml_call3(Base_Obj_array[17],t,_blz_,a5);
      return pointer}
    function new7(t,a0,a1,a2,a3,a4,a5,a6)
     {var
       pointer=malloc(t),
       offset=header_index(pointer),
       _bln_=caml_call2(_ah_,offset,1);
      caml_call3(Base_Obj_array[17],t,_bln_,a0);
      var _blo_=caml_call2(_ah_,offset,2);
      caml_call3(Base_Obj_array[17],t,_blo_,a1);
      var _blp_=caml_call2(_ah_,offset,3);
      caml_call3(Base_Obj_array[17],t,_blp_,a2);
      var _blq_=caml_call2(_ah_,offset,4);
      caml_call3(Base_Obj_array[17],t,_blq_,a3);
      var _blr_=caml_call2(_ah_,offset,5);
      caml_call3(Base_Obj_array[17],t,_blr_,a4);
      var _bls_=caml_call2(_ah_,offset,6);
      caml_call3(Base_Obj_array[17],t,_bls_,a5);
      var _blt_=caml_call2(_ah_,offset,7);
      caml_call3(Base_Obj_array[17],t,_blt_,a6);
      return pointer}
    function new8(t,a0,a1,a2,a3,a4,a5,a6,a7)
     {var
       pointer=malloc(t),
       offset=header_index(pointer),
       _blf_=caml_call2(_ah_,offset,1);
      caml_call3(Base_Obj_array[17],t,_blf_,a0);
      var _blg_=caml_call2(_ah_,offset,2);
      caml_call3(Base_Obj_array[17],t,_blg_,a1);
      var _blh_=caml_call2(_ah_,offset,3);
      caml_call3(Base_Obj_array[17],t,_blh_,a2);
      var _bli_=caml_call2(_ah_,offset,4);
      caml_call3(Base_Obj_array[17],t,_bli_,a3);
      var _blj_=caml_call2(_ah_,offset,5);
      caml_call3(Base_Obj_array[17],t,_blj_,a4);
      var _blk_=caml_call2(_ah_,offset,6);
      caml_call3(Base_Obj_array[17],t,_blk_,a5);
      var _bll_=caml_call2(_ah_,offset,7);
      caml_call3(Base_Obj_array[17],t,_bll_,a6);
      var _blm_=caml_call2(_ah_,offset,8);
      caml_call3(Base_Obj_array[17],t,_blm_,a7);
      return pointer}
    function new9(t,a0,a1,a2,a3,a4,a5,a6,a7,a8)
     {var
       pointer=malloc(t),
       offset=header_index(pointer),
       _bk8_=caml_call2(_ah_,offset,1);
      caml_call3(Base_Obj_array[17],t,_bk8_,a0);
      var _bk9_=caml_call2(_ah_,offset,2);
      caml_call3(Base_Obj_array[17],t,_bk9_,a1);
      var _bk__=caml_call2(_ah_,offset,3);
      caml_call3(Base_Obj_array[17],t,_bk__,a2);
      var _bk$_=caml_call2(_ah_,offset,4);
      caml_call3(Base_Obj_array[17],t,_bk$_,a3);
      var _bla_=caml_call2(_ah_,offset,5);
      caml_call3(Base_Obj_array[17],t,_bla_,a4);
      var _blb_=caml_call2(_ah_,offset,6);
      caml_call3(Base_Obj_array[17],t,_blb_,a5);
      var _blc_=caml_call2(_ah_,offset,7);
      caml_call3(Base_Obj_array[17],t,_blc_,a6);
      var _bld_=caml_call2(_ah_,offset,8);
      caml_call3(Base_Obj_array[17],t,_bld_,a7);
      var _ble_=caml_call2(_ah_,offset,9);
      caml_call3(Base_Obj_array[17],t,_ble_,a8);
      return pointer}
    function new10(t,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9)
     {var
       pointer=malloc(t),
       offset=header_index(pointer),
       _bkY_=caml_call2(_ah_,offset,1);
      caml_call3(Base_Obj_array[17],t,_bkY_,a0);
      var _bkZ_=caml_call2(_ah_,offset,2);
      caml_call3(Base_Obj_array[17],t,_bkZ_,a1);
      var _bk0_=caml_call2(_ah_,offset,3);
      caml_call3(Base_Obj_array[17],t,_bk0_,a2);
      var _bk1_=caml_call2(_ah_,offset,4);
      caml_call3(Base_Obj_array[17],t,_bk1_,a3);
      var _bk2_=caml_call2(_ah_,offset,5);
      caml_call3(Base_Obj_array[17],t,_bk2_,a4);
      var _bk3_=caml_call2(_ah_,offset,6);
      caml_call3(Base_Obj_array[17],t,_bk3_,a5);
      var _bk4_=caml_call2(_ah_,offset,7);
      caml_call3(Base_Obj_array[17],t,_bk4_,a6);
      var _bk5_=caml_call2(_ah_,offset,8);
      caml_call3(Base_Obj_array[17],t,_bk5_,a7);
      var _bk6_=caml_call2(_ah_,offset,9);
      caml_call3(Base_Obj_array[17],t,_bk6_,a8);
      var _bk7_=caml_call2(_ah_,offset,10);
      caml_call3(Base_Obj_array[17],t,_bk7_,a9);
      return pointer}
    function new11(t,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)
     {var
       pointer=malloc(t),
       offset=header_index(pointer),
       _bkN_=caml_call2(_ah_,offset,1);
      caml_call3(Base_Obj_array[17],t,_bkN_,a0);
      var _bkO_=caml_call2(_ah_,offset,2);
      caml_call3(Base_Obj_array[17],t,_bkO_,a1);
      var _bkP_=caml_call2(_ah_,offset,3);
      caml_call3(Base_Obj_array[17],t,_bkP_,a2);
      var _bkQ_=caml_call2(_ah_,offset,4);
      caml_call3(Base_Obj_array[17],t,_bkQ_,a3);
      var _bkR_=caml_call2(_ah_,offset,5);
      caml_call3(Base_Obj_array[17],t,_bkR_,a4);
      var _bkS_=caml_call2(_ah_,offset,6);
      caml_call3(Base_Obj_array[17],t,_bkS_,a5);
      var _bkT_=caml_call2(_ah_,offset,7);
      caml_call3(Base_Obj_array[17],t,_bkT_,a6);
      var _bkU_=caml_call2(_ah_,offset,8);
      caml_call3(Base_Obj_array[17],t,_bkU_,a7);
      var _bkV_=caml_call2(_ah_,offset,9);
      caml_call3(Base_Obj_array[17],t,_bkV_,a8);
      var _bkW_=caml_call2(_ah_,offset,10);
      caml_call3(Base_Obj_array[17],t,_bkW_,a9);
      var _bkX_=caml_call2(_ah_,offset,11);
      caml_call3(Base_Obj_array[17],t,_bkX_,a10);
      return pointer}
    function new12(t,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11)
     {var
       pointer=malloc(t),
       offset=header_index(pointer),
       _bkB_=caml_call2(_ah_,offset,1);
      caml_call3(Base_Obj_array[17],t,_bkB_,a0);
      var _bkC_=caml_call2(_ah_,offset,2);
      caml_call3(Base_Obj_array[17],t,_bkC_,a1);
      var _bkD_=caml_call2(_ah_,offset,3);
      caml_call3(Base_Obj_array[17],t,_bkD_,a2);
      var _bkE_=caml_call2(_ah_,offset,4);
      caml_call3(Base_Obj_array[17],t,_bkE_,a3);
      var _bkF_=caml_call2(_ah_,offset,5);
      caml_call3(Base_Obj_array[17],t,_bkF_,a4);
      var _bkG_=caml_call2(_ah_,offset,6);
      caml_call3(Base_Obj_array[17],t,_bkG_,a5);
      var _bkH_=caml_call2(_ah_,offset,7);
      caml_call3(Base_Obj_array[17],t,_bkH_,a6);
      var _bkI_=caml_call2(_ah_,offset,8);
      caml_call3(Base_Obj_array[17],t,_bkI_,a7);
      var _bkJ_=caml_call2(_ah_,offset,9);
      caml_call3(Base_Obj_array[17],t,_bkJ_,a8);
      var _bkK_=caml_call2(_ah_,offset,10);
      caml_call3(Base_Obj_array[17],t,_bkK_,a9);
      var _bkL_=caml_call2(_ah_,offset,11);
      caml_call3(Base_Obj_array[17],t,_bkL_,a10);
      var _bkM_=caml_call2(_ah_,offset,12);
      caml_call3(Base_Obj_array[17],t,_bkM_,a11);
      return pointer}
    function new13(t,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12)
     {var
       pointer=malloc(t),
       offset=header_index(pointer),
       _bko_=caml_call2(_ah_,offset,1);
      caml_call3(Base_Obj_array[17],t,_bko_,a0);
      var _bkp_=caml_call2(_ah_,offset,2);
      caml_call3(Base_Obj_array[17],t,_bkp_,a1);
      var _bkq_=caml_call2(_ah_,offset,3);
      caml_call3(Base_Obj_array[17],t,_bkq_,a2);
      var _bkr_=caml_call2(_ah_,offset,4);
      caml_call3(Base_Obj_array[17],t,_bkr_,a3);
      var _bks_=caml_call2(_ah_,offset,5);
      caml_call3(Base_Obj_array[17],t,_bks_,a4);
      var _bkt_=caml_call2(_ah_,offset,6);
      caml_call3(Base_Obj_array[17],t,_bkt_,a5);
      var _bku_=caml_call2(_ah_,offset,7);
      caml_call3(Base_Obj_array[17],t,_bku_,a6);
      var _bkv_=caml_call2(_ah_,offset,8);
      caml_call3(Base_Obj_array[17],t,_bkv_,a7);
      var _bkw_=caml_call2(_ah_,offset,9);
      caml_call3(Base_Obj_array[17],t,_bkw_,a8);
      var _bkx_=caml_call2(_ah_,offset,10);
      caml_call3(Base_Obj_array[17],t,_bkx_,a9);
      var _bky_=caml_call2(_ah_,offset,11);
      caml_call3(Base_Obj_array[17],t,_bky_,a10);
      var _bkz_=caml_call2(_ah_,offset,12);
      caml_call3(Base_Obj_array[17],t,_bkz_,a11);
      var _bkA_=caml_call2(_ah_,offset,13);
      caml_call3(Base_Obj_array[17],t,_bkA_,a12);
      return pointer}
    function new14(t,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13)
     {var
       pointer=malloc(t),
       offset=header_index(pointer),
       _bka_=caml_call2(_ah_,offset,1);
      caml_call3(Base_Obj_array[17],t,_bka_,a0);
      var _bkb_=caml_call2(_ah_,offset,2);
      caml_call3(Base_Obj_array[17],t,_bkb_,a1);
      var _bkc_=caml_call2(_ah_,offset,3);
      caml_call3(Base_Obj_array[17],t,_bkc_,a2);
      var _bkd_=caml_call2(_ah_,offset,4);
      caml_call3(Base_Obj_array[17],t,_bkd_,a3);
      var _bke_=caml_call2(_ah_,offset,5);
      caml_call3(Base_Obj_array[17],t,_bke_,a4);
      var _bkf_=caml_call2(_ah_,offset,6);
      caml_call3(Base_Obj_array[17],t,_bkf_,a5);
      var _bkg_=caml_call2(_ah_,offset,7);
      caml_call3(Base_Obj_array[17],t,_bkg_,a6);
      var _bkh_=caml_call2(_ah_,offset,8);
      caml_call3(Base_Obj_array[17],t,_bkh_,a7);
      var _bki_=caml_call2(_ah_,offset,9);
      caml_call3(Base_Obj_array[17],t,_bki_,a8);
      var _bkj_=caml_call2(_ah_,offset,10);
      caml_call3(Base_Obj_array[17],t,_bkj_,a9);
      var _bkk_=caml_call2(_ah_,offset,11);
      caml_call3(Base_Obj_array[17],t,_bkk_,a10);
      var _bkl_=caml_call2(_ah_,offset,12);
      caml_call3(Base_Obj_array[17],t,_bkl_,a11);
      var _bkm_=caml_call2(_ah_,offset,13);
      caml_call3(Base_Obj_array[17],t,_bkm_,a12);
      var _bkn_=caml_call2(_ah_,offset,14);
      caml_call3(Base_Obj_array[17],t,_bkn_,a13);
      return pointer}
    function get$10(t,p,slot)
     {var _bj$_=slot_index(p,slot);
      return caml_call2(Base_Obj_array[14],t,_bj$_)}
    function unsafe_get$0(t,p,slot)
     {var _bj__=slot_index(p,slot);
      return caml_call2(Base_Obj_array[15],t,_bj__)}
    function set$15(t,p,slot,x)
     {var _bj9_=slot_index(p,slot);
      return caml_call3(Base_Obj_array[16],t,_bj9_,x)}
    function unsafe_set$0(t,p,slot,x)
     {var _bj8_=slot_index(p,slot);
      return caml_call3(Base_Obj_array[17],t,_bj8_,x)}
    function get_tuple(t,pointer)
     {var metadata$0=metadata(t),len=metadata$0[1];
      if(caml_call2(_aD_,len,1))return get$10(t,pointer,Slot[3]);
      var _bj7_=first_slot_index(pointer);
      return caml_call3(Base_Obj_array[5],t,_bj7_,len)}
    function create$41(slots,capacity)
     {return create_with_dummy(slots,capacity,0)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$412);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    function _art_(Pool)
     {var Slots=Pool[1],Slot=Pool[2];
      function sexp_of_t(of_slots,param)
       {var
         v_is_valid=param[1],
         v_pointer=param[2],
         arg=caml_call2(Pool[3][1],of_slots,v_pointer),
         bnds=[0,[1,[0,_arp_,[0,arg,0]]],0],
         arg$0=caml_call1(_i_,v_is_valid),
         bnds$0=[0,[1,[0,_arq_,[0,arg$0,0]]],bnds];
        return [1,bnds$0]}
      var
       Typename_of_t=caml_call1(Typerep_lib_Make_typename[2],[0,name$63]),
       typename_of_t=Typename_of_t[2];
      function typerep_of_t(of_slots)
       {var name_of_t=caml_call1(Typename_of_t[1],of_slots);
        return [9,
                [0,
                 name_of_t,
                 [0,
                  [246,
                   function(_bjZ_)
                    {var _bj0_=1;
                     function _bj1_(t){return t[1]}
                     var
                      _bj2_=
                       [0,
                        cst_is_valid,
                        typerep_of_bool,
                        0,
                        caml_call2(Typerep_lib_Typename[1],0,0),
                        _bj1_,
                        _bj0_],
                      field0=caml_call1(include$26[1][8][7],_bj2_),
                      _bj3_=0;
                     function _bj4_(t){return t[2]}
                     var
                      _bj5_=caml_call2(Typerep_lib_Typename[1],0,0),
                      _bj6_=
                       [0,
                        cst_pointer,
                        caml_call1(Pool[3][2],of_slots),
                        1,
                        _bj5_,
                        _bj4_,
                        _bj3_],
                      field1=caml_call1(include$26[1][8][7],_bj6_),
                      typename=caml_call1(include$26[1][1][2],name_of_t),
                      has_double_array_tag=
                       caml_call1
                        (Typerep_lib_Typerep_obj[4],
                         [0,Typerep_lib_Typerep_obj[3],Typerep_lib_Typerep_obj[3]]),
                      fields=[0,[0,field0],[0,field1]];
                     function create(param)
                      {var
                        get=param[1],
                        is_valid=caml_call1(get,field0),
                        pointer=caml_call1(get,field1);
                       return [0,is_valid,pointer]}
                     return [7,
                             caml_call1
                              (include$26[1][10][7],
                               [0,typename,fields,has_double_array_tag,create])]}]]]]}
      function create(pointer){return [0,1,pointer]}
      function null$0(param){return [0,0,caml_call1(Pool[3][4],0)]}
      function phys_compare(t1,t2){return caml_call2(Pool[3][6],t1[2],t2[2])}
      function phys_equal(t1,t2){return caml_call2(Pool[3][7],t1[2],t2[2])}
      function is_null(t){return caml_call1(Pool[3][5],t[2])}
      function follow(t)
       {if(1 - t[1])
         {var _bjX_=function(param){return _arr_};
          failwiths
           (0,
            _ars_,
            cst_attempt_to_use_invalid_pointer,
            t,
            function(_bjY_){return sexp_of_t(_bjX_,_bjY_)})}
        return t[2]}
      function invalidate(t){t[1] = 0;return 0}
      var Id=Pool[3][8],sexp_of_t$0=Pool[4],invariant=Pool[5],length=Pool[12];
      function pointer_is_valid(t,param)
       {var is_valid=param[1],pointer=param[2];
        return is_valid?caml_call2(Pool[6],t,pointer):is_valid}
      function id_of_pointer(t,pointer)
       {return caml_call2(Pool[7],t,pointer[2])}
      function pointer_of_id_exn(t,id)
       {var
         pointer=caml_call2(Pool[8],t,id),
         is_valid=caml_call2(Pool[6],t,pointer);
        return [0,is_valid,pointer]}
      var
       create$0=Pool[9],
       capacity=Pool[11],
       max_capacity=Pool[10],
       grow=Pool[13],
       is_full=Pool[14];
      function get_tuple(t,p)
       {var _bjW_=follow(p);return caml_call2(Pool[31],t,_bjW_)}
      function get(t,p)
       {var _bjV_=follow(p);return caml_call2(Pool[32],t,_bjV_)}
      function unsafe_get(t,p)
       {var _bjU_=follow(p);return caml_call2(Pool[33],t,_bjU_)}
      function set(t,p,slot,v)
       {var _bjT_=follow(p);return caml_call4(Pool[34],t,_bjT_,slot,v)}
      function unsafe_set(t,p,slot,v)
       {var _bjS_=follow(p);return caml_call4(Pool[35],t,_bjS_,slot,v)}
      function unsafe_free(t,p)
       {var _bjR_=follow(p);caml_call2(Pool[16],t,_bjR_);return invalidate(p)}
      function free(t,p)
       {var _bjQ_=follow(p);caml_call2(Pool[15],t,_bjQ_);return invalidate(p)}
      function new1(t,a0){return create(caml_call2(Pool[17],t,a0))}
      function new2(t,a0,a1){return create(caml_call3(Pool[18],t,a0,a1))}
      function new3(t,a0,a1,a2)
       {return create(caml_call4(Pool[19],t,a0,a1,a2))}
      function new4(t,a0,a1,a2,a3)
       {return create(caml_call5(Pool[20],t,a0,a1,a2,a3))}
      function new5(t,a0,a1,a2,a3,a4)
       {return create(caml_call6(Pool[21],t,a0,a1,a2,a3,a4))}
      function new6(t,a0,a1,a2,a3,a4,a5)
       {return create(caml_call7(Pool[22],t,a0,a1,a2,a3,a4,a5))}
      function new7(t,a0,a1,a2,a3,a4,a5,a6)
       {return create(caml_call8(Pool[23],t,a0,a1,a2,a3,a4,a5,a6))}
      function new8(t,a0,a1,a2,a3,a4,a5,a6,a7)
       {return create(caml_call9(Pool[24],t,a0,a1,a2,a3,a4,a5,a6,a7))}
      function new9(t,a0,a1,a2,a3,a4,a5,a6,a7,a8)
       {return create(caml_call10(Pool[25],t,a0,a1,a2,a3,a4,a5,a6,a7,a8))}
      function new10(t,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9)
       {return create(caml_call11(Pool[26],t,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9))}
      function new11(t,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)
       {return create
                (caml_call12(Pool[27],t,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10))}
      function new12(t,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11)
       {return create
                (caml_call13(Pool[28],t,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11))}
      function new13(t,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12)
       {return create
                (caml_call14
                  (Pool[29],t,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12))}
      function new14(t,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13)
       {return create
                (caml_call15
                  (Pool[30],t,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13))}
      return [0,
              Slots,
              Slot,
              [0,
               sexp_of_t,
               typerep_of_t,
               typename_of_t,
               null$0,
               is_null,
               phys_compare,
               phys_equal,
               Id],
              sexp_of_t$0,
              invariant,
              pointer_is_valid,
              id_of_pointer,
              pointer_of_id_exn,
              create$0,
              max_capacity,
              capacity,
              length,
              grow,
              is_full,
              free,
              unsafe_free,
              new1,
              new2,
              new3,
              new4,
              new5,
              new6,
              new7,
              new8,
              new9,
              new10,
              new11,
              new12,
              new13,
              new14,
              get_tuple,
              get,
              unsafe_get,
              set,
              unsafe_set]}
    var
     _aru_=
      [0,
       _apH_,
       Slot,
       [0,
        sexp_of_t$107,
        typerep_of_t$26,
        _ap9_,
        null$0,
        is_null,
        _aI_,
        phys_equal$0,
        _aqg_],
       sexp_of_t$108,
       invariant$9,
       pointer_is_valid,
       id_of_pointer,
       pointer_of_id_exn,
       max_capacity,
       capacity$2,
       length$27,
       grow,
       is_full,
       free,
       unsafe_free,
       new1,
       new2,
       new3,
       new4,
       new5,
       new6,
       new7,
       new8,
       new9,
       new10,
       new11,
       new12,
       new13,
       new14,
       get_tuple,
       get$10,
       unsafe_get$0,
       set$15,
       unsafe_set$0,
       create$41],
     _arv_=
      [0,
       sexp_of_t$107,
       typerep_of_t$26,
       _ap9_,
       null$0,
       is_null,
       _aI_,
       phys_equal$0,
       _aqg_],
     Core_kernel_Pool=
      [0,
       Tuple_type,
       _apH_,
       Slot,
       _arv_,
       sexp_of_t$108,
       invariant$9,
       pointer_is_valid,
       id_of_pointer,
       pointer_of_id_exn,
       create$40,
       max_capacity,
       capacity$2,
       length$27,
       grow,
       is_full,
       free,
       unsafe_free,
       new1,
       new2,
       new3,
       new4,
       new5,
       new6,
       new7,
       new8,
       new9,
       new10,
       new11,
       new12,
       new13,
       new14,
       get_tuple,
       get$10,
       unsafe_get$0,
       set$15,
       unsafe_set$0,
       _aru_,
       function(Pool)
        {var check_invariant=[0,1],show_messages=[0,1];
         function debug(name,ts,arg,sexp_of_arg,sexp_of_result,f)
          {if(check_invariant[1])
            {var _bjN_=function(_bjP_){return 0};
             caml_call2(iter$2,ts,caml_call1(Pool[5],_bjN_))}
           if(show_messages[1])
            eprints(concat$3([0,prefix,[0,name,0]]),arg,sexp_of_arg);
           var result_or_exn=caml_call1(_hu_,f);
           if(show_messages[1])
            {var _bjO_=caml_call2(_gZ_,sexp_of_result,sexp_of_t);
             eprints(concat$3([0,prefix,[0,name,_aq5_]]),result_or_exn,_bjO_)}
           return caml_call1(_hh_,result_or_exn)}
         var
          Slots=Pool[1],
          Slot=Pool[2],
          sexp_of_t$1=Pool[3][1],
          Typename_of_t=caml_call1(Typerep_lib_Make_typename[2],[0,name$62]),
          _bjo_=Typename_of_t[2];
         function typerep_of_t(of_slots)
          {var name_of_t=caml_call1(Typename_of_t[1],of_slots);
           return [9,
                   [0,
                    name_of_t,
                    [0,
                     [246,
                      function(_bjM_){return caml_call1(Pool[3][2],of_slots)}]]]]}
         function phys_compare(t1,t2)
          {function _bjL_(param){return caml_call2(Pool[3][6],t1,t2)}
           return debug
                   (cst_Pointer_phys_compare,
                    0,
                    [0,t1,t2],
                    function(param)
                     {var
                       v1=param[2],
                       v0=param[1],
                       v0$0=
                        caml_call2(sexp_of_t$1,function(param){return _aq6_},v0),
                       v1$0=
                        caml_call2(sexp_of_t$1,function(param){return _aq7_},v1);
                      return [1,[0,v0$0,[0,v1$0,0]]]},
                    sexp_of_t$0,
                    _bjL_)}
         function phys_equal(t1,t2)
          {function _bjK_(param){return caml_call2(Pool[3][7],t1,t2)}
           return debug
                   (cst_Pointer_phys_equal,
                    0,
                    [0,t1,t2],
                    function(param)
                     {var
                       v1=param[2],
                       v0=param[1],
                       v0$0=
                        caml_call2(sexp_of_t$1,function(param){return _aq8_},v0),
                       v1$0=
                        caml_call2(sexp_of_t$1,function(param){return _aq9_},v1);
                      return [1,[0,v0$0,[0,v1$0,0]]]},
                    _i_,
                    _bjK_)}
         function is_null(t)
          {function _bjJ_(param){return caml_call1(Pool[3][5],t)}
           return debug
                   (cst_Pointer_is_null,
                    0,
                    t,
                    caml_call1(sexp_of_t$1,function(param){return _aq__}),
                    _i_,
                    _bjJ_)}
         var
          _bjp_=Pool[3][4],
          _bjq_=Pool[3][8][8],
          _bjr_=
           [0,
            [0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$193),0,_bjq_],
            0],
          _bjs_=
           caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_pool_ml_937_6),
          group=caml_call2(Bin_prot_Shape[6],_bjs_,_bjr_),
          _bjt_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$194),
          bin_shape_t=caml_call1(caml_call2(Bin_prot_Shape[14],group,_bjt_),0),
          bin_size_t=Pool[3][8][5],
          bin_write_t=Pool[3][8][6],
          bin_writer_t=[0,bin_size_t,bin_write_t],
          bin_read_t=Pool[3][8][3],
          bin_read_t$0=Pool[3][8][2],
          bin_reader_t=[0,bin_read_t$0,bin_read_t],
          bin_t=[0,bin_shape_t,bin_writer_t,bin_reader_t],
          t_of_sexp=Pool[3][8][9],
          sexp_of_t$2=Pool[3][8][10];
         function of_int63(i)
          {return debug
                   (cst_Pointer_Id_of_int63,
                    0,
                    i,
                    sexp_of_t$49,
                    sexp_of_t$2,
                    function(param){return caml_call1(Pool[3][8][12],i)})}
         function to_int63(t)
          {return debug
                   (cst_Pointer_Id_to_int63,
                    0,
                    t,
                    sexp_of_t$2,
                    sexp_of_t$49,
                    function(param){return caml_call1(Pool[3][8][11],t)})}
         var sexp_of_t$3=Pool[4],invariant=Pool[5],length=Pool[12];
         function id_of_pointer(t,pointer)
          {function _bjI_(param){return caml_call2(Pool[7],t,pointer)}
           return debug
                   (cst_id_of_pointer,
                    [0,t,0],
                    pointer,
                    caml_call1(sexp_of_t$1,function(param){return _aq$_}),
                    sexp_of_t$2,
                    _bjI_)}
         function pointer_of_id_exn(t,id)
          {function _bjH_(param){return caml_call2(Pool[8],t,id)}
           return debug
                   (cst_pointer_of_id_exn,
                    [0,t,0],
                    id,
                    sexp_of_t$2,
                    caml_call1(sexp_of_t$1,function(param){return _ara_}),
                    _bjH_)}
         function pointer_is_valid(t,pointer)
          {function _bjG_(param){return caml_call2(Pool[6],t,pointer)}
           return debug
                   (cst_pointer_is_valid,
                    [0,t,0],
                    pointer,
                    caml_call1(sexp_of_t$1,function(param){return _arb_}),
                    _i_,
                    _bjG_)}
         function create(slots,capacity,dummy)
          {function _bjF_(param)
            {return caml_call3(Pool[9],slots,capacity,dummy)}
           return debug
                   (cst_create$0,
                    0,
                    capacity,
                    sexp_of_t$0,
                    caml_call1(sexp_of_t$3,function(param){return _arc_}),
                    _bjF_)}
         function max_capacity(slots_per_tuple)
          {return debug
                   (cst_max_capacity,
                    0,
                    slots_per_tuple,
                    sexp_of_t$0,
                    sexp_of_t$0,
                    function(param){return caml_call1(Pool[10],slots_per_tuple)})}
         function capacity(t)
          {function _bjE_(param){return caml_call1(Pool[11],t)}
           return debug
                   (cst_capacity$0,
                    [0,t,0],
                    t,
                    caml_call1(sexp_of_t$3,function(param){return _ard_}),
                    sexp_of_t$0,
                    _bjE_)}
         function grow(capacity,t)
          {function _bjC_(param){return caml_call2(Pool[13],capacity,t)}
           var _bjD_=caml_call1(sexp_of_t$3,function(param){return _are_});
           return debug
                   (cst_grow,
                    [0,t,0],
                    [0,-1011154630,capacity],
                    function(param)
                     {var v0=param[2];
                      return [1,[0,_arf_,[0,caml_call2(_R_,sexp_of_t$0,v0),0]]]},
                    _bjD_,
                    _bjC_)}
         function is_full(t)
          {function _bjB_(param){return caml_call1(Pool[14],t)}
           return debug
                   (cst_is_full,
                    [0,t,0],
                    t,
                    caml_call1(sexp_of_t$3,function(param){return _arg_}),
                    _i_,
                    _bjB_)}
         function unsafe_free(t,p)
          {function _bjA_(param){return caml_call2(Pool[16],t,p)}
           return debug
                   (cst_unsafe_free,
                    [0,t,0],
                    p,
                    caml_call1(sexp_of_t$1,function(param){return _arh_}),
                    _af_,
                    _bjA_)}
         function free(t,p)
          {function _bjz_(param){return caml_call2(Pool[15],t,p)}
           return debug
                   (cst_free,
                    [0,t,0],
                    p,
                    caml_call1(sexp_of_t$1,function(param){return _ari_}),
                    _af_,
                    _bjz_)}
         function debug_new(t,f)
          {return debug
                   (cst_new,
                    [0,t,0],
                    0,
                    _af_,
                    caml_call1(sexp_of_t$1,function(param){return _arj_}),
                    f)}
         function new1(t,a0)
          {return debug_new
                   (t,function(param){return caml_call2(Pool[17],t,a0)})}
         function new2(t,a0,a1)
          {return debug_new
                   (t,function(param){return caml_call3(Pool[18],t,a0,a1)})}
         function new3(t,a0,a1,a2)
          {return debug_new
                   (t,function(param){return caml_call4(Pool[19],t,a0,a1,a2)})}
         function new4(t,a0,a1,a2,a3)
          {return debug_new
                   (t,
                    function(param){return caml_call5(Pool[20],t,a0,a1,a2,a3)})}
         function new5(t,a0,a1,a2,a3,a4)
          {return debug_new
                   (t,
                    function(param)
                     {return caml_call6(Pool[21],t,a0,a1,a2,a3,a4)})}
         function new6(t,a0,a1,a2,a3,a4,a5)
          {return debug_new
                   (t,
                    function(param)
                     {return caml_call7(Pool[22],t,a0,a1,a2,a3,a4,a5)})}
         function new7(t,a0,a1,a2,a3,a4,a5,a6)
          {return debug_new
                   (t,
                    function(param)
                     {return caml_call8(Pool[23],t,a0,a1,a2,a3,a4,a5,a6)})}
         function new8(t,a0,a1,a2,a3,a4,a5,a6,a7)
          {return debug_new
                   (t,
                    function(param)
                     {return caml_call9(Pool[24],t,a0,a1,a2,a3,a4,a5,a6,a7)})}
         function new9(t,a0,a1,a2,a3,a4,a5,a6,a7,a8)
          {return debug_new
                   (t,
                    function(param)
                     {return caml_call10(Pool[25],t,a0,a1,a2,a3,a4,a5,a6,a7,a8)})}
         function new10(t,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9)
          {return debug_new
                   (t,
                    function(param)
                     {return caml_call11
                              (Pool[26],t,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9)})}
         function new11(t,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)
          {return debug_new
                   (t,
                    function(param)
                     {return caml_call12
                              (Pool[27],t,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)})}
         function new12(t,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11)
          {return debug_new
                   (t,
                    function(param)
                     {return caml_call13
                              (Pool[28],t,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11)})}
         function new13(t,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12)
          {return debug_new
                   (t,
                    function(param)
                     {return caml_call14
                              (Pool[29],t,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12)})}
         function new14(t,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13)
          {return debug_new
                   (t,
                    function(param)
                     {return caml_call15
                              (Pool[30],t,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13)})}
         function get_tuple(t,pointer)
          {function _bjx_(param){return caml_call2(Pool[31],t,pointer)}
           function _bjy_(param){return _ark_}
           return debug
                   (cst_get_tuple,
                    [0,t,0],
                    pointer,
                    caml_call1(sexp_of_t$1,function(param){return _arl_}),
                    _bjy_,
                    _bjx_)}
         function debug_get(name,f,t,pointer)
          {function _bjv_(param){return caml_call2(f,t,pointer)}
           function _bjw_(param){return _arm_}
           return debug
                   (name,
                    [0,t,0],
                    pointer,
                    caml_call1(sexp_of_t$1,function(param){return _arn_}),
                    _bjw_,
                    _bjv_)}
         function get(t,pointer,slot)
          {return caml_call1(debug_get(cst_get,Pool[32],t,pointer),slot)}
         function unsafe_get(t,pointer,slot)
          {return caml_call1
                   (debug_get(cst_unsafe_get,Pool[33],t,pointer),slot)}
         function debug_set(name,f,t,pointer,slot,a)
          {function _bju_(param){return caml_call4(f,t,pointer,slot,a)}
           return debug
                   (name,
                    [0,t,0],
                    pointer,
                    caml_call1(sexp_of_t$1,function(param){return _aro_}),
                    _af_,
                    _bju_)}
         function set(t,pointer,slot,a)
          {return debug_set(cst_set,Pool[34],t,pointer,slot,a)}
         function unsafe_set(t,pointer,slot,a)
          {return debug_set(cst_unsafe_set,Pool[35],t,pointer,slot,a)}
         return [0,
                 Slots,
                 Slot,
                 [0,
                  sexp_of_t$1,
                  typerep_of_t,
                  _bjo_,
                  _bjp_,
                  is_null,
                  phys_compare,
                  phys_equal,
                  [0,
                   bin_t,
                   bin_read_t$0,
                   bin_read_t,
                   bin_reader_t,
                   bin_size_t,
                   bin_write_t,
                   bin_writer_t,
                   bin_shape_t,
                   t_of_sexp,
                   sexp_of_t$2,
                   to_int63,
                   of_int63]],
                 sexp_of_t$3,
                 invariant,
                 pointer_is_valid,
                 id_of_pointer,
                 pointer_of_id_exn,
                 create,
                 max_capacity,
                 capacity,
                 length,
                 grow,
                 is_full,
                 free,
                 unsafe_free,
                 new1,
                 new2,
                 new3,
                 new4,
                 new5,
                 new6,
                 new7,
                 new8,
                 new9,
                 new10,
                 new11,
                 new12,
                 new13,
                 new14,
                 get_tuple,
                 get,
                 unsafe_get,
                 set,
                 unsafe_set,
                 check_invariant,
                 show_messages]},
       _art_];
    caml_register_global(7541,Core_kernel_Pool,"Core_kernel__Pool");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$413);
    caml_call1(Expect_test_collector[4][1],cst_src_time_ns_alternate_sexp_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$414,cst$218);
    var
     _arx_=Alternate_sexp[2],
     hash_fold_t$46=Span$0[1],
     hash$45=Span$0[2],
     typerep_of_t$27=Span$0[3],
     typename_of_t$25=Span$0[4],
     bin_t$85=Span$0[5],
     bin_read_t$135=Span$0[6],
     bin_read_t$136=Span$0[7],
     bin_reader_t$85=Span$0[8],
     bin_size_t$68=Span$0[9],
     bin_write_t$69=Span$0[10],
     bin_writer_t$85=Span$0[11],
     bin_shape_t$94=Span$0[12],
     equal$42=Span$0[19],
     compare$76=Span$0[20],
     min$18=Span$0[21],
     max$18=Span$0[22],
     validate_lbound$17=Span$0[23],
     validate_ubound$17=Span$0[24],
     validate_bound$17=Span$0[25],
     validate_positive$6=Span$0[26],
     validate_non_negative$6=Span$0[27],
     validate_negative$6=Span$0[28],
     validate_non_positive$6=Span$0[29],
     is_positive$6=Span$0[30],
     is_non_negative$6=Span$0[31],
     is_negative$6=Span$0[32],
     is_non_positive$6=Span$0[33],
     sign$7=Span$0[34],
     nanosecond$1=Span$0[35],
     microsecond$1=Span$0[36],
     millisecond$1=Span$0[37],
     second$2=Span$0[38],
     minute$1=Span$0[39],
     hour$2=Span$0[40],
     day$2=Span$0[41],
     of_ns$1=Span$0[42],
     of_us$1=Span$0[43],
     of_ms$1=Span$0[44],
     of_sec$0=Span$0[45],
     of_min$1=Span$0[46],
     of_hr$1=Span$0[47],
     of_day$1=Span$0[48],
     to_ns$1=Span$0[49],
     to_us$1=Span$0[50],
     to_ms$1=Span$0[51],
     to_sec$0=Span$0[52],
     to_min$1=Span$0[53],
     to_hr$1=Span$0[54],
     to_day$1=Span$0[55],
     of_sec_with_microsecond_precision$0=Span$0[56],
     of_int_us$0=Span$0[57],
     of_int_ms$0=Span$0[58],
     of_int_sec$1=Span$0[59],
     to_int_us$0=Span$0[60],
     to_int_ms$0=Span$0[61],
     to_int_sec$0=Span$0[62],
     zero$8=Span$0[63],
     min_value$7=Span$0[64],
     max_value$8=Span$0[65],
     abs$8=Span$0[68],
     neg$7=Span$0[69],
     scale$3=Span$0[70],
     scale_int$0=Span$0[71],
     scale_int63$0=Span$0[72],
     div=Span$0[73],
     create$42=Span$0[76],
     Parts$1=Span$0[77],
     to_parts$2=Span$0[78],
     to_unit_of_time$1=Span$0[79],
     of_unit_of_time$1=Span$0[80],
     robustly_compare$4=Span$0[87],
     to_int63_ns$0=Span$0[88],
     of_int63_ns$0=Span$0[89],
     to_int_ns=Span$0[90],
     of_int_ns=Span$0[91],
     to_proportional_float$0=Span$0[92],
     since_unix_epoch=Span$0[93],
     random$2=Span$0[94],
     Alternate_sexp$0=Span$0[95],
     include$133=Span$0[95],
     t_of_sexp$97=include$133[1],
     sexp_of_t$109=include$133[2],
     Span$1=
      [0,
       hash_fold_t$46,
       hash$45,
       typerep_of_t$27,
       typename_of_t$25,
       bin_t$85,
       bin_read_t$135,
       bin_read_t$136,
       bin_reader_t$85,
       bin_size_t$68,
       bin_write_t$69,
       bin_writer_t$85,
       bin_shape_t$94,
       Span$0[13],
       Span$0[14],
       Span$0[15],
       Span$0[16],
       Span$0[17],
       Span$0[18],
       equal$42,
       compare$76,
       min$18,
       max$18,
       validate_lbound$17,
       validate_ubound$17,
       validate_bound$17,
       validate_positive$6,
       validate_non_negative$6,
       validate_negative$6,
       validate_non_positive$6,
       is_positive$6,
       is_non_negative$6,
       is_negative$6,
       is_non_positive$6,
       sign$7,
       nanosecond$1,
       microsecond$1,
       millisecond$1,
       second$2,
       minute$1,
       hour$2,
       day$2,
       of_ns$1,
       of_us$1,
       of_ms$1,
       of_sec$0,
       of_min$1,
       of_hr$1,
       of_day$1,
       to_ns$1,
       to_us$1,
       to_ms$1,
       to_sec$0,
       to_min$1,
       to_hr$1,
       to_day$1,
       of_sec_with_microsecond_precision$0,
       of_int_us$0,
       of_int_ms$0,
       of_int_sec$1,
       to_int_us$0,
       to_int_ms$0,
       to_int_sec$0,
       zero$8,
       min_value$7,
       max_value$8,
       Span$0[66],
       Span$0[67],
       abs$8,
       neg$7,
       scale$3,
       scale_int$0,
       scale_int63$0,
       div,
       Span$0[74],
       Span$0[75],
       create$42,
       Parts$1,
       to_parts$2,
       to_unit_of_time$1,
       of_unit_of_time$1,
       Span$0[81],
       Span$0[82],
       Span$0[83],
       Span$0[84],
       Span$0[85],
       Span$0[86],
       robustly_compare$4,
       to_int63_ns$0,
       of_int63_ns$0,
       to_int_ns,
       of_int_ns,
       to_proportional_float$0,
       since_unix_epoch,
       random$2,
       Alternate_sexp$0,
       t_of_sexp$97,
       sexp_of_t$109],
     _arw_=Alternate_sexp[1];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$415);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Time_ns_alternate_sexp=
      [0,
       _Av_,
       hash$41,
       typerep_of_t$23,
       typename_of_t$22,
       bin_t$81,
       bin_read_t$81,
       bin_read_t$82,
       bin_reader_t$81,
       bin_size_t$40,
       bin_write_t$40,
       bin_writer_t$81,
       bin_shape_t$90,
       _Ar_,
       _Aq_,
       _Ap_,
       _Ao_,
       _An_,
       _Am_,
       equal$20,
       compare$36,
       min$2,
       max$2,
       Alternate_sexp,
       epoch,
       min_value$6,
       max_value$6,
       now,
       add$14,
       diff$7,
       diff$7,
       abs_diff,
       to_span_since_epoch$0,
       of_span_since_epoch$0,
       to_int63_ns_since_epoch,
       of_int63_ns_since_epoch,
       to_int_ns_since_epoch,
       of_int_ns_since_epoch,
       next_multiple,
       random$1,
       Utc,
       Stable$6,
       _arw_,
       _arx_,
       Span$1];
    caml_register_global
     (7542,
      Core_kernel_Time_ns_alternate_sexp,
      "Core_kernel__Time_ns_alternate_sexp");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$416);
    caml_call1(Expect_test_collector[4][1],cst_src_timing_wheel_ns_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$417,cst$219);
    var max_num_bits=caml_call2(_w3_,_xX_,3),min_value$8=0;
    function invariant$10(t)
     {if(caml_call2(_xx_,t,min_value$8))
       {if(caml_call2(_xw_,t,max_num_bits))return 0;
        throw [0,Assert_failure,_ary_]}
      throw [0,Assert_failure,_arz_]}
    function _arA_(param){return invariant$10(_w7_)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_invariant_zero,
      0,
      cst_src_timing_wheel_ns_ml$0,
      82,
      2,
      34,
      _arA_);
    function of_int$9(i){invariant$10(i);return i}
    function _arB_(t1,t2)
     {var t=caml_call2(_w4_,t1,t2);invariant$10(t);return t}
    function pow2(t){return caml_call2(_zI_,one$2,t)}
    function sexp_of_t$110(v){return caml_call2(sexp_of_t$25,sexp_of_t$43,v)}
    function num_bits_internal(t){return caml_call3(fold$2,t,_w7_,_arB_)}
    function num_bits$6(t){return num_bits_internal(t)}
    function f$0(t)
     {if(caml_call1(is_empty$2,t))throw [0,Assert_failure,_arC_];
      caml_call2
       (iter$2,
        t,
        function(num_key_bits)
         {invariant$10(num_key_bits);
          if(caml_call2(_xu_,num_key_bits,_w7_))return 0;
          throw [0,Assert_failure,_arD_]});
      return invariant$10(num_bits_internal(t))}
    function t_of_sexp$98(sexp)
     {var t=caml_call2(t_of_sexp$23,t_of_sexp$32,sexp);f$0(t);return t}
    function create_exn$0(ints)
     {if(caml_call1(is_empty$2,ints))
       caml_call1(failwith,cst_Level_bits_create_exn_requires_a_nonempty_list);
      if(caml_call2(exists$1,ints,function(bits){return bits <= 0?1:0}))
       {var _bji_=[0,caml_call2(sexp_of_t$25,sexp_of_t$43,ints),0];
        caml_call1
         (_kM_,
          [1,
           [0,
            caml_call1
             (Sexplib0_Sexp_conv[7],
              cst_Level_bits_create_exn_got_nonpositive_num_bits),
            _bji_]])}
      var
       num_bits=
        caml_call3
         (fold$2,ints,0,function(_bjn_,_bjm_){return _bjn_ + _bjm_ | 0});
      if(max_num_bits < num_bits)
       {var
         _bjj_=[0,[1,[0,_arE_,[0,caml_call1(sexp_of_t$43,max_num_bits),0]]],0],
         _bjk_=[0,[1,[0,_arF_,[0,caml_call1(sexp_of_t$43,num_bits),0]]],_bjj_],
         _bjl_=[0,caml_call2(sexp_of_t$25,sexp_of_t$43,ints),_bjk_];
        caml_call1
         (_kM_,
          [1,
           [0,
            caml_call1
             (Sexplib0_Sexp_conv[7],
              cst_Level_bits_create_exn_got_too_many_bits),
            _bjl_]])}
      return caml_call2(map$11,ints,of_int$9)}
    var level_bits_default=create_exn$0(_arG_);
    function equal$43(x_003,x_004)
     {var match=caml_call2(compare$30,x_003,x_004);return 0 === match?1:0}
    function to_sexpable(t)
     {if(t < 0)
       {var _bjg_=[0,caml_call1(sexp_of_t$43,t),0];
        caml_call1
         (_kM_,
          [1,
           [0,
            caml_call1
             (Sexplib0_Sexp_conv[7],
              cst_Alarm_precision_to_span_of_negative_power_of_two_nanoseconds),
            _bjg_]])}
      var _bjh_=caml_call1(caml_call1(_zI_,one$2),t);
      return caml_call1(Span$1[89],_bjh_)}
    function sexp_of_t$111(t)
     {var _bjf_=to_sexpable(t);return caml_call1(Span$1[97],_bjf_)}
    var
     one_nanosecond=0,
     about_one_microsecond=10,
     about_one_millisecond=20,
     about_one_second=30,
     about_one_day=46;
    function mul(t,pow2){return t + pow2 | 0}
    function div$0(t,pow2){return t - pow2 | 0}
    function of_sexpable(span)
     {if(caml_call2(Span$1[14],span,Span$1[63]))
       {var _bje_=[0,[1,[0,_arH_,[0,caml_call1(Span$1[97],span),0]]],0];
        caml_call1
         (_kM_,
          [1,
           [0,
            caml_call1
             (Sexplib0_Sexp_conv[7],
              cst_Alarm_precision_of_span_floor_pow2_ns_got_non_positive_span),
            _bje_]])}
      return caml_call1(floor_log2$0,caml_call1(Span$1[88],span))}
    var
     _arI_=
      caml_call1
       (caml_call1
         (_W5_,[0,Span$1[12],Span$1[9],Span$1[10],Span$1[6],Span$1[7]]),
        [0,to_sexpable,of_sexpable]),
     bin_size_t$69=_arI_[1],
     bin_write_t$70=_arI_[2],
     bin_read_t$137=_arI_[3],
     bin_read_t$138=_arI_[4],
     bin_shape_t$95=_arI_[5],
     bin_writer_t$86=_arI_[6],
     bin_reader_t$86=_arI_[7],
     bin_t$86=_arI_[8],
     include$134=
      caml_call1
       (caml_call1(include$1[1],[0,Span$1[96],Span$1[97]]),
        [0,to_sexpable,of_sexpable]),
     t_of_sexp$99=include$134[1],
     sexp_of_t$112=include$134[2],
     _arJ_=
      [0,
       bin_t$86,
       bin_read_t$137,
       bin_read_t$138,
       bin_reader_t$86,
       bin_size_t$69,
       bin_write_t$70,
       bin_writer_t$86,
       bin_shape_t$95,
       compare$30,
       t_of_sexp$99,
       sexp_of_t$112];
    function level_bits(r){return r[2]}
    function _arK_(r,v){return [0,r[1],v]}
    var
     _arL_=0,
     level_bits$0=
      [0,[0,function(param){return 0},cst_level_bits,_arL_,level_bits,_arK_]];
    function t_of_sexp$100(sexp)
     {if(0 === sexp[0])
       return caml_call2(Sexplib0_Sexp_conv_error[15],tp_loc$40,sexp);
      var
       field_sexps=sexp[1],
       alarm_precision_field=[0,0],
       level_bits_field=[0,0],
       duplicates=[0,0],
       extra=[0,0],
       param=field_sexps;
      for(;;)
       {if(param)
         {var _bi9_=param[1];
          if(1 === _bi9_[0])
           {var _bi__=_bi9_[1];
            if(_bi__)
             {var _bi$_=_bi__[1];
              if(0 === _bi$_[0])
               {var _bja_=_bi__[2],_bjb_=_bi$_[1];
                if(! _bja_)
                 {var tail$0=param[2];
                  if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_bjb_,extra[1]];
                  var param=tail$0;
                  continue}
                if(! _bja_[2])
                 {var tail=param[2],field_sexp=_bja_[1];
                  if(caml_string_notequal(_bjb_,cst_alarm_precision))
                   if(caml_string_notequal(_bjb_,cst_level_bits$0))
                    {if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_bjb_,extra[1]]}
                   else
                    if(level_bits_field[1])
                     duplicates[1] = [0,_bjb_,duplicates[1]];
                    else
                     {var fvalue=t_of_sexp$98(field_sexp);
                      level_bits_field[1] = [0,fvalue]}
                  else
                   if(alarm_precision_field[1])
                    duplicates[1] = [0,_bjb_,duplicates[1]];
                   else
                    {var fvalue$0=caml_call1(_arJ_[10],field_sexp);
                     alarm_precision_field[1] = [0,fvalue$0]}
                  var param=tail;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[9],tp_loc$40,_bi9_)}
        if(duplicates[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[11],tp_loc$40,duplicates[1],sexp);
        if(extra[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],tp_loc$40,extra[1],sexp);
        var _bjc_=alarm_precision_field[1],_bjd_=level_bits_field[1];
        if(_bjc_)
         {var alarm_precision_value=_bjc_[1];
          if(_bjd_)var v=_bjd_[1],v$0=v;else var v$0=level_bits_default;
          return [0,alarm_precision_value,v$0]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[14],
                 tp_loc$40,
                 sexp,
                 [0,
                  [0,0 === alarm_precision_field[1]?1:0,cst_alarm_precision$0],
                  0])}}
    function sexp_of_t$113(param)
     {var v_level_bits=param[2],v_alarm_precision=param[1],bnds=0;
      if(caml_equal(level_bits_default,v_level_bits))
       var bnds$0=bnds;
      else
       var
        arg$0=sexp_of_t$110(v_level_bits),
        bnd=[1,[0,_arN_,[0,arg$0,0]]],
        bnds$0=[0,bnd,bnds];
      var
       arg=caml_call1(_arJ_[11],v_alarm_precision),
       bnds$1=[0,[1,[0,_arM_,[0,arg,0]]],bnds$0];
      return [1,bnds$1]}
    function alarm_precision(t){return to_sexpable(t[1])}
    function invariant$11(t)
     {function _bi8_(param)
       {var level_bits_fun=caml_call2(Base_Invariant[2],t,f$0);
        return caml_call1(level_bits_fun,level_bits$0)}
      return caml_call4(Base_Invariant[1],_arO_,t,sexp_of_t$113,_bi8_)}
    function create$43(opt,alarm_precision,param)
     {if(opt)
       var sth=opt[1],level_bits=sth;
      else
       var level_bits=level_bits_default;
      return [0,alarm_precision,level_bits]}
    function microsecond_precision(param)
     {return create$43([0,create_exn$0(_arP_)],about_one_microsecond,0)}
    function durations(t)
     {function _bi5_(param,num_bits)
       {var
         durations=param[2],
         interval_duration=param[1],
         _bi7_=pow2(num_bits),
         duration=caml_call2(Span$1[72],interval_duration,_bi7_);
        return [0,duration,[0,duration,durations]]}
      var
       _bi6_=[0,alarm_precision(t),0],
       match=caml_call3(fold$2,t[2],_bi6_,_bi5_),
       durations=match[2];
      return caml_call1(rev,durations)}
    function create$44(level_bits)
     {return caml_call2(_z__,pow2(level_bits),one$2)}
    function num_keys(num_bits){return pow2(num_bits)}
    function create$45(bits_per_slot)
     {return caml_call1(_zK_,caml_call2(_z__,pow2(bits_per_slot),one$2))}
    function to_int63$0(t){return t}
    function of_int63$1(i){return i}
    function scale_int$1(t,i)
     {return caml_call2(_z9_,t,caml_call1(of_int$1,i))}
    function of_int63$2(i){return i}
    function to_int63$1(t){return t}
    function add$17(t,i){return caml_call2(_z$_,t,i)}
    function sub$11(t,i){return caml_call2(_z__,t,i)}
    function diff$9(t1,t2){return caml_call2(_z__,t1,t2)}
    var max_representable=caml_call2(_z__,num_keys(max_num_bits),one$2);
    function largest_multiple(of,less_than_or_equal_to)
     {return caml_call2(_z9_,of,caml_call2(_z3_,less_than_or_equal_to,of))}
    var
     _arQ_=
      [0,
       Hash_set$1[1],
       Hash_set$1[2],
       Hash_set$1[3],
       Hash_set$1[4],
       Hash_set$1[5],
       Hash_set$1[6]],
     _arR_=
      [0,
       Table$1[1],
       Table$1[2],
       Table$1[3],
       Table$1[4],
       Table$1[5],
       Table$1[6],
       Table$1[7],
       Table$1[8],
       Table$1[9],
       Table$1[10],
       Table$1[11],
       Table$1[12],
       Table$1[13],
       Table$1[14],
       Table$1[15],
       Table$1[16],
       Table$1[17],
       Table$1[18],
       Table$1[19],
       Table$1[20],
       Table$1[21],
       Table$1[22],
       Table$1[23],
       Table$1[24],
       Table$1[25],
       Table$1[26],
       Table$1[27],
       Table$1[28],
       Table$1[29],
       Table$1[30],
       Table$1[31],
       Table$1[32],
       Table$1[33],
       Table$1[34],
       Table$1[35],
       Table$1[36],
       Table$1[37],
       Table$1[38],
       Table$1[39],
       Table$1[40],
       Table$1[41],
       Table$1[42],
       Table$1[43],
       Table$1[44],
       Table$1[45],
       Table$1[46],
       Table$1[47],
       Table$1[48],
       Table$1[49],
       Table$1[50],
       Table$1[51],
       Table$1[52],
       Table$1[53],
       Table$1[54],
       Table$1[55],
       Table$1[56],
       Table$1[57],
       Table$1[58],
       Table$1[59],
       Table$1[60],
       Table$1[61],
       Table$1[62],
       Table$1[63],
       Table$1[64],
       Table$1[65],
       Table$1[66],
       Table$1[67],
       Table$1[68],
       Table$1[69],
       Table$1[70],
       Table$1[71],
       Table$1[72],
       Table$1[73],
       Table$1[74],
       Table$1[75],
       Table$1[76],
       Table$1[77]],
     _arS_=Set$4[1],
     _arT_=
      [0,
       [0,_arS_[1],_arS_[2],_arS_[11]],
       Set$4[2],
       Set$4[3],
       Set$4[4],
       Set$4[5],
       Set$4[6],
       Set$4[7],
       Set$4[8],
       Set$4[9],
       Set$4[10],
       Set$4[11],
       Set$4[12],
       Set$4[13],
       Set$4[14],
       Set$4[15],
       Set$4[16],
       Set$4[17],
       Set$4[18],
       Set$4[19],
       Set$4[20],
       Set$4[21],
       Set$4[22],
       Set$4[23],
       Set$4[24],
       Set$4[25],
       Set$4[26],
       Set$4[27],
       Set$4[28],
       Set$4[29],
       Set$4[30],
       Set$4[31],
       Set$4[32],
       Set$4[33],
       Set$4[34],
       Set$4[35],
       Set$4[36],
       Set$4[37],
       Set$4[38],
       Set$4[39],
       Set$4[40],
       Set$4[41],
       Set$4[42],
       Set$4[43],
       Set$4[44],
       Set$4[45],
       Set$4[46],
       Set$4[47],
       Set$4[48],
       Set$4[49],
       Set$4[50],
       Set$4[51],
       Set$4[52],
       Set$4[53],
       Set$4[54],
       Set$4[55],
       Set$4[56],
       Set$4[57],
       Set$4[58],
       Set$4[59],
       Set$4[60],
       Set$4[61],
       Set$4[62],
       Set$4[63],
       Set$4[64],
       Set$4[65],
       Set$4[66],
       Set$4[67],
       Set$4[68],
       Set$4[69],
       Set$4[70],
       Set$4[71],
       Set$4[72],
       Set$4[73],
       Set$4[74]],
     _arU_=Map$4[1],
     _arV_=
      [0,
       [0,_arU_[9],_arU_[10],_arU_[11]],
       Map$4[2],
       Map$4[3],
       Map$4[4],
       Map$4[5],
       Map$4[6],
       Map$4[7],
       Map$4[8],
       Map$4[9],
       Map$4[10],
       Map$4[11],
       Map$4[12],
       Map$4[13],
       Map$4[14],
       Map$4[15],
       Map$4[16],
       Map$4[17],
       Map$4[18],
       Map$4[19],
       Map$4[20],
       Map$4[21],
       Map$4[22],
       Map$4[23],
       Map$4[24],
       Map$4[25],
       Map$4[26],
       Map$4[27],
       Map$4[28],
       Map$4[29],
       Map$4[30],
       Map$4[31],
       Map$4[32],
       Map$4[33],
       Map$4[34],
       Map$4[35],
       Map$4[36],
       Map$4[37],
       Map$4[38],
       Map$4[39],
       Map$4[40],
       Map$4[41],
       Map$4[42],
       Map$4[43],
       Map$4[44],
       Map$4[45],
       Map$4[46],
       Map$4[47],
       Map$4[48],
       Map$4[49],
       Map$4[50],
       Map$4[51],
       Map$4[52],
       Map$4[53],
       Map$4[54],
       Map$4[55],
       Map$4[56],
       Map$4[57],
       Map$4[58],
       Map$4[59],
       Map$4[60],
       Map$4[61],
       Map$4[62],
       Map$4[63],
       Map$4[64],
       Map$4[65],
       Map$4[66],
       Map$4[67],
       Map$4[68],
       Map$4[69],
       Map$4[70],
       Map$4[71],
       Map$4[72],
       Map$4[73],
       Map$4[74],
       Map$4[75],
       Map$4[76],
       Map$4[77],
       Map$4[78],
       Map$4[79],
       Map$4[80],
       Map$4[81],
       Map$4[82],
       Map$4[83],
       Map$4[84],
       Map$4[85],
       Map$4[86],
       Map$4[87],
       Map$4[88]],
     _arW_=Set$4[1],
     _arX_=Map$4[1],
     _arY_=
      [0,
       sexp_of_t$49,
       _Ar_,
       _Aq_,
       _Ap_,
       _Ao_,
       _An_,
       _Am_,
       equal$20,
       compare$36,
       min$2,
       ascending$2,
       descending$2,
       between$2,
       clamp_exn$2,
       clamp$2,
       comparator$9,
       validate_lbound$2,
       validate_ubound$2,
       validate_bound$2,
       Replace_polymorphic_compare$1,
       [0,
        [0,_arX_[9],_arX_[10],_arX_[11]],
        Map$4[2],
        Map$4[3],
        Map$4[4],
        Map$4[5],
        Map$4[6],
        Map$4[7],
        Map$4[8],
        Map$4[9],
        Map$4[10],
        Map$4[11],
        Map$4[12],
        Map$4[13],
        Map$4[14],
        Map$4[15],
        Map$4[16],
        Map$4[17],
        Map$4[18],
        Map$4[19],
        Map$4[20],
        Map$4[21],
        Map$4[22],
        Map$4[23],
        Map$4[24],
        Map$4[25],
        Map$4[26],
        Map$4[27],
        Map$4[28],
        Map$4[29],
        Map$4[30],
        Map$4[31],
        Map$4[32],
        Map$4[33],
        Map$4[34],
        Map$4[35],
        Map$4[36],
        Map$4[37],
        Map$4[38],
        Map$4[39],
        Map$4[40],
        Map$4[41],
        Map$4[42],
        Map$4[43],
        Map$4[44],
        Map$4[45],
        Map$4[46],
        Map$4[47],
        Map$4[48],
        Map$4[49],
        Map$4[50],
        Map$4[51],
        Map$4[52],
        Map$4[53],
        Map$4[54],
        Map$4[55],
        Map$4[56],
        Map$4[57],
        Map$4[58],
        Map$4[59],
        Map$4[60],
        Map$4[61],
        Map$4[62],
        Map$4[63],
        Map$4[64],
        Map$4[65],
        Map$4[66],
        Map$4[67],
        Map$4[68],
        Map$4[69],
        Map$4[70],
        Map$4[71],
        Map$4[72],
        Map$4[73],
        Map$4[74],
        Map$4[75],
        Map$4[76],
        Map$4[77],
        Map$4[78],
        Map$4[79],
        Map$4[80],
        Map$4[81],
        Map$4[82],
        Map$4[83],
        Map$4[84],
        Map$4[85],
        Map$4[86],
        Map$4[87],
        Map$4[88]],
       [0,
        [0,_arW_[1],_arW_[2],_arW_[11]],
        Set$4[2],
        Set$4[3],
        Set$4[4],
        Set$4[5],
        Set$4[6],
        Set$4[7],
        Set$4[8],
        Set$4[9],
        Set$4[10],
        Set$4[11],
        Set$4[12],
        Set$4[13],
        Set$4[14],
        Set$4[15],
        Set$4[16],
        Set$4[17],
        Set$4[18],
        Set$4[19],
        Set$4[20],
        Set$4[21],
        Set$4[22],
        Set$4[23],
        Set$4[24],
        Set$4[25],
        Set$4[26],
        Set$4[27],
        Set$4[28],
        Set$4[29],
        Set$4[30],
        Set$4[31],
        Set$4[32],
        Set$4[33],
        Set$4[34],
        Set$4[35],
        Set$4[36],
        Set$4[37],
        Set$4[38],
        Set$4[39],
        Set$4[40],
        Set$4[41],
        Set$4[42],
        Set$4[43],
        Set$4[44],
        Set$4[45],
        Set$4[46],
        Set$4[47],
        Set$4[48],
        Set$4[49],
        Set$4[50],
        Set$4[51],
        Set$4[52],
        Set$4[53],
        Set$4[54],
        Set$4[55],
        Set$4[56],
        Set$4[57],
        Set$4[58],
        Set$4[59],
        Set$4[60],
        Set$4[61],
        Set$4[62],
        Set$4[63],
        Set$4[64],
        Set$4[65],
        Set$4[66],
        Set$4[67],
        Set$4[68],
        Set$4[69],
        Set$4[70],
        Set$4[71],
        Set$4[72],
        Set$4[73],
        Set$4[74]],
       max$2,
       epoch,
       one$2,
       of_int63$1,
       to_int63$0,
       of_int$1,
       to_int_exn$2,
       scale_int$1,
       pred$2,
       succ$2];
    function sexp_of_pool_slots(of_a,v)
     {function _biZ_(_bi4_){return sexp_of_pool_slots(of_a,_bi4_)}
      var _bi0_=caml_call1(_aru_[3][1],_biZ_);
      function _bi1_(_bi3_){return sexp_of_pool_slots(of_a,_bi3_)}
      var _bi2_=caml_call1(_aru_[3][1],_bi1_);
      return caml_call7
              (_aru_[1][8],sexp_of_t$49,_arx_,of_a,sexp_of_t$43,_bi2_,_bi0_,v)}
    function sexp_of_t$114(of_a,v)
     {function _biX_(_biY_){return sexp_of_pool_slots(of_a,_biY_)}
      return caml_call2(_aru_[3][1],_biX_,v)}
    var
     null$2=_aru_[3][4],
     null$3=_aru_[3][4],
     is_null$1=_aru_[3][5],
     free$0=_aru_[14];
    function key(p,t){return caml_call3(_aru_[31],p,t,_aru_[2][3])}
    function at(p,t){return caml_call3(_aru_[31],p,t,_aru_[2][4])}
    function value$3(p,t){return caml_call3(_aru_[31],p,t,_aru_[2][5])}
    function level_index(p,t){return caml_call3(_aru_[31],p,t,_aru_[2][6])}
    function prev$5(p,t){return caml_call3(_aru_[31],p,t,_aru_[2][7])}
    function set_prev(p,t,x){return caml_call4(_aru_[33],p,t,_aru_[2][7],x)}
    function next$5(p,t){return caml_call3(_aru_[31],p,t,_aru_[2][8])}
    function set_next(p,t,x){return caml_call4(_aru_[33],p,t,_aru_[2][8],x)}
    function is_valid$0(p,t){return caml_call2(_aru_[6],p,t)}
    function invariant$12(pool,invariant_a,t)
     {function _biR_(param)
       {if(is_valid$0(pool,t))
         {caml_call1(invariant_a,value$3(pool,t));
          var n=next$5(pool,t);
          if(! caml_call1(is_null$1,n))
           {var _biW_=prev$5(pool,n);
            if(! caml_call2(_aru_[3][7],t,_biW_))
             throw [0,Assert_failure,_ar0_]}
          var p=prev$5(pool,t);
          if(! caml_call1(is_null$1,p))
           {var _biV_=next$5(pool,p);
            if(! caml_call2(_aru_[3][7],t,_biV_))
             throw [0,Assert_failure,_arZ_]}
          return 0}
        throw [0,Assert_failure,_ar1_]}
      function _biS_(param){return _ar2_}
      function _biT_(_biU_){return sexp_of_t$114(_biS_,_biU_)}
      return caml_call4(Base_Invariant[1],_ar3_,t,_biT_,_biR_)}
    var grow$0=_aru_[12],is_full$0=_aru_[13];
    function of_external_exn(pool,t)
     {if(is_valid$0(pool,t))return t;
      var
       _biO_=0,
       _biP_=0,
       _biQ_=
        [0,
         [1,
          [0,_ar5_,[0,sexp_of_t$114(function(param){return _ar4_},t),_biP_]]],
         _biO_];
      return caml_call1
              (_kM_,
               [1,
                [0,
                 caml_call1
                  (Sexplib0_Sexp_conv[7],
                   cst_Timing_wheel_Priority_queue_got_invalid_elt),
                 _biQ_]])}
    function link(pool,prev,next)
     {set_next(pool,prev,next);return set_prev(pool,next,prev)}
    function iter$26(pool,first,f)
     {var current=[0,first],continue$0=[0,1];
      for(;;)
       {if(continue$0[1])
         {var next=next$5(pool,current[1]);
          caml_call1(f,current[1]);
          if(caml_call2(_R7_,next,first))
           continue$0[1] = 0;
          else
           current[1] = next;
          continue}
        return 0}}
    function slots(r){return r[11]}
    function max_allowed_key(r){return r[10]}
    function set_max_allowed_key(r,v){r[10] = v;return 0}
    function min_allowed_key(r){return r[9]}
    function set_min_allowed_key(r,v){r[9] = v;return 0}
    function length$28(r){return r[8]}
    function set_length$0(r,v){r[8] = v;return 0}
    function num_allowed_keys(r){return r[7]}
    function min_key_in_same_slot_mask(r){return r[6]}
    function keys_per_slot(r){return r[5]}
    function bits_per_slot(r){return r[4]}
    function slots_mask(r){return r[3]}
    function bits(r){return r[2]}
    function index$1(r){return r[1]}
    function _ar6_(r,v)
     {return [0,r[1],r[2],r[3],r[4],r[5],r[6],r[7],r[8],r[9],r[10],v]}
    var
     _ar7_=0,
     slots$0=[0,[0,function(param){return 0},cst_slots,_ar7_,slots,_ar6_]];
    function _ar8_(r,v)
     {return [0,r[1],r[2],r[3],r[4],r[5],r[6],r[7],r[8],r[9],v,r[11]]}
    var
     _ar9_=[0,set_max_allowed_key],
     max_allowed_key$0=
      [0,
       [0,
        function(param){return 0},
        cst_max_allowed_key,
        _ar9_,
        max_allowed_key,
        _ar8_]];
    function _ar__(r,v)
     {return [0,r[1],r[2],r[3],r[4],r[5],r[6],r[7],r[8],v,r[10],r[11]]}
    var
     _ar$_=[0,set_min_allowed_key],
     min_allowed_key$0=
      [0,
       [0,
        function(param){return 0},
        cst_min_allowed_key,
        _ar$_,
        min_allowed_key,
        _ar__]];
    function _asa_(r,v)
     {return [0,r[1],r[2],r[3],r[4],r[5],r[6],r[7],v,r[9],r[10],r[11]]}
    var
     _asb_=[0,set_length$0],
     length$29=
      [0,[0,function(param){return 0},cst_length$0,_asb_,length$28,_asa_]];
    function _asc_(r,v)
     {return [0,r[1],r[2],r[3],r[4],r[5],r[6],v,r[8],r[9],r[10],r[11]]}
    var
     _asd_=0,
     num_allowed_keys$0=
      [0,
       [0,
        function(param){return 0},
        cst_num_allowed_keys,
        _asd_,
        num_allowed_keys,
        _asc_]];
    function _ase_(r,v)
     {return [0,r[1],r[2],r[3],r[4],r[5],v,r[7],r[8],r[9],r[10],r[11]]}
    var
     _asf_=0,
     min_key_in_same_slot_mask$0=
      [0,
       [0,
        function(param){return 0},
        cst_min_key_in_same_slot_mask,
        _asf_,
        min_key_in_same_slot_mask,
        _ase_]];
    function _asg_(r,v)
     {return [0,r[1],r[2],r[3],r[4],v,r[6],r[7],r[8],r[9],r[10],r[11]]}
    var
     _ash_=0,
     keys_per_slot$0=
      [0,
       [0,
        function(param){return 0},
        cst_keys_per_slot,
        _ash_,
        keys_per_slot,
        _asg_]];
    function _asi_(r,v)
     {return [0,r[1],r[2],r[3],v,r[5],r[6],r[7],r[8],r[9],r[10],r[11]]}
    var
     _asj_=0,
     bits_per_slot$0=
      [0,
       [0,
        function(param){return 0},
        cst_bits_per_slot,
        _asj_,
        bits_per_slot,
        _asi_]];
    function _ask_(r,v)
     {return [0,r[1],r[2],v,r[4],r[5],r[6],r[7],r[8],r[9],r[10],r[11]]}
    var
     _asl_=0,
     slots_mask$0=
      [0,[0,function(param){return 0},cst_slots_mask,_asl_,slots_mask,_ask_]];
    function _asm_(r,v)
     {return [0,r[1],v,r[3],r[4],r[5],r[6],r[7],r[8],r[9],r[10],r[11]]}
    var
     _asn_=0,
     bits$0=[0,[0,function(param){return 0},cst_bits,_asn_,bits,_asm_]];
    function _aso_(r,v)
     {return [0,v,r[2],r[3],r[4],r[5],r[6],r[7],r[8],r[9],r[10],r[11]]}
    var
     _asp_=0,
     index$2=[0,[0,function(param){return 0},cst_index,_asp_,index$1,_aso_]];
    function sexp_of_t$115(of_a,param)
     {var
       v_num_allowed_keys=param[7],
       v_min_key_in_same_slot_mask=param[6],
       v_keys_per_slot=param[5],
       v_bits_per_slot=param[4],
       v_slots_mask=param[3],
       v_bits=param[2],
       v_index=param[1],
       v_length=param[8],
       v_min_allowed_key=param[9],
       v_max_allowed_key=param[10],
       v_slots=param[11],
       arg=caml_call1(Sexplib0_Sexp_conv[23],v_slots),
       bnds=[0,[1,[0,_asq_,[0,arg,0]]],0],
       arg$0=caml_call1(sexp_of_t$49,v_max_allowed_key),
       bnds$0=[0,[1,[0,_asr_,[0,arg$0,0]]],bnds],
       arg$1=caml_call1(sexp_of_t$49,v_min_allowed_key),
       bnds$1=[0,[1,[0,_ass_,[0,arg$1,0]]],bnds$0],
       arg$2=caml_call1(sexp_of_t$43,v_length),
       bnds$2=[0,[1,[0,_ast_,[0,arg$2,0]]],bnds$1],
       arg$3=caml_call1(_arY_[1],v_num_allowed_keys),
       bnds$3=[0,[1,[0,_asu_,[0,arg$3,0]]],bnds$2],
       arg$4=caml_call1(sexp_of_t$49,v_min_key_in_same_slot_mask),
       bnds$4=[0,[1,[0,_asv_,[0,arg$4,0]]],bnds$3],
       arg$5=caml_call1(_arY_[1],v_keys_per_slot),
       bnds$5=[0,[1,[0,_asw_,[0,arg$5,0]]],bnds$4],
       arg$6=caml_call1(sexp_of_t$43,v_bits_per_slot),
       bnds$6=[0,[1,[0,_asx_,[0,arg$6,0]]],bnds$5],
       arg$7=caml_call1(sexp_of_t$49,v_slots_mask),
       bnds$7=[0,[1,[0,_asy_,[0,arg$7,0]]],bnds$6],
       arg$8=caml_call1(sexp_of_t$43,v_bits),
       bnds$8=[0,[1,[0,_asz_,[0,arg$8,0]]],bnds$7],
       arg$9=caml_call1(sexp_of_t$43,v_index),
       bnds$9=[0,[1,[0,_asA_,[0,arg$9,0]]],bnds$8];
      return [1,bnds$9]}
    function slot(t,key)
     {var _biN_=t[3];
      return caml_call1
              (to_int_exn$2,caml_call2(_zN_,caml_call2(_zH_,key,t[4]),_biN_))}
    function next_slot(t,slot)
     {return (slot + 1 | 0) & caml_call1(to_int_exn$2,t[3])}
    function min_key_in_same_slot(t,key){return caml_call2(_zN_,key,t[6])}
    function levels(r){return r[5]}
    function elt_key_lower_bound(r){return r[4]}
    function set_elt_key_lower_bound(r,v){r[4] = v;return 0}
    function min_elt$13(r){return r[3]}
    function set_min_elt(r,v){r[3] = v;return 0}
    function pool(r){return r[2]}
    function set_pool(r,v){r[2] = v;return 0}
    function length$30(r){return r[1]}
    function set_length$1(r,v){r[1] = v;return 0}
    function _asB_(r,v){return [0,r[1],r[2],r[3],r[4],v]}
    var
     _asC_=0,
     levels$0=[0,[0,function(param){return 0},cst_levels,_asC_,levels,_asB_]];
    function _asD_(r,v){return [0,r[1],r[2],r[3],v,r[5]]}
    var
     _asE_=[0,set_elt_key_lower_bound],
     elt_key_lower_bound$0=
      [0,
       [0,
        function(param){return 0},
        cst_elt_key_lower_bound,
        _asE_,
        elt_key_lower_bound,
        _asD_]];
    function _asF_(r,v){return [0,r[1],r[2],v,r[4],r[5]]}
    var
     _asG_=[0,set_min_elt],
     min_elt$14=
      [0,[0,function(param){return 0},cst_min_elt,_asG_,min_elt$13,_asF_]];
    function _asH_(r,v){return [0,r[1],v,r[3],r[4],r[5]]}
    var
     _asI_=[0,set_pool],
     pool$0=[0,[0,function(param){return 0},cst_pool,_asI_,pool,_asH_]];
    function _asJ_(r,v){return [0,v,r[2],r[3],r[4],r[5]]}
    var
     _asK_=[0,set_length$1],
     length$31=
      [0,[0,function(param){return 0},cst_length$1,_asK_,length$30,_asJ_]];
    function invariant$13(p,invariant_a,t)
     {var _biM_=of_external_exn(p[2],t);
      return invariant$12(p[2],invariant_a,_biM_)}
    function at$0(p,t)
     {var _biL_=of_external_exn(p[2],t);return at(p[2],_biL_)}
    function key$0(p,t)
     {var _biK_=of_external_exn(p[2],t);return key(p[2],_biK_)}
    function value$4(p,t)
     {var _biJ_=of_external_exn(p[2],t);return value$3(p[2],_biJ_)}
    function is_empty$17(t){return 0 === t[1]?1:0}
    function num_levels(t){return caml_call1(length$1,t[5])}
    function min_allowed_key$1(t){return caml_check_bound(t[5],0)[1][9]}
    function max_allowed_key$1(t)
     {var _biI_=num_levels(t) - 1 | 0;
      return caml_call2
              (min$2,
               max_representable,
               caml_check_bound(t[5],_biI_)[_biI_ + 1][10])}
    function internal_iter(t,f)
     {var _biA_=0 < t[1]?1:0;
      if(_biA_)
       {var
         pool=t[2],
         levels=t[5],
         _biC_=caml_call1(length$1,levels) - 1 | 0,
         _biB_=0;
        if(! (_biC_ < 0))
         {var level_index=_biB_;
          for(;;)
           {var level=caml_check_bound(levels,level_index)[level_index + 1];
            if(0 < level[8])
             {var
               slots=level[11],
               _biF_=caml_call1(length$1,slots) - 1 | 0,
               _biE_=0;
              if(! (_biF_ < 0))
               {var slot_index=_biE_;
                for(;;)
                 {var elt=caml_check_bound(slots,slot_index)[slot_index + 1];
                  if(1 - caml_call1(is_null$1,elt))iter$26(pool,elt,f);
                  var _biH_=slot_index + 1 | 0;
                  if(_biF_ !== slot_index){var slot_index=_biH_;continue}
                  break}}}
            var _biG_=level_index + 1 | 0;
            if(_biC_ !== level_index){var level_index=_biG_;continue}
            break}}
        var _biD_=0}
      else
       var _biD_=_biA_;
      return _biD_}
    function iter$27(t,f){return internal_iter(t,f)}
    function sexp_of_t$116(sexp_of_a,t)
     {var pool=t[2],r=[0,0];
      internal_iter
       (t,
        function(elt)
         {var _biy_=r[1],_biz_=value$3(pool,elt);
          r[1] = [0,[0,key(pool,elt),_biz_],_biy_];
          return 0});
      var
       v_elts=caml_call1(rev,r[1]),
       v_max_allowed_key=max_allowed_key$1(t),
       v_min_allowed_key=min_allowed_key$1(t),
       bnds=0,
       arg=
        caml_call2
         (sexp_of_t$25,
          function(param)
           {var
             v_value=param[2],
             v_key=param[1],
             arg=caml_call1(sexp_of_a,v_value),
             bnds=[0,[1,[0,_asQ_,[0,arg,0]]],0],
             arg$0=caml_call1(sexp_of_t$49,v_key),
             bnds$0=[0,[1,[0,_asR_,[0,arg$0,0]]],bnds];
            return [1,bnds$0]},
          v_elts),
       bnds$0=[0,[1,[0,_asS_,[0,arg,0]]],bnds],
       arg$0=caml_call1(sexp_of_t$49,v_max_allowed_key),
       bnds$1=[0,[1,[0,_asT_,[0,arg$0,0]]],bnds$0],
       arg$1=caml_call1(sexp_of_t$49,v_min_allowed_key),
       bnds$2=[0,[1,[0,_asU_,[0,arg$1,0]]],bnds$1];
      return [1,bnds$2]}
    function invariant$14(invariant_a,t)
     {var pool=t[2];
      function _bh$_(param)
       {function check(f){return caml_call2(Base_Invariant[2],t,f)}
        if(caml_call2(_Ar_,min_allowed_key$1(t),epoch))
         {if(caml_call2(_Aq_,min_allowed_key$1(t),max_representable))
           {var _bie_=min_allowed_key$1(t);
            if(caml_call2(_Ar_,max_allowed_key$1(t),_bie_))
             {if(caml_call2(_Aq_,max_allowed_key$1(t),max_representable))
               {var
                 levels_fun=
                  check
                   (function(levels)
                     {if(0 < num_levels(t))
                       return caml_call2
                               (iteri$0,
                                levels,
                                function(level_index$0,level)
                                 {if(level_index$0 === level[1])
                                   {var
                                     _bik_=
                                      function(param)
                                       {function check(f)
                                         {return caml_call2(Base_Invariant[2],level,f)}
                                        var
                                         slots_fun=
                                          check
                                           (function(slots)
                                             {return caml_call2
                                                      (iter$0,
                                                       slots,
                                                       function(elt)
                                                        {var _bit_=1 - caml_call1(is_null$1,elt);
                                                         return _bit_
                                                                 ?(invariant$12(pool,invariant_a,elt),
                                                                   iter$26
                                                                    (pool,
                                                                     elt,
                                                                     function(elt)
                                                                      {var _biu_=level[9];
                                                                       if(caml_call2(_Ar_,key(pool,elt),_biu_))
                                                                        {var _biv_=level[10];
                                                                         if(caml_call2(_Aq_,key(pool,elt),_biv_))
                                                                          {var _biw_=t[4];
                                                                           if(caml_call2(_Ar_,key(pool,elt),_biw_))
                                                                            {var _bix_=level[1];
                                                                             if(level_index(pool,elt) === _bix_)
                                                                              return caml_call1(invariant_a,value$3(pool,elt));
                                                                             throw [0,Assert_failure,_asV_]}
                                                                           throw [0,Assert_failure,_asW_]}
                                                                         throw [0,Assert_failure,_asX_]}
                                                                       throw [0,Assert_failure,_asY_]}))
                                                                 :_bit_})}),
                                         max_allowed_key_fun=
                                          check
                                           (function(got)
                                             {var
                                               _bis_=caml_call1(_arY_[31],level[7]),
                                               expect=add$17(level[9],_bis_);
                                              return caml_call8
                                                      (Ppx_assert_lib_Runtime[3],
                                                       pos$110,
                                                       sexp_of_t$49,
                                                       compare$36,
                                                       0,
                                                       0,
                                                       0,
                                                       expect,
                                                       got)}),
                                         min_allowed_key_fun=
                                          check
                                           (function(min_allowed_key)
                                             {if(caml_call2(_Ar_,min_allowed_key,epoch))
                                               {var
                                                 got=caml_call2(_z2_,min_allowed_key,level[5]),
                                                 sexpifier=_arY_[1],
                                                 comparator=_arY_[9];
                                                return caml_call8
                                                        (Ppx_assert_lib_Runtime[3],
                                                         pos$111,
                                                         sexpifier,
                                                         comparator,
                                                         0,
                                                         0,
                                                         0,
                                                         _arY_[24],
                                                         got)}
                                              throw [0,Assert_failure,_asZ_]}),
                                         length_fun=
                                          check
                                           (function(length)
                                             {function _bir_(n,elt)
                                               {if(caml_call1(is_null$1,elt))return n;
                                                var r=[0,0],current=[0,elt],continue$0=[0,1];
                                                for(;;)
                                                 {if(continue$0[1])
                                                   {r[1]++;
                                                    var next=next$5(pool,current[1]);
                                                    if(caml_call2(_R7_,next,elt))
                                                     continue$0[1] = 0;
                                                    else
                                                     current[1] = next;
                                                    continue}
                                                  return n + r[1] | 0}}
                                              if(length === caml_call3(fold$1,level[11],0,_bir_))return 0;
                                              throw [0,Assert_failure,_as0_]}),
                                         num_allowed_keys_fun=
                                          check
                                           (function(got)
                                             {var
                                               _biq_=caml_call1(length$1,level[11]),
                                               expect=caml_call2(_arY_[30],level[5],_biq_),
                                               sexpifier=_arY_[1],
                                               comparator=_arY_[9];
                                              return caml_call8
                                                      (Ppx_assert_lib_Runtime[3],
                                                       pos$112,
                                                       sexpifier,
                                                       comparator,
                                                       0,
                                                       0,
                                                       0,
                                                       expect,
                                                       got)}),
                                         min_key_in_same_slot_mask_fun=
                                          check
                                           (function(min_key_in_same_slot_mask)
                                             {if
                                               (caml_call2
                                                 (equal$20,min_key_in_same_slot_mask,create$45(level[4])))
                                               return 0;
                                              throw [0,Assert_failure,_as1_]}),
                                         keys_per_slot_fun=
                                          check
                                           (function(got)
                                             {var
                                               expect=num_keys(level[4]),
                                               sexpifier=_arY_[1],
                                               comparator=_arY_[9];
                                              return caml_call8
                                                      (Ppx_assert_lib_Runtime[3],
                                                       pos$113,
                                                       sexpifier,
                                                       comparator,
                                                       0,
                                                       0,
                                                       0,
                                                       expect,
                                                       got)}),
                                         bits_per_slot_fun=
                                          check
                                           (function(bits_per_slot)
                                             {if(caml_call2(_xx_,bits_per_slot,_w7_))return 0;
                                              throw [0,Assert_failure,_as2_]}),
                                         expect=create$44(level[2]),
                                         slots_mask_fun=
                                          check
                                           (function(got)
                                             {return caml_call8
                                                      (Ppx_assert_lib_Runtime[3],
                                                       pos$114,
                                                       sexp_of_t$49,
                                                       compare$36,
                                                       0,
                                                       0,
                                                       0,
                                                       expect,
                                                       got)}),
                                         bits_fun=
                                          check
                                           (function(bits)
                                             {if(caml_call2(_xu_,bits,_w7_))return 0;
                                              throw [0,Assert_failure,_as3_]}),
                                         index_fun=
                                          check
                                           (function(index)
                                             {if(0 <= index)return 0;throw [0,Assert_failure,_as4_]});
                                        caml_call1(index_fun,index$2);
                                        caml_call1(bits_fun,bits$0);
                                        caml_call1(slots_mask_fun,slots_mask$0);
                                        caml_call1(bits_per_slot_fun,bits_per_slot$0);
                                        caml_call1(keys_per_slot_fun,keys_per_slot$0);
                                        caml_call1
                                         (min_key_in_same_slot_mask_fun,min_key_in_same_slot_mask$0);
                                        caml_call1(num_allowed_keys_fun,num_allowed_keys$0);
                                        caml_call1(length_fun,length$29);
                                        caml_call1(min_allowed_key_fun,min_allowed_key$0);
                                        caml_call1(max_allowed_key_fun,max_allowed_key$0);
                                        return caml_call1(slots_fun,slots$0)},
                                     _bil_=function(param){return _as5_},
                                     _bim_=function(_bip_){return sexp_of_t$115(_bil_,_bip_)};
                                    caml_call4(Base_Invariant[1],_as6_,level,_bim_,_bik_);
                                    var _bin_=0 < level_index$0?1:0;
                                    if(_bin_)
                                     {var
                                       _bio_=level_index$0 - 1 | 0,
                                       prev_level=caml_check_bound(levels,_bio_)[_bio_ + 1],
                                       sexpifier=_arY_[1],
                                       comparator=_arY_[9];
                                      caml_call8
                                       (Ppx_assert_lib_Runtime[3],
                                        pos$115,
                                        sexpifier,
                                        comparator,
                                        0,
                                        0,
                                        0,
                                        prev_level[7],
                                        level[5]);
                                      var bound=caml_call1(succ$2,prev_level[10]);
                                      if(caml_call2(_Aq_,level[9],bound))
                                       {if(caml_call2(_Ao_,add$17(level[9],level[5]),bound))
                                         return 0;
                                        throw [0,Assert_failure,_as7_]}
                                      throw [0,Assert_failure,_as8_]}
                                    return _bin_}
                                  throw [0,Assert_failure,_as9_]});
                      throw [0,Assert_failure,_as__]}),
                 elt_key_lower_bound_fun=
                  check
                   (function(elt_key_lower_bound)
                     {if
                       (caml_call2(_Ar_,elt_key_lower_bound,min_allowed_key$1(t)))
                       {if
                         (caml_call2(_Aq_,elt_key_lower_bound,max_allowed_key$1(t)))
                         {var _bij_=1 - caml_call1(is_null$1,t[3]);
                          if(_bij_)
                           {if(caml_call2(equal$20,elt_key_lower_bound,key(t[2],t[3])))
                             return 0;
                            throw [0,Assert_failure,_as$_]}
                          return _bij_}
                        throw [0,Assert_failure,_ata_]}
                      throw [0,Assert_failure,_atb_]}),
                 min_elt_fun=
                  check
                   (function(elt)
                     {var _bih_=1 - caml_call1(is_null$1,elt);
                      if(_bih_)
                       {if(is_valid$0(t[2],elt))
                         {var _bii_=key(t[2],elt);
                          if(caml_call2(equal$20,t[4],_bii_))return 0;
                          throw [0,Assert_failure,_atc_]}
                        throw [0,Assert_failure,_atd_]}
                      return _bih_}),
                 pool_fun=
                  check
                   (function(t)
                     {function _bif_(_big_){return 0}
                      return caml_call2(_aru_[5],_bif_,t)}),
                 length_fun=
                  check
                   (function(length)
                     {if(0 <= length)return 0;throw [0,Assert_failure,_ate_]});
                caml_call1(length_fun,length$31);
                caml_call1(pool_fun,pool$0);
                caml_call1(min_elt_fun,min_elt$14);
                caml_call1(elt_key_lower_bound_fun,elt_key_lower_bound$0);
                return caml_call1(levels_fun,levels$0)}
              throw [0,Assert_failure,_atf_]}
            throw [0,Assert_failure,_atg_]}
          throw [0,Assert_failure,_ath_]}
        throw [0,Assert_failure,_ati_]}
      function of_a(param){return _atj_}
      function _bia_(param)
       {var
         v_length=param[1],
         v_pool=param[2],
         v_min_elt=param[3],
         v_elt_key_lower_bound=param[4],
         v_levels=param[5],
         bnds=0,
         arg$0=
          caml_call2
           (_iJ_,function(_bid_){return sexp_of_t$115(of_a,_bid_)},v_levels),
         bnds$0=[0,[1,[0,_asL_,[0,arg$0,0]]],bnds],
         arg$1=caml_call1(sexp_of_t$49,v_elt_key_lower_bound),
         bnds$1=[0,[1,[0,_asM_,[0,arg$1,0]]],bnds$0],
         arg$2=sexp_of_t$114(of_a,v_min_elt),
         bnds$2=[0,[1,[0,_asN_,[0,arg$2,0]]],bnds$1];
        function _bib_(_bic_){return sexp_of_pool_slots(of_a,_bic_)}
        var
         arg=caml_call2(_aru_[4],_bib_,v_pool),
         bnds$3=[0,[1,[0,_asO_,[0,arg,0]]],bnds$2],
         arg$3=caml_call1(sexp_of_t$43,v_length),
         bnds$4=[0,[1,[0,_asP_,[0,arg$3,0]]],bnds$3];
        return [1,bnds$4]}
      return caml_call4(Base_Invariant[1],_atk_,t,_bia_,_bh$_)}
    function min_elt$15(t)
     {if(is_empty$17(t))return caml_call1(null$3,0);
      if(caml_call1(is_null$1,t[3]))
       {var
         pool=t[2],
         min_elt_already_found=[0,caml_call1(null$3,0)],
         min_key_already_found=[0,caml_call1(succ$2,max_representable)],
         level_index=[0,0],
         num_levels$0=num_levels(t);
        for(;;)
         {if(level_index[1] < num_levels$0)
           {var
             _bh8_=level_index[1],
             level=caml_check_bound(t[5],_bh8_)[_bh8_ + 1];
            if(caml_call2(_Ar_,level[9],min_key_already_found[1]))
             level_index[1] = num_levels$0;
            else
             if(0 === level[8])
              level_index[1]++;
             else
              {var
                slots=level[11],
                slot_min_key=
                 [0,
                  min_key_in_same_slot(level,caml_call2(max$2,level[9],t[4]))],
                slot$0=[0,slot(level,slot_min_key[1])];
               for(;;)
                {var _bh9_=slot$0[1];
                 if
                  (caml_call1
                    (is_null$1,caml_check_bound(slots,_bh9_)[_bh9_ + 1]))
                  if
                   (caml_call2(_An_,slot_min_key[1],min_key_already_found[1]))
                   {slot$0[1] = next_slot(level,slot$0[1]);
                    slot_min_key[1] = add$17(slot_min_key[1],level[5]);
                    continue}
                 var
                  _bh__=slot$0[1],
                  first=caml_check_bound(slots,_bh__)[_bh__ + 1];
                 if(1 - caml_call1(is_null$1,first))
                  {var continue$0=[0,1],current=[0,first];
                   for(;;)
                    {if(continue$0[1])
                      {var current_key=key(pool,current[1]);
                       if(caml_call2(_An_,current_key,min_key_already_found[1]))
                        {min_elt_already_found[1] = current[1];
                         min_key_already_found[1] = current_key}
                       var
                        next=next$5(pool,current[1]),
                        switch$0=
                         caml_call2(_R7_,next,first)
                          ?0
                          :0 === level_index[1]?0:(current[1] = next,1);
                       if(! switch$0)continue$0[1] = 0;
                       continue}
                     break}}
                 level_index[1]++;
                 break}}
            continue}
          t[3] = min_elt_already_found[1];
          t[4] = min_key_already_found[1];
          return t[3]}}
      return t[3]}
    function min_elt$16(t)
     {var elt=min_elt$15(t);return caml_call1(is_null$1,elt)?0:[0,elt]}
    function min_key(t)
     {var elt=min_elt$15(t);
      return caml_call1(is_null$1,elt)?0:[0,key(t[2],elt)]}
    function add_elt(t,elt)
     {var
       pool=t[2],
       key$0=key(pool,elt),
       _bh3_=caml_call2(_Ar_,key$0,min_allowed_key$1(t)),
       _bh4_=_bh3_?caml_call2(_Aq_,key$0,max_allowed_key$1(t)):_bh3_;
      if(1 - _bh4_)
       {var
         _bhT_=0,
         _bhU_=0,
         _bhV_=
          [0,
           [1,
            [0,_atm_,[0,sexp_of_t$116(function(param){return _atl_},t),_bhU_]]],
           _bhT_],
         _bhW_=
          [0,
           [1,[0,_atn_,[0,caml_call1(sexp_of_t$49,max_allowed_key$1(t)),0]]],
           _bhV_],
         _bhX_=
          [0,
           [1,[0,_ato_,[0,caml_call1(sexp_of_t$49,min_allowed_key$1(t)),0]]],
           _bhW_],
         _bhY_=[0,[1,[0,_atp_,[0,caml_call1(sexp_of_t$49,key$0),0]]],_bhX_];
        caml_call1
         (_kM_,
          [1,
           [0,
            caml_call1
             (Sexplib0_Sexp_conv[7],
              cst_Priority_queue_add_elt_key_out_of_bounds),
            _bhY_]])}
      var level_index=[0,0];
      for(;;)
       {var _bh5_=level_index[1];
        if(caml_call2(_Ao_,key$0,caml_check_bound(t[5],_bh5_)[_bh5_ + 1][10]))
         {level_index[1]++;continue}
        var
         level_index$0=level_index[1],
         level=caml_check_bound(t[5],level_index$0)[level_index$0 + 1],
         _bh6_=caml_call2(_Ar_,key$0,level[9]),
         _bh7_=_bh6_?caml_call2(_Aq_,key$0,level[10]):_bh6_;
        if(1 - _bh7_)
         {var
           _bhZ_=0,
           _bh0_=0,
           _bh1_=
            [0,
             [1,
              [0,
               _atr_,
               [0,sexp_of_t$115(function(param){return _atq_},level),_bh0_]]],
             _bhZ_],
           _bh2_=[0,[1,[0,_ats_,[0,caml_call1(sexp_of_t$49,key$0),0]]],_bh1_];
          caml_call1
           (_kM_,
            [1,
             [0,
              caml_call1
               (Sexplib0_Sexp_conv[7],
                cst_Priority_queue_add_elt_key_out_of_level_bounds),
              _bh2_]])}
        level[8] = level[8] + 1 | 0;
        caml_call4(_aru_[33],pool,elt,_aru_[2][6],level_index$0);
        var
         slot$0=slot(level,key$0),
         slots=level[11],
         t$0=caml_check_bound(slots,slot$0)[slot$0 + 1];
        if(caml_call1(is_null$1,t$0))
         {caml_check_bound(slots,slot$0)[slot$0 + 1] = elt;
          return link(pool,elt,elt)}
        var prev=prev$5(pool,t$0);
        link(pool,prev,elt);
        return link(pool,elt,t$0)}}
    function internal_add_elt(t,elt)
     {var key$0=key(t[2],elt);
      if(caml_call2(_An_,key$0,t[4])){t[3] = elt;t[4] = key$0}
      add_elt(t,elt);
      t[1] = t[1] + 1 | 0;
      return 0}
    function ensure_valid_key(t,key)
     {var
       _bhR_=caml_call2(_An_,key,min_allowed_key$1(t)),
       _bhS_=_bhR_ || caml_call2(_Ao_,key,max_allowed_key$1(t));
      if(_bhS_)
       {var
         _bhN_=0,
         _bhO_=0,
         _bhP_=
          [0,
           [1,
            [0,_atu_,[0,sexp_of_t$116(function(param){return _att_},t),_bhO_]]],
           _bhN_],
         _bhQ_=[0,[1,[0,_atv_,[0,caml_call1(sexp_of_t$49,key),0]]],_bhP_];
        return caml_call1
                (_kM_,
                 [1,
                  [0,
                   caml_call1
                    (Sexplib0_Sexp_conv[7],
                     cst_Timing_wheel_Priority_queue_got_invalid_key),
                   _bhQ_]])}
      return _bhS_}
    function internal_add(t,key,at,value)
     {ensure_valid_key(t,key);
      if(caml_call1(is_full$0,t[2]))t[2] = caml_call2(grow$0,0,t[2]);
      var
       _bhM_=t[2],
       _bhK_=caml_call1(null$3,0),
       _bhL_=caml_call1(null$3,0),
       elt=caml_call7(_aru_[21],_bhM_,key,at,value,-1,_bhL_,_bhK_);
      internal_add_elt(t,elt);
      return elt}
    function add$18(t,key,value){return internal_add(t,key,epoch,value)}
    function increase_min_allowed_key(t,key$0,handle_removed)
     {if(caml_call2(_Ao_,key$0,max_representable))
       {var
         _bhA_=0,
         _bhB_=0,
         _bhC_=
          [0,
           [1,
            [0,_atA_,[0,sexp_of_t$116(function(param){return _atz_},t),_bhB_]]],
           _bhA_],
         _bhD_=[0,[1,[0,_atB_,[0,caml_call1(sexp_of_t$49,key$0),0]]],_bhC_];
        caml_call1
         (_kM_,
          [1,
           [0,
            caml_call1
             (Sexplib0_Sexp_conv[7],
              cst_Timing_wheel_increase_min_allowed_key_got_invalid_key),
            _bhD_]])}
      var _bhE_=caml_call2(_Ao_,key$0,min_allowed_key$1(t));
      if(_bhE_)
       {var
         level_index=[0,0],
         max_level_min_allowed_key=[0,key$0],
         levels=t[5],
         num_levels$0=num_levels(t);
        a:
        for(;;)
         {if(level_index[1] < num_levels$0)
           {var
             _bhF_=level_index[1],
             level=caml_check_bound(levels,_bhF_)[_bhF_ + 1],
             min_allowed_key_before=level[9],
             _bhG_=max_level_min_allowed_key[1],
             level_min_allowed_key=
              min_key_in_same_slot
               (level,caml_call2(min$2,_bhG_,caml_call2(max$2,level[9],t[4]))),
             level_min_allowed_key$0=[0,level_min_allowed_key];
            if(caml_call2(_Aq_,level_min_allowed_key$0[1],_bhG_))
             {var
               slot$0=[0,slot(level,level_min_allowed_key$0[1])],
               keys_per_slot=level[5],
               slots=level[11];
              for(;;)
               {if
                 (caml_call2
                   (_Aq_,
                    add$17(level_min_allowed_key$0[1],keys_per_slot),
                    _bhG_))
                 {if(0 === level[8])
                   {level_min_allowed_key$0[1]
                    =
                    largest_multiple(keys_per_slot,_bhG_);
                    continue}
                  var
                   _bhw_=slot$0[1],
                   first=caml_check_bound(slots,_bhw_)[_bhw_ + 1];
                  if(1 - caml_call1(is_null$1,first))
                   {var _bhx_=caml_call1(null$3,0),_bhy_=slot$0[1];
                    caml_check_bound(slots,_bhy_)[_bhy_ + 1] = _bhx_;
                    var pool=t[2],current=[0,first],continue$0=[0,1];
                    for(;;)
                     {if(continue$0[1])
                       {var next=next$5(pool,current[1]);
                        level[8] = level[8] - 1 | 0;
                        if(caml_call2(_Ar_,key(pool,current[1]),key$0))
                         add_elt(t,current[1]);
                        else
                         {t[1] = t[1] - 1 | 0;
                          caml_call1(handle_removed,current[1]);
                          caml_call2(free$0,pool,current[1])}
                        if(caml_call2(_R7_,next,first))
                         continue$0[1] = 0;
                        else
                         current[1] = next;
                        continue}
                      break}}
                  slot$0[1] = next_slot(level,slot$0[1]);
                  level_min_allowed_key$0[1]
                  =
                  add$17(level_min_allowed_key$0[1],keys_per_slot);
                  continue}
                if(caml_call2(_Aq_,level_min_allowed_key$0[1],_bhG_))
                 {if
                   (caml_call2
                     (_Ao_,
                      add$17(level_min_allowed_key$0[1],keys_per_slot),
                      _bhG_))
                   {level[9] = level_min_allowed_key$0[1];
                    var _bhz_=caml_call1(_arY_[31],level[7]);
                    level[10] = add$17(level_min_allowed_key$0[1],_bhz_);
                    if(caml_call2(equal$20,level[9],min_allowed_key_before))
                     level_index[1] = num_levels$0;
                    else
                     {level_index[1] = level_index[1] + 1 | 0;
                      max_level_min_allowed_key[1] = caml_call1(succ$2,level[10])}
                    continue a}
                  throw [0,Assert_failure,_atw_]}
                throw [0,Assert_failure,_atx_]}}
            throw [0,Assert_failure,_aty_]}
          var
           _bhH_=caml_call2(_Ao_,key$0,t[4]),
           _bhI_=
            _bhH_
             ?(t[3] = caml_call1(null$3,0),t[4] = min_allowed_key$1(t),0)
             :_bhH_,
           _bhJ_=_bhI_;
          break}}
      else
       var _bhJ_=_bhE_;
      return _bhJ_}
    function create$46(level_bits,param)
     {if(level_bits)
       var l=level_bits[1],level_bits$0=l;
      else
       var level_bits$0=level_bits_default;
      var
       match=
        caml_call3
         (foldi$1,
          level_bits$0,
          [0,_w7_,epoch,0],
          function(index,param,level_bits)
           {var
             levels=param[3],
             max_level_min_allowed_key=param[2],
             bits_per_slot=param[1],
             keys_per_slot=num_keys(bits_per_slot),
             num_allowed_keys=num_keys(_arB_(level_bits,bits_per_slot)),
             min_allowed_key=
              largest_multiple(keys_per_slot,max_level_min_allowed_key),
             max_allowed_key=
              add$17(min_allowed_key,caml_call1(_arY_[31],num_allowed_keys)),
             _bhs_=caml_call1(null$3,0),
             _bht_=
              caml_call2
               (create$0,caml_call1(to_int_exn$2,pow2(level_bits)),_bhs_),
             _bhu_=create$45(bits_per_slot),
             level=
              [0,
               index,
               level_bits,
               create$44(level_bits),
               bits_per_slot,
               keys_per_slot,
               _bhu_,
               num_allowed_keys,
               0,
               min_allowed_key,
               max_allowed_key,
               _bht_],
             _bhv_=caml_call1(succ$2,max_allowed_key);
            return [0,_arB_(level_bits,bits_per_slot),_bhv_,[0,level,levels]]}),
       levels=match[3],
       _bhq_=caml_call1(of_list_rev,levels),
       _bhr_=caml_call1(null$3,0);
      return [0,0,caml_call2(_aru_[35],_aru_[1][22],1),_bhr_,epoch,_bhq_]}
    function mem$15(t,elt){return is_valid$0(t[2],elt)}
    function internal_remove(t,elt)
     {var pool=t[2];
      if(caml_call2(_aru_[3][7],elt,t[3]))t[3] = caml_call1(null$3,0);
      t[1] = t[1] - 1 | 0;
      var
       _bhn_=level_index(pool,elt),
       level=caml_check_bound(t[5],_bhn_)[_bhn_ + 1];
      level[8] = level[8] - 1 | 0;
      var
       slots=level[11],
       slot$0=slot(level,key(pool,elt)),
       first=caml_check_bound(slots,slot$0)[slot$0 + 1];
      if(caml_call2(_R7_,elt,next$5(pool,elt)))
       {var _bho_=caml_call1(null$3,0);
        return caml_check_bound(slots,slot$0)[slot$0 + 1] = _bho_}
      if(caml_call2(_R7_,elt,first))
       {var _bhp_=next$5(pool,elt);
        caml_check_bound(slots,slot$0)[slot$0 + 1] = _bhp_}
      var _bhl_=next$5(pool,elt);
      set_next(pool,prev$5(pool,elt),_bhl_);
      var _bhm_=prev$5(pool,elt);
      return set_prev(pool,next$5(pool,elt),_bhm_)}
    function remove$11(t,elt)
     {var pool=t[2],elt$0=of_external_exn(pool,elt);
      internal_remove(t,elt$0);
      return caml_call2(free$0,pool,elt$0)}
    function change$7(t,elt,key,at)
     {ensure_valid_key(t,key);
      var pool=t[2],t$0=of_external_exn(pool,elt);
      internal_remove(t,t$0);
      caml_call4(_aru_[33],pool,t$0,_aru_[2][3],key);
      caml_call4(_aru_[33],pool,t$0,_aru_[2][4],at);
      return internal_add_elt(t,t$0)}
    function change_key(t,elt,key){return change$7(t,elt,key,at$0(t,elt))}
    function clear$3(t)
     {var _bhc_=1 - is_empty$17(t);
      if(_bhc_)
       {t[1] = 0;
        var
         pool=t[2],
         free_elt=function(elt){return caml_call2(free$0,pool,elt)},
         levels=t[5],
         _bhe_=caml_call1(length$1,levels) - 1 | 0,
         _bhd_=0;
        if(! (_bhe_ < 0))
         {var level_index=_bhd_;
          for(;;)
           {var level=caml_check_bound(levels,level_index)[level_index + 1];
            if(0 < level[8])
             {level[8] = 0;
              var
               slots=level[11],
               _bhh_=caml_call1(length$1,slots) - 1 | 0,
               _bhg_=0;
              if(! (_bhh_ < 0))
               {var slot_index=_bhg_;
                for(;;)
                 {var elt=caml_check_bound(slots,slot_index)[slot_index + 1];
                  if(1 - caml_call1(is_null$1,elt))
                   {iter$26(pool,elt,free_elt);
                    var _bhj_=caml_call1(null$3,0);
                    caml_check_bound(slots,slot_index)[slot_index + 1] = _bhj_}
                  var _bhk_=slot_index + 1 | 0;
                  if(_bhh_ !== slot_index){var slot_index=_bhk_;continue}
                  break}}}
            var _bhi_=level_index + 1 | 0;
            if(_bhe_ !== level_index){var level_index=_bhi_;continue}
            break}}
        var _bhf_=0}
      else
       var _bhf_=_bhc_;
      return _bhf_}
    function priority_queue(r){return r[7]}
    function alarm_upper_bound(r){return r[6]}
    function set_alarm_upper_bound(r,v){r[6] = v;return 0}
    function now_interval_num_start(r){return r[5]}
    function set_now_interval_num_start(r,v){r[5] = v;return 0}
    function now$1(r){return r[4]}
    function set_now(r,v){r[4] = v;return 0}
    function max_interval_num(r){return r[3]}
    function start(r){return r[2]}
    function config(r){return r[1]}
    function _atC_(r,v){return [0,r[1],r[2],r[3],r[4],r[5],r[6],v]}
    var
     _atD_=0,
     priority_queue$0=
      [0,
       [0,
        function(param){return 0},
        cst_priority_queue,
        _atD_,
        priority_queue,
        _atC_]];
    function _atE_(r,v){return [0,r[1],r[2],r[3],r[4],r[5],v,r[7]]}
    var
     _atF_=[0,set_alarm_upper_bound],
     alarm_upper_bound$0=
      [0,
       [0,
        function(param){return 0},
        cst_alarm_upper_bound,
        _atF_,
        alarm_upper_bound,
        _atE_]];
    function _atG_(r,v){return [0,r[1],r[2],r[3],r[4],v,r[6],r[7]]}
    var
     _atH_=[0,set_now_interval_num_start],
     now_interval_num_start$0=
      [0,
       [0,
        function(param){return 0},
        cst_now_interval_num_start,
        _atH_,
        now_interval_num_start,
        _atG_]];
    function _atI_(r,v){return [0,r[1],r[2],r[3],v,r[5],r[6],r[7]]}
    var
     _atJ_=[0,set_now],
     now$2=[0,[0,function(param){return 0},cst_now,_atJ_,now$1,_atI_]];
    function _atK_(r,v){return [0,r[1],r[2],v,r[4],r[5],r[6],r[7]]}
    var
     _atL_=0,
     max_interval_num$0=
      [0,
       [0,
        function(param){return 0},
        cst_max_interval_num,
        _atL_,
        max_interval_num,
        _atK_]];
    function _atM_(r,v){return [0,r[1],v,r[3],r[4],r[5],r[6],r[7]]}
    var
     _atN_=0,
     start$0=[0,[0,function(param){return 0},cst_start,_atN_,start,_atM_]];
    function _atO_(r,v){return [0,v,r[2],r[3],r[4],r[5],r[6],r[7]]}
    var
     _atP_=0,
     config$0=[0,[0,function(param){return 0},cst_config,_atP_,config,_atO_]];
    function sexp_of_t_now(param,t){return caml_call1(_arx_,t[4])}
    function alarm_precision$0(t){return alarm_precision(t[1])}
    function at$1(tw,t){return at$0(tw[7],t)}
    function value$5(tw,t){return value$4(tw[7],t)}
    function interval_num(tw,t){return key$0(tw[7],t)}
    function iter$28(t,f){return iter$27(t[7],f)}
    function compare$77(t1,t2){return caml_call2(compare$36,t1[1],t2[1])}
    function sexp_of_t$117(sexp_of_a,t)
     {var
       v_max_interval_num=t[3],
       v_start=t[2],
       v_config=t[1],
       v_now=t[4],
       r=[0,0];
      iter$28
       (t,
        function(a)
         {var _bhb_=r[1],_bha_=value$5(t,a);
          r[1] = [0,[0,at$1(t,a),_bha_],_bhb_];
          return 0});
      var
       v_alarms=caml_call2(sort$0,compare$77,r[1]),
       bnds=0,
       arg=
        caml_call2
         (sexp_of_t$25,
          function(param)
           {var
             v_value=param[2],
             v_at=param[1],
             arg=caml_call1(sexp_of_a,v_value),
             bnds=[0,[1,[0,_atQ_,[0,arg,0]]],0],
             arg$0=caml_call1(_arx_,v_at),
             bnds$0=[0,[1,[0,_atR_,[0,arg$0,0]]],bnds];
            return [1,bnds$0]},
          v_alarms),
       bnds$0=[0,[1,[0,_atS_,[0,arg,0]]],bnds],
       arg$0=caml_call1(_arx_,v_now),
       bnds$1=[0,[1,[0,_atT_,[0,arg$0,0]]],bnds$0],
       arg$1=caml_call1(sexp_of_t$49,v_max_interval_num),
       bnds$2=[0,[1,[0,_atU_,[0,arg$1,0]]],bnds$1],
       arg$2=caml_call1(_arx_,v_start),
       bnds$3=[0,[1,[0,_atV_,[0,arg$2,0]]],bnds$2],
       arg$3=sexp_of_t$113(v_config),
       bnds$4=[0,[1,[0,_atW_,[0,arg$3,0]]],bnds$3];
      return [1,bnds$4]}
    function length$32(t){return t[7][1]}
    function is_empty$18(t){return 0 === length$32(t)?1:0}
    function interval_num_internal(time,alarm_precision)
     {return caml_call2(_zH_,time,alarm_precision)}
    var
     Expect_test_collector$2=
      caml_call1
       (Expect_test_collector[2],
        [0,
         Expect_test_config[2],
         Expect_test_config[3],
         Expect_test_config[4],
         Expect_test_config[5],
         Expect_test_config[6]]);
    function _atX_(ppx_expect_instance_023)
     {var time=-5;
      for(;;)
       {var
         _bg8_=caml_call1(of_int$1,4),
         _bg9_=of_sexpable(caml_call1(Span$1[89],_bg8_)),
         _bg__=
          [0,
           [1,
            [0,
             _atY_,
             [0,
              caml_call1
               (sexp_of_t$43,
                caml_call1
                 (to_int_exn$2,
                  interval_num_internal(caml_call1(of_int$1,time),_bg9_))),
              0]]],
           0];
        print_s
         (0,[1,[0,[1,[0,_atZ_,[0,caml_call1(sexp_of_t$43,time),0]]],_bg__]]);
        var _bg$_=time + 1 | 0;
        if(4 !== time){var time=_bg$_;continue}
        var
         _bg7_=
          [0,
           caml_call1
            (Expect_test_common_File[1][6],cst_src_timing_wheel_ns_ml$1),
           1365,
           48020,
           48024,
           48030];
        return caml_call2
                (Expect_test_collector$2[1][1],ppx_expect_instance_023,_bg7_)}}
    var
     _at0_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_timing_wheel_ns_ml$2),
       1365,
       48020,
       48031,
       48366],
     _at3_=
      [0,
       [0,
        _at2_,
        _at1_,
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_src_timing_wheel_ns_ml$3),
         1365,
         48020,
         48024,
         48030],
        _at0_],
       0],
     _at5_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_timing_wheel_ns_ml$5),
       1352,
       47554,
       47554,
       48368],
     _at6_=
      caml_call1
       (Expect_test_common_File[4][3],cst_7e447cca016da4bfdbc04d379a40f0f8);
    caml_call8
     (Expect_test_collector$2[2],
      _at6_,
      _at5_,
      cst_src_timing_wheel_ns_ml$4,
      _at4_,
      0,
      _at3_,
      Inline_test_config,
      _atX_);
    function interval_num_unchecked(t,time)
     {return interval_num_internal(time,t[1][1])}
    function interval_num$0(t,time)
     {if(caml_call2(_An_,time,epoch))
       {var _bg5_=[0,[1,[0,_at7_,[0,caml_call1(_arx_,time),0]]],0];
        caml_call1
         (_kM_,
          [1,
           [0,
            caml_call1
             (Sexplib0_Sexp_conv[7],
              cst_Timing_wheel_interval_num_got_time_too_far_in_the_past),
            _bg5_]])}
      if(caml_call2(_Ao_,time,max_value$6))
       {var _bg6_=[0,[1,[0,_at8_,[0,caml_call1(_arx_,time),0]]],0];
        caml_call1
         (_kM_,
          [1,
           [0,
            caml_call1
             (Sexplib0_Sexp_conv[7],
              cst_Timing_wheel_interval_num_got_time_too_far_in_the_future),
            _bg6_]])}
      return interval_num_unchecked(t,time)}
    function interval_num_start_unchecked(t,interval_num)
     {return caml_call2(_zI_,interval_num,t[1][1])}
    function interval_num_start(t,interval_num)
     {if(caml_call2(_An_,interval_num,epoch))
       {var
         _bg1_=[0,[1,[0,_at9_,[0,caml_call1(sexp_of_t$49,epoch),0]]],0],
         _bg2_=
          [0,[1,[0,_at__,[0,caml_call1(sexp_of_t$49,interval_num),0]]],_bg1_];
        caml_call1
         (_kM_,
          [1,
           [0,
            caml_call1
             (Sexplib0_Sexp_conv[7],
              cst_Timing_wheel_interval_num_start_got_too_small_interval_num),
            _bg2_]])}
      if(caml_call2(_Ao_,interval_num,t[3]))
       {var
         _bg3_=[0,[1,[0,_at$_,[0,caml_call1(sexp_of_t$49,t[3]),0]]],0],
         _bg4_=
          [0,[1,[0,_aua_,[0,caml_call1(sexp_of_t$49,interval_num),0]]],_bg3_];
        caml_call1
         (_kM_,
          [1,
           [0,
            caml_call1
             (Sexplib0_Sexp_conv[7],
              cst_Timing_wheel_interval_num_start_got_too_large_interval_num),
            _bg4_]])}
      return interval_num_start_unchecked(t,interval_num)}
    function compute_alarm_upper_bound(t)
     {var _bg0_=caml_call1(succ$2,max_allowed_key$1(t[7]));
      return interval_num_start_unchecked(t,caml_call2(min$2,t[3],_bg0_))}
    function now_interval_num(t){return min_allowed_key$1(t[7])}
    function interval_start(t,time)
     {return interval_num_start_unchecked(t,interval_num$0(t,time))}
    function invariant$15(invariant_a,t)
     {function _bgQ_(param)
       {function check(f){return caml_call2(Base_Invariant[2],t,f)}
        var
         priority_queue_fun=
          check(function(_bgZ_){return invariant$14(invariant_a,_bgZ_)}),
         alarm_upper_bound_fun=
          check
           (function(got)
             {var expect=compute_alarm_upper_bound(t);
              return caml_call8
                      (Ppx_assert_lib_Runtime[3],
                       pos$116,
                       _arx_,
                       compare$36,
                       0,
                       0,
                       0,
                       expect,
                       got)}),
         now_interval_num_start_fun=
          check
           (function(got)
             {var expect=interval_num_start(t,now_interval_num(t));
              return caml_call8
                      (Ppx_assert_lib_Runtime[3],
                       pos$117,
                       _arx_,
                       compare$36,
                       0,
                       0,
                       0,
                       expect,
                       got)}),
         now_fun=
          check
           (function(now)
             {if(caml_call2(_Ar_,now,t[2]))
               {if(caml_call2(_Aq_,now,max_value$6))
                 {var _bgY_=min_allowed_key$1(t[7]);
                  if(caml_call2(equal$20,interval_num$0(t,t[4]),_bgY_))
                   return 0;
                  throw [0,Assert_failure,_aub_]}
                throw [0,Assert_failure,_auc_]}
              throw [0,Assert_failure,_aud_]}),
         max_interval_num_fun=
          check
           (function(expect)
             {var got=interval_num$0(t,max_value$6);
              caml_call8
               (Ppx_assert_lib_Runtime[3],
                pos$118,
                sexp_of_t$49,
                compare$36,
                0,
                0,
                0,
                expect,
                got);
              var got$0=interval_num$0(t,interval_num_start(t,expect));
              return caml_call8
                      (Ppx_assert_lib_Runtime[3],
                       pos$119,
                       sexp_of_t$49,
                       compare$36,
                       0,
                       0,
                       0,
                       expect,
                       got$0)}),
         start_fun=
          check
           (function(start)
             {if(caml_call2(_Ar_,start,epoch))
               {if(caml_call2(_Aq_,start,max_value$6))return 0;
                throw [0,Assert_failure,_aue_]}
              throw [0,Assert_failure,_auf_]}),
         config_fun=check(invariant$11);
        caml_call1(config_fun,config$0);
        caml_call1(start_fun,start$0);
        caml_call1(max_interval_num_fun,max_interval_num$0);
        caml_call1(now_fun,now$2);
        caml_call1(now_interval_num_start_fun,now_interval_num_start$0);
        caml_call1(alarm_upper_bound_fun,alarm_upper_bound$0);
        caml_call1(priority_queue_fun,priority_queue$0);
        return iter$28
                (t,
                 function(alarm)
                  {var _bgU_=interval_num$0(t,at$1(t,alarm));
                   if(caml_call2(equal$20,interval_num(t,alarm),_bgU_))
                    {var _bgV_=interval_start(t,t[4]);
                     if(caml_call2(_Ar_,interval_start(t,at$1(t,alarm)),_bgV_))
                      {var _bgW_=alarm_precision$0(t),_bgX_=diff$7(t[4],_bgW_);
                       if(caml_call2(_Ao_,at$1(t,alarm),_bgX_))return 0;
                       throw [0,Assert_failure,_aug_]}
                     throw [0,Assert_failure,_auh_]}
                   throw [0,Assert_failure,_aui_]})}
      function _bgR_(param){return _auj_}
      function _bgS_(_bgT_){return sexp_of_t$117(_bgR_,_bgT_)}
      return caml_call4(Base_Invariant[1],_auk_,t,_bgS_,_bgQ_)}
    function advance_clock(t,to,handle_fired)
     {if(caml_call2(_Ao_,to,max_value$6))
       {var
         _bgM_=[0,[1,[0,_aul_,[0,caml_call1(_arx_,max_value$6),0]]],0],
         _bgN_=[0,[1,[0,_aum_,[0,caml_call1(_arx_,to),0]]],_bgM_];
        caml_call1
         (_kM_,
          [1,
           [0,
            caml_call1
             (Sexplib0_Sexp_conv[7],
              cst_Timing_wheel_advance_clock_got_time_too_far_in_the_future),
            _bgN_]])}
      var _bgO_=caml_call2(_Ao_,to,t[4]);
      if(_bgO_)
       {t[4] = to;
        var key=interval_num_unchecked(t,to);
        t[5] = interval_num_start_unchecked(t,key);
        increase_min_allowed_key(t[7],key,handle_fired);
        t[6] = compute_alarm_upper_bound(t);
        var _bgP_=0}
      else
       var _bgP_=_bgO_;
      return _bgP_}
    function create$47(config,start)
     {if(caml_call2(_An_,start,epoch))
       {var _bgK_=[0,[1,[0,_aun_,[0,caml_call1(_arx_,start),0]]],0];
        caml_call1
         (_kM_,
          [1,
           [0,
            caml_call1
             (Sexplib0_Sexp_conv[7],
              cst_Timing_wheel_ns_create_got_start_before_the_epoch),
            _bgK_]])}
      var
       _bgL_=create$46([0,config[2]],0),
       t=
        [0,
         config,
         start,
         interval_num_internal(max_value$6,config[1]),
         min_value$6,
         min_value$6,
         max_value$6,
         _bgL_];
      advance_clock(t,start,function(param){throw [0,Assert_failure,_auo_]});
      return t}
    function add_at_interval_num(t,at,value)
     {var _bgJ_=interval_num_start(t,at);
      return internal_add(t[7],at,_bgJ_,value)}
    function ensure_can_schedule_alarm(t,at)
     {if(caml_call2(_Ar_,at,t[6]))
       {var
         _bgE_=[0,[1,[0,_aup_,[0,caml_call1(_arx_,t[6]),0]]],0],
         _bgF_=[0,[1,[0,_auq_,[0,caml_call1(_arx_,at),0]]],_bgE_];
        caml_call1
         (_kM_,
          [1,
           [0,
            caml_call1
             (Sexplib0_Sexp_conv[7],
              cst_Timing_wheel_cannot_schedule_alarm_that_far_in_the_future),
            _bgF_]])}
      var _bgI_=caml_call2(_An_,at,t[5]);
      if(_bgI_)
       {var
         _bgG_=[0,[1,[0,_aur_,[0,caml_call1(_arx_,t[5]),0]]],0],
         _bgH_=[0,[1,[0,_aus_,[0,caml_call1(_arx_,at),0]]],_bgG_];
        return caml_call1
                (_kM_,
                 [1,
                  [0,
                   caml_call1
                    (Sexplib0_Sexp_conv[7],
                     cst_Timing_wheel_cannot_schedule_alarm_before_start_of_current_interval),
                   _bgH_]])}
      return _bgI_}
    function add$19(t,at,value)
     {ensure_can_schedule_alarm(t,at);
      var _bgD_=interval_num_unchecked(t,at);
      return internal_add(t[7],_bgD_,at,value)}
    function remove$12(t,alarm){return remove$11(t[7],alarm)}
    function clear$4(t){return clear$3(t[7])}
    function mem$16(t,alarm){return mem$15(t[7],alarm)}
    function reschedule_gen(t,alarm,key,at)
     {if(1 - mem$16(t,alarm))
       caml_call1
        (failwith,
         cst_Timing_wheel_ns_cannot_reschedule_alarm_not_in_timing_wheel);
      ensure_can_schedule_alarm(t,at);
      return change$7(t[7],alarm,key,at)}
    function reschedule(t,alarm,at)
     {return reschedule_gen(t,alarm,interval_num_unchecked(t,at),at)}
    function reschedule_at_interval_num(t,alarm,at)
     {return reschedule_gen(t,alarm,at,interval_num_start(t,at))}
    function min_alarm_interval_num(t)
     {var elt=min_elt$15(t[7]);
      return caml_call1(is_null$1,elt)?0:[0,key(t[7][2],elt)]}
    function min_alarm_interval_num_exn(t)
     {var elt=min_elt$15(t[7]);
      if(caml_call1(is_null$1,elt))
       {var
         _bgA_=0,
         _bgB_=0,
         _bgC_=
          [0,
           [1,
            [0,_auu_,[0,sexp_of_t$117(function(param){return _aut_},t),_bgB_]]],
           _bgA_];
        return caml_call1
                (_kM_,
                 [1,
                  [0,
                   caml_call1
                    (Sexplib0_Sexp_conv[7],
                     cst_Timing_wheel_min_alarm_interval_num_exn_of_empty_timing_wheel),
                   _bgC_]])}
      return key(t[7][2],elt)}
    function max_alarm_time_in_list(t,elt)
     {var
       pool=t[7][2],
       with_key=key(pool,elt),
       max_alarm_time=[0,epoch],
       current=[0,elt],
       continue$0=[0,1];
      for(;;)
       {if(continue$0[1])
         {var next=next$5(pool,current[1]);
          if(caml_call2(equal$20,key(pool,current[1]),with_key))
           {var _bgz_=max_alarm_time[1];
            max_alarm_time[1] = caml_call2(max$2,at(pool,current[1]),_bgz_)}
          if(caml_call2(_R7_,next,elt))
           continue$0[1] = 0;
          else
           current[1] = next;
          continue}
        return max_alarm_time[1]}}
    function max_alarm_time_in_min_interval(t)
     {var elt=min_elt$15(t[7]);
      return caml_call1(is_null$1,elt)?0:[0,max_alarm_time_in_list(t,elt)]}
    function max_alarm_time_in_min_interval_exn(t)
     {var elt=min_elt$15(t[7]);
      if(caml_call1(is_null$1,elt))
       {var
         _bgw_=0,
         _bgx_=0,
         _bgy_=
          [0,
           [1,
            [0,_auw_,[0,sexp_of_t$117(function(param){return _auv_},t),_bgx_]]],
           _bgw_];
        caml_call1
         (_kM_,
          [1,
           [0,
            caml_call1
             (Sexplib0_Sexp_conv[7],
              cst_Timing_wheel_ns_max_alarm_time_in_min_interval_exn_of_empty_timing_wheel),
            _bgy_]])}
      return max_alarm_time_in_list(t,elt)}
    function next_alarm_fires_at_internal(t,elt)
     {var key$0=key(t[7][2],elt);
      return interval_num_start(t,caml_call1(succ$2,key$0))}
    function next_alarm_fires_at(t)
     {var elt=min_elt$15(t[7]);
      return caml_call1(is_null$1,elt)
              ?0
              :[0,next_alarm_fires_at_internal(t,elt)]}
    function next_alarm_fires_at_exn(t)
     {var elt=min_elt$15(t[7]);
      if(caml_call1(is_null$1,elt))
       {var
         _bgt_=0,
         _bgu_=0,
         _bgv_=
          [0,
           [1,
            [0,_auy_,[0,sexp_of_t$117(function(param){return _aux_},t),_bgu_]]],
           _bgt_];
        caml_call1
         (_kM_,
          [1,
           [0,
            caml_call1
             (Sexplib0_Sexp_conv[7],
              cst_Timing_wheel_next_alarm_fires_at_exn_of_empty_timing_wheel),
            _bgv_]])}
      return next_alarm_fires_at_internal(t,elt)}
    function fire_past_alarms(t,handle_fired)
     {var
       _bgr_=t[4],
       key=now_interval_num(t),
       _bgs_=t[7],
       level=caml_check_bound(_bgs_[5],0)[1],
       _bgn_=0 < level[8]?1:0;
      if(_bgn_)
       {var
         slot$0=slot(level,key),
         slots=level[11],
         pool=_bgs_[2],
         first=[0,caml_check_bound(slots,slot$0)[slot$0 + 1]],
         _bgo_=1 - caml_call1(is_null$1,first[1]);
        if(_bgo_)
         {var current=[0,first[1]],continue$0=[0,1];
          for(;;)
           {if(continue$0[1])
             {var elt=current[1],next=next$5(pool,elt);
              if(caml_call2(_R7_,next,first[1]))
               continue$0[1] = 0;
              else
               current[1] = next;
              if(caml_call2(_Aq_,at(pool,elt),_bgr_))
               {caml_call1(handle_fired,elt);
                internal_remove(_bgs_,elt);
                caml_call2(free$0,pool,elt);
                first[1] = caml_check_bound(slots,slot$0)[slot$0 + 1]}
              continue}
            var _bgp_=0;
            break}}
        else
         var _bgp_=_bgo_;
        var _bgq_=_bgp_}
      else
       var _bgq_=_bgn_;
      return _bgq_}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$418);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Timing_wheel_ns=
      [0,
       [0,
        compare$36,
        _arx_,
        [0,
         Span$1[20],
         Span$1[97],
         Span$1[13],
         Span$1[14],
         Span$1[15],
         Span$1[16],
         Span$1[17],
         Span$1[18],
         Span$1[23],
         Span$1[24],
         Span$1[25],
         Span$1[26],
         Span$1[27],
         Span$1[28],
         Span$1[29],
         Span$1[30],
         Span$1[31],
         Span$1[32],
         Span$1[33],
         Span$1[34],
         Span$1[19],
         Span$1[45],
         Span$1[70]],
        _Ar_,
        _Aq_,
        _Ap_,
        _Ao_,
        _An_,
        _Am_,
        equal$20,
        epoch,
        add$14,
        diff$7,
        diff$7],
       [0,
        compare$30,
        sexp_of_t$111,
        equal$43,
        of_sexpable,
        of_sexpable,
        to_sexpable,
        one_nanosecond,
        about_one_day,
        about_one_microsecond,
        about_one_millisecond,
        about_one_second,
        mul,
        div$0,
        _arJ_],
       sexp_of_t$117,
       sexp_of_t_now,
       [0,
        _arY_,
        sexp_of_t$49,
        _Ar_,
        _Aq_,
        _Ap_,
        _Ao_,
        _An_,
        _Am_,
        equal$20,
        ascending$2,
        descending$2,
        between$2,
        clamp_exn$2,
        clamp$2,
        comparator$9,
        validate_lbound$2,
        validate_ubound$2,
        validate_bound$2,
        Replace_polymorphic_compare$1,
        _arV_,
        _arT_,
        compare$36,
        _Av_,
        _Au_,
        hashable$1,
        _arR_,
        _arQ_,
        Hash_queue$1,
        max$2,
        min$2,
        epoch,
        one$2,
        _zv_,
        _zw_,
        max_representable,
        of_int63$2,
        to_int63$1,
        of_int$1,
        to_int_exn$2,
        add$17,
        sub$11,
        diff$9,
        succ$2,
        pred$2,
        _z2_],
       [0,sexp_of_t$114,null$2,at$1,interval_num,value$5],
       invariant$15,
       [0,
        t_of_sexp$98,
        sexp_of_t$110,
        f$0,
        max_num_bits,
        create_exn$0,
        level_bits_default,
        num_bits$6],
       [0,
        t_of_sexp$100,
        sexp_of_t$113,
        invariant$11,
        create$43,
        alarm_precision,
        level_bits,
        durations,
        microsecond_precision],
       create$47,
       alarm_precision$0,
       now$1,
       start,
       is_empty$18,
       length$32,
       iter$28,
       interval_num$0,
       now_interval_num,
       interval_num_start,
       interval_start,
       advance_clock,
       fire_past_alarms,
       alarm_upper_bound,
       add$19,
       add_at_interval_num,
       mem$16,
       remove$12,
       reschedule,
       reschedule_at_interval_num,
       clear$4,
       min_alarm_interval_num,
       min_alarm_interval_num_exn,
       max_alarm_time_in_min_interval,
       max_alarm_time_in_min_interval_exn,
       next_alarm_fires_at,
       next_alarm_fires_at_exn,
       [0,
        sexp_of_t$116,
        [0,
         _arY_,
         sexp_of_t$49,
         _Ar_,
         _Aq_,
         _Ap_,
         _Ao_,
         _An_,
         _Am_,
         equal$20,
         ascending$2,
         descending$2,
         between$2,
         clamp_exn$2,
         clamp$2,
         comparator$9,
         validate_lbound$2,
         validate_ubound$2,
         validate_bound$2,
         Replace_polymorphic_compare$1,
         _arV_,
         _arT_,
         compare$36,
         _Av_,
         _Au_,
         hashable$1,
         _arR_,
         _arQ_,
         Hash_queue$1,
         max$2,
         min$2,
         epoch,
         one$2,
         _zv_,
         _zw_,
         max_representable,
         of_int63$2,
         to_int63$1,
         of_int$1,
         to_int_exn$2,
         add$17,
         sub$11,
         diff$9,
         succ$2,
         pred$2,
         _z2_],
        [0,sexp_of_t$114,invariant$13,key$0,value$4],
        invariant$14,
        create$46,
        length$30,
        is_empty$17,
        min_allowed_key$1,
        max_allowed_key$1,
        min_elt$16,
        min_key,
        add$18,
        remove$11,
        change_key,
        clear$3,
        mem$15,
        increase_min_allowed_key,
        iter$27]];
    caml_register_global
     (7543,Core_kernel_Timing_wheel_ns,"Core_kernel__Timing_wheel_ns");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$419);
    caml_call1(Expect_test_collector[4][1],cst_src_thread_safe_queue_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$420,cst$220);
    function is_none$2(t){return caml_call2(_R7_,t,none)}
    function is_some$2(t){return 1 - is_none$2(t)}
    function _auz_(param){return is_none$2(none)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[4],
      Inline_test_config,
      cst_is_none_none,
      0,
      cst_src_thread_safe_queue_ml$0,
      45,
      2,
      27,
      _auz_);
    function _auA_(param){return is_some$2(0)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[4],
      Inline_test_config,
      cst_is_some_some,
      0,
      cst_src_thread_safe_queue_ml$1,
      47,
      2,
      32,
      _auA_);
    function value_exn$0(t)
     {if(is_none$2(t))caml_call1(failwith,cst_Uopt_value_exn);return t}
    function sexp_of_t$118(sexp_of_a,v1)
     {if(is_none$2(v1))return caml_call1(sexp_of_t$58,cst_None$3);
      var v0$0=caml_call1(sexp_of_t$58,v0),v1$0=caml_call1(sexp_of_a,v1);
      return [1,[0,v0$0,[0,v1$0,0]]]}
    function sexp_of_t$119(of_a,param)
     {var
       v_value=param[1],
       v_next=param[2],
       arg=caml_call1(Sexplib0_Sexp_conv[23],v_next),
       bnds=[0,[1,[0,_auB_,[0,arg,0]]],0],
       arg$0=sexp_of_t$118(of_a,v_value),
       bnds$0=[0,[1,[0,_auC_,[0,arg$0,0]]],bnds];
      return [1,bnds$0]}
    function create$48(param){return [0,none,none]}
    function unused_elts(r){return r[4]}
    function set_unused_elts(r,v){r[4] = v;return 0}
    function back(r){return r[3]}
    function set_back(r,v){r[3] = v;return 0}
    function front(r){return r[2]}
    function set_front(r,v){r[2] = v;return 0}
    function length$33(r){return r[1]}
    function set_length$2(r,v){r[1] = v;return 0}
    function _auD_(r,v){return [0,r[1],r[2],r[3],v]}
    var
     _auE_=[0,set_unused_elts],
     unused_elts$0=
      [0,
       [0,function(param){return 0},cst_unused_elts,_auE_,unused_elts,_auD_]];
    function _auF_(r,v){return [0,r[1],r[2],v,r[4]]}
    var
     _auG_=[0,set_back],
     back$0=[0,[0,function(param){return 0},cst_back,_auG_,back,_auF_]];
    function _auH_(r,v){return [0,r[1],v,r[3],r[4]]}
    var
     _auI_=[0,set_front],
     front$0=[0,[0,function(param){return 0},cst_front,_auI_,front,_auH_]];
    function _auJ_(r,v){return [0,v,r[2],r[3],r[4]]}
    var
     _auK_=[0,set_length$2],
     length$34=
      [0,[0,function(param){return 0},cst_length$2,_auK_,length$33,_auJ_]];
    function sexp_of_t$120(of_a,param)
     {var
       v_length=param[1],
       v_front=param[2],
       v_back=param[3],
       v_unused_elts=param[4],
       bnds=0,
       arg=
        sexp_of_t$118
         (function(_bgm_){return sexp_of_t$119(of_a,_bgm_)},v_unused_elts),
       bnds$0=[0,[1,[0,_auL_,[0,arg,0]]],bnds],
       arg$0=sexp_of_t$119(of_a,v_back),
       bnds$1=[0,[1,[0,_auM_,[0,arg$0,0]]],bnds$0],
       arg$1=sexp_of_t$119(of_a,v_front),
       bnds$2=[0,[1,[0,_auN_,[0,arg$1,0]]],bnds$1],
       arg$2=caml_call1(sexp_of_t$43,v_length),
       bnds$3=[0,[1,[0,_auO_,[0,arg$2,0]]],bnds$2];
      return [1,bnds$3]}
    function invariant$16(invariant_a,t)
     {function _bgi_(param)
       {function check(f){return caml_call2(Base_Invariant[2],t,f)}
        var
         unused_elts_fun=
          check
           (function(unused_elts)
             {var r=[0,unused_elts];
              for(;;)
               {if(is_some$2(r[1]))
                 {var elt=value_exn$0(r[1]);
                  r[1] = elt[2];
                  if(is_none$2(elt[1]))continue;
                  throw [0,Assert_failure,_auP_]}
                return 0}}),
         back_fun=
          check
           (function(back)
             {if(is_none$2(back[1]))return 0;throw [0,Assert_failure,_auQ_]}),
         front_fun=
          check
           (function(front)
             {var i=[0,t[1]],r=[0,front];
              for(;;)
               {if(0 < i[1])
                 {i[1] += -1;
                  var elt=r[1];
                  r[1] = value_exn$0(elt[2]);
                  if(is_some$2(elt[1]))continue;
                  throw [0,Assert_failure,_auR_]}
                if(caml_call2(_R7_,r[1],t[3]))return 0;
                throw [0,Assert_failure,_auS_]}}),
         length_fun=
          check
           (function(length)
             {if(0 <= length)return 0;throw [0,Assert_failure,_auT_]});
        caml_call1(length_fun,length$34);
        caml_call1(front_fun,front$0);
        caml_call1(back_fun,back$0);
        return caml_call1(unused_elts_fun,unused_elts$0)}
      function _bgj_(param){return _auU_}
      function _bgk_(_bgl_){return sexp_of_t$120(_bgj_,_bgl_)}
      return caml_call4(Base_Invariant[1],_auV_,t,_bgk_,_bgi_)}
    function create$49(param){var elt=create$48(0);return [0,0,elt,elt,none]}
    function enqueue$0(t,a)
     {if(is_some$2(t[4]))
       {var _bgh_=t[4];t[4] = _bgh_[2];var new_back=_bgh_}
      else
       var new_back=create$48(0);
      t[1] = t[1] + 1 | 0;
      t[3][1] = a;
      t[3][2] = new_back;
      t[3] = new_back;
      return 0}
    function dequeue_exn$0(t)
     {if(0 === t[1])
       {var _bgf_=function(param){return _auW_};
        failwiths
         (0,
          _auX_,
          cst_Thread_safe_queue_dequeue_exn_of_empty_queue,
          t,
          function(_bgg_){return sexp_of_t$120(_bgf_,_bgg_)})}
      var elt=t[2],a=elt[1];
      t[2] = elt[2];
      t[1] = t[1] - 1 | 0;
      elt[1] = none;
      elt[2] = t[4];
      t[4] = elt;
      return a}
    function clear_internal_pool(t){t[4] = none;return 0}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$421);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Thread_safe_queue=
      [0,
       sexp_of_t$120,
       invariant$16,
       create$49,
       length$33,
       enqueue$0,
       dequeue_exn$0,
       clear_internal_pool];
    caml_register_global
     (7544,Core_kernel_Thread_safe_queue,"Core_kernel__Thread_safe_queue");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$422);
    caml_call1(Expect_test_collector[4][1],cst_src_substring_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$423,cst$221);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$424);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Substring_intf=[0];
    caml_register_global
     (7545,Core_kernel_Substring_intf,"Core_kernel__Substring_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$425);
    caml_call1(Expect_test_collector[4][1],cst_src_make_substring_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$426,cst$222);
    function string_bytes(src,src_pos,src_len,dst,opt,param)
     {if(opt)var sth=opt[1],dst_pos=sth;else var dst_pos=0;
      var
       match=caml_call3(_hY_,src_pos,src_len,caml_ml_string_length(src)),
       len=match[2],
       src_pos$0=match[1];
      return caml_call5(Base_Bytes[31][1],src,src_pos$0,dst,dst_pos,len)}
    var
     string_bigstring=From_string$0[2],
     bytes_bigstring=From_bytes[2],
     bigstring_string=To_bytes[2],
     bigstring_bytes=To_bytes[2],
     Blit=
      [0,
       string_bytes,
       bigstring_string,
       string_bytes,
       blito$2,
       bigstring_bytes,
       string_bigstring,
       bytes_bigstring,
       blito$3];
    function F(Base)
     {function base(t){return t[1]}
      function pos(t){return t[2]}
      function length(t){return t[3]}
      function is_empty(t){return caml_call2(_xr_,t[3],0)}
      function base_of_string(s)
       {var len=caml_ml_string_length(s),buf=caml_call1(Base[1],len);
        caml_call6(Base[6],s,0,0,buf,0,0);
        return buf}
      function create(pos,len,base)
       {var
         match=caml_call3(_hY_,pos,len,caml_call1(Base[2],base)),
         len$0=match[2],
         pos$0=match[1];
        return [0,base,pos$0,len$0]}
      function get(t,i)
       {if(0 <= i)if(i < t[3])return caml_call2(Base[9],t[1],t[2] + i | 0);
        throw [0,Invalid_argument,cst_index_out_of_bounds]}
      function _beQ_(param)
       {var hello=base_of_string(cst_hello);
        function _bga_(param)
         {var lo=create(_auZ_,_auY_,hello);
          return caml_call2(equal$22,get(lo,1),111)}
        caml_call8
         (Ppx_inline_test_lib_Runtime[4],
          Inline_test_config,
          cst_Char_equal_get_lo_1_o,
          0,
          cst_src_make_substring_ml$0,
          122,
          6,
          99,
          _bga_);
        function _bgb_(param)
         {function _bge_(param){return get(create(_au1_,_au0_,hello),3)}
          return caml_call1(Base_Exn[16],_bge_)}
        caml_call8
         (Ppx_inline_test_lib_Runtime[4],
          Inline_test_config,
          cst_Exn_does_raise_fun_get_create_pos_1,
          0,
          cst_src_make_substring_ml$1,
          126,
          6,
          80,
          _bgb_);
        function _bgc_(param)
         {function _bgd_(param){return get(create(0,0,hello),-1)}
          return caml_call1(Base_Exn[16],_bgd_)}
        caml_call8
         (Ppx_inline_test_lib_Runtime[4],
          Inline_test_config,
          cst_Exn_does_raise_fun_get_create_hello,
          0,
          cst_src_make_substring_ml$2,
          127,
          6,
          69,
          _bgc_);
        return 0}
      caml_call8
       (Ppx_inline_test_lib_Runtime[6],
        Inline_test_config,
        cst_get$0,
        0,
        cst_src_make_substring_ml$3,
        118,
        2,
        346,
        _beQ_);
      function sub(pos,len,t)
       {var match=caml_call3(_hY_,pos,len,t[3]),len$0=match[2],pos$0=match[1];
        return [0,t[1],t[2] + pos$0 | 0,len$0]}
      function _beR_(param)
       {var base=base_of_string(cst_012345),t=create(_au3_,_au2_,base);
        function _bfY_(param){sub(_au5_,_au4_,t);return 0}
        caml_call8
         (Ppx_inline_test_lib_Runtime[5],
          Inline_test_config,
          cst_ignore_sub_pos_0_len_4_t_t,
          0,
          cst_src_make_substring_ml$4,
          143,
          6,
          56,
          _bfY_);
        function _bfZ_(param)
         {function _bf$_(param){return sub(_au7_,_au6_,t)}
          return caml_call1(Base_Exn[16],_bf$_)}
        caml_call8
         (Ppx_inline_test_lib_Runtime[4],
          Inline_test_config,
          cst_Exn_does_raise_fun_sub_pos_0_len_5_t,
          0,
          cst_src_make_substring_ml$5,
          144,
          6,
          65,
          _bfZ_);
        function _bf0_(param)
         {function _bf__(param){return sub(_au9_,_au8_,t)}
          return caml_call1(Base_Exn[16],_bf__)}
        caml_call8
         (Ppx_inline_test_lib_Runtime[4],
          Inline_test_config,
          cst_Exn_does_raise_fun_sub_pos_1_len_4_t,
          0,
          cst_src_make_substring_ml$6,
          145,
          6,
          65,
          _bf0_);
        function _bf1_(param)
         {var t2=sub(_au$_,_au__,t);
          function _bf8_(_bf9_){return get(t2,_bf9_)}
          return caml_string_equal(caml_call2(_Hj_,t2[3],_bf8_),cst_234)}
        caml_call8
         (Ppx_inline_test_lib_Runtime[4],
          Inline_test_config,
          cst_String_init_length_t2_f_get_t2_234,
          0,
          cst_src_make_substring_ml$7,
          147,
          6,
          110,
          _bf1_);
        function _bf2_(param)
         {var t2=sub(_ava_,0,t);
          function _bf6_(_bf7_){return get(t2,_bf7_)}
          return caml_string_equal(caml_call2(_Hj_,t2[3],_bf6_),cst_4)}
        caml_call8
         (Ppx_inline_test_lib_Runtime[4],
          Inline_test_config,
          cst_String_init_length_t2_f_get_t2_4,
          0,
          cst_src_make_substring_ml$8,
          151,
          6,
          101,
          _bf2_);
        function _bf3_(param){sub(_avc_,_avb_,t);return 0}
        caml_call8
         (Ppx_inline_test_lib_Runtime[5],
          Inline_test_config,
          cst_empty_substring,
          0,
          cst_src_make_substring_ml$9,
          155,
          6,
          72,
          _bf3_);
        function _bf4_(param)
         {function _bf5_(param){return sub(_ave_,_avd_,t)}
          return caml_call1(Base_Exn[16],_bf5_)}
        caml_call8
         (Ppx_inline_test_lib_Runtime[4],
          Inline_test_config,
          cst_invalid_empty_substring,
          0,
          cst_src_make_substring_ml$10,
          156,
          6,
          89,
          _bf4_);
        return 0}
      caml_call8
       (Ppx_inline_test_lib_Runtime[6],
        Inline_test_config,
        cst_sub,
        0,
        cst_src_make_substring_ml$11,
        138,
        2,
        713,
        _beR_);
      function fold(t,acc,f)
       {var acc$0=acc,i=0;
        for(;;)
         {if(t[3] <= i)return acc$0;
          var
           i$0=i + 1 | 0,
           acc$1=caml_call2(f,acc$0,get(t,i)),
           acc$0=acc$1,
           i=i$0;
          continue}}
      var
       iter=
        [0,
         -198771759,
         function(t,f)
          {var _bfW_=t[3] - 1 | 0,_bfV_=0;
           if(! (_bfW_ < 0))
            {var i=_bfV_;
             for(;;)
              {caml_call1(f,get(t,i));
               var _bfX_=i + 1 | 0;
               if(_bfW_ !== i){var i=_bfX_;continue}
               break}}
           return 0}],
       C=caml_call1(include$9[18],[0,[0,equal$22],fold,iter]),
       _beS_=C[5],
       _beT_=C[4],
       _beU_=C[6],
       _beV_=C[7];
      function to_array(t)
       {function _bfT_(_bfU_){return get(t,_bfU_)}
        return caml_call2(init$0,t[3],_bfT_)}
      function to_list(t)
       {function _bfR_(_bfS_){return get(t,_bfS_)}
        return caml_call2(init$1,t[3],_bfR_)}
      function _beW_(param)
       {var ell=create(_avg_,_avf_,base_of_string(cst_hello$0));
        function _bfN_(param)
         {return caml_equal(to_array(ell),[0,101,108,108])}
        caml_call8
         (Ppx_inline_test_lib_Runtime[4],
          Inline_test_config,
          cst_to_array_ell_e_l_l,
          0,
          cst_src_make_substring_ml$12,
          192,
          6,
          51,
          _bfN_);
        function _bfO_(param){return caml_equal(to_list(ell),_avh_)}
        caml_call8
         (Ppx_inline_test_lib_Runtime[4],
          Inline_test_config,
          cst_to_list_ell_e_l_l,
          0,
          cst_src_make_substring_ml$13,
          193,
          6,
          48,
          _bfO_);
        function _bfP_(param)
         {return caml_equal
                  (caml_call3(_beS_,ell,0,function(acc,x){return [0,x,acc]}),
                   _avi_)}
        caml_call8
         (Ppx_inline_test_lib_Runtime[4],
          Inline_test_config,
          cst_fold_ell_init_f_fun_acc_fun_x_x,
          0,
          cst_src_make_substring_ml$14,
          194,
          6,
          81,
          _bfP_);
        function _bfQ_(param)
         {var stuff=[0,0];
          caml_call2
           (_beT_,ell,function(c){stuff[1] = [0,c,stuff[1]];return 0});
          return caml_equal(stuff[1],_avj_)}
        caml_call8
         (Ppx_inline_test_lib_Runtime[4],
          Inline_test_config,
          cst_iter_ell_f_fun_c_stuff_c_stuff,
          0,
          cst_src_make_substring_ml$15,
          195,
          6,
          134,
          _bfQ_);
        return 0}
      caml_call8
       (Ppx_inline_test_lib_Runtime[6],
        Inline_test_config,
        cst$223,
        0,
        cst_src_make_substring_ml$16,
        188,
        2,
        429,
        _beW_);
      var
       _beY_=C[12],
       _beZ_=C[8],
       _be0_=C[9],
       _be1_=C[1],
       _be2_=C[10],
       _be3_=C[11],
       _be4_=C[16],
       _be5_=C[17],
       _beX_=C[13];
      function _be6_(param)
       {var bcdefghi=create(_avl_,_avk_,base_of_string(cst_abcdefghijklmno));
        function _bfy_(param)
         {return caml_equal(caml_call2(_beY_,bcdefghi,_CT_),_avm_)}
        caml_call8
         (Ppx_inline_test_lib_Runtime[4],
          Inline_test_config,
          cst_find_bcdefghi_f_Char_is_lowercase_Some_b,
          0,
          cst_src_make_substring_ml$17,
          215,
          6,
          64,
          _bfy_);
        function _bfz_(param)
         {return 0 === caml_call2(_beY_,bcdefghi,_CY_)?1:0}
        caml_call8
         (Ppx_inline_test_lib_Runtime[4],
          Inline_test_config,
          cst_find_bcdefghi_f_Char_is_whitespace_None,
          0,
          cst_src_make_substring_ml$18,
          216,
          6,
          61,
          _bfz_);
        function _bfA_(param)
         {return caml_call2(_beZ_,bcdefghi,caml_call1(equal$22,104))}
        caml_call8
         (Ppx_inline_test_lib_Runtime[4],
          Inline_test_config,
          cst_exists_bcdefghi_f_Char_equal_h,
          0,
          cst_src_make_substring_ml$19,
          217,
          6,
          54,
          _bfA_);
        function _bfB_(param)
         {return 1 - caml_call2(_beZ_,bcdefghi,caml_call1(equal$22,122))}
        caml_call8
         (Ppx_inline_test_lib_Runtime[4],
          Inline_test_config,
          cst_not_exists_bcdefghi_f_Char_equal_z,
          0,
          cst_src_make_substring_ml$20,
          218,
          6,
          60,
          _bfB_);
        function _bfC_(param){return caml_call2(_be0_,bcdefghi,_CV_)}
        caml_call8
         (Ppx_inline_test_lib_Runtime[4],
          Inline_test_config,
          cst_for_all_bcdefghi_f_Char_is_alpha,
          0,
          cst_src_make_substring_ml$21,
          219,
          6,
          52,
          _bfC_);
        function _bfD_(param)
         {return 1 - caml_call2(_be0_,bcdefghi,caml_call1(equal$22,104))}
        caml_call8
         (Ppx_inline_test_lib_Runtime[4],
          Inline_test_config,
          cst_not_for_all_bcdefghi_f_Char_equal_h,
          0,
          cst_src_make_substring_ml$22,
          220,
          6,
          61,
          _bfD_);
        function _bfE_(param){return 1 - caml_call2(_be1_,bcdefghi,97)}
        caml_call8
         (Ppx_inline_test_lib_Runtime[4],
          Inline_test_config,
          cst_not_mem_bcdefghi_a,
          0,
          cst_src_make_substring_ml$23,
          221,
          6,
          41,
          _bfE_);
        function _bfF_(param){return caml_call2(_be1_,bcdefghi,98)}
        caml_call8
         (Ppx_inline_test_lib_Runtime[4],
          Inline_test_config,
          cst_mem_bcdefghi_b,
          0,
          cst_src_make_substring_ml$24,
          222,
          6,
          35,
          _bfF_);
        function _bfG_(param){return caml_call2(_be1_,bcdefghi,105)}
        caml_call8
         (Ppx_inline_test_lib_Runtime[4],
          Inline_test_config,
          cst_mem_bcdefghi_i,
          0,
          cst_src_make_substring_ml$25,
          223,
          6,
          35,
          _bfG_);
        function _bfH_(param){return 1 - caml_call2(_be1_,bcdefghi,106)}
        caml_call8
         (Ppx_inline_test_lib_Runtime[4],
          Inline_test_config,
          cst_not_mem_bcdefghi_j,
          0,
          cst_src_make_substring_ml$26,
          224,
          6,
          41,
          _bfH_);
        function _bfI_(param)
         {return 2 === caml_call2(_be2_,bcdefghi,caml_call1(_HC_,cst_aeiou))
                  ?1
                  :0}
        caml_call8
         (Ppx_inline_test_lib_Runtime[4],
          Inline_test_config,
          cst_count_bcdefghi_f_String_mem_aeiou_2,
          0,
          cst_src_make_substring_ml$27,
          225,
          6,
          61,
          _bfI_);
        function _bfJ_(param)
         {return caml_call3
                   (_be3_,
                    [0,t_of_sexp$32,sexp_of_t$43,_w7_,_w4_,_w3_],
                    bcdefghi,
                    function(c)
                     {var _bfM_=caml_call1(_CL_,97);
                      return caml_call1(_CL_,c) - _bfM_ | 0})
                  ===
                  36
                  ?1
                  :0}
        caml_call8
         (Ppx_inline_test_lib_Runtime[4],
          Inline_test_config,
          cst_sum_module_Int_bcdefghi_f_fun_c_Char,
          0,
          cst_src_make_substring_ml$28,
          226,
          6,
          138,
          _bfJ_);
        function _bfK_(param)
         {return caml_equal(caml_call2(_be4_,bcdefghi,_Cx_),_avn_)}
        caml_call8
         (Ppx_inline_test_lib_Runtime[4],
          Inline_test_config,
          cst_min_elt_bcdefghi_compare_Char_compare_S,
          0,
          cst_src_make_substring_ml$29,
          229,
          6,
          68,
          _bfK_);
        function _bfL_(param)
         {return caml_equal(caml_call2(_be5_,bcdefghi,_Cx_),_avo_)}
        caml_call8
         (Ppx_inline_test_lib_Runtime[4],
          Inline_test_config,
          cst_max_elt_bcdefghi_compare_Char_compare_S,
          0,
          cst_src_make_substring_ml$30,
          230,
          6,
          68,
          _bfL_);
        return 0}
      caml_call8
       (Ppx_inline_test_lib_Runtime[6],
        Inline_test_config,
        cst$224,
        0,
        cst_src_make_substring_ml$31,
        211,
        2,
        980,
        _be6_);
      function drop_prefix(t,n)
       {return t[3] < n
                ?caml_call1(failwith,cst_Substring_drop_prefix)
                :[0,t[1],t[2] + n | 0,t[3] - n | 0]}
      function drop_suffix(t,n)
       {return t[3] < n
                ?caml_call1(failwith,cst_Substring_drop_suffix)
                :[0,t[1],t[2],t[3] - n | 0]}
      function prefix(t,n)
       {return t[3] < n
                ?caml_call1(failwith,cst_Substring_prefix)
                :[0,t[1],t[2],n]}
      function suffix(t,n)
       {return t[3] < n
                ?caml_call1(failwith,cst_Substring_suffix)
                :[0,t[1],(t[2] + t[3] | 0) - n | 0,n]}
      function blit_to(blit,t,dst,dst_pos)
       {return caml_call6(blit,t[1],[0,t[2]],[0,t[3]],dst,[0,dst_pos],0)}
      var _be7_=Base[4];
      function blit_to_string(_bfv_,_bfw_,_bfx_)
       {return blit_to(_be7_,_bfv_,_bfw_,_bfx_)}
      var _be8_=Base[4];
      function blit_to_bytes(_bfs_,_bft_,_bfu_)
       {return blit_to(_be8_,_bfs_,_bft_,_bfu_)}
      var _be9_=Base[5];
      function blit_to_bigstring(_bfp_,_bfq_,_bfr_)
       {return blit_to(_be9_,_bfp_,_bfq_,_bfr_)}
      var _be__=Base[3];
      function blit_base(_bfm_,_bfn_,_bfo_)
       {return blit_to(_be__,_bfm_,_bfn_,_bfo_)}
      function blit_from(name,blit,t,src,src_pos,len)
       {if(t[3] < len)caml_call5(_R5_,_avp_,name,len,t[3],0);
        return caml_call6(blit,src,[0,src_pos],[0,len],t[1],[0,t[2]],0)}
      var _be$_=Base[6];
      function blit_from_string(_bfi_,_bfj_,_bfk_,_bfl_)
       {return blit_from(cst_string$2,_be$_,_bfi_,_bfj_,_bfk_,_bfl_)}
      var _bfa_=Base[7];
      function blit_from_bigstring(_bfe_,_bff_,_bfg_,_bfh_)
       {return blit_from(cst_bigstring$0,_bfa_,_bfe_,_bff_,_bfg_,_bfh_)}
      function of_base(base){return [0,base,0,caml_call1(Base[2],base)]}
      function of_string(x){return of_base(base_of_string(x))}
      function of_bigstring(x)
       {var len=caml_ba_dim_1(x),buf=caml_call1(Base[1],len);
        caml_call6(Base[7],x,0,0,buf,0,0);
        return of_base(buf)}
      function make(create,blit,t)
       {var dst=caml_call1(create,t[3]);
        caml_call6(blit,t[1],[0,t[2]],[0,t[3]],dst,_avq_,0);
        return dst}
      function to_string(x)
       {return caml_call1(unsafe_to_string,make(create$13,Base[4],x))}
      var _bfb_=Base[5];
      function _bfc_(eta){return create$18(0,eta)}
      function to_bigstring(_bfd_){return make(_bfc_,_bfb_,_bfd_)}
      function concat_gen(create_dst,blit_dst,ts)
       {var
         len=caml_call3(fold$2,ts,0,function(len,t){return len + t[3] | 0}),
         dst=caml_call1(create_dst,len);
        caml_call3
         (fold$2,
          ts,
          0,
          function(dst_pos,t)
           {caml_call3(blit_dst,t,dst,dst_pos);return dst_pos + t[3] | 0});
        return dst}
      function concat(ts){return of_base(concat_gen(Base[1],blit_base,ts))}
      function concat_string(ts)
       {return caml_call1
                (unsafe_to_string,concat_gen(create$13,blit_to_string,ts))}
      function concat_bigstring(ts)
       {return concat_gen
                (function(eta){return create$18(0,eta)},blit_to_bigstring,ts)}
      return [0,
              _be1_,
              length,
              is_empty,
              _beT_,
              _beS_,
              _beU_,
              _beV_,
              _beZ_,
              _be0_,
              _be2_,
              _be3_,
              _beY_,
              _beX_,
              to_list,
              to_array,
              _be4_,
              _be5_,
              base,
              pos,
              get,
              create,
              sub,
              blit_to_string,
              blit_to_bytes,
              blit_to_bigstring,
              blit_from_string,
              blit_from_bigstring,
              concat,
              concat_string,
              concat_bigstring,
              to_string,
              to_bigstring,
              of_string,
              of_bigstring,
              drop_prefix,
              drop_suffix,
              prefix,
              suffix]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$427);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Make_substring=[0,Blit,F];
    caml_register_global
     (7546,Core_kernel_Make_substring,"Core_kernel__Make_substring");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$428);
    caml_call1(Expect_test_collector[4][1],cst_src_substring_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$429,cst$225);
    var
     blit$6=Blit[4],
     blit_to_string=Blit[4],
     blit_to_bytes=Blit[4],
     blit_to_bigstring=Blit[7],
     blit_from_string=Blit[3],
     blit_from_bigstring=Blit[5],
     include$135=
      F
       ([0,
         create$13,
         length$18,
         blit$6,
         blit_to_bytes,
         blit_to_bigstring,
         blit_from_string,
         blit_from_bigstring,
         blit_to_string,
         get$2]),
     _avr_=include$135[1],
     _avs_=include$135[2],
     _avt_=include$135[3],
     _avu_=include$135[4],
     _avv_=include$135[5],
     _avw_=include$135[6],
     _avx_=include$135[7],
     _avy_=include$135[8],
     _avz_=include$135[9],
     _avA_=include$135[10],
     _avB_=include$135[11],
     _avC_=include$135[12],
     _avD_=include$135[13],
     _avE_=include$135[14],
     _avF_=include$135[15],
     _avG_=include$135[16],
     _avH_=include$135[17],
     _avI_=include$135[18],
     _avJ_=include$135[19],
     _avK_=include$135[20],
     _avL_=include$135[21],
     _avM_=include$135[22],
     _avN_=include$135[23],
     _avO_=include$135[24],
     _avP_=include$135[25],
     _avQ_=include$135[26],
     _avR_=include$135[27],
     _avS_=include$135[28],
     _avT_=include$135[29],
     _avU_=include$135[30],
     _avV_=include$135[31],
     _avW_=include$135[32],
     _avX_=include$135[33],
     _avY_=include$135[34],
     _avZ_=include$135[35],
     _av0_=include$135[36],
     _av1_=include$135[37],
     _av2_=include$135[38];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$430);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Substring=
      [0,
       _avr_,
       _avs_,
       _avt_,
       _avu_,
       _avv_,
       _avw_,
       _avx_,
       _avy_,
       _avz_,
       _avA_,
       _avB_,
       _avC_,
       _avD_,
       _avE_,
       _avF_,
       _avG_,
       _avH_,
       _avI_,
       _avJ_,
       _avK_,
       _avL_,
       _avM_,
       _avN_,
       _avO_,
       _avP_,
       _avQ_,
       _avR_,
       _avS_,
       _avT_,
       _avU_,
       _avV_,
       _avW_,
       _avX_,
       _avY_,
       _avZ_,
       _av0_,
       _av1_,
       _av2_];
    caml_register_global(7547,Core_kernel_Substring,"Core_kernel__Substring");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$431);
    caml_call1(Expect_test_collector[4][1],cst_src_string_id_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$432,cst$226);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$433);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_String_id_intf=[0];
    caml_register_global
     (7548,Core_kernel_String_id_intf,"Core_kernel__String_id_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$434);
    caml_call1(Expect_test_collector[4][1],cst_src_string_id_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$435,cst$227);
    function Make_with_validate_without_pretty_printer(M,_beC_)
     {function hash(x){return hash_string(x)}
      function invalid(s,reason)
       {return [1,caml_call4(_eJ_,_av3_,s,M[1],reason)]}
      function check_for_whitespace(s)
       {var len=caml_ml_string_length(s);
        if(caml_call2(_xv_,len,0))return invalid(s,cst_it_is_empty);
        if(! caml_call1(_CY_,caml_string_get(s,0)))
         if(! caml_call1(_CY_,caml_string_get(s,len - 1 | 0)))return _av4_;
        return invalid(s,cst_it_has_whitespace_on_the_edge)}
      function validate(s){return caml_call2(_ho_,caml_call1(M[2],s),_kx_)}
      function check(s)
       {var match=check_for_whitespace(s);
        if(0 === match[0])return validate(s);
        var error=match[1];
        return [1,error]}
      function to_string(_beP_){return _beP_}
      function of_string(s)
       {var match=check(s);
        if(0 === match[0])return s;
        var err=match[1];
        return caml_call1(invalid_arg,err)}
      function t_of_sexp(sexp)
       {var s=caml_call1(_Ik_[1][12],sexp),match=check(s);
        if(0 === match[0])return s;
        var err=match[1];
        return caml_call2(_Q3_,err,sexp)}
      function to_binable(_beO_){return _beO_}
      var
       include=
        caml_call1
         (caml_call1
           (_W5_,
            [0,
             bin_shape_t$54,
             bin_size_t$44,
             bin_write_t$44,
             bin_read_t$89,
             bin_read_t$90]),
          [0,to_binable,of_string]),
       bin_size_t=include[1],
       bin_write_t=include[2],
       bin_read_t=include[3],
       bin_read_t$0=include[4],
       bin_shape_t=include[5],
       bin_writer_t=include[6],
       bin_reader_t=include[7],
       bin_t=include[8],
       T=
        [0,
         sexp_of_t$58,
         compare$47,
         hash_fold_t$25,
         hash,
         check_for_whitespace,
         validate,
         check,
         to_string,
         pp$4,
         of_string,
         t_of_sexp,
         bin_size_t,
         bin_write_t,
         bin_read_t,
         bin_read_t$0,
         bin_shape_t,
         bin_writer_t,
         bin_reader_t,
         bin_t],
       sexp_of_t=T[1],
       compare=T[2],
       hash_fold_t=T[3],
       hash$0=T[4],
       check_for_whitespace$0=T[5],
       validate$0=T[6],
       check$0=T[7],
       to_string$0=T[8],
       pp=T[9],
       of_string$0=T[10],
       t_of_sexp$0=T[11],
       bin_size_t$0=T[12],
       bin_write_t$0=T[13],
       bin_read_t$1=T[14],
       bin_read_t$2=T[15],
       bin_shape_t$0=T[16],
       bin_writer_t$0=T[17],
       bin_reader_t$0=T[18],
       bin_t$0=T[19],
       include$0=caml_call1(_gG_[1][2],[0,T[2],T[1]]),
       comparator=include$0[1],
       T_with_comparator=
        [0,
         sexp_of_t,
         compare,
         hash_fold_t,
         hash$0,
         check_for_whitespace$0,
         validate$0,
         check$0,
         to_string$0,
         pp,
         of_string$0,
         t_of_sexp$0,
         bin_size_t$0,
         bin_write_t$0,
         bin_read_t$1,
         bin_read_t$2,
         bin_shape_t$0,
         bin_writer_t$0,
         bin_reader_t$0,
         bin_t$0,
         comparator],
       sexp_of_t$0=T_with_comparator[1],
       compare$0=T_with_comparator[2],
       hash_fold_t$0=T_with_comparator[3],
       hash$1=T_with_comparator[4],
       check_for_whitespace$1=T_with_comparator[5],
       validate$1=T_with_comparator[6],
       check$1=T_with_comparator[7],
       to_string$1=T_with_comparator[8],
       pp$0=T_with_comparator[9],
       of_string$1=T_with_comparator[10],
       t_of_sexp$1=T_with_comparator[11],
       bin_size_t$1=T_with_comparator[12],
       bin_write_t$1=T_with_comparator[13],
       bin_read_t$3=T_with_comparator[14],
       bin_read_t$4=T_with_comparator[15],
       bin_shape_t$1=T_with_comparator[16],
       bin_writer_t$1=T_with_comparator[17],
       bin_reader_t$1=T_with_comparator[18],
       bin_t$1=T_with_comparator[19],
       comparator$0=T_with_comparator[20],
       _beD_=
        caml_call1
         (Stable$2[1][1],
          [0,
           T_with_comparator[19],
           T_with_comparator[14],
           T_with_comparator[15],
           T_with_comparator[18],
           T_with_comparator[12],
           T_with_comparator[13],
           T_with_comparator[17],
           T_with_comparator[16],
           T_with_comparator[2],
           T_with_comparator[11],
           T_with_comparator[1],
           T_with_comparator[20]]),
       Map=_beD_[1],
       Set=_beD_[2],
       include$1=
        caml_call1
         (Hashable$0[1][1],
          [0,
           T_with_comparator[19],
           T_with_comparator[14],
           T_with_comparator[15],
           T_with_comparator[18],
           T_with_comparator[12],
           T_with_comparator[13],
           T_with_comparator[17],
           T_with_comparator[16],
           T_with_comparator[11],
           T_with_comparator[2],
           T_with_comparator[1],
           T_with_comparator[4]]),
       Table=include$1[1],
       Hash_set=include$1[2],
       V1=
        [0,
         T,
         T_with_comparator,
         sexp_of_t$0,
         compare$0,
         hash_fold_t$0,
         hash$1,
         check_for_whitespace$1,
         validate$1,
         check$1,
         to_string$1,
         pp$0,
         of_string$1,
         t_of_sexp$1,
         bin_size_t$1,
         bin_write_t$1,
         bin_read_t$3,
         bin_read_t$4,
         bin_shape_t$1,
         bin_writer_t$1,
         bin_reader_t$1,
         bin_t$1,
         comparator$0,
         Map,
         Set,
         Table,
         Hash_set],
       Stable=[0,V1],
       _beE_=Stable[1][2],
       sexp_of_t$1=_beE_[1],
       check_for_whitespace$2=_beE_[5],
       validate$2=_beE_[6],
       check$2=_beE_[7],
       to_string$2=_beE_[8],
       pp$1=_beE_[9],
       of_string$2=_beE_[10],
       t_of_sexp$2=_beE_[11],
       bin_size_t$2=_beE_[12],
       bin_write_t$2=_beE_[13],
       bin_read_t$5=_beE_[14],
       bin_read_t$6=_beE_[15],
       bin_shape_t$2=_beE_[16],
       bin_writer_t$2=_beE_[17],
       bin_reader_t$2=_beE_[18],
       bin_t$2=_beE_[19],
       _beF_=Stable[1][2],
       _beG_=
        _td_
         ([0,
           _beF_[19],
           _beF_[14],
           _beF_[15],
           _beF_[18],
           _beF_[12],
           _beF_[13],
           _beF_[17],
           _beF_[16],
           _beF_[11],
           _beF_[1],
           _beF_[20]]),
       equal=_beG_[7],
       compare$1=_beG_[8],
       min=_beG_[9],
       max=_beG_[10],
       ascending=_beG_[11],
       descending=_beG_[12],
       between=_beG_[13],
       clamp_exn=_beG_[14],
       clamp=_beG_[15],
       validate_lbound=_beG_[16],
       validate_ubound=_beG_[17],
       validate_bound=_beG_[18],
       Replace_polymorphic_compare=_beG_[19],
       comparator$1=_beG_[20],
       Map$0=_beG_[21],
       Set$0=_beG_[22],
       _beN_=Stable[1][2],
       _beH_=_beG_[1],
       _beI_=_beG_[2],
       _beJ_=_beG_[3],
       _beK_=_beG_[4],
       _beL_=_beG_[5],
       _beM_=_beG_[6],
       include$2=
        Make_binable
         ([0,
           _beN_[3],
           _beN_[19],
           _beN_[14],
           _beN_[15],
           _beN_[18],
           _beN_[12],
           _beN_[13],
           _beN_[17],
           _beN_[16],
           _beN_[11],
           _beN_[2],
           _beN_[1],
           _beN_[4]]),
       hash_fold_t$1=include$2[1],
       hash$2=include$2[2],
       hashable=include$2[3],
       Table$0=include$2[4],
       Hash_set$0=include$2[5],
       Hash_queue=include$2[6];
      return [0,
              Stable,
              0,
              sexp_of_t$1,
              check_for_whitespace$2,
              validate$2,
              check$2,
              to_string$2,
              pp$1,
              of_string$2,
              t_of_sexp$2,
              bin_size_t$2,
              bin_write_t$2,
              bin_read_t$5,
              bin_read_t$6,
              bin_shape_t$2,
              bin_writer_t$2,
              bin_reader_t$2,
              bin_t$2,
              _beH_,
              _beI_,
              _beJ_,
              _beK_,
              _beL_,
              _beM_,
              equal,
              compare$1,
              min,
              max,
              ascending,
              descending,
              between,
              clamp_exn,
              clamp,
              validate_lbound,
              validate_ubound,
              validate_bound,
              Replace_polymorphic_compare,
              comparator$1,
              Map$0,
              Set$0,
              hash_fold_t$1,
              hash$2,
              hashable,
              Table$0,
              Hash_set$0,
              Hash_queue]}
    function Make_without_pretty_printer(M,_beA_)
     {var
       _beB_=M[1],
       validate=caml_call1(_hR_,_av5_),
       include=
        Make_with_validate_without_pretty_printer([0,_beB_,validate],[0]),
       Stable=include[1],
       Stable_latest=include[2],
       sexp_of_t=include[3],
       check_for_whitespace=include[4],
       validate$0=include[5],
       check=include[6],
       to_string=include[7],
       pp=include[8],
       of_string=include[9],
       t_of_sexp=include[10],
       bin_size_t=include[11],
       bin_write_t=include[12],
       bin_read_t=include[13],
       bin_read_t$0=include[14],
       bin_shape_t=include[15],
       bin_writer_t=include[16],
       bin_reader_t=include[17],
       bin_t=include[18],
       equal=include[25],
       compare=include[26],
       min=include[27],
       max=include[28],
       ascending=include[29],
       descending=include[30],
       between=include[31],
       clamp_exn=include[32],
       clamp=include[33],
       validate_lbound=include[34],
       validate_ubound=include[35],
       validate_bound=include[36],
       Replace_polymorphic_compare=include[37],
       comparator=include[38],
       Map=include[39],
       Set=include[40],
       hash_fold_t=include[41],
       hash=include[42],
       hashable=include[43],
       Table=include[44],
       Hash_set=include[45],
       Hash_queue=include[46];
      return [0,
              Stable,
              Stable_latest,
              sexp_of_t,
              check_for_whitespace,
              validate$0,
              check,
              to_string,
              pp,
              of_string,
              t_of_sexp,
              bin_size_t,
              bin_write_t,
              bin_read_t,
              bin_read_t$0,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t,
              include[19],
              include[20],
              include[21],
              include[22],
              include[23],
              include[24],
              equal,
              compare,
              min,
              max,
              ascending,
              descending,
              between,
              clamp_exn,
              clamp,
              validate_lbound,
              validate_ubound,
              validate_bound,
              Replace_polymorphic_compare,
              comparator,
              Map,
              Set,
              hash_fold_t,
              hash,
              hashable,
              Table,
              Hash_set,
              Hash_queue]}
    function Make$14(M,_bet_)
     {var
       include$0=Make_without_pretty_printer(M,[0]),
       Stable=include$0[1],
       Stable_latest=include$0[2],
       sexp_of_t=include$0[3],
       check_for_whitespace=include$0[4],
       validate=include$0[5],
       check=include$0[6],
       to_string=include$0[7],
       of_string=include$0[9],
       t_of_sexp=include$0[10],
       bin_size_t=include$0[11],
       bin_write_t=include$0[12],
       bin_read_t=include$0[13],
       bin_read_t$0=include$0[14],
       bin_shape_t=include$0[15],
       bin_writer_t=include$0[16],
       bin_reader_t=include$0[17],
       bin_t=include$0[18],
       equal=include$0[25],
       compare=include$0[26],
       min=include$0[27],
       max=include$0[28],
       ascending=include$0[29],
       descending=include$0[30],
       between=include$0[31],
       clamp_exn=include$0[32],
       clamp=include$0[33],
       validate_lbound=include$0[34],
       validate_ubound=include$0[35],
       validate_bound=include$0[36],
       Replace_polymorphic_compare=include$0[37],
       comparator=include$0[38],
       Map=include$0[39],
       Set=include$0[40],
       hash_fold_t=include$0[41],
       hash=include$0[42],
       hashable=include$0[43],
       Table=include$0[44],
       Hash_set=include$0[45],
       Hash_queue=include$0[46],
       module_name=M[1],
       _beu_=include$0[19],
       _bev_=include$0[20],
       _bew_=include$0[21],
       _bex_=include$0[22],
       _bey_=include$0[23],
       _bez_=include$0[24],
       include=caml_call1(Base_Pretty_printer[2],[0,module_name,to_string]),
       pp=include[1];
      return [0,
              Stable,
              Stable_latest,
              sexp_of_t,
              check_for_whitespace,
              validate,
              check,
              to_string,
              of_string,
              t_of_sexp,
              bin_size_t,
              bin_write_t,
              bin_read_t,
              bin_read_t$0,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t,
              _beu_,
              _bev_,
              _bew_,
              _bex_,
              _bey_,
              _bez_,
              equal,
              compare,
              min,
              max,
              ascending,
              descending,
              between,
              clamp_exn,
              clamp,
              validate_lbound,
              validate_ubound,
              validate_bound,
              Replace_polymorphic_compare,
              comparator,
              Map,
              Set,
              hash_fold_t,
              hash,
              hashable,
              Table,
              Hash_set,
              Hash_queue,
              pp]}
    var
     include$169=Make$14([0,module_name$13],[0]),
     _av6_=include$169[1],
     _av7_=include$169[3],
     _av8_=include$169[7],
     _av9_=include$169[8],
     _av__=include$169[9],
     _av$_=include$169[10],
     _awa_=include$169[11],
     _awb_=include$169[12],
     _awc_=include$169[13],
     _awd_=include$169[14],
     _awe_=include$169[15],
     _awf_=include$169[16],
     _awg_=include$169[17],
     _awh_=include$169[18],
     _awi_=include$169[19],
     _awj_=include$169[20],
     _awk_=include$169[21],
     _awl_=include$169[22],
     _awm_=include$169[23],
     _awn_=include$169[24],
     _awo_=include$169[25],
     _awp_=include$169[26],
     _awq_=include$169[27],
     _awr_=include$169[28],
     _aws_=include$169[29],
     _awt_=include$169[30],
     _awu_=include$169[31],
     _awv_=include$169[32],
     _aww_=include$169[33],
     _awx_=include$169[34],
     _awy_=include$169[35],
     _awz_=include$169[36],
     _awA_=include$169[37],
     _awB_=include$169[38],
     _awC_=include$169[39],
     _awD_=include$169[40],
     _awE_=include$169[41],
     _awF_=include$169[42],
     _awG_=include$169[43],
     _awH_=include$169[44],
     _awI_=include$169[45],
     _awJ_=include$169[46];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$436);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    function _awK_(_beq_,_bep_)
     {var
       _ber_=Make_with_validate_without_pretty_printer(_beq_,_bep_),
       _bes_=_ber_[1][1];
      return [0,
              _ber_[18],
              _ber_[13],
              _ber_[14],
              _ber_[17],
              _ber_[11],
              _ber_[12],
              _ber_[16],
              _ber_[15],
              _ber_[10],
              _ber_[3],
              _ber_[9],
              _ber_[7],
              _ber_[8],
              _ber_[19],
              _ber_[20],
              _ber_[21],
              _ber_[22],
              _ber_[23],
              _ber_[24],
              _ber_[25],
              _ber_[26],
              _ber_[27],
              _ber_[28],
              _ber_[29],
              _ber_[30],
              _ber_[31],
              _ber_[32],
              _ber_[33],
              _ber_[34],
              _ber_[35],
              _ber_[36],
              _ber_[37],
              _ber_[38],
              _ber_[39],
              _ber_[40],
              _ber_[41],
              _ber_[42],
              _ber_[43],
              _ber_[44],
              _ber_[45],
              _ber_[46],
              [0,
               [0,
                _bes_[5],
                _bes_[6],
                _bes_[21],
                _bes_[16],
                _bes_[17],
                _bes_[20],
                _bes_[14],
                _bes_[15],
                _bes_[19],
                _bes_[18],
                _bes_[4],
                _bes_[13],
                _bes_[3],
                _bes_[22],
                _bes_[23],
                _bes_[24]]]]}
    function _awL_(_bem_,_bel_)
     {var _ben_=Make_without_pretty_printer(_bem_,_bel_),_beo_=_ben_[1][1];
      return [0,
              _ben_[18],
              _ben_[13],
              _ben_[14],
              _ben_[17],
              _ben_[11],
              _ben_[12],
              _ben_[16],
              _ben_[15],
              _ben_[10],
              _ben_[3],
              _ben_[9],
              _ben_[7],
              _ben_[8],
              _ben_[19],
              _ben_[20],
              _ben_[21],
              _ben_[22],
              _ben_[23],
              _ben_[24],
              _ben_[25],
              _ben_[26],
              _ben_[27],
              _ben_[28],
              _ben_[29],
              _ben_[30],
              _ben_[31],
              _ben_[32],
              _ben_[33],
              _ben_[34],
              _ben_[35],
              _ben_[36],
              _ben_[37],
              _ben_[38],
              _ben_[39],
              _ben_[40],
              _ben_[41],
              _ben_[42],
              _ben_[43],
              _ben_[44],
              _ben_[45],
              _ben_[46],
              [0,
               [0,
                _beo_[5],
                _beo_[6],
                _beo_[21],
                _beo_[16],
                _beo_[17],
                _beo_[20],
                _beo_[14],
                _beo_[15],
                _beo_[19],
                _beo_[18],
                _beo_[4],
                _beo_[13],
                _beo_[3],
                _beo_[22],
                _beo_[23],
                _beo_[24]]]]}
    function _awM_(M,_bej_)
     {var
       include$0=Make_with_validate_without_pretty_printer(M,[0]),
       Stable=include$0[1],
       sexp_of_t=include$0[3],
       to_string=include$0[7],
       of_string=include$0[9],
       t_of_sexp=include$0[10],
       bin_size_t=include$0[11],
       bin_write_t=include$0[12],
       bin_read_t=include$0[13],
       bin_read_t$0=include$0[14],
       bin_shape_t=include$0[15],
       bin_writer_t=include$0[16],
       bin_reader_t=include$0[17],
       bin_t=include$0[18],
       equal=include$0[25],
       compare=include$0[26],
       min=include$0[27],
       max=include$0[28],
       ascending=include$0[29],
       descending=include$0[30],
       between=include$0[31],
       clamp_exn=include$0[32],
       clamp=include$0[33],
       validate_lbound=include$0[34],
       validate_ubound=include$0[35],
       validate_bound=include$0[36],
       Replace_polymorphic_compare=include$0[37],
       comparator=include$0[38],
       Map=include$0[39],
       Set=include$0[40],
       hash_fold_t=include$0[41],
       hash=include$0[42],
       hashable=include$0[43],
       Table=include$0[44],
       Hash_set=include$0[45],
       Hash_queue=include$0[46],
       module_name=M[1],
       _bed_=include$0[19],
       _bee_=include$0[20],
       _bef_=include$0[21],
       _beg_=include$0[22],
       _beh_=include$0[23],
       _bei_=include$0[24],
       include=caml_call1(Base_Pretty_printer[2],[0,module_name,to_string]),
       pp=include[1],
       _bek_=Stable[1];
      return [0,
              bin_t,
              bin_read_t,
              bin_read_t$0,
              bin_reader_t,
              bin_size_t,
              bin_write_t,
              bin_writer_t,
              bin_shape_t,
              t_of_sexp,
              sexp_of_t,
              of_string,
              to_string,
              pp,
              _bed_,
              _bee_,
              _bef_,
              _beg_,
              _beh_,
              _bei_,
              equal,
              compare,
              min,
              max,
              ascending,
              descending,
              between,
              clamp_exn,
              clamp,
              validate_lbound,
              validate_ubound,
              validate_bound,
              Replace_polymorphic_compare,
              comparator,
              Map,
              Set,
              hash_fold_t,
              hash,
              hashable,
              Table,
              Hash_set,
              Hash_queue,
              [0,
               [0,
                _bek_[5],
                _bek_[6],
                _bek_[21],
                _bek_[16],
                _bek_[17],
                _bek_[20],
                _bek_[14],
                _bek_[15],
                _bek_[19],
                _bek_[18],
                _bek_[4],
                _bek_[13],
                _bek_[3],
                _bek_[22],
                _bek_[23],
                _bek_[24]]]]}
    function _awN_(_bea_,_bd$_)
     {var _beb_=Make$14(_bea_,_bd$_),_bec_=_beb_[1][1];
      return [0,
              _beb_[17],
              _beb_[12],
              _beb_[13],
              _beb_[16],
              _beb_[10],
              _beb_[11],
              _beb_[15],
              _beb_[14],
              _beb_[9],
              _beb_[3],
              _beb_[8],
              _beb_[7],
              _beb_[46],
              _beb_[18],
              _beb_[19],
              _beb_[20],
              _beb_[21],
              _beb_[22],
              _beb_[23],
              _beb_[24],
              _beb_[25],
              _beb_[26],
              _beb_[27],
              _beb_[28],
              _beb_[29],
              _beb_[30],
              _beb_[31],
              _beb_[32],
              _beb_[33],
              _beb_[34],
              _beb_[35],
              _beb_[36],
              _beb_[37],
              _beb_[38],
              _beb_[39],
              _beb_[40],
              _beb_[41],
              _beb_[42],
              _beb_[43],
              _beb_[44],
              _beb_[45],
              [0,
               [0,
                _bec_[5],
                _bec_[6],
                _bec_[21],
                _bec_[16],
                _bec_[17],
                _bec_[20],
                _bec_[14],
                _bec_[15],
                _bec_[19],
                _bec_[18],
                _bec_[4],
                _bec_[13],
                _bec_[3],
                _bec_[22],
                _bec_[23],
                _bec_[24]]]]}
    var
     _awO_=_av6_[1],
     Core_kernel_String_id=
      [0,
       _awg_,
       _awb_,
       _awc_,
       _awf_,
       _av$_,
       _awa_,
       _awe_,
       _awd_,
       _av__,
       _av7_,
       _av9_,
       _av8_,
       _awJ_,
       _awh_,
       _awi_,
       _awj_,
       _awk_,
       _awl_,
       _awm_,
       _awn_,
       _awo_,
       _awp_,
       _awq_,
       _awr_,
       _aws_,
       _awt_,
       _awu_,
       _awv_,
       _aww_,
       _awx_,
       _awy_,
       _awz_,
       _awA_,
       _awB_,
       _awC_,
       _awD_,
       _awE_,
       _awF_,
       _awG_,
       _awH_,
       _awI_,
       [0,
        [0,
         _awO_[5],
         _awO_[6],
         _awO_[21],
         _awO_[16],
         _awO_[17],
         _awO_[20],
         _awO_[14],
         _awO_[15],
         _awO_[19],
         _awO_[18],
         _awO_[4],
         _awO_[13],
         _awO_[3],
         _awO_[22],
         _awO_[23],
         _awO_[24]]],
       _awN_,
       _awM_,
       _awL_,
       _awK_];
    caml_register_global(7549,Core_kernel_String_id,"Core_kernel__String_id");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$437);
    caml_call1(Expect_test_collector[4][1],cst_src_bag_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$438,cst$228);
    function elts(t)
     {return fold_elt(t,0,function(acc,elt){return [0,elt,acc]})}
    function until_empty(t,f)
     {function loop(param)
       {function _bd__(v){caml_call1(f,v);return loop(0)}
        return caml_call2(iter$16,remove_one(t),_bd__)}
      return loop(0)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$439);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Bag=
      [0,
       [0,Elt[2],Elt[3],Elt[1]],
       t_of_sexp$30,
       sexp_of_t$41,
       _uc_,
       length$17,
       is_empty$14,
       iter$17,
       _ua_,
       _uf_,
       _ug_,
       _t9_,
       _ub_,
       _t7_,
       _t8_,
       _t__,
       _t$_,
       to_list$9,
       to_array$8,
       _ud_,
       _ue_,
       invariant$4,
       create$12,
       add$11,
       mem_elt,
       remove$10,
       choose$3,
       remove_one,
       clear$1,
       filter_inplace$1,
       iter_elt,
       find_elt,
       until_empty,
       transfer,
       of_list$10,
       elts,
       unchecked_iter];
    caml_register_global(7550,Core_kernel_Bag,"Core_kernel__Bag");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$440);
    caml_call1(Expect_test_collector[4][1],cst_src_bigsubstring_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$441,cst$229);
    var _awP_=0;
    function create$50(_bd9_){return create$18(_awP_,_bd9_)}
    var
     get$11=caml_ba_get_1,
     blit$7=Blit[8],
     blit_to_string$0=Blit[5],
     blit_to_bytes$0=Blit[5],
     blit_to_bigstring$0=Blit[8],
     blit_from_string$0=Blit[6],
     blit_from_bigstring$0=Blit[8],
     include$136=
      F
       ([0,
         create$50,
         length$20,
         blit$7,
         blit_to_bytes$0,
         blit_to_bigstring$0,
         blit_from_string$0,
         blit_from_bigstring$0,
         blit_to_string$0,
         get$11]),
     _awQ_=include$136[1],
     _awR_=include$136[2],
     _awS_=include$136[3],
     _awT_=include$136[4],
     _awU_=include$136[5],
     _awV_=include$136[6],
     _awW_=include$136[7],
     _awX_=include$136[8],
     _awY_=include$136[9],
     _awZ_=include$136[10],
     _aw0_=include$136[11],
     _aw1_=include$136[12],
     _aw2_=include$136[13],
     _aw3_=include$136[14],
     _aw4_=include$136[15],
     _aw5_=include$136[16],
     _aw6_=include$136[17],
     _aw7_=include$136[18],
     _aw8_=include$136[19],
     _aw9_=include$136[20],
     _aw__=include$136[21],
     _aw$_=include$136[22],
     _axa_=include$136[23],
     _axb_=include$136[24],
     _axc_=include$136[25],
     _axd_=include$136[26],
     _axe_=include$136[27],
     _axf_=include$136[28],
     _axg_=include$136[29],
     _axh_=include$136[30],
     _axi_=include$136[31],
     _axj_=include$136[32],
     _axk_=include$136[33],
     _axl_=include$136[34],
     _axm_=include$136[35],
     _axn_=include$136[36],
     _axo_=include$136[37],
     _axp_=include$136[38];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$442);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Bigsubstring=
      [0,
       _awQ_,
       _awR_,
       _awS_,
       _awT_,
       _awU_,
       _awV_,
       _awW_,
       _awX_,
       _awY_,
       _awZ_,
       _aw0_,
       _aw1_,
       _aw2_,
       _aw3_,
       _aw4_,
       _aw5_,
       _aw6_,
       _aw7_,
       _aw8_,
       _aw9_,
       _aw__,
       _aw$_,
       _axa_,
       _axb_,
       _axc_,
       _axd_,
       _axe_,
       _axf_,
       _axg_,
       _axh_,
       _axi_,
       _axj_,
       _axk_,
       _axl_,
       _axm_,
       _axn_,
       _axo_,
       _axp_];
    caml_register_global
     (7551,Core_kernel_Bigsubstring,"Core_kernel__Bigsubstring");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$443);
    caml_call1(Expect_test_collector[4][1],cst_src_binary_packing_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$444,cst$230);
    var
     arch_sixtyfour$2=64 === Stdlib_sys[10]?1:0,
     signed_max=Stdlib_int32[7],
     unsigned_max=caml_int64_to_int32(_axq_);
    function compare_endian(a_001,b_002)
     {if(caml_call2(Ppx_compare_lib[1],a_001,b_002))return 0;
      if(720314340 <= a_001)
       {if(720314340 === b_002)return 0}
      else
       if(75664794 === b_002)return 0;
      return caml_int_compare(a_001,b_002)}
    function hash_fold_endian(hsv,arg)
     {return 720314340 <= arg
              ?caml_call2(Base_Hash[3],hsv,720314340)
              :caml_call2(Base_Hash[3],hsv,75664794)}
    function hash_endian(x)
     {var hsv=caml_call2(Base_Hash[11],0,0),_bd8_=hash_fold_endian(hsv,x);
      return caml_call1(Base_Hash[9],_bd8_)}
    function endian_of_sexp(sexp)
     {if(0 === sexp[0])
       {var atom=sexp[1];
        return caml_string_notequal(atom,cst_Big_endian)
                ?caml_string_notequal(atom,cst_Little_endian)
                  ?caml_call1(Sexplib0_Sexp_conv_error[18],0)
                  :720314340
                :75664794}
      var _bd6_=sexp[1];
      if(_bd6_)
       {var _bd7_=_bd6_[1];
        if(0 === _bd7_[0])
         {var atom$0=_bd7_[1];
          return caml_string_notequal(atom$0,cst_Big_endian$0)
                  ?caml_string_notequal(atom$0,cst_Little_endian$0)
                    ?caml_call1(Sexplib0_Sexp_conv_error[18],0)
                    :caml_call2(Sexplib0_Sexp_conv_error[20],tp_loc$41,sexp)
                  :caml_call2(Sexplib0_Sexp_conv_error[20],tp_loc$41,sexp)}
        return caml_call2(Sexplib0_Sexp_conv_error[23],tp_loc$41,sexp)}
      return caml_call2(Sexplib0_Sexp_conv_error[24],tp_loc$41,sexp)}
    function endian_of_sexp$0(sexp)
     {try
       {var _bd4_=endian_of_sexp(sexp);return _bd4_}
      catch(_bd5_)
       {_bd5_ = caml_wrap_exception(_bd5_);
        if(_bd5_ === Sexplib0_Sexp_conv_error[17])
         return caml_call2(Sexplib0_Sexp_conv_error[19],tp_loc$42,sexp);
        throw _bd5_}}
    function sexp_of_endian(param){return 720314340 <= param?_axr_:_axs_}
    var
     Binary_packing_invalid_byte_number=
      [248,
       cst_Core_kernel_Binary_packing_Binary_packing_invalid_byte_number,
       caml_fresh_oo_id(0)];
    function _axt_(param)
     {if(param[1] === Binary_packing_invalid_byte_number)
       {var
         v1=param[3],
         v0=param[2],
         v0$0=caml_call1(sexp_of_t$43,v0),
         v1$0=caml_call1(sexp_of_t$43,v1);
        return [1,[0,_axu_,[0,v0$0,[0,v1$0,0]]]]}
      throw [0,Assert_failure,_axv_]}
    caml_call3
     (Sexplib0_Sexp_conv[51][2],0,Binary_packing_invalid_byte_number,_axt_);
    function offset(len,byte_order,byte_nr)
     {var _bd2_=len <= byte_nr?1:0,_bd3_=_bd2_ || (byte_nr < 0?1:0);
      if(_bd3_)throw [0,Binary_packing_invalid_byte_number,byte_nr,len];
      return 720314340 <= byte_order?(len - 1 | 0) - byte_nr | 0:byte_nr}
    var
     Pack_unsigned_8_argument_out_of_range=
      [248,
       cst_Core_kernel_Binary_packing_Pack_unsigned_8_argument_out_of_range,
       caml_fresh_oo_id(0)];
    function _axw_(param)
     {if(param[1] === Pack_unsigned_8_argument_out_of_range)
       {var v0=param[2],v0$0=caml_call1(sexp_of_t$43,v0);
        return [1,[0,_axx_,[0,v0$0,0]]]}
      throw [0,Assert_failure,_axy_]}
    caml_call3
     (Sexplib0_Sexp_conv[51][2],0,Pack_unsigned_8_argument_out_of_range,_axw_);
    function pack_unsigned_8(buf,pos,n)
     {if(! (255 < n))if(0 <= n)return caml_call3(set$6,buf,pos,n);
      throw [0,Pack_unsigned_8_argument_out_of_range,n]}
    function unpack_unsigned_8(buf,pos){return caml_call2(get$2,buf,pos)}
    var
     Pack_signed_8_argument_out_of_range=
      [248,
       cst_Core_kernel_Binary_packing_Pack_signed_8_argument_out_of_range,
       caml_fresh_oo_id(0)];
    function _axz_(param)
     {if(param[1] === Pack_signed_8_argument_out_of_range)
       {var v0=param[2],v0$0=caml_call1(sexp_of_t$43,v0);
        return [1,[0,_axA_,[0,v0$0,0]]]}
      throw [0,Assert_failure,_axB_]}
    caml_call3
     (Sexplib0_Sexp_conv[51][2],0,Pack_signed_8_argument_out_of_range,_axz_);
    function pack_signed_8(buf,pos,n)
     {if(! (127 < n))if(-128 <= n)return caml_call3(set$6,buf,pos,n);
      throw [0,Pack_signed_8_argument_out_of_range,n]}
    function unpack_signed_8(buf,pos)
     {var n=unpack_unsigned_8(buf,pos);return 128 <= n?- (256 - n | 0) | 0:n}
    var
     Pack_unsigned_16_argument_out_of_range=
      [248,
       cst_Core_kernel_Binary_packing_Pack_unsigned_16_argument_out_of_range,
       caml_fresh_oo_id(0)];
    function _axC_(param)
     {if(param[1] === Pack_unsigned_16_argument_out_of_range)
       {var v0=param[2],v0$0=caml_call1(sexp_of_t$43,v0);
        return [1,[0,_axD_,[0,v0$0,0]]]}
      throw [0,Assert_failure,_axE_]}
    caml_call3
     (Sexplib0_Sexp_conv[51][2],
      0,
      Pack_unsigned_16_argument_out_of_range,
      _axC_);
    function pack_unsigned_16(byte_order,buf,pos,n)
     {if(! (65536 <= n))
       if(0 <= n)
        {caml_call3(set$6,buf,pos + offset(2,byte_order,0) | 0,255 & n >> 8);
         return caml_call3(set$6,buf,pos + offset(2,byte_order,1) | 0,255 & n)}
      throw [0,Pack_unsigned_16_argument_out_of_range,n]}
    function pack_unsigned_16_big_endian(buf,pos,n)
     {if(! (65536 <= n))
       if(0 <= n)
        {caml_call3(set$6,buf,pos,255 & (n >>> 8 | 0));
         return caml_call3(set$6,buf,pos + 1 | 0,255 & n)}
      throw [0,Pack_unsigned_16_argument_out_of_range,n]}
    function pack_unsigned_16_little_endian(buf,pos,n)
     {if(! (65536 <= n))
       if(0 <= n)
        {caml_call3(set$6,buf,pos + 1 | 0,255 & (n >>> 8 | 0));
         return caml_call3(set$6,buf,pos,255 & n)}
      throw [0,Pack_unsigned_16_argument_out_of_range,n]}
    var
     Pack_signed_16_argument_out_of_range=
      [248,
       cst_Core_kernel_Binary_packing_Pack_signed_16_argument_out_of_range,
       caml_fresh_oo_id(0)];
    function _axF_(param)
     {if(param[1] === Pack_signed_16_argument_out_of_range)
       {var v0=param[2],v0$0=caml_call1(sexp_of_t$43,v0);
        return [1,[0,_axG_,[0,v0$0,0]]]}
      throw [0,Assert_failure,_axH_]}
    caml_call3
     (Sexplib0_Sexp_conv[51][2],0,Pack_signed_16_argument_out_of_range,_axF_);
    function pack_signed_16(byte_order,buf,pos,n)
     {if(! (32767 < n))
       if(-32768 <= n)
        {caml_call3(set$6,buf,pos + offset(2,byte_order,0) | 0,255 & n >> 8);
         return caml_call3(set$6,buf,pos + offset(2,byte_order,1) | 0,255 & n)}
      throw [0,Pack_signed_16_argument_out_of_range,n]}
    function pack_signed_16_big_endian(buf,pos,n)
     {if(! (32767 < n))
       if(-32768 <= n)
        {caml_call3(set$6,buf,pos,255 & n >> 8);
         return caml_call3(set$6,buf,pos + 1 | 0,255 & n)}
      throw [0,Pack_signed_16_argument_out_of_range,n]}
    function pack_signed_16_little_endian(buf,pos,n)
     {if(! (32767 < n))
       if(-32768 <= n)
        {caml_call3(set$6,buf,pos + 1 | 0,255 & n >> 8);
         return caml_call3(set$6,buf,pos,255 & n)}
      throw [0,Pack_signed_16_argument_out_of_range,n]}
    function unpack_unsigned_16(byte_order,buf,pos)
     {var
       b1=caml_call2(get$2,buf,pos + offset(2,byte_order,0) | 0) << 8,
       b2=caml_call2(get$2,buf,pos + offset(2,byte_order,1) | 0);
      return b1 | b2}
    function unpack_signed_16(byte_order,buf,pos)
     {var n=unpack_unsigned_16(byte_order,buf,pos);
      return 32768 <= n?- (65536 - n | 0) | 0:n}
    function unpack_unsigned_16_big_endian(buf,pos)
     {var
       b1=caml_call2(get$2,buf,pos) << 8,
       b2=caml_call2(get$2,buf,pos + 1 | 0);
      return b1 | b2}
    function unpack_unsigned_16_little_endian(buf,pos)
     {var
       b1=caml_call2(get$2,buf,pos + 1 | 0) << 8,
       b2=caml_call2(get$2,buf,pos);
      return b1 | b2}
    function unpack_signed_16_big_endian(buf,pos)
     {var n=unpack_unsigned_16_big_endian(buf,pos);
      return 32768 <= n?- (65536 - n | 0) | 0:n}
    function unpack_signed_16_little_endian(buf,pos)
     {var n=unpack_unsigned_16_little_endian(buf,pos);
      return 32768 <= n?- (65536 - n | 0) | 0:n}
    function Make_inline_tests(_bdA_)
     {var
       _bdB_=_bdA_[1],
       _bdC_=_bdA_[2],
       _bdD_=_bdA_[3],
       _bdE_=_bdA_[4],
       _bdF_=_bdA_[5],
       _bdG_=_bdA_[6],
       _bdH_=_bdA_[7],
       _bdI_=_bdA_[8],
       _bdJ_=_bdA_[9],
       _bdK_=_bdA_[10],
       _bdL_=_bdA_[11],
       pos=3,
       buf_size=13,
       ns_rev=
        caml_call2
         (map$11,
          _bdD_,
          function(t)
           {var t$0=caml_call1(_bdF_,t);
            function _bdZ_(acc,k)
             {var
               w=
                caml_int64_shift_left
                 (caml_int64_and
                   (_axI_,caml_int64_shift_right_unsigned(t$0,k * 8 | 0)),
                  ((_bdB_ - 1 | 0) - k | 0) * 8 | 0);
              if(_bdC_)
               if(8 <= _bdB_)
                var switch$0=0;
               else
                var
                 max_val=caml_int64_shift_left(_axJ_,(_bdB_ * 8 | 0) - 1 | 0),
                 _bd1_=
                  caml_greaterequal(w,max_val)
                   ?runtime.caml_int64_sub(w,caml_int64_shift_left(max_val,1))
                   :w,
                 w$0=_bd1_,
                 switch$0=1;
              else
               var switch$0=0;
              if(! switch$0)var w$0=w;
              return caml_int64_or(acc,w$0)}
            return caml_call1
                    (_bdE_,
                     caml_call3
                      (fold$2,
                       caml_call2(init$1,_bdB_,function(_bd0_){return _bd0_}),
                       _axK_,
                       _bdZ_))}),
       padding=46;
      function test_rest_of_buf(buf)
       {var k=0;
        for(;;)
         {var _bdW_=k < 3?1:0,_bdX_=_bdW_ || ((3 + _bdB_ | 0) < k?1:0);
          if(_bdX_)
           if(caml_call2(get$2,buf,k) !== 46)throw [0,Assert_failure,_axL_];
          var _bdY_=k + 1 | 0;
          if(12 !== k){var k=_bdY_;continue}
          return 0}}
      function _bdM_(param)
       {return caml_equal
                (_bdD_,
                 caml_call2
                  (map$11,
                   _bdD_,
                   function(n)
                    {var buf=caml_call2(make$0,buf_size,padding);
                     caml_call4(_bdG_,720314340,buf,pos,n);
                     test_rest_of_buf(buf);
                     return caml_call3(_bdH_,720314340,buf,pos)}))}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_ns_List_map_ns_f_fun_n,
        0,
        cst_src_binary_packing_ml$0,
        190,
        2,
        225,
        _bdM_);
      function _bdN_(param)
       {return caml_equal
                (_bdD_,
                 caml_call2
                  (map$11,
                   _bdD_,
                   function(n)
                    {var buf=caml_call2(make$0,buf_size,padding);
                     caml_call4(_bdG_,75664794,buf,pos,n);
                     test_rest_of_buf(buf);
                     return caml_call3(_bdH_,75664794,buf,pos)}))}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_ns_List_map_ns_f_fun_n$0,
        0,
        cst_src_binary_packing_ml$1,
        196,
        2,
        219,
        _bdN_);
      function _bdO_(param)
       {return caml_equal
                (_bdD_,
                 caml_call2
                  (map$11,
                   _bdD_,
                   function(n)
                    {var buf=caml_call2(make$0,buf_size,padding);
                     caml_call3(_bdK_,buf,pos,n);
                     test_rest_of_buf(buf);
                     return caml_call2(_bdL_,buf,pos)}))}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_ns_List_map_ns_f_fun_n$1,
        0,
        cst_src_binary_packing_ml$2,
        202,
        2,
        199,
        _bdO_);
      function _bdP_(param)
       {return caml_equal
                (_bdD_,
                 caml_call2
                  (map$11,
                   _bdD_,
                   function(n)
                    {var buf=caml_call2(make$0,buf_size,padding);
                     caml_call3(_bdI_,buf,pos,n);
                     test_rest_of_buf(buf);
                     return caml_call2(_bdJ_,buf,pos)}))}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_ns_List_map_ns_f_fun_n$2,
        0,
        cst_src_binary_packing_ml$3,
        208,
        2,
        193,
        _bdP_);
      function _bdQ_(param)
       {return caml_equal
                (ns_rev,
                 caml_call2
                  (map$11,
                   _bdD_,
                   function(n)
                    {var buf=caml_call2(make$0,buf_size,padding);
                     caml_call3(_bdI_,buf,pos,n);
                     test_rest_of_buf(buf);
                     return caml_call2(_bdL_,buf,pos)}))}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_ns_rev_List_map_ns_f_fun_n,
        0,
        cst_src_binary_packing_ml$4,
        214,
        2,
        200,
        _bdQ_);
      function _bdR_(param)
       {return caml_equal
                (ns_rev,
                 caml_call2
                  (map$11,
                   _bdD_,
                   function(n)
                    {var buf=caml_call2(make$0,buf_size,padding);
                     caml_call3(_bdK_,buf,pos,n);
                     test_rest_of_buf(buf);
                     return caml_call2(_bdJ_,buf,pos)}))}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_ns_rev_List_map_ns_f_fun_n$0,
        0,
        cst_src_binary_packing_ml$5,
        220,
        2,
        200,
        _bdR_);
      function _bdS_(param)
       {return caml_equal
                (_bdD_,
                 caml_call2
                  (map$11,
                   _bdD_,
                   function(n)
                    {var buf=caml_call2(make$0,buf_size,padding);
                     caml_call4(_bdG_,75664794,buf,pos,n);
                     test_rest_of_buf(buf);
                     return caml_call2(_bdJ_,buf,pos)}))}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_ns_List_map_ns_f_fun_n$3,
        0,
        cst_src_binary_packing_ml$6,
        226,
        2,
        206,
        _bdS_);
      function _bdT_(param)
       {return caml_equal
                (_bdD_,
                 caml_call2
                  (map$11,
                   _bdD_,
                   function(n)
                    {var buf=caml_call2(make$0,buf_size,padding);
                     caml_call4(_bdG_,720314340,buf,pos,n);
                     test_rest_of_buf(buf);
                     return caml_call2(_bdL_,buf,pos)}))}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_ns_List_map_ns_f_fun_n$4,
        0,
        cst_src_binary_packing_ml$7,
        232,
        2,
        212,
        _bdT_);
      function _bdU_(param)
       {return caml_equal
                (_bdD_,
                 caml_call2
                  (map$11,
                   _bdD_,
                   function(n)
                    {var buf=caml_call2(make$0,buf_size,padding);
                     caml_call3(_bdI_,buf,pos,n);
                     test_rest_of_buf(buf);
                     return caml_call3(_bdH_,75664794,buf,pos)}))}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_ns_List_map_ns_f_fun_n$5,
        0,
        cst_src_binary_packing_ml$8,
        238,
        2,
        206,
        _bdU_);
      function _bdV_(param)
       {return caml_equal
                (_bdD_,
                 caml_call2
                  (map$11,
                   _bdD_,
                   function(n)
                    {var buf=caml_call2(make$0,buf_size,padding);
                     caml_call3(_bdK_,buf,pos,n);
                     test_rest_of_buf(buf);
                     return caml_call3(_bdH_,720314340,buf,pos)}))}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_ns_List_map_ns_f_fun_n$6,
        0,
        cst_src_binary_packing_ml$9,
        244,
        2,
        212,
        _bdV_);
      return [0,
              _bdB_,
              _bdC_,
              _bdD_,
              _bdE_,
              _bdF_,
              _bdG_,
              _bdH_,
              _bdI_,
              _bdJ_,
              _bdK_,
              _bdL_,
              pos,
              buf_size,
              ns_rev,
              padding,
              test_rest_of_buf]}
    function _axM_(param)
     {var of_int64=caml_int64_to_int32,to_int64=caml_int64_of_int32;
      Make_inline_tests
       ([0,
         2,
         0,
         ns,
         of_int64,
         to_int64,
         pack_unsigned_16,
         unpack_unsigned_16,
         pack_unsigned_16_big_endian,
         unpack_unsigned_16_big_endian,
         pack_unsigned_16_little_endian,
         unpack_unsigned_16_little_endian]);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst_inline_unsigned_16,
      0,
      cst_src_binary_packing_ml$10,
      252,
      0,
      574,
      _axM_);
    function _axN_(param)
     {var of_int64=caml_int64_to_int32,to_int64=caml_int64_of_int32;
      Make_inline_tests
       ([0,
         2,
         1,
         ns$0,
         of_int64,
         to_int64,
         pack_signed_16,
         unpack_signed_16,
         pack_signed_16_big_endian,
         unpack_signed_16_big_endian,
         pack_signed_16_little_endian,
         unpack_signed_16_little_endian]);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst_inline_signed_16,
      0,
      cst_src_binary_packing_ml$11,
      267,
      0,
      556,
      _axN_);
    var
     Pack_unsigned_32_argument_out_of_range=
      [248,
       cst_Core_kernel_Binary_packing_Pack_unsigned_32_argument_out_of_range,
       caml_fresh_oo_id(0)];
    function _axO_(param)
     {if(param[1] === Pack_unsigned_32_argument_out_of_range)
       {var v0=param[2],v0$0=caml_call1(sexp_of_t$43,v0);
        return [1,[0,_axP_,[0,v0$0,0]]]}
      throw [0,Assert_failure,_axQ_]}
    caml_call3
     (Sexplib0_Sexp_conv[51][2],
      0,
      Pack_unsigned_32_argument_out_of_range,
      _axO_);
    function check_unsigned_32_in_range(n)
     {if(arch_sixtyfour$2)
       {var _bdx_=unsigned_max < n?1:0,_bdy_=_bdx_ || (n < 0?1:0);
        if(_bdy_)throw [0,Pack_unsigned_32_argument_out_of_range,n];
        return _bdy_}
      var _bdz_=n < 0?1:0;
      if(_bdz_)throw [0,Pack_unsigned_32_argument_out_of_range,n];
      return _bdz_}
    function pack_unsigned_32_int(byte_order,buf,pos,n)
     {if(64 === Stdlib_sys[10])
       {check_unsigned_32_in_range(n);
        caml_call3(set$6,buf,pos + offset(4,byte_order,0) | 0,255 & n >> 24);
        caml_call3(set$6,buf,pos + offset(4,byte_order,1) | 0,255 & n >> 16);
        caml_call3(set$6,buf,pos + offset(4,byte_order,2) | 0,255 & n >> 8);
        return caml_call3(set$6,buf,pos + offset(4,byte_order,3) | 0,255 & n)}
      throw [0,Assert_failure,_axR_]}
    function pack_unsigned_32_int_big_endian(buf,pos,n)
     {check_unsigned_32_in_range(n);
      caml_call3(set$6,buf,pos,255 & (n >>> 24 | 0));
      caml_call3(set$6,buf,pos + 3 | 0,255 & n);
      caml_bytes_unsafe_set(buf,pos + 1 | 0,255 & (n >>> 16 | 0));
      caml_bytes_unsafe_set(buf,pos + 2 | 0,255 & (n >>> 8 | 0));
      return 0}
    function pack_unsigned_32_int_little_endian(buf,pos,n)
     {check_unsigned_32_in_range(n);
      caml_call3(set$6,buf,pos + 3 | 0,255 & (n >>> 24 | 0));
      caml_call3(set$6,buf,pos,255 & n);
      caml_bytes_unsafe_set(buf,pos + 2 | 0,255 & (n >>> 16 | 0));
      caml_bytes_unsafe_set(buf,pos + 1 | 0,255 & (n >>> 8 | 0));
      return 0}
    var
     Pack_signed_32_argument_out_of_range=
      [248,
       cst_Core_kernel_Binary_packing_Pack_signed_32_argument_out_of_range,
       caml_fresh_oo_id(0)];
    function _axS_(param)
     {if(param[1] === Pack_signed_32_argument_out_of_range)
       {var v0=param[2],v0$0=caml_call1(sexp_of_t$43,v0);
        return [1,[0,_axT_,[0,v0$0,0]]]}
      throw [0,Assert_failure,_axU_]}
    caml_call3
     (Sexplib0_Sexp_conv[51][2],0,Pack_signed_32_argument_out_of_range,_axS_);
    function check_signed_32_in_range(n)
     {if(arch_sixtyfour$2)
       {var
         _bdu_=signed_max < n?1:0,
         _bdv_=_bdu_ || (n < (- (signed_max + 1 | 0) | 0)?1:0);
        if(_bdv_)throw [0,Pack_signed_32_argument_out_of_range,n];
        var _bdw_=_bdv_}
      else
       var _bdw_=arch_sixtyfour$2;
      return _bdw_}
    function pack_signed_32_int(byte_order,buf,pos,n)
     {if(64 === Stdlib_sys[10])
       {check_signed_32_in_range(n);
        caml_call3(set$6,buf,pos + offset(4,byte_order,0) | 0,255 & n >> 24);
        caml_call3(set$6,buf,pos + offset(4,byte_order,1) | 0,255 & n >> 16);
        caml_call3(set$6,buf,pos + offset(4,byte_order,2) | 0,255 & n >> 8);
        return caml_call3(set$6,buf,pos + offset(4,byte_order,3) | 0,255 & n)}
      throw [0,Assert_failure,_axV_]}
    function pack_signed_32_int_big_endian(buf,pos,n)
     {check_signed_32_in_range(n);
      caml_call3(set$6,buf,pos,255 & n >> 24);
      caml_call3(set$6,buf,pos + 3 | 0,255 & n);
      caml_bytes_unsafe_set(buf,pos + 1 | 0,255 & n >> 16);
      caml_bytes_unsafe_set(buf,pos + 2 | 0,255 & n >> 8);
      return 0}
    function pack_signed_32_int_little_endian(buf,pos,n)
     {check_signed_32_in_range(n);
      caml_call3(set$6,buf,pos + 3 | 0,255 & n >> 24);
      caml_call3(set$6,buf,pos,255 & n);
      caml_bytes_unsafe_set(buf,pos + 2 | 0,255 & n >> 16);
      caml_bytes_unsafe_set(buf,pos + 1 | 0,255 & n >> 8);
      return 0}
    function pack_signed_32(byte_order,buf,pos,n)
     {caml_call3(set$6,buf,pos + offset(4,byte_order,0) | 0,255 & n >> 24);
      caml_call3(set$6,buf,pos + offset(4,byte_order,1) | 0,255 & n >> 16);
      caml_call3(set$6,buf,pos + offset(4,byte_order,2) | 0,255 & n >> 8);
      return caml_call3(set$6,buf,pos + offset(4,byte_order,3) | 0,255 & n)}
    function unpack_signed_32(byte_order,buf,pos)
     {var
       b1=caml_call2(get$2,buf,pos + offset(4,byte_order,0) | 0) << 24,
       b2=caml_call2(get$2,buf,pos + offset(4,byte_order,1) | 0) << 16,
       b3=caml_call2(get$2,buf,pos + offset(4,byte_order,2) | 0) << 8,
       b4=caml_call2(get$2,buf,pos + offset(4,byte_order,3) | 0);
      return b1 | b2 | b3 | b4}
    function unpack_unsigned_32_int(byte_order,buf,pos)
     {if(64 === Stdlib_sys[10])
       {var
         b1=caml_call2(get$2,buf,pos + offset(4,byte_order,0) | 0) << 24,
         b2=caml_call2(get$2,buf,pos + offset(4,byte_order,1) | 0) << 16,
         b3=caml_call2(get$2,buf,pos + offset(4,byte_order,2) | 0) << 8,
         b4=caml_call2(get$2,buf,pos + offset(4,byte_order,3) | 0);
        return b1 | b2 | b3 | b4}
      throw [0,Assert_failure,_axW_]}
    function unpack_unsigned_32_int_big_endian(buf,pos)
     {var
       b1=caml_call2(get$2,buf,pos) << 24,
       b4=caml_call2(get$2,buf,pos + 3 | 0),
       b2=caml_bytes_unsafe_get(buf,pos + 1 | 0) << 16,
       b3=caml_bytes_unsafe_get(buf,pos + 2 | 0) << 8;
      return b1 | b2 | b3 | b4}
    function unpack_unsigned_32_int_little_endian(buf,pos)
     {var
       b1=caml_call2(get$2,buf,pos + 3 | 0) << 24,
       b4=caml_call2(get$2,buf,pos),
       b2=caml_bytes_unsafe_get(buf,pos + 2 | 0) << 16,
       b3=caml_bytes_unsafe_get(buf,pos + 1 | 0) << 8;
      return b1 | b2 | b3 | b4}
    function unpack_signed_32_int(byte_order,buf,pos)
     {var n=unpack_unsigned_32_int(byte_order,buf,pos);
      if(arch_sixtyfour$2)
       if(signed_max < n)return - (((signed_max + 1 | 0) << 1) - n | 0) | 0;
      return n}
    function unpack_signed_32_int_big_endian(buf,pos)
     {var n=unpack_unsigned_32_int_big_endian(buf,pos);
      if(arch_sixtyfour$2)
       if(signed_max < n)return n - (unsigned_max + 1 | 0) | 0;
      return n}
    function unpack_signed_32_int_little_endian(buf,pos)
     {var n=unpack_unsigned_32_int_little_endian(buf,pos);
      if(arch_sixtyfour$2)
       if(signed_max < n)return n - (unsigned_max + 1 | 0) | 0;
      return n}
    function _axX_(param)
     {var
       ns=
        [0,
         1059074112,
         [0,
          caml_int64_to_int32(_axZ_),
          [0,signed_max,[0,signed_max + 1 | 0,[0,unsigned_max,_axY_]]]]],
       of_int64=caml_int64_to_int32,
       to_int64=caml_int64_of_int32;
      Make_inline_tests
       ([0,
         4,
         0,
         ns,
         of_int64,
         to_int64,
         pack_unsigned_32_int,
         unpack_unsigned_32_int,
         pack_unsigned_32_int_big_endian,
         unpack_unsigned_32_int_big_endian,
         pack_unsigned_32_int_little_endian,
         unpack_unsigned_32_int_little_endian]);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst_inline_unsigned_32_int,
      _ax0_,
      cst_src_binary_packing_ml$12,
      409,
      0,
      673,
      _axX_);
    function _ax1_(param)
     {var
       ns=
        [0,
         1059074112,
         [0,
          caml_int64_to_int32(_ax4_),
          [0,
           caml_int64_to_int32(_ax3_),
           [0,signed_max,[0,- (signed_max + 1 | 0) | 0,_ax2_]]]]],
       of_int64=caml_int64_to_int32,
       to_int64=caml_int64_of_int32;
      Make_inline_tests
       ([0,
         4,
         1,
         ns,
         of_int64,
         to_int64,
         pack_signed_32_int,
         unpack_signed_32_int,
         pack_signed_32_int_big_endian,
         unpack_signed_32_int_big_endian,
         pack_signed_32_int_little_endian,
         unpack_signed_32_int_little_endian]);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst_inline_signed_32_int,
      _ax5_,
      cst_src_binary_packing_ml$13,
      425,
      0,
      677,
      _ax1_);
    function pack_signed_64(byte_order,buf,pos,v)
     {var
       top3=caml_int64_to_int32(caml_int64_shift_right(v,40)),
       mid3=caml_int64_to_int32(caml_int64_shift_right(v,16)),
       bot2=caml_int64_to_int32(v);
      caml_call3
       (set$6,buf,pos + offset(8,byte_order,0) | 0,255 & (top3 >>> 16 | 0));
      caml_call3
       (set$6,buf,pos + offset(8,byte_order,1) | 0,255 & (top3 >>> 8 | 0));
      caml_call3(set$6,buf,pos + offset(8,byte_order,2) | 0,255 & top3);
      caml_call3
       (set$6,buf,pos + offset(8,byte_order,3) | 0,255 & (mid3 >>> 16 | 0));
      caml_call3
       (set$6,buf,pos + offset(8,byte_order,4) | 0,255 & (mid3 >>> 8 | 0));
      caml_call3(set$6,buf,pos + offset(8,byte_order,5) | 0,255 & mid3);
      caml_call3
       (set$6,buf,pos + offset(8,byte_order,6) | 0,255 & (bot2 >>> 8 | 0));
      return caml_call3(set$6,buf,pos + offset(8,byte_order,7) | 0,255 & bot2)}
    function pack_signed_64_big_endian(buf,pos,v)
     {caml_call3
       (set$6,
        buf,
        pos,
        caml_int64_to_int32
         (caml_int64_and(_ax6_,caml_int64_shift_right_unsigned(v,56))));
      caml_call3
       (set$6,buf,pos + 7 | 0,caml_int64_to_int32(caml_int64_and(_ax7_,v)));
      caml_bytes_unsafe_set
       (buf,
        pos + 1 | 0,
        caml_int64_to_int32
         (caml_int64_and(_ax8_,caml_int64_shift_right_unsigned(v,48))));
      caml_bytes_unsafe_set
       (buf,
        pos + 2 | 0,
        caml_int64_to_int32
         (caml_int64_and(_ax9_,caml_int64_shift_right_unsigned(v,40))));
      caml_bytes_unsafe_set
       (buf,
        pos + 3 | 0,
        caml_int64_to_int32
         (caml_int64_and(_ax__,caml_int64_shift_right_unsigned(v,32))));
      caml_bytes_unsafe_set
       (buf,
        pos + 4 | 0,
        caml_int64_to_int32
         (caml_int64_and(_ax$_,caml_int64_shift_right_unsigned(v,24))));
      caml_bytes_unsafe_set
       (buf,
        pos + 5 | 0,
        caml_int64_to_int32
         (caml_int64_and(_aya_,caml_int64_shift_right_unsigned(v,16))));
      caml_bytes_unsafe_set
       (buf,
        pos + 6 | 0,
        caml_int64_to_int32
         (caml_int64_and(_ayb_,caml_int64_shift_right_unsigned(v,8))));
      return 0}
    function pack_signed_64_little_endian(buf,pos,v)
     {caml_call3(set$6,buf,pos,caml_int64_to_int32(caml_int64_and(_ayc_,v)));
      caml_call3
       (set$6,
        buf,
        pos + 7 | 0,
        caml_int64_to_int32
         (caml_int64_and(_ayd_,caml_int64_shift_right_unsigned(v,56))));
      caml_bytes_unsafe_set
       (buf,
        pos + 1 | 0,
        caml_int64_to_int32
         (caml_int64_and(_aye_,caml_int64_shift_right_unsigned(v,8))));
      caml_bytes_unsafe_set
       (buf,
        pos + 2 | 0,
        caml_int64_to_int32
         (caml_int64_and(_ayf_,caml_int64_shift_right_unsigned(v,16))));
      caml_bytes_unsafe_set
       (buf,
        pos + 3 | 0,
        caml_int64_to_int32
         (caml_int64_and(_ayg_,caml_int64_shift_right_unsigned(v,24))));
      caml_bytes_unsafe_set
       (buf,
        pos + 4 | 0,
        caml_int64_to_int32
         (caml_int64_and(_ayh_,caml_int64_shift_right_unsigned(v,32))));
      caml_bytes_unsafe_set
       (buf,
        pos + 5 | 0,
        caml_int64_to_int32
         (caml_int64_and(_ayi_,caml_int64_shift_right_unsigned(v,40))));
      caml_bytes_unsafe_set
       (buf,
        pos + 6 | 0,
        caml_int64_to_int32
         (caml_int64_and(_ayj_,caml_int64_shift_right_unsigned(v,48))));
      return 0}
    function unpack_signed_64(byte_order,buf,pos)
     {var
       _bdn_=caml_call2(get$2,buf,pos + offset(8,byte_order,7) | 0),
       _bdo_=
        caml_int64_of_int32
         (caml_call2(get$2,buf,pos + offset(8,byte_order,6) | 0) << 8 | _bdn_),
       _bdp_=caml_call2(get$2,buf,pos + offset(8,byte_order,5) | 0),
       _bdq_=caml_call2(get$2,buf,pos + offset(8,byte_order,4) | 0) << 8,
       _bdr_=
        caml_int64_shift_left
         (caml_int64_of_int32
           (caml_call2(get$2,buf,pos + offset(8,byte_order,3) | 0)
            <<
            16
            |
            _bdq_
            |
            _bdp_),
          16),
       _bds_=caml_call2(get$2,buf,pos + offset(8,byte_order,2) | 0),
       _bdt_=caml_call2(get$2,buf,pos + offset(8,byte_order,1) | 0) << 8;
      return caml_int64_or
              (caml_int64_or
                (caml_int64_shift_left
                  (caml_int64_of_int32
                    (caml_call2(get$2,buf,pos + offset(8,byte_order,0) | 0)
                     <<
                     16
                     |
                     _bdt_
                     |
                     _bds_),
                   40),
                 _bdr_),
               _bdo_)}
    function unpack_signed_64_big_endian(buf,pos)
     {var
       b1=caml_call2(get$2,buf,pos),
       b8=caml_call2(get$2,buf,pos + 7 | 0),
       b2=caml_bytes_unsafe_get(buf,pos + 1 | 0),
       b3=caml_bytes_unsafe_get(buf,pos + 2 | 0),
       b4=caml_bytes_unsafe_get(buf,pos + 3 | 0),
       b5=caml_bytes_unsafe_get(buf,pos + 4 | 0),
       b6=caml_bytes_unsafe_get(buf,pos + 5 | 0),
       b7=caml_bytes_unsafe_get(buf,pos + 6 | 0);
      if(arch_sixtyfour$2)
       {var
         i1=caml_int64_of_int32(b1),
         i2=
          caml_int64_of_int32
           (b2
            <<
            48
            |
            b3
            <<
            40
            |
            b4
            <<
            32
            |
            b5
            <<
            24
            |
            b6
            <<
            16
            |
            b7
            <<
            8
            |
            b8);
        return caml_int64_or(i2,caml_int64_shift_left(i1,56))}
      var
       i1$0=caml_int64_of_int32(b1 << 8 | b2),
       i2$0=caml_int64_of_int32(b3 << 16 | b4 << 8 | b5),
       i3=caml_int64_of_int32(b6 << 16 | b7 << 8 | b8);
      return caml_int64_or
              (i3,
               caml_int64_or
                (caml_int64_shift_left(i2$0,24),
                 caml_int64_shift_left(i1$0,48)))}
    function unpack_signed_64_little_endian(buf,pos)
     {var
       b1=caml_call2(get$2,buf,pos),
       b8=caml_call2(get$2,buf,pos + 7 | 0),
       b2=caml_bytes_unsafe_get(buf,pos + 1 | 0),
       b3=caml_bytes_unsafe_get(buf,pos + 2 | 0),
       b4=caml_bytes_unsafe_get(buf,pos + 3 | 0),
       b5=caml_bytes_unsafe_get(buf,pos + 4 | 0),
       b6=caml_bytes_unsafe_get(buf,pos + 5 | 0),
       b7=caml_bytes_unsafe_get(buf,pos + 6 | 0);
      if(arch_sixtyfour$2)
       {var
         i1=
          caml_int64_of_int32
           (b1
            |
            b2
            <<
            8
            |
            b3
            <<
            16
            |
            b4
            <<
            24
            |
            b5
            <<
            32
            |
            b6
            <<
            40
            |
            b7
            <<
            48),
         i2=caml_int64_of_int32(b8);
        return caml_int64_or(i1,caml_int64_shift_left(i2,56))}
      var
       i1$0=caml_int64_of_int32(b1 | b2 << 8 | b3 << 16),
       i2$0=caml_int64_of_int32(b4 | b5 << 8 | b6 << 16),
       i3=caml_int64_of_int32(b7 | b8 << 8);
      return caml_int64_or
              (i1$0,
               caml_int64_or
                (caml_int64_shift_left(i2$0,24),caml_int64_shift_left(i3,48)))}
    function pack_signed_64_int(byte_order,buf,pos,n)
     {if(64 === Stdlib_sys[10])
       {caml_call3(set$6,buf,pos + offset(8,byte_order,0) | 0,255 & n >> 56);
        caml_call3(set$6,buf,pos + offset(8,byte_order,1) | 0,255 & n >> 48);
        caml_call3(set$6,buf,pos + offset(8,byte_order,2) | 0,255 & n >> 40);
        caml_call3(set$6,buf,pos + offset(8,byte_order,3) | 0,255 & n >> 32);
        caml_call3(set$6,buf,pos + offset(8,byte_order,4) | 0,255 & n >> 24);
        caml_call3(set$6,buf,pos + offset(8,byte_order,5) | 0,255 & n >> 16);
        caml_call3(set$6,buf,pos + offset(8,byte_order,6) | 0,255 & n >> 8);
        return caml_call3(set$6,buf,pos + offset(8,byte_order,7) | 0,255 & n)}
      throw [0,Assert_failure,_ayk_]}
    function pack_signed_64_int_big_endian(buf,pos,v)
     {caml_call3(set$6,buf,pos,255 & v >> 56);
      caml_call3(set$6,buf,pos + 7 | 0,255 & v);
      caml_bytes_unsafe_set(buf,pos + 1 | 0,255 & v >> 48);
      caml_bytes_unsafe_set(buf,pos + 2 | 0,255 & v >> 40);
      caml_bytes_unsafe_set(buf,pos + 3 | 0,255 & v >> 32);
      caml_bytes_unsafe_set(buf,pos + 4 | 0,255 & v >> 24);
      caml_bytes_unsafe_set(buf,pos + 5 | 0,255 & v >> 16);
      caml_bytes_unsafe_set(buf,pos + 6 | 0,255 & v >> 8);
      return 0}
    function pack_signed_64_int_little_endian(buf,pos,v)
     {caml_call3(set$6,buf,pos,255 & v);
      caml_call3(set$6,buf,pos + 7 | 0,255 & v >> 56);
      caml_bytes_unsafe_set(buf,pos + 1 | 0,255 & v >> 8);
      caml_bytes_unsafe_set(buf,pos + 2 | 0,255 & v >> 16);
      caml_bytes_unsafe_set(buf,pos + 3 | 0,255 & v >> 24);
      caml_bytes_unsafe_set(buf,pos + 4 | 0,255 & v >> 32);
      caml_bytes_unsafe_set(buf,pos + 5 | 0,255 & v >> 40);
      caml_bytes_unsafe_set(buf,pos + 6 | 0,255 & v >> 48);
      return 0}
    function unpack_signed_64_int(byte_order,buf,pos)
     {if(64 === Stdlib_sys[10])
       {var
         _bdg_=caml_call2(get$2,buf,pos + offset(8,byte_order,7) | 0),
         _bdh_=caml_call2(get$2,buf,pos + offset(8,byte_order,6) | 0) << 8,
         _bdi_=caml_call2(get$2,buf,pos + offset(8,byte_order,5) | 0) << 16,
         _bdj_=caml_call2(get$2,buf,pos + offset(8,byte_order,4) | 0) << 24,
         _bdk_=caml_call2(get$2,buf,pos + offset(8,byte_order,3) | 0) << 32,
         _bdl_=caml_call2(get$2,buf,pos + offset(8,byte_order,2) | 0) << 40,
         _bdm_=caml_call2(get$2,buf,pos + offset(8,byte_order,1) | 0) << 48;
        return caml_call2(get$2,buf,pos + offset(8,byte_order,0) | 0)
               <<
               56
               |
               _bdm_
               |
               _bdl_
               |
               _bdk_
               |
               _bdj_
               |
               _bdi_
               |
               _bdh_
               |
               _bdg_}
      throw [0,Assert_failure,_ayl_]}
    var
     Unpack_signed_64_int_most_significant_byte_too_large=
      [248,
       cst_Core_kernel_Binary_packing_Unpack_signed_64_int_most_significant_byte_too_large,
       caml_fresh_oo_id(0)];
    function _aym_(param)
     {if(param[1] === Unpack_signed_64_int_most_significant_byte_too_large)
       {var v0=param[2],v0$0=caml_call1(sexp_of_t$43,v0);
        return [1,[0,_ayn_,[0,v0$0,0]]]}
      throw [0,Assert_failure,_ayo_]}
    caml_call3
     (Sexplib0_Sexp_conv[51][2],
      0,
      Unpack_signed_64_int_most_significant_byte_too_large,
      _aym_);
    function check_highest_order_byte_range(byte$0)
     {if(64 <= byte$0)
       if(! (192 <= byte$0))
        throw [0,Unpack_signed_64_int_most_significant_byte_too_large,byte$0];
      return 0}
    function unpack_signed_64_int_big_endian(buf,pos)
     {if(64 === Stdlib_sys[10])
       {var
         b1=caml_call2(get$2,buf,pos),
         b8=caml_call2(get$2,buf,pos + 7 | 0),
         b2=caml_bytes_unsafe_get(buf,pos + 1 | 0),
         b3=caml_bytes_unsafe_get(buf,pos + 2 | 0),
         b4=caml_bytes_unsafe_get(buf,pos + 3 | 0),
         b5=caml_bytes_unsafe_get(buf,pos + 4 | 0),
         b6=caml_bytes_unsafe_get(buf,pos + 5 | 0),
         b7=caml_bytes_unsafe_get(buf,pos + 6 | 0);
        check_highest_order_byte_range(b1);
        return b1
               <<
               56
               |
               b2
               <<
               48
               |
               b3
               <<
               40
               |
               b4
               <<
               32
               |
               b5
               <<
               24
               |
               b6
               <<
               16
               |
               b7
               <<
               8
               |
               b8}
      throw [0,Assert_failure,_ayp_]}
    function unpack_signed_64_int_little_endian(buf,pos)
     {if(64 === Stdlib_sys[10])
       {var
         b1=caml_call2(get$2,buf,pos),
         b8=caml_call2(get$2,buf,pos + 7 | 0),
         b2=caml_bytes_unsafe_get(buf,pos + 1 | 0),
         b3=caml_bytes_unsafe_get(buf,pos + 2 | 0),
         b4=caml_bytes_unsafe_get(buf,pos + 3 | 0),
         b5=caml_bytes_unsafe_get(buf,pos + 4 | 0),
         b6=caml_bytes_unsafe_get(buf,pos + 5 | 0),
         b7=caml_bytes_unsafe_get(buf,pos + 6 | 0);
        check_highest_order_byte_range(b8);
        return b1
               |
               b2
               <<
               8
               |
               b3
               <<
               16
               |
               b4
               <<
               24
               |
               b5
               <<
               32
               |
               b6
               <<
               40
               |
               b7
               <<
               48
               |
               b8
               <<
               56}
      throw [0,Assert_failure,_ayq_]}
    function _ayr_(param)
     {var buf=caml_call1(create$13,8),pos=0;
      return caml_call2
              (iter$2,
               [0,
                [0,
                 pack_signed_64_little_endian,
                 unpack_signed_64_int_little_endian],
                [0,
                 [0,pack_signed_64_big_endian,unpack_signed_64_int_big_endian],
                 0]],
               function(param)
                {var unpack=param[2],pack=param[1];
                 function _bde_(param)
                  {var opt=param[2],n=param[1];
                   caml_call3(pack,buf,pos,n);
                   try
                    {caml_call2(unpack,buf,pos);
                     if(0 === opt){var _bdf_=0;return _bdf_}
                     throw [0,Assert_failure,_ays_]}
                   catch(exn)
                    {exn = caml_wrap_exception(exn);
                     if
                      (exn[1]
                       ===
                       Unpack_signed_64_int_most_significant_byte_too_large)
                      {var n$0=exn[2];if(caml_equal([0,n$0],opt))return 0}
                     throw exn}}
                 return caml_call2
                         (iter$2,
                          [0,
                           [0,Stdlib_int64[7],_ayy_],
                           [0,
                            [0,Stdlib_int64[8],_ayx_],
                            [0,
                             [0,caml_int64_add(caml_int64_of_int32(_wq_),_ayw_),_ayv_],
                             [0,
                              [0,caml_int64_add(caml_int64_of_int32(_wp_),_ayu_),_ayt_],
                              [0,
                               [0,caml_int64_of_int32(_wq_),0],
                               [0,[0,caml_int64_of_int32(_wp_),0],0]]]]]],
                          _bde_)})}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_63_bits_overflow,
      _ayz_,
      cst_src_binary_packing_ml$14,
      664,
      0,
      789,
      _ayr_);
    function _ayA_(param)
     {var num_bytes=8,signed=1;
      function of_int64(_bdd_){return _bdd_}
      function to_int64(_bdc_){return _bdc_}
      Make_inline_tests
       ([0,
         num_bytes,
         signed,
         ns$1,
         of_int64,
         to_int64,
         pack_signed_64,
         unpack_signed_64,
         pack_signed_64_big_endian,
         unpack_signed_64_big_endian,
         pack_signed_64_little_endian,
         unpack_signed_64_little_endian]);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst_inline_signed_64,
      0,
      cst_src_binary_packing_ml$15,
      685,
      0,
      691,
      _ayA_);
    function _ayB_(param)
     {var
       ns=caml_call2(map$11,_ayC_,_xz_),
       of_int64=caml_int64_to_int32,
       to_int64=caml_int64_of_int32;
      Make_inline_tests
       ([0,
         8,
         1,
         ns,
         of_int64,
         to_int64,
         pack_signed_64_int,
         unpack_signed_64_int,
         pack_signed_64_int_big_endian,
         unpack_signed_64_int_big_endian,
         pack_signed_64_int_little_endian,
         unpack_signed_64_int_little_endian]);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst_inline_signed_64_int,
      _ayD_,
      cst_src_binary_packing_ml$16,
      705,
      0,
      1091,
      _ayB_);
    function pack_float(byte_order,buf,pos,f)
     {return pack_signed_64
              (byte_order,buf,pos,runtime.caml_int64_bits_of_float(f))}
    function unpack_float(byte_order,buf,pos)
     {return runtime.caml_int64_float_of_bits
              (unpack_signed_64(byte_order,buf,pos))}
    function last_nonmatch_plus_one(buf,min_pos,pos,char$0)
     {var pos$0=pos;
      for(;;)
       {var pos$1=pos$0 - 1 | 0;
        if(min_pos <= pos$1)
         if(caml_call2(_Ct_,caml_call2(get$2,buf,pos$1),char$0))
          {var pos$0=pos$1;continue}
        return pos$0}}
    function unpack_tail_padded_fixed_string(opt,buf,pos,len,param)
     {if(opt)var sth=opt[1],padding=sth;else var padding=0;
      var data_end=last_nonmatch_plus_one(buf,pos,pos + len | 0,padding);
      return caml_call3(sub$4,buf,pos,data_end - pos | 0)}
    var
     Pack_tail_padded_fixed_string_argument_too_long=
      [248,
       cst_Core_kernel_Binary_packing_Pack_tail_padded_fixed_string_argument_too_long,
       caml_fresh_oo_id(0)];
    function _ayE_(param)
     {if(param[1] === Pack_tail_padded_fixed_string_argument_too_long)
       {var
         v2=param[4],
         v0=param[2],
         v0$0=v0[2],
         v0$1=[1,[0,_ayF_,[0,caml_call1(sexp_of_t$58,v0$0),0]]],
         v0$2=v2[2],
         v2$0=[1,[0,_ayG_,[0,caml_call1(sexp_of_t$43,v0$2),0]]];
        return [1,[0,_ayH_,[0,v0$1,[0,v1,[0,v2$0,0]]]]]}
      throw [0,Assert_failure,_ayI_]}
    caml_call3
     (Sexplib0_Sexp_conv[51][2],
      0,
      Pack_tail_padded_fixed_string_argument_too_long,
      _ayE_);
    function pack_tail_padded_fixed_string(opt,buf,pos,len,s)
     {if(opt)var sth=opt[1],padding=sth;else var padding=0;
      var slen=caml_call1(length$18,s);
      if(len < slen)
       throw [0,
              Pack_tail_padded_fixed_string_argument_too_long,
              [0,115,caml_call1(to_string$7,s)],
              -505783881,
              [0,5393365,len]];
      caml_call5(blit$2,s,0,buf,pos,slen);
      var _bdb_=slen < len?1:0;
      if(_bdb_)
       {var diff=len - slen | 0;
        return caml_call4(fill$0,buf,pos + slen | 0,diff,padding)}
      return _bdb_}
    function _ayJ_(param)
     {function test_last_nonmatch_plus_one(buf,min_pos,pos,char$0,expect)
       {return last_nonmatch_plus_one
                 (caml_call1(of_string$6,buf),min_pos,pos,char$0)
                ===
                expect
                ?1
                :0}
      function _bcN_(param)
       {return test_last_nonmatch_plus_one(cst_222121212,3,9,50,8)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_test_last_nonmatch_plus_one_buf_222121212,
        0,
        cst_src_binary_packing_ml$17,
        773,
        4,
        99,
        _bcN_);
      function _bcO_(param)
       {return test_last_nonmatch_plus_one(cst_111121212,3,9,49,9)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_test_last_nonmatch_plus_one_buf_111121212,
        0,
        cst_src_binary_packing_ml$18,
        774,
        4,
        99,
        _bcO_);
      function _bcP_(param)
       {return test_last_nonmatch_plus_one(cst_222121222,3,9,50,6)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_test_last_nonmatch_plus_one_buf_222121222,
        0,
        cst_src_binary_packing_ml$19,
        775,
        4,
        99,
        _bcP_);
      function _bcQ_(param)
       {return test_last_nonmatch_plus_one(cst_222222222,3,9,50,3)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_test_last_nonmatch_plus_one_buf_222222222,
        0,
        cst_src_binary_packing_ml$20,
        776,
        4,
        99,
        _bcQ_);
      function _bcR_(param)
       {return test_last_nonmatch_plus_one(cst_221222222,3,9,50,3)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_test_last_nonmatch_plus_one_buf_221222222,
        0,
        cst_src_binary_packing_ml$21,
        777,
        4,
        99,
        _bcR_);
      function _bcS_(param)
       {return test_last_nonmatch_plus_one(cst_222122222,3,9,50,4)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_test_last_nonmatch_plus_one_buf_222122222,
        0,
        cst_src_binary_packing_ml$22,
        778,
        4,
        99,
        _bcS_);
      function _bcT_(param)
       {return test_last_nonmatch_plus_one(cst_222122222$0,3,9,49,9)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_test_last_nonmatch_plus_one_buf_222122222$0,
        0,
        cst_src_binary_packing_ml$23,
        779,
        4,
        99,
        _bcT_);
      function _bcU_(param)
       {return test_last_nonmatch_plus_one(cst_222122222$1,3,8,49,8)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_test_last_nonmatch_plus_one_buf_222122222$1,
        0,
        cst_src_binary_packing_ml$24,
        780,
        4,
        99,
        _bcU_);
      function _bcV_(param)
       {return test_last_nonmatch_plus_one(cst_222122221,3,8,49,8)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_test_last_nonmatch_plus_one_buf_222122221,
        0,
        cst_src_binary_packing_ml$25,
        781,
        4,
        99,
        _bcV_);
      function _bcW_(param)
       {return test_last_nonmatch_plus_one(cst_222122221$0,3,8,50,4)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_test_last_nonmatch_plus_one_buf_222122221$0,
        0,
        cst_src_binary_packing_ml$26,
        782,
        4,
        99,
        _bcW_);
      function test_unpack_tail_padded_fixed_string
       (padding,buf,pos,len,expect)
       {var
         result=
          caml_call1
           (to_string$7,
            unpack_tail_padded_fixed_string
             ([0,padding],caml_call1(of_string$6,buf),pos,len,0));
        return caml_string_equal(result,expect)}
      function _bcX_(param)
       {return test_unpack_tail_padded_fixed_string(46,cst_ab_c,1,5,cst_b_c)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_test_unpack_tail_padded_fixed_string_padding,
        0,
        cst_src_binary_packing_ml$27,
        791,
        4,
        109,
        _bcX_);
      function _bcY_(param)
       {return test_unpack_tail_padded_fixed_string
                (46,cst_ab_c$0,1,4,cst_b_c$0)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_test_unpack_tail_padded_fixed_string_padding$0,
        0,
        cst_src_binary_packing_ml$28,
        792,
        4,
        109,
        _bcY_);
      function _bcZ_(param)
       {return test_unpack_tail_padded_fixed_string
                (46,cst_ab_c$1,1,3,cst_b$12)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_test_unpack_tail_padded_fixed_string_padding$1,
        0,
        cst_src_binary_packing_ml$29,
        793,
        4,
        106,
        _bcZ_);
      function _bc0_(param)
       {return test_unpack_tail_padded_fixed_string
                (46,cst_ab_c$2,1,2,cst_b$13)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_test_unpack_tail_padded_fixed_string_padding$2,
        0,
        cst_src_binary_packing_ml$30,
        794,
        4,
        106,
        _bc0_);
      function _bc1_(param)
       {return test_unpack_tail_padded_fixed_string
                (46,cst_ab_c$3,1,1,cst_b$14)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_test_unpack_tail_padded_fixed_string_padding$3,
        0,
        cst_src_binary_packing_ml$31,
        795,
        4,
        106,
        _bc1_);
      function _bc2_(param)
       {return test_unpack_tail_padded_fixed_string(46,cst_ab_c$4,2,3,cst_c$1)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_test_unpack_tail_padded_fixed_string_padding$4,
        0,
        cst_src_binary_packing_ml$32,
        796,
        4,
        107,
        _bc2_);
      function _bc3_(param)
       {return test_unpack_tail_padded_fixed_string(46,cst_ab_c$5,2,2,cst$231)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_test_unpack_tail_padded_fixed_string_padding$5,
        0,
        cst_src_binary_packing_ml$33,
        797,
        4,
        104,
        _bc3_);
      function _bc4_(param)
       {return test_unpack_tail_padded_fixed_string(46,cst_ab_cd,2,3,cst_c$2)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_test_unpack_tail_padded_fixed_string_padding$6,
        0,
        cst_src_binary_packing_ml$34,
        798,
        4,
        108,
        _bc4_);
      function _bc5_(param)
       {return test_unpack_tail_padded_fixed_string
                (46,cst_ab_cd$0,2,2,cst$232)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_test_unpack_tail_padded_fixed_string_padding$7,
        0,
        cst_src_binary_packing_ml$35,
        799,
        4,
        105,
        _bc5_);
      function _bc6_(param)
       {return test_unpack_tail_padded_fixed_string(46,cst_ab_c$6,2,1,cst$233)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_test_unpack_tail_padded_fixed_string_padding$8,
        0,
        cst_src_binary_packing_ml$36,
        800,
        4,
        105,
        _bc6_);
      function _bc7_(param)
       {return test_unpack_tail_padded_fixed_string(46,cst_x$5,0,6,cst_x$4)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_test_unpack_tail_padded_fixed_string_padding$9,
        0,
        cst_src_binary_packing_ml$37,
        801,
        4,
        111,
        _bc7_);
      function _bc8_(param)
       {return test_unpack_tail_padded_fixed_string(46,cst_x$6,0,5,cst$234)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_test_unpack_tail_padded_fixed_string_padding$10,
        0,
        cst_src_binary_packing_ml$38,
        802,
        4,
        105,
        _bc8_);
      function test_pack_tail_padded_fixed_string(padding,pos,len,str,expect)
       {var buf=caml_call1(of_string$6,cst_12345678);
        pack_tail_padded_fixed_string
         ([0,padding],buf,pos,len,caml_call1(of_string$6,str));
        return caml_string_equal(caml_call1(to_string$7,buf),expect)}
      function _bc9_(param)
       {return test_pack_tail_padded_fixed_string
                (46,1,5,cst_abcd,cst_1abcd_78)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_test_pack_tail_padded_fixed_string_expect_1,
        0,
        cst_src_binary_packing_ml$39,
        809,
        4,
        110,
        _bc9_);
      function _bc__(param)
       {return test_pack_tail_padded_fixed_string
                (46,1,5,cst_abcde,cst_1abcde78)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_test_pack_tail_padded_fixed_string_expect_1$0,
        0,
        cst_src_binary_packing_ml$40,
        811,
        4,
        111,
        _bc__);
      function _bc$_(param)
       {return test_pack_tail_padded_fixed_string(46,1,5,cst$235,cst_1_78)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_test_pack_tail_padded_fixed_string_expect_1$1,
        0,
        cst_src_binary_packing_ml$41,
        813,
        4,
        106,
        _bc$_);
      function _bda_(param)
       {return test_pack_tail_padded_fixed_string(46,1,5,cst$236,cst_1_78$0)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_test_pack_tail_padded_fixed_string_expect_1$2,
        0,
        cst_src_binary_packing_ml$42,
        815,
        4,
        109,
        _bda_);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst_inline_tail_padded_fixed_string,
      0,
      cst_src_binary_packing_ml$43,
      769,
      0,
      3452,
      _ayJ_);
    function _ayK_(byte_order)
     {var buf=caml_call2(make$0,8,97);
      function test(name,to_string,p,u,ns)
       {return caml_call2
                (iter$2,
                 ns,
                 function(n)
                  {caml_call4(p,byte_order,buf,0,n);
                   var
                    n$0=caml_call3(u,byte_order,buf,0),
                    _bcL_=caml_notequal(n,n$0);
                   if(_bcL_)
                    {var _bcM_=caml_call1(to_string,n);
                     return caml_call1
                             (failwith,
                              caml_call5
                               (_eJ_,_ayL_,caml_call1(to_string,n$0),name,name,_bcM_))}
                   return _bcL_})}
      function _bcK_(param,buf,pos){return unpack_signed_8(buf,pos)}
      test
       (cst_signed_8,
        string_of_int,
        function(param,buf,pos,i){return pack_signed_8(buf,pos,i)},
        _bcK_,
        _ayM_);
      test(cst_signed_16,string_of_int,pack_signed_16,unpack_signed_16,_ayN_);
      test
       (cst_signed_32,
        Stdlib_int32[11],
        pack_signed_32,
        unpack_signed_32,
        [0,
         -2147483648,
         [0,
          -1985229328,
          [0,
           -255,
           [0,Stdlib_int32[3],[0,Stdlib_int32[1],[0,Stdlib_int32[2],_ayO_]]]]]]);
      return test
              (cst_signed_64,
               Stdlib_int64[11],
               pack_signed_64,
               unpack_signed_64,
               [0,
                _ayS_,
                [0,
                 _ayR_,
                 [0,
                  _ayQ_,
                  [0,
                   Stdlib_int64[3],
                   [0,Stdlib_int64[1],[0,Stdlib_int64[2],_ayP_]]]]]])}
    function test(param){_ayK_(75664794);return _ayK_(720314340)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$445);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Binary_packing=
      [0,
       compare_endian,
       hash_fold_endian,
       hash_endian,
       endian_of_sexp$0,
       endian_of_sexp,
       sexp_of_endian,
       unpack_signed_8,
       pack_signed_8,
       unpack_unsigned_8,
       pack_unsigned_8,
       unpack_signed_16,
       pack_signed_16,
       unpack_unsigned_16_big_endian,
       unpack_unsigned_16_little_endian,
       pack_unsigned_16_big_endian,
       pack_unsigned_16_little_endian,
       unpack_signed_16_big_endian,
       unpack_signed_16_little_endian,
       pack_signed_16_big_endian,
       pack_signed_16_little_endian,
       unpack_unsigned_16,
       pack_unsigned_16,
       unpack_signed_32,
       unpack_signed_32_int,
       pack_signed_32,
       pack_signed_32_int,
       unpack_unsigned_32_int_big_endian,
       unpack_unsigned_32_int_little_endian,
       pack_unsigned_32_int_big_endian,
       pack_unsigned_32_int_little_endian,
       unpack_signed_32_int_big_endian,
       unpack_signed_32_int_little_endian,
       pack_signed_32_int_big_endian,
       pack_signed_32_int_little_endian,
       unpack_unsigned_32_int,
       pack_unsigned_32_int,
       unpack_signed_64,
       unpack_signed_64_int,
       pack_signed_64,
       pack_signed_64_int,
       unpack_signed_64_int_little_endian,
       pack_signed_64_int_little_endian,
       unpack_signed_64_int_big_endian,
       pack_signed_64_int_big_endian,
       unpack_signed_64_big_endian,
       unpack_signed_64_little_endian,
       pack_signed_64_big_endian,
       pack_signed_64_little_endian,
       unpack_float,
       pack_float,
       unpack_tail_padded_fixed_string,
       pack_tail_padded_fixed_string,
       test];
    caml_register_global
     (7554,Core_kernel_Binary_packing,"Core_kernel__Binary_packing");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$446);
    caml_call1(Expect_test_collector[4][1],cst_src_memo_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$447,cst$237);
    function return$7(param)
     {if(0 === param[0]){var v=param[1];return v}var e=param[1];throw e}
    function capture(f,x)
     {try
       {var _bcJ_=[0,caml_call1(f,x)];return _bcJ_}
      catch(e)
       {e = caml_wrap_exception(e);
        if(e === Stdlib_sys[44])throw e;
        return [1,e]}}
    function unit$0(f)
     {var l=caml_call1(_LD_,f);
      return function(param)
       {var _bcI_=caml_obj_tag(l);
        return 250 === _bcI_
                ?l[1]
                :246 === _bcI_?caml_call1(CamlinternalLazy[2],l):l}}
    function lru(opt,max_cache_size,f)
     {if(opt)var sth=opt[1],hashable=sth;else var hashable=Base_Hashable[2];
      if(max_cache_size <= 0)caml_call3(_R5_,_ayU_,max_cache_size,0);
      var
       sexp_of_t=hashable[3],
       compare=hashable[2],
       hash=hashable[1],
       Cache=Make$4([0,compare,sexp_of_t,hash]),
       cache=caml_call3(Cache[20],0,0,0);
      return function(arg)
       {var match=caml_call2(Cache[27],cache,arg);
        if(match)
         var result=match[1],result$0=result;
        else
         {var result$1=capture(f,arg);
          caml_call3(Cache[26],cache,arg,result$1);
          if(max_cache_size < caml_call1(Cache[3],cache))
           caml_call1(Cache[33],cache);
          var result$0=result$1}
        return return$7(result$0)}}
    function general(hashable$0,cache_size_bound,f)
     {if(cache_size_bound)
       {var n=cache_size_bound[1];return lru(hashable$0,n,f)}
      if(hashable$0)
       var sth=hashable$0[1],hashable=sth;
      else
       var hashable=Base_Hashable[2];
      var
       sexp_of_t=hashable[3],
       compare=hashable[2],
       hash=hashable[1],
       A=Make_plain_and_derive_hash_fold_t([0,compare,sexp_of_t,hash]),
       cache=caml_call3(A[5][4],0,_ayT_,0);
      return function(arg)
       {return return$7
                (caml_call3
                  (find_or_add,
                   cache,
                   arg,
                   function(param){return capture(f,arg)}))}}
    function _ayV_(param)
     {var count=[0,0],f=lru(0,3,function(i){count[1]++;return i});
      function _bcu_(param){return 0 === caml_call1(f,0)?1:0}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_f_0_0,
        0,
        cst_src_memo_ml$0,
        73,
        4,
        24,
        _bcu_);
      function _bcv_(param){return 1 === count[1]?1:0}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_count_1,
        0,
        cst_src_memo_ml$1,
        74,
        4,
        27,
        _bcv_);
      function _bcw_(param){return 1 === caml_call1(f,1)?1:0}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_f_1_1,
        0,
        cst_src_memo_ml$2,
        76,
        4,
        24,
        _bcw_);
      function _bcx_(param){return 2 === count[1]?1:0}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_count_2,
        0,
        cst_src_memo_ml$3,
        77,
        4,
        27,
        _bcx_);
      function _bcy_(param){return 0 === caml_call1(f,0)?1:0}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_f_0_0$0,
        0,
        cst_src_memo_ml$4,
        79,
        4,
        24,
        _bcy_);
      function _bcz_(param){return 2 === count[1]?1:0}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_count_2$0,
        0,
        cst_src_memo_ml$5,
        80,
        4,
        27,
        _bcz_);
      function _bcA_(param){return 3 === caml_call1(f,3)?1:0}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_f_3_3,
        0,
        cst_src_memo_ml$6,
        82,
        4,
        24,
        _bcA_);
      function _bcB_(param){return 3 === count[1]?1:0}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_count_3,
        0,
        cst_src_memo_ml$7,
        83,
        4,
        27,
        _bcB_);
      function _bcC_(param){return 4 === caml_call1(f,4)?1:0}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_f_4_4,
        0,
        cst_src_memo_ml$8,
        85,
        4,
        24,
        _bcC_);
      function _bcD_(param){return 4 === count[1]?1:0}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_count_4,
        0,
        cst_src_memo_ml$9,
        86,
        4,
        27,
        _bcD_);
      function _bcE_(param){return 0 === caml_call1(f,0)?1:0}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_f_0_0$1,
        0,
        cst_src_memo_ml$10,
        88,
        4,
        24,
        _bcE_);
      function _bcF_(param){return 4 === count[1]?1:0}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_count_4$0,
        0,
        cst_src_memo_ml$11,
        89,
        4,
        27,
        _bcF_);
      function _bcG_(param){return 1 === caml_call1(f,1)?1:0}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_f_1_1$0,
        0,
        cst_src_memo_ml$12,
        91,
        4,
        24,
        _bcG_);
      function _bcH_(param){return 5 === count[1]?1:0}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_count_5,
        0,
        cst_src_memo_ml$13,
        92,
        4,
        27,
        _bcH_);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst_lru,
      0,
      cst_src_memo_ml$14,
      68,
      0,
      672,
      _ayV_);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$448);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Memo=[0,general,unit$0];
    caml_register_global(7555,Core_kernel_Memo,"Core_kernel__Memo");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$449);
    caml_call1(Expect_test_collector[4][1],cst_src_blang_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$450,cst$238);
    var
     _ayW_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$79),
     _ayX_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_blang_ml_45_14),
     _ayY_=[0,[0,cst_Base,[0,caml_call2(Bin_prot_Shape[15],_ayX_,_ayW_),0]],0],
     _ayZ_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$80),
     _ay0_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_blang_ml_44_26),
     _ay1_=[0,caml_call2(Bin_prot_Shape[15],_ay0_,_ayZ_),0],
     _ay2_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$195),
     _ay3_=[0,caml_call1(caml_call1(Bin_prot_Shape[13],_ay2_),_ay1_),0],
     _ay4_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$81),
     _ay5_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_blang_ml_44_19),
     _ay6_=[0,caml_call2(Bin_prot_Shape[15],_ay5_,_ay4_),0],
     _ay7_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$196),
     _ay8_=[0,caml_call1(caml_call1(Bin_prot_Shape[13],_ay7_),_ay6_),_ay3_],
     _ay9_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$82),
     _ay__=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_blang_ml_44_12),
     _ay$_=[0,caml_call2(Bin_prot_Shape[15],_ay__,_ay9_),0],
     _aza_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$197),
     _azb_=
      [0,
       [0,
        cst_If,
        [0,caml_call1(caml_call1(Bin_prot_Shape[13],_aza_),_ay$_),_ay8_]],
       _ayY_],
     _azc_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$83),
     _azd_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_blang_ml_43_13),
     _aze_=[0,caml_call2(Bin_prot_Shape[15],_azd_,_azc_),0],
     _azf_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$198),
     _azg_=
      [0,
       [0,
        cst_Not,
        [0,caml_call1(caml_call1(Bin_prot_Shape[13],_azf_),_aze_),0]],
       _azb_],
     _azh_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$84),
     _azi_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_blang_ml_42_19),
     _azj_=[0,caml_call2(Bin_prot_Shape[15],_azi_,_azh_),0],
     _azk_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$199),
     _azl_=[0,caml_call1(caml_call1(Bin_prot_Shape[13],_azk_),_azj_),0],
     _azm_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$85),
     _azn_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_blang_ml_42_12),
     _azo_=[0,caml_call2(Bin_prot_Shape[15],_azn_,_azm_),0],
     _azp_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$200),
     _azq_=
      [0,
       [0,
        cst_Or,
        [0,caml_call1(caml_call1(Bin_prot_Shape[13],_azp_),_azo_),_azl_]],
       _azg_],
     _azr_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$86),
     _azs_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_blang_ml_41_20),
     _azt_=[0,caml_call2(Bin_prot_Shape[15],_azs_,_azr_),0],
     _azu_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$201),
     _azv_=[0,caml_call1(caml_call1(Bin_prot_Shape[13],_azu_),_azt_),0],
     _azw_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$87),
     _azx_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_blang_ml_41_13),
     _azy_=[0,caml_call2(Bin_prot_Shape[15],_azx_,_azw_),0],
     _azz_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$202),
     _azC_=
      [0,
       _azB_,
       [0,
        _azA_,
        [0,
         [0,
          cst_And,
          [0,caml_call1(caml_call1(Bin_prot_Shape[13],_azz_),_azy_),_azv_]],
         _azq_]]],
     _azD_=caml_call1(Bin_prot_Shape[9],_azC_),
     _azE_=[0,caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$88),0],
     _azF_=
      [0,
       [0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$203),_azE_,_azD_],
       0],
     _azG_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_blang_ml_38_2),
     group$116=caml_call2(Bin_prot_Shape[6],_azG_,_azF_);
    function bin_shape_t$96(a)
     {var _bct_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$204);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$116,_bct_),[0,a,0])}
    function bin_size_t$70(size_of_a,param)
     {if(typeof param === "number")
       return 1;
      else
       switch(param[0])
        {case 0:
          var
           v2=param[2],
           v1=param[1],
           size=1 + bin_size_t$70(size_of_a,v1) | 0;
          return size + bin_size_t$70(size_of_a,v2) | 0;
         case 1:
          var
           v2$0=param[2],
           v1$0=param[1],
           size$0=1 + bin_size_t$70(size_of_a,v1$0) | 0;
          return size$0 + bin_size_t$70(size_of_a,v2$0) | 0;
         case 2:
          var v1$1=param[1];return 1 + bin_size_t$70(size_of_a,v1$1) | 0;
         case 3:
          var
           v3=param[3],
           v2$1=param[2],
           v1$2=param[1],
           size$1=1 + bin_size_t$70(size_of_a,v1$2) | 0,
           size$2=size$1 + bin_size_t$70(size_of_a,v2$1) | 0;
          return size$2 + bin_size_t$70(size_of_a,v3) | 0;
         default:var v1$3=param[1];return 1 + caml_call1(size_of_a,v1$3) | 0}}
    function bin_write_t$71(write_a,buf,pos,param)
     {var pos$0=pos,param$0=param;
      for(;;)
       if(typeof param$0 === "number")
        return 0 === param$0
                ?caml_call3(Bin_prot_Write[30],buf,pos$0,0)
                :caml_call3(Bin_prot_Write[30],buf,pos$0,1);
       else
        switch(param$0[0])
         {case 0:
           var
            v2=param$0[2],
            v1=param$0[1],
            pos$1=caml_call3(Bin_prot_Write[30],buf,pos$0,2),
            pos$6=bin_write_t$71(write_a,buf,pos$1,v1),
            pos$0=pos$6,
            param$0=v2;
           continue;
          case 1:
           var
            v2$0=param$0[2],
            v1$0=param$0[1],
            pos$2=caml_call3(Bin_prot_Write[30],buf,pos$0,3),
            pos$7=bin_write_t$71(write_a,buf,pos$2,v1$0),
            pos$0=pos$7,
            param$0=v2$0;
           continue;
          case 2:
           var
            v1$1=param$0[1],
            pos$3=caml_call3(Bin_prot_Write[30],buf,pos$0,4),
            pos$0=pos$3,
            param$0=v1$1;
           continue;
          case 3:
           var
            v3=param$0[3],
            v2$1=param$0[2],
            v1$2=param$0[1],
            pos$4=caml_call3(Bin_prot_Write[30],buf,pos$0,5),
            pos$8=bin_write_t$71(write_a,buf,pos$4,v1$2),
            pos$9=bin_write_t$71(write_a,buf,pos$8,v2$1),
            pos$0=pos$9,
            param$0=v3;
           continue;
          default:
           var
            v1$3=param$0[1],
            pos$5=caml_call3(Bin_prot_Write[30],buf,pos$0,6);
           return caml_call3(write_a,buf,pos$5,v1$3)}}
    function bin_writer_t$87(bin_writer_a)
     {function _bcp_(v)
       {var _bcq_=bin_writer_a[2];
        return function(_bcr_,_bcs_)
         {return bin_write_t$71(_bcq_,v,_bcr_,_bcs_)}}
      return [0,function(v){return bin_size_t$70(bin_writer_a[1],v)},_bcp_]}
    function bin_read_t$139(of_a,buf,pos_ref,vint)
     {return caml_call2(Bin_prot_Common[19],cst_src_blang_ml_T_t,pos_ref[1])}
    function bin_read_t$140(of_a,buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[29],buf,pos_ref);
      if(6 < match >>> 0)
       return caml_call2(Bin_prot_Common[18],_azH_,pos_ref[1]);
      switch(match)
       {case 0:return 0;
        case 1:return 1;
        case 2:
         var
          arg_1$0=bin_read_t$140(of_a,buf,pos_ref),
          arg_2=bin_read_t$140(of_a,buf,pos_ref);
         return [0,arg_1$0,arg_2];
        case 3:
         var
          arg_1$1=bin_read_t$140(of_a,buf,pos_ref),
          arg_2$0=bin_read_t$140(of_a,buf,pos_ref);
         return [1,arg_1$1,arg_2$0];
        case 4:
         var arg_1$2=bin_read_t$140(of_a,buf,pos_ref);return [2,arg_1$2];
        case 5:
         var
          arg_1$3=bin_read_t$140(of_a,buf,pos_ref),
          arg_2$1=bin_read_t$140(of_a,buf,pos_ref),
          arg_3=bin_read_t$140(of_a,buf,pos_ref);
         return [3,arg_1$3,arg_2$1,arg_3];
        default:var arg_1=caml_call2(of_a,buf,pos_ref);return [4,arg_1]}}
    function bin_reader_t$87(bin_reader_a)
     {function _bco_(buf,pos_ref,vtag)
       {return bin_read_t$139(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$140(bin_reader_a[1],buf,pos_ref)},
              _bco_]}
    function bin_t$87(bin_a)
     {var _bcm_=bin_reader_t$87(bin_a[3]),_bcn_=bin_writer_t$87(bin_a[2]);
      return [0,bin_shape_t$96(bin_a[1]),_bcn_,_bcm_]}
    function compare$78(cmp_a,a_001,b_002)
     {var a_001$0=a_001,b_002$0=b_002;
      for(;;)
       {if(caml_call2(Ppx_compare_lib[1],a_001$0,b_002$0))return 0;
        if(typeof a_001$0 === "number")
         {if(0 === a_001$0)
           {if(typeof b_002$0 === "number")if(0 === b_002$0)return 0;
            return -1}
          if(typeof b_002$0 !== "number")return -1;
          if(0 !== b_002$0)return 0;
          var switch$0=0}
        else
         switch(a_001$0[0])
          {case 0:
            var _bcd_=a_001$0[2],_bce_=a_001$0[1];
            if(typeof b_002$0 === "number")
             var switch$0=0 === b_002$0?0:1;
            else
             {if(0 === b_002$0[0])
               {var
                 b_006=b_002$0[2],
                 b_004=b_002$0[1],
                 n=compare$78(cmp_a,_bce_,b_004);
                if(0 === n){var a_001$0=_bcd_,b_002$0=b_006;continue}
                return n}
              return -1}
            break;
           case 1:
            var _bcf_=a_001$0[2],_bcg_=a_001$0[1];
            if(typeof b_002$0 === "number")
             var switch$0=0 === b_002$0?0:1;
            else
             switch(b_002$0[0])
              {case 0:var switch$0=2;break;
               case 1:
                var
                 b_014=b_002$0[2],
                 b_012=b_002$0[1],
                 n$0=compare$78(cmp_a,_bcg_,b_012);
                if(0 === n$0){var a_001$0=_bcf_,b_002$0=b_014;continue}
                return n$0;
               default:return -1}
            break;
           case 2:
            var _bch_=a_001$0[1];
            if(typeof b_002$0 === "number")
             var switch$0=0 === b_002$0?0:1;
            else
             switch(b_002$0[0])
              {case 0:var switch$0=2;break;
               case 1:var switch$0=3;break;
               case 2:
                var b_002$1=b_002$0[1],a_001$0=_bch_,b_002$0=b_002$1;continue;
               default:return -1}
            break;
           case 3:
            var _bci_=a_001$0[3],_bcj_=a_001$0[2],_bck_=a_001$0[1];
            if(typeof b_002$0 === "number")
             var switch$0=0 === b_002$0?0:1;
            else
             switch(b_002$0[0])
              {case 0:var switch$0=2;break;
               case 1:var switch$0=3;break;
               case 2:var switch$0=4;break;
               case 3:
                var
                 b_028=b_002$0[3],
                 b_026=b_002$0[2],
                 b_024=b_002$0[1],
                 n$1=compare$78(cmp_a,_bck_,b_024);
                if(0 === n$1)
                 {var n$2=compare$78(cmp_a,_bcj_,b_026);
                  if(0 === n$2){var a_001$0=_bci_,b_002$0=b_028;continue}
                  return n$2}
                return n$1;
               default:return -1}
            break;
           default:
            var _bcl_=a_001$0[1];
            if(typeof b_002$0 === "number")
             var switch$0=0 === b_002$0?0:1;
            else
             switch(b_002$0[0])
              {case 0:var switch$0=2;break;
               case 1:var switch$0=3;break;
               case 2:var switch$0=4;break;
               case 3:return 1;
               default:
                var b_036=b_002$0[1];return caml_call2(cmp_a,_bcl_,b_036)}}
        switch(switch$0)
         {case 0:return 1;
          case 1:return 1;
          case 2:return 1;
          case 3:return 1;
          default:return 1}}}
    function hash_fold_t$47(hash_fold_a,hsv,arg)
     {var hsv$0=hsv,arg$0=arg;
      for(;;)
       if(typeof arg$0 === "number")
        return 0 === arg$0
                ?caml_call2(Base_Hash[3],hsv$0,0)
                :caml_call2(Base_Hash[3],hsv$0,1);
       else
        switch(arg$0[0])
         {case 0:
           var
            a1=arg$0[2],
            a0=arg$0[1],
            hsv$1=caml_call2(Base_Hash[3],hsv$0,2),
            hsv$2=hash_fold_t$47(hash_fold_a,hsv$1,a0),
            hsv$0=hsv$2,
            arg$0=a1;
           continue;
          case 1:
           var
            a1$0=arg$0[2],
            a0$0=arg$0[1],
            hsv$3=caml_call2(Base_Hash[3],hsv$0,3),
            hsv$4=hash_fold_t$47(hash_fold_a,hsv$3,a0$0),
            hsv$0=hsv$4,
            arg$0=a1$0;
           continue;
          case 2:
           var
            a0$1=arg$0[1],
            hsv$5=caml_call2(Base_Hash[3],hsv$0,4),
            hsv$0=hsv$5,
            arg$0=a0$1;
           continue;
          case 3:
           var
            a2=arg$0[3],
            a1$1=arg$0[2],
            a0$2=arg$0[1],
            hsv$6=caml_call2(Base_Hash[3],hsv$0,5),
            hsv$7=hash_fold_t$47(hash_fold_a,hsv$6,a0$2),
            hsv$8=hash_fold_t$47(hash_fold_a,hsv$7,a1$1),
            hsv$0=hsv$8,
            arg$0=a2;
           continue;
          default:
           var a0$3=arg$0[1],hsv$9=caml_call2(Base_Hash[3],hsv$0,6);
           return caml_call2(hash_fold_a,hsv$9,a0$3)}}
    function subterms(param)
     {if(typeof param !== "number")
       switch(param[0])
        {case 2:var t1$0=param[1];return [0,t1$0,0];
         case 3:
          var t3=param[3],t2$0=param[2],t1$1=param[1];
          return [0,t1$1,[0,t2$0,[0,t3,0]]];
         case 4:break;
         default:var t2=param[2],t1=param[1];return [0,t1,[0,t2,0]]}
      return 0}
    function contains_no_constants(t)
     {if(typeof t === "number")throw [0,Assert_failure,_azI_];
      return caml_call2(iter$2,subterms(t),contains_no_constants)}
    function invariant$17(t)
     {return caml_call2(iter$2,subterms(t),contains_no_constants)}
    var acc=0,acc$0=1;
    function base(v){return [4,v]}
    function not(t)
     {if(typeof t === "number")
       return 0 === t?1:0;
      else
       {if(2 === t[0]){var t$0=t[1];return t$0}return [2,t]}}
    function andalso(t1,t2)
     {var switch$0=typeof t2 === "number"?0 === t2?0:1:0;
      if(! switch$0)
       {var switch$1=typeof t1 === "number"?0 === t1?0:1:0;
        if(! switch$1)
         {if(typeof t2 === "number")
           var other=t1;
          else
           {if(typeof t1 !== "number")return [0,t1,t2];var other=t2}
          return other}}
      return 1}
    function orelse(t1,t2)
     {var switch$0=typeof t2 === "number"?0 === t2?1:0:0;
      if(! switch$0)
       {var switch$1=typeof t1 === "number"?0 === t1?1:0:0;
        if(! switch$1)
         {if(typeof t2 === "number")
           var other=t1;
          else
           {if(typeof t1 !== "number")return [1,t1,t2];var other=t2}
          return other}}
      return 0}
    function if$0(a,b,c)
     {if(typeof a === "number")return 0 === a?b:c;
      if(typeof b === "number")if(0 === b)return orelse(a,c);
      return typeof c === "number"
              ?0 === c?orelse(not(a),b):andalso(a,b)
              :typeof b === "number"?andalso(not(a),c):[3,a,b,c]}
    function gather_conjuncts(t)
     {var param$3=[0,t,0],acc=0,param=param$3;
      for(;;)
       {if(param)
         {var _bcc_=param[1];
          if(typeof _bcc_ === "number")
           {if(0 === _bcc_){var param$0=param[2],param=param$0;continue}}
          else
           if(0 === _bcc_[0])
            {var
              ts=param[2],
              t2=_bcc_[2],
              t1=_bcc_[1],
              param$2=[0,t1,[0,t2,ts]],
              param=param$2;
             continue}
          var param$1=param[2],acc$0=[0,_bcc_,acc],acc=acc$0,param=param$1;
          continue}
        return caml_call1(rev,acc)}}
    function gather_disjuncts(t)
     {var param$3=[0,t,0],acc=0,param=param$3;
      for(;;)
       {if(param)
         {var _bcb_=param[1];
          if(typeof _bcb_ === "number")
           {if(1 === _bcb_){var param$1=param[2],param=param$1;continue}}
          else
           if(1 === _bcb_[0])
            {var
              ts=param[2],
              t2=_bcb_[2],
              t1=_bcb_[1],
              param$2=[0,t1,[0,t2,ts]],
              param=param$2;
             continue}
          var param$0=param[2],acc$0=[0,_bcb_,acc],acc=acc$0,param=param$0;
          continue}
        return caml_call1(rev,acc)}}
    function and(param)
     {var acc$1=acc,param$0=param;
      for(;;)
       {if(param$0)
         {var _bca_=param$0[1];
          if(typeof _bca_ === "number")if(0 !== _bca_)return acc$0;
          var ts=param$0[2],acc$2=andalso(acc$1,_bca_),acc$1=acc$2,param$0=ts;
          continue}
        return acc$1}}
    function or(param)
     {var acc$1=acc$0,param$0=param;
      for(;;)
       {if(param$0)
         {var _bb$_=param$0[1];
          if(typeof _bb$_ === "number")if(0 === _bb$_)return acc;
          var ts=param$0[2],acc$2=orelse(acc$1,_bb$_),acc$1=acc$2,param$0=ts;
          continue}
        return acc$1}}
    function sexp_of_t$121(sexp_of_value,t)
     {function aux(t)
       {if(typeof t === "number")
         return 0 === t?_azL_:_azM_;
        else
         switch(t[0])
          {case 0:
            var ts=gather_conjuncts(t);
            return [1,[0,_azN_,caml_call2(map$11,ts,aux)]];
           case 1:
            var ts$0=gather_disjuncts(t);
            return [1,[0,_azO_,caml_call2(map$11,ts$0,aux)]];
           case 2:var t$0=t[1];return [1,[0,_azP_,[0,aux(t$0),0]]];
           case 3:
            var
             t3=t[3],
             t2=t[2],
             t1=t[1],
             _bb9_=[0,aux(t3),0],
             _bb__=[0,aux(t2),_bb9_];
            return [1,[0,_azQ_,[0,aux(t1),_bb__]]];
           default:var x=t[1];return caml_call1(sexp_of_value,x)}}
      return aux(t)}
    function t_of_sexp$101(base_of_sexp,sexp)
     {function base(sexp){return [4,caml_call1(base_of_sexp,sexp)]}
      function aux(sexp)
       {if(0 === sexp[0])
         {var kw=sexp[1],match=caml_call1(_Hc_,kw);
          return caml_string_notequal(match,cst_false)
                  ?caml_string_notequal(match,cst_true)?base(sexp):acc
                  :acc$0}
        var _bb4_=sexp[1];
        if(_bb4_)
         {var _bb5_=_bb4_[1];
          if(0 === _bb5_[0])
           {var args=_bb4_[2],kw$0=_bb5_[1],match$0=caml_call1(_Hc_,kw$0);
            if(caml_string_notequal(match$0,cst_and))
             {if(caml_string_notequal(match$0,cst_if))
               {if(caml_string_notequal(match$0,cst_not))
                 return caml_string_notequal(match$0,cst_or)
                         ?base(sexp)
                         :or(caml_call2(map$11,args,aux));
                if(args)
                 if(args[2])
                  var switch$0=0;
                 else
                  var x=args[1],_bb6_=x,switch$0=1;
                else
                 var switch$0=0;
                if(! switch$0)
                 var
                  n=caml_call1(length$4,args),
                  _bb6_=caml_call2(_Q3_,caml_call3(_eJ_,_azJ_,name$64,n),sexp);
                return not(aux(_bb6_))}
              if(args)
               {var _bb2_=args[2];
                if(_bb2_)
                 {var _bb3_=_bb2_[2];
                  if(_bb3_)
                   if(_bb3_[2])
                    var switch$1=0;
                   else
                    var
                     z=_bb3_[1],
                     y=_bb2_[1],
                     x$0=args[1],
                     match$1=[0,x$0,y,z],
                     switch$1=1;
                  else
                   var switch$1=0}
                else
                 var switch$1=0}
              else
               var switch$1=0;
              if(! switch$1)
               var
                n$0=caml_call1(length$4,args),
                match$1=
                 caml_call2(_Q3_,caml_call3(_eJ_,_azK_,name$65,n$0),sexp);
              var
               z$0=match$1[3],
               y$0=match$1[2],
               x$1=match$1[1],
               _bb7_=aux(z$0),
               _bb8_=aux(y$0);
              return if$0(aux(x$1),_bb8_,_bb7_)}
            return and(caml_call2(map$11,args,aux))}}
        return base(sexp)}
      return aux(sexp)}
    function _azR_(param)
     {function t_of_sexp(t){return t_of_sexp$101(t_of_sexp$46,t)}
      function sexp_of_t(v){return sexp_of_t$121(sexp_of_t$58,v)}
      var
       _bbX_=bin_shape_t$96(bin_shape_string),
       _bbY_=
        [0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$205),0,_bbX_],0],
       _bbZ_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_blang_ml_231_9),
       group=caml_call2(Bin_prot_Shape[6],_bbZ_,_bbY_),
       _bb0_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$206),
       bin_shape_t=caml_call1(caml_call2(Bin_prot_Shape[14],group,_bb0_),0);
      function bin_size_t(v){return bin_size_t$70(bin_size_t$44,v)}
      function bin_write_t(buf,pos,v)
       {return bin_write_t$71(bin_write_t$44,buf,pos,v)}
      var bin_writer_t=[0,bin_size_t,bin_write_t];
      function bin_read_t(buf,pos_ref,vint)
       {return bin_read_t$139(bin_read_t$89,buf,pos_ref,vint)}
      function bin_read_t$0(buf,pos_ref)
       {return bin_read_t$140(bin_read_t$89,buf,pos_ref)}
      var
       bin_reader_t=[0,bin_read_t$0,bin_read_t],
       bin_t=[0,bin_shape_t,bin_writer_t,bin_reader_t],
       equal=caml_equal,
       _bb1_=not(and([0,[4,cst_baza],[0,[4,cst_bazb],0]])),
       test_blang=
        if$0
         ([4,cst_foo$12],not(or([0,[4,cst_bara],[0,[4,cst_barb],0]])),_bb1_),
       tests=
        [0,
         [0,test_blang,test_sexp,test_bin],
         [0,[0,acc,cst_true$0,cst$240],[0,[0,acc$0,cst_false$0,cst$239],0]]];
      Make$8
       ([0,
         t_of_sexp,
         sexp_of_t,
         bin_t,
         bin_read_t$0,
         bin_read_t,
         bin_reader_t,
         bin_size_t,
         bin_write_t,
         bin_writer_t,
         bin_shape_t,
         equal,
         tests]);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst_Blang_V1,
      0,
      cst_src_blang_ml$0,
      229,
      2,
      747,
      _azR_);
    function _azS_(param)
     {var c=[4,3],b=[4,2],a=[4,1];
      function _bbe_(a,b)
       {invariant$17(a);invariant$17(b);return caml_equal(a,b)}
      function _bbf_(param){return _bbe_(not(acc),acc$0)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_not_true_false,
        0,
        cst_src_blang_ml$1,
        265,
        4,
        36,
        _bbf_);
      function _bbg_(param){return _bbe_(not(acc$0),acc)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_not_false_true,
        0,
        cst_src_blang_ml$2,
        266,
        4,
        36,
        _bbg_);
      function _bbh_(param){return _bbe_(not(not(a)),a)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_not_not_a_a,
        0,
        cst_src_blang_ml$3,
        267,
        4,
        34,
        _bbh_);
      function _bbi_(param){return _bbe_(andalso(acc,b),b)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_andalso_true_b_b,
        0,
        cst_src_blang_ml$4,
        269,
        4,
        36,
        _bbi_);
      function _bbj_(param){return _bbe_(andalso(a,acc),a)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_andalso_a_true_a,
        0,
        cst_src_blang_ml$5,
        270,
        4,
        36,
        _bbj_);
      function _bbk_(param){return _bbe_(andalso(acc$0,b),acc$0)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_andalso_false_b_false,
        0,
        cst_src_blang_ml$6,
        271,
        4,
        42,
        _bbk_);
      function _bbl_(param){return _bbe_(andalso(a,acc$0),acc$0)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_andalso_a_false_false,
        0,
        cst_src_blang_ml$7,
        272,
        4,
        42,
        _bbl_);
      function _bbm_(param){return _bbe_(orelse(acc$0,b),b)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_orelse_false_b_b,
        0,
        cst_src_blang_ml$8,
        274,
        4,
        36,
        _bbm_);
      function _bbn_(param){return _bbe_(orelse(a,acc$0),a)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_orelse_a_false_a,
        0,
        cst_src_blang_ml$9,
        275,
        4,
        36,
        _bbn_);
      function _bbo_(param){return _bbe_(orelse(acc,b),acc)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_orelse_true_b_true,
        0,
        cst_src_blang_ml$10,
        276,
        4,
        40,
        _bbo_);
      function _bbp_(param){return _bbe_(orelse(a,acc),acc)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_orelse_a_true_true,
        0,
        cst_src_blang_ml$11,
        277,
        4,
        40,
        _bbp_);
      function _bbq_(param){return _bbe_(if$0(acc,b,c),b)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_if_true_b_c_b,
        0,
        cst_src_blang_ml$12,
        279,
        4,
        34,
        _bbq_);
      function _bbr_(param){return _bbe_(if$0(acc$0,b,c),c)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_if_false_b_c_c,
        0,
        cst_src_blang_ml$13,
        280,
        4,
        35,
        _bbr_);
      function _bbs_(param)
       {var _bbW_=orelse(a,c);return _bbe_(if$0(a,acc,c),_bbW_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_if_a_true_c_orelse_a_c,
        0,
        cst_src_blang_ml$14,
        281,
        4,
        43,
        _bbs_);
      function _bbt_(param)
       {var _bbV_=andalso(a,b);return _bbe_(if$0(a,b,acc$0),_bbV_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_if_a_b_false_andalso_a_b,
        0,
        cst_src_blang_ml$15,
        282,
        4,
        45,
        _bbt_);
      function _bbu_(param)
       {var _bbU_=if$0(not(a),acc,b);return _bbe_(if$0(a,b,acc),_bbU_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_if_a_b_true_if_not_a_true_b,
        0,
        cst_src_blang_ml$16,
        283,
        4,
        53,
        _bbu_);
      function _bbv_(param)
       {var _bbT_=orelse(not(a),b);return _bbe_(if$0(a,b,acc),_bbT_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_if_a_b_true_orelse_not_a_b,
        0,
        cst_src_blang_ml$17,
        284,
        4,
        50,
        _bbv_);
      function _bbw_(param)
       {var _bbS_=if$0(not(a),c,acc$0);return _bbe_(if$0(a,acc$0,c),_bbS_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_if_a_false_c_if_not_a_c_false,
        0,
        cst_src_blang_ml$18,
        285,
        4,
        55,
        _bbw_);
      function _bbx_(param)
       {var _bbR_=andalso(not(a),c);return _bbe_(if$0(a,acc$0,c),_bbR_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_if_a_false_c_andalso_not_a_c,
        0,
        cst_src_blang_ml$19,
        286,
        4,
        52,
        _bbx_);
      function _bby_(param)
       {function _bbz_(param)
         {var _bbQ_=andalso(andalso(a,b),c);
          return _bbe_(and([0,a,[0,b,[0,c,0]]]),_bbQ_)}
        caml_call8
         (Ppx_inline_test_lib_Runtime[4],
          Inline_test_config,
          cst_and_a_b_c_andalso_andalso_a_b_c,
          0,
          cst_src_blang_ml$20,
          291,
          8,
          61,
          _bbz_);
        function _bbA_(param)
         {var _bbP_=orelse(orelse(a,b),c);
          return _bbe_(or([0,a,[0,b,[0,c,0]]]),_bbP_)}
        caml_call8
         (Ppx_inline_test_lib_Runtime[4],
          Inline_test_config,
          cst_or_a_b_c_orelse_orelse_a_b_c,
          0,
          cst_src_blang_ml$21,
          292,
          8,
          59,
          _bbA_);
        function test_and(ts)
         {var _bbO_=caml_call3(fold$2,ts,acc,andalso);
          return _bbe_(and(ts),_bbO_)}
        function test_or(ts)
         {var _bbN_=caml_call3(fold$2,ts,acc$0,orelse);
          return _bbe_(or(ts),_bbN_)}
        function _bbB_(param){return test_or(0)}
        caml_call8
         (Ppx_inline_test_lib_Runtime[4],
          Inline_test_config,
          cst_test_or,
          0,
          cst_src_blang_ml$22,
          297,
          8,
          31,
          _bbB_);
        function _bbC_(param){return test_or([0,a,0])}
        caml_call8
         (Ppx_inline_test_lib_Runtime[4],
          Inline_test_config,
          cst_test_or_a,
          0,
          cst_src_blang_ml$23,
          298,
          8,
          32,
          _bbC_);
        function _bbD_(param){return test_or([0,acc,0])}
        caml_call8
         (Ppx_inline_test_lib_Runtime[4],
          Inline_test_config,
          cst_test_or_true,
          0,
          cst_src_blang_ml$24,
          299,
          8,
          36,
          _bbD_);
        function _bbE_(param){return test_or([0,acc$0,0])}
        caml_call8
         (Ppx_inline_test_lib_Runtime[4],
          Inline_test_config,
          cst_test_or_false,
          0,
          cst_src_blang_ml$25,
          300,
          8,
          37,
          _bbE_);
        function _bbF_(param){return test_or([0,a,[0,acc,[0,b,0]]])}
        caml_call8
         (Ppx_inline_test_lib_Runtime[4],
          Inline_test_config,
          cst_test_or_a_true_b,
          0,
          cst_src_blang_ml$26,
          301,
          8,
          42,
          _bbF_);
        function _bbG_(param){return test_or([0,a,[0,acc$0,[0,b,0]]])}
        caml_call8
         (Ppx_inline_test_lib_Runtime[4],
          Inline_test_config,
          cst_test_or_a_false_b,
          0,
          cst_src_blang_ml$27,
          302,
          8,
          43,
          _bbG_);
        function _bbH_(param){return test_and(0)}
        caml_call8
         (Ppx_inline_test_lib_Runtime[4],
          Inline_test_config,
          cst_test_and,
          0,
          cst_src_blang_ml$28,
          304,
          8,
          32,
          _bbH_);
        function _bbI_(param){return test_and([0,a,0])}
        caml_call8
         (Ppx_inline_test_lib_Runtime[4],
          Inline_test_config,
          cst_test_and_a,
          0,
          cst_src_blang_ml$29,
          305,
          8,
          33,
          _bbI_);
        function _bbJ_(param){return test_and([0,acc,0])}
        caml_call8
         (Ppx_inline_test_lib_Runtime[4],
          Inline_test_config,
          cst_test_and_true,
          0,
          cst_src_blang_ml$30,
          306,
          8,
          37,
          _bbJ_);
        function _bbK_(param){return test_and([0,acc$0,0])}
        caml_call8
         (Ppx_inline_test_lib_Runtime[4],
          Inline_test_config,
          cst_test_and_false,
          0,
          cst_src_blang_ml$31,
          307,
          8,
          38,
          _bbK_);
        function _bbL_(param){return test_and([0,a,[0,acc,[0,b,0]]])}
        caml_call8
         (Ppx_inline_test_lib_Runtime[4],
          Inline_test_config,
          cst_test_and_a_true_b,
          0,
          cst_src_blang_ml$32,
          308,
          8,
          43,
          _bbL_);
        function _bbM_(param){return test_and([0,a,[0,acc$0,[0,b,0]]])}
        caml_call8
         (Ppx_inline_test_lib_Runtime[4],
          Inline_test_config,
          cst_test_and_a_false_b,
          0,
          cst_src_blang_ml$33,
          309,
          8,
          44,
          _bbM_);
        return 0}
      caml_call8
       (Ppx_inline_test_lib_Runtime[6],
        Inline_test_config,
        cst_n_ary_and_or,
        0,
        cst_src_blang_ml$34,
        288,
        4,
        802,
        _bby_);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst_auto_simplification,
      0,
      cst_src_blang_ml$35,
      258,
      0,
      1864,
      _azS_);
    function constant(b){return b?acc:acc$0}
    function _azT_(a,b){return orelse(not(a),b)}
    function constant_value(param)
     {return typeof param === "number"?0 === param?_azU_:_azV_:0}
    function values(t)
     {var param$7=[0,t,0],acc=0,param=param$7;
      for(;;)
       {if(param)
         {var _bbd_=param[1];
          if(typeof _bbd_ === "number")
           {if(0 === _bbd_){var param$0=param[2],param=param$0;continue}
            var param$1=param[2],param=param$1;
            continue}
          else
           switch(_bbd_[0])
            {case 0:
              var
               ts=param[2],
               t2=_bbd_[2],
               t1=_bbd_[1],
               param$2=[0,t1,[0,t2,ts]],
               param=param$2;
              continue;
             case 1:
              var
               ts$0=param[2],
               t2$0=_bbd_[2],
               t1$0=_bbd_[1],
               param$3=[0,t1$0,[0,t2$0,ts$0]],
               param=param$3;
              continue;
             case 2:
              var
               ts$1=param[2],
               t1$1=_bbd_[1],
               param$4=[0,t1$1,ts$1],
               param=param$4;
              continue;
             case 3:
              var
               ts$2=param[2],
               t3=_bbd_[3],
               t2$1=_bbd_[2],
               t1$2=_bbd_[1],
               param$5=[0,t1$2,[0,t2$1,[0,t3,ts$2]]],
               param=param$5;
              continue;
             default:
              var
               param$6=param[2],
               v=_bbd_[1],
               acc$0=[0,v,acc],
               acc=acc$0,
               param=param$6;
              continue}}
        return caml_call1(rev,acc)}}
    function _azW_(param)
     {var
       _bbb_=[0,not([4,7]),0],
       _bbc_=[0,[4,3],[0,acc,[0,if$0([4,4],[4,5],[4,6]),_bbb_]]];
      return caml_equal
              (_azX_,values(and([0,or([0,[4,1],[0,[4,2],0]]),_bbc_])))}
    caml_call8
     (Ppx_inline_test_lib_Runtime[4],
      Inline_test_config,
      cst_1_2_3_4_5_6_7_values_and,
      0,
      cst_src_blang_ml$36,
      358,
      0,
      272,
      _azW_);
    function _azY_(param)
     {return caml_equal(gather_conjuncts([4,1]),[0,[4,1],0])}
    caml_call8
     (Ppx_inline_test_lib_Runtime[4],
      Inline_test_config,
      cst_gather_conjuncts_base_1_base_1,
      0,
      cst_src_blang_ml$37,
      368,
      0,
      49,
      _azY_);
    function _azZ_(param){return 0 === gather_conjuncts(and(0))?1:0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[4],
      Inline_test_config,
      cst_gather_conjuncts_and,
      0,
      cst_src_blang_ml$38,
      369,
      0,
      44,
      _azZ_);
    function _az0_(param)
     {return caml_equal(gather_conjuncts(and([0,[4,1],0])),[0,[4,1],0])}
    caml_call8
     (Ppx_inline_test_lib_Runtime[4],
      Inline_test_config,
      cst_gather_conjuncts_and_base_1_base_1,
      0,
      cst_src_blang_ml$39,
      370,
      0,
      56,
      _az0_);
    function _az1_(param)
     {return caml_equal
              (gather_conjuncts(and([0,[4,1],[0,[4,2],0]])),
               [0,[4,1],[0,[4,2],0]])}
    caml_call8
     (Ppx_inline_test_lib_Runtime[4],
      Inline_test_config,
      cst_gather_conjuncts_and_base_1_base_2,
      0,
      cst_src_blang_ml$40,
      371,
      0,
      72,
      _az1_);
    function _az2_(param)
     {return caml_equal
              (gather_conjuncts(and([0,[4,1],[0,[4,2],[0,[4,3],0]]])),
               [0,[4,1],[0,[4,2],[0,[4,3],0]]])}
    caml_call8
     (Ppx_inline_test_lib_Runtime[4],
      Inline_test_config,
      cst_gather_conjuncts_and_base_1_base_2_base,
      0,
      cst_src_blang_ml$41,
      372,
      0,
      88,
      _az2_);
    function _az3_(param)
     {var
       _ba__=
        [0,
         [4,1],
         [0,
          [4,2],
          [0,[4,3],[0,or([0,[4,4],[0,[4,5],0]]),[0,[4,6],[0,[4,7],0]]]]]],
       _ba$_=[0,and([0,[4,6],[0,[4,7],0]]),0],
       _bba_=[0,and([0,or([0,[4,4],[0,[4,5],0]]),_ba$_]),0];
      return caml_equal
              (gather_conjuncts
                (and
                  ([0,and([0,and([0,[4,1],[0,[4,2],0]]),[0,[4,3],0]]),_bba_])),
               _ba__)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[4],
      Inline_test_config,
      cst_gather_conjuncts_and_and_and,
      0,
      cst_src_blang_ml$42,
      373,
      0,
      224,
      _az3_);
    function _az4_(param)
     {return caml_equal(gather_disjuncts([4,1]),[0,[4,1],0])}
    caml_call8
     (Ppx_inline_test_lib_Runtime[4],
      Inline_test_config,
      cst_gather_disjuncts_base_1_base_1,
      0,
      cst_src_blang_ml$43,
      382,
      0,
      49,
      _az4_);
    function _az5_(param){return 0 === gather_disjuncts(or(0))?1:0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[4],
      Inline_test_config,
      cst_gather_disjuncts_or,
      0,
      cst_src_blang_ml$44,
      383,
      0,
      43,
      _az5_);
    function _az6_(param)
     {return caml_equal(gather_disjuncts(or([0,[4,1],0])),[0,[4,1],0])}
    caml_call8
     (Ppx_inline_test_lib_Runtime[4],
      Inline_test_config,
      cst_gather_disjuncts_or_base_1_base_1,
      0,
      cst_src_blang_ml$45,
      384,
      0,
      55,
      _az6_);
    function _az7_(param)
     {return caml_equal
              (gather_disjuncts(or([0,[4,1],[0,[4,2],0]])),
               [0,[4,1],[0,[4,2],0]])}
    caml_call8
     (Ppx_inline_test_lib_Runtime[4],
      Inline_test_config,
      cst_gather_disjuncts_or_base_1_base_2,
      0,
      cst_src_blang_ml$46,
      385,
      0,
      71,
      _az7_);
    function _az8_(param)
     {return caml_equal
              (gather_disjuncts(or([0,[4,1],[0,[4,2],[0,[4,3],0]]])),
               [0,[4,1],[0,[4,2],[0,[4,3],0]]])}
    caml_call8
     (Ppx_inline_test_lib_Runtime[4],
      Inline_test_config,
      cst_gather_disjuncts_or_base_1_base_2_base,
      0,
      cst_src_blang_ml$47,
      386,
      0,
      87,
      _az8_);
    function _az9_(param)
     {var
       _ba7_=
        [0,
         [4,1],
         [0,
          [4,2],
          [0,[4,3],[0,and([0,[4,4],[0,[4,5],0]]),[0,[4,6],[0,[4,7],0]]]]]],
       _ba8_=[0,or([0,[4,6],[0,[4,7],0]]),0],
       _ba9_=[0,or([0,and([0,[4,4],[0,[4,5],0]]),_ba8_]),0];
      return caml_equal
              (gather_disjuncts
                (or([0,or([0,or([0,[4,1],[0,[4,2],0]]),[0,[4,3],0]]),_ba9_])),
               _ba7_)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[4],
      Inline_test_config,
      cst_gather_disjuncts_or_or_or_ba,
      0,
      cst_src_blang_ml$48,
      387,
      0,
      221,
      _az9_);
    function fold$20(t,init,f)
     {function loop$0(counter,acc,t,pending)
       {var t$0=t,pending$0=pending;
        for(;;)
         if(typeof t$0 === "number")
          {if(counter < 50)
            {var counter$1=counter + 1 | 0;
             return next(counter$1,acc,pending$0)}
           return caml_trampoline_return(next,[0,acc,pending$0])}
         else
          switch(t$0[0])
           {case 2:var t$2=t$0[1],t$0=t$2;continue;
            case 3:
             var
              t3=t$0[3],
              t2$0=t$0[2],
              t$3=t$0[1],
              pending$2=[0,t2$0,[0,t3,pending$0]],
              t$0=t$3,
              pending$0=pending$2;
             continue;
            case 4:
             var a=t$0[1],_ba6_=caml_call2(f,acc,a);
             if(counter < 50)
              {var counter$0=counter + 1 | 0;
               return next(counter$0,_ba6_,pending$0)}
             return caml_trampoline_return(next,[0,_ba6_,pending$0]);
            default:
             var
              t2=t$0[2],
              t$1=t$0[1],
              pending$1=[0,t2,pending$0],
              t$0=t$1,
              pending$0=pending$1;
             continue}}
      function next(counter,acc,param)
       {if(param)
         {var ts=param[2],t=param[1];
          if(counter < 50)
           {var counter$0=counter + 1 | 0;return loop$0(counter$0,acc,t,ts)}
          return caml_trampoline_return(loop$0,[0,acc,t,ts])}
        return acc}
      function loop(acc,t,pending)
       {return caml_trampoline(loop$0(0,acc,t,pending))}
      return loop(init,t,0)}
    var
     C$2=caml_call1(include$9[17],[0,fold$20,-304398144]),
     count$14=C$2[10],
     sum$10=C$2[11],
     exists$18=C$2[8],
     find$19=C$2[12],
     find_map$9=C$2[13],
     fold$21=C$2[5],
     for_all$18=C$2[9],
     is_empty$19=C$2[3],
     iter$29=C$2[4],
     length$35=C$2[2],
     mem$17=C$2[1],
     to_array$11=C$2[15],
     to_list$17=C$2[14],
     min_elt$17=C$2[16],
     max_elt$13=C$2[17],
     fold_result$9=C$2[6],
     fold_until$9=C$2[7];
    function bind$5(t,k)
     {var t$0=t;
      for(;;)
       if(typeof t$0 === "number")
        return 0 === t$0?acc:acc$0;
       else
        switch(t$0[0])
         {case 0:
           var t2=t$0[2],t1=t$0[1],other=bind$5(t1,k);
           if(typeof other === "number")if(0 !== other)return acc$0;
           return andalso(other,bind$5(t2,k));
          case 1:
           var t2$0=t$0[2],t1$0=t$0[1],other$0=bind$5(t1$0,k);
           if(typeof other$0 === "number")if(0 === other$0)return acc;
           return orelse(other$0,bind$5(t2$0,k));
          case 2:var t1$1=t$0[1];return not(bind$5(t1$1,k));
          case 3:
           var t3=t$0[3],t2$1=t$0[2],t1$2=t$0[1],other$1=bind$5(t1$2,k);
           if(typeof other$1 === "number")
            {if(0 === other$1){var t$0=t2$1;continue}var t$0=t3;continue}
           var _ba5_=bind$5(t3,k);
           return if$0(other$1,bind$5(t2$1,k),_ba5_);
          default:var v=t$0[1];return caml_call1(k,v)}}
    var
     include$137=caml_call1(Base_Monad[1],[0,bind$5,base,-349054340]),
     _aAb_=include$137[4],
     _az__=include$137[1],
     _az$_=include$137[2],
     _aAa_=include$137[3],
     _aAc_=include$137[5],
     _aAd_=include$137[6],
     _aAe_=include$137[7],
     _aAf_=include$137[8],
     _aAg_=include$137[9],
     _aAh_=include$137[10],
     _aAi_=include$137[11],
     _aAj_=include$137[12];
    function _aAk_(param)
     {function test(expected_visits,expr)
       {var visited=[0,0];
        function f(var$0){visited[1] = [0,var$0,visited[1]];return acc$0}
        var match=caml_call2(_aAb_,expr,f);
        if(typeof match === "number")
         if(0 === match)
          return caml_call3
                  (equal$4,expected_visits,caml_call1(rev,visited[1]),_xr_);
        return 0}
      function _ba2_(param){return test(_aAl_,or([0,not([4,0]),[0,[4,1],0]]))}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_test_0_or_not_base_0_base_1,
        0,
        cst_src_blang_ml$49,
        482,
        4,
        55,
        _ba2_);
      function _ba3_(param)
       {return test(_aAm_,not(and([0,not([4,0]),[0,[4,1],[0,[4,2],0]]])))}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_test_0_1_not_and_not_base_0_base,
        0,
        cst_src_blang_ml$50,
        483,
        4,
        74,
        _ba3_);
      function _ba4_(param){return test(_aAn_,if$0([4,0],[4,1],not([4,2])))}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_test_0_2_if_base_0_base_1_not_bas,
        0,
        cst_src_blang_ml$51,
        484,
        4,
        68,
        _ba4_);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst_bind_short_circuiting,
      0,
      cst_src_blang_ml$52,
      470,
      0,
      538,
      _aAk_);
    function eval$0(t,base_eval)
     {function eval$0(param)
       {var param$0=param;
        for(;;)
         if(typeof param$0 === "number")
          return 0 === param$0?1:0;
         else
          switch(param$0[0])
           {case 0:
             var t2=param$0[2],t1=param$0[1],_ba0_=eval$0(t1);
             if(_ba0_){var param$0=t2;continue}
             return _ba0_;
            case 1:
             var t2$0=param$0[2],t1$0=param$0[1],_ba1_=eval$0(t1$0);
             if(_ba1_)return _ba1_;
             var param$0=t2$0;
             continue;
            case 2:var t=param$0[1];return 1 - eval$0(t);
            case 3:
             var t3=param$0[3],t2$1=param$0[2],t1$1=param$0[1];
             if(eval$0(t1$1)){var param$0=t2$1;continue}
             var param$0=t3;
             continue;
            default:var x=param$0[1];return caml_call1(base_eval,x)}}
      return eval$0(t)}
    function specialize(t,f)
     {return caml_call2
              (_aAb_,
               t,
               function(v)
                {var match=caml_call1(f,v);
                 if(typeof match === "number")return [4,v];
                 var c=match[2];
                 return constant(c)})}
    function eval_set(all,set_of_base)
     {function aux(b)
       {if(typeof b === "number")
         {if(0 === b)return force(all);
          var _baU_=caml_call1(comparator$3,force(all));
          return caml_call1(_s7_[1],_baU_)}
        else
         switch(b[0])
          {case 0:
            var b$0=b[2],a=b[1],_baV_=aux(b$0);
            return caml_call2(inter$2,aux(a),_baV_);
           case 1:
            var b$1=b[2],a$0=b[1],_baW_=aux(b$1);
            return caml_call2(union$2,aux(a$0),_baW_);
           case 2:
            var a$1=b[1],_baX_=aux(a$1);
            return caml_call2(diff$2,force(all),_baX_);
           case 3:
            var
             b$2=b[3],
             a$2=b[2],
             cond=b[1],
             cond$0=aux(cond),
             _baY_=aux(b$2),
             _baZ_=
              caml_call2(inter$2,caml_call2(diff$2,force(all),cond$0),_baY_);
            return caml_call2
                    (union$2,caml_call2(inter$2,cond$0,aux(a$2)),_baZ_);
           default:var a$3=b[1];return caml_call1(set_of_base,a$3)}}
      return aux}
    function _aAo_(param)
     {function sexp_of_base(param)
       {switch(param)
         {case 0:return _aAp_;case 1:return _aAq_;default:return _aAr_}}
      function sexp_of_base_fun(sexp_of_a,f)
       {var
         _baS_=
          [0,
           [1,[0,_aAt_,[0,_aAs_,[0,caml_call1(sexp_of_a,caml_call1(f,2)),0]]]],
           0],
         _baT_=
          [0,
           [1,[0,_aAv_,[0,_aAu_,[0,caml_call1(sexp_of_a,caml_call1(f,1)),0]]]],
           _baS_];
        return [1,
                [0,
                 _aAy_,
                 [0,
                  [1,
                   [0,
                    _aAx_,
                    [0,_aAw_,[0,caml_call1(sexp_of_a,caml_call1(f,0)),0]]]],
                  _baT_]]]}
      var
       _baa_=
        caml_call2
         (map$1,
          caml_call1
           (of_list$1,
            caml_call1
             (_Hr_,
              cst_31bb128c352e2569228fbacc590e937a29a8bb8fc4bfe7126504ce3dc400be7f401fa6f5be5dba38)),
          _CL_),
       prng=caml_call1(Base_Random[16][2],_baa_);
      function bool(param){return caml_call1(Base_Random[16][16],prng)}
      function element(arr)
       {var
         _baQ_=caml_call1(length$1,arr),
         _baR_=caml_call2(Base_Random[16][6],prng,_baQ_);
        return caml_check_bound(arr,_baR_)[_baR_ + 1]}
      function gen_blang(gen_base)
       {function _baH_(param){return [4,caml_call1(gen_base,0)]}
        var atomic=[0,function(param){return constant(bool(0))},_baH_];
        function _baI_(rand)
         {var _baO_=caml_call1(rand,0),_baP_=caml_call1(rand,0);
          return if$0(caml_call1(rand,0),_baP_,_baO_)}
        function _baJ_(rand)
         {var _baN_=caml_call1(rand,0);
          return orelse(caml_call1(rand,0),_baN_)}
        function _baK_(rand)
         {var _baM_=caml_call1(rand,0);
          return andalso(caml_call1(rand,0),_baM_)}
        var
         composite=
          [0,function(rand){return not(caml_call1(rand,0))},_baK_,_baJ_,_baI_];
        function aux(depth)
         {if(1 < depth)
           {var _baL_=function(param){return aux(depth - 1 | 0)};
            return caml_call1(element(composite),_baL_)}
          return caml_call1(element(atomic),0)}
        return aux}
      var bases=[0,0,1,2];
      function gen_base(param){return element(bases)}
      function gen_base_fun(codomain,param)
       {var
         a_val=element(codomain),
         b_val=element(codomain),
         c_val=element(codomain);
        return function(param)
         {switch(param)
           {case 0:return a_val;case 1:return b_val;default:return c_val}}}
      function t(param){return caml_call1(gen_blang(gen_base),5)}
      var _bab_=[0,1,0],_bac_=[0,785140586,_aAA_,_aAz_];
      function tf(param)
       {var _baG_=gen_base_fun(_bab_,0);return [0,t(0),_baG_]}
      function tg(param)
       {var _baF_=gen_base_fun(_bac_,0);return [0,t(0),_baF_]}
      function law(gen,sexp_of,run)
       {var for$0=0;
        for(;;)
         {var arg=caml_call1(gen,0);
          if(1 - caml_call1(run,arg))
           caml_call1(failwith,caml_call1(_PM_,caml_call1(sexp_of,arg)));
          var _baE_=for$0 + 1 | 0;
          if(100 !== for$0){var for$0=_baE_;continue}
          return 0}}
      function _bad_(_baD_){return sexp_of_t$121(sexp_of_base,_baD_)}
      function _bae_(param)
       {var
         v1=param[2],
         v0=param[1],
         v0$0=sexp_of_t$121(sexp_of_base,v0),
         v1$0=sexp_of_base_fun(_BA_,v1);
        return [1,[0,v0$0,[0,v1$0,0]]]}
      function _baf_(param)
       {var
         v1=param[2],
         v0=param[1],
         v0$0=sexp_of_t$121(sexp_of_base,v0),
         v1$0=
          sexp_of_base_fun
           (function(param)
             {if(typeof param === "number")return _aAB_;
              var v0=param[2];
              return [1,[0,_aAC_,[0,caml_call1(_BA_,v0),0]]]},
            v1);
        return [1,[0,v0$0,[0,v1$0,0]]]}
      function forall_tg(_baC_){return law(tg,_baf_,_baC_)}
      function _bag_(param)
       {return law
                (t,
                 _bad_,
                 function(t)
                  {return caml_equal
                           (specialize(t,function(param){return 785140586}),t)})}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_forall_t_fun_t_specialize_t_fun_U,
        0,
        cst_src_blang_ml$53,
        608,
        4,
        92,
        _bag_);
      function _bah_(param)
       {return law
                (tf,
                 _bae_,
                 function(param)
                  {var f=param[2],t=param[1],_baB_=constant(eval$0(t,f));
                   return caml_equal
                           (specialize
                             (t,function(x){return [0,-132670365,caml_call1(f,x)]}),
                            _baB_)})}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_forall_tf_fun_t_f_specialize_t,
        0,
        cst_src_blang_ml$54,
        612,
        4,
        120,
        _bah_);
      function _bai_(param)
       {return forall_tg
                (function(param)
                  {var g=param[2],t=param[1];
                   function _baA_(x){return 785140586 === caml_call1(g,x)?1:0}
                   return caml_call2(for_all$1,values(specialize(t,g)),_baA_)})}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_forall_tg_fun_t_g_List_for_all,
        0,
        cst_src_blang_ml$55,
        616,
        4,
        129,
        _bai_);
      function _baj_(param)
       {return forall_tg
                (function(param)
                  {var g=param[2],t=param[1];
                   function rand_fval(x)
                    {var match=caml_call1(g,x);
                     if(typeof match === "number")return bool(0);
                     var b=match[2];
                     return b}
                   var
                    a_val=rand_fval(0),
                    b_val=rand_fval(1),
                    c_val=rand_fval(2);
                   function f(param)
                    {switch(param)
                      {case 0:return a_val;
                       case 1:return b_val;
                       default:return c_val}}
                   var _baz_=eval$0(specialize(t,g),f);
                   return eval$0(t,f) === _baz_?1:0})}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_forall_tg_fun_t_g_let_f,
        0,
        cst_src_blang_ml$56,
        620,
        4,
        485,
        _baj_);
      function _bak_(param)
       {function sexp_of_base_set(param)
         {if(typeof param === "number")
           return 0 === param?_aAD_:_aAE_;
          else
           {if(0 === param[0])
             {var v0=param[1],v0$0=caml_call1(sexp_of_t$43,v0);
              return [1,[0,_aAF_,[0,v0$0,0]]]}
            var v0$1=param[1],v0$2=caml_call1(sexp_of_t$43,v0$1);
            return [1,[0,_aAG_,[0,v0$2,0]]]}}
        var
         size=10,
         universe=
          [246,
           function(_baw_)
            {var _bax_=caml_call2(init$1,size,function(_bay_){return _bay_});
             return caml_call1(Set$1[57],_bax_)}],
         bases=[0,0,1,[0,5],[1,5]];
        function gen_base(param){return element(bases)}
        var
         set_of_base=
          general
           (0,
            0,
            function(t)
             {function _bau_(e)
               {if(typeof t === "number")
                 return 0 === t?1 === (e % 2 | 0)?1:0:0 === (e % 2 | 0)?1:0;
                else
                 {if(0 === t[0]){var x=t[1];return x < e?1:0}
                  var x$0=t[1];
                  return e < x$0?1:0}}
              var _bav_=force(universe);
              return caml_call2(Set$1[33],_bav_,_bau_)});
        function run(expression)
         {function _ban_(e)
           {return eval$0
                    (expression,
                     function(base)
                      {var _bat_=caml_call1(set_of_base,base);
                       return caml_call2(Set$1[18],_bat_,e)})}
          var expect=caml_call2(filter$11,force(universe),_ban_);
          try
           {var
             _bao_=caml_call1(eval_set(universe,set_of_base),expression),
             _bap_=0,
             _baq_=0,
             _bar_=0,
             _bas_=
              function(opt,message,equal,expect,got)
                {if(opt)var sth=opt[1],here=sth;else var here=0;
                 var sexpifier=Set$1[74],comparator=Set$1[3];
                 return caml_call8
                         (Ppx_assert_lib_Runtime[3],
                          pos$120,
                          sexpifier,
                          comparator,
                          here,
                          message,
                          equal,
                          expect,
                          got)}
               (_bar_,_baq_,_bap_,expect,_bao_);
            return _bas_}
          catch(exn)
           {exn = caml_wrap_exception(exn);
            return failwiths
                    (0,
                     _aAH_,
                     cst_fail_on_expression,
                     [0,expression,exn],
                     function(param)
                      {var
                        v1=param[2],
                        v0=param[1],
                        v0$0=sexp_of_t$121(sexp_of_base_set,v0),
                        v1$0=caml_call1(Base_Exn[1],v1);
                       return [1,[0,v0$0,[0,v1$0,0]]]})}}
        function _bal_(param)
         {var for$0=0;
          for(;;)
           {run(caml_call1(gen_blang(gen_base),5));
            var _bam_=for$0 + 1 | 0;
            if(100 !== for$0){var for$0=_bam_;continue}
            return 0}}
        caml_call8
         (Ppx_inline_test_lib_Runtime[5],
          Inline_test_config,
          cst_for_0_to_100_do_run_t_done,
          0,
          cst_src_blang_ml$57,
          679,
          8,
          94,
          _bal_);
        return 0}
      caml_call8
       (Ppx_inline_test_lib_Runtime[6],
        Inline_test_config,
        cst_eval_set,
        0,
        cst_src_blang_ml$58,
        635,
        4,
        1423,
        _bak_);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst_laws,
      0,
      cst_src_blang_ml$59,
      525,
      0,
      4783,
      _aAo_);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$451);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Blang=
      [0,
       bin_t$87,
       bin_read_t$140,
       bin_read_t$139,
       bin_reader_t$87,
       bin_size_t$70,
       bin_write_t$71,
       bin_writer_t$87,
       bin_shape_t$96,
       compare$78,
       hash_fold_t$47,
       t_of_sexp$101,
       sexp_of_t$121,
       base,
       acc,
       acc$0,
       constant,
       not,
       and,
       or,
       if$0,
       [0,base,acc,acc$0,constant,not,and,or,if$0,andalso,orelse,_azT_,not],
       constant_value,
       gather_conjuncts,
       gather_disjuncts,
       mem$17,
       length$35,
       is_empty$19,
       iter$29,
       fold$21,
       fold_result$9,
       fold_until$9,
       exists$18,
       for_all$18,
       count$14,
       sum$10,
       find$19,
       find_map$9,
       to_list$17,
       to_array$11,
       min_elt$17,
       max_elt$13,
       _az__,
       _az$_,
       _aAa_,
       _aAb_,
       _aAc_,
       _aAd_,
       _aAe_,
       _aAf_,
       _aAg_,
       _aAh_,
       _aAi_,
       _aAj_,
       values,
       eval$0,
       eval_set,
       specialize,
       invariant$17,
       [0,
        [0,
         t_of_sexp$101,
         sexp_of_t$121,
         bin_t$87,
         bin_read_t$140,
         bin_read_t$139,
         bin_reader_t$87,
         bin_size_t$70,
         bin_write_t$71,
         bin_writer_t$87,
         bin_shape_t$96,
         compare$78,
         hash_fold_t$47]]];
    caml_register_global(7556,Core_kernel_Blang,"Core_kernel__Blang");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$452);
    caml_call1(Expect_test_collector[4][1],cst_src_bounded_index_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$453,cst$241);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$454);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Bounded_index_intf=[0];
    caml_register_global
     (7557,Core_kernel_Bounded_index_intf,"Core_kernel__Bounded_index_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$455);
    caml_call1(Expect_test_collector[4][1],cst_src_bounded_index_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$456,cst$242);
    function Make$15(M)
     {var
       _a$T_=
        caml_call1
         (Bin_prot_Shape[8],
          [0,
           [0,cst_index$0,__l_],
           [0,[0,cst_min_index,__l_],[0,[0,cst_max_index,__l_],0]]]),
       _a$U_=
        [0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$207),0,_a$T_],0],
       _a$V_=
        caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_bounded_index_ml_7_6),
       group=caml_call2(Bin_prot_Shape[6],_a$V_,_a$U_),
       _a$W_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$208),
       bin_shape_t=caml_call1(caml_call2(Bin_prot_Shape[14],group,_a$W_),0);
      function bin_size_t(param)
       {var
         v3=param[3],
         v2=param[2],
         v1=param[1],
         size=caml_call1(_Zb_,v1) | 0,
         size$0=size + caml_call1(_Zb_,v2) | 0;
        return size$0 + caml_call1(_Zb_,v3) | 0}
      function bin_write_t(buf,pos,param)
       {var
         v3=param[3],
         v2=param[2],
         v1=param[1],
         pos$0=caml_call3(__n_,buf,pos,v1),
         pos$1=caml_call3(__n_,buf,pos$0,v2);
        return caml_call3(__n_,buf,pos$1,v3)}
      var bin_writer_t=[0,bin_size_t,bin_write_t];
      function bin_read_t(buf,pos_ref,vint)
       {return caml_call2
                (Bin_prot_Common[19],
                 cst_src_bounded_index_ml_Stable_V1_Make_t,
                 pos_ref[1])}
      function bin_read_t$0(buf,pos_ref)
       {var
         v_index=caml_call2(__p_,buf,pos_ref),
         v_min_index=caml_call2(__p_,buf,pos_ref),
         v_max_index=caml_call2(__p_,buf,pos_ref);
        return [0,v_index,v_min_index,v_max_index]}
      var
       bin_reader_t=[0,bin_read_t$0,bin_read_t],
       bin_t=[0,bin_shape_t,bin_writer_t,bin_reader_t];
      function compare(a_001,b_002)
       {if(caml_call2(Ppx_compare_lib[1],a_001,b_002))return 0;
        var n=caml_call2(_t_,a_001[1],b_002[1]);
        if(0 === n)
         {var n$0=caml_call2(_t_,a_001[2],b_002[2]);
          return 0 === n$0?caml_call2(_t_,a_001[3],b_002[3]):n$0}
        return n}
      function hash_fold_t(hsv,arg)
       {var
         hsv$0=caml_call2(_aaB_,hsv,arg[1]),
         hsv$1=caml_call2(_aaB_,hsv$0,arg[2]);
        return caml_call2(_aaB_,hsv$1,arg[3])}
      function hash(x)
       {var hsv=caml_call2(Base_Hash[11],0,0),_a$$_=hash_fold_t(hsv,x);
        return caml_call1(Base_Hash[9],_a$$_)}
      function create(index,min,max)
       {if(! caml_call2(_aA_,index,min))
         if(! caml_call2(_aE_,index,max))return [0,index,min,max];
        var
         _a$8_=[0,[1,[0,_aAI_,[0,caml_call1(_aa$_,max),0]]],0],
         _a$9_=[0,[1,[0,_aAJ_,[0,caml_call1(_aa$_,min),0]]],_a$8_],
         _a$__=[0,[1,[0,_aAK_,[0,caml_call1(_aa$_,index),0]]],_a$9_];
        return caml_call1
                (_kM_,
                 [1,
                  [0,
                   caml_call1(Sexplib0_Sexp_conv[7],cst_index_out_of_bounds$0),
                   _a$__]])}
      function t_of_sexp(sexp)
       {if(1 === sexp[0])
         {var _a$2_=sexp[1];
          if(_a$2_)
           {var _a$3_=_a$2_[2];
            if(_a$3_)
             {var _a$4_=_a$3_[2];
              if(_a$4_)
               {var _a$5_=_a$4_[2];
                if(_a$5_)
                 {var _a$6_=_a$5_[2];
                  if(_a$6_)
                   {var _a$7_=_a$6_[2];
                    if(_a$7_)
                     if(! _a$7_[2])
                      {var
                        v5=_a$7_[1],
                        v4=_a$6_[1],
                        v3=_a$5_[1],
                        v2=_a$4_[1],
                        v1=_a$3_[1],
                        v0=_a$2_[1],
                        v0$0=caml_call1(_aaY_,v0),
                        v1$0=caml_call1(_aba_,v1),
                        v2$0=caml_call1(_aaY_,v2),
                        v3$0=caml_call1(_aba_,v3),
                        v4$0=caml_call1(_aaY_,v4),
                        v5$0=caml_call1(_aba_,v5);
                       return [0,v0$0,v1$0,v2$0,v3$0,v4$0,v5$0]}}}}}}}
        return caml_call3(Sexplib0_Sexp_conv_error[2],tp_loc$43,6,sexp)}
      function sexp_of_t(param)
       {var
         v5=param[6],
         v4=param[5],
         v3=param[4],
         v2=param[3],
         v1=param[2],
         v0=param[1],
         v0$0=caml_call1(_aaX_,v0),
         v1$0=caml_call1(_aa$_,v1),
         v2$0=caml_call1(_aaX_,v2),
         v3$0=caml_call1(_aa$_,v3),
         v4$0=caml_call1(_aaX_,v4),
         v5$0=caml_call1(_aa$_,v5);
        return [1,[0,v0$0,[0,v1$0,[0,v2$0,[0,v3$0,[0,v4$0,[0,v5$0,0]]]]]]]}
      var For_sexpable=[0,t_of_sexp,sexp_of_t];
      function to_sexpable(t){return [0,M[1],t[1],cst_of,t[2],cst_to,t[3]]}
      function of_sexpable(param)
       {var
         max=param[6],
         to=param[5],
         min=param[4],
         of=param[3],
         index=param[2],
         label=param[1];
        if(caml_call2(equal$27,label,M[1]))
         if(caml_call2(equal$27,of,cst_of$0))
          if(caml_call2(equal$27,to,cst_to$0))return create(index,min,max);
        var
         _a$1_=
          [0,[1,[0,_aAL_,[0,caml_call1(Sexplib0_Sexp_conv[7],M[1]),0]]],0];
        return caml_call1
                (_kM_,
                 [1,
                  [0,
                   caml_call1(Sexplib0_Sexp_conv[7],cst_invalid_sexp_for_index),
                   _a$1_]])}
      var
       include=
        caml_call1
         (caml_call1(Stable[1][1],For_sexpable),[0,to_sexpable,of_sexpable]),
       t_of_sexp$0=include[1],
       sexp_of_t$0=include[2],
       include$0=caml_call1(_gG_[1][2],[0,compare,sexp_of_t$0]),
       _a$X_=include$0[1],
       _a$Y_=
        [0,
         [0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$209),0,bin_shape_t],
         0],
       _a$Z_=
        caml_call1
         (Bin_shape_lib_Bin_shape[4][1],cst_src_bounded_index_ml_48_10),
       group$0=caml_call2(Bin_prot_Shape[6],_a$Z_,_a$Y_),
       _a$0_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$210),
       bin_shape_t$0=
        caml_call1(caml_call2(Bin_prot_Shape[14],group$0,_a$0_),0),
       bin_writer_t$0=[0,bin_size_t,bin_write_t],
       bin_reader_t$0=[0,bin_read_t$0,bin_read_t],
       bin_t$0=[0,bin_shape_t$0,bin_writer_t$0,bin_reader_t$0],
       include$1=
        caml_call1
         (Stable$2[1][1],
          [0,
           bin_t$0,
           bin_read_t$0,
           bin_read_t,
           bin_reader_t$0,
           bin_size_t,
           bin_write_t,
           bin_writer_t$0,
           bin_shape_t$0,
           compare,
           t_of_sexp$0,
           sexp_of_t$0,
           _a$X_]),
       Map=include$1[1],
       Set=include$1[2];
      return [0,
              bin_shape_t,
              bin_size_t,
              bin_write_t,
              bin_writer_t,
              bin_read_t,
              bin_read_t$0,
              bin_reader_t,
              bin_t,
              compare,
              hash_fold_t,
              hash,
              create,
              For_sexpable,
              t_of_sexp$0,
              sexp_of_t$0,
              _a$X_,
              Map,
              Set]}
    function _aAM_(param)
     {var
       M=Make$15([0,label]),
       _a$I_=M[14],
       _a$J_=M[15],
       _a$K_=M[1],
       _a$L_=
        [0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$211),0,_a$K_],0],
       _a$M_=
        caml_call1
         (Bin_shape_lib_Bin_shape[4][1],cst_src_bounded_index_ml_58_6),
       group=caml_call2(Bin_prot_Shape[6],_a$M_,_a$L_),
       _a$N_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$212),
       bin_shape_t=caml_call1(caml_call2(Bin_prot_Shape[14],group,_a$N_),0),
       _a$O_=M[2],
       _a$P_=M[3],
       bin_writer_t=[0,_a$O_,_a$P_],
       _a$Q_=M[5],
       _a$R_=M[6],
       bin_reader_t=[0,_a$R_,_a$Q_],
       bin_t=[0,bin_shape_t,bin_writer_t,bin_reader_t],
       _a$S_=M[9];
      function equal(x,y){return caml_call2(_aD_,caml_call2(_a$S_,x,y),0)}
      var
       tests=
        [0,
         [0,[0,0,0,0],cst_index_0_of_0_to_0,cst$254],
         [0,
          [0,[0,0,0,1],cst_index_0_of_0_to_1,cst$253],
          [0,
           [0,[0,1,0,1],cst_index_1_of_0_to_1,cst$252],
           [0,
            [0,[0,0,0,2],cst_index_0_of_0_to_2,cst$251],
            [0,
             [0,[0,1,0,2],cst_index_1_of_0_to_2,cst$250],
             [0,
              [0,[0,2,0,2],cst_index_2_of_0_to_2,cst$249],
              [0,
               [0,[0,1,1,1],cst_index_1_of_1_to_1,cst$248],
               [0,
                [0,[0,1,1,2],cst_index_1_of_1_to_2,cst$247],
                [0,
                 [0,[0,2,1,2],cst_index_2_of_1_to_2,cst$246],
                 [0,
                  [0,[0,1,1,3],cst_index_1_of_1_to_3,cst$245],
                  [0,
                   [0,[0,2,1,3],cst_index_2_of_1_to_3,cst$244],
                   [0,
                    [0,[0,3,1,3],cst_index_3_of_1_to_3,cst$243],
                    [0,
                     [0,
                      [0,499999999,0,999999999],
                      cst_index_499999999_of_0_to_999999999,
                      cst_d$5],
                     [0,
                      [0,
                       [0,5e8,1,1e9],
                       cst_index_500000000_of_1_to_1000000000,
                       cst_e],
                      0]]]]]]]]]]]]]];
      Make$8
       ([0,
         _a$I_,
         _a$J_,
         bin_t,
         _a$R_,
         _a$Q_,
         bin_reader_t,
         _a$O_,
         _a$P_,
         bin_writer_t,
         bin_shape_t,
         equal,
         tests]);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst_V1,
      0,
      cst_src_bounded_index_ml$0,
      55,
      2,
      1363,
      _aAM_);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$457);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Bounded_index=
      [0,
       function(M)
        {var
          V1=Make$15([0,M[1]]),
          _a$z_=V1[1],
          _a$A_=
           [0,
            [0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$213),0,_a$z_],
            0],
          _a$B_=
           caml_call1
            (Bin_shape_lib_Bin_shape[4][1],cst_src_bounded_index_ml_99_2),
          group=caml_call2(Bin_prot_Shape[6],_a$B_,_a$A_),
          _a$C_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$214),
          bin_shape_t=caml_call1(caml_call2(Bin_prot_Shape[14],group,_a$C_),0),
          bin_size_t=V1[2],
          bin_write_t=V1[3],
          bin_read_t=V1[5],
          bin_read_t$0=V1[6],
          compare=V1[9],
          hash_fold_t=V1[10],
          func=V1[11],
          t_of_sexp=V1[14],
          sexp_of_t=V1[15],
          create=V1[12];
         function create_all(min,max)
          {return caml_call1
                   (to_list$0,
                    caml_call2
                     (unfold,
                      min,
                      function(index)
                       {if(! (index < min))
                         if(! (max < index))
                          return [0,
                                  [0,caml_call3(create,index,min,max),index + 1 | 0]];
                        return 0}))}
         function index(t){return t[1]}
         function max_index(t){return t[3]}
         function min_index(t){return t[2]}
         var
          include=caml_call1(_eC_,[0,t_of_sexp,sexp_of_t]),
          _a$D_=include[1],
          _a$E_=include[2],
          _a$F_=
           [0,
            [0,
             caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$215),
             0,
             bin_shape_t],
            0],
          _a$G_=
           caml_call1
            (Bin_shape_lib_Bin_shape[4][1],cst_src_bounded_index_ml_120_6),
          group$0=caml_call2(Bin_prot_Shape[6],_a$G_,_a$F_),
          _a$H_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$216),
          bin_shape_t$0=
           caml_call1(caml_call2(Bin_prot_Shape[14],group$0,_a$H_),0),
          bin_writer_t=[0,bin_size_t,bin_write_t],
          bin_reader_t=[0,bin_read_t$0,bin_read_t],
          bin_t=[0,bin_shape_t$0,bin_writer_t,bin_reader_t];
         function hash(x){return caml_call1(func,x)}
         var
          comparator=V1[16],
          module_name=M[2],
          include$0=
           _wb_
            ([0,
              bin_t,
              bin_read_t$0,
              bin_read_t,
              bin_reader_t,
              bin_size_t,
              bin_write_t,
              bin_writer_t,
              bin_shape_t$0,
              compare,
              hash_fold_t,
              hash,
              t_of_sexp,
              sexp_of_t,
              comparator,
              _a$D_,
              _a$E_,
              module_name]),
          bin_t$0=include$0[1],
          bin_read_t$1=include$0[2],
          bin_read_t$2=include$0[3],
          bin_reader_t$0=include$0[4],
          bin_size_t$0=include$0[5],
          bin_write_t$0=include$0[6],
          bin_writer_t$0=include$0[7],
          bin_shape_t$1=include$0[8],
          t_of_sexp$0=include$0[9],
          sexp_of_t$0=include$0[10],
          of_string=include$0[11],
          to_string=include$0[12],
          pp=include$0[13],
          equal=include$0[20],
          compare$0=include$0[21],
          min=include$0[22],
          max=include$0[23],
          ascending=include$0[24],
          descending=include$0[25],
          between=include$0[26],
          clamp_exn=include$0[27],
          clamp=include$0[28],
          validate_lbound=include$0[29],
          validate_ubound=include$0[30],
          validate_bound=include$0[31],
          Replace_polymorphic_compare=include$0[32],
          comparator$0=include$0[33],
          Map=include$0[34],
          Set=include$0[35],
          hash_fold_t$0=include$0[36],
          hash$0=include$0[37],
          hashable=include$0[38],
          Table=include$0[39],
          Hash_set=include$0[40],
          Hash_queue=include$0[41];
         return [0,
                 bin_t$0,
                 bin_read_t$1,
                 bin_read_t$2,
                 bin_reader_t$0,
                 bin_size_t$0,
                 bin_write_t$0,
                 bin_writer_t$0,
                 bin_shape_t$1,
                 t_of_sexp$0,
                 sexp_of_t$0,
                 of_string,
                 to_string,
                 pp,
                 include$0[14],
                 include$0[15],
                 include$0[16],
                 include$0[17],
                 include$0[18],
                 include$0[19],
                 equal,
                 compare$0,
                 min,
                 max,
                 ascending,
                 descending,
                 between,
                 clamp_exn,
                 clamp,
                 validate_lbound,
                 validate_ubound,
                 validate_bound,
                 Replace_polymorphic_compare,
                 comparator$0,
                 Map,
                 Set,
                 hash_fold_t$0,
                 hash$0,
                 hashable,
                 Table,
                 Hash_set,
                 Hash_queue,
                 create,
                 create_all,
                 index,
                 min_index,
                 max_index,
                 [0,
                  [0,
                   V1[8],
                   V1[6],
                   V1[5],
                   V1[7],
                   V1[2],
                   V1[3],
                   V1[4],
                   V1[1],
                   V1[9],
                   V1[14],
                   V1[15],
                   V1[16],
                   V1[17],
                   V1[18]]]]}];
    caml_register_global
     (7558,Core_kernel_Bounded_index,"Core_kernel__Bounded_index");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$458);
    caml_call1(Expect_test_collector[4][1],cst_src_bounded_int_table_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$459,cst$255);
    function sexp_of_t$122(of_key,of_data,param)
     {var
       v_key=param[1],
       v_data=param[2],
       v_defined_entries_index=param[3],
       arg=caml_call1(sexp_of_t$43,v_defined_entries_index),
       bnds=[0,[1,[0,_aAN_,[0,arg,0]]],0],
       arg$0=caml_call1(of_data,v_data),
       bnds$0=[0,[1,[0,_aAO_,[0,arg$0,0]]],bnds],
       arg$1=caml_call1(of_key,v_key),
       bnds$1=[0,[1,[0,_aAP_,[0,arg$1,0]]],bnds$0];
      return [1,bnds$1]}
    function length$36(r){return r[4]}
    function num_keys$0(r){return r[1]}
    function sexp_of_t_detailed(of_key,of_data,param)
     {var
       v_sexp_of_key=param[2],
       v_num_keys=param[1],
       v_length=param[4],
       v_defined_entries=param[6],
       v_entries_by_key=param[5],
       bnds=0,
       arg=
        caml_call2
         (_iJ_,
          caml_call1
           (sexp_of_t$39,
            function(_a$y_){return sexp_of_t$122(of_key,of_data,_a$y_)}),
          v_defined_entries),
       bnds$0=[0,[1,[0,_aAQ_,[0,arg,0]]],bnds],
       arg$0=
        caml_call2
         (_iJ_,
          caml_call1
           (sexp_of_t$39,
            function(_a$x_){return sexp_of_t$122(of_key,of_data,_a$x_)}),
          v_entries_by_key),
       bnds$1=[0,[1,[0,_aAR_,[0,arg$0,0]]],bnds$0],
       arg$1=caml_call1(sexp_of_t$43,v_length),
       bnds$2=[0,[1,[0,_aAS_,[0,arg$1,0]]],bnds$1];
      function _a$t_(_a$w_){return 0}
      var
       arg$2=caml_call1(Sexplib0_Sexp_conv[24],_a$t_),
       bnds$3=[0,[1,[0,_aAT_,[0,arg$2,0]]],bnds$2],
       arg$3=
        caml_call2
         (sexp_of_t$39,
          function(f)
           {function _a$u_(_a$v_){return 0}
            return caml_call1(Sexplib0_Sexp_conv[24],_a$u_)},
          v_sexp_of_key),
       bnds$4=[0,[1,[0,_aAU_,[0,arg$3,0]]],bnds$3],
       arg$4=caml_call1(sexp_of_t$43,v_num_keys),
       bnds$5=[0,[1,[0,_aAV_,[0,arg$4,0]]],bnds$4];
      return [1,bnds$5]}
    function sexp_of_key$0(t)
     {var _a$s_=t[2];
      if(_a$s_){var f=_a$s_[1];return f}
      return function(key)
       {return caml_call1(sexp_of_t$43,caml_call1(t[3],key))}}
    function invariant$18(invariant_key,invariant_data,t)
     {try
       {var num_keys=t[1];
        if(num_keys === caml_call1(length$1,t[5]))
         {if(num_keys === caml_call1(length$1,t[6]))
           {if(0 <= t[4])
             if(t[4] <= num_keys)
              {var
                _a$m_=
                 function(i,param)
                  {if(param)
                    {var entry=param[1];
                     caml_call1(invariant_key,entry[1]);
                     caml_call1(invariant_data,entry[2]);
                     if(i === caml_call1(t[3],entry[1]))
                      {var
                        _a$r_=entry[3],
                        match=caml_check_bound(t[6],_a$r_)[_a$r_ + 1];
                       if(match)
                        {var entry$0=match[1];
                         if(caml_call2(_R7_,entry,entry$0))return 0;
                         throw [0,Assert_failure,_aAY_]}
                       throw [0,Assert_failure,_aAZ_]}
                     throw [0,Assert_failure,_aA0_]}
                   return 0};
               caml_call2(iteri$0,t[5],_a$m_);
               var
                _a$n_=
                 function(i,match)
                  {if(0 === (i < t[4]?1:0))
                    {if(! match)return 0}
                   else
                    if(match)
                     {var entry=match[1];
                      if(i === entry[3])return 0;
                      throw [0,Assert_failure,_aA2_]}
                   throw [0,Assert_failure,_aA1_]};
               caml_call2(iteri$0,t[6],_a$n_);
               var
                get_entries=
                 function(array)
                  {var a=caml_call1(filter_opt$0,array);
                   caml_call4
                    (sort,
                     0,
                     0,
                     a,
                     function(entry$0,entry)
                      {var _a$q_=caml_call1(t[3],entry[1]);
                       return caml_call2
                               (compare$30,caml_call1(t[3],entry$0[1]),_a$q_)});
                   return a},
                entries=get_entries(t[5]),
                entries$0=get_entries(t[6]),
                _a$o_=caml_call1(length$1,entries);
               if(t[4] === _a$o_)
                {if(caml_call3(equal$0,entries,entries$0,_R7_))
                  {var _a$p_=0;return _a$p_}
                 throw [0,Assert_failure,_aA3_]}
               throw [0,Assert_failure,_aA4_]}
            throw [0,Assert_failure,_aA5_]}
          throw [0,Assert_failure,_aA6_]}
        throw [0,Assert_failure,_aA7_]}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        var sexp_of_key=sexp_of_key$0(t);
        return failwiths
                (0,
                 _aAX_,
                 cst_invariant_failed$0,
                 [0,exn,t],
                 function(param)
                  {var
                    v1=param[2],
                    v0=param[1],
                    v0$0=caml_call1(_Tv_,v0),
                    v1$0=
                     sexp_of_t_detailed
                      (sexp_of_key,function(param){return _aAW_},v1);
                   return [1,[0,v0$0,[0,v1$0,0]]]})}}
    var debug$0=[0,0];
    function check_invariant(t)
     {var _a$i_=debug$0[1];
      if(_a$i_)
       {var _a$j_=function(_a$l_){return 0};
        return invariant$18(function(_a$k_){return 0},_a$j_,t)}
      return _a$i_}
    function is_empty$20(t){return 0 === t[4]?1:0}
    function create$51(sexp_of_key,num_keys,key_to_int,param)
     {if(num_keys < 0)
       failwiths
        (0,_aA8_,cst_num_keys_must_be_nonnegative,num_keys,sexp_of_t$43);
      var
       _a$h_=caml_call2(create$0,num_keys,0),
       t=
        [0,
         num_keys,
         sexp_of_key,
         key_to_int,
         0,
         caml_call2(create$0,num_keys,0),
         _a$h_];
      check_invariant(t);
      return t}
    function fold$22(t,ac,f)
     {var i=0,ac$0=ac;
      for(;;)
       {if(i === t[4])return ac$0;
        var match=caml_check_bound(t[6],i)[i + 1];
        if(match)
         {var
           entry=match[1],
           ac$1=caml_call3(f,entry[1],entry[2],ac$0),
           i$0=i + 1 | 0,
           i=i$0,
           ac$0=ac$1;
          continue}
        throw [0,Assert_failure,_aA9_]}}
    function iteri$8(t,f)
     {return fold$22
              (t,0,function(key,data,param){return caml_call2(f,key,data)})}
    function iter_vals(t,f)
     {return iteri$8(t,function(param,data){return caml_call1(f,data)})}
    function iter_keys$4(t,f)
     {return iteri$8(t,function(key,param){return caml_call1(f,key)})}
    function map_entries(t,f)
     {return fold$22
              (t,
               0,
               function(key,data,ac){return [0,caml_call2(f,key,data),ac]})}
    function to_alist$4(t)
     {return map_entries(t,function(key,data){return [0,key,data]})}
    function clear$5(t)
     {var _a$e_=t[4] - 1 | 0,_a$d_=0;
      if(! (_a$e_ < 0))
       {var i=_a$d_;
        for(;;)
         {var match=caml_check_bound(t[6],i)[i + 1];
          if(! match)throw [0,Assert_failure,_aA__];
          var entry=match[1];
          caml_check_bound(t[6],i)[i + 1] = 0;
          var _a$f_=caml_call1(t[3],entry[1]);
          caml_check_bound(t[5],_a$f_)[_a$f_ + 1] = 0;
          var _a$g_=i + 1 | 0;
          if(_a$e_ !== i){var i=_a$g_;continue}
          break}}
      t[4] = 0;
      return 0}
    var
     _aA$_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_data),
     _aBa_=
      caml_call1
       (Bin_shape_lib_Bin_shape[4][1],cst_src_bounded_int_table_ml_148_25),
     _aBb_=[0,caml_call2(Bin_prot_Shape[15],_aBa_,_aA$_),0],
     _aBc_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_key),
     _aBd_=
      caml_call1
       (Bin_shape_lib_Bin_shape[4][1],cst_src_bounded_int_table_ml_148_18),
     _aBe_=[0,caml_call2(Bin_prot_Shape[15],_aBd_,_aBc_),_aBb_],
     _aBf_=
      [0,
       [0,cst_num_keys,bin_shape_int],
       [0,[0,cst_alist,bin_shape_list(caml_call1(Bin_prot_Shape[7],_aBe_))],0]],
     _aBg_=caml_call1(Bin_prot_Shape[8],_aBf_),
     _aBh_=[0,caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_data$0),0],
     _aBi_=[0,caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_key$0),_aBh_],
     _aBj_=
      [0,
       [0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$217),_aBi_,_aBg_],
       0],
     _aBk_=
      caml_call1
       (Bin_shape_lib_Bin_shape[4][1],cst_src_bounded_int_table_ml_146_2),
     group$117=caml_call2(Bin_prot_Shape[6],_aBk_,_aBj_);
    function to_serialized(t){var _a$c_=to_alist$4(t);return [0,t[1],_a$c_]}
    function sexp_of_t$123(sexp_of_key,sexp_of_data,t)
     {var
       param=to_serialized(t),
       v_alist=param[2],
       v_num_keys=param[1],
       bnds=0,
       arg=
        caml_call2
         (sexp_of_t$25,
          function(param)
           {var
             v1=param[2],
             v0=param[1],
             v0$0=caml_call1(sexp_of_key,v0),
             v1$0=caml_call1(sexp_of_data,v1);
            return [1,[0,v0$0,[0,v1$0,0]]]},
          v_alist),
       bnds$0=[0,[1,[0,_aBl_,[0,arg,0]]],bnds],
       arg$0=caml_call1(sexp_of_t$43,v_num_keys),
       bnds$1=[0,[1,[0,_aBm_,[0,arg$0,0]]],bnds$0];
      return [1,bnds$1]}
    function keys$4(t){return map_entries(t,function(key,param){return key})}
    function data$6(t)
     {return map_entries(t,function(param,data){return data})}
    function entry_opt(t,key)
     {var index=caml_call1(t[3],key);
      try
       {var _a$a_=caml_check_bound(t[5],index)[index + 1];return _a$a_}
      catch(_a$b_)
       {var
         sexp_of_key=sexp_of_key$0(t),
         _a_$_=
          function(param)
           {var
             v2=param[3],
             v1=param[2],
             v0=param[1],
             v0$0=caml_call1(sexp_of_key,v0),
             v1$0=caml_call1(sexp_of_t$43,v1),
             v0$1=v2[2],
             v2$0=[1,[0,_aBn_,[0,caml_call1(sexp_of_t$43,v0$1),0]]];
            return [1,[0,v0$0,[0,v1$0,[0,v2$0,0]]]]};
        return failwiths
                (0,
                 _aBo_,
                 cst_key_s_index_out_of_range,
                 [0,key,index,[0,-958795519,t[1] - 1 | 0]],
                 _a_$_)}}
    function find$20(t,key)
     {var match=entry_opt(t,key);
      if(match){var e=match[1];return [0,e[2]]}
      return 0}
    function find_exn$12(t,key)
     {var match=entry_opt(t,key);
      if(match){var entry=match[1];return entry[2]}
      var sexp_of_key=sexp_of_key$0(t);
      return failwiths
              (0,
               _aBq_,
               cst_Bounded_int_table_find_exn_got_unknown_key,
               [0,key,t],
               function(param)
                {var
                  v1=param[2],
                  v0=param[1],
                  v0$0=caml_call1(sexp_of_key,v0),
                  v1$0=
                   sexp_of_t$123(sexp_of_key,function(param){return _aBp_},v1);
                 return [1,[0,v0$0,[0,v1$0,0]]]})}
    function mem$18(t,key){return caml_call1(is_some,entry_opt(t,key))}
    function add_assuming_not_there(t,key,data)
     {var
       defined_entries_index=t[4],
       entry_opt=[0,[0,key,data,defined_entries_index]],
       _a___=caml_call1(t[3],key);
      caml_check_bound(t[5],_a___)[_a___ + 1] = entry_opt;
      caml_check_bound(t[6],defined_entries_index)[defined_entries_index + 1]
      =
      entry_opt;
      t[4] = t[4] + 1 | 0;
      return check_invariant(t)}
    function find_or_add$0(t,key,default$0)
     {var match=entry_opt(t,key);
      if(match){var e=match[1];return e[2]}
      var data=caml_call1(default$0,0);
      add_assuming_not_there(t,key,data);
      return data}
    function set$16(t,key,data)
     {var match=entry_opt(t,key);
      if(match){var entry=match[1];entry[1] = key;entry[2] = data;return 0}
      return add_assuming_not_there(t,key,data)}
    function add$20(t,key,data)
     {var match=entry_opt(t,key);
      if(match){var entry=match[1];return [0,-1024851605,entry[2]]}
      add_assuming_not_there(t,key,data);
      return 17724}
    function add_exn$4(t,key,data)
     {var match=add$20(t,key,data);
      if(typeof match === "number")return 0;
      var sexp_of_key=sexp_of_key$0(t);
      function _a_9_(param)
       {var
         v1=param[2],
         v0=param[1],
         v0$0=caml_call1(sexp_of_key,v0),
         v1$0=caml_call1(sexp_of_t$43,v1);
        return [1,[0,v0$0,[0,v1$0,0]]]}
      return failwiths
              (0,
               _aBr_,
               cst_Bounded_int_table_add_exn_of_key_whose_index_is_already_present,
               [0,key,caml_call1(t[3],key)],
               _a_9_)}
    function remove$13(t,key)
     {var match=entry_opt(t,key);
      if(match)
       {var entry=match[1];
        t[4] = t[4] - 1 | 0;
        var _a_8_=caml_call1(t[3],key);
        caml_check_bound(t[5],_a_8_)[_a_8_ + 1] = 0;
        var hole=entry[3],last=t[4];
        if(hole < last)
         {var entry_to_put_in_hole_opt=caml_check_bound(t[6],last)[last + 1];
          if(entry_to_put_in_hole_opt)
           {var entry_to_put_in_hole=entry_to_put_in_hole_opt[1];
            caml_check_bound(t[6],hole)[hole + 1] = entry_to_put_in_hole_opt;
            entry_to_put_in_hole[3] = hole}
          else
           {var sexp_of_key=sexp_of_key$0(t);
            failwiths
             (0,
              _aBt_,
              cst_Bounded_int_table_remove_bug,
              [0,key,last,t],
              function(param)
               {var
                 v2=param[3],
                 v1=param[2],
                 v0=param[1],
                 v0$0=caml_call1(sexp_of_key,v0),
                 v1$0=caml_call1(sexp_of_t$43,v1),
                 v2$0=
                  sexp_of_t_detailed
                   (sexp_of_key,function(param){return _aBs_},v2);
                return [1,[0,v0$0,[0,v1$0,[0,v2$0,0]]]]})}}
        caml_check_bound(t[6],last)[last + 1] = 0}
      return check_invariant(t)}
    function existsi$8(t,f)
     {return caml_call1
              (_Sa_,
               function(r)
                {iteri$8
                  (t,
                   function(key,data)
                    {var _a_7_=caml_call2(f,key,data);
                     return _a_7_?caml_call1(r,1):_a_7_});
                 return 0})}
    function exists$19(t,f)
     {return existsi$8(t,function(param,data){return caml_call1(f,data)})}
    function for_alli$8(t,f)
     {return 1
             -
             existsi$8
              (t,function(key,data){return 1 - caml_call2(f,key,data)})}
    function for_all$19(t,f)
     {return for_alli$8(t,function(param,data){return caml_call1(f,data)})}
    function equal$44(key_equal,data_equal,t1,t2)
     {var _a_5_=t1[4] === t2[4]?1:0;
      return _a_5_
              ?for_alli$8
                (t1,
                 function(key,data)
                  {var match=entry_opt(t2,key);
                   if(match)
                    {var
                      entry=match[1],
                      _a_6_=caml_call2(key_equal,key,entry[1]);
                     return _a_6_?caml_call2(data_equal,data,entry[2]):_a_6_}
                   return 0})
              :_a_5_}
    function _aBu_(param)
     {function of_list(keys)
       {var
         _a_3_=0,
         t=create$51([0,sexp_of_t$43],10,function(_a_4_){return _a_4_},_a_3_);
        caml_call2(iter$2,keys,function(key){return add_exn$4(t,key,key)});
        return t}
      function test_exists_like_function(exists)
       {function _a_P_(param){throw [0,Assert_failure,_aBv_]}
        var _a_Q_=0 === caml_call2(exists,of_list(0),_a_P_)?1:0;
        if(_a_Q_)
         {var
           _a_R_=function(param){return 0},
           _a_S_=0 === caml_call2(exists,of_list(_aBw_),_a_R_)?1:0;
          if(_a_S_)
           {var
             _a_T_=function(param){return 1},
             _a_U_=1 === caml_call2(exists,of_list(_aBx_),_a_T_)?1:0;
            if(_a_U_)
             {var
               _a_V_=function(data){return 1 === data?1:0},
               _a_W_=1 === caml_call2(exists,of_list(_aBy_),_a_V_)?1:0;
              if(_a_W_)
               {var
                 _a_X_=function(param){return 0},
                 _a_Y_=0 === caml_call2(exists,of_list(_aBz_),_a_X_)?1:0;
                if(_a_Y_)
                 {var
                   _a_Z_=function(param){return 1},
                   _a_0_=1 === caml_call2(exists,of_list(_aBA_),_a_Z_)?1:0;
                  if(_a_0_)
                   var
                    _a_1_=function(data){return 3 === data?1:0},
                    _a_2_=1 === caml_call2(exists,of_list(_aBB_),_a_1_)?1:0;
                  else
                   var _a_2_=_a_0_}
                else
                 var _a_2_=_a_Y_}
              else
               var _a_2_=_a_W_}
            else
             var _a_2_=_a_U_}
          else
           var _a_2_=_a_S_}
        else
         var _a_2_=_a_Q_;
        return _a_2_}
      function _a_z_(param)
       {return test_exists_like_function
                (function(t,f)
                  {return existsi$8
                           (t,function(param,data){return caml_call1(f,data)})})}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_test_exists_like_function_fun_t_fun_f,
        0,
        cst_src_bounded_int_table_ml$0,
        301,
        4,
        98,
        _a_z_);
      function _a_A_(param){return test_exists_like_function(exists$19)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_test_exists_like_function_exists,
        0,
        cst_src_bounded_int_table_ml$1,
        303,
        4,
        49,
        _a_A_);
      function _a_B_(param)
       {return test_exists_like_function
                (function(t,f)
                  {return 1
                          -
                          for_alli$8
                           (t,function(param,data){return 1 - caml_call1(f,data)})})}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_test_exists_like_function_fun_t_fu,
        0,
        cst_src_bounded_int_table_ml$2,
        305,
        4,
        125,
        _a_B_);
      function _a_C_(param)
       {return test_exists_like_function
                (function(t,f)
                  {return 1
                          -
                          for_all$19(t,function(data){return 1 - caml_call1(f,data)})})}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_test_exists_like_function_fun_t_fun_f$0,
        0,
        cst_src_bounded_int_table_ml$3,
        310,
        4,
        108,
        _a_C_);
      function equal_of_list(l1,l2)
       {var _a_O_=of_list(l2);return equal$44(_xr_,_xr_,of_list(l1),_a_O_)}
      function _a_D_(param){return 1 === equal_of_list(0,0)?1:0}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_equal_of_list_true,
        0,
        cst_src_bounded_int_table_ml$4,
        316,
        4,
        43,
        _a_D_);
      function _a_E_(param){return 0 === equal_of_list(0,_aBC_)?1:0}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_equal_of_list_1_false,
        0,
        cst_src_bounded_int_table_ml$5,
        317,
        4,
        45,
        _a_E_);
      function _a_F_(param){return 0 === equal_of_list(_aBD_,0)?1:0}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_equal_of_list_1_false$0,
        0,
        cst_src_bounded_int_table_ml$6,
        318,
        4,
        45,
        _a_F_);
      function _a_G_(param){return 1 === equal_of_list(_aBF_,_aBE_)?1:0}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_equal_of_list_1_1_true,
        0,
        cst_src_bounded_int_table_ml$7,
        319,
        4,
        45,
        _a_G_);
      function _a_H_(param){return 0 === equal_of_list(_aBH_,_aBG_)?1:0}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_equal_of_list_1_1_2_false,
        0,
        cst_src_bounded_int_table_ml$8,
        320,
        4,
        49,
        _a_H_);
      function _a_I_(param){return 1 === equal_of_list(_aBJ_,_aBI_)?1:0}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_equal_of_list_1_2_1_2_true,
        0,
        cst_src_bounded_int_table_ml$9,
        321,
        4,
        51,
        _a_I_);
      function _a_J_(param){return 1 === equal_of_list(_aBL_,_aBK_)?1:0}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_equal_of_list_1_2_2_1_true,
        0,
        cst_src_bounded_int_table_ml$10,
        322,
        4,
        51,
        _a_J_);
      function _a_K_(param)
       {function of_list(offset,keys)
         {var
           _a_N_=0,
           t=create$51(0,10,function(i){return i + offset | 0},_a_N_);
          caml_call2(iter$2,keys,function(key){return add_exn$4(t,key,key)});
          return t}
        var
         t0=of_list(0,_aBM_),
         t1=of_list(1,_aBN_),
         t2=of_list(2,_aBO_),
         t3=of_list(0,_aBP_);
        function equal(_a_L_,_a_M_){return equal$44(_xr_,_xr_,_a_L_,_a_M_)}
        if(equal(t0,t1))
         {if(equal(t0,t2))
           {if(equal(t1,t2))
             {if(equal(t0,t3))throw [0,Assert_failure,_aBQ_];
              if(equal(t1,t3))throw [0,Assert_failure,_aBR_];
              if(equal(t2,t3))throw [0,Assert_failure,_aBS_];
              return 0}
            throw [0,Assert_failure,_aBT_]}
          throw [0,Assert_failure,_aBU_]}
        throw [0,Assert_failure,_aBV_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_assert_equal_t0_t1_assert_equal_t0_t2_a,
        0,
        cst_src_bounded_int_table_ml$11,
        325,
        4,
        626,
        _a_K_);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst$256,
      0,
      cst_src_bounded_int_table_ml$12,
      283,
      0,
      2247,
      _aBu_);
    function With_key(Key)
     {function create(num_keys)
       {return create$51([0,Key[10]],num_keys,Key[11],0)}
      function of_alist_exn(alist)
       {var
         max_key=
          caml_call3
           (fold$2,
            alist,
            -1,
            function(max,param)
             {var key=param[1];
              return caml_call2(_xp_,max,caml_call1(Key[11],key))}),
         t=create(max_key + 1 | 0);
        caml_call2
         (iter$2,
          alist,
          function(param)
           {var data=param[2],key=param[1];return add_exn$4(t,key,data)});
        return t}
      function of_alist(alist)
       {return caml_call2(_lp_,0,function(param){return of_alist_exn(alist)})}
      function sexp_of_t(sexp_of_data)
       {var _a_x_=Key[10];
        return function(_a_y_){return sexp_of_t$123(_a_x_,sexp_of_data,_a_y_)}}
      function of_serialized(param)
       {var alist=param[2],num_keys=param[1],t=create(num_keys);
        caml_call2
         (iter$2,
          alist,
          function(param)
           {var data=param[2],key=param[1];return add_exn$4(t,key,data)});
        return t}
      function t_of_sexp(data_of_sexp,sexp)
       {var _a_t_=Key[9];
        if(0 === sexp[0])
         var _a_u_=caml_call2(Sexplib0_Sexp_conv_error[15],tp_loc$44,sexp);
        else
         {var
           field_sexps=sexp[1],
           num_keys_field=[0,0],
           alist_field=[0,0],
           duplicates=[0,0],
           extra=[0,0],
           param=field_sexps;
          for(;;)
           {if(param)
             {var _a_m_=param[1];
              if(1 === _a_m_[0])
               {var _a_n_=_a_m_[1];
                if(_a_n_)
                 {var _a_o_=_a_n_[1];
                  if(0 === _a_o_[0])
                   {var _a_p_=_a_n_[2],_a_q_=_a_o_[1];
                    if(! _a_p_)
                     {var tail$0=param[2];
                      if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_a_q_,extra[1]];
                      var param=tail$0;
                      continue}
                    if(! _a_p_[2])
                     {var tail=param[2],field_sexp=_a_p_[1];
                      if(caml_string_notequal(_a_q_,cst_alist$0))
                       if(caml_string_notequal(_a_q_,cst_num_keys$0))
                        {if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_a_q_,extra[1]]}
                       else
                        if(num_keys_field[1])
                         duplicates[1] = [0,_a_q_,duplicates[1]];
                        else
                         {var fvalue=caml_call1(t_of_sexp$32,field_sexp);
                          num_keys_field[1] = [0,fvalue]}
                      else
                       if(alist_field[1])
                        duplicates[1] = [0,_a_q_,duplicates[1]];
                       else
                        {var
                          fvalue$0=
                           caml_call2
                            (t_of_sexp$23,
                             function(sexp)
                              {if(1 === sexp[0])
                                {var _a_v_=sexp[1];
                                 if(_a_v_)
                                  {var _a_w_=_a_v_[2];
                                   if(_a_w_)
                                    if(! _a_w_[2])
                                     {var
                                       v1=_a_w_[1],
                                       v0=_a_v_[1],
                                       v0$0=caml_call1(_a_t_,v0),
                                       v1$0=caml_call1(data_of_sexp,v1);
                                      return [0,v0$0,v1$0]}}}
                               return caml_call3
                                       (Sexplib0_Sexp_conv_error[2],tp_loc$44,2,sexp)},
                             field_sexp);
                         alist_field[1] = [0,fvalue$0]}
                      var param=tail;
                      continue}}}}
              caml_call2(Sexplib0_Sexp_conv_error[9],tp_loc$44,_a_m_)}
            if(duplicates[1])
             var
              _a_u_=
               caml_call3
                (Sexplib0_Sexp_conv_error[11],tp_loc$44,duplicates[1],sexp);
            else
             if(extra[1])
              var
               _a_u_=
                caml_call3
                 (Sexplib0_Sexp_conv_error[12],tp_loc$44,extra[1],sexp);
             else
              {var _a_r_=num_keys_field[1],_a_s_=alist_field[1];
               if(_a_r_)
                if(_a_s_)
                 var
                  alist_value=_a_s_[1],
                  num_keys_value=_a_r_[1],
                  _a_u_=[0,num_keys_value,alist_value],
                  switch$0=1;
                else
                 var switch$0=0;
               else
                var switch$0=0;
               if(! switch$0)
                var
                 _a_u_=
                  caml_call3
                   (Sexplib0_Sexp_conv_error[14],
                    tp_loc$44,
                    sexp,
                    [0,
                     [0,0 === num_keys_field[1]?1:0,cst_num_keys$1],
                     [0,[0,0 === alist_field[1]?1:0,cst_alist$1],0]])}
            break}}
        return of_serialized(_a_u_)}
      var
       _a_d_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_data$1),
       _a_e_=
        caml_call1
         (Bin_shape_lib_Bin_shape[4][1],cst_src_bounded_int_table_ml_381_37),
       data=caml_call2(Bin_prot_Shape[15],_a_e_,_a_d_),
       _a9$_=[0,Key[8],[0,data,0]],
       _a_a_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$218),
       _a_b_=caml_call1(caml_call2(Bin_prot_Shape[14],group$117,_a_a_),_a9$_),
       _a_f_=[0,caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_data$2),0],
       _a_g_=
        [0,
         [0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$219),_a_f_,_a_b_],
         0],
       _a_h_=
        caml_call1
         (Bin_shape_lib_Bin_shape[4][1],cst_src_bounded_int_table_ml_381_14),
       group=caml_call2(Bin_prot_Shape[6],_a_h_,_a_g_),
       _a_c_=[0,to_serialized,of_serialized];
      function bin_shape_t(data)
       {var _a_l_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$220);
        return caml_call1
                (caml_call2(Bin_prot_Shape[14],group,_a_l_),[0,data,0])}
      function bin_size_t(size_of_data,v)
       {var
         v2=v[2],
         v1=v[1],
         _a_k_=Key[5],
         size=caml_call1(bin_size_t$36,v1) | 0;
        return size
               +
               bin_size_list
                (function(param)
                  {var v2=param[2],v1=param[1],size=caml_call1(_a_k_,v1) | 0;
                   return size + caml_call1(size_of_data,v2) | 0},
                 v2)
               |
               0}
      function bin_write_t(write_data,buf,pos$0,v)
       {var
         v2=v[2],
         v1=v[1],
         _a_j_=Key[6],
         pos=caml_call3(bin_write_t$36,buf,pos$0,v1);
        return bin_write_list
                (function(buf,pos,param)
                  {var
                    v2=param[2],
                    v1=param[1],
                    pos$0=caml_call3(_a_j_,buf,pos,v1);
                   return caml_call3(write_data,buf,pos$0,v2)},
                 buf,
                 pos,
                 v2)}
      function bin_read_t(of_data,buf,pos_ref,vint)
       {return caml_call2
                (Bin_prot_Common[19],
                 cst_src_bounded_int_table_ml_Serialized_t,
                 pos_ref[1])}
      function bin_read_t$0(of_data,buf,pos_ref)
       {var
         _a_i_=Key[2],
         v_num_keys=caml_call2(bin_read_t$74,buf,pos_ref),
         v_alist=
          bin_read_list$0
           (function(buf,pos_ref)
             {var
               v1=caml_call2(_a_i_,buf,pos_ref),
               v2=caml_call2(of_data,buf,pos_ref);
              return [0,v1,v2]},
            buf,
            pos_ref);
        return [0,v_num_keys,v_alist]}
      var
       include=
        caml_call1
         (caml_call1
           (_W4_,
            [0,bin_shape_t,bin_size_t,bin_write_t,bin_read_t$0,bin_read_t]),
          _a_c_),
       bin_shape_t$0=include[1],
       bin_size_t$0=include[2],
       bin_write_t$0=include[3],
       bin_read_t$1=include[4],
       bin_read_t$2=include[5],
       bin_writer_t=include[6],
       bin_reader_t=include[7],
       bin_t=include[8];
      return [0,
              create,
              of_alist_exn,
              of_alist,
              sexp_of_t,
              of_serialized,
              t_of_sexp,
              bin_shape_t$0,
              bin_size_t$0,
              bin_write_t$0,
              bin_read_t$1,
              bin_read_t$2,
              bin_writer_t,
              bin_reader_t,
              bin_t]}
    function _aBW_(param)
     {var
       include=
        With_key
         ([0,
           bin_t$30,
           bin_read_t$74,
           bin_read_t$73,
           bin_reader_t$30,
           bin_size_t$36,
           bin_write_t$36,
           bin_writer_t$30,
           bin_shape_t$35,
           t_of_sexp$32,
           sexp_of_t$43,
           to_int]),
       _a92_=include[2],
       _a93_=include[3],
       _a91_=include[1];
      function _a94_(param){return is_empty$20(caml_call1(_a91_,1))}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_is_empty_create_num_keys_1,
        0,
        cst_src_bounded_int_table_ml$13,
        396,
        4,
        46,
        _a94_);
      function _a95_(param){return caml_call1(_he_,caml_call1(_a93_,0))}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_Result_is_ok_of_alist,
        0,
        cst_src_bounded_int_table_ml$14,
        398,
        4,
        44,
        _a95_);
      function _a96_(param){return caml_call1(_he_,caml_call1(_a93_,_aBX_))}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_Result_is_ok_of_alist_1_1,
        0,
        cst_src_bounded_int_table_ml$15,
        399,
        4,
        51,
        _a96_);
      function _a97_(param){return caml_call1(_hf_,caml_call1(_a93_,_aBY_))}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_Result_is_error_of_alist_1_1_1_2,
        0,
        cst_src_bounded_int_table_ml$16,
        400,
        4,
        62,
        _a97_);
      function _a98_(param){return is_empty$20(caml_call1(_a92_,0))}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_is_empty_of_alist_exn,
        0,
        cst_src_bounded_int_table_ml$17,
        402,
        4,
        43,
        _a98_);
      function _a99_(param)
       {var t=caml_call1(_a92_,_aBZ_);
        if(1 === t[4])
         {if(caml_equal(keys$4(t),_aB0_))
           {if(caml_equal(data$6(t),_aB1_))return 0;
            throw [0,Assert_failure,_aB2_]}
          throw [0,Assert_failure,_aB3_]}
        throw [0,Assert_failure,_aB4_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_assert_length_t_1_assert_keys_t,
        0,
        cst_src_bounded_int_table_ml$18,
        404,
        4,
        148,
        _a99_);
      function _a9__(param)
       {var t=caml_call1(_a92_,_aB5_);
        if(2 === t[4])
         {if(! caml_equal(keys$4(t),_aB6_))
           if(! caml_equal(keys$4(t),_aB__))throw [0,Assert_failure,_aB$_];
          if(! caml_equal(data$6(t),_aB7_))
           if(! caml_equal(data$6(t),_aB8_))throw [0,Assert_failure,_aB9_];
          return 0}
        throw [0,Assert_failure,_aCa_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_assert_length_t_2_assert_keys_t,
        0,
        cst_src_bounded_int_table_ml$19,
        411,
        4,
        200,
        _a9__);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst$257,
      0,
      cst_src_bounded_int_table_ml$20,
      392,
      0,
      691,
      _aBW_);
    function filter_mapi$8(t,f)
     {var
       key_to_int=t[3],
       sexp_of_key=t[2],
       num_keys=t[1],
       result=create$51(sexp_of_key,num_keys,key_to_int,0);
      iteri$8
       (t,
        function(key,data)
         {var match=caml_call2(f,key,data);
          if(match){var data$0=match[1];return add_exn$4(result,key,data$0)}
          return 0});
      return result}
    function ignore_key(f,param,data){return caml_call1(f,data)}
    function filter_map$13(t,f)
     {return filter_mapi$8
              (t,function(_a9Z_,_a90_){return ignore_key(f,_a9Z_,_a90_)})}
    function filteri$8(t,f)
     {return filter_mapi$8
              (t,function(key,data){return caml_call2(f,key,data)?[0,data]:0})}
    function filter$15(t,f)
     {return filteri$8
              (t,function(_a9X_,_a9Y_){return ignore_key(f,_a9X_,_a9Y_)})}
    function filter_keys$4(t,f)
     {return filteri$8(t,function(key,_a9W_){return caml_call1(f,key)})}
    function mapi$8(t,f)
     {return filter_mapi$8
              (t,function(key,data){return [0,caml_call2(f,key,data)]})}
    function map$33(t,f)
     {return mapi$8(t,function(_a9U_,_a9V_){return ignore_key(f,_a9U_,_a9V_)})}
    function _aCb_(param)
     {var
       include=
        With_key
         ([0,
           bin_t$30,
           bin_read_t$74,
           bin_read_t$73,
           bin_reader_t$30,
           bin_size_t$36,
           bin_write_t$36,
           bin_writer_t$30,
           bin_shape_t$35,
           t_of_sexp$32,
           sexp_of_t$43,
           to_int]),
       _a9A_=include[2];
      function equal(_a9S_,_a9T_){return equal$44(_xr_,_xr_,_a9S_,_a9T_)}
      function test_filter_map(input,f,expect)
       {var _a9R_=caml_call1(_a9A_,expect);
        return equal(filter_map$13(caml_call1(_a9A_,input),f),_a9R_)}
      function _a9B_(param)
       {var _a9Q_=0;
        return test_filter_map
                (0,function(param){throw [0,Assert_failure,_aCc_]},_a9Q_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_test_filter_map_f_fun_assert_false,
        0,
        cst_src_bounded_int_table_ml$21,
        455,
        4,
        65,
        _a9B_);
      function _a9C_(param)
       {var _a9P_=0;
        return test_filter_map(_aCd_,function(param){return 0},_a9P_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_test_filter_map_1_2_f_fun_None,
        0,
        cst_src_bounded_int_table_ml$22,
        456,
        4,
        61,
        _a9C_);
      function _a9D_(param)
       {return test_filter_map(_aCf_,function(x){return [0,x]},_aCe_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_test_filter_map_1_2_f_fun_x_Some_x,
        0,
        cst_src_bounded_int_table_ml$23,
        457,
        4,
        67,
        _a9D_);
      function _a9E_(param)
       {return test_filter_map(_aCh_,function(x){return [0,x + 1 | 0]},_aCg_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_test_filter_map_1_2_f_fun_x_Some_x$0,
        0,
        cst_src_bounded_int_table_ml$24,
        458,
        4,
        73,
        _a9E_);
      function _a9F_(param)
       {return test_filter_map
                (_aCj_,function(x){return 2 === x?[0,x]:0},_aCi_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_test_filter_map_1_2_3_4_f_fun_x,
        0,
        cst_src_bounded_int_table_ml$25,
        459,
        4,
        107,
        _a9F_);
      function test_map_like(map)
       {function test(input,f,expect)
         {var _a9O_=caml_call1(_a9A_,expect);
          return equal(caml_call2(map,caml_call1(_a9A_,input),f),_a9O_)}
        var
         _a9I_=0,
         _a9J_=test(0,function(param){throw [0,Assert_failure,_aCk_]},_a9I_);
        if(_a9J_)
         {var _a9K_=test(_aCm_,function(_a9N_){return 3 + _a9N_ | 0},_aCl_);
          if(_a9K_)
           return test(_aCo_,function(_a9M_){return 5 + _a9M_ | 0},_aCn_);
          var _a9L_=_a9K_}
        else
         var _a9L_=_a9J_;
        return _a9L_}
      function _a9G_(param)
       {return test_map_like
                (function(t,f)
                  {return mapi$8
                           (t,function(param,data){return caml_call1(f,data)})})}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_test_map_like_fun_t_fun_f_mapi_t_f,
        0,
        cst_src_bounded_int_table_ml$26,
        472,
        4,
        83,
        _a9G_);
      function _a9H_(param){return test_map_like(map$33)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_test_map_like_map,
        0,
        cst_src_bounded_int_table_ml$27,
        473,
        4,
        34,
        _a9H_);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst$258,
      0,
      cst_src_bounded_int_table_ml$28,
      445,
      0,
      1043,
      _aCb_);
    function _aCp_(param)
     {debug$0[1] = 1;
      function _a8S_(param)
       {var _a9z_=0,t=create$51(0,1,function(param){return 0},_a9z_);
        set$16(t,13,0);
        set$16(t,14,0);
        if(caml_equal(keys$4(t),_aCq_))return 0;
        throw [0,Assert_failure,_aCr_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_set_t_key_13_data_set_t_key_14_data,
        0,
        cst_src_bounded_int_table_ml$29,
        480,
        4,
        221,
        _a8S_);
      function create(num_keys)
       {var _a9x_=0;
        return create$51(0,num_keys,function(_a9y_){return _a9y_},_a9x_)}
      function assert_empty(t)
       {if(0 === t[4])
         {if(0 === to_alist$4(t))
           {if(0 === keys$4(t))
             {if(0 === data$6(t))
               {var _a9v_=t[1] - 1 | 0,_a9u_=0;
                if(! (_a9v_ < 0))
                 {var i=_a9u_;
                  for(;;)
                   {if(! caml_call1(is_none,caml_check_bound(t[5],i)[i + 1]))
                     throw [0,Assert_failure,_aCt_];
                    if(! caml_call1(is_none,caml_check_bound(t[6],i)[i + 1]))
                     throw [0,Assert_failure,_aCs_];
                    var _a9w_=i + 1 | 0;
                    if(_a9v_ !== i){var i=_a9w_;continue}
                    break}}
                return 0}
              throw [0,Assert_failure,_aCu_]}
            throw [0,Assert_failure,_aCv_]}
          throw [0,Assert_failure,_aCw_]}
        throw [0,Assert_failure,_aCx_]}
      function _a8T_(param)
       {try {create(-1);throw [0,Assert_failure,_aCy_]}catch(_a9t_){return 0}}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_try_ignore_create_num_keys_1_assert_fa,
        0,
        cst_src_bounded_int_table_ml$30,
        501,
        4,
        113,
        _a8T_);
      function _a8U_(param){create(0);return 0}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_ignore_create_num_keys_0,
        0,
        cst_src_bounded_int_table_ml$31,
        506,
        4,
        49,
        _a8U_);
      function _a8V_(param){create(1);return 0}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_ignore_create_num_keys_1,
        0,
        cst_src_bounded_int_table_ml$32,
        507,
        4,
        49,
        _a8V_);
      function _a8W_(param){create(1e4);return 0}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_ignore_create_num_keys_10_000,
        0,
        cst_src_bounded_int_table_ml$33,
        508,
        4,
        54,
        _a8W_);
      function _a8X_(param)
       {var t=create(10),num_keys=10;
        function key_is_valid(key)
         {try {find$20(t,key);var _a9r_=1;return _a9r_}catch(_a9s_){return 0}}
        if(key_is_valid(-1))throw [0,Assert_failure,_aCz_];
        var key=0;
        for(;;)
         {if(key_is_valid(key))
           {if(caml_call1(is_none,find$20(t,key)))
             {var _a9q_=key + 1 | 0;
              if(9 !== key){var key=_a9q_;continue}
              if(key_is_valid(num_keys))throw [0,Assert_failure,_aCA_];
              return assert_empty(t)}
            throw [0,Assert_failure,_aCB_]}
          throw [0,Assert_failure,_aCC_]}}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_assert_not_key_is_valid_1_for_key_0,
        0,
        cst_src_bounded_int_table_ml$34,
        510,
        4,
        388,
        _a8X_);
      function _a8Y_(param)
       {var t=create(10);
        add_exn$4(t,0,data$7);
        var key=0;
        if(1 === t[4])
         {if(caml_equal(find$20(t,key),[0,data$7]))
           {var key$0=1;
            for(;;)
             {if(0 === find$20(t,key$0))
               {var _a9p_=key$0 + 1 | 0;
                if(9 !== key$0){var key$0=_a9p_;continue}
                if(caml_equal(to_alist$4(t),[0,[0,key,data$7],0]))
                 {if(caml_equal(keys$4(t),[0,key,0]))
                   {if(caml_equal(data$6(t),[0,data$7,0]))
                     {remove$13(t,key);return assert_empty(t)}
                    throw [0,Assert_failure,_aCD_]}
                  throw [0,Assert_failure,_aCE_]}
                throw [0,Assert_failure,_aCF_]}
              throw [0,Assert_failure,_aCG_]}}
          throw [0,Assert_failure,_aCH_]}
        throw [0,Assert_failure,_aCI_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_add_exn_t_key_data_assert_length_t_1,
        0,
        cst_src_bounded_int_table_ml$35,
        525,
        4,
        463,
        _a8Y_);
      function _a8Z_(param)
       {var t=create(10);
        add_exn$4(t,0,cst_bad);
        set$16(t,0,data$8);
        var key=0;
        if(caml_equal(find$20(t,0),[0,data$8]))
         {var key$0=1;
          for(;;)
           {if(0 === find$20(t,key$0))
             {var _a9o_=key$0 + 1 | 0;
              if(9 !== key$0){var key$0=_a9o_;continue}
              if(caml_equal(to_alist$4(t),[0,[0,key,data$8],0]))
               {if(caml_equal(keys$4(t),[0,key,0]))
                 {if(caml_equal(data$6(t),[0,data$8,0]))return 0;
                  throw [0,Assert_failure,_aCJ_]}
                throw [0,Assert_failure,_aCK_]}
              throw [0,Assert_failure,_aCL_]}
            throw [0,Assert_failure,_aCM_]}}
        throw [0,Assert_failure,_aCN_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_add_exn_t_key_data_bad_set_t_key_data,
        0,
        cst_src_bounded_int_table_ml$36,
        543,
        4,
        422,
        _a8Z_);
      function _a80_(param)
       {var t=create(10),key$0=1;
        for(;;)
         {add_exn$4(t,key$0,caml_call1(_xy_,key$0));
          var _a9n_=key$0 + 1 | 0;
          if(5 !== key$0){var key$0=_a9n_;continue}
          if(5 === t[4])
           {var key=1;
            for(;;)
             {remove$13(t,key);
              var _a9m_=key + 1 | 0;
              if(5 !== key){var key=_a9m_;continue}
              return assert_empty(t)}}
          throw [0,Assert_failure,_aCO_]}}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_for_key_1_to_5_do_add_exn_t_key_data_Int,
        0,
        cst_src_bounded_int_table_ml$37,
        559,
        4,
        279,
        _a80_);
      function _a81_(param)
       {var t=create(10),key$0=0;
        for(;;)
         {add_exn$4(t,key$0,caml_call1(_xy_,key$0));
          var _a9l_=key$0 + 1 | 0;
          if(9 !== key$0){var key$0=_a9l_;continue}
          if(t[4] === 10)
           {var key=0;
            for(;;)
             {remove$13(t,key);
              var _a9k_=key + 1 | 0;
              if(9 !== key){var key=_a9k_;continue}
              return assert_empty(t)}}
          throw [0,Assert_failure,_aCP_]}}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_for_key_0_to_num_keys_1_do_add_exn_t_key,
        0,
        cst_src_bounded_int_table_ml$38,
        572,
        4,
        308,
        _a81_);
      function _a82_(param)
       {var
         Table=
          With_key
           ([0,
             bin_t$30,
             bin_read_t$74,
             bin_read_t$73,
             bin_reader_t$30,
             bin_size_t$36,
             bin_write_t$36,
             bin_writer_t$30,
             bin_shape_t$35,
             t_of_sexp$32,
             sexp_of_t$43,
             to_int]);
        function sexp_of_alist(v)
         {return caml_call2
                  (sexp_of_t$25,
                   function(param)
                    {var
                      v1=param[2],
                      v0=param[1],
                      v0$0=caml_call1(sexp_of_t$43,v0),
                      v1$0=caml_call1(sexp_of_t$43,v1);
                     return [1,[0,v0$0,[0,v1$0,0]]]},
                   v)}
        function sexp_of_t(v){return caml_call2(Table[4],sexp_of_t$43,v)}
        var empty=caml_call1(Table[2],0);
        function equal(_a9i_,_a9j_){return equal$44(_xr_,_xr_,_a9i_,_a9j_)}
        var n=0;
        for(;;)
         {var
           alist=caml_call2(init$1,n,function(i){return [0,i,i]}),
           t=caml_call1(Table[2],alist);
          if(equal(t,t))
           {caml_call2
             (iter$2,
              alist,
              function(t)
                {return function(param)
                  {var data=param[2],key=param[1];
                   if
                    (existsi$8
                      (t,
                       function(key$0,data$0)
                        {var
                          _a9g_=key$0 === key?1:0,
                          _a9h_=_a9g_?data$0 === data?1:0:_a9g_;
                         return _a9h_}))
                    {if
                      (exists$19(t,function(data$0){return data$0 === data?1:0}))
                      return 0;
                     throw [0,Assert_failure,_aCQ_]}
                   throw [0,Assert_failure,_aCR_]}}
               (t));
            if(for_alli$8(t,function(key,data){return key === data?1:0}))
             {if
               (for_all$19
                 (t,
                  function(n)
                    {return function(data)
                      {var _a8$_=0 <= data?1:0,_a9a_=_a8$_?data < n?1:0:_a8$_;
                       return _a9a_}}
                   (n)))
               {var
                 alist$1=to_alist$4(t),
                 alist$0=
                  caml_call2
                   (sort$0,
                    function(param,_a9f_)
                     {var i=_a9f_[1],i$0=param[1];return caml_compare(i$0,i)},
                    alist$1);
                if(caml_notequal(alist,alist$0))
                 failwiths
                  (0,
                   _aCS_,
                   cst_Bounded_int_table_alist_bug,
                   [0,t,alist,alist$0],
                   function(param)
                    {var
                      v2=param[3],
                      v1=param[2],
                      v0=param[1],
                      v0$0=sexp_of_t(v0),
                      v1$0=sexp_of_alist(v1),
                      v2$0=sexp_of_alist(v2);
                     return [1,[0,v0$0,[0,v1$0,[0,v2$0,0]]]]});
                var
                 sexp=sexp_of_t(t),
                 sexp$0=sexp_of_t$123(sexp_of_t$43,sexp_of_t$43,t);
                if(caml_notequal(sexp,sexp$0))
                 failwiths
                  (0,
                   _aCT_,
                   cst_Bounded_int_table_sexp_bug,
                   [0,t,sexp,sexp$0],
                   function(param)
                    {var
                      v2=param[3],
                      v1=param[2],
                      v0=param[1],
                      v0$0=sexp_of_t(v0),
                      v1$0=caml_call1(_PT_,v1),
                      v2$0=caml_call1(_PT_,v2);
                     return [1,[0,v0$0,[0,v1$0,[0,v2$0,0]]]]});
                var
                 ensure_equal=
                  function(message,t$0,t)
                   {var _a9e_=1 - equal(t$0,t);
                    return _a9e_
                            ?failwiths
                              (0,
                               _aCU_,
                               cst_Bounded_int_table_bug,
                               [0,message,t$0,t],
                               function(param)
                                {var
                                  v2=param[3],
                                  v1=param[2],
                                  v0=param[1],
                                  v0$0=caml_call1(sexp_of_t$58,v0),
                                  v1$0=sexp_of_t(v1),
                                  v2$0=sexp_of_t(v2);
                                 return [1,[0,v0$0,[0,v1$0,[0,v2$0,0]]]]})
                            :_a9e_};
                ensure_equal
                 (cst_t_of_sexp$1,t,caml_call2(Table[6],t_of_sexp$32,sexp));
                ensure_equal
                 (cst_filter_mapi,
                  t,
                  filter_mapi$8(t,function(key,param){return [0,key]}));
                ensure_equal
                 (cst_filter_map,
                  t,
                  filter_map$13(t,function(data){return [0,data]}));
                ensure_equal
                 (cst_filter_map_None,
                  empty,
                  filter_map$13(t,function(param){return 0}));
                ensure_equal
                 (cst_filter_i_true,
                  t,
                  filteri$8(t,function(param,_a9d_){return 1}));
                ensure_equal
                 (cst_filter_i_false,
                  empty,
                  filteri$8(t,function(param,_a9c_){return 0}));
                ensure_equal
                 (cst_filter_true,t,filter$15(t,function(param){return 1}));
                ensure_equal
                 (cst_filter_false,
                  empty,
                  filter$15(t,function(param){return 0}));
                ensure_equal
                 (cst_filter_keys_true,
                  t,
                  filter_keys$4(t,function(param){return 1}));
                ensure_equal
                 (cst_filter_keys_false,
                  empty,
                  filter_keys$4(t,function(param){return 0}));
                ensure_equal
                 (cst_map,t,map$33(t,function(_a9b_){return _a9b_}));
                ensure_equal
                 (cst_mapi,t,mapi$8(t,function(param,data){return data}));
                var _a85_=mapi$8(t,function(param,data){return data + 1 | 0});
                ensure_equal
                 (cst_map_and_mapi,
                  map$33(t,function(x){return x + 1 | 0}),
                  _a85_);
                var
                 _a86_=caml_call1(Table[7],bin_shape_int),
                 _a87_=
                  [0,
                   [0,
                    caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$221),
                    0,
                    _a86_],
                   0],
                 _a88_=
                  caml_call1
                   (Bin_shape_lib_Bin_shape[4][1],
                    cst_src_bounded_int_table_ml_637_10),
                 group=caml_call2(Bin_prot_Shape[6],_a88_,_a87_),
                 _a89_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$222),
                 bin_shape_t=
                  caml_call1(caml_call2(Bin_prot_Shape[14],group,_a89_),0),
                 bin_size_t=
                  function(v){return caml_call2(Table[8],bin_size_t$36,v)},
                 bin_write_t=
                  function(buf,pos,v)
                   {return caml_call3
                            (caml_call1(Table[9],bin_write_t$36),buf,pos,v)},
                 bin_writer_t=[0,bin_size_t,bin_write_t],
                 bin_read_t=
                  function(buf,pos_ref,vint)
                   {return caml_call3
                            (caml_call1(Table[11],bin_read_t$74),buf,pos_ref,vint)},
                 bin_read_t$0=
                  function(buf,pos_ref)
                   {return caml_call2
                            (caml_call1(Table[10],bin_read_t$74),buf,pos_ref)},
                 bin_reader_t=[0,bin_read_t$0,bin_read_t],
                 bin_t=[0,bin_shape_t,bin_writer_t,bin_reader_t],
                 binable_m=
                  [0,
                   bin_size_t,
                   bin_write_t,
                   bin_read_t$0,
                   bin_read_t,
                   bin_shape_t,
                   bin_writer_t,
                   bin_reader_t,
                   bin_t];
                ensure_equal
                 (cst_binio,
                  t,
                  of_string$16(binable_m,to_string$19(binable_m,t)));
                var _a8__=n + 1 | 0;
                if(5 !== n){var n=_a8__;continue}
                return 0}
              throw [0,Assert_failure,_aCV_]}
            throw [0,Assert_failure,_aCW_]}
          throw [0,Assert_failure,_aCX_]}}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_let_open_M_in_let_empty_Table_of_alist_ex,
        0,
        cst_src_bounded_int_table_ml$39,
        587,
        4,
        2923,
        _a82_);
      function _a83_(param)
       {var t=create(10);
        clear$5(t);
        add_exn$4(t,5,cst_five);
        if(1 === t[4])
         {if(caml_equal(find$20(t,5),_aCY_))
           {clear$5(t);
            assert_empty(t);
            var key=0;
            for(;;)
             {add_exn$4(t,key,caml_call1(_xy_,key));
              var _a84_=key + 1 | 0;
              if(9 !== key){var key=_a84_;continue}
              if(t[4] === 10){clear$5(t);return assert_empty(t)}
              throw [0,Assert_failure,_aCZ_]}}
          throw [0,Assert_failure,_aC0_]}
        throw [0,Assert_failure,_aC1_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_clear_t_add_exn_t_key_5_data_five_asser,
        0,
        cst_src_bounded_int_table_ml$40,
        645,
        4,
        409,
        _a83_);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst$259,
      0,
      cst_src_bounded_int_table_ml$41,
      476,
      0,
      6389,
      _aCp_);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$460);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Bounded_int_table=
      [0,
       sexp_of_t$123,
       invariant$18,
       equal$44,
       create$51,
       num_keys$0,
       keys$4,
       data$6,
       find$20,
       find_exn$12,
       find_or_add$0,
       fold$22,
       iter_keys$4,
       iter_vals,
       iteri$8,
       iter_vals,
       filter_mapi$8,
       filter_map$13,
       filter_keys$4,
       filter$15,
       filteri$8,
       mapi$8,
       map$33,
       for_alli$8,
       existsi$8,
       for_all$19,
       exists$19,
       length$36,
       mem$18,
       remove$13,
       set$16,
       add$20,
       add_exn$4,
       to_alist$4,
       clear$5,
       function(_a8Q_)
        {var _a8R_=With_key(_a8Q_);
         return [0,
                 _a8R_[14],
                 _a8R_[10],
                 _a8R_[11],
                 _a8R_[13],
                 _a8R_[8],
                 _a8R_[9],
                 _a8R_[12],
                 _a8R_[7],
                 _a8R_[6],
                 _a8R_[4],
                 _a8R_[1],
                 _a8R_[3],
                 _a8R_[2]]},
       debug$0];
    caml_register_global
     (7559,Core_kernel_Bounded_int_table,"Core_kernel__Bounded_int_table");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$461);
    caml_call1(Expect_test_collector[4][1],cst_src_bucket_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$462,cst$260);
    function Make$16(C)
     {var
       _a8v_=C[9],
       _a8w_=C[10],
       _a8x_=C[8],
       _a8y_=
        [0,
         [0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_contents),0,_a8x_],
         0],
       _a8z_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_bucket_ml_45_2),
       group=caml_call2(Bin_prot_Shape[6],_a8z_,_a8y_),
       _a8A_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_contents$0),
       bin_shape_contents=
        caml_call1(caml_call2(Bin_prot_Shape[14],group,_a8A_),0),
       bin_size_contents=C[5],
       bin_write_contents=C[6],
       bin_read_contents=C[2];
      function t_of_sexp(sexp)
       {if(0 === sexp[0])
         return caml_call2(Sexplib0_Sexp_conv_error[15],tp_loc$45,sexp);
        var
         field_sexps=sexp[1],
         level_field=[0,0],
         size_field=[0,0],
         duplicates=[0,0],
         extra=[0,0],
         param=field_sexps;
        for(;;)
         {if(param)
           {var _a8J_=param[1];
            if(1 === _a8J_[0])
             {var _a8K_=_a8J_[1];
              if(_a8K_)
               {var _a8L_=_a8K_[1];
                if(0 === _a8L_[0])
                 {var _a8M_=_a8K_[2],_a8N_=_a8L_[1];
                  if(! _a8M_)
                   {var tail$0=param[2];
                    if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_a8N_,extra[1]];
                    var param=tail$0;
                    continue}
                  if(! _a8M_[2])
                   {var tail=param[2],field_sexp=_a8M_[1];
                    if(caml_string_notequal(_a8N_,cst_level))
                     if(caml_string_notequal(_a8N_,cst_size$0))
                      {if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_a8N_,extra[1]]}
                     else
                      if(size_field[1])
                       duplicates[1] = [0,_a8N_,duplicates[1]];
                      else
                       {var fvalue=caml_call1(_a8v_,field_sexp);
                        size_field[1] = [0,fvalue]}
                    else
                     if(level_field[1])
                      duplicates[1] = [0,_a8N_,duplicates[1]];
                     else
                      {var fvalue$0=caml_call1(_a8v_,field_sexp);
                       level_field[1] = [0,fvalue$0]}
                    var param=tail;
                    continue}}}}
            caml_call2(Sexplib0_Sexp_conv_error[9],tp_loc$45,_a8J_)}
          if(duplicates[1])
           return caml_call3
                   (Sexplib0_Sexp_conv_error[11],tp_loc$45,duplicates[1],sexp);
          if(extra[1])
           return caml_call3
                   (Sexplib0_Sexp_conv_error[12],tp_loc$45,extra[1],sexp);
          var _a8O_=level_field[1],_a8P_=size_field[1];
          if(_a8O_)
           if(_a8P_)
            {var size_value=_a8P_[1],level_value=_a8O_[1];
             return [0,level_value,size_value]}
          return caml_call3
                  (Sexplib0_Sexp_conv_error[14],
                   tp_loc$45,
                   sexp,
                   [0,
                    [0,0 === level_field[1]?1:0,cst_level$0],
                    [0,[0,0 === size_field[1]?1:0,cst_size$1],0]])}}
      function sexp_of_t(param)
       {var
         v_level=param[1],
         v_size=param[2],
         arg=caml_call1(_a8w_,v_size),
         bnds=[0,[1,[0,_aC2_,[0,arg,0]]],0],
         arg$0=caml_call1(_a8w_,v_level),
         bnds$0=[0,[1,[0,_aC3_,[0,arg$0,0]]],bnds];
        return [1,bnds$0]}
      var
       _a8B_=
        caml_call1
         (Bin_prot_Shape[8],
          [0,
           [0,cst_level$1,bin_shape_contents],
           [0,[0,cst_size$2,bin_shape_contents],0]]),
       _a8C_=
        [0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$223),0,_a8B_],0],
       _a8D_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_bucket_ml_48_2),
       group$0=caml_call2(Bin_prot_Shape[6],_a8D_,_a8C_),
       _a8E_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$224),
       bin_shape_t=caml_call1(caml_call2(Bin_prot_Shape[14],group$0,_a8E_),0);
      function bin_size_t(param)
       {var v1=param[1],v2=param[2],size=caml_call1(bin_size_contents,v1) | 0;
        return size + caml_call1(bin_size_contents,v2) | 0}
      function bin_write_t(buf,pos,param)
       {var
         v1=param[1],
         v2=param[2],
         pos$0=caml_call3(bin_write_contents,buf,pos,v1);
        return caml_call3(bin_write_contents,buf,pos$0,v2)}
      var bin_writer_t=[0,bin_size_t,bin_write_t];
      function bin_read_t(buf,pos_ref,vint)
       {return caml_call2
                (Bin_prot_Common[19],cst_src_bucket_ml_Make_t,pos_ref[1])}
      function bin_read_t$0(buf,pos_ref)
       {var
         v_level=caml_call2(bin_read_contents,buf,pos_ref),
         v_size=caml_call2(bin_read_contents,buf,pos_ref);
        return [0,v_level,v_size]}
      var
       bin_reader_t=[0,bin_read_t$0,bin_read_t],
       bin_t=[0,bin_shape_t,bin_writer_t,bin_reader_t];
      function create(size,init_level)
       {function error(msg)
         {var _a8I_=caml_call1(_PM_,caml_call1(C[10],init_level));
          return caml_call5
                  (_R5_,
                   _aC4_,
                   caml_call1(_PM_,caml_call1(C[10],size)),
                   _a8I_,
                   msg,
                   0)}
        if(caml_call2(C[15],init_level,C[33]))error(cst_init_level_negative);
        if(caml_call2(C[14],init_level,size))
         error(cst_init_level_above_bucket_size);
        return [0,init_level,size]}
      function size(t){return t[2]}
      function level(t){return t[1]}
      function assert_positive(name,x)
       {var _a8H_=caml_call2(C[15],x,C[33]);
        return _a8H_
                ?caml_call4
                  (_R6_,_aC5_,name,caml_call1(_PM_,caml_call1(C[10],x)),0)
                :_a8H_}
      function take(t,x)
       {assert_positive(cst_take,x);
        var new_level=caml_call2(C[35],t[1],x);
        return caml_call2(C[15],new_level,C[33])
                ?315746451
                :(t[1] = new_level,504886823)}
      function take_at_most(t,x)
       {assert_positive(cst_take_at_most,x);
        var old_level=t[1],_a8G_=caml_call2(C[35],old_level,x);
        t[1] = caml_call2(C[20],C[33],_a8G_);
        return caml_call2(C[35],old_level,t[1])}
      function fill(t,x)
       {assert_positive(cst_fill,x);
        var old_level=t[1],_a8F_=caml_call2(C[34],old_level,x);
        t[1] = caml_call2(C[19],t[2],_a8F_);
        return 0}
      return [0,
              bin_t,
              bin_read_t$0,
              bin_read_t,
              bin_reader_t,
              bin_size_t,
              bin_write_t,
              bin_writer_t,
              bin_shape_t,
              t_of_sexp,
              sexp_of_t,
              create,
              size,
              level,
              take,
              take_at_most,
              fill]}
    var
     _aC6_=Set$1[1],
     _aC7_=Map$1[1],
     Int=
      Make$16
       ([0,
         bin_t$30,
         bin_read_t$74,
         bin_read_t$73,
         bin_reader_t$30,
         bin_size_t$36,
         bin_write_t$36,
         bin_writer_t$30,
         bin_shape_t$35,
         t_of_sexp$32,
         sexp_of_t$43,
         _xx_,
         _xw_,
         _xv_,
         _xu_,
         _xt_,
         _xs_,
         _xr_,
         compare$30,
         _xq_,
         _xp_,
         _xo_,
         _xn_,
         _xm_,
         _xl_,
         _xk_,
         comparator$5,
         _xj_,
         _xi_,
         _xh_,
         Replace_polymorphic_compare,
         [0,
          [0,_aC7_[9],_aC7_[10],_aC7_[11]],
          Map$1[2],
          Map$1[3],
          Map$1[4],
          Map$1[5],
          Map$1[6],
          Map$1[7],
          Map$1[8],
          Map$1[9],
          Map$1[10],
          Map$1[11],
          Map$1[12],
          Map$1[13],
          Map$1[14],
          Map$1[15],
          Map$1[16],
          Map$1[17],
          Map$1[18],
          Map$1[19],
          Map$1[20],
          Map$1[21],
          Map$1[22],
          Map$1[23],
          Map$1[24],
          Map$1[25],
          Map$1[26],
          Map$1[27],
          Map$1[28],
          Map$1[29],
          Map$1[30],
          Map$1[31],
          Map$1[32],
          Map$1[33],
          Map$1[34],
          Map$1[35],
          Map$1[36],
          Map$1[37],
          Map$1[38],
          Map$1[39],
          Map$1[40],
          Map$1[41],
          Map$1[42],
          Map$1[43],
          Map$1[44],
          Map$1[45],
          Map$1[46],
          Map$1[47],
          Map$1[48],
          Map$1[49],
          Map$1[50],
          Map$1[51],
          Map$1[52],
          Map$1[53],
          Map$1[54],
          Map$1[55],
          Map$1[56],
          Map$1[57],
          Map$1[58],
          Map$1[59],
          Map$1[60],
          Map$1[61],
          Map$1[62],
          Map$1[63],
          Map$1[64],
          Map$1[65],
          Map$1[66],
          Map$1[67],
          Map$1[68],
          Map$1[69],
          Map$1[70],
          Map$1[71],
          Map$1[72],
          Map$1[73],
          Map$1[74],
          Map$1[75],
          Map$1[76],
          Map$1[77],
          Map$1[78],
          Map$1[79],
          Map$1[80],
          Map$1[81],
          Map$1[82],
          Map$1[83],
          Map$1[84],
          Map$1[85],
          Map$1[86],
          Map$1[87],
          Map$1[88]],
         [0,
          [0,_aC6_[1],_aC6_[2],_aC6_[11]],
          Set$1[2],
          Set$1[3],
          Set$1[4],
          Set$1[5],
          Set$1[6],
          Set$1[7],
          Set$1[8],
          Set$1[9],
          Set$1[10],
          Set$1[11],
          Set$1[12],
          Set$1[13],
          Set$1[14],
          Set$1[15],
          Set$1[16],
          Set$1[17],
          Set$1[18],
          Set$1[19],
          Set$1[20],
          Set$1[21],
          Set$1[22],
          Set$1[23],
          Set$1[24],
          Set$1[25],
          Set$1[26],
          Set$1[27],
          Set$1[28],
          Set$1[29],
          Set$1[30],
          Set$1[31],
          Set$1[32],
          Set$1[33],
          Set$1[34],
          Set$1[35],
          Set$1[36],
          Set$1[37],
          Set$1[38],
          Set$1[39],
          Set$1[40],
          Set$1[41],
          Set$1[42],
          Set$1[43],
          Set$1[44],
          Set$1[45],
          Set$1[46],
          Set$1[47],
          Set$1[48],
          Set$1[49],
          Set$1[50],
          Set$1[51],
          Set$1[52],
          Set$1[53],
          Set$1[54],
          Set$1[55],
          Set$1[56],
          Set$1[57],
          Set$1[58],
          Set$1[59],
          Set$1[60],
          Set$1[61],
          Set$1[62],
          Set$1[63],
          Set$1[64],
          Set$1[65],
          Set$1[66],
          Set$1[67],
          Set$1[68],
          Set$1[69],
          Set$1[70],
          Set$1[71],
          Set$1[72],
          Set$1[73],
          Set$1[74]],
         _w7_,
         _w4_,
         _w3_]),
     _aC8_=Set$2[1],
     _aC9_=Map$2[1],
     Int64=
      Make$16
       ([0,
         bin_t$33,
         bin_read_t$75,
         bin_read_t$76,
         bin_reader_t$33,
         bin_size_t$37,
         bin_write_t$37,
         bin_writer_t$33,
         bin_shape_t$38,
         _za_,
         _y$_,
         _y8_,
         _y7_,
         _y6_,
         _y5_,
         _y4_,
         _y3_,
         _y2_,
         _y1_,
         _y0_,
         _yZ_,
         _yY_,
         _yX_,
         _yW_,
         _yV_,
         _yU_,
         _yT_,
         _yS_,
         _yR_,
         _yQ_,
         Replace_polymorphic_compare$0,
         [0,
          [0,_aC9_[9],_aC9_[10],_aC9_[11]],
          Map$2[2],
          Map$2[3],
          Map$2[4],
          Map$2[5],
          Map$2[6],
          Map$2[7],
          Map$2[8],
          Map$2[9],
          Map$2[10],
          Map$2[11],
          Map$2[12],
          Map$2[13],
          Map$2[14],
          Map$2[15],
          Map$2[16],
          Map$2[17],
          Map$2[18],
          Map$2[19],
          Map$2[20],
          Map$2[21],
          Map$2[22],
          Map$2[23],
          Map$2[24],
          Map$2[25],
          Map$2[26],
          Map$2[27],
          Map$2[28],
          Map$2[29],
          Map$2[30],
          Map$2[31],
          Map$2[32],
          Map$2[33],
          Map$2[34],
          Map$2[35],
          Map$2[36],
          Map$2[37],
          Map$2[38],
          Map$2[39],
          Map$2[40],
          Map$2[41],
          Map$2[42],
          Map$2[43],
          Map$2[44],
          Map$2[45],
          Map$2[46],
          Map$2[47],
          Map$2[48],
          Map$2[49],
          Map$2[50],
          Map$2[51],
          Map$2[52],
          Map$2[53],
          Map$2[54],
          Map$2[55],
          Map$2[56],
          Map$2[57],
          Map$2[58],
          Map$2[59],
          Map$2[60],
          Map$2[61],
          Map$2[62],
          Map$2[63],
          Map$2[64],
          Map$2[65],
          Map$2[66],
          Map$2[67],
          Map$2[68],
          Map$2[69],
          Map$2[70],
          Map$2[71],
          Map$2[72],
          Map$2[73],
          Map$2[74],
          Map$2[75],
          Map$2[76],
          Map$2[77],
          Map$2[78],
          Map$2[79],
          Map$2[80],
          Map$2[81],
          Map$2[82],
          Map$2[83],
          Map$2[84],
          Map$2[85],
          Map$2[86],
          Map$2[87],
          Map$2[88]],
         [0,
          [0,_aC8_[1],_aC8_[2],_aC8_[11]],
          Set$2[2],
          Set$2[3],
          Set$2[4],
          Set$2[5],
          Set$2[6],
          Set$2[7],
          Set$2[8],
          Set$2[9],
          Set$2[10],
          Set$2[11],
          Set$2[12],
          Set$2[13],
          Set$2[14],
          Set$2[15],
          Set$2[16],
          Set$2[17],
          Set$2[18],
          Set$2[19],
          Set$2[20],
          Set$2[21],
          Set$2[22],
          Set$2[23],
          Set$2[24],
          Set$2[25],
          Set$2[26],
          Set$2[27],
          Set$2[28],
          Set$2[29],
          Set$2[30],
          Set$2[31],
          Set$2[32],
          Set$2[33],
          Set$2[34],
          Set$2[35],
          Set$2[36],
          Set$2[37],
          Set$2[38],
          Set$2[39],
          Set$2[40],
          Set$2[41],
          Set$2[42],
          Set$2[43],
          Set$2[44],
          Set$2[45],
          Set$2[46],
          Set$2[47],
          Set$2[48],
          Set$2[49],
          Set$2[50],
          Set$2[51],
          Set$2[52],
          Set$2[53],
          Set$2[54],
          Set$2[55],
          Set$2[56],
          Set$2[57],
          Set$2[58],
          Set$2[59],
          Set$2[60],
          Set$2[61],
          Set$2[62],
          Set$2[63],
          Set$2[64],
          Set$2[65],
          Set$2[66],
          Set$2[67],
          Set$2[68],
          Set$2[69],
          Set$2[70],
          Set$2[71],
          Set$2[72],
          Set$2[73],
          Set$2[74]],
         _yE_,
         _yB_,
         _yA_]),
     _aC__=Set$11[1],
     _aC$_=Map$11[1],
     Float=
      Make$16
       ([0,
         bin_t$50,
         bin_read_t$5,
         bin_read_t$6,
         bin_reader_t$50,
         bin_size_t$2,
         bin_write_t$2,
         bin_writer_t$50,
         bin_shape_t$55,
         t_of_sexp$47,
         sexp_of_t$59,
         _Iy_,
         _Ix_,
         _Iw_,
         _Iv_,
         _Iu_,
         _It_,
         equal$28,
         compare$48,
         min$10,
         max$10,
         ascending$9,
         descending$9,
         between$9,
         clamp_exn$9,
         clamp$9,
         comparator$19,
         validate_lbound$9,
         validate_ubound$9,
         validate_bound$9,
         Replace_polymorphic_compare$7,
         [0,
          [0,_aC$_[9],_aC$_[10],_aC$_[11]],
          Map$11[2],
          Map$11[3],
          Map$11[4],
          Map$11[5],
          Map$11[6],
          Map$11[7],
          Map$11[8],
          Map$11[9],
          Map$11[10],
          Map$11[11],
          Map$11[12],
          Map$11[13],
          Map$11[14],
          Map$11[15],
          Map$11[16],
          Map$11[17],
          Map$11[18],
          Map$11[19],
          Map$11[20],
          Map$11[21],
          Map$11[22],
          Map$11[23],
          Map$11[24],
          Map$11[25],
          Map$11[26],
          Map$11[27],
          Map$11[28],
          Map$11[29],
          Map$11[30],
          Map$11[31],
          Map$11[32],
          Map$11[33],
          Map$11[34],
          Map$11[35],
          Map$11[36],
          Map$11[37],
          Map$11[38],
          Map$11[39],
          Map$11[40],
          Map$11[41],
          Map$11[42],
          Map$11[43],
          Map$11[44],
          Map$11[45],
          Map$11[46],
          Map$11[47],
          Map$11[48],
          Map$11[49],
          Map$11[50],
          Map$11[51],
          Map$11[52],
          Map$11[53],
          Map$11[54],
          Map$11[55],
          Map$11[56],
          Map$11[57],
          Map$11[58],
          Map$11[59],
          Map$11[60],
          Map$11[61],
          Map$11[62],
          Map$11[63],
          Map$11[64],
          Map$11[65],
          Map$11[66],
          Map$11[67],
          Map$11[68],
          Map$11[69],
          Map$11[70],
          Map$11[71],
          Map$11[72],
          Map$11[73],
          Map$11[74],
          Map$11[75],
          Map$11[76],
          Map$11[77],
          Map$11[78],
          Map$11[79],
          Map$11[80],
          Map$11[81],
          Map$11[82],
          Map$11[83],
          Map$11[84],
          Map$11[85],
          Map$11[86],
          Map$11[87],
          Map$11[88]],
         [0,
          [0,_aC__[1],_aC__[2],_aC__[11]],
          Set$11[2],
          Set$11[3],
          Set$11[4],
          Set$11[5],
          Set$11[6],
          Set$11[7],
          Set$11[8],
          Set$11[9],
          Set$11[10],
          Set$11[11],
          Set$11[12],
          Set$11[13],
          Set$11[14],
          Set$11[15],
          Set$11[16],
          Set$11[17],
          Set$11[18],
          Set$11[19],
          Set$11[20],
          Set$11[21],
          Set$11[22],
          Set$11[23],
          Set$11[24],
          Set$11[25],
          Set$11[26],
          Set$11[27],
          Set$11[28],
          Set$11[29],
          Set$11[30],
          Set$11[31],
          Set$11[32],
          Set$11[33],
          Set$11[34],
          Set$11[35],
          Set$11[36],
          Set$11[37],
          Set$11[38],
          Set$11[39],
          Set$11[40],
          Set$11[41],
          Set$11[42],
          Set$11[43],
          Set$11[44],
          Set$11[45],
          Set$11[46],
          Set$11[47],
          Set$11[48],
          Set$11[49],
          Set$11[50],
          Set$11[51],
          Set$11[52],
          Set$11[53],
          Set$11[54],
          Set$11[55],
          Set$11[56],
          Set$11[57],
          Set$11[58],
          Set$11[59],
          Set$11[60],
          Set$11[61],
          Set$11[62],
          Set$11[63],
          Set$11[64],
          Set$11[65],
          Set$11[66],
          Set$11[67],
          Set$11[68],
          Set$11[69],
          Set$11[70],
          Set$11[71],
          Set$11[72],
          Set$11[73],
          Set$11[74]],
         zero$4,
         _Is_,
         _Ir_]);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$463);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Bucket=[0,Make$16,Int,Int64,Float];
    caml_register_global(7560,Core_kernel_Bucket,"Core_kernel__Bucket");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$464);
    caml_call1(Expect_test_collector[4][1],cst_src_bus_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$465,cst$261);
    function sexp_of_t$124(of_v_x_001,param)
     {switch(param)
       {case 0:return _aDd_;
        case 1:return _aDe_;
        case 2:return _aDf_;
        default:return _aDg_}}
    var Callback_arity=[0,sexp_of_t$124];
    function sexp_of_t$125(param)
     {switch(param)
       {case 0:return _aDh_;case 1:return _aDi_;default:return _aDj_}}
    function set1(t,a)
     {var _a8u_=t[1];
      if(_a8u_){var match=_a8u_[1];match[1] = a;return 0}
      t[1] = [0,[0,a]];
      return 0}
    function set2(t,a,b)
     {var _a8t_=t[1];
      if(_a8t_){var match=_a8t_[1];match[1] = a;match[2] = b;return 0}
      t[1] = [0,[1,a,b]];
      return 0}
    function set3(t,a,b,c)
     {var _a8s_=t[1];
      if(_a8s_)
       {var match=_a8s_[1];match[1] = a;match[2] = b;match[3] = c;return 0}
      t[1] = [0,[2,a,b,c]];
      return 0}
    function set4(t,a,b,c,d)
     {var _a8r_=t[1];
      if(_a8r_)
       {var match=_a8r_[1];
        match[1] = a;
        match[2] = b;
        match[3] = c;
        match[4] = d;
        return 0}
      t[1] = [0,[3,a,b,c,d]];
      return 0}
    var Subscriber_id=_ao8_([0]);
    function callback(r){return r[2]}
    function _aDk_(r,v){return [0,r[1],v,r[3],r[4],r[5],r[6]]}
    var
     _aDl_=0,
     callback$0=
      [0,[0,function(param){return 0},cst_callback,_aDl_,callback,_aDk_]];
    function sexp_of_t$126(param,_a8g_)
     {var
       subscribed_from=_a8g_[6],
       on_callback_raise=_a8g_[4],
       extract_exn=_a8g_[3],
       id=_a8g_[1],
       _a8h_=0,
       _a8i_=am_running_inline_test?0:[0,id],
       _a8j_=extract_exn?_aDm_:0,
       match=[0,[1,[0,_aDn_,[0,caml_call1(_jC_,subscribed_from),0]]],0];
      if(_a8j_)
       var v=_a8j_[1],_a8k_=[0,[1,[0,_aDo_,[0,caml_call1(_BA_,v),0]]],match];
      else
       var _a8k_=match;
      if(on_callback_raise)
       var
        _a8l_=0,
        _a8m_=function(_a8q_){return 0},
        _a8n_=
         [0,
          [1,[0,_aDp_,[0,caml_call1(Sexplib0_Sexp_conv[24],_a8m_),_a8l_]]],
          _a8k_];
      else
       var _a8n_=_a8k_;
      if(_a8i_)
       var
        v$0=_a8i_[1],
        _a8o_=[0,[1,[0,_aDq_,[0,caml_call1(Subscriber_id[10],v$0),0]]],_a8n_];
      else
       var _a8o_=_a8n_;
      if(_a8o_)
       if(_a8o_[2])var switch$0=0;else var h=_a8o_[1],_a8p_=h,switch$0=1;
      else
       var switch$0=0;
      if(! switch$0)var _a8p_=[1,_a8o_];
      return [1,[0,_aDr_,[0,_a8p_,_a8h_]]]}
    function subscribers(r){return r[8]}
    function set_subscribers(r,v){r[8] = v;return 0}
    function callback_arity(r){return r[2]}
    function _aDu_(r,v)
     {return [0,r[1],r[2],r[3],r[4],r[5],r[6],r[7],v,r[9],r[10],r[11]]}
    var
     _aDv_=[0,set_subscribers],
     subscribers$0=
      [0,
       [0,function(param){return 0},cst_subscribers,_aDv_,subscribers,_aDu_]];
    function sexp_of_bus(param,_a73_,_a72_)
     {var
       on_subscription_after_first_write=_a72_[4],
       created_from=_a72_[3],
       callback_arity=_a72_[2],
       name=_a72_[1],
       state=_a72_[6],
       write_ever_called=_a72_[7],
       subscribers=_a72_[8],
       _a74_=0,
       _a75_=0;
      function _a76_(param){return _aDw_}
      function _a77_(_a8f_){return sexp_of_t$126(_a76_,_a8f_)}
      var
       _a78_=
        [0,
         [1,
          [0,
           _aDx_,
           [0,caml_call2(Subscriber_id[33][88],_a77_,subscribers),_a75_]]],
         _a74_],
       _a79_=[0,[1,[0,_aDy_,[0,caml_call1(_BA_,write_ever_called),0]]],_a78_],
       _a7__=0;
      switch(state)
       {case 0:var _a7$_=_aDa_;break;
        case 1:var _a7$_=_aDb_;break;
        default:var _a7$_=_aDc_}
      var
       _a8a_=
        [0,
         [1,[0,_aDA_,[0,sexp_of_t$125(on_subscription_after_first_write),0]]],
         [0,[1,[0,_aDz_,[0,_a7$_,_a7__]]],_a79_]],
       _a8b_=[0,[1,[0,_aDB_,[0,caml_call1(_jC_,created_from),0]]],_a8a_],
       _a8c_=0;
      function _a8d_(param){return _aDC_}
      var
       match=
        [0,
         [1,
          [0,
           _aDD_,
           [0,caml_call2(Callback_arity[1],_a8d_,callback_arity),_a8c_]]],
         _a8b_];
      if(name)
       var v=name[1],_a8e_=[0,[1,[0,_aDE_,[0,caml_call1(_j__,v),0]]],match];
      else
       var _a8e_=match;
      if(_a8e_)if(! _a8e_[2]){var h=_a8e_[1];return h}
      return [1,_a8e_]}
    function read_only$0(t){return t}
    function invariant$19(invariant_a,param,t)
     {function _a7T_(param)
       {function f(subscribers)
         {return caml_call2
                  (iteri$4,
                   subscribers,
                   function(param,callback)
                    {function _a7Y_(param)
                      {var
                        callback_fun=
                         caml_call2(Base_Invariant[2],callback,invariant_a);
                       caml_call1(callback_fun,callback$0);
                       return 0}
                     function _a7Z_(param){return _aDs_}
                     function _a70_(_a71_){return sexp_of_t$126(_a7Z_,_a71_)}
                     return caml_call4
                             (Base_Invariant[1],_aDt_,callback,_a70_,_a7Y_)})}
        var subscribers_fun=caml_call2(Base_Invariant[2],t,f);
        caml_call1(subscribers_fun,subscribers$0);
        return 0}
      function _a7U_(param){return _aDF_}
      function _a7V_(param){return _aDG_}
      function _a7W_(_a7X_){return sexp_of_bus(_a7V_,_a7U_,_a7X_)}
      return caml_call4(Base_Invariant[1],_aDH_,t,_a7W_,_a7T_)}
    function is_closed(t)
     {switch(t[6]){case 0:return 1;case 1:return 0;default:return 0}}
    function num_subscribers(t){return caml_call1(length$8,t[8])}
    function sexp_of_t$127(of_callback,v)
     {return sexp_of_bus(of_callback,_RL_,v)}
    function invariant$20(invariant_a,t)
     {return invariant$19(invariant_a,function(_a7S_){return 0},t)}
    var Read_write$0=[0,sexp_of_t$127,invariant$20];
    function sexp_of_t$128(of_callback,v)
     {return sexp_of_bus(of_callback,_Rg_,v)}
    function invariant$21(invariant_a,t)
     {return invariant$19(invariant_a,function(_a7R_){return 0},t)}
    var Read_only=[0,sexp_of_t$128,invariant$21];
    function start_write_failing(t)
     {switch(t[6])
       {case 0:
         var
          _a7L_=function(param){return _aDI_},
          _a7M_=function(param){return _aDJ_};
         return failwiths
                 (0,
                  _aDK_,
                  cst_Bus_write_called_on_closed_bus,
                  t,
                  function(_a7Q_){return sexp_of_bus(_a7M_,_a7L_,_a7Q_)});
        case 1:
         var
          _a7N_=function(param){return _aDL_},
          _a7O_=function(param){return _aDM_};
         return failwiths
                 (0,
                  _aDN_,
                  cst_Bus_write_called_from_callback_on_the_same_bus,
                  t,
                  function(_a7P_){return sexp_of_bus(_a7O_,_a7N_,_a7P_)});
        default:throw [0,Assert_failure,_aDO_]}}
    function finish_write(t)
     {switch(t[6])
       {case 0:return 0;
        case 1:t[6] = 2;return 0;
        default:throw [0,Assert_failure,_aDP_]}}
    function close(t)
     {if(0 === t[6])return 0;
      t[6] = 0;
      function _a7J_(subscriber)
       {function _a7K_(on_close){return caml_call1(on_close,0)}
        return caml_call2(iter$16,subscriber[5],_a7K_)}
      caml_call2(iter$7,t[8],_a7J_);
      t[8] = Subscriber_id[33][4];
      return 0}
    function update_write(t)
     {var
       subscribers=caml_call1(of_list$1,caml_call1(data$3,t[8])),
       callbacks=caml_call2(map$1,subscribers,callback);
      function call_on_callback_raise(error)
       {try
         {var _a7I_=caml_call1(t[11],error);return _a7I_}
        catch(exn){exn = caml_wrap_exception(exn);close(t);throw exn}}
      function callback_raised(i,exn)
       {var
         backtrace=caml_call1(Base_Backtrace[6][4],0),
         _a7v_=i - 1 | 0,
         subscriber=caml_check_bound(subscribers,_a7v_)[_a7v_ + 1],
         _a7w_=0,
         _a7x_=0,
         _a7y_=
          [0,
           [1,
            [0,
             _aDR_,
             [0,sexp_of_t$126(function(param){return _aDQ_},subscriber),_a7x_]]],
           _a7w_],
         _a7z_=
          [0,
           [1,[0,_aDS_,[0,caml_call1(Base_Backtrace[1],backtrace),0]]],
           _a7y_],
         _a7A_=[0,[1,[0,_aDT_,[0,caml_call1(_Tv_,exn),0]]],_a7z_],
         _a7B_=
          [1,
           [0,
            caml_call1(Sexplib0_Sexp_conv[7],cst_Bus_subscriber_raised),
            _a7A_]],
         error=function(sexp){return caml_call1(_ku_,sexp)}(_a7B_),
         _a7C_=subscriber[4];
        if(_a7C_)
         {var f=_a7C_[1],error$0=subscriber[3]?caml_call2(of_exn,0,exn):error;
          try
           {var _a7H_=caml_call1(f,error$0);return _a7H_}
          catch(exn)
           {exn = caml_wrap_exception(exn);
            var
             backtrace$0=caml_call1(Base_Backtrace[6][4],0),
             _a7D_=[0,[1,[0,_aDU_,[0,caml_call1(sexp_of_t$18,error$0),0]]],0],
             _a7E_=
              [0,
               [1,[0,_aDV_,[0,caml_call1(Base_Backtrace[1],backtrace$0),0]]],
               _a7D_],
             _a7F_=[0,[1,[0,_aDW_,[0,caml_call1(_Tv_,exn),0]]],_a7E_],
             _a7G_=
              [1,
               [0,
                caml_call1
                 (Sexplib0_Sexp_conv[7],
                  cst_Bus_subscriber_s_on_callback_raise_raised),
                _a7F_]];
            return call_on_callback_raise
                    (function(sexp){return caml_call1(_ku_,sexp)}(_a7G_))}}
        return call_on_callback_raise(error)}
      t[9] = callbacks;
      t[10] = callback_raised;
      return 0}
    function write(t,a1)
     {var
       callbacks=t[9],
       callback_raised=t[10],
       len$0=caml_call1(length$1,callbacks);
      t[7] = 1;
      if(2 <= t[6])
       {t[6] = 1;
        if(1 === len$0)
         {try
           {caml_call1(callbacks[1],a1)}
          catch(exn)
           {exn = caml_wrap_exception(exn);caml_call2(callback_raised,1,exn)}
          finish_write(t)}
        else
         {var len=caml_call1(length$1,callbacks),i=[0,0];
          for(;;)
           {if(i[1] < len)
             {try
               {var callback=callbacks[i[1] + 1];
                i[1]++;
                caml_call1(callback,a1)}
              catch(exn)
               {exn = caml_wrap_exception(exn);
                caml_call2(callback_raised,i[1],exn);
                continue}
              continue}
            finish_write(t);
            break}}
        var _a7u_=t[5];
        if(_a7u_){var last_value=_a7u_[1];return set1(last_value,a1)}
        return 0}
      return start_write_failing(t)}
    function write2(t,a1,a2)
     {var
       callbacks=t[9],
       callback_raised=t[10],
       len$0=caml_call1(length$1,callbacks);
      t[7] = 1;
      if(2 <= t[6])
       {t[6] = 1;
        if(1 === len$0)
         {try
           {caml_call2(callbacks[1],a1,a2)}
          catch(exn)
           {exn = caml_wrap_exception(exn);caml_call2(callback_raised,1,exn)}
          finish_write(t)}
        else
         {var len=caml_call1(length$1,callbacks),i=[0,0];
          for(;;)
           {if(i[1] < len)
             {try
               {var callback=callbacks[i[1] + 1];
                i[1]++;
                caml_call2(callback,a1,a2)}
              catch(exn)
               {exn = caml_wrap_exception(exn);
                caml_call2(callback_raised,i[1],exn);
                continue}
              continue}
            finish_write(t);
            break}}
        var _a7t_=t[5];
        if(_a7t_){var last_value=_a7t_[1];return set2(last_value,a1,a2)}
        return 0}
      return start_write_failing(t)}
    function write3(t,a1,a2,a3)
     {var
       callbacks=t[9],
       callback_raised=t[10],
       len$0=caml_call1(length$1,callbacks);
      t[7] = 1;
      if(2 <= t[6])
       {t[6] = 1;
        if(1 === len$0)
         {try
           {caml_call3(callbacks[1],a1,a2,a3)}
          catch(exn)
           {exn = caml_wrap_exception(exn);caml_call2(callback_raised,1,exn)}
          finish_write(t)}
        else
         {var len=caml_call1(length$1,callbacks),i=[0,0];
          for(;;)
           {if(i[1] < len)
             {try
               {var callback=callbacks[i[1] + 1];
                i[1]++;
                caml_call3(callback,a1,a2,a3)}
              catch(exn)
               {exn = caml_wrap_exception(exn);
                caml_call2(callback_raised,i[1],exn);
                continue}
              continue}
            finish_write(t);
            break}}
        var _a7s_=t[5];
        if(_a7s_){var last_value=_a7s_[1];return set3(last_value,a1,a2,a3)}
        return 0}
      return start_write_failing(t)}
    function write4(t,a1,a2,a3,a4)
     {var
       callbacks=t[9],
       callback_raised=t[10],
       len$0=caml_call1(length$1,callbacks);
      t[7] = 1;
      if(2 <= t[6])
       {t[6] = 1;
        if(1 === len$0)
         {try
           {caml_call4(callbacks[1],a1,a2,a3,a4)}
          catch(exn)
           {exn = caml_wrap_exception(exn);caml_call2(callback_raised,1,exn)}
          finish_write(t)}
        else
         {var len=caml_call1(length$1,callbacks),i=[0,0];
          for(;;)
           {if(i[1] < len)
             {try
               {var callback=callbacks[i[1] + 1];
                i[1]++;
                caml_call4(callback,a1,a2,a3,a4)}
              catch(exn)
               {exn = caml_wrap_exception(exn);
                caml_call2(callback_raised,i[1],exn);
                continue}
              continue}
            finish_write(t);
            break}}
        var _a7r_=t[5];
        if(_a7r_){var last_value=_a7r_[1];return set4(last_value,a1,a2,a3,a4)}
        return 0}
      return start_write_failing(t)}
    function create$52
     (name,
      created_from,
      callback_arity,
      on_subscription_after_first_write,
      on_callback_raise)
     {switch(on_subscription_after_first_write)
       {case 0:var last_value=0;break;
        case 1:var last_value=[0,[0,0]];break;
        default:var last_value=0}
      function _a7p_(param,_a7q_){throw [0,Assert_failure,_aDX_]}
      var
       t=
        [0,
         name,
         callback_arity,
         created_from,
         on_subscription_after_first_write,
         last_value,
         2,
         0,
         Subscriber_id[33][4],
         [0],
         _a7p_,
         on_callback_raise];
      update_write(t);
      return t}
    function can_subscribe(t)
     {switch(t[4])
       {case 0:var _a7n_=1;break;case 1:var _a7n_=1;break;default:var _a7n_=0}
      var _a7o_=_a7n_ || 1 - t[7];
      return _a7o_}
    function subscribe_exn(opt,on_callback_raise,on_close,t,subscribed_from,f)
     {if(opt)var sth=opt[1],extract_exn=sth;else var extract_exn=0;
      if(1 - can_subscribe(t))
       {var
         _a7h_=0,
         _a7i_=0,
         _a7j_=0,
         _a7k_=function(param){return _aDY_},
         _a7l_=
          [0,
           [1,
            [0,
             [1,
              [0,
               _aD0_,
               [0,sexp_of_bus(function(param){return _aDZ_},_a7k_,t),_a7j_]]],
             _a7i_]],
           _a7h_];
        failwiths
         (0,
          _aD2_,
          cst_Bus_subscribe_exn_called_after_first_write,
          [1,[0,[1,[0,_aD1_,[0,caml_call1(_jC_,subscribed_from),0]]],_a7l_]],
          _PT_)}
      var
       subscriber=
        [0,
         caml_call1(Subscriber_id[45],0),
         f,
         extract_exn,
         on_callback_raise,
         on_close,
         subscribed_from];
      t[8] = caml_call3(set$2,t[8],subscriber[1],subscriber);
      update_write(t);
      var _a7m_=t[5];
      if(_a7m_)
       {var last_value=_a7m_[1],_a7f_=last_value[1];
        if(_a7f_)
         {var _a7g_=_a7f_[1];
          switch(_a7g_[0])
           {case 0:var arg1=_a7g_[1];caml_call1(f,arg1);break;
            case 1:
             var arg1$0=_a7g_[1],arg2=_a7g_[2];
             caml_call2(f,arg1$0,arg2);
             break;
            case 2:
             var arg1$1=_a7g_[1],arg2$0=_a7g_[2],arg3=_a7g_[3];
             caml_call3(f,arg1$1,arg2$0,arg3);
             break;
            default:
             var
              arg1$2=_a7g_[1],
              arg2$1=_a7g_[2],
              arg3$0=_a7g_[3],
              arg4=_a7g_[4];
             caml_call4(f,arg1$2,arg2$1,arg3$0,arg4)}}}
      return subscriber}
    function iter_exn(t,subscribed_from,f)
     {if(1 - can_subscribe(t))
       {var
         _a7c_=function(param){return _aD3_},
         _a7d_=function(param){return _aD4_};
        failwiths
         (0,
          _aD5_,
          cst_Bus_iter_exn_called_after_first_write,
          t,
          function(_a7e_){return sexp_of_bus(_a7d_,_a7c_,_a7e_)})}
      subscribe_exn(0,0,0,t,subscribed_from,f);
      return 0}
    function sexp_of_t$129(of_v_x_002,of_v_x_003,of_v_x_004,param)
     {switch(param)
       {case 0:return _aD6_;
        case 1:return _aD7_;
        case 2:return _aD8_;
        default:return _aD9_}}
    var Fold_arity=[0,sexp_of_t$129];
    function fold_exn(t,subscribed_from,fold_arity,init,f)
     {var state=[0,init];
      if(1 - can_subscribe(t))
       {var
         _a6__=function(param){return _aD__},
         _a6$_=function(param){return _aD$_};
        failwiths
         (0,
          _aEa_,
          cst_Bus_fold_exn_called_after_first_write,
          t,
          function(_a7b_){return sexp_of_bus(_a6$_,_a6__,_a7b_)})}
      switch(fold_arity)
       {case 0:
         var
          _a7a_=
           function(a1){state[1] = caml_call2(f,state[1],a1);return 0};
         break;
        case 1:
         var
          _a7a_=
           function(a1,a2){state[1] = caml_call3(f,state[1],a1,a2);return 0};
         break;
        case 2:
         var
          _a7a_=
           function(a1,a2,a3)
            {state[1] = caml_call4(f,state[1],a1,a2,a3);return 0};
         break;
        default:
         var
          _a7a_=
           function(a1,a2,a3,a4)
            {state[1] = caml_call5(f,state[1],a1,a2,a3,a4);return 0}}
      return iter_exn(t,subscribed_from,_a7a_)}
    function unsubscribe(t,subscription)
     {t[8] = caml_call2(remove$3,t[8],subscription[1]);return update_write(t)}
    function _aEb_(param)
     {function assert_no_allocation(bus_r,callback,write)
       {subscribe_exn(0,0,0,bus_r,_aEc_,callback);
        var
         starting_minor_words=runtime.core_kernel_gc_minor_words(0),
         starting_major_words=runtime.core_kernel_gc_major_words(0);
        caml_call1(write,0);
        var
         ending_minor_words=runtime.core_kernel_gc_minor_words(0),
         ending_major_words=runtime.core_kernel_gc_major_words(0),
         got=ending_minor_words - starting_minor_words | 0;
        caml_call8
         (Ppx_assert_lib_Runtime[3],
          pos$121,
          sexp_of_t$43,
          compare$30,
          0,
          0,
          0,
          0,
          got);
        var got$0=ending_major_words - starting_major_words | 0;
        return caml_call8
                (Ppx_assert_lib_Runtime[3],
                 pos$122,
                 sexp_of_t$43,
                 compare$30,
                 0,
                 0,
                 0,
                 0,
                 got$0)}
      function _a6Z_(param)
       {function create(created_from,arity)
         {return create$52(0,created_from,arity,2,_kL_)}
        var
         bus1=create(_aEd_,0),
         bus2=create(_aEe_,1),
         bus3=create(_aEf_,2),
         bus4=create(_aEg_,3);
        function _a60_(param){return write(bus1,0)}
        assert_no_allocation(bus1,function(param){return 0},_a60_);
        function _a61_(param){return write2(bus2,0,0)}
        assert_no_allocation(bus2,function(param,_a69_){return 0},_a61_);
        function _a62_(param){return write3(bus3,0,0,0)}
        assert_no_allocation(bus3,function(param,_a68_,_a67_){return 0},_a62_);
        function _a63_(param){return write4(bus4,0,0,0,0)}
        return assert_no_allocation
                (bus4,function(param,_a66_,_a65_,_a64_){return 0},_a63_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_write_doesn_t_allocate_when_inlined,
        0,
        cst_src_bus_ml$0,
        606,
        4,
        787,
        _a6Z_);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst$262,
      0,
      cst_src_bus_ml$1,
      589,
      0,
      1629,
      _aEb_);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$466);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Bus=
      [0,
       Callback_arity,
       sexp_of_bus,
       Read_write$0,
       Read_only,
       [0,sexp_of_t$125],
       read_only$0,
       create$52,
       callback_arity,
       num_subscribers,
       is_closed,
       close,
       write,
       write2,
       write3,
       write4,
       [0,sexp_of_t$126],
       subscribe_exn,
       iter_exn,
       Fold_arity,
       fold_exn,
       unsubscribe];
    caml_register_global(7561,Core_kernel_Bus,"Core_kernel__Bus");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$467);
    caml_call1(Expect_test_collector[4][1],cst_src_option_array_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$468,cst$263);
    var
     t_of_sexp$102=include$138[1],
     sexp_of_t$130=include$138[2],
     empty$12=include$138[3],
     create$53=include$138[4],
     init_some=include$138[5],
     init$12=include$138[6],
     length$37=include$138[7],
     get$12=include$138[8],
     get_some_exn=include$138[9],
     is_none$3=include$138[10],
     is_some$3=include$138[11],
     unsafe_get$1=include$138[12],
     unsafe_get_some_exn=include$138[13],
     unsafe_is_some=include$138[14],
     set$17=include$138[15],
     set_some=include$138[16],
     set_none=include$138[17],
     clear$6=include$138[18],
     unsafe_set$1=include$138[19],
     unsafe_set_some=include$138[20],
     unsafe_set_none=include$138[21],
     blit$8=include$138[22],
     blito$6=include$138[23],
     unsafe_blit$5=include$138[24],
     sub$12=include$138[25],
     subo$6=include$138[26],
     copy$6=include$138[27],
     For_testing=include$138[28];
    function to_array$12(t)
     {function _a6Y_(i){return caml_call2(unsafe_get$1,t,i)}
      return caml_call2(init$0,caml_call1(length$37,t),_a6Y_)}
    function of_array$8(a)
     {function _a6X_(i){return a[i + 1]}
      return caml_call2(init$12,caml_call1(length$1,a),_a6X_)}
    var
     _aEi_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$89),
     _aEj_=
      caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_option_array_ml_9_16),
     _aEk_=
      caml_call1
       (_dl_,caml_call1(_c9_,caml_call2(Bin_prot_Shape[15],_aEj_,_aEi_))),
     _aEl_=[0,caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$90),0],
     _aEm_=
      [0,
       [0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$225),_aEl_,_aEk_],
       0],
     _aEn_=
      caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_option_array_ml_9_4),
     group$118=caml_call2(Bin_prot_Shape[6],_aEn_,_aEm_),
     _aEh_=[0,to_array$12,of_array$8];
    function bin_shape_t$97(a)
     {var _a6W_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$226);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$118,_a6W_),[0,a,0])}
    function bin_size_t$71(size_of_a,v)
     {return caml_call2(_bo_,caml_call1(_bk_,size_of_a),v)}
    function bin_write_t$72(write_a,buf,pos,v)
     {return caml_call3(caml_call1(_dn_,caml_call1(_c$_,write_a)),buf,pos,v)}
    function bin_read_t$141(of_a,buf,pos_ref,vint)
     {return caml_call3
              (caml_call1(_dq_,caml_call1(_db_,of_a)),buf,pos_ref,vint)}
    function bin_read_t$142(of_a,buf,pos_ref)
     {return caml_call2(caml_call1(_dp_,caml_call1(_db_,of_a)),buf,pos_ref)}
    var
     include$139=
      caml_call1
       (caml_call1
         (_W4_,
          [0,
           bin_shape_t$97,
           bin_size_t$71,
           bin_write_t$72,
           bin_read_t$142,
           bin_read_t$141]),
        _aEh_),
     _aEo_=include$139[1],
     _aEp_=include$139[2],
     _aEq_=include$139[3],
     _aEr_=include$139[4],
     _aEs_=include$139[5],
     _aEt_=include$139[6],
     _aEu_=include$139[7],
     _aEv_=include$139[8];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$469);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Option_array=
      [0,
       _aEv_,
       _aEr_,
       _aEs_,
       _aEu_,
       _aEp_,
       _aEq_,
       _aEt_,
       _aEo_,
       t_of_sexp$102,
       sexp_of_t$130,
       empty$12,
       create$53,
       init_some,
       init$12,
       length$37,
       get$12,
       get_some_exn,
       is_none$3,
       is_some$3,
       unsafe_get$1,
       unsafe_get_some_exn,
       unsafe_is_some,
       set$17,
       set_some,
       set_none,
       clear$6,
       unsafe_set$1,
       unsafe_set_some,
       unsafe_set_none,
       blit$8,
       blito$6,
       unsafe_blit$5,
       sub$12,
       subo$6,
       copy$6,
       For_testing];
    caml_register_global
     (7563,Core_kernel_Option_array,"Core_kernel__Option_array");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$470);
    caml_call1(Expect_test_collector[4][1],cst_src_deque_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$471,cst$264);
    function create$54(initial_length,never_shrink,param)
     {if(never_shrink)
       var b=never_shrink[1],never_shrink$0=b;
      else
       var never_shrink$0=caml_call1(is_some,initial_length);
      var initial_length$0=caml_call2(value$0,initial_length,7);
      if(initial_length$0 < 0)caml_call3(_R6_,_aEw_,initial_length$0,0);
      var arr_length=initial_length$0 + 1 | 0;
      return [0,
              caml_call1(create$53,arr_length),
              0,
              1,
              0,
              0,
              arr_length,
              never_shrink$0]}
    function _aEx_(param){create$54(_aEy_,0,0);return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_ignore_create_initial_length_0_t,
      0,
      cst_src_deque_ml$0,
      48,
      0,
      60,
      _aEx_);
    function length$38(t){return t[5]}
    function _aEz_(param){return 0 === create$54(0,0,0)[5]?1:0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[4],
      Inline_test_config,
      cst_length_create_0,
      0,
      cst_src_deque_ml$1,
      51,
      0,
      35,
      _aEz_);
    function is_empty$21(t){return 0 === t[5]?1:0}
    function apparent_front_index_when_not_empty(t){return t[4]}
    function apparent_back_index_when_not_empty(t)
     {return (t[4] + t[5] | 0) - 1 | 0}
    function actual_front_index_when_not_empty(t)
     {return t[2] === (t[6] - 1 | 0)?0:t[2] + 1 | 0}
    function actual_back_index_when_not_empty(t)
     {return 0 === t[3]?t[6] - 1 | 0:t[3] - 1 | 0}
    function checked(t,f){return is_empty$21(t)?0:[0,caml_call1(f,t)]}
    function front_index(t)
     {return checked(t,apparent_front_index_when_not_empty)}
    function back_index(t)
     {return checked(t,apparent_back_index_when_not_empty)}
    function foldi$3(t,dir,init,f)
     {if(is_empty$21(t))return init;
      var
       apparent_front=t[4],
       apparent_back=apparent_back_index_when_not_empty(t),
       actual_front=actual_front_index_when_not_empty(t),
       actual_back=actual_back_index_when_not_empty(t);
      function loop(acc,apparent_i,real_i,stop_pos,step)
       {var acc$0=acc,apparent_i$0=apparent_i,real_i$0=real_i;
        for(;;)
         {if(real_i$0 === stop_pos)return [0,acc$0,apparent_i$0];
          var
           real_i$1=real_i$0 + step | 0,
           apparent_i$1=apparent_i$0 + step | 0,
           acc$1=
            caml_call3
             (f,apparent_i$0,acc$0,caml_call2(get_some_exn,t[1],real_i$0)),
           acc$0=acc$1,
           apparent_i$0=apparent_i$1,
           real_i$0=real_i$1;
          continue}}
      if(252818429 <= dir)
       {if(actual_front <= actual_back)
         {var
           match=loop(init,apparent_back,actual_back,actual_front - 1 | 0,-1),
           acc=match[1];
          return acc}
        var
         match$0=loop(init,apparent_back,actual_back,-1,-1),
         apparent_i=match$0[2],
         acc$0=match$0[1],
         match$1=loop(acc$0,apparent_i,t[6] - 1 | 0,actual_front - 1 | 0,-1),
         acc$1=match$1[1];
        return acc$1}
      if(actual_front <= actual_back)
       {var
         match$2=loop(init,apparent_front,actual_front,actual_back + 1 | 0,1),
         acc$2=match$2[1];
        return acc$2}
      var
       match$3=loop(init,apparent_front,actual_front,t[6],1),
       apparent_i$0=match$3[2],
       acc$3=match$3[1],
       match$4=loop(acc$3,apparent_i$0,0,actual_back + 1 | 0,1),
       acc$4=match$4[1];
      return acc$4}
    function fold$23(t,dir,init,f)
     {return foldi$3
              (t,dir,init,function(param,acc,v){return caml_call2(f,acc,v)})}
    function iteri$9(t,dir,f)
     {return foldi$3(t,dir,0,function(i,param,v){return caml_call2(f,i,v)})}
    function iter$30(t,dir,f)
     {return foldi$3(t,dir,0,function(param,_a6V_,v){return caml_call1(f,v)})}
    function fold$24(t,init,f){return fold$23(t,250975701,init,f)}
    function foldi$4(t,init,f){return foldi$3(t,250975701,init,f)}
    function iteri$10(t,f){return iteri$9(t,250975701,f)}
    function iteri_internal(t,f)
     {var _a6T_=1 - is_empty$21(t);
      if(_a6T_)
       {var
         actual_front=actual_front_index_when_not_empty(t),
         actual_back=actual_back_index_when_not_empty(t),
         loop=
          function(real_i,stop_pos)
           {var real_i$0=real_i;
            for(;;)
             {var _a6U_=real_i$0 < stop_pos?1:0;
              if(_a6U_)
               {caml_call2(f,t[1],real_i$0);
                var real_i$1=real_i$0 + 1 | 0,real_i$0=real_i$1;
                continue}
              return _a6U_}};
        return actual_front <= actual_back
                ?loop(actual_front,actual_back + 1 | 0)
                :(loop(actual_front,t[6]),loop(0,actual_back + 1 | 0))}
      return _a6T_}
    function iter$31(t,f)
     {return iteri_internal
              (t,
               function(arr,i)
                {return caml_call1(f,caml_call2(get_some_exn,arr,i))})}
    function clear$7(t)
     {if(t[7])
       iteri_internal(t,unsafe_set_none);
      else
       t[1] = caml_call1(create$53,8);
      t[2] = 0;
      t[3] = 1;
      t[5] = 0;
      t[6] = caml_call1(length$37,t[1]);
      return 0}
    var
     iter$32=[0,-198771759,iter$31],
     C$3=caml_call1(include$9[17],[0,fold$24,iter$32]),
     _aEA_=C$3[10],
     _aEB_=C$3[11],
     _aEC_=C$3[8],
     _aED_=C$3[1],
     _aEE_=C$3[9],
     _aEF_=C$3[13],
     _aEG_=C$3[12],
     _aEH_=C$3[14],
     _aEI_=C$3[16],
     _aEJ_=C$3[17],
     _aEK_=C$3[6],
     _aEL_=C$3[7];
    function blit$9(new_arr,t)
     {if(is_empty$21(t))throw [0,Assert_failure,_aEM_];
      var
       actual_front=actual_front_index_when_not_empty(t),
       actual_back=actual_back_index_when_not_empty(t),
       old_arr=t[1];
      if(actual_front <= actual_back)
       caml_call5(blit$8,old_arr,actual_front,new_arr,0,t[5]);
      else
       {var break_pos=caml_call1(length$37,old_arr) - actual_front | 0;
        caml_call5(blit$8,old_arr,actual_front,new_arr,0,break_pos);
        caml_call5(blit$8,old_arr,0,new_arr,break_pos,actual_back + 1 | 0)}
      t[3] = t[5];
      t[1] = new_arr;
      t[6] = caml_call1(length$37,new_arr);
      t[2] = caml_call1(length$37,new_arr) - 1 | 0;
      if(t[3] < t[2])return 0;
      throw [0,Assert_failure,_aEN_]}
    function maybe_shrink_underlying(t)
     {var _a6Q_=1 - t[7];
      if(_a6Q_)
       var _a6R_=10 < t[6]?1:0,_a6S_=_a6R_?t[5] < (t[6] / 3 | 0)?1:0:_a6R_;
      else
       var _a6S_=_a6Q_;
      if(_a6S_)
       {var new_arr=caml_call1(create$53,t[6] / 2 | 0);
        return blit$9(new_arr,t)}
      return _a6S_}
    function grow_underlying(t)
     {var new_arr=caml_call1(create$53,t[6] * 2 | 0);return blit$9(new_arr,t)}
    function enqueue_back(t,v)
     {if(t[2] === t[3])grow_underlying(t);
      caml_call3(set_some,t[1],t[3],v);
      var _a6P_=t[3] === (t[6] - 1 | 0)?0:t[3] + 1 | 0;
      t[3] = _a6P_;
      t[5] = t[5] + 1 | 0;
      return 0}
    function enqueue_front(t,v)
     {if(t[2] === t[3])grow_underlying(t);
      caml_call3(set_some,t[1],t[2],v);
      var _a6O_=0 === t[2]?t[6] - 1 | 0:t[2] - 1 | 0;
      t[2] = _a6O_;
      t[4] = t[4] - 1 | 0;
      t[5] = t[5] + 1 | 0;
      return 0}
    function enqueue$1(t,back_or_front,v)
     {return 109975721 <= back_or_front?enqueue_front(t,v):enqueue_back(t,v)}
    function peek_front_nonempty(t)
     {var _a6N_=actual_front_index_when_not_empty(t);
      return caml_call2(get_some_exn,t[1],_a6N_)}
    function peek_front_exn(t)
     {return is_empty$21(t)
              ?caml_call1
                (failwith,cst_Deque_peek_front_exn_passed_an_empty_queue)
              :peek_front_nonempty(t)}
    function peek_front(t){return is_empty$21(t)?0:[0,peek_front_nonempty(t)]}
    function peek_back_nonempty(t)
     {var _a6M_=actual_back_index_when_not_empty(t);
      return caml_call2(get_some_exn,t[1],_a6M_)}
    function peek_back_exn(t)
     {return is_empty$21(t)
              ?caml_call1
                (failwith,cst_Deque_peek_back_exn_passed_an_empty_queue)
              :peek_back_nonempty(t)}
    function peek_back(t){return is_empty$21(t)?0:[0,peek_back_nonempty(t)]}
    function peek$0(t,back_or_front)
     {return 109975721 <= back_or_front?peek_front(t):peek_back(t)}
    function dequeue_front_nonempty(t)
     {var
       i=actual_front_index_when_not_empty(t),
       res=caml_call2(get_some_exn,t[1],i);
      caml_call2(set_none,t[1],i);
      t[2] = i;
      t[4] = t[4] + 1 | 0;
      t[5] = t[5] - 1 | 0;
      maybe_shrink_underlying(t);
      return res}
    function dequeue_front_exn(t)
     {return is_empty$21(t)
              ?caml_call1
                (failwith,cst_Deque_dequeue_front_exn_passed_an_empty_queue)
              :dequeue_front_nonempty(t)}
    function dequeue_front(t)
     {return is_empty$21(t)?0:[0,dequeue_front_nonempty(t)]}
    function dequeue_back_nonempty(t)
     {var
       i=actual_back_index_when_not_empty(t),
       res=caml_call2(get_some_exn,t[1],i);
      caml_call2(set_none,t[1],i);
      t[3] = i;
      t[5] = t[5] - 1 | 0;
      maybe_shrink_underlying(t);
      return res}
    function dequeue_back_exn(t)
     {return is_empty$21(t)
              ?caml_call1
                (failwith,cst_Deque_dequeue_back_exn_passed_an_empty_queue)
              :dequeue_back_nonempty(t)}
    function dequeue_back(t)
     {return is_empty$21(t)?0:[0,dequeue_back_nonempty(t)]}
    function dequeue_exn$1(t,back_or_front)
     {return 109975721 <= back_or_front
              ?dequeue_front_exn(t)
              :dequeue_back_exn(t)}
    function dequeue$0(t,back_or_front)
     {return 109975721 <= back_or_front?dequeue_front(t):dequeue_back(t)}
    function drop_gen(opt,dequeue,t)
     {if(opt)var sth=opt[1],n=sth;else var n=1;
      if(n < 0)caml_call3(_R6_,_aEO_,n,0);
      var n$0=n;
      for(;;)
       {var _a6K_=0 < n$0?1:0;
        if(_a6K_)
         {var match=caml_call1(dequeue,t);
          if(match){var n$1=n$0 - 1 | 0,n$0=n$1;continue}
          var _a6L_=0}
        else
         var _a6L_=_a6K_;
        return _a6L_}}
    function drop_front(n,t){return drop_gen(n,dequeue_front,t)}
    function drop_back(n,t){return drop_gen(n,dequeue_back,t)}
    function drop$1(n,t,back_or_front)
     {return 109975721 <= back_or_front?drop_front(n,t):drop_back(n,t)}
    function assert_not_empty(t,name)
     {var _a6J_=is_empty$21(t);
      return _a6J_?caml_call3(_R5_,_aEP_,name,0):_a6J_}
    function true_index_exn(t,i)
     {var
       i_from_zero=i - t[4] | 0,
       _a6H_=i_from_zero < 0?1:0,
       _a6I_=_a6H_ || (t[5] <= i_from_zero?1:0);
      if(_a6I_)
       {assert_not_empty(t,cst_Deque_true_index_exn);
        var
         apparent_front=t[4],
         apparent_back=apparent_back_index_when_not_empty(t);
        caml_call5(_R6_,_aEQ_,i,apparent_front,apparent_back,0)}
      var true_i=(t[2] + 1 | 0) + i_from_zero | 0;
      return t[6] <= true_i?true_i - t[6] | 0:true_i}
    function get$13(t,i)
     {var _a6G_=true_index_exn(t,i);
      return caml_call2(get_some_exn,t[1],_a6G_)}
    function get_opt(t,i)
     {try {var _a6E_=[0,get$13(t,i)];return _a6E_}catch(_a6F_){return 0}}
    function set_exn(t,i,v)
     {var _a6D_=true_index_exn(t,i);return caml_call3(set_some,t[1],_a6D_,v)}
    function to_array$13(t)
     {var match=peek_front(t);
      if(match)
       {var front=match[1],arr=caml_call2(create$0,t[5],front);
        fold$24
         (t,
          0,
          function(i,v){caml_check_bound(arr,i)[i + 1] = v;return i + 1 | 0});
        return arr}
      return [0]}
    function of_array$9(arr)
     {var t=create$54([0,caml_call1(length$1,arr) + 1 | 0],0,0);
      caml_call2(iter$0,arr,function(v){return enqueue_back(t,v)});
      return t}
    var
     _aER_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$91),
     _aES_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_deque_ml_449_17),
     _aET_=caml_call2(Bin_prot_Shape[15],_aES_,_aER_),
     _aEU_=[0,caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$92),0],
     _aEV_=
      [0,
       [0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_el$15),_aEU_,_aET_],
       0],
     _aEW_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_deque_ml_449_4),
     group$119=caml_call2(Bin_prot_Shape[6],_aEW_,_aEV_);
    function bin_shape_el$3(a)
     {var _a6C_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_el$16);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$119,_a6C_),[0,a,0])}
    function bin_size_el$3(size_of_a){return size_of_a}
    function bin_write_el$3(write_a){return write_a}
    function bin_read_el$3(of_a){return of_a}
    var
     caller_identity$3=
      caml_call1
       (Bin_shape_lib_Bin_shape[5][1],
        cst_34c1e9ca_4992_11e6_a686_8b4bd4f87796);
    function iter$33(t,f){return iter$31(t,f)}
    function init$13(len,next)
     {var t=create$54([0,len],0,0),_a6A_=len - 1 | 0,_a6z_=0;
      if(! (_a6A_ < 0))
       {var i=_a6z_;
        for(;;)
         {var x=caml_call1(next,0);
          enqueue_back(t,x);
          var _a6B_=i + 1 | 0;
          if(_a6A_ !== i){var i=_a6B_;continue}
          break}}
      return t}
    var
     include$140=
      caml_call1
       (Bin_prot_Utils[12],
        [0,
         caller_identity$3,
         module_name$14,
         length$38,
         iter$33,
         init$13,
         bin_size_el$3,
         bin_write_el$3,
         bin_read_el$3,
         bin_shape_el$3]),
     bin_shape_t$98=include$140[1],
     bin_size_t$72=include$140[2],
     bin_write_t$73=include$140[3],
     bin_read_t$143=include$140[4],
     bin_read_t$144=include$140[5],
     bin_writer_t$88=include$140[6],
     bin_reader_t$88=include$140[7],
     bin_t$88=include$140[8];
    function t_of_sexp$103(f,sexp){return of_array$9(caml_call2(_iK_,f,sexp))}
    function sexp_of_t$131(f,t){return caml_call2(_iJ_,f,to_array$13(t))}
    function back_index_exn(t)
     {assert_not_empty(t,cst_Deque_back_index_exn);
      return apparent_back_index_when_not_empty(t)}
    function front_index_exn(t)
     {assert_not_empty(t,cst_Deque_front_index_exn);return t[4]}
    function get$14(t,i){return get$13(t,front_index_exn(t) + i | 0)}
    var
     For_test$0=[0,of_array$9],
     Binary_searchable=
      caml_call1
       (Base_for_tests_Test_binary_searchable[4],
        [0,get$14,length$38,For_test$0]);
    function binary_search$0(pos,len,t,compare,how,v)
     {if(pos)var pos$0=pos[1],pos$1=[0,pos$0 - t[4] | 0];else var pos$1=0;
      var match=caml_call6(Binary_searchable[1],pos$1,len,t,compare,how,v);
      if(match)
       {var untranslated_i=match[1];return [0,t[4] + untranslated_i | 0]}
      return 0}
    function binary_search_segmented$0(pos,len,t,segment_of,how)
     {if(pos)var pos$0=pos[1],pos$1=[0,pos$0 - t[4] | 0];else var pos$1=0;
      var match=caml_call5(Binary_searchable[2],pos$1,len,t,segment_of,how);
      if(match)
       {var untranslated_i=match[1];return [0,t[4] + untranslated_i | 0]}
      return 0}
    function _aEX_(param)
     {function binary_search(_a6w_,_a6v_,_a6u_)
       {return function(_a6x_,_a6y_)
         {return binary_search$0(_a6w_,_a6v_,_a6u_,compare$30,_a6x_,_a6y_)}}
      var t=of_array$9([0,1,2,3,4]);
      function _a6j_(param)
       {return caml_equal
                (caml_call2(binary_search(0,0,t),-1056898635,2),_aEY_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_binary_search_t_First_equal_to_2_Some_1,
        0,
        cst_src_deque_ml$2,
        522,
        4,
        66,
        _a6j_);
      function _a6k_(param)
       {return 0 === caml_call2(binary_search(0,0,t),-1056898635,5)?1:0}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_binary_search_t_First_equal_to_5_None,
        0,
        cst_src_deque_ml$3,
        523,
        4,
        64,
        _a6k_);
      function _a6l_(param)
       {return 0 === caml_call2(binary_search(0,0,t),-1056898635,0)?1:0}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_binary_search_t_First_equal_to_0_None,
        0,
        cst_src_deque_ml$4,
        524,
        4,
        64,
        _a6l_);
      function _a6m_(param)
       {return 0 === caml_call2(binary_search(_aEZ_,0,t),-1056898635,2)?1:0}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_binary_search_t_pos_2_First_equal_to_2_None,
        0,
        cst_src_deque_ml$5,
        525,
        4,
        64,
        _a6m_);
      function _a6n_(param)
       {return caml_equal
                (caml_call2(binary_search(_aE1_,0,t),-1056898635,3),_aE0_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_binary_search_t_pos_2_First_equal_to_3,
        0,
        cst_src_deque_ml$6,
        526,
        4,
        66,
        _a6n_);
      dequeue_front(t);
      dequeue_front(t);
      function _a6o_(param)
       {return 0 === caml_call2(binary_search(0,0,t),-1056898635,2)?1:0}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_binary_search_t_First_equal_to_2_None,
        0,
        cst_src_deque_ml$7,
        529,
        4,
        64,
        _a6o_);
      function _a6p_(param)
       {return caml_equal
                (caml_call2(binary_search(0,0,t),-1056898635,3),_aE2_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_binary_search_t_First_equal_to_3_Some_2,
        0,
        cst_src_deque_ml$8,
        530,
        4,
        66,
        _a6p_);
      function _a6q_(param)
       {return 0 === caml_call2(binary_search(0,0,t),-1056898635,5)?1:0}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_binary_search_t_First_equal_to_5_None$0,
        0,
        cst_src_deque_ml$9,
        531,
        4,
        64,
        _a6q_);
      function _a6r_(param)
       {return 0 === caml_call2(binary_search(0,0,t),-1056898635,0)?1:0}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_binary_search_t_First_equal_to_0_None$0,
        0,
        cst_src_deque_ml$10,
        532,
        4,
        64,
        _a6r_);
      function _a6s_(param)
       {return 0 === caml_call2(binary_search(_aE3_,0,t),-1056898635,2)?1:0}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_binary_search_t_pos_2_First_equal_to_2_None$0,
        0,
        cst_src_deque_ml$11,
        533,
        4,
        64,
        _a6s_);
      function _a6t_(param)
       {return caml_equal
                (caml_call2(binary_search(_aE5_,0,t),-1056898635,3),_aE4_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_binary_search_t_pos_2_First_equal_to_3$0,
        0,
        cst_src_deque_ml$12,
        534,
        4,
        66,
        _a6t_);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst$265,
      0,
      cst_src_deque_ml$13,
      518,
      0,
      918,
      _aEX_);
    function _aE6_(param)
     {function _a5W_(param)
       {var q=create$54(0,0,0);
        function bin_alpha(param){throw [0,Assert_failure,_aE7_]}
        var pos_ref=[0,0];
        if(caml_call2(_xv_,q[5],0))
         {var bigstring=create$18(0,caml_call2(bin_size_t$72,bin_alpha,q));
          caml_call4(bin_write_t$73,bin_alpha,bigstring,0,q);
          var q$0=caml_call3(bin_read_t$143,bin_alpha,bigstring,pos_ref);
          if(caml_call2(_xv_,q$0[5],0))return 0;
          throw [0,Assert_failure,_aE8_]}
        throw [0,Assert_failure,_aE9_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_assert_Int_length_q_0_let_bigstring,
        0,
        cst_src_deque_ml$14,
        539,
        4,
        373,
        _a5W_);
      function fold(t,dir,init,f)
       {return 252818429 <= dir
                ?fold_right$9
                  (t,init,function(x,acc){return caml_call2(f,acc,x)})
                :caml_call3(_ua_,t,init,f)}
      function enqueue(param,back_or_front,v)
       {var
         t_b=param[2],
         t_a=param[1],
         start_a=to_array$13(t_a),
         start_b=caml_call1(to_array$8,t_b);
        enqueue$1(t_a,back_or_front,v);
        if(109975721 <= back_or_front)add$11(t_b,v);else insert_last(t_b,v);
        var
         end_a=to_array$13(t_a),
         end_b=caml_call1(to_array$8,t_b),
         _a6f_=caml_notequal(end_a,end_b);
        if(_a6f_)
         {var
           _a6g_=caml_call1(_PM_,caml_call2(_iJ_,sexp_of_t$43,end_b)),
           _a6h_=caml_call1(_PM_,caml_call2(_iJ_,sexp_of_t$43,start_b)),
           _a6i_=caml_call1(_PM_,caml_call2(_iJ_,sexp_of_t$43,end_a));
          return caml_call6
                  (_R5_,
                   _aE__,
                   caml_call1(_PM_,caml_call2(_iJ_,sexp_of_t$43,start_a)),
                   _a6i_,
                   _a6h_,
                   _a6g_,
                   0)}
        return _a6f_}
      function dequeue(param,back_or_front)
       {var
         t_b=param[2],
         t_a=param[1],
         start_a=to_array$13(t_a),
         start_b=caml_call1(to_array$8,t_b),
         b=109975721 <= back_or_front?remove_one(t_b):remove_last(t_b),
         a=dequeue$0(t_a,back_or_front),
         end_a=to_array$13(t_a),
         end_b=caml_call1(to_array$8,t_b),
         _a5__=caml_notequal(a,b),
         _a5$_=_a5__ || caml_notequal(end_a,end_b);
        if(_a5$_)
         {var
           _a6a_=caml_call1(_PM_,caml_call2(_iJ_,sexp_of_t$43,end_b)),
           _a6b_=caml_call1(_PM_,caml_call2(_iJ_,sexp_of_t$43,start_b)),
           _a6c_=caml_call2(value$0,caml_call2(map$23,b,_xy_),cst_None$4),
           _a6d_=caml_call1(_PM_,caml_call2(_iJ_,sexp_of_t$43,end_a)),
           _a6e_=caml_call1(_PM_,caml_call2(_iJ_,sexp_of_t$43,start_a));
          return caml_call8
                  (_R5_,
                   _aE$_,
                   caml_call2(value$0,caml_call2(map$23,a,_xy_),cst_None$5),
                   _a6e_,
                   _a6d_,
                   _a6c_,
                   _a6b_,
                   _a6a_,
                   0)}
        return _a5$_}
      function this_to_string(this_t)
       {var _a59_=to_array$13(this_t);
        return caml_call1
                (_PM_,caml_call1(caml_call1(_iJ_,sexp_of_t$43),_a59_))}
      function that_to_string(that_t)
       {var _a58_=caml_call1(to_array$8,that_t);
        return caml_call1
                (_PM_,caml_call1(caml_call1(_iJ_,sexp_of_t$43),_a58_))}
      function fold_check(param,dir)
       {var t_b=param[2],t_a=param[1];
        function make_list(fold,t)
         {return caml_call4(fold,t,dir,0,function(acc,x){return [0,x,acc]})}
        var
         this_l=make_list(fold$23,t_a),
         that_l=make_list(fold,t_b),
         _a54_=caml_notequal(this_l,that_l);
        if(_a54_)
         {var
           _a55_=that_to_string(t_b),
           _a56_=
            caml_call1
             (_PM_,caml_call1(caml_call1(sexp_of_t$25,sexp_of_t$43),that_l)),
           _a57_=this_to_string(t_a);
          return caml_call6
                  (_R5_,
                   _aFa_,
                   caml_call1
                    (_PM_,
                     caml_call1(caml_call1(sexp_of_t$25,sexp_of_t$43),this_l)),
                   _a57_,
                   _a56_,
                   _a55_,
                   0)}
        return _a54_}
      function _a5X_(param)
       {var t_a=create$54(0,0,0),t_b$0=create$12(0),t=[0,t_a,t_b$0],ops=1e3;
        for(;;)
         {if(0 === ops)
           {var
             t_b$3=t[2],
             t_a$3=t[1],
             arr_a=to_array$13(t_a$3),
             arr_b=caml_call1(to_array$8,t_b$3),
             _a52_=caml_notequal(arr_a,arr_b);
            if(_a52_)
             {var _a53_=caml_call1(_PM_,caml_call2(_iJ_,sexp_of_t$43,arr_b));
              return caml_call4
                      (_R5_,
                       _aFd_,
                       caml_call1(_PM_,caml_call2(_iJ_,sexp_of_t$43,arr_a)),
                       _a53_,
                       0)}
            return _a52_}
          var r=caml_call1(Base_Random[5],110);
          if(20 <= r)
           if(40 <= r)
            if(50 <= r)
             if(60 <= r)
              if(70 <= r)
               if(80 <= r)
                if(90 <= r)
                 if(100 <= r)
                  {var
                    t_b$2=t[2],
                    t_a$2=t[1],
                    this_len=t_a$2[5],
                    that_len=length$17(t_b$2);
                   if(this_len !== that_len)
                    {var _a51_=that_to_string(t_b$2);
                     caml_call6
                      (_R5_,_aFc_,this_len,this_to_string(t_a$2),that_len,_a51_,0)}}
                 else
                  {var
                    t_b$1=t[2],
                    t_a$1=t[1],
                    make_rev_list=
                     function(iter,t)
                      {var r=[0,0];
                       caml_call2(iter,t,function(x){r[1] = [0,x,r[1]];return 0});
                       return r[1]},
                    this_l=make_rev_list(iter$31,t_a$1),
                    that_l=make_rev_list(iter$17,t_b$1);
                   if(caml_notequal(this_l,that_l))
                    {var
                      _a5Y_=that_to_string(t_b$1),
                      _a5Z_=
                       caml_call1
                        (_PM_,
                         caml_call1(caml_call1(sexp_of_t$25,sexp_of_t$43),that_l)),
                      _a50_=this_to_string(t_a$1);
                     caml_call6
                      (_R5_,
                       _aFb_,
                       caml_call1
                        (_PM_,
                         caml_call1(caml_call1(sexp_of_t$25,sexp_of_t$43),this_l)),
                       _a50_,
                       _a5Z_,
                       _a5Y_,
                       0)}}
                else
                 fold_check(t,252818429);
               else
                fold_check(t,250975701);
              else
               {var t_b=t[2],t_a$0=t[1];clear$7(t_a$0);clear$1(t_b)}
             else
              dequeue(t,-1055860185);
            else
             dequeue(t,109975721);
           else
            enqueue(t,-1055860185,caml_call1(Base_Random[5],1e4));
          else
           enqueue(t,109975721,caml_call1(Base_Random[5],1e4));
          var ops$0=ops - 1 | 0,ops=ops$0;
          continue}}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test$3,
        0,
        cst_src_deque_ml$15,
        740,
        4,
        29,
        _a5X_);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst$266,
      0,
      cst_src_deque_ml$16,
      537,
      0,
      6849,
      _aE6_);
    if(Ppx_bench_lib_Benchmark_accumulator[3])
     {var
       _aFe_=
        function(param)
         {if(Ppx_bench_lib_Benchmark_accumulator[3])
           {var
             f=
              function(param)
               {var t=create$54(0,0,0);
                return function(param)
                 {try
                   {var _a5U_=assert_not_empty(t,cst_Queue_dequeue_front);
                    return _a5U_}
                  catch(_a5V_){return 0}}};
            caml_call8
             (Ppx_bench_lib_Benchmark_accumulator[5],
              cst_assert_not_empty,
              cst_let_t_create_in_fun_try_assert_not_empty_t_Queue_dequeue_front_with,
              cst_src_deque_ml$18,
              cst_src_deque_ml$17,
              748,
              4,
              139,
              [0,f])}
          return 0};
      caml_call8
       (Ppx_bench_lib_Benchmark_accumulator[6],
        cst_Deque,
        cst$267,
        cst_src_deque_ml$20,
        cst_src_deque_ml$19,
        743,
        0,
        312,
        _aFe_)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$472);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Deque=
      [0,
       bin_t$88,
       bin_read_t$143,
       bin_read_t$144,
       bin_reader_t$88,
       bin_size_t$72,
       bin_write_t$73,
       bin_writer_t$88,
       bin_shape_t$98,
       t_of_sexp$103,
       sexp_of_t$131,
       binary_search$0,
       binary_search_segmented$0,
       _aED_,
       length$38,
       is_empty$21,
       iter$31,
       fold$24,
       _aEK_,
       _aEL_,
       _aEC_,
       _aEE_,
       _aEA_,
       _aEB_,
       _aEG_,
       _aEF_,
       _aEH_,
       to_array$13,
       _aEI_,
       _aEJ_,
       create$54,
       front_index,
       front_index_exn,
       back_index,
       back_index_exn,
       get_opt,
       get$13,
       peek$0,
       peek_front,
       peek_front_exn,
       peek_back,
       peek_back_exn,
       set_exn,
       iter$30,
       iteri$10,
       iteri$9,
       fold$23,
       foldi$4,
       foldi$3,
       enqueue$1,
       enqueue_front,
       enqueue_back,
       clear$7,
       drop$1,
       drop_front,
       drop_back,
       dequeue$0,
       dequeue_exn$1,
       dequeue_front,
       dequeue_front_exn,
       dequeue_back,
       dequeue_back_exn];
    caml_register_global(7564,Core_kernel_Deque,"Core_kernel__Deque");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$473);
    caml_call1(Expect_test_collector[4][1],cst_src_deriving_hash_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$474,cst$268);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$475);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Deriving_hash_intf=[0];
    caml_register_global
     (7565,Core_kernel_Deriving_hash_intf,"Core_kernel__Deriving_hash_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$476);
    caml_call1(Expect_test_collector[4][1],cst_src_deriving_hash_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$477,cst$269);
    function Of_deriving_hash(_a5S_,_a5R_)
     {function hash_fold_t(state,t)
       {var _a5T_=caml_call1(_a5R_[1],t);
        return caml_call2(_a5S_[1],state,_a5T_)}
      var hash=caml_call1(Base_Hash[12],hash_fold_t);
      return [0,hash_fold_t,hash]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$478);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Deriving_hash=[0,Of_deriving_hash];
    caml_register_global
     (7566,Core_kernel_Deriving_hash,"Core_kernel__Deriving_hash");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$479);
    caml_call1(Expect_test_collector[4][1],cst_src_ephemeron_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$480,cst$270);
    var _aFf_=Stdlib_ephemeron[1][1];
    function set_key(t,param)
     {if(param){var v=param[1];return caml_call2(Stdlib_ephemeron[1][4],t,v)}
      return caml_call1(Stdlib_ephemeron[1][5],t)}
    var _aFg_=Stdlib_ephemeron[1][2];
    function set_data(t,param)
     {if(param){var v=param[1];return caml_call2(Stdlib_ephemeron[1][10],t,v)}
      return caml_call1(Stdlib_ephemeron[1][11],t)}
    var _aFh_=Stdlib_ephemeron[1][8];
    function is_key_some(t){return caml_call1(Stdlib_ephemeron[1][6],t)}
    function is_key_none(t){return 1 - is_key_some(t)}
    function is_data_some(t){return caml_call1(Stdlib_ephemeron[1][12],t)}
    function is_data_none(t){return 1 - is_data_some(t)}
    function sexp_of_t$132(sexp_of_a,sexp_of_b,t)
     {var
       v1=caml_call1(_aFh_,t),
       v0=caml_call1(_aFg_,t),
       v0$0=
        caml_call2(sexp_of_t$39,caml_call1(Base_Heap_block[1],sexp_of_a),v0),
       v1$0=
        caml_call2(sexp_of_t$39,caml_call1(Base_Heap_block[1],sexp_of_b),v1);
      return [1,[0,v0$0,[0,v1$0,0]]]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$481);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Ephemeron=
      [0,
       sexp_of_t$132,
       _aFf_,
       set_key,
       _aFg_,
       set_data,
       _aFh_,
       is_key_some,
       is_key_none,
       is_data_some,
       is_data_none];
    caml_register_global(7568,Core_kernel_Ephemeron,"Core_kernel__Ephemeron");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$482);
    caml_call1(Expect_test_collector[4][1],cst_src_fdeque_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$483,cst$271);
    var Empty=[248,cst_Core_kernel_Fdeque_Empty,caml_fresh_oo_id(0)];
    function _aFi_(param)
     {if(param === Empty)return _aFj_;throw [0,Assert_failure,_aFk_]}
    caml_call3(Sexplib0_Sexp_conv[51][2],0,Empty,_aFi_);
    function length$39(t){return t[3]}
    function is_empty$22(t){return 0 === t[3]?1:0}
    function invariant$22(f,t)
     {var n_front=caml_call1(length$4,t[1]),n_back=caml_call1(length$4,t[2]);
      if(t[3] === (n_front + n_back | 0))
       {if(2 <= t[3])
         {var switch$0=0 === n_front?1:0 === n_back?1:0;
          if(switch$0)throw [0,Assert_failure,_aFl_]}
        caml_call2(iter$2,t[1],f);
        return caml_call2(iter$2,t[2],f)}
      throw [0,Assert_failure,_aFm_]}
    function make$1(length,front,back)
     {if(front)
       if(front[2])
        {if(! back)
          {var
            match=caml_call2(split_n$0,front,length / 2 | 0),
            rev_back=match[2],
            front$0=match[1];
           return [0,front$0,caml_call1(rev,rev_back),length]}
         var switch$0=0}
       else
        var switch$0=back?0:1;
      else
       if(back)
        if(back[2])
         {var
           match$0=caml_call2(split_n$0,back,length / 2 | 0),
           rev_front=match$0[2],
           back$0=match$0[1];
          return [0,caml_call1(rev,rev_front),back$0,length]}
      return [0,front,back,length]}
    function enqueue_top(t,x){return make$1(t[3] + 1 | 0,[0,x,t[1]],t[2])}
    function enqueue$2(t,x){return make$1(t[3] + 1 | 0,t[1],[0,x,t[2]])}
    function raise_front_invariant(param)
     {throw [0,Bug,cst_Fdeque_front_0_back_2]}
    function top_exn$0(t)
     {var _a5O_=t[1];
      if(_a5O_){var x=_a5O_[1];return x}
      var _a5P_=t[2];
      if(_a5P_)
       {var _a5Q_=_a5P_[1];return _a5P_[2]?raise_front_invariant(0):_a5Q_}
      throw Empty}
    function bot_exn(t)
     {var _a5L_=t[2];
      if(_a5L_){var x=_a5L_[1];return x}
      var _a5M_=t[1];
      if(_a5M_)
       {var _a5N_=_a5M_[1];
        if(_a5M_[2])throw [0,Bug,cst_Fdeque_back_0_front_2];
        return _a5N_}
      throw Empty}
    function discard_exn(t)
     {var _a5J_=t[1];
      if(_a5J_){var xs=_a5J_[2];return make$1(t[3] - 1 | 0,xs,t[2])}
      var _a5K_=t[2];
      if(_a5K_)return _a5K_[2]?raise_front_invariant(0):acc$1;
      throw Empty}
    function drop_back_exn(t)
     {var _a5H_=t[2];
      if(_a5H_){var xs=_a5H_[2];return make$1(t[3] - 1 | 0,t[1],xs)}
      var _a5I_=t[1];
      if(_a5I_)return _a5I_[2]?raise_front_invariant(0):acc$1;
      throw Empty}
    function dequeue_exn$2(t)
     {var _a5G_=discard_exn(t);return [0,top_exn$0(t),_a5G_]}
    function dequeue_back_exn$0(t)
     {var _a5F_=drop_back_exn(t);return [0,bot_exn(t),_a5F_]}
    function optional(f,t)
     {try
       {var x=caml_call1(f,t)}
      catch(_a5E_)
       {_a5E_ = caml_wrap_exception(_a5E_);
        if(_a5E_ === Empty)return 0;
        throw _a5E_}
      return [0,x]}
    function top$0(t){return optional(top_exn$0,t)}
    function bot(t){return optional(bot_exn,t)}
    function drop_front$0(t){return optional(discard_exn,t)}
    function drop_back$0(t){return optional(drop_back_exn,t)}
    function dequeue$1(t){return optional(dequeue_exn$2,t)}
    function dequeue_back$0(t){return optional(dequeue_back_exn$0,t)}
    function enqueue$3(t,side,x)
     {return 109975721 <= side?enqueue_top(t,x):enqueue$2(t,x)}
    function peek$1(t,side){return 109975721 <= side?top$0(t):bot(t)}
    function peek_exn$0(t,side)
     {return 109975721 <= side?top_exn$0(t):bot_exn(t)}
    function drop$2(t,side)
     {return 109975721 <= side?drop_front$0(t):drop_back$0(t)}
    function drop_exn(t,side)
     {return 109975721 <= side?discard_exn(t):drop_back_exn(t)}
    function dequeue$2(t,side)
     {return 109975721 <= side?dequeue$1(t):dequeue_back$0(t)}
    function dequeue_exn$3(t,side)
     {return 109975721 <= side?dequeue_exn$2(t):dequeue_back_exn$0(t)}
    function rev$0(t){return [0,t[2],t[1],t[3]]}
    if(Ppx_bench_lib_Benchmark_accumulator[3])
     {var
       _aFn_=
        function(param)
         {function Make(M)
           {if(Ppx_bench_lib_Benchmark_accumulator[3])
             {var f=function(param,_a5D_){return rev$0(M[1])};
              caml_call8
               (Ppx_bench_lib_Benchmark_accumulator[5],
                cst_rev,
                cst_rev_M_t,
                cst_src_fdeque_ml$0,
                cst_src_fdeque_ml_Make,
                166,
                6,
                31,
                [0,f])}
            if(Ppx_bench_lib_Benchmark_accumulator[3])
             {var f$0=function(param,_a5C_){return enqueue_top(M[1],0)};
              caml_call8
               (Ppx_bench_lib_Benchmark_accumulator[5],
                cst_enqueue_front,
                cst_enqueue_front_M_t_0,
                cst_src_fdeque_ml$1,
                cst_src_fdeque_ml_Make$0,
                168,
                6,
                53,
                [0,f$0])}
            if(Ppx_bench_lib_Benchmark_accumulator[3])
             {var f$1=function(param,_a5B_){return enqueue$2(M[1],0)};
              caml_call8
               (Ppx_bench_lib_Benchmark_accumulator[5],
                cst_enqueue_back,
                cst_enqueue_back_M_t_0,
                cst_src_fdeque_ml$2,
                cst_src_fdeque_ml_Make$1,
                169,
                6,
                53,
                [0,f$1])}
            if(Ppx_bench_lib_Benchmark_accumulator[3])
             {var f$2=function(param,_a5A_){return top$0(M[1])};
              caml_call8
               (Ppx_bench_lib_Benchmark_accumulator[5],
                cst_peek_front,
                cst_peek_front_M_t,
                cst_src_fdeque_ml$3,
                cst_src_fdeque_ml_Make$2,
                171,
                6,
                53,
                [0,f$2])}
            if(Ppx_bench_lib_Benchmark_accumulator[3])
             {var f$3=function(param,_a5z_){return bot(M[1])};
              caml_call8
               (Ppx_bench_lib_Benchmark_accumulator[5],
                cst_peek_back,
                cst_peek_back_M_t,
                cst_src_fdeque_ml$4,
                cst_src_fdeque_ml_Make$3,
                172,
                6,
                53,
                [0,f$3])}
            if(Ppx_bench_lib_Benchmark_accumulator[3])
             {var f$4=function(param,_a5y_){return top_exn$0(M[1])};
              caml_call8
               (Ppx_bench_lib_Benchmark_accumulator[5],
                cst_peek_front_exn,
                cst_peek_front_exn_M_t,
                cst_src_fdeque_ml$5,
                cst_src_fdeque_ml_Make$4,
                173,
                6,
                53,
                [0,f$4])}
            if(Ppx_bench_lib_Benchmark_accumulator[3])
             {var f$5=function(param,_a5x_){return bot_exn(M[1])};
              caml_call8
               (Ppx_bench_lib_Benchmark_accumulator[5],
                cst_peek_back_exn,
                cst_peek_back_exn_M_t,
                cst_src_fdeque_ml$6,
                cst_src_fdeque_ml_Make$5,
                174,
                6,
                53,
                [0,f$5])}
            if(Ppx_bench_lib_Benchmark_accumulator[3])
             {var f$6=function(param,_a5w_){return drop_front$0(M[1])};
              caml_call8
               (Ppx_bench_lib_Benchmark_accumulator[5],
                cst_drop_front,
                cst_drop_front_M_t,
                cst_src_fdeque_ml$7,
                cst_src_fdeque_ml_Make$6,
                176,
                6,
                53,
                [0,f$6])}
            if(Ppx_bench_lib_Benchmark_accumulator[3])
             {var f$7=function(param,_a5v_){return drop_back$0(M[1])};
              caml_call8
               (Ppx_bench_lib_Benchmark_accumulator[5],
                cst_drop_back,
                cst_drop_back_M_t,
                cst_src_fdeque_ml$8,
                cst_src_fdeque_ml_Make$7,
                177,
                6,
                53,
                [0,f$7])}
            if(Ppx_bench_lib_Benchmark_accumulator[3])
             {var f$8=function(param,_a5u_){return discard_exn(M[1])};
              caml_call8
               (Ppx_bench_lib_Benchmark_accumulator[5],
                cst_drop_front_exn,
                cst_drop_front_exn_M_t,
                cst_src_fdeque_ml$9,
                cst_src_fdeque_ml_Make$8,
                178,
                6,
                53,
                [0,f$8])}
            if(Ppx_bench_lib_Benchmark_accumulator[3])
             {var f$9=function(param,_a5t_){return drop_back_exn(M[1])};
              caml_call8
               (Ppx_bench_lib_Benchmark_accumulator[5],
                cst_drop_back_exn,
                cst_drop_back_exn_M_t,
                cst_src_fdeque_ml$10,
                cst_src_fdeque_ml_Make$9,
                179,
                6,
                53,
                [0,f$9])}
            if(Ppx_bench_lib_Benchmark_accumulator[3])
             {var f$10=function(param,_a5s_){return dequeue$1(M[1])};
              caml_call8
               (Ppx_bench_lib_Benchmark_accumulator[5],
                cst_dequeue_front,
                cst_dequeue_front_M_t,
                cst_src_fdeque_ml$11,
                cst_src_fdeque_ml_Make$10,
                181,
                6,
                59,
                [0,f$10])}
            if(Ppx_bench_lib_Benchmark_accumulator[3])
             {var f$11=function(param,_a5r_){return dequeue_back$0(M[1])};
              caml_call8
               (Ppx_bench_lib_Benchmark_accumulator[5],
                cst_dequeue_back,
                cst_dequeue_back_M_t,
                cst_src_fdeque_ml$12,
                cst_src_fdeque_ml_Make$11,
                182,
                6,
                59,
                [0,f$11])}
            if(Ppx_bench_lib_Benchmark_accumulator[3])
             {var f$12=function(param,_a5q_){return dequeue_exn$2(M[1])};
              caml_call8
               (Ppx_bench_lib_Benchmark_accumulator[5],
                cst_dequeue_front_exn,
                cst_dequeue_front_exn_M_t,
                cst_src_fdeque_ml$13,
                cst_src_fdeque_ml_Make$12,
                183,
                6,
                59,
                [0,f$12])}
            if(Ppx_bench_lib_Benchmark_accumulator[3])
             {var f$13=function(param,_a5p_){return dequeue_back_exn$0(M[1])};
              caml_call8
               (Ppx_bench_lib_Benchmark_accumulator[5],
                cst_dequeue_back_exn,
                cst_dequeue_back_exn_M_t,
                cst_src_fdeque_ml$14,
                cst_src_fdeque_ml_Make$13,
                184,
                6,
                59,
                [0,f$13])}
            return [0]}
          function build(front,back)
           {var
             _a5n_=caml_call1(length$4,back),
             length=caml_call1(length$4,front) + _a5n_ | 0,
             t=[0,front,back,length];
            invariant$22(function(_a5o_){return 0},t);
            return t}
          function list(n){return caml_call2(init$1,n,next$1)}
          if(Ppx_bench_lib_Benchmark_accumulator[3])
           {var
             _a5h_=
              function(param)
               {var _a5m_=list(50),t=build(list(50),_a5m_);
                Make([0,t]);
                return 0};
            caml_call8
             (Ppx_bench_lib_Benchmark_accumulator[6],
              cst_balanced$0,
              cst$272,
              cst_src_fdeque_ml$16,
              cst_src_fdeque_ml$15,
              197,
              4,
              96,
              _a5h_)}
          if(Ppx_bench_lib_Benchmark_accumulator[3])
           {var
             _a5i_=
              function(param)
               {var _a5l_=list(1),t=build(list(99),_a5l_);
                Make([0,t]);
                return 0};
            caml_call8
             (Ppx_bench_lib_Benchmark_accumulator[6],
              cst_short_back,
              cst$273,
              cst_src_fdeque_ml$18,
              cst_src_fdeque_ml$17,
              198,
              4,
              96,
              _a5i_)}
          if(Ppx_bench_lib_Benchmark_accumulator[3])
           {var
             _a5j_=
              function(param)
               {var _a5k_=list(99),t=build(list(1),_a5k_);
                Make([0,t]);
                return 0};
            caml_call8
             (Ppx_bench_lib_Benchmark_accumulator[6],
              cst_short_front,
              cst$274,
              cst_src_fdeque_ml$20,
              cst_src_fdeque_ml$19,
              199,
              4,
              96,
              _a5j_)}
          return 0};
      caml_call8
       (Ppx_bench_lib_Benchmark_accumulator[6],
        cst_accessors,
        cst$275,
        cst_src_fdeque_ml$22,
        cst_src_fdeque_ml$21,
        161,
        0,
        1442,
        _aFn_)}
    function to_list$18(t){return caml_call2(rev_append,t[1],t[2])}
    function to_array$14(t){return caml_call1(of_list$1,to_list$18(t))}
    function sum$11(M,t,f)
     {var _a5f_=caml_call3(sum$2,M,t[2],f),_a5g_=caml_call3(sum$2,M,t[1],f);
      return caml_call2(M[4],_a5g_,_a5f_)}
    function count$15(t,f)
     {var _a5e_=caml_call2(count$1,t[2],f);
      return caml_call2(count$1,t[1],f) + _a5e_ | 0}
    function for_all$20(t,f)
     {var _a5d_=caml_call2(for_all$1,t[1],f);
      return _a5d_?caml_call2(for_all$1,t[2],f):_a5d_}
    function exists$20(t,f)
     {var _a5c_=caml_call2(exists$1,t[1],f);
      return _a5c_?_a5c_:caml_call2(exists$1,t[2],f)}
    function mem$19(t,x,equal)
     {var _a5b_=caml_call3(mem$2,t[1],x,equal);
      return _a5b_?_a5b_:caml_call3(mem$2,t[2],x,equal)}
    function iter$34(t,f)
     {caml_call2(iter$2,t[1],f);return caml_call2(iter$2,t[2],f)}
    function fold$25(t,init,f)
     {var init$0=caml_call3(fold$2,t[1],init,f);
      return caml_call3(fold$2,t[2],init$0,f)}
    function fold_result$10(t,init,f)
     {return caml_call4(_hH_,fold$25,init,f,t)}
    function fold_until$10(t,init,f)
     {var _a4$_=caml_call3(_hI_,fold$25,init,f);
      return function(_a5a_){return caml_call2(_a4$_,_a5a_,t)}}
    function find$21(t,f)
     {var some=caml_call2(find$2,t[1],f);
      return some?some:caml_call2(find$2,t[2],f)}
    function find_map$10(t,f)
     {var some=caml_call2(find_map$1,t[1],f);
      return some?some:caml_call2(find_map$1,t[2],f)}
    function max_elt$14(t,compare)
     {var
       match=caml_call2(max_elt$1,t[1],compare),
       match$0=caml_call2(max_elt$1,t[2],compare);
      if(match)
       {if(match$0)
         {var y=match$0[1],x=match[1];
          return 0 <= caml_call2(compare,x,y)?match:match$0}
        var opt=match}
      else
       var opt=match$0;
      return opt}
    function min_elt$18(t,compare)
     {var
       match=caml_call2(min_elt$1,t[1],compare),
       match$0=caml_call2(min_elt$1,t[2],compare);
      if(match)
       {if(match$0)
         {var y=match$0[1],x=match[1];
          return 0 < caml_call2(compare,x,y)?match$0:match}
        var opt=match}
      else
       var opt=match$0;
      return opt}
    function Make_container(F)
     {var to_list=F[1];
      function mem(t,x,equal)
       {return caml_call3(mem$2,caml_call1(to_list,t),x,equal)}
      function iter(t,f){return caml_call2(iter$2,caml_call1(to_list,t),f)}
      function fold(t,init,f)
       {return caml_call3(fold$2,caml_call1(to_list,t),init,f)}
      function exists(t,f)
       {return caml_call2(exists$1,caml_call1(to_list,t),f)}
      function for_all(t,f)
       {return caml_call2(for_all$1,caml_call1(to_list,t),f)}
      function count(t,f){return caml_call2(count$1,caml_call1(to_list,t),f)}
      function sum(m,t,f){return caml_call3(sum$2,m,caml_call1(to_list,t),f)}
      function find(t,f){return caml_call2(find$2,caml_call1(to_list,t),f)}
      function find_map(t,f)
       {return caml_call2(find_map$1,caml_call1(to_list,t),f)}
      function to_array(t)
       {return caml_call1(to_array$1,caml_call1(to_list,t))}
      function min_elt(t,compare)
       {return caml_call2(min_elt$1,caml_call1(to_list,t),compare)}
      function max_elt(t,compare)
       {return caml_call2(max_elt$1,caml_call1(to_list,t),compare)}
      function fold_result(t,init,f){return caml_call4(_hH_,fold,init,f,t)}
      function fold_until(t,init,f)
       {var _a49_=caml_call3(_hI_,fold,init,f);
        return function(_a4__){return caml_call2(_a49_,_a4__,t)}}
      return [0,
              to_list,
              is_empty$22,
              length$39,
              mem,
              iter,
              fold,
              exists,
              for_all,
              count,
              sum,
              find,
              find_map,
              to_array,
              min_elt,
              max_elt,
              fold_result,
              fold_until]}
    function of_list$13(list){return make$1(caml_call1(length$4,list),list,0)}
    function to_list$19(t)
     {var _a48_=caml_call1(rev,t[2]);return caml_call2(_Q5_,t[1],_a48_)}
    function _aFo_(param)
     {var
       got=to_list$19(of_list$13(_aFp_)),
       sexpifier=caml_call1(sexp_of_t$25,sexp_of_t$43),
       equal=0,
       message=0,
       here=0;
      function comparator(a_001,b_002)
       {return caml_call3(compare$19,compare$30,a_001,b_002)}
      return caml_call8
              (Ppx_assert_lib_Runtime[3],
               pos$123,
               sexpifier,
               comparator,
               here,
               message,
               equal,
               expect$32,
               got)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_test_result_int_list_expect_1_2_3,
      0,
      cst_src_fdeque_ml$23,
      291,
      2,
      104,
      _aFo_);
    var
     include$141=Make_container([0,to_list$19]),
     to_list$20=include$141[1],
     is_empty$23=include$141[2],
     length$40=include$141[3],
     mem$20=include$141[4],
     iter$35=include$141[5],
     fold$26=include$141[6],
     exists$21=include$141[7],
     for_all$21=include$141[8],
     count$16=include$141[9],
     sum$12=include$141[10],
     find$22=include$141[11],
     find_map$11=include$141[12],
     to_array$15=include$141[13],
     min_elt$19=include$141[14],
     max_elt$15=include$141[15],
     fold_result$11=include$141[16],
     fold_until$11=include$141[17];
    function to_list$21(t)
     {var _a47_=caml_call1(rev,t[1]);return caml_call2(_Q5_,t[2],_a47_)}
    function of_list$14(list){return make$1(caml_call1(length$4,list),0,list)}
    function _aFq_(param)
     {var
       got=to_list$21(of_list$14(_aFr_)),
       sexpifier=caml_call1(sexp_of_t$25,sexp_of_t$43),
       equal=0,
       message=0,
       here=0;
      function comparator(a_005,b_006)
       {return caml_call3(compare$19,compare$30,a_005,b_006)}
      return caml_call8
              (Ppx_assert_lib_Runtime[3],
               pos$124,
               sexpifier,
               comparator,
               here,
               message,
               equal,
               expect$33,
               got)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_test_result_int_list_expect_1_2_3$0,
      0,
      cst_src_fdeque_ml$24,
      305,
      2,
      104,
      _aFq_);
    var
     include$142=Make_container([0,to_list$21]),
     to_list$22=include$142[1],
     is_empty$24=include$142[2],
     length$41=include$142[3],
     mem$21=include$142[4],
     iter$36=include$142[5],
     fold$27=include$142[6],
     exists$22=include$142[7],
     for_all$22=include$142[8],
     count$17=include$142[9],
     sum$13=include$142[10],
     find$23=include$142[11],
     find_map$12=include$142[12],
     to_array$16=include$142[13],
     min_elt$20=include$142[14],
     max_elt$16=include$142[15],
     fold_result$12=include$142[16],
     fold_until$12=include$142[17];
    function singleton$12(x){return of_list$13([0,x,0])}
    function bind$6(t,f)
     {return caml_call3
              (fold$26,
               t,
               acc$1,
               function(t,elt)
                {return caml_call3(fold$26,caml_call1(f,elt),t,enqueue$2)})}
    var
     map$34=
      [0,
       -198771759,
       function(t,f)
        {var _a45_=t[3],_a46_=caml_call2(map$11,t[2],f);
         return [0,caml_call2(map$11,t[1],f),_a46_,_a45_]}],
     include$143=caml_call1(Base_Monad[1],[0,bind$6,singleton$12,map$34]),
     _aFs_=include$143[1],
     _aFt_=include$143[2],
     _aFu_=include$143[3],
     _aFv_=include$143[4],
     _aFw_=include$143[5],
     _aFx_=include$143[6],
     _aFy_=include$143[7],
     _aFz_=include$143[8],
     _aFA_=include$143[9],
     _aFB_=include$143[10],
     _aFC_=include$143[11],
     _aFD_=include$143[12];
    function _aFE_(param)
     {var
       got=
        caml_call1(to_list$20,caml_call2(_aFv_,of_list$13(_aFF_),of_list$13)),
       sexpifier=caml_call1(sexp_of_t$25,sexp_of_t$43),
       equal=0,
       message=0,
       here=0;
      function comparator(a_009,b_010)
       {return caml_call3(compare$19,compare$30,a_009,b_010)}
      return caml_call8
              (Ppx_assert_lib_Runtime[3],
               pos$125,
               sexpifier,
               comparator,
               here,
               message,
               equal,
               expect$34,
               got)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_test_result_int_list_expect_1_2_3$1,
      0,
      cst_src_fdeque_ml$25,
      334,
      0,
      128,
      _aFE_);
    function _aFG_(param)
     {function _a43_(_a44_){return _a44_ + 1 | 0}
      var
       got=caml_call1(to_list$20,caml_call2(_aFx_,of_list$13(_aFH_),_a43_)),
       sexpifier=caml_call1(sexp_of_t$25,sexp_of_t$43),
       equal=0,
       message=0,
       here=0;
      function comparator(a_013,b_014)
       {return caml_call3(compare$19,compare$30,a_013,b_014)}
      return caml_call8
              (Ppx_assert_lib_Runtime[3],
               pos$126,
               sexpifier,
               comparator,
               here,
               message,
               equal,
               expect$35,
               got)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_test_result_int_list_expect_2_3_4,
      0,
      cst_src_fdeque_ml$26,
      340,
      0,
      120,
      _aFG_);
    function compare$79(cmp,t1,t2)
     {var _a42_=caml_call1(to_list$20,t2);
      return caml_call3(compare$19,cmp,caml_call1(to_list$20,t1),_a42_)}
    function hash_fold_t$48(hash_fold_a,state,t)
     {return caml_call3
              (fold$26,
               t,
               caml_call2(hash_fold_t$15,state,caml_call1(length$40,t)),
               hash_fold_a)}
    function sexp_of_t$133(sexp_of_elt,t)
     {var _a41_=caml_call1(to_list$20,t);
      return caml_call1(caml_call1(sexp_of_t$25,sexp_of_elt),_a41_)}
    function t_of_sexp$104(elt_of_sexp,sexp)
     {return of_list$13(caml_call1(caml_call1(t_of_sexp$23,elt_of_sexp),sexp))}
    function _aFI_(param)
     {var
       got=
        caml_call1
         (to_list$20,
          t_of_sexp$104
           (t_of_sexp$32,sexp_of_t$133(sexp_of_t$43,of_list$13(_aFJ_)))),
       sexpifier=caml_call1(sexp_of_t$25,sexp_of_t$43),
       equal=0,
       message=0,
       here=0;
      function comparator(a_017,b_018)
       {return caml_call3(compare$19,compare$30,a_017,b_018)}
      return caml_call8
              (Ppx_assert_lib_Runtime[3],
               pos$127,
               sexpifier,
               comparator,
               here,
               message,
               equal,
               expect$36,
               got)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_test_result_int_list_expect_1_2_3$2,
      0,
      cst_src_fdeque_ml$27,
      370,
      4,
      206,
      _aFI_);
    var
     _aFK_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$93),
     _aFL_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_fdeque_ml_381_21),
     _aFM_=caml_call2(Bin_prot_Shape[15],_aFL_,_aFK_),
     _aFN_=[0,caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$94),0],
     _aFO_=
      [0,
       [0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_el$17),_aFN_,_aFM_],
       0],
     _aFP_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_fdeque_ml_381_8),
     group$120=caml_call2(Bin_prot_Shape[6],_aFP_,_aFO_);
    function bin_shape_el$4(a)
     {var _a40_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_el$18);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$120,_a40_),[0,a,0])}
    function bin_size_el$4(size_of_a){return size_of_a}
    function bin_write_el$4(write_a){return write_a}
    function bin_read_el$4(of_a){return of_a}
    var
     caller_identity$4=
      caml_call1
       (Bin_shape_lib_Bin_shape[5][1],
        cst_83f96982_4992_11e6_919d_fbddcfdca576);
    function iter$37(t,f)
     {return caml_call2(iter$2,caml_call1(to_list$20,t),f)}
    function init$14(len,next)
     {var acc=acc$1,n=0;
      for(;;)
       {if(len === n)return acc;
        if(n === caml_call1(length$40,acc))
         {var
           x=caml_call1(next,0),
           n$0=n + 1 | 0,
           acc$0=enqueue$2(acc,x),
           acc=acc$0,
           n=n$0;
          continue}
        throw [0,Assert_failure,_aFQ_]}}
    var
     include$144=
      caml_call1
       (Bin_prot_Utils[12],
        [0,
         caller_identity$4,
         module_name$15,
         length$40,
         iter$37,
         init$14,
         bin_size_el$4,
         bin_write_el$4,
         bin_read_el$4,
         bin_shape_el$4]),
     bin_shape_t$99=include$144[1],
     bin_size_t$73=include$144[2],
     bin_write_t$74=include$144[3],
     bin_read_t$145=include$144[4],
     bin_read_t$146=include$144[5],
     bin_writer_t$89=include$144[6],
     bin_reader_t$89=include$144[7],
     bin_t$89=include$144[8];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$484);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Stable$7=
      [0,
       [0,
        bin_t$89,
        bin_read_t$145,
        bin_read_t$146,
        bin_reader_t$89,
        bin_size_t$73,
        bin_write_t$74,
        bin_writer_t$89,
        bin_shape_t$99,
        compare$79,
        t_of_sexp$104,
        sexp_of_t$133,
        _aFx_]],
     include$145=
      [0,
       bin_t$89,
       bin_read_t$145,
       bin_read_t$146,
       bin_reader_t$89,
       bin_size_t$73,
       bin_write_t$74,
       bin_writer_t$89,
       bin_shape_t$99,
       compare$79,
       hash_fold_t$48,
       t_of_sexp$104,
       sexp_of_t$133,
       mem$20,
       length$40,
       is_empty$23,
       iter$35,
       fold$26,
       fold_result$11,
       fold_until$11,
       exists$21,
       for_all$21,
       count$16,
       sum$12,
       find$22,
       find_map$11,
       to_list$20,
       to_array$15,
       min_elt$19,
       max_elt$15,
       invariant$22,
       _aFs_,
       _aFt_,
       _aFu_,
       _aFv_,
       _aFw_,
       _aFx_,
       _aFy_,
       _aFz_,
       _aFA_,
       _aFB_,
       _aFC_,
       _aFD_,
       [0,
        mem$19,
        length$39,
        is_empty$22,
        iter$34,
        fold$25,
        fold_result$10,
        fold_until$10,
        exists$20,
        for_all$20,
        count$15,
        sum$11,
        find$21,
        find_map$10,
        to_list$18,
        to_array$14,
        min_elt$18,
        max_elt$14],
       [0,
        of_list$13,
        mem$20,
        length$40,
        is_empty$23,
        iter$35,
        fold$26,
        fold_result$11,
        fold_until$11,
        exists$21,
        for_all$21,
        count$16,
        sum$12,
        find$22,
        find_map$11,
        to_list$20,
        to_array$15,
        min_elt$19,
        max_elt$15],
       [0,
        of_list$14,
        mem$21,
        length$41,
        is_empty$24,
        iter$36,
        fold$27,
        fold_result$12,
        fold_until$12,
        exists$22,
        for_all$22,
        count$17,
        sum$13,
        find$23,
        find_map$12,
        to_list$22,
        to_array$16,
        min_elt$20,
        max_elt$16],
       acc$1,
       singleton$12,
       of_list$13,
       rev$0,
       enqueue$3,
       enqueue_top,
       enqueue$2,
       peek$1,
       peek_exn$0,
       top$0,
       top_exn$0,
       bot,
       bot_exn,
       drop$2,
       drop_exn,
       drop_front$0,
       discard_exn,
       drop_back$0,
       drop_back_exn,
       dequeue$2,
       dequeue_exn$3,
       dequeue$1,
       dequeue_exn$2,
       dequeue_back$0,
       dequeue_back_exn$0,
       Stable$7];
    caml_register_global(7569,include$145,"Core_kernel__Fdeque");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$485);
    caml_call1(Expect_test_collector[4][1],cst_src_flags_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$486,cst$276);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$487);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Flags_intf=[0];
    caml_register_global
     (7570,Core_kernel_Flags_intf,"Core_kernel__Flags_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$488);
    caml_call1(Expect_test_collector[4][1],cst_src_flags_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$489,cst$277);
    function create$55(n)
     {var _a4Y_=n < 0?1:0,_a4Z_=_a4Y_ || (62 < n?1:0);
      if(_a4Z_)
       failwiths
        (0,
         _aFR_,
         cst_Flags_create_got_invalid_bit_must_be_between_0_and_62,
         n,
         sexp_of_t$43);
      return caml_call2(_zI_,one$2,n)}
    function Make$17(M)
     {function hash(x){return caml_call1(_Au_,x)}
      var
       Typename_of_t=caml_call1(Typerep_lib_Make_typename[1],[0,name$66]),
       typename_of_t=Typename_of_t[2],
       name_of_t=Typename_of_t[1],
       typerep_of_t=[9,[0,name_of_t,[0,typerep_of_t$7]]];
      function is_empty(t){return caml_equal(t,epoch)}
      function _a4Q_(a,b){return caml_call2(_zM_,a,b)}
      function _a4R_(a,b){return caml_call2(_zN_,a,caml_call1(_zK_,b))}
      function is_subset(t,of)
       {return caml_call2(_Ap_,t,caml_call2(_zN_,t,of))}
      function do_intersect(t1,t2)
       {return caml_call2(_Am_,caml_call2(_zN_,t1,t2),epoch)}
      function are_disjoint(t1,t2)
       {return caml_call2(_Ap_,caml_call2(_zN_,t1,t2),epoch)}
      function error(message,a,sexp_of_a)
       {var e=caml_call5(_kC_,0,0,message,a,sexp_of_a);
        if(M[4])
         caml_call2(_eO_,_aFS_,caml_call2(_PK_,0,caml_call1(sexp_of_t$18,e)));
        return caml_call1(_kL_,e)}
      if(M[2])
       var
        _a4S_=
         function(param)
          {var n=param[1];return 1 - caml_call2(equal$20,n,epoch)},
        _a4T_=caml_call2(filter$2,M[1],_a4S_);
      else
       var _a4T_=M[1];
      if(1 - M[3])
       {var l=_a4T_,ac=0;
        for(;;)
         {if(l)
           {var
             l$0=l[2],
             match=l[1],
             name=match[2],
             flag=match[1],
             bad=
              caml_call2
               (filter$2,
                l$0,
                function(flag)
                  {return function(param)
                    {var flag$0=param[1];return do_intersect(flag,flag$0)}}
                 (flag)),
             ac$0=caml_call1(is_empty$2,bad)?ac:[0,[0,flag,name,bad],ac],
             l=l$0,
             ac=ac$0;
            continue}
          if(1 - caml_call1(is_empty$2,ac))
           error
            (cst_Flags_Make_got_intersecting_flags,
             ac,
             caml_call1
              (sexp_of_t$25,
               function(param)
                {var
                  v2=param[3],
                  v1=param[2],
                  v0=param[1],
                  v0$0=caml_call1(sexp_of_t$49,v0),
                  v1$0=caml_call1(sexp_of_t$58,v1),
                  v2$0=
                   caml_call2
                    (sexp_of_t$25,
                     function(param)
                      {var
                        v1=param[2],
                        v0=param[1],
                        v0$0=caml_call1(sexp_of_t$49,v0),
                        v1$0=caml_call1(sexp_of_t$58,v1);
                       return [1,[0,v0$0,[0,v1$0,0]]]},
                     v2);
                 return [1,[0,v0$0,[0,v1$0,[0,v2$0,0]]]]}));
          break}}
      var
       bad$0=
        caml_call2
         (filter$2,
          _a4T_,
          function(param){var flag=param[1];return caml_equal(flag,epoch)});
      if(1 - caml_call1(is_empty$2,bad$0))
       error
        (cst_Flag_Make_got_flags_with_no_bits_set,
         bad$0,
         caml_call1
          (sexp_of_t$25,
           function(param)
            {var
              v1=param[2],
              v0=param[1],
              v0$0=caml_call1(sexp_of_t$49,v0),
              v1$0=caml_call1(sexp_of_t$58,v1);
             return [1,[0,v0$0,[0,v1$0,0]]]}));
      function sexp_format_of_sexp(t)
       {return caml_call2(t_of_sexp$23,t_of_sexp$46,t)}
      function sexp_of_sexp_format(v)
       {return caml_call2(sexp_of_t$25,sexp_of_t$58,v)}
      var known=caml_call1(rev,_a4T_);
      function sexp_of_t(t)
       {var
         match=
          caml_call3
           (fold$2,
            known,
            [0,t,0],
            function(param,_a4X_)
             {var
               flag_name=_a4X_[2],
               flag=_a4X_[1],
               flag_names=param[2],
               t=param[1];
              return caml_equal(caml_call2(_zN_,t,flag),flag)
                      ?[0,_a4R_(t,flag),[0,flag_name,flag_names]]
                      :[0,t,flag_names]}),
         v0=match[2],
         leftover=match[1];
        if(caml_equal(leftover,epoch))return sexp_of_sexp_format(v0);
        var
         v0$0=caml_call2(_eJ_,_aFT_,caml_call1(_zB_,leftover)),
         v0$1=caml_call2(sexp_of_t$25,sexp_of_t$58,v0),
         v1=[1,[0,_aFU_,[0,caml_call1(sexp_of_t$58,v0$0),0]]];
        return [1,[0,v0$1,[0,v1,0]]]}
      var
       _a4U_=
        caml_call2
         (map$11,
          _a4T_,
          function(param)
           {var name=param[2],mask=param[1];return [0,name,mask]}),
       known_by_name=caml_call3(Table$4[8],0,0,_a4U_);
      function t_of_sexp(sexp)
       {function _a4W_(t,name)
         {var match=caml_call2(find$3,known_by_name,name);
          if(match){var mask=match[1];return _a4Q_(t,mask)}
          return caml_call2(_Q3_,caml_call2(_eJ_,_aFV_,name),sexp)}
        return caml_call3(fold$2,sexp_format_of_sexp(sexp),epoch,_a4W_)}
      function compare(t,u)
       {function flip_top_bit(i){return caml_call2(_z$_,i,_zv_)}
        var _a4V_=flip_top_bit(u);
        return caml_call2(compare$36,flip_top_bit(t),_a4V_)}
      var
       include=Make$2([0,compare,t_of_sexp,sexp_of_t]),
       compare$0=include[8],
       min=include[9],
       max=include[10],
       ascending=include[11],
       descending=include[12],
       between=include[13],
       clamp_exn=include[14],
       clamp=include[15],
       comparator=include[16],
       validate_lbound=include[17],
       validate_ubound=include[18],
       validate_bound=include[19],
       Replace_polymorphic_compare=include[20],
       Map=include[21],
       Set=include[22];
      return [0,
              _Av_,
              hash,
              Typename_of_t,
              typename_of_t,
              typerep_of_t,
              of_int$1,
              to_int_exn$2,
              epoch,
              is_empty,
              _a4Q_,
              _a4R_,
              _zN_,
              _zK_,
              is_subset,
              do_intersect,
              are_disjoint,
              error,
              _a4T_,
              sexp_format_of_sexp,
              sexp_of_sexp_format,
              sexp_of_t,
              known_by_name,
              t_of_sexp,
              include[1],
              include[2],
              include[4],
              include[5],
              compare$0,
              min,
              max,
              ascending,
              descending,
              between,
              clamp_exn,
              clamp,
              comparator,
              validate_lbound,
              validate_ubound,
              validate_bound,
              Replace_polymorphic_compare,
              Map,
              Set,
              _Ap_,
              _Ap_,
              _Am_]}
    function _aFW_(param)
     {return caml_call1
              (_hf_,
               caml_call1
                (_hu_,
                 function(param)
                  {var
                    _a4P_=[0,[0,caml_call1(of_int$1,1),cst$278],0],
                    known=[0,[0,caml_call1(of_int$1,1),cst$279],_a4P_];
                   Make$17([0,known,0,0,0]);
                   return 0}))}
    caml_call8
     (Ppx_inline_test_lib_Runtime[4],
      Inline_test_config,
      cst_Result_is_error_Result_try_with_fun,
      0,
      cst_src_flags_ml$0,
      120,
      0,
      386,
      _aFW_);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$490);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Flags=
      [0,
       create$55,
       function(_a4N_)
        {var _a4O_=Make$17(_a4N_);
         return [0,
                 _a4O_[23],
                 _a4O_[21],
                 _a4O_[5],
                 _a4O_[4],
                 _a4O_[24],
                 _a4O_[25],
                 _a4O_[44],
                 _a4O_[26],
                 _a4O_[27],
                 _a4O_[45],
                 _a4O_[43],
                 _a4O_[28],
                 _a4O_[29],
                 _a4O_[30],
                 _a4O_[31],
                 _a4O_[32],
                 _a4O_[33],
                 _a4O_[34],
                 _a4O_[35],
                 _a4O_[36],
                 _a4O_[37],
                 _a4O_[38],
                 _a4O_[39],
                 _a4O_[40],
                 _a4O_[41],
                 _a4O_[42],
                 _a4O_[6],
                 _a4O_[7],
                 _a4O_[8],
                 _a4O_[10],
                 _a4O_[11],
                 _a4O_[12],
                 _a4O_[13],
                 _a4O_[9],
                 _a4O_[15],
                 _a4O_[16],
                 _a4O_[14]]}];
    caml_register_global(7571,Core_kernel_Flags,"Core_kernel__Flags");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$491);
    caml_call1(Expect_test_collector[4][1],cst_src_force_once_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$492,cst$280);
    function create$56(f){return [0,[0,f]]}
    function ignore(param){return create$56(function(param){return 0})}
    function force$0(t)
     {var _a4M_=t[1];
      if(_a4M_){var f=_a4M_[1];t[1] = 0;return caml_call1(f,0)}
      return caml_call1(_aV_,cst_Force_once_force)}
    function sexp_of_t$134(param,t){return t[1]?_aFX_:_aFY_}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$493);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Force_once=[0,create$56,force$0,ignore,sexp_of_t$134];
    caml_register_global
     (7572,Core_kernel_Force_once,"Core_kernel__Force_once");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$494);
    caml_call1(Expect_test_collector[4][1],cst_src_fqueue_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$495,cst$281);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$496);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Fqueue=
      [0,
       bin_t$89,
       bin_read_t$145,
       bin_read_t$146,
       bin_reader_t$89,
       bin_size_t$73,
       bin_write_t$74,
       bin_writer_t$89,
       bin_shape_t$99,
       compare$79,
       hash_fold_t$48,
       t_of_sexp$104,
       sexp_of_t$133,
       mem$20,
       iter$35,
       fold$26,
       fold_result$11,
       fold_until$11,
       exists$21,
       for_all$21,
       count$16,
       sum$12,
       find$22,
       find_map$11,
       to_array$15,
       min_elt$19,
       max_elt$15,
       invariant$22,
       _aFs_,
       _aFt_,
       _aFu_,
       _aFv_,
       _aFw_,
       _aFx_,
       _aFy_,
       _aFz_,
       _aFA_,
       _aFB_,
       _aFC_,
       _aFD_,
       acc$1,
       enqueue$2,
       enqueue_top,
       bot_exn,
       bot,
       top_exn$0,
       top$0,
       dequeue_exn$2,
       dequeue$1,
       discard_exn,
       to_list$20,
       of_list$13,
       length$40,
       is_empty$23,
       singleton$12,
       Stable$7];
    caml_register_global(7573,Core_kernel_Fqueue,"Core_kernel__Fqueue");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$497);
    caml_call1(Expect_test_collector[4][1],cst_src_heap_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$498,cst$282);
    var empty$13=_arv_[4],is_empty$25=_arv_[5],equal$45=_arv_[7],dummy_id=-1;
    function child(t,pool){return get$10(pool,t,Slot[4])}
    function sibling(t,pool){return get$10(pool,t,Slot[5])}
    function prev$6(t,pool){return get$10(pool,t,Slot[6])}
    function id$2(t,pool){return get$10(pool,t,Slot[7])}
    function set_child(t,v,pool){return set$15(pool,t,Slot[4],v)}
    function set_sibling(t,v,pool){return set$15(pool,t,Slot[5],v)}
    function set_prev$0(t,v,pool){return set$15(pool,t,Slot[6],v)}
    function value_exn$1(t,pool)
     {if(caml_call1(is_empty$25,t))throw [0,Assert_failure,_aFZ_];
      return get$10(pool,t,Slot[3])}
    function allocate(value,pool,id)
     {var _a4K_=caml_call1(empty$13,0),_a4L_=caml_call1(empty$13,0);
      return new5(pool,value,caml_call1(empty$13,0),_a4L_,_a4K_,id)}
    function disconnect_sibling(t,pool)
     {var sibling$0=sibling(t,pool);
      if(1 - caml_call1(is_empty$25,sibling$0))
       {set_sibling(t,caml_call1(empty$13,0),pool);
        set_prev$0(sibling$0,caml_call1(empty$13,0),pool)}
      return sibling$0}
    function disconnect_child(t,pool)
     {var child$0=child(t,pool);
      if(1 - caml_call1(is_empty$25,child$0))
       {set_child(t,caml_call1(empty$13,0),pool);
        set_prev$0(child$0,caml_call1(empty$13,0),pool)}
      return child$0}
    function create$57(capacity)
     {var
       _a4H_=caml_call1(_arv_[4],0),
       _a4I_=caml_call1(_arv_[4],0),
       _a4J_=[0,0,caml_call1(_arv_[4],0),_a4I_,_a4H_,dummy_id];
      return create$40(_apH_[21],capacity,_a4J_)}
    function invariant$23(t)
     {if(! caml_call1(is_empty$25,t[3]))
       if(! caml_call1(is_empty$25,sibling(t[3],t[2])))
        throw [0,Assert_failure,_aF2_];
      var
       _a4G_=caml_call1(empty$13,0),
       to_visit$1=[0,[0,t[3],_a4G_,0],0],
       to_visit=to_visit$1;
      for(;;)
       {if(to_visit)
         {var
           rest=to_visit[2],
           match=to_visit[1],
           maybe_parent_value=match[3],
           expected_prev=match[2],
           node=match[1];
          if(caml_call1(is_empty$25,node)){var to_visit=rest;continue}
          var this_value=value_exn$1(node,t[2]);
          if(caml_call2(equal$45,prev$6(node,t[2]),expected_prev))
           {caml_call2
             (iter$16,
              maybe_parent_value,
              function(this_value)
                {return function(parent_value)
                  {if(0 < caml_call2(t[1],parent_value,this_value))
                    throw [0,Assert_failure,_aF0_];
                   return 0}}
               (this_value));
            var
             _a4F_=[0,[0,sibling(node,t[2]),node,maybe_parent_value],rest],
             to_visit$0=[0,[0,child(node,t[2]),node,[0,this_value]],_a4F_],
             to_visit=to_visit$0;
            continue}
          throw [0,Assert_failure,_aF1_]}
        return 0}}
    function create$58(opt,cmp,param)
     {if(opt)var sth=opt[1],min_size=sth;else var min_size=1;
      var _a4E_=caml_call1(empty$13,0);
      return [0,cmp,create$57(min_size),_a4E_,0]}
    function copy$7(param)
     {var
       cmp=param[1],
       pool$0=param[2],
       root$0=param[3],
       num_of_allocated_nodes=param[4],
       pool=create$57(capacity$2(pool$0));
      function copy_node(node,to_visit)
       {if(caml_call1(is_empty$25,node))
         return [0,caml_call1(empty$13,0),to_visit];
        var
         _a4C_=id$2(node,pool$0),
         new_node=allocate(value_exn$1(node,pool$0),pool,_a4C_),
         _a4D_=[0,[0,new_node,-560648958,sibling(node,pool$0)],to_visit],
         to_visit$0=[0,[0,new_node,-977688164,child(node,pool$0)],_a4D_];
        return [0,new_node,to_visit$0]}
      var
       match$1=copy_node(root$0,0),
       to_visit$1=match$1[2],
       root=match$1[1],
       to_visit=to_visit$1;
      for(;;)
       {if(to_visit)
         {var
           rest=to_visit[2],
           match=to_visit[1],
           node_to_copy=match[3],
           slot=match[2],
           node_to_update=match[1],
           match$0=copy_node(node_to_copy,rest),
           to_visit$0=match$0[2],
           new_node=match$0[1];
          if(-560648958 <= slot)
           set_sibling(node_to_update,new_node,pool);
          else
           set_child(node_to_update,new_node,pool);
          if(1 - caml_call1(is_empty$25,new_node))
           set_prev$0(new_node,node_to_update,pool);
          var to_visit=to_visit$0;
          continue}
        return [0,cmp,pool,root,num_of_allocated_nodes]}}
    function merge$8(t,root1,root2)
     {if(caml_call1(is_empty$25,root1))return root2;
      if(caml_call1(is_empty$25,root2))return root1;
      function add_child(t,node,child)
       {var _a4B_=t[2],current_child=disconnect_child(node,_a4B_);
        set_sibling(child,current_child,_a4B_);
        if(1 - caml_call1(is_empty$25,current_child))
         set_prev$0(current_child,child,_a4B_);
        set_child(node,child,_a4B_);
        set_prev$0(child,node,_a4B_);
        return node}
      var v1=value_exn$1(root1,t[2]),v2=value_exn$1(root2,t[2]);
      return 0 <= caml_call2(t[1],v1,v2)
              ?add_child(t,root2,root1)
              :add_child(t,root1,root2)}
    function top_exn$1(t)
     {return caml_call1(is_empty$25,t[3])
              ?caml_call1(failwith,cst_Heap_top_exn_called_on_an_empty_heap)
              :value_exn$1(t[3],t[2])}
    function top$1(t){return caml_call1(is_empty$25,t[3])?0:[0,top_exn$1(t)]}
    function add_node(t,v)
     {if(is_full(t[2]))t[2] = grow(0,t[2]);
      t[4] = t[4] + 1 | 0;
      var _a4A_=caml_call1(of_int,t[4]),node=allocate(v,t[2],_a4A_);
      t[3] = merge$8(t,t[3],node);
      return node}
    function add$21(t,v){add_node(t,v);return 0}
    function loop(t,depth,head$1)
     {if(1e3 <= depth)
       {var acc=0,head=head$1;
        for(;;)
         {if(caml_call1(is_empty$25,head))
           var match=acc;
          else
           {var next1=disconnect_sibling(head,t[2]);
            if(! caml_call1(is_empty$25,next1))
             {var
               head$0=disconnect_sibling(next1,t[2]),
               acc$0=[0,merge$8(t,head,next1),acc],
               acc=acc$0,
               head=head$0;
              continue}
            var match=[0,head,acc]}
          if(match)
           {var _a4x_=match[2],_a4y_=match[1];
            return _a4x_
                    ?caml_call3
                      (fold$2,
                       _a4x_,
                       _a4y_,
                       function(acc,heap){return merge$8(t,acc,heap)})
                    :_a4y_}
          return caml_call1(empty$13,0)}}
      if(caml_call1(is_empty$25,head$1))return head$1;
      var next1$0=disconnect_sibling(head$1,t[2]);
      if(caml_call1(is_empty$25,next1$0))return head$1;
      var
       next2=disconnect_sibling(next1$0,t[2]),
       _a4z_=loop(t,depth + 1 | 0,next2);
      return merge$8(t,merge$8(t,head$1,next1$0),_a4z_)}
    function remove_non_empty(t,node)
     {var pool=t[2];
      if(1 - caml_call1(is_empty$25,node))
       {var prev=prev$6(node,pool);
        if(1 - caml_call1(is_empty$25,prev))
         {var
           relation_to_prev=
            caml_call2(equal$45,node,child(prev,pool))?-977688164:-560648958;
          set_prev$0(node,caml_call1(empty$13,0),pool);
          var sibling=disconnect_sibling(node,pool);
          if(-560648958 <= relation_to_prev)
           set_sibling(prev,sibling,pool);
          else
           set_child(prev,sibling,pool);
          if(1 - caml_call1(is_empty$25,sibling))
           {set_prev$0(sibling,prev,pool);var switch$0=1,switch$1=0}
          else
           var switch$1=1}
        else
         var switch$1=1;
        if(switch$1)var switch$0=0}
      else
       var switch$0=0;
      var
       head=disconnect_child(node,pool),
       merged_children=loop(t,0,head),
       new_root=
        caml_call2(equal$45,t[3],node)
         ?merged_children
         :merge$8(t,t[3],merged_children);
      unsafe_free(pool,node);
      t[3] = new_root;
      return 0}
    function remove_top$0(t)
     {var _a4w_=1 - caml_call1(is_empty$25,t[3]);
      return _a4w_?remove_non_empty(t,t[3]):_a4w_}
    function pop_exn$0(t){var r=top_exn$1(t);remove_top$0(t);return r}
    function pop$0(t){return caml_call1(is_empty$25,t[3])?0:[0,pop_exn$0(t)]}
    function pop_if$0(t,f)
     {var match=top$1(t);
      if(match)
       {var v=match[1];return caml_call1(f,v)?(remove_top$0(t),[0,v]):0}
      return 0}
    function fold$28(t,acc,f)
     {var pool=t[2],to_visit$1=[0,t[3],0],acc$0=acc,to_visit=to_visit$1;
      for(;;)
       {if(to_visit)
         {var rest=to_visit[2],node=to_visit[1];
          if(caml_call1(is_empty$25,node)){var to_visit=rest;continue}
          var
           _a4v_=[0,child(node,pool),rest],
           to_visit$0=[0,sibling(node,pool),_a4v_],
           acc$1=caml_call2(f,acc$0,value_exn$1(node,pool)),
           acc$0=acc$1,
           to_visit=to_visit$0;
          continue}
        return acc$0}}
    function iter$38(t,f)
     {var pool=t[2],to_visit$1=[0,t[3],0],to_visit=to_visit$1;
      for(;;)
       {if(to_visit)
         {var rest=to_visit[2],node=to_visit[1];
          if(caml_call1(is_empty$25,node)){var to_visit=rest;continue}
          caml_call1(f,value_exn$1(node,pool));
          var
           _a4u_=[0,child(node,pool),rest],
           to_visit$0=[0,sibling(node,pool),_a4u_],
           to_visit=to_visit$0;
          continue}
        return 0}}
    var
     iter$39=[0,-198771759,iter$38],
     C$4=caml_call1(include$9[17],[0,fold$28,iter$39]);
    function length$42(t){return length$27(t[2])}
    function is_empty$26(t){return caml_call1(is_empty$25,t[3])}
    var
     _aF__=C$4[14],
     _aF$_=C$4[15],
     _aF3_=C$4[1],
     _aF4_=C$4[8],
     _aF5_=C$4[9],
     _aF6_=C$4[10],
     _aF7_=C$4[11],
     _aF8_=C$4[12],
     _aF9_=C$4[13],
     _aGa_=C$4[16],
     _aGb_=C$4[17],
     _aGc_=C$4[6],
     _aGd_=C$4[7];
    function of_array$10(arr,cmp)
     {var t=create$58([0,caml_call1(length$1,arr)],cmp,0);
      caml_call2(iter$0,arr,function(v){return add$21(t,v)});
      return t}
    function of_list$15(l,cmp)
     {return of_array$10(caml_call1(of_list$1,l),cmp)}
    function sexp_of_t$135(f,t)
     {var _a4t_=t[1];
      return caml_call2
              (_iJ_,f,caml_call2(sorted_copy,caml_call1(_aF$_,t),_a4t_))}
    function _aGe_(param)
     {var t=of_list$15(data$9,compare$30);
      invariant$23(t);
      pop$0(t);
      invariant$23(t);
      var
       list_sum=
        caml_call3(fold$2,data$9,0,function(sum,v){return sum + v | 0}),
       heap_fold_sum=fold$28(t,0,function(sum,v){return sum + v | 0}),
       r=[0,0];
      iter$38(t,function(v){r[1] = r[1] + v | 0;return 0});
      var _a4q_=r[1];
      function _a4r_(param){return caml_call2(_xv_,list_sum,heap_fold_sum)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_Int_list_sum_heap_fold_sum,
        0,
        cst_src_heap_ml$0,
        536,
        4,
        47,
        _a4r_);
      function _a4s_(param){return caml_call2(_xv_,list_sum,_a4q_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_Int_list_sum_heap_iter_sum,
        0,
        cst_src_heap_ml$1,
        537,
        4,
        47,
        _a4s_);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst$283,
      0,
      cst_src_heap_ml$2,
      521,
      0,
      640,
      _aGe_);
    function is_node_valid(t)
     {var _a4p_=t[2];return caml_call2(_xr_,id$2(t[1],t[3][2]),_a4p_)}
    function value_exn$2(t)
     {return is_node_valid(t)
              ?value_exn$1(t[1],t[3][2])
              :caml_call1
                (failwith,cst_Heap_value_exn_node_was_removed_from_the_heap)}
    function sexp_of_t$136(sexp_of_a,t)
     {var _a4o_=is_node_valid(t)?[0,value_exn$1(t[1],t[3][2])]:0;
      return caml_call2(sexp_of_t$39,sexp_of_a,_a4o_)}
    function remove$14(t,token)
     {if(caml_call2(_R7_,t,token[3]))
       {var _a4m_=1 - caml_call1(is_empty$25,token[1]);
        if(_a4m_)
         {if(is_node_valid(token))remove_non_empty(t,token[1]);
          token[1] = caml_call1(empty$13,0);
          var _a4n_=0}
        else
         var _a4n_=_a4m_;
        return _a4n_}
      return caml_call1(failwith,cst_cannot_remove_from_a_different_heap)}
    function add_removable(t,v)
     {var node=add_node(t,v);return [0,node,id$2(node,t[2]),t]}
    function update$4(t,token,v){remove$14(t,token);return add_removable(t,v)}
    function find_elt$0(t,f)
     {var nodes$1=[0,t[3],0],nodes=nodes$1;
      for(;;)
       {if(nodes)
         {var rest=nodes[2],node=nodes[1];
          if(caml_call1(is_empty$25,node)){var nodes=rest;continue}
          if(caml_call1(f,value_exn$1(node,t[2])))
           return [0,[0,node,id$2(node,t[2]),t]];
          var
           _a4l_=[0,child(node,t[2]),rest],
           nodes$0=[0,sibling(node,t[2]),_a4l_],
           nodes=nodes$0;
          continue}
        return 0}}
    function value$6(t,heap){return value_exn$1(t,heap[2])}
    var Elt$0=[0,value$6];
    function update$5(t,elt,v){remove_non_empty(t,elt);return add_node(t,v)}
    var Unsafe=[0,Elt$0,add_node,remove_non_empty,update$5];
    function _aGf_(param)
     {function length_check(param)
       {var
         t_b=param[2],
         t_a=param[1],
         this_len=length$42(t_a),
         that_len=caml_call1(length$4,t_b[2]),
         _a4k_=this_len !== that_len?1:0;
        if(_a4k_)
         {var
           _a4j_=
            caml_call1(_PM_,caml_call2(sexp_of_t$25,sexp_of_t$43,t_b[2]));
          return caml_call6
                  (_R5_,
                   _aGg_,
                   this_len,
                   caml_call1(_PM_,sexp_of_t$135(sexp_of_t$43,t_a)),
                   that_len,
                   _a4j_,
                   0)}
        return _a4k_}
      function _a4e_(param)
       {var that_t=[0,compare$30,0],this_t=create$58(0,compare$30,0),ops=1e3;
        for(;;)
         {if(0 === ops)return 0;
          var r=caml_call1(Base_Random[5],100);
          if(40 <= r)
           if(70 <= r)
            if(80 <= r)
             if(90 <= r)
              {var
                this_list=
                 caml_call2(sort$0,compare$30,caml_call1(_aF__,this_t)),
                that_list=caml_call2(sort$0,compare$30,that_t[2]);
               if(! caml_equal(this_list,that_list))
                throw [0,Assert_failure,_aGj_];
               invariant$23(this_t)}
             else
              {remove_top$0(this_t);
               var _a4g_=that_t[2];
               if(_a4g_){var xs$0=_a4g_[2];that_t[2] = xs$0}
               length_check([0,this_t,that_t])}
            else
             {var res1$0=top$1(this_t),res2=caml_call1(hd$0,that_t[2]);
              if(caml_notequal(res1$0,res2))
               {var
                 _a4i_=
                  caml_call2(value$0,caml_call2(map$23,res2,_xy_),cst_None$8);
                caml_call4
                 (_R5_,
                  _aGi_,
                  caml_call2
                   (value$0,caml_call2(map$23,res1$0,_xy_),cst_None$9),
                  _a4i_,
                  0)}}
           else
            {var res1=pop$0(this_t),_a4f_=that_t[2];
             if(_a4f_)
              {var xs=_a4f_[2],x=_a4f_[1];that_t[2] = xs;var res2$0=[0,x]}
             else
              var res2$0=0;
             if(caml_notequal(res1,res2$0))
              {var
                _a4h_=
                 caml_call2(value$0,caml_call2(map$23,res2$0,_xy_),cst_None$6);
               caml_call4
                (_R5_,
                 _aGh_,
                 caml_call2(value$0,caml_call2(map$23,res1,_xy_),cst_None$7),
                 _a4h_,
                 0)}}
          else
           {var v=caml_call1(Base_Random[5],1e5);
            add$21(this_t,v);
            that_t[2] = caml_call2(sort$0,that_t[1],[0,v,that_t[2]]);
            length_check([0,this_t,that_t])}
          var ops$0=ops - 1 | 0,ops=ops$0;
          continue}}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_dual_ops,
        0,
        cst_src_heap_ml$3,
        759,
        4,
        38,
        _a4e_);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst$284,
      0,
      cst_src_heap_ml$4,
      625,
      0,
      3994,
      _aGf_);
    function test_copy(add_removable,remove)
     {function sum(t){return fold$28(t,0,function(acc,i){return acc + i | 0})}
      var t=create$58(0,compare$30,0),i=1;
      for(;;)
       {add$21(t,i);
        if(0 === caml_call2(_wX_,i,10)){pop$0(t);add$21(t,i)}
        var _a4d_=i + 1 | 0;
        if(99 !== i){var i=_a4d_;continue}
        var token=caml_call2(add_removable,t,100);
        invariant$23(t);
        var t$0=copy$7(t);
        invariant$23(t$0);
        var _a4a_=sum(t$0);
        if(sum(t) === _a4a_)
         {var _a4b_=caml_call1(_aF__,t$0);
          if(caml_equal(caml_call1(_aF__,t),_a4b_))
           {caml_call2(remove,t,token);
            var _a4c_=sum(t$0) - 100 | 0;
            if(sum(t) === _a4c_)return 0;
            throw [0,Assert_failure,_aGk_]}
          throw [0,Assert_failure,_aGl_]}
        throw [0,Assert_failure,_aGm_]}}
    function _aGn_(param){return test_copy(add_removable,remove$14)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_test_copy_add_removable_remove,
      0,
      cst_src_heap_ml$5,
      785,
      0,
      50,
      _aGn_);
    function _aGo_(param){return test_copy(Unsafe[2],Unsafe[3])}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_test_copy_add_removable_Unsafe_add_removable,
      0,
      cst_src_heap_ml$6,
      786,
      0,
      85,
      _aGo_);
    function test_removal(add_removable,remove,elt_value_exn)
     {var t=create$58(0,compare$30,0),tokens=[0,0],i=1;
      for(;;)
       {var _a39_=tokens[1];
        tokens[1] = [0,caml_call2(add_removable,t,i),_a39_];
        var _a3__=i + 1 | 0;
        if(1e4 !== i){var i=_a3__;continue}
        invariant$23(t);
        var
         _a38_=
          function(token)
           {var
             _a3$_=
              0 !== caml_call2(_wX_,caml_call2(elt_value_exn,token,t),2)?1:0;
            return _a3$_?caml_call2(remove,t,token):_a3$_};
        caml_call2(iter$2,tokens[1],_a38_);
        invariant$23(t);
        var count=0;
        for(;;)
         {if(0 === caml_call2(_wX_,count,1e3))invariant$23(t);
          var match=pop$0(t);
          if(match)
           {var v=match[1];
            if(((1 + count | 0) * 2 | 0) === v)
             {var count$0=count + 1 | 0,count=count$0;continue}
            throw [0,Assert_failure,_aGp_]}
          if(count === 5e3)return 0;
          throw [0,Assert_failure,_aGq_]}}}
    function _aGr_(param)
     {return test_removal
              (add_removable,
               remove$14,
               function(token,param){return value_exn$2(token)})}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_test_removal_add_removable_remove_elt_va,
      0,
      cst_src_heap_ml$7,
      809,
      0,
      107,
      _aGr_);
    function _aGs_(param)
     {return test_removal(Unsafe[2],Unsafe[3],Unsafe[1][1])}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_test_removal_add_removable_Unsafe_add_remova,
      0,
      cst_src_heap_ml$8,
      811,
      0,
      126,
      _aGs_);
    function _aGu_(param)
     {var t=create$58(0,compare$30,0),for$0=1;
      for(;;)
       {add$21(t,caml_call1(Base_Random[5],1e5));
        var _a37_=for$0 + 1 | 0;
        if(1e4 !== for$0){var for$0=_a37_;continue}
        var last=-1,count=0;
        for(;;)
         {if(0 === caml_call2(_wX_,count,1e3))invariant$23(t);
          var match=pop$0(t);
          if(match)
           {var v=match[1];
            if(last <= v)
             {var count$0=count + 1 | 0,last=v,count=count$0;continue}
            throw [0,Assert_failure,_aGt_]}
          return 0}}}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_test_ordering,
      0,
      cst_src_heap_ml$9,
      830,
      0,
      34,
      _aGu_);
    function _aGv_(param){of_array$10([0],compare$30);return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_ignore_of_array_cmp_Int_compare,
      0,
      cst_src_heap_ml$10,
      832,
      0,
      58,
      _aGv_);
    function _aGw_(param)
     {var
       h=create$58(0,compare$30,0),
       elt=add_removable(h,1),
       t1=caml_call1(_PM_,sexp_of_t$136(sexp_of_t$43,elt));
      caml_call8
       (Ppx_assert_lib_Runtime[2],
        pos$128,
        sexp_of_t$58,
        compare$47,
        0,
        0,
        0,
        t1,
        t2$2);
      pop_exn$0(h);
      if
       (caml_call1
         (_hf_,caml_call1(_hu_,function(param){return value_exn$2(elt)})))
       {var t1$0=caml_call1(_PM_,sexp_of_t$136(sexp_of_t$43,elt));
        return caml_call8
                (Ppx_assert_lib_Runtime[2],
                 pos$129,
                 sexp_of_t$58,
                 compare$47,
                 0,
                 0,
                 0,
                 t1$0,
                 t2$3)}
      throw [0,Assert_failure,_aGx_]}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_operations_on_removed_elements,
      0,
      cst_src_heap_ml$11,
      834,
      0,
      378,
      _aGw_);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$499);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     _aGy_=[0,sexp_of_t$136,value_exn$2],
     Core_kernel_Heap=
      [0,
       sexp_of_t$135,
       _aF3_,
       length$42,
       is_empty$26,
       iter$38,
       fold$28,
       _aGc_,
       _aGd_,
       _aF4_,
       _aF5_,
       _aF6_,
       _aF7_,
       _aF8_,
       _aF9_,
       _aF__,
       _aF$_,
       _aGa_,
       _aGb_,
       create$58,
       of_array$10,
       of_list$15,
       top$1,
       top_exn$1,
       add$21,
       remove_top$0,
       pop$0,
       pop_exn$0,
       pop_if$0,
       copy$7,
       _aGy_,
       add_removable,
       remove$14,
       update$4,
       find_elt$0,
       Unsafe];
    caml_register_global(7574,Core_kernel_Heap,"Core_kernel__Heap");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$500);
    caml_call1(Expect_test_collector[4][1],cst_src_hash_heap_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$501,cst$285);
    function Make$18(Key)
     {var Table=_qS_(Key);
      function create(min_size,cmp)
       {if(min_size)
         var s=min_size[1],initial_tbl_size=s;
        else
         var initial_tbl_size=50;
        var _a34_=caml_call3(Table[4],0,[0,initial_tbl_size],0),_a35_=0;
        return [0,
                create$58
                 (min_size,
                  function(param,_a36_)
                   {var v2=_a36_[2],v1=param[2];return caml_call2(cmp,v1,v2)},
                  _a35_),
                cmp,
                _a34_]}
      function push_new_key(t,key,data)
       {var el=add_removable(t[1],[0,key,data]);
        return caml_call3(set$0,t[3],key,el)}
      function push(t,key,data)
       {var match=caml_call2(find$3,t[3],key);
        return match?975255060:(push_new_key(t,key,data),17724)}
      var
       Key_already_present=
        [248,
         cst_Core_kernel_Hash_heap_Make_Key_Key_already_present,
         caml_fresh_oo_id(0)];
      function _a3V_(param)
       {if(param[1] === Key_already_present)
         {var v0=param[2],v0$0=caml_call1(Key[3],v0);
          return [1,[0,_aGz_,[0,v0$0,0]]]}
        throw [0,Assert_failure,_aGA_]}
      caml_call3(Sexplib0_Sexp_conv[51][2],0,Key_already_present,_a3V_);
      function push_exn(t,key,data)
       {var match=push(t,key,data);
        if(975255060 <= match)throw [0,Key_already_present,key];
        return 0}
      function replace(t,key,data)
       {var match=caml_call2(find$3,t[3],key);
        if(match)
         {var el=match[1];remove$14(t[1],el);return push_new_key(t,key,data)}
        return push_exn(t,key,data)}
      function remove(t,key)
       {var match=caml_call2(find$3,t[3],key);
        if(match)
         {var el=match[1];
          caml_call2(remove$0,t[3],key);
          return remove$14(t[1],el)}
        return 0}
      function mem(t,key){return caml_call2(mem$3,t[3],key)}
      function top_with_key(t)
       {var match=top$1(t[1]);
        if(match)
         {var match$0=match[1],v=match$0[2],k=match$0[1];return [0,[0,k,v]]}
        return 0}
      function top(t)
       {var match=top_with_key(t);
        if(match){var match$0=match[1],v=match$0[2];return [0,v]}
        return 0}
      function top_exn(t){return caml_call1(_aU_,top_exn$1(t[1]))}
      function top_with_key_exn(t){return top_exn$1(t[1])}
      function pop_with_key_exn(t)
       {var match=pop_exn$0(t[1]),v=match[2],k=match[1];
        caml_call2(remove$0,t[3],k);
        return [0,k,v]}
      function pop_with_key(t)
       {try
         {var _a32_=[0,pop_with_key_exn(t)];return _a32_}
        catch(_a33_){return 0}}
      function pop(t)
       {var match=pop_with_key(t);
        if(match){var match$0=match[1],v=match$0[2];return [0,v]}
        return 0}
      function pop_exn(t){return caml_call1(_aU_,pop_with_key_exn(t))}
      function pop_if_with_key(t,f)
       {function _a31_(param)
         {var v=param[2],k=param[1];return caml_call2(f,k,v)}
        var match=pop_if$0(t[1],_a31_);
        if(match)
         {var match$0=match[1],v=match$0[2],k=match$0[1];
          caml_call2(remove$0,t[3],k);
          return [0,[0,k,v]]}
        return 0}
      function pop_if(t,f)
       {var
         match=
          pop_if_with_key(t,function(param,data){return caml_call1(f,data)});
        if(match){var match$0=match[1],v=match$0[2];return [0,v]}
        return 0}
      function find(t,key)
       {var match=caml_call2(find$3,t[3],key);
        if(match)
         {var el=match[1];return [0,caml_call1(_aU_,caml_call1(_aGy_[2],el))]}
        return 0}
      var
       Key_not_found=
        [248,
         cst_Core_kernel_Hash_heap_Make_Key_Key_not_found,
         caml_fresh_oo_id(0)];
      function _a3W_(param)
       {if(param[1] === Key_not_found)
         {var v0=param[2],v0$0=caml_call1(Key[3],v0);
          return [1,[0,_aGB_,[0,v0$0,0]]]}
        throw [0,Assert_failure,_aGC_]}
      caml_call3(Sexplib0_Sexp_conv[51][2],0,Key_not_found,_a3W_);
      function find_exn(t,key)
       {var match=find(t,key);
        if(match){var el=match[1];return el}
        throw [0,Key_not_found,key]}
      function find_pop(t,key)
       {var match=caml_call2(find$3,t[3],key);
        if(match)
         {var el=match[1],match$0=caml_call1(_aGy_[2],el),v=match$0[2];
          caml_call2(remove$0,t[3],key);
          remove$14(t[1],el);
          return [0,v]}
        return 0}
      function find_pop_exn(t,key)
       {var match=find_pop(t,key);
        if(match){var el=match[1];return el}
        throw [0,Key_not_found,key]}
      function iteri(t,f)
       {function _a30_(param)
         {var v=param[2],k=param[1];return caml_call2(f,k,v)}
        return iter$38(t[1],_a30_)}
      function iter(t,f)
       {function _a3Z_(param){var v=param[2];return caml_call1(f,v)}
        return iter$38(t[1],_a3Z_)}
      function iter_keys(t,f)
       {function _a3Y_(param){var k=param[1];return caml_call1(f,k)}
        return iter$38(t[1],_a3Y_)}
      function to_alist(t){return caml_call1(_aF__,t[1])}
      function length(t)
       {var _a3X_=length$42(t[1]);
        if(caml_call2(_aD_,caml_call1(length$5,t[3]),_a3X_))
         return caml_call1(length$5,t[3]);
        throw [0,Assert_failure,_aGD_]}
      function copy(t)
       {var t$0=create(0,t[2]);
        iteri(t,function(key,data){return push_exn(t$0,key,data)});
        return t$0}
      return [0,
              Key,
              create,
              copy,
              push,
              push_exn,
              replace,
              remove,
              mem,
              top,
              top_exn,
              top_with_key,
              top_with_key_exn,
              pop_with_key,
              pop_with_key_exn,
              pop,
              pop_exn,
              pop_if_with_key,
              pop_if,
              find,
              find_pop,
              find_exn,
              find_pop_exn,
              iter_keys,
              iter,
              iteri,
              iter,
              to_alist,
              length]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$502);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Hash_heap=[0,Make$18];
    caml_register_global(7575,Core_kernel_Hash_heap,"Core_kernel__Hash_heap");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$503);
    caml_call1(Expect_test_collector[4][1],cst_src_host_and_port_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$504,cst$286);
    function t_of_sexp$105(sexp)
     {if(1 === sexp[0])
       {var _a3T_=sexp[1];
        if(_a3T_)
         {var _a3U_=_a3T_[2];
          if(_a3U_)
           if(! _a3U_[2])
            {var
              v1=_a3U_[1],
              v0=_a3T_[1],
              v0$0=caml_call1(_aaY_,v0),
              v1$0=caml_call1(_aba_,v1);
             return [0,v0$0,v1$0]}}}
      return caml_call3(Sexplib0_Sexp_conv_error[2],tp_loc$46,2,sexp)}
    function sexp_of_t$137(param)
     {var
       v1=param[2],
       v0=param[1],
       v0$0=caml_call1(_aaX_,v0),
       v1$0=caml_call1(_aa$_,v1);
      return [1,[0,v0$0,[0,v1$0,0]]]}
    var
     _aGE_=caml_call1(Bin_prot_Shape[7],[0,_Z2_,[0,__l_,0]]),
     _aGF_=
      [0,[0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$227),0,_aGE_],0],
     _aGG_=
      caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_host_and_port_ml_8_6),
     group$121=caml_call2(Bin_prot_Shape[6],_aGG_,_aGF_),
     _aGH_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$228),
     bin_shape_t$100=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$121,_aGH_),0);
    function bin_size_t$74(param)
     {var v2=param[2],v1=param[1],size=caml_call1(_Y__,v1) | 0;
      return size + caml_call1(_Zb_,v2) | 0}
    function bin_write_t$75(buf,pos,param)
     {var v2=param[2],v1=param[1],pos$0=caml_call3(_Z4_,buf,pos,v1);
      return caml_call3(__n_,buf,pos$0,v2)}
    function bin_read_t$147(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],
               cst_src_host_and_port_ml_Stable_V1_Serializable_t,
               pos_ref[1])}
    function bin_read_t$148(buf,pos_ref)
     {var v1=caml_call2(_Z6_,buf,pos_ref),v2=caml_call2(__p_,buf,pos_ref);
      return [0,v1,v2]}
    function compare$80(a_001,b_002)
     {if(caml_call2(Ppx_compare_lib[1],a_001,b_002))return 0;
      var n=caml_call2(Base_Ppx_compare_lib[3][8],a_001[1],b_002[1]);
      return 0 === n
              ?caml_call2(Base_Ppx_compare_lib[3][4],a_001[2],b_002[2])
              :n}
    function hash_fold_t$49(hsv,arg)
     {var hsv$0=caml_call2(_aaD_,hsv,arg[1]);
      return caml_call2(_aaB_,hsv$0,arg[2])}
    function hash$46(x)
     {var hsv=caml_call2(Base_Hash[11],0,0),_a3S_=hash_fold_t$49(hsv,x);
      return caml_call1(Base_Hash[9],_a3S_)}
    function to_serializable(param)
     {var port=param[2],host=param[1];return [0,host,port]}
    function of_serializable(param)
     {var port=param[2],host=param[1];return [0,host,port]}
    var
     include$146=
      caml_call1
       (caml_call1
         (Stable$0[1][1],
          [0,
           bin_shape_t$100,
           bin_size_t$74,
           bin_write_t$75,
           bin_read_t$148,
           bin_read_t$147]),
        [0,to_serializable,of_serializable]),
     bin_size_t$75=include$146[1],
     bin_write_t$76=include$146[2],
     bin_read_t$149=include$146[3],
     bin_read_t$150=include$146[4],
     bin_shape_t$101=include$146[5],
     bin_writer_t$90=include$146[6],
     bin_reader_t$90=include$146[7],
     bin_t$90=include$146[8],
     Expect_test_collector$3=
      caml_call1
       (Expect_test_collector[2],
        [0,
         Expect_test_config[2],
         Expect_test_config[3],
         Expect_test_config[4],
         Expect_test_config[5],
         Expect_test_config[6]]);
    function _aGI_(ppx_expect_instance_003)
     {var
       _a3N_=caml_call1(Bin_prot_Shape[21],bin_shape_t$101),
       _a3O_=caml_call1(Bin_shape_lib_Bin_shape[18][4],_a3N_);
      caml_call1(Stdlib[35],_a3O_);
      var
       _a3P_=caml_call1(Bin_prot_Shape[21],bin_shape_t$100),
       _a3Q_=caml_call1(Bin_shape_lib_Bin_shape[18][4],_a3P_);
      caml_call1(Stdlib[35],_a3Q_);
      var
       _a3R_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_host_and_port_ml$0),
         32,
         746,
         754,
         760];
      return caml_call2
              (Expect_test_collector$3[1][1],ppx_expect_instance_003,_a3R_)}
    var
     _aGJ_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_host_and_port_ml$1),
       32,
       746,
       761,
       868],
     _aGM_=
      [0,
       [0,
        _aGL_,
        _aGK_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_src_host_and_port_ml$2),
         32,
         746,
         754,
         760],
        _aGJ_],
       0],
     _aGO_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_src_host_and_port_ml$4),
       29,
       626,
       630,
       869],
     _aGP_=
      caml_call1
       (Expect_test_common_File[4][3],cst_ac83fbfcde6c83663161ac4adc05ff5f);
    caml_call8
     (Expect_test_collector$3[2],
      _aGP_,
      _aGO_,
      cst_src_host_and_port_ml$3,
      _aGN_,
      0,
      _aGM_,
      Inline_test_config,
      _aGI_);
    var
     include$147=
      caml_call1
       (caml_call1(Stable[1][1],[0,t_of_sexp$105,sexp_of_t$137]),
        [0,to_serializable,of_serializable]),
     t_of_sexp$106=include$147[1],
     sexp_of_t$138=include$147[2];
    function create$59(host,port){return [0,host,port]}
    function host(t){return t[1]}
    function port(t){return t[2]}
    function tuple(t){return to_serializable(t)}
    function to_string$29(param)
     {var port=param[2],host=param[1];return caml_call3(_eJ_,_aGQ_,host,port)}
    function of_string$24(s)
     {var match=caml_call2(_GN_,s,58);
      if(match)
       {var _a3K_=match[2];
        if(_a3K_)
         if(! _a3K_[2])
          {var port=_a3K_[1],host=match[1];
           try
            {var _a3L_=caml_call1(_xz_,port),port$0=_a3L_}
           catch(_a3M_){var port$0=caml_call3(_R5_,_aGS_,s,0)}
           return [0,host,port$0]}}
      return caml_call3(_R5_,_aGR_,s,0)}
    var
     _aGT_=
      caml_call1(Base_Pretty_printer[2],[0,module_name$16,to_string$29])[1],
     _aGU_=
      Make_binable
       ([0,
         hash_fold_t$49,
         bin_t$90,
         bin_read_t$149,
         bin_read_t$150,
         bin_reader_t$90,
         bin_size_t$75,
         bin_write_t$76,
         bin_writer_t$90,
         bin_shape_t$101,
         t_of_sexp$106,
         compare$80,
         sexp_of_t$138,
         hash$46]),
     _aGV_=_aGU_[1],
     _aGW_=_aGU_[2],
     _aGX_=_aGU_[3],
     _aGY_=_aGU_[4],
     _aGZ_=_aGU_[5],
     _aG0_=_aGU_[6],
     include$148=
      _te_
       ([0,
         bin_t$90,
         bin_read_t$149,
         bin_read_t$150,
         bin_reader_t$90,
         bin_size_t$75,
         bin_write_t$76,
         bin_writer_t$90,
         bin_shape_t$101,
         compare$80,
         t_of_sexp$106,
         sexp_of_t$138]),
     _aG1_=include$148[1],
     _aG2_=include$148[2],
     _aG3_=include$148[3],
     _aG4_=include$148[4],
     _aG5_=include$148[5],
     _aG6_=include$148[6],
     _aG7_=include$148[7],
     _aG8_=include$148[8],
     _aG9_=include$148[9],
     _aG__=include$148[10],
     _aG$_=include$148[11],
     _aHa_=include$148[12],
     _aHb_=include$148[13],
     _aHc_=include$148[14],
     _aHd_=include$148[15],
     _aHe_=include$148[16],
     _aHf_=include$148[17],
     _aHg_=include$148[18],
     _aHh_=include$148[19],
     _aHi_=include$148[20],
     _aHj_=include$148[21],
     _aHk_=include$148[22];
    function t_of_sexp$107(sexp)
     {if(0 === sexp[0])
       {var s=sexp[1];
        try
         {var _a3J_=of_string$24(s);return _a3J_}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          if(exn[1] === Failure)
           {var err=exn[2];return caml_call2(_Q3_,err,sexp)}
          throw exn}}
      return caml_call1(t_of_sexp$106,sexp)}
    var type_id=caml_call2(_an2_[3],cst_Host_and_port,sexp_of_t$138);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$505);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Host_and_port=
      [0,
       create$59,
       host,
       port,
       tuple,
       bin_t$90,
       bin_read_t$149,
       bin_read_t$150,
       bin_reader_t$90,
       bin_size_t$75,
       bin_write_t$76,
       bin_writer_t$90,
       bin_shape_t$101,
       t_of_sexp$107,
       sexp_of_t$138,
       of_string$24,
       to_string$29,
       _aGT_,
       _aG1_,
       _aG2_,
       _aG3_,
       _aG4_,
       _aG5_,
       _aG6_,
       _aG7_,
       _aG8_,
       _aG9_,
       _aG__,
       _aG$_,
       _aHa_,
       _aHb_,
       _aHc_,
       _aHd_,
       _aHe_,
       _aHf_,
       _aHg_,
       _aHh_,
       _aHi_,
       _aHj_,
       _aHk_,
       _aGV_,
       _aGW_,
       _aGX_,
       _aGY_,
       _aGZ_,
       _aG0_,
       [0,
        [0,
         t_of_sexp$106,
         sexp_of_t$138,
         bin_t$90,
         bin_read_t$149,
         bin_read_t$150,
         bin_reader_t$90,
         bin_size_t$75,
         bin_write_t$76,
         bin_writer_t$90,
         bin_shape_t$101,
         compare$80,
         hash_fold_t$49,
         hash$46]],
       type_id];
    caml_register_global
     (7577,Core_kernel_Host_and_port,"Core_kernel__Host_and_port");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$506);
    caml_call1(Expect_test_collector[4][1],cst_src_optional_syntax_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$507,cst$287);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$508);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Optional_syntax_intf=[0];
    caml_register_global
     (7578,
      Core_kernel_Optional_syntax_intf,
      "Core_kernel__Optional_syntax_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$509);
    caml_call1(Expect_test_collector[4][1],cst_src_optional_syntax_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$510,cst$288);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$511);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Optional_syntax=[0];
    caml_register_global
     (7579,Core_kernel_Optional_syntax,"Core_kernel__Optional_syntax");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$512);
    caml_call1(Expect_test_collector[4][1],cst_src_immediate_option_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$513,cst$289);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$514);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Immediate_option_intf=[0];
    caml_register_global
     (7580,
      Core_kernel_Immediate_option_intf,
      "Core_kernel__Immediate_option_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$515);
    caml_call1(Expect_test_collector[4][1],cst_src_immediate_option_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$516,cst$290);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$517);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Immediate_option=[0];
    caml_register_global
     (7581,Core_kernel_Immediate_option,"Core_kernel__Immediate_option");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$518);
    caml_call1(Expect_test_collector[4][1],cst_src_int_set_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$519,cst$291);
    function to_string$30(t)
     {return t[1] === t[2]
              ?caml_call1(_xy_,t[1])
              :caml_call3(_eJ_,_aHl_,t[1],t[2])}
    var empty$14=0;
    function to_string$31(t)
     {return caml_call2(_Hg_,_aHm_,caml_call2(rev_map,t,to_string$30))}
    function add_range(t,x,y)
     {function loop(ranges,to_add)
       {var ranges$0=ranges,to_add$0=to_add;
        for(;;)
         {if(ranges$0)
           {var
             rest=ranges$0[2],
             r=ranges$0[1],
             match=
              to_add$0[2] < (r[1] - 1 | 0)
               ?-887375603
               :(r[2] + 1 | 0) < to_add$0[1]?836391880:515222578;
            if(515222578 === match)
             var
              _a3I_=caml_call2(_xp_,to_add$0[2],r[2]),
              match$0=[0,17724,[0,caml_call2(_xq_,to_add$0[1],r[1]),_a3I_]];
            else
             var match$0=836391880 <= match?836391880:-887375603;
            if(typeof match$0 === "number")
             return 836391880 <= match$0
                     ?[0,to_add$0,[0,r,rest]]
                     :[0,r,loop(rest,to_add$0)];
            var to_add$1=match$0[2],ranges$0=rest,to_add$0=to_add$1;
            continue}
          return [0,to_add$0,0]}}
      var _a3H_=x <= y?[0,x,y]:[0,y,x];
      return loop(t,_a3H_)}
    function add$22(t,i){return add_range(t,i,i)}
    function mem$22(t,i)
     {return caml_call2
              (exists$1,
               t,
               function(x)
                {var _a3F_=x[1] <= i?1:0,_a3G_=_a3F_?i <= x[2]?1:0:_a3F_;
                 return _a3G_})}
    function ranges(t)
     {return caml_call2
              (map$11,
               t,
               function(param){var hi=param[2],lo=param[1];return [0,lo,hi]})}
    function max$19(t)
     {if(t){var match=t[1],hi=match[2];return [0,hi]}return 0}
    function min$19(t)
     {var match=caml_call1(last$0,t);
      if(match){var match$0=match[1],lo=match$0[1];return [0,lo]}
      return 0}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$520);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Int_set=
      [0,empty$14,to_string$31,add_range,add$22,mem$22,ranges,max$19,min$19];
    caml_register_global(7582,Core_kernel_Int_set,"Core_kernel__Int_set");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$521);
    caml_call1(Expect_test_collector[4][1],cst_src_moption_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$522,cst$292);
    var none$0=runtime.caml_obj_block(Stdlib_obj[12],1);
    function create$60(param){return [0,none$0]}
    function is_infinite(x){return caml_call2(_R7_,x[1],none$0)}
    function is_finite$0(x){return 1 - is_infinite(x)}
    function get_finite_exn(x)
     {return is_infinite(x)
              ?caml_call1
                (_kM_,
                 caml_call1(Sexplib0_Sexp_conv[7],cst_Moption_get_some_exn))
              :x[1]}
    function get$15(t){return is_infinite(t)?0:[0,t[1]]}
    function unsafe_get$2(t){return t[1]}
    function set_finite(t,v){t[1] = v;return 0}
    function set_infinite(t){t[1] = none$0;return 0}
    function set$18(t,v)
     {if(v){var v$0=v[1];return set_finite(t,v$0)}return set_infinite(t)}
    function sexp_of_t$139(sexp_of_a,t)
     {return caml_call2(sexp_of_t$39,sexp_of_a,get$15(t))}
    function invariant$24(invariant_a,t)
     {function _a3B_(param){return caml_call2(iter$16,get$15(t),invariant_a)}
      function _a3C_(param){return _aHn_}
      function _a3D_(_a3E_){return sexp_of_t$139(_a3C_,_a3E_)}
      return caml_call4(Base_Invariant[1],_aHo_,t,_a3D_,_a3B_)}
    var
     Optional_syntax=[0,is_infinite,unsafe_get$2],
     Optional_syntax$0=[0,Optional_syntax];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$523);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Moption=
      [0,
       sexp_of_t$139,
       invariant$24,
       Optional_syntax$0,
       create$60,
       is_infinite,
       is_finite$0,
       get$15,
       get_finite_exn,
       unsafe_get$2,
       set$18,
       set_infinite,
       set_finite];
    caml_register_global(7584,Core_kernel_Moption,"Core_kernel__Moption");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$524);
    caml_call1(Expect_test_collector[4][1],cst_src_limiter_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$525,cst$293);
    function t_of_sexp$108(of_a,sexp)
     {if(0 === sexp[0])
       {var _a3x_=sexp[1];
        if(caml_string_notequal(_a3x_,cst_Finite))
         {if(caml_string_notequal(_a3x_,cst_Infinite))
           if(caml_string_notequal(_a3x_,cst_finite))
            if(caml_string_notequal(_a3x_,cst_infinite))
             var switch$0=1,switch$1=0;
            else
             var switch$1=1;
           else
            var switch$0=0,switch$1=0;
          else
           var switch$1=1;
          if(switch$1)return 0}
        else
         var switch$0=0;
        if(! switch$0)
         return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$47,sexp)}
      else
       {var _a3y_=sexp[1];
        if(! _a3y_)
         return caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc$47,sexp);
        var _a3z_=_a3y_[1];
        if(0 !== _a3z_[0])
         return caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc$47,sexp);
        var _a3A_=_a3z_[1];
        if(caml_string_notequal(_a3A_,cst_Finite$0))
         {if(caml_string_notequal(_a3A_,cst_Infinite$0))
           if(caml_string_notequal(_a3A_,cst_finite$0))
            if(caml_string_notequal(_a3A_,cst_infinite$0))
             var switch$2=1,switch$3=0;
            else
             var switch$3=1;
           else
            var switch$2=0,switch$3=0;
          else
           var switch$3=1;
          if(switch$3)
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$47,sexp)}
        else
         var switch$2=0;
        if(! switch$2)
         {var sexp_args=_a3y_[2];
          if(sexp_args)
           if(! sexp_args[2])
            {var v0=sexp_args[1],v0$0=caml_call1(of_a,v0);return [0,v0$0]}
          return caml_call3(Sexplib0_Sexp_conv_error[4],tp_loc$47,_a3A_,sexp)}}
      return caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc$47,sexp)}
    function sexp_of_t$140(of_a,param)
     {if(param)
       {var v0=param[1],v0$0=caml_call1(of_a,v0);
        return [1,[0,_aHp_,[0,v0$0,0]]]}
      return _aHq_}
    var
     _aHr_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$95),
     _aHs_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_limiter_ml_8_18),
     _aHu_=
      [0,
       _aHt_,
       [0,[0,cst_Finite$1,[0,caml_call2(Bin_prot_Shape[15],_aHs_,_aHr_),0]],0]],
     _aHv_=caml_call1(Bin_prot_Shape[9],_aHu_),
     _aHw_=[0,caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$96),0],
     _aHx_=
      [0,
       [0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$229),_aHw_,_aHv_],
       0],
     _aHy_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_limiter_ml_6_4),
     group$122=caml_call2(Bin_prot_Shape[6],_aHy_,_aHx_);
    function bin_shape_t$102(a)
     {var _a3w_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$230);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$122,_a3w_),[0,a,0])}
    function bin_size_t$76(size_of_a,param)
     {if(param){var v1=param[1];return 1 + caml_call1(size_of_a,v1) | 0}
      return 1}
    function bin_write_t$77(write_a,buf,pos,param)
     {if(param)
       {var v1=param[1],pos$0=caml_call3(Bin_prot_Write[30],buf,pos,1);
        return caml_call3(write_a,buf,pos$0,v1)}
      return caml_call3(Bin_prot_Write[30],buf,pos,0)}
    function bin_writer_t$91(bin_writer_a)
     {function _a3s_(v)
       {var _a3t_=bin_writer_a[2];
        return function(_a3u_,_a3v_)
         {return bin_write_t$77(_a3t_,v,_a3u_,_a3v_)}}
      return [0,function(v){return bin_size_t$76(bin_writer_a[1],v)},_a3s_]}
    function bin_read_t$151(of_a,buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],
               cst_src_limiter_ml_Infinite_or_finite_T_t,
               pos_ref[1])}
    function bin_read_t$152(of_a,buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[29],buf,pos_ref);
      if(0 === match)return 0;
      if(1 === match){var arg_1=caml_call2(of_a,buf,pos_ref);return [0,arg_1]}
      return caml_call2(Bin_prot_Common[18],_aHz_,pos_ref[1])}
    function bin_reader_t$91(bin_reader_a)
     {function _a3r_(buf,pos_ref,vtag)
       {return bin_read_t$151(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$152(bin_reader_a[1],buf,pos_ref)},
              _a3r_]}
    function bin_t$91(bin_a)
     {var _a3p_=bin_reader_t$91(bin_a[3]),_a3q_=bin_writer_t$91(bin_a[2]);
      return [0,bin_shape_t$102(bin_a[1]),_a3q_,_a3p_]}
    function compare$81(compare,t1,t2)
     {if(t1)
       {var _a3o_=t1[1];
        if(t2){var b=t2[1];return caml_call2(compare,_a3o_,b)}
        return -1}
      return t2?1:0}
    function infinite(param){return create$60(0)}
    function finite(v){var t=create$60(0);set_finite(t,v);return t}
    function to_ordinary(t){return is_infinite(t)?0:[0,get_finite_exn(t)]}
    function of_ordinary(ext)
     {if(ext){var v=ext[1];return finite(v)}return infinite(0)}
    var
     Try_take_result=[0],
     Try_return_to_bucket_result=[0],
     Tokens_may_be_available_result=[0],
     sexp_of_t$141=Alternate_sexp[2];
    function sexp_of_limiter(param)
     {var
       v_start_time=param[1],
       v_time=param[2],
       v_time_in_token_space=param[3],
       v_in_bucket=param[4],
       v_in_hopper=param[5],
       v_in_flight=param[6],
       v_bucket_limit=param[7],
       v_hopper_to_bucket_rate_per_ns=param[9],
       v_in_flight_limit=param[8],
       arg=sexp_of_t$139(sexp_of_t$59,v_hopper_to_bucket_rate_per_ns),
       bnds=[0,[1,[0,_aHA_,[0,arg,0]]],0],
       arg$0=sexp_of_t$139(sexp_of_t$43,v_in_flight_limit),
       bnds$0=[0,[1,[0,_aHB_,[0,arg$0,0]]],bnds],
       arg$1=caml_call1(sexp_of_t$43,v_bucket_limit),
       bnds$1=[0,[1,[0,_aHC_,[0,arg$1,0]]],bnds$0],
       arg$2=caml_call1(sexp_of_t$43,v_in_flight),
       bnds$2=[0,[1,[0,_aHD_,[0,arg$2,0]]],bnds$1],
       arg$3=sexp_of_t$139(sexp_of_t$43,v_in_hopper),
       bnds$3=[0,[1,[0,_aHE_,[0,arg$3,0]]],bnds$2],
       arg$4=caml_call1(sexp_of_t$43,v_in_bucket),
       bnds$4=[0,[1,[0,_aHF_,[0,arg$4,0]]],bnds$3],
       arg$5=sexp_of_t$139(sexp_of_t$43,v_time_in_token_space),
       bnds$5=[0,[1,[0,_aHG_,[0,arg$5,0]]],bnds$4],
       arg$6=caml_call1(sexp_of_t$141,v_time),
       bnds$6=[0,[1,[0,_aHH_,[0,arg$6,0]]],bnds$5],
       arg$7=caml_call1(sexp_of_t$141,v_start_time),
       bnds$7=[0,[1,[0,_aHI_,[0,arg$7,0]]],bnds$6];
      return [1,bnds$7]}
    function invariant$25(t)
     {var _a3c_=t[9];
      if(is_finite$0(_a3c_))
       {var rate=get_finite_exn(_a3c_);
        if(caml_call2(_Iu_,rate,zero$4))
         {var _a3b_=[0,[1,[0,_aHJ_,[0,caml_call1(sexp_of_t$59,rate),0]]],0];
          caml_call1
           (_kM_,
            [1,
             [0,
              caml_call1
               (Sexplib0_Sexp_conv[7],
                cst_hopper_to_bucket_rate_per_ns_must_be_0),
              _a3b_]]);
          var switch$0=1}
        else
         var switch$0=0}
      else
       var switch$0=0;
      if(t[7] < t[4])
       {var
         _a3d_=0,
         _a3e_=t[7],
         _a3f_=t[4],
         _a3g_=
          [11,
           cst_cannot_be_greater_than_bucket_limit,
           [24,
            _aHL_,
            function(param,custom_printf_001)
             {return caml_call1(_xy_,custom_printf_001)},
            _aHK_]];
        caml_call4
         (_R5_,
          [0,
           [11,
            cst_amount_in_bucket,
            [24,
             _aHM_,
             function(param,custom_printf_002)
              {return caml_call1(_xy_,custom_printf_002)},
             _a3g_]],
           cst_amount_in_bucket_Int_cannot_be_greater_than_bucket_limit_Int],
          _a3f_,
          _a3e_,
          _a3d_)}
      if(t[7] <= 0)
       {var _a3h_=0,_a3i_=t[7];
        caml_call3
         (_R5_,
          [0,
           [11,
            cst_bucket_limit_burst_size,
            [24,
             _aHO_,
             function(param,custom_printf_003)
              {return caml_call1(_xy_,custom_printf_003)},
             _aHN_]],
           cst_bucket_limit_burst_size_Int_must_be_0],
          _a3i_,
          _a3h_)}
      if(t[4] < 0)
       {var _a3j_=0,_a3k_=t[4];
        caml_call3
         (_R5_,
          [0,
           [11,
            cst_in_bucket,
            [24,
             _aHQ_,
             function(param,custom_printf_004)
              {return caml_call1(_xy_,custom_printf_004)},
             _aHP_]],
           cst_in_bucket_Int_must_be_0],
          _a3k_,
          _a3j_)}
      var match=to_ordinary(t[5]);
      if(match)
       {var in_hopper=match[1];
        if(in_hopper < 0)
         {var _a3l_=0;
          caml_call3
           (_R5_,
            [0,
             [11,
              cst_in_hopper,
              [24,
               _aHS_,
               function(param,custom_printf_005)
                {return caml_call1(_xy_,custom_printf_005)},
               _aHR_]],
             cst_in_hopper_Int_must_be_0],
            in_hopper,
            _a3l_)}}
      if(t[6] < 0)
       {var _a3m_=0,_a3n_=t[6];
        caml_call3
         (_R5_,
          [0,
           [11,
            cst_in_flight,
            [24,
             _aHU_,
             function(param,custom_printf_006)
              {return caml_call1(_xy_,custom_printf_006)},
             _aHT_]],
           cst_in_flight_Int_must_be_0],
          _a3n_,
          _a3m_)}
      var
       match$0=to_ordinary(t[9]),
       match$1=to_ordinary(t[3]),
       switch$1=match$0?match$1?1:0:match$1?0:1;
      return switch$1
              ?0
              :caml_call1
                (failwith,
                 cst_hopper_to_bucket_rate_per_sec_can_only_be_infinite_if_time_in_token_space_is_infinite)}
    function create_exn$1
     (now,
      hopper_to_bucket_rate_per_sec,
      bucket_limit,
      in_flight_limit,
      initial_bucket_level,
      initial_hopper_level)
     {var
       in_hopper=of_ordinary(initial_hopper_level),
       time_in_token_space=hopper_to_bucket_rate_per_sec?finite(0):infinite(0);
      if(hopper_to_bucket_rate_per_sec)
       var
        rate_per_sec=hopper_to_bucket_rate_per_sec[1],
        hopper_to_bucket_rate_per_ns=finite(rate_per_sec / 1e9);
      else
       var hopper_to_bucket_rate_per_ns=infinite(0);
      var
       t=
        [0,
         now,
         now,
         time_in_token_space,
         initial_bucket_level,
         in_hopper,
         0,
         bucket_limit,
         of_ordinary(in_flight_limit),
         hopper_to_bucket_rate_per_ns];
      invariant$25(t);
      return t}
    function move_from_hopper_to_bucket(t,max_move)
     {var
       space_in_bucket=t[7] - t[4] | 0,
       actual_move=caml_call2(_xq_,max_move,space_in_bucket),
       _a29_=0 < actual_move?1:0;
      if(_a29_)
       {t[4] = t[4] + actual_move | 0;
        var _a2__=is_finite$0(t[5]);
        if(_a2__)
         {var _a2$_=get_finite_exn(t[5]) - actual_move | 0;
          return set_finite(t[5],_a2$_)}
        var _a3a_=_a2__}
      else
       var _a3a_=_a29_;
      return _a3a_}
    function advance_time(t,now)
     {if(caml_call2(_Ao_,now,t[2]))t[2] = now;
      if(is_infinite(t[3]))
       {var max_move=is_infinite(t[5])?t[7]:get_finite_exn(t[5]);
        return move_from_hopper_to_bucket(t,max_move)}
      var previous_time_in_token_space=get_finite_exn(t[3]);
      if(is_finite$0(t[9]))
       {var
         tokens_per_ns=get_finite_exn(t[9]),
         _a28_=diff$7(t[2],t[1]),
         time_elapsed_since_start_in_ns=caml_call1(Span$0[49],_a28_),
         time_in_token_space=
          caml_call1
           (iround_down_exn,time_elapsed_since_start_in_ns * tokens_per_ns);
        set_finite(t[3],time_in_token_space)}
      var
       new_time_in_token_space=get_finite_exn(t[3]),
       amount_that_could_fall=
        new_time_in_token_space
        -
        previous_time_in_token_space
        |
        0,
       max_move$0=
        is_infinite(t[5])
         ?amount_that_could_fall
         :caml_call2(_xq_,get_finite_exn(t[5]),amount_that_could_fall);
      return move_from_hopper_to_bucket(t,max_move$0)}
    function can_put_n_tokens_in_flight(t,n)
     {if(is_infinite(t[8]))return 1;
      var _a27_=get_finite_exn(t[8]);
      return (t[6] + n | 0) <= _a27_?1:0}
    function try_take(t,now,amount)
     {advance_time(t,now);
      return can_put_n_tokens_in_flight(t,amount)
              ?t[7] < amount
                ?2
                :t[4] < amount
                  ?1
                  :(t[4] = t[4] - amount | 0,t[6] = t[6] + amount | 0,0)
              :1}
    function return_to_hopper(t,now,amount)
     {if(amount < 0)
       {var _a21_=0;
        caml_call3
         (_R5_,
          [0,
           [11,
            cst_return_to_hopper_passed_a_negative_amount,
            [24,
             _aHW_,
             function(param,custom_printf_007)
              {return caml_call1(_xy_,custom_printf_007)},
             _aHV_]],
           cst_return_to_hopper_passed_a_negative_amount_Int],
          amount,
          _a21_)}
      if(t[6] < amount)
       {var
         _a22_=0,
         _a23_=t[6],
         _a24_=
          [11,
           cst_in_flight$0,
           [24,
            _aHY_,
            function(param,custom_printf_008)
             {return caml_call1(_xy_,custom_printf_008)},
            _aHX_]];
        caml_call4
         (_R5_,
          [0,
           [11,
            cst_return_to_hopper_passed_an_amount,
            [24,
             _aHZ_,
             function(param,custom_printf_009)
              {return caml_call1(_xy_,custom_printf_009)},
             _a24_]],
           cst_return_to_hopper_passed_an_amount_Int_in_flight_Int],
          amount,
          _a23_,
          _a22_)}
      advance_time(t,now);
      t[6] = t[6] - amount | 0;
      var _a25_=is_finite$0(t[5]);
      if(_a25_)
       {var _a26_=get_finite_exn(t[5]) + amount | 0;
        return set_finite(t[5],_a26_)}
      return _a25_}
    function try_return_to_bucket(t,now,amount)
     {advance_time(t,now);
      var space_in_bucket=t[7] - t[4] | 0;
      if(0 <= amount)
       if(! (t[6] < amount))
        if(! (space_in_bucket < amount))
         {t[6] = t[6] - amount | 0;t[4] = t[4] + amount | 0;return 0}
      return 1}
    function tokens_may_be_available_when(t,now,amount)
     {if(can_put_n_tokens_in_flight(t,amount))
       {if(t[7] < amount)return 0;
        advance_time(t,now);
        var amount_missing=amount - t[4] | 0;
        if(0 < amount_missing)
         {if(is_infinite(t[9]))return 1;
          var
           tokens_per_ns=get_finite_exn(t[9]),
           min_seconds_left=
            caml_call1(of_int$2,amount_missing)
            /
            (tokens_per_ns * 1e9),
           _a20_=caml_call1(Span$0[45],min_seconds_left),
           min_time=[0,add$14(t[2],_a20_)];
          return is_infinite(t[5])
                  ?min_time
                  :get_finite_exn(t[5]) < amount_missing?1:min_time}
        return [0,t[2]]}
      return 1}
    function in_bucket(t,now){advance_time(t,now);return t[4]}
    function in_hopper(t,now){advance_time(t,now);return to_ordinary(t[5])}
    function in_flight(t,now){advance_time(t,now);return t[6]}
    function in_limiter(t,now)
     {var match=in_hopper(t,now);
      if(match)
       {var in_hopper$0=match[1];
        return [0,in_bucket(t,now) + in_hopper$0 | 0]}
      return 0}
    function in_system(t,now)
     {advance_time(t,now);
      if(is_infinite(t[5]))return 0;
      var _a2Y_=t[4],_a2Z_=get_finite_exn(t[5]);
      return [0,(t[6] + _a2Z_ | 0) + _a2Y_ | 0]}
    function bucket_limit(t){return t[7]}
    function hopper_to_bucket_rate_per_sec(t)
     {return is_infinite(t[9])?0:[0,get_finite_exn(t[9]) * 1e9]}
    function create_exn$2(now,bucket_limit,fill_rate,opt,param)
     {if(opt)
       var sth=opt[1],initial_bucket_level=sth;
      else
       var initial_bucket_level=0;
      return create_exn$1
              (now,[0,fill_rate],bucket_limit,0,initial_bucket_level,0)}
    var Token_bucket=[0,create_exn$2,try_take];
    function create_exn$3(now,bucket_limit,fill_rate,max_concurrent_jobs)
     {var
       initial_bucket_level=caml_call2(_xq_,bucket_limit,max_concurrent_jobs),
       initial_hopper_level=
        [0,caml_call2(_xp_,0,max_concurrent_jobs - initial_bucket_level | 0)];
      return create_exn$1
              (now,
               [0,fill_rate],
               bucket_limit,
               0,
               initial_bucket_level,
               initial_hopper_level)}
    function try_start_job(t,now)
     {var match=try_take(t,now,1);
      switch(match)
       {case 0:return 389604418;
        case 1:
         var match$0=tokens_may_be_available_when(t,now,1);
         if(typeof match$0 === "number")
          {if(0 === match$0)throw [0,Assert_failure,_aH0_];return 777587107}
         var time=match$0[1];
         return [0,9551690,time];
        default:throw [0,Assert_failure,_aH1_]}}
    function finish_job(t,now){return return_to_hopper(t,now,1)}
    var
     Throttled_rate_limiter=[0,create_exn$3,try_start_job,finish_job],
     finish_job$0=Throttled_rate_limiter[3],
     _aH2_=Throttled_rate_limiter[1],
     _aH3_=Throttled_rate_limiter[2];
    function create_exn$4(now,max_concurrent_jobs)
     {var t=caml_call4(_aH2_,now,max_concurrent_jobs,1,max_concurrent_jobs);
      set_infinite(t[9]);
      set_infinite(t[3]);
      t[4] = t[7];
      return t}
    function try_start_job$0(t,now)
     {var match=caml_call2(_aH3_,t,now);
      if(typeof match === "number")
       return 777587107 <= match?777587107:389604418;
      throw [0,Assert_failure,_aH4_]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$526);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Limiter=
      [0,
       sexp_of_limiter,
       sexp_of_limiter,
       [0,
        t_of_sexp$108,
        sexp_of_t$140,
        bin_t$91,
        bin_read_t$152,
        bin_read_t$151,
        bin_reader_t$91,
        bin_size_t$76,
        bin_write_t$77,
        bin_writer_t$91,
        bin_shape_t$102,
        compare$81],
       Try_take_result,
       Try_return_to_bucket_result,
       Tokens_may_be_available_result,
       Token_bucket,
       [0,create_exn$4,try_start_job$0,finish_job$0],
       Throttled_rate_limiter,
       bucket_limit,
       in_bucket,
       in_hopper,
       in_flight,
       in_limiter,
       in_system,
       hopper_to_bucket_rate_per_sec,
       [0,
        create_exn$1,
        tokens_may_be_available_when,
        try_take,
        return_to_hopper,
        try_return_to_bucket],
       invariant$25];
    caml_register_global(7585,Core_kernel_Limiter,"Core_kernel__Limiter");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$527);
    caml_call1(Expect_test_collector[4][1],cst_src_linked_queue_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$528,cst$294);
    var
     _aH8_=include$149[4],
     _aH__=include$149[6],
     _aIx_=include$149[31],
     _aIP_=include$149[49],
     _aH5_=include$149[1],
     _aH6_=include$149[2],
     _aH7_=include$149[3],
     _aH9_=include$149[5],
     _aH$_=include$149[7],
     _aIa_=include$149[8],
     _aIb_=include$149[9],
     _aIc_=include$149[10],
     _aId_=include$149[11],
     _aIe_=include$149[12],
     _aIf_=include$149[13],
     _aIg_=include$149[14],
     _aIh_=include$149[15],
     _aIi_=include$149[16],
     _aIj_=include$149[17],
     _aIk_=include$149[18],
     _aIl_=include$149[19],
     _aIm_=include$149[20],
     _aIn_=include$149[21],
     _aIo_=include$149[22],
     _aIp_=include$149[23],
     _aIq_=include$149[24],
     _aIr_=include$149[25],
     _aIs_=include$149[26],
     _aIt_=include$149[27],
     _aIu_=include$149[28],
     _aIv_=include$149[29],
     _aIw_=include$149[30],
     _aIy_=include$149[32],
     _aIz_=include$149[33],
     _aIA_=include$149[34],
     _aIB_=include$149[35],
     _aIC_=include$149[36],
     _aID_=include$149[37],
     _aIE_=include$149[38],
     _aIF_=include$149[39],
     _aIG_=include$149[40],
     _aIH_=include$149[41],
     _aII_=include$149[42],
     _aIJ_=include$149[43],
     _aIK_=include$149[44],
     _aIL_=include$149[45],
     _aIM_=include$149[46],
     _aIN_=include$149[47],
     _aIO_=include$149[48],
     _aIQ_=include$149[50],
     _aIR_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$97),
     _aIS_=
      caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_linked_queue_ml_13_17),
     _aIT_=caml_call2(Bin_prot_Shape[15],_aIS_,_aIR_),
     _aIU_=[0,caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$98),0],
     _aIV_=
      [0,
       [0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_el$19),_aIU_,_aIT_],
       0],
     _aIW_=
      caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_linked_queue_ml_13_4),
     group$123=caml_call2(Bin_prot_Shape[6],_aIW_,_aIV_);
    function bin_shape_el$5(a)
     {var _a2X_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_el$20);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$123,_a2X_),[0,a,0])}
    function bin_size_el$5(size_of_a){return size_of_a}
    function bin_write_el$5(write_a){return write_a}
    function bin_read_el$5(of_a){return of_a}
    var
     caller_identity$5=
      caml_call1
       (Bin_shape_lib_Bin_shape[5][1],
        cst_800df9a0_4992_11e6_881d_ffe1a5c8aced);
    function init$15(len,next)
     {var t=caml_call1(_aIP_,0),_a2V_=1;
      if(! (len < 1))
       {var for$0=_a2V_;
        for(;;)
         {caml_call2(_aIx_,t,caml_call1(next,0));
          var _a2W_=for$0 + 1 | 0;
          if(len !== for$0){var for$0=_a2W_;continue}
          break}}
      return t}
    var
     include$150=
      caml_call1
       (Bin_prot_Utils[12],
        [0,
         caller_identity$5,
         module_name$17,
         _aH8_,
         _aH__,
         init$15,
         bin_size_el$5,
         bin_write_el$5,
         bin_read_el$5,
         bin_shape_el$5]),
     _aIX_=include$150[1],
     _aIY_=include$150[2],
     _aIZ_=include$150[3],
     _aI0_=include$150[4],
     _aI1_=include$150[5],
     _aI2_=include$150[6],
     _aI3_=include$150[7],
     _aI4_=include$150[8];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$529);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Linked_queue=
      [0,
       _aI4_,
       _aI0_,
       _aI1_,
       _aI3_,
       _aIY_,
       _aIZ_,
       _aI2_,
       _aIX_,
       _aH5_,
       _aH6_,
       _aH7_,
       _aH8_,
       _aH9_,
       _aH__,
       _aH$_,
       _aIa_,
       _aIb_,
       _aIc_,
       _aId_,
       _aIe_,
       _aIf_,
       _aIg_,
       _aIh_,
       _aIi_,
       _aIj_,
       _aIk_,
       _aIl_,
       _aIm_,
       _aIn_,
       _aIo_,
       _aIp_,
       _aIq_,
       _aIr_,
       _aIs_,
       _aIt_,
       _aIu_,
       _aIv_,
       _aIw_,
       _aIx_,
       _aIy_,
       _aIz_,
       _aIA_,
       _aIB_,
       _aIC_,
       _aID_,
       _aIE_,
       _aIF_,
       _aIG_,
       _aIH_,
       _aII_,
       _aIJ_,
       _aIK_,
       _aIL_,
       _aIM_,
       _aIN_,
       _aIO_,
       _aIP_,
       _aIQ_];
    caml_register_global
     (7587,Core_kernel_Linked_queue,"Core_kernel__Linked_queue");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$530);
    caml_call1(Expect_test_collector[4][1],cst_src_linked_stack_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$531,cst$295);
    var
     _aI5_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$99),
     _aI6_=
      caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_linked_stack_ml_5_19),
     _aI7_=
      [0,
       [0,cst_elts,bin_shape_list(caml_call2(Bin_prot_Shape[15],_aI6_,_aI5_))],
       [0,[0,cst_length$3,bin_shape_int],0]],
     _aI8_=caml_call1(Bin_prot_Shape[8],_aI7_),
     _aI9_=[0,caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$100),0],
     _aI__=
      [0,
       [0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$231),_aI9_,_aI8_],
       0],
     _aI$_=
      caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_linked_stack_ml_4_0),
     group$124=caml_call2(Bin_prot_Shape[6],_aI$_,_aI__);
    function bin_shape_t$103(a)
     {var _a2U_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$232);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$124,_a2U_),[0,a,0])}
    function bin_size_t$77(size_of_a,param)
     {var v1=param[1],v2=param[2],size=bin_size_list(size_of_a,v1) | 0;
      return size + caml_call1(bin_size_t$36,v2) | 0}
    function bin_write_t$78(write_a,buf,pos,param)
     {var v1=param[1],v2=param[2],pos$0=bin_write_list(write_a,buf,pos,v1);
      return caml_call3(bin_write_t$36,buf,pos$0,v2)}
    function bin_writer_t$92(bin_writer_a)
     {function _a2Q_(v)
       {var _a2R_=bin_writer_a[2];
        return function(_a2S_,_a2T_)
         {return bin_write_t$78(_a2R_,v,_a2S_,_a2T_)}}
      return [0,function(v){return bin_size_t$77(bin_writer_a[1],v)},_a2Q_]}
    function bin_read_t$153(of_a,buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_src_linked_stack_ml_t,pos_ref[1])}
    function bin_read_t$154(of_a,buf,pos_ref)
     {var
       v_elts=bin_read_list$0(of_a,buf,pos_ref),
       v_length=caml_call2(bin_read_t$74,buf,pos_ref);
      return [0,v_elts,v_length]}
    function bin_reader_t$92(bin_reader_a)
     {function _a2P_(buf,pos_ref,vtag)
       {return bin_read_t$153(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$154(bin_reader_a[1],buf,pos_ref)},
              _a2P_]}
    function bin_t$92(bin_a)
     {var _a2N_=bin_reader_t$92(bin_a[3]),_a2O_=bin_writer_t$92(bin_a[2]);
      return [0,bin_shape_t$103(bin_a[1]),_a2O_,_a2N_]}
    function length$43(r){return r[2]}
    function set_length$3(r,v){r[2] = v;return 0}
    function elts$0(r){return r[1]}
    function set_elts(r,v){r[1] = v;return 0}
    function _aJa_(r,v){return [0,r[1],v]}
    var
     _aJb_=[0,set_length$3],
     length$44=
      [0,[0,function(param){return 0},cst_length$4,_aJb_,length$43,_aJa_]];
    function _aJc_(r,v){return [0,v,r[2]]}
    var
     _aJd_=[0,set_elts],
     elts$1=[0,[0,function(param){return 0},cst_elts$0,_aJd_,elts$0,_aJc_]];
    function iter$40(elts_fun,length_fun)
     {caml_call1(elts_fun,elts$1);return caml_call1(length_fun,length$44)}
    function invariant$26(a_invariant,t)
     {try
       {var
         check=
          function(f,field)
           {return caml_call1(f,caml_call2(Base_Field[3],field,t))},
         _a2H_=
          function(length)
           {if(length === caml_call1(length$4,t[1]))return 0;
            throw [0,Assert_failure,_aJi_]},
         _a2I_=function(_a2M_){return check(_a2H_,_a2M_)},
         _a2J_=function(elts){return caml_call2(iter$2,elts,a_invariant)},
         _a2K_=iter$40(function(_a2L_){return check(_a2J_,_a2L_)},_a2I_);
        return _a2K_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        return failwiths
                (0,
                 _aJh_,
                 cst_Linked_stack_invariant_failed,
                 [0,exn,t],
                 function(param)
                  {var v1$0=param[2],v0=param[1],v0$0=caml_call1(_Tv_,v0);
                   function of_a(param){return _aJg_}
                   var
                    v_elts=v1$0[1],
                    v_length=v1$0[2],
                    arg=caml_call1(sexp_of_t$43,v_length),
                    bnds=[0,[1,[0,_aJe_,[0,arg,0]]],0],
                    arg$0=caml_call2(sexp_of_t$25,of_a,v_elts),
                    bnds$0=[0,[1,[0,_aJf_,[0,arg$0,0]]],bnds],
                    v1=[1,bnds$0];
                   return [1,[0,v0$0,[0,v1,0]]]})}}
    function create$61(param){return [0,0,0]}
    function singleton$13(a){return [0,[0,a,0],1]}
    function set$19(t,elts,length){t[1] = elts;t[2] = length;return 0}
    function push(t,x){return set$19(t,[0,x,t[1]],t[2] + 1 | 0)}
    var pop_error=caml_call1(_kz_,cst_Stack_pop_of_empty_stack);
    function pop_exn$1(t)
     {var _a2G_=t[1];
      if(_a2G_){var l=_a2G_[2],x=_a2G_[1];set$19(t,l,t[2] - 1 | 0);return x}
      return caml_call1(_kL_,pop_error)}
    function pop$1(t)
     {var _a2F_=t[1];
      if(_a2F_)
       {var l=_a2F_[2],x=_a2F_[1];set$19(t,l,t[2] - 1 | 0);return [0,x]}
      return 0}
    var top_error=caml_call1(_kz_,cst_Stack_top_of_empty_stack);
    function top_exn$2(t)
     {var _a2E_=t[1];
      if(_a2E_){var x=_a2E_[1];return x}
      return caml_call1(_kL_,top_error)}
    function top$2(t)
     {var _a2D_=t[1];if(_a2D_){var x=_a2D_[1];return [0,x]}return 0}
    function clear$8(t){return set$19(t,0,0)}
    function copy$8(t){return [0,t[1],t[2]]}
    function length$45(t){return t[2]}
    function is_empty$27(t){return 0 === t[2]?1:0}
    function iter$41(t,f){return caml_call2(iter$2,t[1],f)}
    function fold$29(t,init,f){return caml_call3(fold$2,t[1],init,f)}
    function fold_result$13(t,init,f)
     {return caml_call4(_hH_,fold$29,init,f,t)}
    function fold_until$13(t,init,f)
     {var _a2B_=caml_call3(_hI_,fold$29,init,f);
      return function(_a2C_){return caml_call2(_a2B_,_a2C_,t)}}
    function count$18(t,f){return caml_call2(count$1,t[1],f)}
    function sum$14(m,t,f){return caml_call3(sum$2,m,t[1],f)}
    function min_elt$21(t,compare){return caml_call2(min_elt$1,t[1],compare)}
    function max_elt$17(t,compare){return caml_call2(max_elt$1,t[1],compare)}
    function exists$23(t,f){return caml_call2(exists$1,t[1],f)}
    function mem$23(t,a,equal){return caml_call3(mem$2,t[1],a,equal)}
    function for_all$23(t,f){return caml_call2(for_all$1,t[1],f)}
    function find$24(t,f){return caml_call2(find$2,t[1],f)}
    function find_map$13(t,f){return caml_call2(find_map$1,t[1],f)}
    function to_list$23(t){return t[1]}
    function of_list$16(l){return [0,l,caml_call1(length$4,l)]}
    function to_array$17(t){return caml_call1(of_list$1,t[1])}
    function sexp_of_t$142(sexp_of_a,t)
     {var _a2A_=t[1];
      return caml_call1(caml_call1(sexp_of_t$25,sexp_of_a),_a2A_)}
    function t_of_sexp$109(a_of_sexp,sexp)
     {var elts=caml_call1(caml_call1(t_of_sexp$23,a_of_sexp),sexp);
      return [0,elts,caml_call1(length$4,elts)]}
    function until_empty$0(t,f)
     {for(;;)
       {var _a2z_=0 < t[2]?1:0;
        if(_a2z_){caml_call1(f,pop_exn$1(t));continue}
        return _a2z_}}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$532);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Linked_stack=
      [0,
       bin_t$92,
       bin_read_t$154,
       bin_read_t$153,
       bin_reader_t$92,
       bin_size_t$77,
       bin_write_t$78,
       bin_writer_t$92,
       bin_shape_t$103,
       t_of_sexp$109,
       sexp_of_t$142,
       invariant$26,
       mem$23,
       length$45,
       is_empty$27,
       iter$41,
       fold$29,
       fold_result$13,
       fold_until$13,
       exists$23,
       for_all$23,
       count$18,
       sum$14,
       find$24,
       find_map$13,
       to_list$23,
       to_array$17,
       min_elt$21,
       max_elt$17,
       of_list$16,
       create$61,
       singleton$13,
       push,
       pop$1,
       pop_exn$1,
       top$2,
       top_exn$2,
       clear$8,
       copy$8,
       until_empty$0];
    caml_register_global
     (7588,Core_kernel_Linked_stack,"Core_kernel__Linked_stack");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$533);
    caml_call1(Expect_test_collector[4][1],cst_src_no_polymorphic_compare_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$534,cst$296);
    function compare$82(param,_a2y_){return 723633086}
    function _aJj_(param,_a2x_){return 723633086}
    function _aJk_(param,_a2w_){return 723633086}
    function _aJl_(param,_a2v_){return 723633086}
    function _aJm_(param,_a2u_){return 723633086}
    function _aJn_(param,_a2t_){return 723633086}
    function _aJo_(param,_a2s_){return 723633086}
    function equal$46(param,_a2r_){return 723633086}
    function min$20(param,_a2q_){return 723633086}
    function max$20(param,_a2p_){return 723633086}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$535);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_No_polymorphic_compare=
      [0,
       compare$82,
       _aJj_,
       _aJk_,
       _aJl_,
       _aJm_,
       _aJn_,
       _aJo_,
       equal$46,
       min$20,
       max$20];
    caml_register_global
     (7589,
      Core_kernel_No_polymorphic_compare,
      "Core_kernel__No_polymorphic_compare");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$536);
    caml_call1(Expect_test_collector[4][1],cst_src_only_in_test_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$537,cst$297);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$538);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Only_in_test=
      [0,
       _Lp_,
       _Lq_,
       _Lr_,
       _Ls_,
       _Lt_,
       _Lu_,
       _Lv_,
       _Lw_,
       _Lx_,
       _Ly_,
       _Lz_,
       _LA_,
       _LD_,
       function(_a2n_)
        {var _a2o_=caml_obj_tag(_a2n_);
         return 250 === _a2o_
                 ?_a2n_[1]
                 :246 === _a2o_?caml_call1(CamlinternalLazy[2],_a2n_):_a2n_}];
    caml_register_global
     (7590,Core_kernel_Only_in_test,"Core_kernel__Only_in_test");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$539);
    caml_call1(Expect_test_collector[4][1],cst_src_pid_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$540,cst$298);
    var
     compare$83=Stable$3[1][9],
     Pid_must_be_positive=
      [248,
       cst_Core_kernel_Pid_Stable_V1_Without_containers_Pid_must_be_positive,
       caml_fresh_oo_id(0)];
    function _aJp_(param)
     {if(param[1] === Pid_must_be_positive)
       {var v0=param[2],v0$0=caml_call1(Stable$3[1][11],v0);
        return [1,[0,_aJq_,[0,v0$0,0]]]}
      throw [0,Assert_failure,_aJr_]}
    caml_call3(Sexplib0_Sexp_conv[51][2],0,Pid_must_be_positive,_aJp_);
    function ensure(i){if(0 < i)return i;throw [0,Pid_must_be_positive,i]}
    function to_sexpable$0(_a2m_){return _a2m_}
    var
     _aJs_=Stable$3[1],
     include$151=
      caml_call1
       (caml_call1(Stable[1][1],[0,_aJs_[10],_aJs_[11]]),
        [0,to_sexpable$0,ensure]),
     t_of_sexp$110=include$151[1],
     sexp_of_t$143=include$151[2];
    function to_binable$5(_a2l_){return _a2l_}
    var
     _aJt_=Stable$3[1],
     include$152=
      caml_call1
       (caml_call1
         (Stable$0[1][1],[0,_aJt_[8],_aJt_[5],_aJt_[6],_aJt_[2],_aJt_[3]]),
        [0,to_binable$5,ensure]),
     bin_size_t$78=include$152[1],
     bin_write_t$79=include$152[2],
     bin_read_t$155=include$152[3],
     bin_read_t$156=include$152[4],
     bin_shape_t$104=include$152[5],
     bin_writer_t$93=include$152[6],
     bin_reader_t$93=include$152[7],
     bin_t$93=include$152[8],
     include$153=caml_call2(_gG_[1][1],compare$83,sexp_of_t$143),
     comparator$30=include$153[1],
     _aJu_=
      caml_call1
       (Stable$2[1][1],
        [0,
         bin_t$93,
         bin_read_t$155,
         bin_read_t$156,
         bin_reader_t$93,
         bin_size_t$78,
         bin_write_t$79,
         bin_writer_t$93,
         bin_shape_t$104,
         compare$83,
         t_of_sexp$110,
         sexp_of_t$143,
         comparator$30]),
     Map$23=_aJu_[1],
     Set$23=_aJu_[2];
    function of_int$10(i){return ensure(i)}
    function to_int$7(_a2k_){return _a2k_}
    function of_string$25(string){return ensure(caml_call1(_xz_,string))}
    var
     init$16=of_int$10(1),
     _aJv_=
      [0,
       [0,
        caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$233),
        0,
        bin_shape_t$104],
       0],
     _aJw_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_pid_ml_47_4),
     group$125=caml_call2(Bin_prot_Shape[6],_aJw_,_aJv_),
     _aJx_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$234),
     bin_shape_t$105=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$125,_aJx_),0),
     bin_writer_t$94=[0,bin_size_t$78,bin_write_t$79],
     bin_reader_t$94=[0,bin_read_t$155,bin_read_t$156],
     bin_t$94=[0,bin_shape_t$105,bin_writer_t$94,bin_reader_t$94];
    function hash$47(x){return caml_call1(_u_,x)}
    var
     include$154=
      _wb_
       ([0,
         bin_t$94,
         bin_read_t$155,
         bin_read_t$156,
         bin_reader_t$94,
         bin_size_t$78,
         bin_write_t$79,
         bin_writer_t$94,
         bin_shape_t$105,
         compare$83,
         hash_fold_t,
         hash$47,
         t_of_sexp$110,
         sexp_of_t$143,
         comparator$30,
         of_string$25,
         _xy_,
         module_name$18]),
     _aJy_=include$154[1],
     _aJz_=include$154[2],
     _aJA_=include$154[3],
     _aJB_=include$154[4],
     _aJC_=include$154[5],
     _aJD_=include$154[6],
     _aJE_=include$154[7],
     _aJF_=include$154[8],
     _aJG_=include$154[9],
     _aJH_=include$154[10],
     _aJI_=include$154[11],
     _aJJ_=include$154[12],
     _aJK_=include$154[13],
     _aJL_=include$154[14],
     _aJM_=include$154[15],
     _aJN_=include$154[16],
     _aJO_=include$154[17],
     _aJP_=include$154[18],
     _aJQ_=include$154[19],
     _aJR_=include$154[20],
     _aJS_=include$154[21],
     _aJT_=include$154[22],
     _aJU_=include$154[23],
     _aJV_=include$154[24],
     _aJW_=include$154[25],
     _aJX_=include$154[26],
     _aJY_=include$154[27],
     _aJZ_=include$154[28],
     _aJ0_=include$154[29],
     _aJ1_=include$154[30],
     _aJ2_=include$154[31],
     _aJ3_=include$154[32],
     _aJ4_=include$154[33],
     _aJ5_=include$154[34],
     _aJ6_=include$154[35],
     _aJ7_=include$154[36],
     _aJ8_=include$154[37],
     _aJ9_=include$154[38],
     _aJ__=include$154[39],
     _aJ$_=include$154[40],
     _aKa_=include$154[41];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$541);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Pid=
      [0,
       _aJy_,
       _aJz_,
       _aJA_,
       _aJB_,
       _aJC_,
       _aJD_,
       _aJE_,
       _aJF_,
       _aJG_,
       _aJH_,
       _aJI_,
       _aJJ_,
       _aJK_,
       _aJL_,
       _aJM_,
       _aJN_,
       _aJO_,
       _aJP_,
       _aJQ_,
       _aJR_,
       _aJS_,
       _aJT_,
       _aJU_,
       _aJV_,
       _aJW_,
       _aJX_,
       _aJY_,
       _aJZ_,
       _aJ0_,
       _aJ1_,
       _aJ2_,
       _aJ3_,
       _aJ4_,
       _aJ5_,
       _aJ6_,
       _aJ7_,
       _aJ8_,
       _aJ9_,
       _aJ__,
       _aJ$_,
       _aKa_,
       of_int$10,
       to_int$7,
       init$16,
       [0,
        [0,
         bin_t$93,
         bin_read_t$155,
         bin_read_t$156,
         bin_reader_t$93,
         bin_size_t$78,
         bin_write_t$79,
         bin_writer_t$93,
         bin_shape_t$104,
         compare$83,
         t_of_sexp$110,
         sexp_of_t$143,
         comparator$30,
         Map$23,
         Set$23]]];
    caml_register_global(7591,Core_kernel_Pid,"Core_kernel__Pid");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$542);
    caml_call1(Expect_test_collector[4][1],cst_src_pooled_hashtbl_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$543,cst$299);
    var
     _aKd_=_aru_[14],
     Hashable$1=0,
     _aKb_=Base_Hashable[5],
     _aKc_=Base_Hashable[6];
    function next$6(p,t){return caml_call3(_aru_[31],p,t,_aru_[2][3])}
    function key$1(p,t){return caml_call3(_aru_[31],p,t,_aru_[2][4])}
    function data$10(p,t){return caml_call3(_aru_[31],p,t,_aru_[2][5])}
    function set_next$0(p,t,x){return caml_call4(_aru_[33],p,t,_aru_[2][3],x)}
    function set_data$0(p,t,x){return caml_call4(_aru_[33],p,t,_aru_[2][5],x)}
    function create$62(capacity)
     {return caml_call2(_aru_[35],_aru_[1][19],capacity)}
    var
     _aKe_=caml_call1(_aru_[1][2],_aru_[1][19]),
     max_capacity$0=caml_call1(_aru_[9],_aKe_),
     grow$1=_aru_[12],
     null$4=_aru_[3][4],
     is_null$2=_aru_[3][5];
    function sexp_of_key$1(t){return t[1][3]}
    function ensure_mutation_allowed(t)
     {var _a2j_=1 - t[8];
      return _a2j_
              ?caml_call1
                (_aV_,cst_Hashtbl_mutation_not_allowed_during_iteration)
              :_a2j_}
    function without_mutating(t,f,v)
     {if(t[8])
       {t[8] = 0;
        try
         {var x=caml_call1(f,v)}
        catch(exn){exn = caml_wrap_exception(exn);t[8] = 1;throw exn}
        t[8] = 1;
        return x}
      return caml_call1(f,v)}
    var
     max_table_length=caml_call1(floor_pow2,Stdlib_sys[14]),
     load_factor=0.85;
    function calculate_table_size(size)
     {var
       size$0=caml_call2(_xq_,size,Stdlib_sys[14]),
       capacity=caml_call1(ceil_pow2,size$0),
       n_entries=Math.ceil(caml_call2(_aO_,capacity,load_factor)) | 0,
       n_entries$0=caml_call2(_xp_,size$0,n_entries),
       n_entries$1=caml_call2(_xq_,n_entries$0,max_capacity$0);
      return [0,capacity,n_entries$1]}
    function create$63(opt,_a2i_,hashable,param)
     {if(opt)var sth=opt[1],growth_allowed=sth;else var growth_allowed=1;
      if(_a2i_)var sth$0=_a2i_[1],size=sth$0;else var size=128;
      var
       size$0=caml_call2(_xq_,caml_call2(_xp_,1,size),max_table_length),
       match=calculate_table_size(size$0),
       n_entries=match[2],
       capacity=match[1],
       table=caml_call2(create$0,capacity,caml_call1(null$4,0)),
       entries=create$62(n_entries);
      return [0,hashable,growth_allowed,0,capacity,entries,table,n_entries,1]}
    function table_set(t,h,e){t[h + 1] = e;return 0}
    function compare_key(t,k1,k2){return caml_call2(t[1][2],k1,k2)}
    function hashable$12(t){return t[1]}
    function hashable_s$0(t){return caml_call1(Base_Hashable[4],t[1])}
    function slot$0(t,key)
     {var _a2h_=caml_call2(_ai_,t[4],1);
      return caml_call2(_at_,caml_call1(t[1][1],key),_a2h_)}
    function length$46(t){return t[3]}
    function is_empty$28(t){return caml_call2(_aD_,t[3],0)}
    function clear$9(t)
     {ensure_mutation_allowed(t);
      var _a2e_=caml_call2(_ai_,t[4],1),_a2d_=0;
      if(! (_a2e_ < 0))
       {var i=_a2d_;
        for(;;)
         {var e$0=t[6][i + 1];
          if(1 - caml_call1(is_null$2,e$0))
           {var e=e$0;
            for(;;)
             {var next=next$6(t[5],e);
              caml_call2(_aKd_,t[5],e);
              if(1 - caml_call1(is_null$2,next)){var e=next;continue}
              var _a2f_=caml_call1(null$4,0);
              table_set(t[6],i,_a2f_);
              break}}
          var _a2g_=i + 1 | 0;
          if(_a2e_ !== i){var i=_a2g_;continue}
          break}}
      t[3] = 0;
      return 0}
    var
     on_grow=
      [0,
       function(param)
        {function _a2b_(param,_a2c_){return 0}
         return caml_call1(Base_Staged[1],_a2b_)}];
    function resize(t,size)
     {if(t[2])
       {var _a17_=caml_call2(_aE_,size,t[4]);
        if(_a17_)
         {var
           match=calculate_table_size(size),
           new_n_entries=match[2],
           new_capacity=match[1],
           old_capacity=t[4],
           old_table=t[6],
           _a18_=caml_call1(on_grow[1],0),
           after_grow=caml_call1(Base_Staged[2],_a18_);
          t[5] = caml_call2(grow$1,[0,new_n_entries],t[5]);
          t[6] = caml_call2(create$0,new_capacity,caml_call1(null$4,0));
          t[4] = new_capacity;
          t[7] = new_n_entries;
          var _a1__=caml_call2(_ai_,old_capacity,1),_a19_=0;
          if(! (_a1__ < 0))
           {var i=_a19_;
            a:
            for(;;)
             {var e$1=old_table[i + 1],e=e$1;
              for(;;)
               {if(1 - caml_call1(is_null$2,e))
                 {var
                   key=key$1(t[5],e),
                   e$0=next$6(t[5],e),
                   index=slot$0(t,key),
                   next=t[6][index + 1];
                  set_next$0(t[5],e,next);
                  table_set(t[6],index,e);
                  var e=e$0;
                  continue}
                var _a1$_=i + 1 | 0;
                if(_a1__ !== i){var i=_a1$_;continue a}
                break}
              break}}
          return caml_call2(after_grow,old_capacity,new_capacity)}
        return _a17_}
      var _a2a_=t[5];
      t[5] = caml_call2(grow$1,[0,caml_call2(_aj_,2,t[7])],_a2a_);
      t[7] = caml_call2(_aj_,2,t[7]);
      return 0}
    function on_grow$0(before,after)
     {var old_before=on_grow[1];
      on_grow[1]
      =
      function(param)
       {var
         _a15_=caml_call1(old_before,0),
         old_after=caml_call1(Base_Staged[2],_a15_),
         v=caml_call1(before,0);
        function _a16_(old_capacity,new_capacity)
         {caml_call2(old_after,old_capacity,new_capacity);
          return caml_call3(after,v,old_capacity,new_capacity)}
        return caml_call1(Base_Staged[1],_a16_)};
      return 0}
    function find_entry(t,key,it)
     {var it$0=it;
      for(;;)
       {if(caml_call1(is_null$2,it$0))return it$0;
        var curr_key=key$1(t[5],it$0);
        if(caml_call2(_aD_,compare_key(t,curr_key,key),0))return it$0;
        var it$1=next$6(t[5],it$0),it$0=it$1;
        continue}}
    function mem$24(t,key)
     {var index=slot$0(t,key),it=t[6][index + 1],e=find_entry(t,key,it);
      return 1 - caml_call1(is_null$2,e)}
    function insert_link_pool_not_full(t,index,key,data,it)
     {var e=caml_call4(_aru_[18],t[5],it,key,data);
      table_set(t[6],index,e);
      t[3] = caml_call2(_ah_,t[3],1);
      return 0}
    function insert_link(t,index,key,data,it)
     {if(caml_call2(_aA_,t[3],t[7]))
       return insert_link_pool_not_full(t,index,key,data,it);
      resize(t,caml_call2(_ah_,t[4],1));
      var index$0=slot$0(t,key),it$0=t[6][index$0 + 1];
      return insert_link_pool_not_full(t,index$0,key,data,it$0)}
    function delete_link(t,index,prev,e)
     {var next=next$6(t[5],e);
      if(caml_call1(is_null$2,prev))
       table_set(t[6],index,next);
      else
       set_next$0(t[5],prev,next);
      caml_call2(_aKd_,t[5],e);
      t[3] = caml_call2(_ai_,t[3],1);
      return 0}
    function set_or_entry(t,key,data)
     {var index=slot$0(t,key),it=t[6][index + 1],e=find_entry(t,key,it);
      if(caml_call1(is_null$2,e))insert_link(t,index,key,data,it);
      return e}
    function replace$0(t,key,data)
     {ensure_mutation_allowed(t);
      var e=set_or_entry(t,key,data),_a14_=1 - caml_call1(is_null$2,e);
      return _a14_?set_data$0(t[5],e,data):_a14_}
    function add$23(t,key,data)
     {ensure_mutation_allowed(t);
      var e=set_or_entry(t,key,data);
      return caml_call1(is_null$2,e)?17724:-1024851605}
    function add_exn$5(t,key,data)
     {var match=add$23(t,key,data);
      if(17724 <= match)return 0;
      var
       sexp_of_key=sexp_of_key$1(t),
       error=
        caml_call5
         (_kC_,
          0,
          0,
          cst_Pooled_hashtbl_add_exn_got_key_already_present,
          key,
          sexp_of_key);
      return caml_call1(_kL_,error)}
    function find_or_add_impl(t,key,without_mutating_make_default,default$0)
     {ensure_mutation_allowed(t);
      var index=slot$0(t,key),it=t[6][index + 1],e=find_entry(t,key,it);
      if(caml_call1(is_null$2,e))
       {var data=caml_call3(without_mutating_make_default,t,default$0,key);
        insert_link(t,index,key,data,it);
        return data}
      return data$10(t[5],e)}
    function without_mutating_make_default(t,default$0,key)
     {return without_mutating(t,default$0,key)}
    function findi_or_add$0(t,key,default$0)
     {return find_or_add_impl(t,key,without_mutating_make_default,default$0)}
    function without_mutating_make_default$0(t,default$0,key)
     {return without_mutating(t,default$0,0)}
    function find_or_add$1(t,key,default$0)
     {return find_or_add_impl(t,key,without_mutating_make_default$0,default$0)}
    function find$25(t,key)
     {var index=slot$0(t,key),it=t[6][index + 1],e=find_entry(t,key,it);
      return caml_call1(is_null$2,e)?0:[0,data$10(t[5],e)]}
    function find_exn$13(t,key)
     {var index=slot$0(t,key),it=t[6][index + 1],e=find_entry(t,key,it);
      if(caml_call1(is_null$2,e))throw Caml[141];
      return data$10(t[5],e)}
    function find_and_call_impl(t,key,call_if_found,if_found,if_not_found)
     {var index=slot$0(t,key),it=t[6][index + 1],e=find_entry(t,key,it);
      if(caml_call1(is_null$2,e))return caml_call1(if_not_found,key);
      var _a13_=data$10(t[5],e);
      return caml_call3(call_if_found,if_found,key$1(t[5],e),_a13_)}
    function call_if_found(if_found,param,data)
     {return caml_call1(if_found,data)}
    function find_and_call$0(t,key,if_found,if_not_found)
     {return find_and_call_impl(t,key,call_if_found,if_found,if_not_found)}
    function call_if_found$0(if_found,key,data)
     {return caml_call2(if_found,key,data)}
    function findi_and_call$0(t,key,if_found,if_not_found)
     {return find_and_call_impl(t,key,call_if_found$0,if_found,if_not_found)}
    function find_and_remove$0(t,key)
     {ensure_mutation_allowed(t);
      var index=slot$0(t,key),prev$0=t[6][index + 1];
      if(caml_call1(is_null$2,prev$0))return 0;
      if(caml_call2(_aD_,compare_key(t,key$1(t[5],prev$0),key),0))
       {var data$0=data$10(t[5],prev$0);
        delete_link(t,index,caml_call1(null$4,0),prev$0);
        return [0,data$0]}
      var e$1=next$6(t[5],prev$0);
      if(caml_call1(is_null$2,e$1))return 0;
      var e=e$1,prev=prev$0;
      for(;;)
       {if(caml_call2(_aD_,compare_key(t,key$1(t[5],e),key),0))
         {var data=data$10(t[5],e);
          delete_link(t,index,prev,e);
          return [0,data]}
        var e$0=next$6(t[5],e);
        if(caml_call1(is_null$2,e$0))return 0;
        var prev=e,e=e$0;
        continue}}
    function call$0(t,f,x)
     {var _a12_=0;
      return without_mutating(t,function(param){return caml_call1(f,x)},_a12_)}
    function change$8(t,key,f)
     {ensure_mutation_allowed(t);
      var
       index=slot$0(t,key),
       e$1=t[6][index + 1],
       prev$0=caml_call1(null$4,0),
       e=e$1,
       prev=prev$0;
      for(;;)
       {if(caml_call1(is_null$2,e))
         var match$0=-358247754;
        else
         {var curr_key=key$1(t[5],e);
          if(! caml_call2(_aD_,compare_key(t,curr_key,key),0))
           {var e$0=next$6(t[5],e),prev=e,e=e$0;continue}
          var match=call$0(t,f,[0,data$10(t[5],e)]);
          if(match)
           {var data=match[1];set_data$0(t[5],e,data)}
          else
           delete_link(t,index,prev,e);
          var match$0=438163668}
        if(438163668 <= match$0)return 0;
        var match$1=call$0(t,f,0);
        if(match$1)
         {var data$0=match$1[1];return insert_link(t,index,key,data$0,e$1)}
        return 0}}
    function incr_by(remove_if_zero,t,key,by)
     {if(remove_if_zero)
       return change$8
               (t,
                key,
                function(opt)
                 {var n=caml_call2(_ah_,by,caml_call2(value$0,opt,0));
                  return 0 === n?0:[0,n]});
      ensure_mutation_allowed(t);
      var e=set_or_entry(t,key,by),_a10_=1 - caml_call1(is_null$2,e);
      if(_a10_)
       {var data=data$10(t[5],e),_a11_=caml_call2(_ah_,data,by);
        return set_data$0(t[5],e,_a11_)}
      return _a10_}
    function incr$6(opt,_a1Z_,t,key)
     {if(opt)var sth=opt[1],by=sth;else var by=1;
      if(_a1Z_)
       var sth$0=_a1Z_[1],remove_if_zero=sth$0;
      else
       var remove_if_zero=0;
      return incr_by(remove_if_zero,t,key,by)}
    function decr$6(opt,_a1Y_,t,key)
     {if(opt)var sth=opt[1],by=sth;else var by=1;
      if(_a1Y_)
       var sth$0=_a1Y_[1],remove_if_zero=sth$0;
      else
       var remove_if_zero=0;
      return incr_by(remove_if_zero,t,key,caml_call1(_al_,by))}
    function update$6(t,key,f)
     {return change$8(t,key,function(data){return [0,caml_call1(f,data)]})}
    function remove$15(t,key)
     {ensure_mutation_allowed(t);
      var
       index=slot$0(t,key),
       prev$0=t[6][index + 1],
       _a1V_=1 - caml_call1(is_null$2,prev$0);
      if(_a1V_)
       {if(caml_call2(_aD_,compare_key(t,key$1(t[5],prev$0),key),0))
         return delete_link(t,index,caml_call1(null$4,0),prev$0);
        var e$0=next$6(t[5],prev$0),_a1W_=1 - caml_call1(is_null$2,e$0);
        if(_a1W_)
         {var e=e$0,prev=prev$0;
          for(;;)
           {if(caml_call2(_aD_,compare_key(t,key$1(t[5],e),key),0))
             return delete_link(t,index,prev,e);
            var next=next$6(t[5],e),_a1U_=1 - caml_call1(is_null$2,next);
            if(_a1U_){var prev=e,e=next;continue}
            return _a1U_}}
        var _a1X_=_a1W_}
      else
       var _a1X_=_a1V_;
      return _a1X_}
    function add_multi$4(t,key,data)
     {var match=find$25(t,key);
      if(match){var l=match[1];return replace$0(t,key,[0,data,l])}
      return replace$0(t,key,[0,data,0])}
    function find_multi$4(t,key)
     {var match=find$25(t,key);if(match){var l=match[1];return l}return 0}
    function remove_multi$4(t,key)
     {var match=find$25(t,key);
      if(match)
       {var _a1S_=match[1];
        if(_a1S_){var _a1T_=_a1S_[2];if(_a1T_)return replace$0(t,key,_a1T_)}
        return remove$15(t,key)}
      return 0}
    function loop$0(t,f,e)
     {var e$0=e;
      for(;;)
       {var _a1Q_=1 - caml_call1(is_null$2,e$0);
        if(_a1Q_)
         {var _a1R_=data$10(t[5],e$0);
          caml_call2(f,key$1(t[5],e$0),_a1R_);
          var e$1=next$6(t[5],e$0),e$0=e$1;
          continue}
        return _a1Q_}}
    function iteri$11(t,f)
     {if(caml_call2(_aD_,t[3],0))return 0;
      var m=t[8];
      try
       {t[8] = 0;
        var _a1O_=caml_call2(_ai_,t[4],1),_a1N_=0;
        if(! (_a1O_ < 0))
         {var i=_a1N_;
          for(;;)
           {loop$0(t,f,t[6][i + 1]);
            var _a1P_=i + 1 | 0;
            if(_a1O_ !== i){var i=_a1P_;continue}
            break}}}
      catch(exn){exn = caml_wrap_exception(exn);t[8] = m;throw exn}
      t[8] = m;
      return 0}
    function iter_vals$0(t,f)
     {return iteri$11(t,function(param,data){return caml_call1(f,data)})}
    function iter_keys$5(t,f)
     {return iteri$11(t,function(key,param){return caml_call1(f,key)})}
    function fold_entries(t,e,acc,f)
     {var e$0=e,acc$0=acc;
      for(;;)
       {if(caml_call1(is_null$2,e$0))return acc$0;
        var
         _a1M_=data$10(t[5],e$0),
         acc$1=caml_call3(f,key$1(t[5],e$0),_a1M_,acc$0),
         e$1=next$6(t[5],e$0),
         e$0=e$1,
         acc$0=acc$1;
        continue}}
    function fold$30(t,init,f)
     {if(caml_call2(_aD_,t[3],0))return init;
      var acc=[0,init],m=t[8];
      try
       {t[8] = 0;
        var _a1K_=caml_call2(_ai_,t[4],1),_a1J_=0;
        if(! (_a1K_ < 0))
         {var i=_a1J_;
          for(;;)
           {var e=t[6][i + 1];
            if(1 - caml_call1(is_null$2,e))
             acc[1] = fold_entries(t,e,acc[1],f);
            var _a1L_=i + 1 | 0;
            if(_a1K_ !== i){var i=_a1L_;continue}
            break}}}
      catch(exn){exn = caml_wrap_exception(exn);t[8] = m;throw exn}
      t[8] = m;
      return acc[1]}
    function invariant$27(invariant_key,invariant_data,t)
     {var n=caml_call1(length$1,t[6]),_a1F_=caml_call2(_ai_,n,1),_a1E_=0;
      if(! (_a1F_ < 0))
       {var i=_a1E_;
        for(;;)
         {var e=t[6][i + 1];
          if(! caml_call1(is_null$2,e))
           if(! caml_call2(_aD_,i,slot$0(t,key$1(t[5],e))))
            throw [0,Assert_failure,_aKh_];
          var _a1H_=i + 1 | 0;
          if(_a1F_ !== i){var i=_a1H_;continue}
          break}}
      var _a1G_=t[5];
      function _a1D_(_a1I_){return 0}
      caml_call2(_aru_[5],_a1D_,_a1G_);
      var
       real_len=
        fold$30
         (t,
          0,
          function(key,data,i)
           {caml_call1(invariant_key,key);
            caml_call1(invariant_data,data);
            return caml_call2(_ah_,i,1)});
      if(caml_call2(_aD_,real_len,t[3]))
       {if(caml_call2(_aB_,t[3],t[7]))return 0;throw [0,Assert_failure,_aKf_]}
      throw [0,Assert_failure,_aKg_]}
    function sexp_of_t$144(sexp_of_k,sexp_of_d,t)
     {function coll(k,v,acc)
       {var _a1C_=[0,caml_call1(sexp_of_d,v),0];
        return [0,[1,[0,caml_call1(sexp_of_k,k),_a1C_]],acc]}
      return [1,fold$30(t,0,coll)]}
    function existsi$9(t,f)
     {function _a1A_(r)
       {iteri$11
         (t,
          function(key,data)
           {var _a1B_=caml_call2(f,key,data);
            return _a1B_?caml_call1(r,1):_a1B_});
        return 0}
      return caml_call1(Base_With_return[1],_a1A_)}
    function exists$24(t,f)
     {return existsi$9(t,function(param,data){return caml_call1(f,data)})}
    function for_alli$9(t,f)
     {return 1
             -
             existsi$9
              (t,function(key,data){return 1 - caml_call2(f,key,data)})}
    function for_all$24(t,f)
     {return 1
             -
             existsi$9(t,function(param,data){return 1 - caml_call1(f,data)})}
    function counti$8(t,f)
     {return fold$30
              (t,
               0,
               function(key,data,acc)
                {return caml_call2(f,key,data)?caml_call2(_ah_,acc,1):acc})}
    function count$19(t,f)
     {return fold$30
              (t,
               0,
               function(param,data,acc)
                {return caml_call1(f,data)?caml_call2(_ah_,acc,1):acc})}
    function mapi$9(t,f)
     {var new_t=create$63([0,t[2]],[0,t[3]],t[1],0);
      iteri$11
       (t,
        function(key,data){return replace$0(new_t,key,caml_call2(f,key,data))});
      return new_t}
    function map$35(t,f)
     {return mapi$9(t,function(param,data){return caml_call1(f,data)})}
    function filter_mapi$9(t,f)
     {var new_t=create$63([0,t[2]],[0,t[3]],t[1],0);
      iteri$11
       (t,
        function(key,data)
         {var match=caml_call2(f,key,data);
          if(match)
           {var new_data=match[1];return replace$0(new_t,key,new_data)}
          return 0});
      return new_t}
    function filter_map$14(t,f)
     {return filter_mapi$9(t,function(param,data){return caml_call1(f,data)})}
    function filteri$9(t,f)
     {return filter_mapi$9
              (t,function(key,data){return caml_call2(f,key,data)?[0,data]:0})}
    function filter$16(t,f)
     {return filteri$9(t,function(param,data){return caml_call1(f,data)})}
    function filter_keys$5(t,f)
     {return filteri$9(t,function(key,param){return caml_call1(f,key)})}
    function partition_mapi$4(t,f)
     {var
       t0=create$63([0,t[2]],[0,t[3]],t[1],0),
       t1=create$63([0,t[2]],[0,t[3]],t[1],0);
      iteri$11
       (t,
        function(key,data)
         {var match=caml_call2(f,key,data);
          if(4152137 <= match[1])
           {var new_data=match[2];return replace$0(t1,key,new_data)}
          var new_data$0=match[2];
          return replace$0(t0,key,new_data$0)});
      return [0,t0,t1]}
    function partition_map$5(t,f)
     {return partition_mapi$4
              (t,function(param,data){return caml_call1(f,data)})}
    function partitioni_tf$5(t,f)
     {return partition_mapi$4
              (t,
               function(key,data)
                {return caml_call2(f,key,data)
                         ?[0,3506791,data]
                         :[0,4152137,data]})}
    function partition_tf$10(t,f)
     {return partitioni_tf$5
              (t,function(param,data){return caml_call1(f,data)})}
    function create_mapped$0
     (growth_allowed,size,hashable,get_key,get_data,rows)
     {if(size)
       var s=size[1],size$0=s;
      else
       var size$0=caml_call1(length$4,rows);
      var res=create$63(growth_allowed,[0,size$0],hashable,0),dupes=[0,0];
      caml_call2
       (iter$2,
        rows,
        function(r)
         {var key=caml_call1(get_key,r),data=caml_call1(get_data,r);
          return mem$24(res,key)
                  ?(dupes[1] = [0,key,dupes[1]],0)
                  :replace$0(res,key,data)});
      var _a1z_=dupes[1];
      return _a1z_
              ?[0,175765640,caml_call2(dedup_and_sort,hashable[2],_a1z_)]
              :[0,17724,res]}
    function of_alist$4(growth_allowed,size,hashable,lst)
     {var match=create_mapped$0(growth_allowed,size,hashable,_aT_,_aU_,lst);
      if(175765640 <= match[1])
       {var k=match[2];return [0,-1048878709,caml_call1(hd_exn$0,k)]}
      var t=match[2];
      return [0,17724,t]}
    function of_alist_report_all_dups$0(growth_allowed,size,hashable,lst)
     {return create_mapped$0(growth_allowed,size,hashable,_aT_,_aU_,lst)}
    function of_alist_or_error$4(growth_allowed,size,hashable,lst)
     {var match=of_alist$4(growth_allowed,size,hashable,lst);
      if(17724 <= match[1]){var v=match[2];return [0,v]}
      var key=match[2],sexp_of_key=hashable[3];
      return caml_call4
              (_lv_,
               0,
               cst_Pooled_hashtbl_of_alist_exn_duplicate_key,
               key,
               sexp_of_key)}
    function of_alist_exn$4(growth_allowed,size,hashable,lst)
     {var match=of_alist_or_error$4(growth_allowed,size,hashable,lst);
      if(0 === match[0]){var v=match[1];return v}
      var e=match[1];
      return caml_call1(_kL_,e)}
    function of_alist_multi$4(growth_allowed,size$0,hashable,lst)
     {if(size$0)var s=size$0[1],size=s;else var size=caml_call1(length$4,lst);
      var res=create$63(growth_allowed,[0,size],hashable,0);
      caml_call2
       (iter$2,
        lst,
        function(r)
         {var key=caml_call1(_aT_,r),data=caml_call1(_aU_,r);
          return add_multi$4(res,key,data)});
      return res}
    function to_alist$5(t)
     {return fold$30
              (t,0,function(key,data,list){return [0,[0,key,data],list]})}
    function validate$5(name,f,t)
     {var _a1y_=to_alist$5(t);
      return caml_call3(Base_Validate[31],name,f,_a1y_)}
    function keys$5(t)
     {return fold$30(t,0,function(key,param,acc){return [0,key,acc]})}
    function data$11(t)
     {return fold$30(t,0,function(param,data,list){return [0,data,list]})}
    function group$126
     (growth_allowed,size,hashable,get_key,get_data,combine,rows)
     {var groups=create$63(growth_allowed,size,hashable,0);
      caml_call2
       (iter$2,
        rows,
        function(row)
         {var
           key=caml_call1(get_key,row),
           data=caml_call1(get_data,row),
           match=find$25(groups,key);
          if(match)
           var old=match[1],data$0=caml_call2(combine,old,data);
          else
           var data$0=data;
          return replace$0(groups,key,data$0)});
      return groups}
    function create_with_key$0(growth_allowed,size,hashable,get_key,rows)
     {return create_mapped$0
              (growth_allowed,
               size,
               hashable,
               get_key,
               function(x){return x},
               rows)}
    function create_with_key_or_error$0
     (growth_allowed,size,hashable,get_key,rows)
     {var match=create_with_key$0(growth_allowed,size,hashable,get_key,rows);
      if(175765640 <= match[1])
       {var keys=match[2],sexp_of_key=hashable[3];
        return caml_call4
                (_lv_,
                 0,
                 cst_Pooled_hashtbl_create_with_key_duplicate_keys,
                 keys,
                 caml_call1(_I_,sexp_of_key))}
      var t=match[2];
      return [0,t]}
    function create_with_key_exn$0(growth_allowed,size,hashable,get_key,rows)
     {return caml_call1
              (_ls_,
               create_with_key_or_error$0
                (growth_allowed,size,hashable,get_key,rows))}
    function maybe_set(t,key,f,d)
     {var match=caml_call2(f,key,d);
      if(match){var v=match[1];return replace$0(t,key,v)}
      return 0}
    function merge$9(t_left,t_right,f)
     {if(1 - caml_call2(Base_Hashable[1],t_left[1],t_right[1]))
       caml_call1(_aW_,cst_Pooled_hashtbl_merge_different_hashable_values);
      var new_t=create$63([0,t_left[2]],[0,t_left[3]],t_left[1],0),_a1w_=0;
      without_mutating
       (t_left,
        function(param)
         {var _a1x_=0;
          return without_mutating
                  (t_right,
                   function(param)
                    {iteri$11
                      (t_left,
                       function(key,left)
                        {var match=find$25(t_right,key);
                         if(match)
                          {var right=match[1];
                           return maybe_set(new_t,key,f,[0,737457313,[0,left,right]])}
                         return maybe_set(new_t,key,f,[0,847852583,left])});
                     return iteri$11
                             (t_right,
                              function(key,right)
                               {var match=find$25(t_left,key);
                                return match?0:maybe_set(new_t,key,f,[0,-57574468,right])})},
                   _a1x_)},
        _a1w_);
      return new_t}
    function merge_into$0(src,dst,f)
     {return iteri$11
              (src,
               function(key,data)
                {var
                  dst_data=find$25(dst,key),
                  _a1u_=0,
                  action=
                   without_mutating
                    (dst,
                     function(param){return caml_call3(f,key,data,dst_data)},
                     _a1u_);
                 if(action)
                  {var data$0=action[1];
                   if(dst_data)
                    {var
                      dst_data$0=dst_data[1],
                      _a1v_=1 - (dst_data$0 === data$0?1:0);
                     return _a1v_?replace$0(dst,key,data$0):_a1v_}
                   return replace$0(dst,key,data$0)}
                 return remove$15(dst,key)})}
    function filteri_inplace$1(t,f)
     {var
       to_remove=
        fold$30
         (t,
          0,
          function(key,data,ac){return caml_call2(f,key,data)?ac:[0,key,ac]});
      return caml_call2
              (iter$2,to_remove,function(key){return remove$15(t,key)})}
    function filter_inplace$3(t,f)
     {return filteri_inplace$1
              (t,function(param,data){return caml_call1(f,data)})}
    function filter_keys_inplace$0(t,f)
     {return filteri_inplace$1
              (t,function(key,param){return caml_call1(f,key)})}
    function filter_replace_alli(t,f)
     {var
       map_results=
        fold$30
         (t,
          0,
          function(key,data,ac){return [0,[0,key,caml_call2(f,key,data)],ac]});
      return caml_call2
              (iter$2,
               map_results,
               function(param)
                {var result=param[2],key=param[1];
                 if(result){var data=result[1];return replace$0(t,key,data)}
                 return remove$15(t,key)})}
    function filter_replace_all(t,f)
     {return filter_replace_alli
              (t,function(param,data){return caml_call1(f,data)})}
    function replace_alli(t,f)
     {var
       map_results=
        fold$30
         (t,
          0,
          function(key,data,ac){return [0,[0,key,caml_call2(f,key,data)],ac]});
      return caml_call2
              (iter$2,
               map_results,
               function(param)
                {var data=param[2],key=param[1];return replace$0(t,key,data)})}
    function replace_all$0(t,f)
     {return replace_alli(t,function(param,data){return caml_call1(f,data)})}
    function similar$0(t$0,t,equal)
     {var _a1q_=caml_call2(_aD_,t$0[3],t[3]);
      if(_a1q_)
       {var
         _a1r_=
          function(r)
           {iteri$11
             (t$0,
              function(key,data)
               {var match=find$25(t,key);
                if(match)
                 {var
                   data$0=match[1],
                   _a1s_=0,
                   _a1t_=
                    1
                    -
                    without_mutating
                     (t,
                      function(param){return caml_call2(equal,data,data$0)},
                      _a1s_);
                  return _a1t_?caml_call1(r,0):_a1t_}
                return caml_call1(r,0)});
            return 1};
        return caml_call1(Base_With_return[1],_a1r_)}
      return _a1q_}
    function copy$9(t)
     {var
       _a1p_=caml_call1(null$4,0),
       table=caml_call2(create$0,t[4],_a1p_),
       entries=create$62(t[7]),
       copy=[0,t[1],t[2],0,t[4],entries,table,t[7],1];
      iteri$11(t,function(key,data){return add_exn$5(copy,key,data)});
      return copy}
    function Creators$1(Key)
     {var hashable=Key[1];
      function create(growth_allowed,size,param)
       {return create$63(growth_allowed,size,hashable,0)}
      function of_alist(growth_allowed,size,l)
       {return of_alist$4(growth_allowed,size,hashable,l)}
      function of_alist_report_all_dups(growth_allowed,size,l)
       {return of_alist_report_all_dups$0(growth_allowed,size,hashable,l)}
      function of_alist_or_error(growth_allowed,size,l)
       {return of_alist_or_error$4(growth_allowed,size,hashable,l)}
      function of_alist_exn(growth_allowed,size,l)
       {return of_alist_exn$4(growth_allowed,size,hashable,l)}
      function t_of_sexp(k_of_sexp,d_of_sexp,sexp)
       {var
         alist=
          caml_call1
           (caml_call1
             (_H_,
              function(sexp)
               {if(1 === sexp[0])
                 {var _a1n_=sexp[1];
                  if(_a1n_)
                   {var _a1o_=_a1n_[2];
                    if(_a1o_)
                     if(! _a1o_[2])
                      {var
                        v1=_a1o_[1],
                        v0=_a1n_[1],
                        v0$0=caml_call1(k_of_sexp,v0),
                        v1$0=caml_call1(d_of_sexp,v1);
                       return [0,v0$0,v1$0]}}}
                return caml_call3
                        (Sexplib0_Sexp_conv_error[2],tp_loc$48,2,sexp)}),
            sexp);
        return of_alist_exn(0,[0,caml_call1(length$4,alist)],alist)}
      function of_alist_multi(growth_allowed,size,l)
       {return of_alist_multi$4(growth_allowed,size,hashable,l)}
      function create_mapped(growth_allowed,size,get_key,get_data,l)
       {return create_mapped$0
                (growth_allowed,size,hashable,get_key,get_data,l)}
      function create_with_key(growth_allowed,size,get_key,l)
       {return create_with_key$0(growth_allowed,size,hashable,get_key,l)}
      function create_with_key_or_error(growth_allowed,size,get_key,l)
       {return create_with_key_or_error$0
                (growth_allowed,size,hashable,get_key,l)}
      function create_with_key_exn(growth_allowed,size,get_key,l)
       {return create_with_key_exn$0(growth_allowed,size,hashable,get_key,l)}
      function group(growth_allowed,size,get_key,get_data,combine,l)
       {return group$126
                (growth_allowed,size,hashable,get_key,get_data,combine,l)}
      return [0,
              t_of_sexp,
              create,
              of_alist,
              of_alist_report_all_dups,
              of_alist_or_error,
              of_alist_exn,
              of_alist_multi,
              create_mapped,
              create_with_key,
              create_with_key_or_error,
              create_with_key_exn,
              group]}
    var
     hashable$13=Base_Hashable[2],
     _aKi_=Creators$1([0,hashable$13]),
     _aKk_=_aKi_[2],
     _aKj_=_aKi_[1],
     _aKl_=_aKi_[3],
     _aKm_=_aKi_[4],
     _aKn_=_aKi_[5],
     _aKo_=_aKi_[6],
     _aKp_=_aKi_[7],
     _aKq_=_aKi_[8],
     _aKr_=_aKi_[9],
     _aKs_=_aKi_[10],
     _aKt_=_aKi_[11],
     _aKu_=_aKi_[12],
     _aKv_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_b$15),
     _aKw_=
      caml_call1
       (Bin_shape_lib_Bin_shape[4][1],cst_src_pooled_hashtbl_ml_1054_30),
     _aKx_=[0,caml_call2(Bin_prot_Shape[15],_aKw_,_aKv_),0],
     _aKy_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$101),
     _aKz_=
      caml_call1
       (Bin_shape_lib_Bin_shape[4][1],cst_src_pooled_hashtbl_ml_1054_25),
     _aKA_=[0,caml_call2(Bin_prot_Shape[15],_aKz_,_aKy_),_aKx_],
     _aKB_=caml_call1(Bin_prot_Shape[7],_aKA_),
     _aKC_=[0,caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_b$16),0],
     _aKD_=[0,caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$102),_aKC_],
     _aKE_=
      [0,
       [0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_el$21),_aKD_,_aKB_],
       0],
     _aKF_=
      caml_call1
       (Bin_shape_lib_Bin_shape[4][1],cst_src_pooled_hashtbl_ml_1054_6),
     group$127=caml_call2(Bin_prot_Shape[6],_aKF_,_aKE_);
    function bin_shape_el$6(a,b)
     {var _a1m_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_el$22);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$127,_a1m_),[0,a,[0,b,0]])}
    function bin_size_el$6(size_of_a,size_of_b,param)
     {var v2=param[2],v1=param[1],size=caml_call1(size_of_a,v1) | 0;
      return size + caml_call1(size_of_b,v2) | 0}
    function bin_write_el$6(write_a,write_b,buf,pos,param)
     {var v2=param[2],v1=param[1],pos$0=caml_call3(write_a,buf,pos,v1);
      return caml_call3(write_b,buf,pos$0,v2)}
    function bin_read_el$6(of_a,of_b,buf,pos_ref)
     {var v1=caml_call2(of_a,buf,pos_ref),v2=caml_call2(of_b,buf,pos_ref);
      return [0,v1,v2]}
    var
     caller_identity$6=
      caml_call1
       (Bin_shape_lib_Bin_shape[5][1],
        cst_a9b0d5e8_4992_11e6_a717_dfe192342aee);
    function iter$42(t,f)
     {return iteri$11(t,function(key,data){return caml_call1(f,[0,key,data])})}
    function init$17(len,next)
     {var
       t=caml_call3(_aKk_,0,[0,len],0),
       _a1k_=caml_call2(_ai_,len,1),
       _a1j_=0;
      if(! (_a1k_ < 0))
       {var i=_a1j_;
        for(;;)
         {var
           match=caml_call1(next,0),
           data=match[2],
           key=match[1],
           match$0=find$25(t,key);
          if(match$0)
           caml_call1(_aV_,cst_Pooled_hashtbl_bin_read_t_duplicate_key);
          else
           replace$0(t,key,data);
          var _a1l_=i + 1 | 0;
          if(_a1k_ !== i){var i=_a1l_;continue}
          break}}
      return t}
    var
     include$155=
      caml_call1
       (Bin_prot_Utils[13],
        [0,
         caller_identity$6,
         module_name$19,
         length$46,
         iter$42,
         init$17,
         bin_size_el$6,
         bin_write_el$6,
         bin_read_el$6,
         bin_shape_el$6]),
     bin_shape_t$106=include$155[1],
     bin_size_t$79=include$155[2],
     bin_write_t$80=include$155[3],
     bin_read_t$157=include$155[4],
     bin_read_t$158=include$155[5],
     bin_writer_t$95=include$155[6],
     bin_reader_t$95=include$155[7],
     bin_t$95=include$155[8];
    function Make_plain$3(Key)
     {var hashable=[0,Key[3],Key[1],Key[2]];
      function invariant(invariant_data,t)
       {return invariant$27(function(_a1i_){return 0},invariant_data,t)}
      var
       _a08_=Creators$1([0,hashable]),
       t_of_sexp=_a08_[1],
       create=_a08_[2],
       of_alist=_a08_[3],
       of_alist_report_all_dups=_a08_[4],
       of_alist_or_error=_a08_[5],
       of_alist_exn=_a08_[6],
       of_alist_multi=_a08_[7],
       create_mapped=_a08_[8],
       create_with_key=_a08_[9],
       create_with_key_or_error=_a08_[10],
       create_with_key_exn=_a08_[11],
       group=_a08_[12];
      function sexp_of_t(sexp_of_v,t)
       {return sexp_of_t$144(Key[2],sexp_of_v,t)}
      function Provide_of_sexp(X)
       {function t_of_sexp$0(v_of_sexp,sexp)
         {return caml_call3(t_of_sexp,X[1],v_of_sexp,sexp)}
        return [0,t_of_sexp$0]}
      function Provide_bin_io(X)
       {var
         sexp_of_t=Key[2],
         bin_read_t=X[2],
         bin_size_t=X[5],
         bin_write_t=X[6],
         bin_shape_t=X[8],
         _a09_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$103),
         _a0__=
          caml_call1
           (Bin_shape_lib_Bin_shape[4][1],cst_src_pooled_hashtbl_ml_1109_27),
         _a0$_=
          [0,bin_shape_t,[0,caml_call2(Bin_prot_Shape[15],_a0__,_a09_),0]],
         _a1a_=caml_call1(Bin_prot_Shape[7],_a0$_),
         _a1b_=[0,caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$104),0],
         _a1c_=
          [0,
           [0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_el$23),_a1b_,_a1a_],
           0],
         _a1d_=
          caml_call1
           (Bin_shape_lib_Bin_shape[4][1],cst_src_pooled_hashtbl_ml_1109_6),
         group=caml_call2(Bin_prot_Shape[6],_a1d_,_a1c_);
        function bin_shape_el(a)
         {var _a1h_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_el$24);
          return caml_call1
                  (caml_call2(Bin_prot_Shape[14],group,_a1h_),[0,a,0])}
        function bin_size_el(size_of_a,param)
         {var v2=param[2],v1=param[1],size=caml_call1(bin_size_t,v1) | 0;
          return size + caml_call1(size_of_a,v2) | 0}
        function bin_write_el(write_a,buf,pos,param)
         {var
           v2=param[2],
           v1=param[1],
           pos$0=caml_call3(bin_write_t,buf,pos,v1);
          return caml_call3(write_a,buf,pos$0,v2)}
        function bin_read_el(of_a,buf,pos_ref)
         {var
           v1=caml_call2(bin_read_t,buf,pos_ref),
           v2=caml_call2(of_a,buf,pos_ref);
          return [0,v1,v2]}
        var
         caller_identity=
          caml_call1
           (Bin_shape_lib_Bin_shape[5][1],
            cst_aa942e1a_4992_11e6_8f73_876922b0953c);
        function iter(t,f)
         {return iteri$11
                  (t,function(key,data){return caml_call1(f,[0,key,data])})}
        function init(len,next)
         {var
           t=caml_call3(create,0,[0,len],0),
           _a1f_=caml_call2(_ai_,len,1),
           _a1e_=0;
          if(! (_a1f_ < 0))
           {var i=_a1e_;
            for(;;)
             {var
               match=caml_call1(next,0),
               data=match[2],
               key=match[1],
               match$0=find$25(t,key);
              if(match$0)
               failwiths
                (0,
                 _aKG_,
                 cst_Pooled_hashtbl_bin_read_t_duplicate_key$0,
                 key,
                 sexp_of_t);
              else
               replace$0(t,key,data);
              var _a1g_=i + 1 | 0;
              if(_a1f_ !== i){var i=_a1g_;continue}
              break}}
          return t}
        return caml_call1
                (Bin_prot_Utils[12],
                 [0,
                  caller_identity,
                  module_name$20,
                  length$46,
                  iter,
                  init,
                  bin_size_el,
                  bin_write_el,
                  bin_read_el,
                  bin_shape_el])}
      return [0,
              hashable,
              invariant,
              t_of_sexp,
              create,
              of_alist,
              of_alist_report_all_dups,
              of_alist_or_error,
              of_alist_exn,
              of_alist_multi,
              create_mapped,
              create_with_key,
              create_with_key_or_error,
              create_with_key_exn,
              group,
              clear$9,
              copy$9,
              remove$15,
              replace$0,
              replace$0,
              add$23,
              add_exn$5,
              change$8,
              update$6,
              add_multi$4,
              remove_multi$4,
              find_multi$4,
              mem$24,
              iter_keys$5,
              iter_vals$0,
              iteri$11,
              exists$24,
              existsi$9,
              for_all$24,
              for_alli$9,
              count$19,
              counti$8,
              fold$30,
              length$46,
              is_empty$28,
              map$35,
              mapi$9,
              filter_map$14,
              filter_mapi$9,
              filter_keys$5,
              filter$16,
              filteri$9,
              partition_map$5,
              partition_mapi$4,
              partition_tf$10,
              partitioni_tf$5,
              find_or_add$1,
              findi_or_add$0,
              find$25,
              find_exn$13,
              find_and_call$0,
              findi_and_call$0,
              find_and_remove$0,
              to_alist$5,
              validate$5,
              merge$9,
              merge_into$0,
              keys$5,
              data$11,
              filter_keys_inplace$0,
              filter_inplace$3,
              filteri_inplace$1,
              replace_all$0,
              replace_alli,
              filter_replace_all,
              filter_replace_alli,
              similar$0,
              similar$0,
              incr$6,
              decr$6,
              sexp_of_key$1,
              sexp_of_t,
              Provide_of_sexp,
              Provide_bin_io]}
    function Make$19(Key)
     {var
       _a07_=Make_plain$3([0,Key[2],Key[3],Key[4]]),
       hashable=_a07_[1],
       invariant=_a07_[2],
       create=_a07_[4],
       of_alist=_a07_[5],
       of_alist_report_all_dups=_a07_[6],
       of_alist_or_error=_a07_[7],
       of_alist_exn=_a07_[8],
       of_alist_multi=_a07_[9],
       create_mapped=_a07_[10],
       create_with_key=_a07_[11],
       create_with_key_or_error=_a07_[12],
       create_with_key_exn=_a07_[13],
       group=_a07_[14],
       clear=_a07_[15],
       copy=_a07_[16],
       remove=_a07_[17],
       replace=_a07_[18],
       set=_a07_[19],
       add=_a07_[20],
       add_exn=_a07_[21],
       change=_a07_[22],
       update=_a07_[23],
       add_multi=_a07_[24],
       remove_multi=_a07_[25],
       find_multi=_a07_[26],
       mem=_a07_[27],
       iter_keys=_a07_[28],
       iter=_a07_[29],
       iteri=_a07_[30],
       exists=_a07_[31],
       existsi=_a07_[32],
       for_all=_a07_[33],
       for_alli=_a07_[34],
       count=_a07_[35],
       counti=_a07_[36],
       fold=_a07_[37],
       length=_a07_[38],
       is_empty=_a07_[39],
       map=_a07_[40],
       mapi=_a07_[41],
       filter_map=_a07_[42],
       filter_mapi=_a07_[43],
       filter_keys=_a07_[44],
       filter=_a07_[45],
       filteri=_a07_[46],
       partition_map=_a07_[47],
       partition_mapi=_a07_[48],
       partition_tf=_a07_[49],
       partitioni_tf=_a07_[50],
       find_or_add=_a07_[51],
       findi_or_add=_a07_[52],
       find=_a07_[53],
       find_exn=_a07_[54],
       find_and_call=_a07_[55],
       findi_and_call=_a07_[56],
       find_and_remove=_a07_[57],
       to_alist=_a07_[58],
       validate=_a07_[59],
       merge=_a07_[60],
       merge_into=_a07_[61],
       keys=_a07_[62],
       data=_a07_[63],
       filter_keys_inplace=_a07_[64],
       filter_inplace=_a07_[65],
       filteri_inplace=_a07_[66],
       map_inplace=_a07_[67],
       mapi_inplace=_a07_[68],
       filter_map_inplace=_a07_[69],
       filter_mapi_inplace=_a07_[70],
       equal=_a07_[71],
       similar=_a07_[72],
       incr=_a07_[73],
       decr=_a07_[74],
       sexp_of_key=_a07_[75],
       sexp_of_t=_a07_[76],
       Provide_of_sexp=_a07_[77],
       Provide_bin_io=_a07_[78],
       include=caml_call1(Provide_of_sexp,[0,Key[1]]),
       t_of_sexp=include[1];
      return [0,
              hashable,
              invariant,
              create,
              of_alist,
              of_alist_report_all_dups,
              of_alist_or_error,
              of_alist_exn,
              of_alist_multi,
              create_mapped,
              create_with_key,
              create_with_key_or_error,
              create_with_key_exn,
              group,
              clear,
              copy,
              remove,
              replace,
              set,
              add,
              add_exn,
              change,
              update,
              add_multi,
              remove_multi,
              find_multi,
              mem,
              iter_keys,
              iter,
              iteri,
              exists,
              existsi,
              for_all,
              for_alli,
              count,
              counti,
              fold,
              length,
              is_empty,
              map,
              mapi,
              filter_map,
              filter_mapi,
              filter_keys,
              filter,
              filteri,
              partition_map,
              partition_mapi,
              partition_tf,
              partitioni_tf,
              find_or_add,
              findi_or_add,
              find,
              find_exn,
              find_and_call,
              findi_and_call,
              find_and_remove,
              to_alist,
              validate,
              merge,
              merge_into,
              keys,
              data,
              filter_keys_inplace,
              filter_inplace,
              filteri_inplace,
              map_inplace,
              mapi_inplace,
              filter_map_inplace,
              filter_mapi_inplace,
              equal,
              similar,
              incr,
              decr,
              sexp_of_key,
              sexp_of_t,
              Provide_of_sexp,
              Provide_bin_io,
              t_of_sexp]}
    function M$1(K){return [0]}
    function create$64(growth_allowed,size,m)
     {return create$63(growth_allowed,size,caml_call1(Base_Hashable[3],m),0)}
    function of_alist$5(growth_allowed,size,m,l)
     {return of_alist$4(growth_allowed,size,caml_call1(Base_Hashable[3],m),l)}
    function of_alist_report_all_dups$1(growth_allowed,size,m,l)
     {return of_alist_report_all_dups$0
              (growth_allowed,size,caml_call1(Base_Hashable[3],m),l)}
    function of_alist_or_error$5(growth_allowed,size,m,l)
     {return of_alist_or_error$4
              (growth_allowed,size,caml_call1(Base_Hashable[3],m),l)}
    function of_alist_exn$5(growth_allowed,size,m,l)
     {return of_alist_exn$4
              (growth_allowed,size,caml_call1(Base_Hashable[3],m),l)}
    function of_alist_multi$5(growth_allowed,size,m,l)
     {return of_alist_multi$4
              (growth_allowed,size,caml_call1(Base_Hashable[3],m),l)}
    function create_mapped$1(growth_allowed,size,m,get_key,get_data,l)
     {return create_mapped$0
              (growth_allowed,
               size,
               caml_call1(Base_Hashable[3],m),
               get_key,
               get_data,
               l)}
    function create_with_key$1(growth_allowed,size,m,get_key,l)
     {return create_with_key$0
              (growth_allowed,size,caml_call1(Base_Hashable[3],m),get_key,l)}
    function create_with_key_or_error$1(growth_allowed,size,m,get_key,l)
     {return create_with_key_or_error$0
              (growth_allowed,size,caml_call1(Base_Hashable[3],m),get_key,l)}
    function create_with_key_exn$1(growth_allowed,size,m,get_key,l)
     {return create_with_key_exn$0
              (growth_allowed,size,caml_call1(Base_Hashable[3],m),get_key,l)}
    function group$128(growth_allowed,size,m,get_key,get_data,combine,l)
     {return group$126
              (growth_allowed,
               size,
               caml_call1(Base_Hashable[3],m),
               get_key,
               get_data,
               combine,
               l)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$544);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    function _aKH_(_a0W_)
     {var
       _a0X_=_a0W_[1],
       _a0Y_=_a0W_[4],
       _a0Z_=_a0W_[7],
       _a00_=_a0W_[8],
       _a01_=_a0W_[3],
       _a02_=_a0W_[2],
       _a03_=_a0W_[6],
       _a04_=_a0W_[5],
       _a0V_=Make$19([0,_a0W_[9],_a0W_[10],_a0W_[11],_a0W_[12]]),
       hashable=_a0V_[1],
       invariant=_a0V_[2],
       create=_a0V_[3],
       of_alist=_a0V_[4],
       of_alist_report_all_dups=_a0V_[5],
       of_alist_or_error=_a0V_[6],
       of_alist_exn=_a0V_[7],
       of_alist_multi=_a0V_[8],
       create_mapped=_a0V_[9],
       create_with_key=_a0V_[10],
       create_with_key_or_error=_a0V_[11],
       create_with_key_exn=_a0V_[12],
       group=_a0V_[13],
       clear=_a0V_[14],
       copy=_a0V_[15],
       remove=_a0V_[16],
       set=_a0V_[18],
       add=_a0V_[19],
       add_exn=_a0V_[20],
       change=_a0V_[21],
       update=_a0V_[22],
       add_multi=_a0V_[23],
       remove_multi=_a0V_[24],
       find_multi=_a0V_[25],
       mem=_a0V_[26],
       iter_keys=_a0V_[27],
       iter=_a0V_[28],
       iteri=_a0V_[29],
       exists=_a0V_[30],
       existsi=_a0V_[31],
       for_all=_a0V_[32],
       for_alli=_a0V_[33],
       count=_a0V_[34],
       counti=_a0V_[35],
       fold=_a0V_[36],
       length=_a0V_[37],
       is_empty=_a0V_[38],
       map=_a0V_[39],
       mapi=_a0V_[40],
       filter_map=_a0V_[41],
       filter_mapi=_a0V_[42],
       filter_keys=_a0V_[43],
       filter=_a0V_[44],
       filteri=_a0V_[45],
       partition_map=_a0V_[46],
       partition_mapi=_a0V_[47],
       partition_tf=_a0V_[48],
       partitioni_tf=_a0V_[49],
       find_or_add=_a0V_[50],
       findi_or_add=_a0V_[51],
       find=_a0V_[52],
       find_exn=_a0V_[53],
       find_and_call=_a0V_[54],
       findi_and_call=_a0V_[55],
       find_and_remove=_a0V_[56],
       to_alist=_a0V_[57],
       validate=_a0V_[58],
       merge=_a0V_[59],
       merge_into=_a0V_[60],
       keys=_a0V_[61],
       data=_a0V_[62],
       filter_keys_inplace=_a0V_[63],
       filter_inplace=_a0V_[64],
       filteri_inplace=_a0V_[65],
       map_inplace=_a0V_[66],
       mapi_inplace=_a0V_[67],
       filter_map_inplace=_a0V_[68],
       filter_mapi_inplace=_a0V_[69],
       equal=_a0V_[70],
       similar=_a0V_[71],
       incr=_a0V_[72],
       decr=_a0V_[73],
       sexp_of_key=_a0V_[74],
       sexp_of_t=_a0V_[75],
       Provide_of_sexp=_a0V_[76],
       Provide_bin_io=_a0V_[77],
       t_of_sexp=_a0V_[78],
       include=
        caml_call1
         (Provide_bin_io,[0,_a0X_,_a02_,_a01_,_a0Y_,_a04_,_a03_,_a0Z_,_a00_]),
       bin_shape_t=include[1],
       bin_size_t=include[2],
       bin_write_t=include[3],
       bin_read_t=include[4],
       bin_read_t$0=include[5],
       bin_writer_t=include[6],
       bin_reader_t=include[7],
       bin_t=include[8];
      return [0,
              sexp_of_t,
              hashable,
              invariant,
              create,
              of_alist,
              of_alist_report_all_dups,
              of_alist_or_error,
              of_alist_exn,
              of_alist_multi,
              create_mapped,
              create_with_key,
              create_with_key_or_error,
              create_with_key_exn,
              group,
              sexp_of_key,
              clear,
              copy,
              fold,
              iter_keys,
              iter,
              iteri,
              existsi,
              exists,
              for_alli,
              for_all,
              counti,
              count,
              length,
              is_empty,
              mem,
              remove,
              set,
              add,
              add_exn,
              change,
              update,
              map,
              mapi,
              filter_map,
              filter_mapi,
              filter_keys,
              filter,
              filteri,
              partition_map,
              partition_mapi,
              partition_tf,
              partitioni_tf,
              find_or_add,
              findi_or_add,
              find,
              find_exn,
              find_and_call,
              findi_and_call,
              find_and_remove,
              merge,
              merge_into,
              keys,
              data,
              filter_keys_inplace,
              filter_inplace,
              filteri_inplace,
              map_inplace,
              mapi_inplace,
              filter_map_inplace,
              filter_mapi_inplace,
              equal,
              similar,
              to_alist,
              validate,
              incr,
              decr,
              add_multi,
              remove_multi,
              find_multi,
              Provide_of_sexp,
              function(_a05_)
               {var _a06_=caml_call1(Provide_bin_io,_a05_);
                return [0,
                        _a06_[8],
                        _a06_[4],
                        _a06_[5],
                        _a06_[7],
                        _a06_[2],
                        _a06_[3],
                        _a06_[6],
                        _a06_[1]]},
              t_of_sexp,
              bin_shape_t,
              bin_size_t,
              bin_write_t,
              bin_read_t,
              bin_read_t$0,
              bin_writer_t,
              bin_reader_t,
              bin_t]}
    function _aKI_(_a0O_)
     {var _a0P_=Make$19(_a0O_),_a0Q_=_a0P_[78],_a0R_=_a0P_[77];
      function _a0S_(_a0T_)
       {var _a0U_=caml_call1(_a0R_,_a0T_);
        return [0,
                _a0U_[8],
                _a0U_[4],
                _a0U_[5],
                _a0U_[7],
                _a0U_[2],
                _a0U_[3],
                _a0U_[6],
                _a0U_[1]]}
      return [0,
              _a0P_[75],
              _a0P_[1],
              _a0P_[2],
              _a0P_[3],
              _a0P_[4],
              _a0P_[5],
              _a0P_[6],
              _a0P_[7],
              _a0P_[8],
              _a0P_[9],
              _a0P_[10],
              _a0P_[11],
              _a0P_[12],
              _a0P_[13],
              _a0P_[74],
              _a0P_[14],
              _a0P_[15],
              _a0P_[36],
              _a0P_[27],
              _a0P_[28],
              _a0P_[29],
              _a0P_[31],
              _a0P_[30],
              _a0P_[33],
              _a0P_[32],
              _a0P_[35],
              _a0P_[34],
              _a0P_[37],
              _a0P_[38],
              _a0P_[26],
              _a0P_[16],
              _a0P_[18],
              _a0P_[19],
              _a0P_[20],
              _a0P_[21],
              _a0P_[22],
              _a0P_[39],
              _a0P_[40],
              _a0P_[41],
              _a0P_[42],
              _a0P_[43],
              _a0P_[44],
              _a0P_[45],
              _a0P_[46],
              _a0P_[47],
              _a0P_[48],
              _a0P_[49],
              _a0P_[50],
              _a0P_[51],
              _a0P_[52],
              _a0P_[53],
              _a0P_[54],
              _a0P_[55],
              _a0P_[56],
              _a0P_[59],
              _a0P_[60],
              _a0P_[61],
              _a0P_[62],
              _a0P_[63],
              _a0P_[64],
              _a0P_[65],
              _a0P_[66],
              _a0P_[67],
              _a0P_[68],
              _a0P_[69],
              _a0P_[70],
              _a0P_[71],
              _a0P_[57],
              _a0P_[58],
              _a0P_[72],
              _a0P_[73],
              _a0P_[23],
              _a0P_[24],
              _a0P_[25],
              _a0P_[76],
              _a0S_,
              _a0Q_]}
    var
     Core_kernel_Pooled_hashtbl=
      [0,
       _aKc_,
       _aKb_,
       sexp_of_t$144,
       invariant$27,
       create$64,
       of_alist$5,
       of_alist_report_all_dups$1,
       of_alist_or_error$5,
       of_alist_exn$5,
       of_alist_multi$5,
       create_mapped$1,
       create_with_key$1,
       create_with_key_or_error$1,
       create_with_key_exn$1,
       group$128,
       sexp_of_key$1,
       clear$9,
       copy$9,
       fold$30,
       iter_keys$5,
       iter_vals$0,
       iteri$11,
       existsi$9,
       exists$24,
       for_alli$9,
       for_all$24,
       counti$8,
       count$19,
       length$46,
       is_empty$28,
       mem$24,
       remove$15,
       replace$0,
       add$23,
       add_exn$5,
       change$8,
       update$6,
       map$35,
       mapi$9,
       filter_map$14,
       filter_mapi$9,
       filter_keys$5,
       filter$16,
       filteri$9,
       partition_map$5,
       partition_mapi$4,
       partition_tf$10,
       partitioni_tf$5,
       find_or_add$1,
       findi_or_add$0,
       find$25,
       find_exn$13,
       find_and_call$0,
       findi_and_call$0,
       find_and_remove$0,
       merge$9,
       merge_into$0,
       keys$5,
       data$11,
       filter_keys_inplace$0,
       filter_inplace$3,
       filteri_inplace$1,
       replace_all$0,
       replace_alli,
       filter_replace_all,
       filter_replace_alli,
       similar$0,
       similar$0,
       to_alist$5,
       validate$5,
       incr$6,
       decr$6,
       add_multi$4,
       remove_multi$4,
       find_multi$4,
       hashable_s$0,
       [0,
        create$63,
        of_alist$4,
        of_alist_report_all_dups$0,
        of_alist_or_error$4,
        of_alist_exn$4,
        of_alist_multi$4,
        create_mapped$0,
        create_with_key$0,
        create_with_key_or_error$0,
        create_with_key_exn$0,
        group$126],
       [0,
        bin_t$95,
        bin_read_t$157,
        bin_read_t$158,
        bin_reader_t$95,
        bin_size_t$79,
        bin_write_t$80,
        bin_writer_t$95,
        bin_shape_t$106,
        _aKj_,
        sexp_of_t$144,
        hashable$13,
        invariant$27,
        _aKk_,
        _aKl_,
        _aKm_,
        _aKn_,
        _aKo_,
        _aKp_,
        _aKq_,
        _aKr_,
        _aKs_,
        _aKt_,
        _aKu_,
        sexp_of_key$1,
        clear$9,
        copy$9,
        fold$30,
        iter_keys$5,
        iter_vals$0,
        iteri$11,
        existsi$9,
        exists$24,
        for_alli$9,
        for_all$24,
        counti$8,
        count$19,
        length$46,
        is_empty$28,
        mem$24,
        remove$15,
        replace$0,
        add$23,
        add_exn$5,
        change$8,
        update$6,
        map$35,
        mapi$9,
        filter_map$14,
        filter_mapi$9,
        filter_keys$5,
        filter$16,
        filteri$9,
        partition_map$5,
        partition_mapi$4,
        partition_tf$10,
        partitioni_tf$5,
        find_or_add$1,
        findi_or_add$0,
        find$25,
        find_exn$13,
        find_and_call$0,
        findi_and_call$0,
        find_and_remove$0,
        merge$9,
        merge_into$0,
        keys$5,
        data$11,
        filter_keys_inplace$0,
        filter_inplace$3,
        filteri_inplace$1,
        replace_all$0,
        replace_alli,
        filter_replace_all,
        filter_replace_alli,
        similar$0,
        similar$0,
        to_alist$5,
        validate$5,
        incr$6,
        decr$6,
        add_multi$4,
        remove_multi$4,
        find_multi$4],
       function(_a0I_)
        {var _a0J_=Make_plain$3(_a0I_),_a0K_=_a0J_[78];
         function _a0L_(_a0M_)
          {var _a0N_=caml_call1(_a0K_,_a0M_);
           return [0,
                   _a0N_[8],
                   _a0N_[4],
                   _a0N_[5],
                   _a0N_[7],
                   _a0N_[2],
                   _a0N_[3],
                   _a0N_[6],
                   _a0N_[1]]}
         return [0,
                 _a0J_[76],
                 _a0J_[1],
                 _a0J_[2],
                 _a0J_[4],
                 _a0J_[5],
                 _a0J_[6],
                 _a0J_[7],
                 _a0J_[8],
                 _a0J_[9],
                 _a0J_[10],
                 _a0J_[11],
                 _a0J_[12],
                 _a0J_[13],
                 _a0J_[14],
                 _a0J_[75],
                 _a0J_[15],
                 _a0J_[16],
                 _a0J_[37],
                 _a0J_[28],
                 _a0J_[29],
                 _a0J_[30],
                 _a0J_[32],
                 _a0J_[31],
                 _a0J_[34],
                 _a0J_[33],
                 _a0J_[36],
                 _a0J_[35],
                 _a0J_[38],
                 _a0J_[39],
                 _a0J_[27],
                 _a0J_[17],
                 _a0J_[19],
                 _a0J_[20],
                 _a0J_[21],
                 _a0J_[22],
                 _a0J_[23],
                 _a0J_[40],
                 _a0J_[41],
                 _a0J_[42],
                 _a0J_[43],
                 _a0J_[44],
                 _a0J_[45],
                 _a0J_[46],
                 _a0J_[47],
                 _a0J_[48],
                 _a0J_[49],
                 _a0J_[50],
                 _a0J_[51],
                 _a0J_[52],
                 _a0J_[53],
                 _a0J_[54],
                 _a0J_[55],
                 _a0J_[56],
                 _a0J_[57],
                 _a0J_[60],
                 _a0J_[61],
                 _a0J_[62],
                 _a0J_[63],
                 _a0J_[64],
                 _a0J_[65],
                 _a0J_[66],
                 _a0J_[67],
                 _a0J_[68],
                 _a0J_[69],
                 _a0J_[70],
                 _a0J_[71],
                 _a0J_[72],
                 _a0J_[58],
                 _a0J_[59],
                 _a0J_[73],
                 _a0J_[74],
                 _a0J_[24],
                 _a0J_[25],
                 _a0J_[26],
                 _a0J_[77],
                 _a0L_]},
       _aKI_,
       _aKH_,
       M$1,
       Hashable$1,
       hashable$12,
       iter_vals$0,
       replace$0,
       replace_all$0,
       replace_alli,
       filter_replace_all,
       filter_replace_alli,
       resize,
       on_grow$0];
    caml_register_global
     (7592,Core_kernel_Pooled_hashtbl,"Core_kernel__Pooled_hashtbl");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$545);
    caml_call1(Expect_test_collector[4][1],cst_src_printexc_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$546,cst$300);
    function to_string$32(param){return 751446320}
    function print(param){return 751446320}
    function catch$0(param,_a0H_){return -352320217}
    var
     _aKJ_=Stdlib_printexc[4],
     _aKK_=Stdlib_printexc[5],
     _aKL_=Stdlib_printexc[6],
     _aKM_=Stdlib_printexc[7];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$547);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Printexc=
      [0,to_string$32,print,catch$0,_aKJ_,_aKK_,_aKL_,_aKM_];
    caml_register_global(7594,Core_kernel_Printexc,"Core_kernel__Printexc");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$548);
    caml_call1(Expect_test_collector[4][1],cst_src_rope_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$549,cst$301);
    function of_string$26(s){return [0,caml_ml_string_length(s),[0,s]]}
    var empty$15=of_string$26(cst$302);
    function length$47(t){return t[1]}
    function is_empty$29(t){return caml_call2(_aD_,t[1],0)}
    function _aKN_(param){return is_empty$29(empty$15)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[4],
      Inline_test_config,
      cst_is_empty_empty$0,
      0,
      cst_src_rope_ml$0,
      22,
      0,
      27,
      _aKN_);
    function _aKO_(param){return 1 - is_empty$29(of_string$26(cst_non_empty))}
    caml_call8
     (Ppx_inline_test_lib_Runtime[4],
      Inline_test_config,
      cst_not_is_empty_of_string_non_empty,
      0,
      cst_src_rope_ml$1,
      23,
      0,
      51,
      _aKO_);
    function to_string$33(param)
     {var tree=param[2],len=param[1];
      if(0 === tree[0]){var s=tree[1];return s}
      var
       s2=tree[2],
       s1=tree[1],
       buf=caml_call1(create$13,len),
       todo$2=[0,s2,0],
       todo=todo$2,
       start=0,
       param$0=s1;
      for(;;)
       {if(0 === param$0[0])
         {var s$0=param$0[1];
          caml_call5
           (Base_Bytes[31][1],s$0,0,buf,start,caml_ml_string_length(s$0));
          var start$0=caml_call2(_ah_,start,caml_ml_string_length(s$0));
          if(todo)
           {var
             todo$0=todo[2],
             param$1=todo[1],
             todo=todo$0,
             start=start$0,
             param$0=param$1;
            continue}
          if(caml_call2(_aD_,start$0,len))
           return caml_call1(unsafe_to_string,buf);
          throw [0,Assert_failure,_aKP_]}
        var
         s2$0=param$0[2],
         param$2=param$0[1],
         todo$1=[0,s2$0,todo],
         todo=todo$1,
         param$0=param$2;
        continue}}
    function _aKQ_(a,b)
     {if(is_empty$29(a))return b;
      if(is_empty$29(b))return a;
      var _a0C_=b[1];
      if(caml_call2(_aA_,caml_call2(_ai_,_Hn_,a[1]),_a0C_))
       {var
         _a0D_=[0,[1,[0,_aKR_,[0,caml_call1(sexp_of_t$0,_Hn_),0]]],0],
         _a0E_=[0,[1,[0,_aKS_,[0,caml_call1(sexp_of_t$0,b[1]),0]]],_a0D_],
         _a0F_=[0,[1,[0,_aKT_,[0,caml_call1(sexp_of_t$0,a[1]),0]]],_a0E_];
        return caml_call1
                (_kM_,
                 [1,
                  [0,
                   caml_call1
                    (Sexplib0_Sexp_conv[7],
                     cst_Rope_a_b_would_be_longer_than_String_max_length),
                   _a0F_]])}
      var _a0G_=[1,a[2],b[2]];
      return [0,caml_call2(_ah_,a[1],b[1]),_a0G_]}
    function _aKU_(param)
     {var x=of_string$26(cst_x$7);
      function _a0B_(param)
       {return caml_call3(_hU_,num_bits$0,function(x){return _aKQ_(x,x)},x)}
      return caml_call1(Base_Exn[16],_a0B_)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[4],
      Inline_test_config,
      cst_length_overflow,
      0,
      cst_src_rope_ml$2,
      60,
      0,
      136,
      _aKU_);
    function concat$4(opt,ts)
     {if(opt)var sth=opt[1],sep=sth;else var sep=empty$15;
      return caml_call2
              (value$0,
               caml_call2
                (reduce$1,ts,function(x,y){return _aKQ_(x,_aKQ_(sep,y))}),
               empty$15)}
    function _aKV_(param)
     {var got=to_string$33(concat$4([0,of_string$26(cst$303)],0));
      caml_call8
       (Ppx_assert_lib_Runtime[3],pos$130,_Z_,_V_,0,0,0,expect$37,got);
      var
       _a0y_=[0,of_string$26(cst_three),0],
       _a0z_=[0,of_string$26(cst_two),_a0y_],
       _a0A_=[0,of_string$26(cst_one),_a0z_],
       got$0=to_string$33(concat$4([0,of_string$26(cst$304)],_a0A_));
      return caml_call8
              (Ppx_assert_lib_Runtime[3],
               pos$131,
               _Z_,
               _V_,
               0,
               0,
               0,
               expect$38,
               got$0)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_test_result_string_expect_conca,
      0,
      cst_src_rope_ml$3,
      68,
      0,
      268,
      _aKV_);
    function concat_array(opt,ts)
     {if(opt)var sth=opt[1],sep=sth;else var sep=empty$15;
      return caml_call2
              (value$0,
               caml_call2
                (reduce$0,ts,function(x,y){return _aKQ_(x,_aKQ_(sep,y))}),
               empty$15)}
    function add_to_buffer(param$2,buffer)
     {var tree=param$2[2],todo=0,param=tree;
      for(;;)
       {if(0 === param[0])
         {var s=param[1];
          caml_call2(Stdlib_buffer[14],buffer,s);
          if(todo)
           {var todo$0=todo[2],param$0=todo[1],todo=todo$0,param=param$0;
            continue}
          return 0}
        var
         s2=param[2],
         param$1=param[1],
         todo$1=[0,s2,todo],
         todo=todo$1,
         param=param$1;
        continue}}
    function _aKW_(param)
     {var
       _a0v_=of_string$26(cst_jkl),
       _a0w_=_aKQ_(of_string$26(cst_ghi),_a0v_),
       _a0x_=of_string$26(cst_def),
       r=_aKQ_(_aKQ_(of_string$26(cst_abc),_a0x_),_a0w_),
       buffer=caml_call1(Stdlib_buffer[1],12);
      add_to_buffer(r,buffer);
      var got=caml_call1(Stdlib_buffer[2],buffer);
      return caml_call8
              (Ppx_assert_lib_Runtime[3],
               pos$132,
               sexp_of_t$58,
               compare$47,
               0,
               0,
               0,
               expect$39,
               got)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_add_to_buffer_r_buffer_test_result_Strin,
      0,
      cst_src_rope_ml$4,
      92,
      0,
      240,
      _aKW_);
    function _aKX_(param)
     {var
       _a0u_=of_string$26(cst$305),
       got=
        to_string$33
         (caml_call3
           (fold_left,
            caml_call2(init$1,1e6,function(x){return of_string$26(cst_x$8)}),
            _a0u_,
            _aKQ_)),
       expect=caml_call2(_Hl_,1e6,120);
      return caml_call8
              (Ppx_assert_lib_Runtime[3],pos$133,_Z_,_V_,0,0,0,expect,got)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_no_stack_overflow,
      0,
      cst_src_rope_ml$5,
      99,
      0,
      226,
      _aKX_);
    function _aKY_(param)
     {var got=to_string$33(of_string$26(cst$306));
      return caml_call8
              (Ppx_assert_lib_Runtime[3],pos$134,_Z_,_V_,0,0,0,expect$40,got)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_test_result_string_to_string_of_strin,
      0,
      cst_src_rope_ml$6,
      107,
      0,
      78,
      _aKY_);
    function _aKZ_(param)
     {var got=to_string$33(of_string$26(cst_x$9));
      return caml_call8
              (Ppx_assert_lib_Runtime[3],pos$135,_Z_,_V_,0,0,0,expect$41,got)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_test_result_string_to_string_of_strin$0,
      0,
      cst_src_rope_ml$7,
      108,
      0,
      80,
      _aKZ_);
    function _aK0_(param)
     {var
       _a0s_=of_string$26(cst_efg),
       _a0t_=_aKQ_(of_string$26(cst_cd),_a0s_),
       got=to_string$33(_aKQ_(of_string$26(cst_ab),_a0t_));
      return caml_call8
              (Ppx_assert_lib_Runtime[3],pos$136,_Z_,_V_,0,0,0,expect$42,got)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_test_result_string_to_string_of_st,
      0,
      cst_src_rope_ml$8,
      109,
      0,
      162,
      _aK0_);
    function _aK1_(param)
     {function go(n)
       {if(0 === n)return of_string$26(cst_0$1);
        var
         _a0q_=go(caml_call2(_ai_,n,1)),
         _a0r_=_aKQ_(of_string$26(caml_call1(Stdlib[22],n)),_a0q_);
        return _aKQ_(go(caml_call2(_ai_,n,1)),_a0r_)}
      var got=to_string$33(go(4));
      return caml_call8
              (Ppx_assert_lib_Runtime[3],pos$137,_Z_,_V_,0,0,0,expect$43,got)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_test_result_string_to_string_go_4,
      0,
      cst_src_rope_ml$9,
      112,
      0,
      230,
      _aK1_);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$550);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Rope=
      [0,
       of_string$26,
       empty$15,
       is_empty$29,
       length$47,
       to_string$33,
       _aKQ_,
       concat$4,
       concat_array,
       add_to_buffer];
    caml_register_global(7595,Core_kernel_Rope,"Core_kernel__Rope");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$551);
    caml_call1(Expect_test_collector[4][1],cst_src_set_once_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$552,cst$307);
    var
     _aK2_=caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$105),
     _aK3_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_set_once_ml_14_18),
     _aK4_=
      caml_call1
       (__1_,caml_call1(_$k_,caml_call2(Bin_prot_Shape[15],_aK3_,_aK2_))),
     _aK5_=[0,caml_call1(Bin_shape_lib_Bin_shape[3][1],cst_a$106),0],
     _aK6_=
      [0,
       [0,caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$235),_aK5_,_aK4_],
       0],
     _aK7_=caml_call1(Bin_shape_lib_Bin_shape[4][1],cst_src_set_once_ml_14_6),
     group$129=caml_call2(Bin_prot_Shape[6],_aK7_,_aK6_);
    function bin_shape_t$107(a)
     {var _a0p_=caml_call1(Bin_shape_lib_Bin_shape[2][1],cst_t$236);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$129,_a0p_),[0,a,0])}
    function bin_size_t$80(size_of_a,v)
     {return caml_call2(_Zh_,caml_call1(_Zk_,size_of_a),v)}
    function bin_write_t$81(write_a,buf,pos,v)
     {return caml_call3(caml_call1(__3_,caml_call1(_$m_,write_a)),buf,pos,v)}
    function bin_read_t$159(of_a,buf,pos_ref,vint)
     {return caml_call3
              (caml_call1(__6_,caml_call1(_$o_,of_a)),buf,pos_ref,vint)}
    function bin_read_t$160(of_a,buf,pos_ref)
     {return caml_call2(caml_call1(__5_,caml_call1(_$o_,of_a)),buf,pos_ref)}
    function t_of_sexp$111(of_a,t)
     {return caml_call2(_aa0_,caml_call1(_aa2_,of_a),t)}
    function sexp_of_t$145(of_a,v)
     {return caml_call2(_aaZ_,caml_call1(_aa1_,of_a),v)}
    function of_format(v1){return [0,v1[1],_aK8_]}
    function to_format(t){return [0,t[1]]}
    var
     _aK9_=
      caml_call1
       (caml_call1
         (_W4_,
          [0,
           bin_shape_t$107,
           bin_size_t$80,
           bin_write_t$81,
           bin_read_t$160,
           bin_read_t$159]),
        [0,to_format,of_format]),
     bin_shape_t$108=_aK9_[1],
     bin_size_t$81=_aK9_[2],
     bin_write_t$82=_aK9_[3],
     bin_read_t$161=_aK9_[4],
     bin_read_t$162=_aK9_[5],
     bin_writer_t$96=_aK9_[6],
     bin_reader_t$96=_aK9_[7],
     bin_t$96=_aK9_[8],
     include$156=
      caml_call1
       (caml_call1(include$1[2],[0,t_of_sexp$111,sexp_of_t$145]),
        [0,to_format,of_format]),
     t_of_sexp$112=include$156[1],
     sexp_of_t$146=include$156[2];
    function sexp_of_t$147(sexp_of_a,param)
     {var value=param[1],set_at=param[2];
      if(value)
       {var
         value$0=value[1],
         _a0n_=caml_call1(_jB_,set_at),
         _a0o_=
          [0,[1,[0,_aK__,[0,caml_call1(Sexplib0_Sexp_conv[7],_a0n_),0]]],0];
        return [1,[0,[1,[0,_aK$_,[0,caml_call1(sexp_of_a,value$0),0]]],_a0o_]]}
      return caml_call1(Sexplib0_Sexp_conv[7],cst_unset)}
    function invariant$28(invariant_a,t)
     {var _a0m_=t[1];
      if(_a0m_){var a=_a0m_[1];return caml_call1(invariant_a,a)}
      return 0}
    function create$65(param){return [0,0,_aLa_]}
    function set$20(t,here,value)
     {if(caml_call1(is_none,t[1])){t[1] = [0,value];t[2] = here;return _aLb_}
      var
       _a0k_=[0,[1,[0,_aLc_,[0,caml_call1(_jC_,t[2]),0]]],0],
       _a0l_=[0,[1,[0,_aLd_,[0,caml_call1(_jC_,here),0]]],_a0k_];
      return caml_call1
              (_lw_,
               [1,
                [0,
                 caml_call1
                  (Sexplib0_Sexp_conv[7],cst_Set_once_set_exn_already_set),
                 _a0l_]])}
    function set_exn$0(t,here,value)
     {return caml_call1(_ls_,set$20(t,here,value))}
    function get$16(t){return t[1]}
    function get_exn(t,here)
     {var _a0i_=t[1];
      if(_a0i_){var a=_a0i_[1];return a}
      var _a0j_=[0,[1,[0,_aLe_,[0,caml_call1(_jC_,here),0]]],0];
      return caml_call1
              (_aX_,
               [1,
                [0,
                 caml_call1(Sexplib0_Sexp_conv[7],cst_Set_once_get_exn_unset),
                 _a0j_]])}
    function is_none$4(t){return caml_call1(is_none,t[1])}
    function is_some$4(t){return caml_call1(is_some,t[1])}
    function iter$43(t,f){return caml_call2(iter$16,t[1],f)}
    function unsafe_value(t){return get_exn(t,_aLf_)}
    var
     Optional_syntax$1=[0,is_none$4,unsafe_value],
     Optional_syntax$2=[0,Optional_syntax$1];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$553);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Set_once=
      [0,
       sexp_of_t$147,
       invariant$28,
       create$65,
       set$20,
       set_exn$0,
       get$16,
       get_exn,
       is_none$4,
       is_some$4,
       iter$43,
       Optional_syntax$2,
       [0,
        bin_t$96,
        bin_read_t$161,
        bin_read_t$162,
        bin_reader_t$96,
        bin_size_t$81,
        bin_write_t$82,
        bin_writer_t$96,
        bin_shape_t$108,
        t_of_sexp$112,
        sexp_of_t$146],
       [0,
        [0,
         bin_t$96,
         bin_read_t$161,
         bin_read_t$162,
         bin_reader_t$96,
         bin_size_t$81,
         bin_write_t$82,
         bin_writer_t$96,
         bin_shape_t$108,
         t_of_sexp$112,
         sexp_of_t$146]]];
    caml_register_global(7596,Core_kernel_Set_once,"Core_kernel__Set_once");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$554);
    caml_call1(Expect_test_collector[4][1],cst_src_stack_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$555,cst$308);
    function elts$2(r){return r[2]}
    function set_elts$0(r,v){r[2] = v;return 0}
    function _aLg_(r){return r[1]}
    function set_length$4(r,v){r[1] = v;return 0}
    function _aLh_(r,v){return [0,r[1],v]}
    var
     _aLi_=[0,set_elts$0],
     elts$3=[0,[0,function(param){return 0},cst_elts$1,_aLi_,elts$2,_aLh_]];
    function _aLj_(r,v){return [0,v,r[2]]}
    var
     _aLk_=[0,set_length$4],
     length$48=
      [0,[0,function(param){return 0},cst_length$5,_aLk_,_aLg_,_aLj_]];
    function iter$44(length_fun,elts_fun)
     {caml_call1(length_fun,length$48);return caml_call1(elts_fun,elts$3)}
    function capacity$3(t){return caml_call1(length$37,t[2])}
    function invariant$29(invariant_a,t)
     {try
       {var
         check=
          function(f,field)
           {return caml_call1(f,caml_call2(Base_Field[3],field,t))},
         _aZ8_=
          function(elts)
           {var _a0d_=t[1] - 1 | 0,_a0c_=0;
            if(! (_a0d_ < 0))
             {var i$0=_a0c_;
              for(;;)
               {caml_call1(invariant_a,caml_call2(get_some_exn,elts,i$0));
                var _a0h_=i$0 + 1 | 0;
                if(_a0d_ !== i$0){var i$0=_a0h_;continue}
                break}}
            var _a0e_=t[1],_a0f_=caml_call1(length$37,elts) - 1 | 0;
            if(! (_a0f_ < _a0e_))
             {var i=_a0e_;
              for(;;)
               {if(caml_call2(is_some$3,elts,i))
                 throw [0,Assert_failure,_aLp_];
                var _a0g_=i + 1 | 0;
                if(_a0f_ !== i){var i=_a0g_;continue}
                break}}
            return 0},
         _aZ9_=function(_a0b_){return check(_aZ8_,_a0b_)},
         _aZ__=
          function(length)
           {if(0 <= length)if(length <= caml_call1(length$37,t[2]))return 0;
            throw [0,Assert_failure,_aLq_]},
         _aZ$_=iter$44(function(_a0a_){return check(_aZ__,_a0a_)},_aZ9_);
        return _aZ$_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        return failwiths
                (0,
                 _aLo_,
                 cst_Stack_invariant_failed,
                 [0,exn,t],
                 function(param)
                  {var v1$0=param[2],v0=param[1],v0$0=caml_call1(_Tv_,v0);
                   function of_a(param){return _aLn_}
                   var
                    v_length=v1$0[1],
                    v_elts=v1$0[2],
                    arg=caml_call2(sexp_of_t$130,of_a,v_elts),
                    bnds=[0,[1,[0,_aLl_,[0,arg,0]]],0],
                    arg$0=caml_call1(sexp_of_t$43,v_length),
                    bnds$0=[0,[1,[0,_aLm_,[0,arg$0,0]]],bnds],
                    v1=[1,bnds$0];
                   return [1,[0,v0$0,[0,v1,0]]]})}}
    function create$66(param){return [0,0,empty$12]}
    function length$49(t){return t[1]}
    function is_empty$30(t){return 0 === t[1]?1:0}
    function fold$31(t,init,f)
     {var r=[0,init],_aZ5_=t[1] - 1 | 0;
      if(! (_aZ5_ < 0))
       {var i=_aZ5_;
        for(;;)
         {var _aZ6_=caml_call2(get_some_exn,t[2],i);
          r[1] = caml_call2(f,r[1],_aZ6_);
          var _aZ7_=i - 1 | 0;
          if(0 !== i){var i=_aZ7_;continue}
          break}}
      return r[1]}
    function iter$45(t,f)
     {var _aZ3_=t[1] - 1 | 0;
      if(! (_aZ3_ < 0))
       {var i=_aZ3_;
        for(;;)
         {caml_call1(f,caml_call2(get_some_exn,t[2],i));
          var _aZ4_=i - 1 | 0;
          if(0 !== i){var i=_aZ4_;continue}
          break}}
      return 0}
    var
     iter$46=[0,-198771759,iter$45],
     C$5=caml_call1(include$9[17],[0,fold$31,iter$46]),
     mem$25=C$5[1],
     exists$25=C$5[8],
     for_all$25=C$5[9],
     count$20=C$5[10],
     sum$15=C$5[11],
     find$26=C$5[12],
     find_map$14=C$5[13],
     to_list$24=C$5[14],
     to_array$18=C$5[15],
     min_elt$22=C$5[16],
     max_elt$18=C$5[17],
     fold_result$14=C$5[6],
     fold_until$14=C$5[7];
    function of_list$17(l)
     {if(caml_call1(is_empty$2,l))return create$66(0);
      var
       length=caml_call1(length$4,l),
       elts=caml_call1(create$53,2 * length | 0),
       r=[0,l],
       _aZ0_=length - 1 | 0;
      if(! (_aZ0_ < 0))
       {var i=_aZ0_;
        for(;;)
         {var _aZ1_=r[1];
          if(! _aZ1_)throw [0,Assert_failure,_aLr_];
          var l$0=_aZ1_[2],a=_aZ1_[1];
          caml_call3(set_some,elts,i,a);
          r[1] = l$0;
          var _aZ2_=i - 1 | 0;
          if(0 !== i){var i=_aZ2_;continue}
          break}}
      return [0,length,elts]}
    function sexp_of_t$148(sexp_of_a,t)
     {var _aZZ_=caml_call1(to_list$24,t);
      return caml_call1(caml_call1(sexp_of_t$25,sexp_of_a),_aZZ_)}
    function t_of_sexp$113(a_of_sexp,sexp)
     {return of_list$17(caml_call1(caml_call1(t_of_sexp$23,a_of_sexp),sexp))}
    var
     include$157=
      caml_call1
       (Bin_prot_Utils[8],
        [0,
         [0,
          bin_shape_t$25,
          bin_size_t$28,
          bin_write_t$28,
          bin_read_t$58,
          bin_read_t$57],
         to_list$24,
         of_list$17]),
     _aLs_=include$157[1],
     _aLt_=include$157[2],
     _aLu_=include$157[3],
     _aLv_=include$157[4],
     _aLw_=include$157[5],
     _aLx_=include$157[6],
     _aLy_=include$157[7],
     _aLz_=include$157[8];
    function resize$0(t,size)
     {var arr=caml_call1(create$53,size);
      caml_call5(blit$8,t[2],0,arr,0,t[1]);
      t[2] = arr;
      return 0}
    function set_capacity$0(t,new_capacity)
     {var
       new_capacity$0=caml_call2(max$5,new_capacity,t[1]),
       _aZY_=new_capacity$0 !== capacity$3(t)?1:0;
      return _aZY_?resize$0(t,new_capacity$0):_aZY_}
    function push$0(t,a)
     {var _aZX_=caml_call1(length$37,t[2]);
      if(t[1] === _aZX_)resize$0(t,2 * (t[1] + 1 | 0) | 0);
      caml_call3(set_some,t[2],t[1],a);
      t[1] = t[1] + 1 | 0;
      return 0}
    function pop_nonempty(t)
     {var i=t[1] - 1 | 0,result=caml_call2(get_some_exn,t[2],i);
      caml_call2(set_none,t[2],i);
      t[1] = i;
      return result}
    var pop_error$0=caml_call1(_kz_,cst_Stack_pop_of_empty_stack$0);
    function pop$2(t){return is_empty$30(t)?0:[0,pop_nonempty(t)]}
    function pop_exn$2(t)
     {return is_empty$30(t)?caml_call1(_kL_,pop_error$0):pop_nonempty(t)}
    function top_nonempty(t)
     {return caml_call2(get_some_exn,t[2],t[1] - 1 | 0)}
    var top_error$0=caml_call1(_kz_,cst_Stack_top_of_empty_stack$0);
    function top$3(t){return is_empty$30(t)?0:[0,top_nonempty(t)]}
    function top_exn$3(t)
     {return is_empty$30(t)?caml_call1(_kL_,top_error$0):top_nonempty(t)}
    function copy$10(param)
     {var length=param[1],elts=param[2];
      return [0,length,caml_call1(copy$6,elts)]}
    function clear$10(t)
     {var _aZS_=0 < t[1]?1:0;
      if(_aZS_)
       {var _aZU_=t[1] - 1 | 0,_aZT_=0;
        if(! (_aZU_ < 0))
         {var i=_aZT_;
          for(;;)
           {caml_call2(set_none,t[2],i);
            var _aZW_=i + 1 | 0;
            if(_aZU_ !== i){var i=_aZW_;continue}
            break}}
        t[1] = 0;
        var _aZV_=0}
      else
       var _aZV_=_aZS_;
      return _aZV_}
    function until_empty$1(t,f)
     {for(;;)
       {var _aZR_=0 < t[1]?1:0;
        if(_aZR_){caml_call1(f,pop_nonempty(t));continue}
        return _aZR_}}
    function singleton$14(x){var t=create$66(0);push$0(t,x);return t}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$556);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Stack=
      [0,
       _aLz_,
       _aLv_,
       _aLw_,
       _aLy_,
       _aLt_,
       _aLu_,
       _aLx_,
       _aLs_,
       t_of_sexp$113,
       sexp_of_t$148,
       invariant$29,
       mem$25,
       length$49,
       is_empty$30,
       iter$45,
       fold$31,
       fold_result$14,
       fold_until$14,
       exists$25,
       for_all$25,
       count$20,
       sum$15,
       find$26,
       find_map$14,
       to_list$24,
       to_array$18,
       min_elt$22,
       max_elt$18,
       of_list$17,
       create$66,
       singleton$14,
       push$0,
       pop$2,
       pop_exn$2,
       top$3,
       top_exn$3,
       clear$10,
       copy$10,
       until_empty$1,
       capacity$3,
       set_capacity$0];
    caml_register_global(7597,Core_kernel_Stack,"Core_kernel__Stack");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$557);
    caml_call1(Expect_test_collector[4][1],cst_src_stack_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$558,cst$309);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$559);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Stack_intf=[0];
    caml_register_global
     (7598,Core_kernel_Stack_intf,"Core_kernel__Stack_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$560);
    caml_call1(Expect_test_collector[4][1],cst_src_std_kernel_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$561,cst$310);
    var _aLA_=Base_Exn[16];
    caml_call1(Base_Exn[17],0);
    var
     _aLB_=Ppx_inline_test_lib_Runtime[15],
     _aLC_=_aly_[73],
     _aLD_=include$0[1],
     _aLE_=include$0[2];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$562);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     include$158=
      [0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       _aLA_,
       _aLB_,
       _aLC_,
       invalid_arg,
       failwith,
       Exit,
       min$5,
       max$5,
       abs$3,
       max_int,
       min_int,
       lnot$3,
       infinity,
       neg_infinity,
       nan,
       max_float,
       min_float,
       epsilon_float,
       _Dw_,
       char_of_int,
       string_of_bool,
       bool_of_string,
       string_of_int,
       string_of_float,
       stdin,
       stdout,
       stderr,
       print_char,
       print_string,
       print_bytes,
       print_int,
       print_float,
       print_endline,
       print_newline,
       prerr_char,
       prerr_string,
       prerr_bytes,
       prerr_int,
       prerr_float,
       prerr_endline,
       prerr_newline,
       read_line,
       read_int,
       read_float,
       open_out,
       open_out_bin,
       open_out_gen,
       flush,
       flush_all,
       output_char,
       output_string,
       output_bytes,
       output,
       output_substring,
       output_byte,
       output_binary_int,
       output_value,
       seek_out,
       pos_out,
       out_channel_length,
       close_out,
       close_out_noerr,
       set_binary_mode_out,
       open_in,
       open_in_bin,
       open_in_gen,
       input_char,
       input_line,
       input,
       really_input,
       really_input_string,
       input_byte,
       input_binary_int,
       input_value,
       seek_in,
       pos_in,
       in_channel_length,
       close_in,
       close_in_noerr,
       set_binary_mode_in,
       LargeFile,
       string_of_format,
       _Dy_,
       exit,
       at_exit,
       valid_float_lexem,
       unsafe_really_input,
       do_at_exit,
       _hQ_,
       _IB_,
       _IC_,
       _ID_,
       _IE_,
       _IF_,
       _IG_,
       robustly_compare,
       t_of_sexp$58,
       sexpifier,
       _QU_,
       _QV_,
       _QW_,
       _QX_,
       _QY_,
       _QZ_,
       _Q0_,
       _Q1_,
       _Q2_,
       _Q3_,
       _Q4_,
       _Q5_,
       _Nz_,
       never_returns,
       _Q6_,
       _Q7_,
       _Q8_,
       _Q9_,
       _Q__,
       _Q$_,
       _Ra_,
       _Rb_,
       _Rc_,
       _Rd_,
       _Re_,
       _Rf_,
       _Rg_,
       _Rh_,
       _Ri_,
       _Rj_,
       _Rk_,
       _Rl_,
       _Rm_,
       _Rn_,
       _Ro_,
       _Rp_,
       _Rq_,
       _Rr_,
       _Rs_,
       _Rt_,
       _Ru_,
       _Rv_,
       _Rw_,
       _Rx_,
       _Ry_,
       _Rz_,
       _RA_,
       _RB_,
       _RC_,
       _RD_,
       _RE_,
       _RF_,
       _RG_,
       _RH_,
       _RI_,
       _RJ_,
       _RK_,
       _RL_,
       _RM_,
       _RN_,
       _RO_,
       _RP_,
       _RQ_,
       _RR_,
       _RS_,
       _RT_,
       _RU_,
       _RV_,
       _RW_,
       _RX_,
       _RY_,
       _RZ_,
       Bug,
       C_malloc_exn,
       _R3_,
       fst3,
       snd3,
       trd3,
       uw,
       _wX_,
       _wY_,
       _wU_,
       _R4_,
       print_s,
       _eK_,
       _hR_,
       _eO_,
       _lv_,
       _lw_,
       _R5_,
       failwithp,
       failwiths,
       force,
       _eP_,
       ident,
       _R6_,
       _eI_,
       is_none,
       is_some,
       _eL_,
       _ls_,
       _R7_,
       phys_same,
       _eR_,
       _R8_,
       _R9_,
       _kM_,
       round$3,
       _eJ_,
       _R__,
       _R$_,
       _Sa_,
       _Sb_,
       _Sc_,
       _Sd_,
       _Se_,
       _Sf_,
       _Sg_,
       _Sh_,
       _Si_,
       _Sj_,
       _Sk_,
       _Sl_,
       _Sm_,
       _Sn_,
       _So_,
       _Sp_,
       bin_array,
       bin_read_array$0,
       bin_read_array,
       bin_reader_array,
       bin_size_array,
       bin_write_array,
       bin_writer_array,
       bin_shape_array,
       _iI_,
       _iK_,
       _iJ_,
       typerep_of_array$0,
       _Sw_,
       bin_bool,
       _bY_,
       _bZ_,
       bin_reader_bool,
       _bb_,
       _bW_,
       bin_writer_bool,
       bin_shape_bool,
       _BS_,
       _BF_,
       hash_bool,
       _Bz_,
       _BA_,
       typerep_of_bool$0,
       typename_of_bool$0,
       bin_char,
       _Ci_,
       _Ch_,
       bin_reader_char,
       _Cf_,
       _Ce_,
       bin_writer_char,
       bin_shape_char,
       _Cx_,
       _Cl_,
       hash_char,
       _Cn_,
       _Co_,
       typerep_of_char$0,
       typename_of_char$0,
       bin_float,
       bin_read_t$5,
       bin_read_t$6,
       bin_reader_float,
       bin_size_t$2,
       bin_write_t$2,
       bin_writer_float,
       bin_shape_float,
       compare$48,
       hash_fold_t$27,
       hash_float,
       t_of_sexp$47,
       sexp_of_t$59,
       typerep_of_float$0,
       typename_of_float$0,
       bin_int,
       bin_read_t$74,
       bin_read_t$73,
       bin_reader_int,
       bin_size_t$36,
       bin_write_t$36,
       bin_writer_int,
       bin_shape_int,
       compare$30,
       hash_fold_t$15,
       hash_int,
       t_of_sexp$32,
       sexp_of_t$43,
       typerep_of_int$0,
       typename_of_int$0,
       bin_int32,
       bin_read_t$91,
       bin_read_t$92,
       bin_reader_int32,
       bin_size_t$45,
       bin_write_t$45,
       bin_writer_int32,
       bin_shape_int32,
       _KS_,
       _K5_,
       hash_int32,
       _K3_,
       _K2_,
       typerep_of_int32$0,
       typename_of_int32$0,
       bin_int64,
       bin_read_t$75,
       bin_read_t$76,
       bin_reader_int64,
       bin_size_t$37,
       bin_write_t$37,
       bin_writer_int64,
       bin_shape_int64,
       _y1_,
       _zc_,
       hash_int64,
       _za_,
       _y$_,
       typerep_of_int64$0,
       typename_of_int64$0,
       bin_lazy_t,
       bin_read_lazy_t$0,
       bin_read_lazy_t,
       bin_reader_lazy_t,
       bin_size_lazy_t,
       bin_write_lazy_t,
       bin_writer_lazy_t,
       bin_shape_lazy_t,
       _Ll_,
       _Lm_,
       _Ln_,
       _Lo_,
       typerep_of_lazy_t$0,
       _SV_,
       bin_list,
       bin_read_list$0,
       bin_read_list,
       bin_reader_list,
       bin_size_list,
       bin_write_list,
       bin_writer_list,
       bin_shape_list,
       compare$19,
       hash_fold_t$12,
       t_of_sexp$23,
       sexp_of_t$25,
       typerep_of_list$0,
       _S2_,
       bin_nativeint,
       bin_read_t$95,
       bin_read_t$96,
       bin_reader_nativeint,
       bin_size_t$47,
       bin_write_t$47,
       bin_writer_nativeint,
       bin_shape_nativeint,
       _MW_,
       _M9_,
       hash_nativeint,
       _M7_,
       _M6_,
       typerep_of_nativeint$0,
       typename_of_nativeint$0,
       bin_option,
       bin_read_option$0,
       bin_read_option,
       bin_reader_option,
       bin_size_option,
       bin_write_option,
       bin_writer_option,
       bin_shape_option,
       compare$27,
       hash_fold_t$13,
       t_of_sexp$29,
       sexp_of_t$39,
       typerep_of_option$0,
       _Ta_,
       bin_string,
       bin_read_t$89,
       bin_read_t$90,
       bin_reader_string,
       bin_size_t$44,
       bin_write_t$44,
       bin_writer_string,
       bin_shape_string,
       compare$47,
       hash_fold_t$25,
       hash_string,
       t_of_sexp$46,
       sexp_of_t$58,
       typerep_of_string$0,
       typename_of_string$0,
       bin_bytes,
       bin_read_t$1,
       bin_read_t$2,
       bin_reader_bytes,
       bin_size_t$0,
       bin_write_t$0,
       bin_writer_bytes,
       bin_shape_bytes,
       compare$38,
       t_of_sexp$40,
       sexp_of_t$51,
       typerep_of_bytes$0,
       typename_of_bytes$0,
       bin_ref,
       bin_read_ref$0,
       bin_read_ref,
       bin_reader_ref,
       bin_size_ref,
       bin_write_ref,
       bin_writer_ref,
       bin_shape_ref,
       _Oj_,
       _Ok_,
       _Ol_,
       typerep_of_ref$0,
       _Tn_,
       bin_unit,
       _AR_,
       _AS_,
       bin_reader_unit,
       _AU_,
       _AV_,
       bin_writer_unit,
       bin_shape_unit,
       _Bh_,
       _A6_,
       hash_unit,
       _A8_,
       _A9_,
       typerep_of_unit$0,
       typename_of_unit$0,
       bin_float_array,
       bin_read_float_array$0,
       bin_read_float_array,
       bin_reader_float_array,
       bin_size_float_array,
       bin_write_float_array,
       bin_writer_float_array,
       bin_shape_float_array,
       compare_float_array,
       float_array_of_sexp,
       sexp_of_float_array,
       typerep_of_float_array,
       typename_of_float_array,
       _Tv_,
       bin_shape_sexp_array,
       bin_size_sexp_array,
       bin_write_sexp_array,
       bin_writer_sexp_array,
       bin_read_sexp_array,
       bin_read_sexp_array$0,
       bin_reader_sexp_array,
       bin_sexp_array,
       _iI_,
       Typename_of_sexp_array,
       _TC_,
       typerep_of_sexp_array,
       bin_shape_sexp_bool,
       _bb_,
       _bW_,
       bin_writer_sexp_bool,
       _bZ_,
       _bY_,
       bin_reader_sexp_bool,
       bin_sexp_bool,
       _BS_,
       _BF_,
       hash_sexp_bool,
       Typename_of_sexp_bool,
       typename_of_sexp_bool,
       typerep_of_sexp_bool,
       bin_shape_sexp_list,
       bin_size_sexp_list,
       bin_write_sexp_list,
       bin_writer_sexp_list,
       bin_read_sexp_list,
       bin_read_sexp_list$0,
       bin_reader_sexp_list,
       bin_sexp_list,
       compare$19,
       hash_fold_t$12,
       Typename_of_sexp_list,
       _TM_,
       typerep_of_sexp_list,
       bin_shape_sexp_option,
       bin_size_sexp_option,
       bin_write_sexp_option,
       bin_writer_sexp_option,
       bin_read_sexp_option,
       bin_read_sexp_option$0,
       bin_reader_sexp_option,
       bin_sexp_option,
       compare$27,
       hash_fold_t$13,
       Typename_of_sexp_option,
       _TT_,
       typerep_of_sexp_option,
       bin_shape_sexp_opaque$0,
       bin_size_sexp_opaque$0,
       bin_write_sexp_opaque$0,
       bin_writer_sexp_opaque$0,
       bin_read_sexp_opaque$1,
       bin_read_sexp_opaque$2,
       bin_reader_sexp_opaque$0,
       bin_sexp_opaque$0,
       compare_sexp_opaque$0,
       hash_fold_sexp_opaque$0,
       Typename_of_sexp_opaque$0,
       typename_of_sexp_opaque$0,
       typerep_of_sexp_opaque$0,
       _aLD_,
       _aLE_];
    caml_register_global(7599,include$158,"Core_kernel__Std_kernel");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$563);
    caml_call1(Expect_test_collector[4][1],cst_src_make_stable_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$564,cst$311);
    var
     Applicative$0=0,
     Avltree$0=0,
     Backtrace$0=0,
     Bin_prot=0,
     Binary_search$0=0,
     Commutative_group$0=0,
     Comparisons$0=0,
     Equal$0=0,
     Exn$0=0,
     Expect_test_config$0=0,
     Field$1=0,
     Floatable$0=0,
     Hash$0=0,
     Heap_block$0=0,
     In_channel=0,
     Int_conversions=0,
     Invariant$0=0,
     Monad$0=0,
     Obj_array$0=0,
     Ordered_collection_common=0,
     Out_channel=0,
     Poly$2=0,
     Polymorphic_compare$0=0,
     Pretty_printer$0=0,
     Random$0=0,
     Sexp_maybe$0=0,
     Staged$0=0,
     Stringable$0=0,
     Validate$0=0,
     With_return$0=0,
     Word_size$0=0,
     Array$0=0,
     Binary_searchable$0=0,
     Blit$0=0,
     Bool=0,
     Bytes=0,
     Char=0,
     Comparable=0,
     Comparator=0,
     Container$0=0,
     Either=0,
     Error=0,
     Float$0=0,
     Fn=0,
     Hash_set$14=0,
     Hashtbl=0,
     Hashtbl_intf=0,
     Info=0,
     Int$0=0,
     Int_intf=0,
     Int32=0,
     Int63=0,
     Int64$0=0,
     Lazy=0,
     Linked_queue=0,
     List$1=0,
     Maybe_bound=0,
     Nativeint=0,
     Option=0,
     Ordering=0,
     Or_error=0,
     Printf=0,
     Ref=0,
     Result=0,
     Sequence$0=0,
     Set$24=0,
     Sexp$0=0,
     Sexpable$0=0,
     Sign=0,
     Source_code_position=0,
     String=0,
     Type_equal=0,
     Unit=0,
     Arg=0,
     Bag=0,
     Bigsubstring=0,
     Binable$3=0,
     Binary_packing=0,
     Blang=0,
     Bounded_index=0,
     Bounded_int_table=0,
     Bucket=0,
     Bus=0,
     Byte_units=0,
     Day_of_week=0,
     Debug=0,
     Deque=0,
     Deriving_hash=0,
     Doubly_linked=0,
     Ephemeron=0,
     Fdeque=0,
     Fheap=0,
     Flags=0,
     Float_with_finite_only_serialization=0,
     Force_once=0,
     Fqueue=0,
     Gc=0,
     Hash_heap=0,
     Hash_queue$13=0,
     Hashable$2=0,
     Heap=0,
     Hexdump=0,
     Hexdump_intf=0,
     Host_and_port=0,
     Identifiable=0,
     Immediate_option=0,
     Immediate_option_intf=0,
     Int_set=0,
     Interfaces=0,
     Limiter=0,
     Linked_stack=0,
     Map$24=0,
     Memo=0,
     Month=0,
     Moption=0,
     No_polymorphic_compare=0,
     Nothing=0,
     Only_in_test=0,
     Option_array=0,
     Optional_syntax$3=0,
     Percent=0,
     Pid=0,
     Pool=0,
     Pool_intf=0,
     Pooled_hashtbl=0,
     Printexc=0,
     Queue=0,
     Quickcheck=0,
     Quickcheck_intf=0,
     Quickcheckable=0,
     Robustly_comparable=0,
     Rope=0,
     Set_once=0,
     Splittable_random$0=0,
     Stable_comparable=0,
     Stable_unit_test=0,
     Stack=0,
     String_id=0,
     Substring=0,
     Substring_intf=0,
     Thread_safe_queue=0,
     Timing_wheel_ns=0,
     Total_map=0,
     Tuple=0,
     Tuple_type$0=0,
     Tuple2=0,
     Tuple3=0,
     Type_immediacy=0,
     Uniform_array=0,
     Union_find=0,
     Unique_id=0,
     Unit_of_time=0,
     Univ=0,
     Univ_map=0,
     Unpack_buffer=0,
     Validated=0,
     Weak=0,
     Weak_pointer=0;
    function V1$16(Stable_format,M)
     {var
       compare=M[1],
       to_binable=M[2],
       of_binable=M[3],
       _aZQ_=
        caml_call1
         (caml_call1(Stable[1][1],[0,Stable_format[9],Stable_format[10]]),
          [0,to_binable,of_binable]),
       t_of_sexp=_aZQ_[1],
       sexp_of_t=_aZQ_[2],
       include=
        caml_call1
         (caml_call1
           (Stable$0[1][1],
            [0,
             Stable_format[8],
             Stable_format[5],
             Stable_format[6],
             Stable_format[2],
             Stable_format[3]]),
          [0,to_binable,of_binable]),
       bin_size_t=include[1],
       bin_write_t=include[2],
       bin_read_t=include[3],
       bin_read_t$0=include[4],
       bin_shape_t=include[5],
       bin_writer_t=include[6],
       bin_reader_t=include[7],
       bin_t=include[8],
       include$0=caml_call1(_gG_[1][2],[0,compare,sexp_of_t]),
       comparator=include$0[1];
      return [0,
              bin_t,
              bin_read_t,
              bin_read_t$0,
              bin_reader_t,
              bin_size_t,
              bin_write_t,
              bin_writer_t,
              bin_shape_t,
              compare,
              t_of_sexp,
              sexp_of_t,
              comparator]}
    var Of_stable_format=[0,V1$16];
    function V1$17(Stable_format,M)
     {var
       compare=M[1],
       map=M[2],
       to_stable_format=M[3],
       of_stable_format=M[4],
       _aZP_=
        caml_call1
         (caml_call1(Stable[2][1],[0,Stable_format[9],Stable_format[10]]),
          [0,to_stable_format,of_stable_format]),
       t_of_sexp=_aZP_[1],
       sexp_of_t=_aZP_[2],
       include=
        caml_call1
         (caml_call1
           (Stable$0[2][1],
            [0,
             Stable_format[8],
             Stable_format[5],
             Stable_format[6],
             Stable_format[2],
             Stable_format[3]]),
          [0,to_stable_format,of_stable_format]),
       bin_shape_t=include[1],
       bin_size_t=include[2],
       bin_write_t=include[3],
       bin_read_t=include[4],
       bin_read_t$0=include[5],
       bin_writer_t=include[6],
       bin_reader_t=include[7],
       bin_t=include[8];
      return [0,
              bin_t,
              bin_read_t,
              bin_read_t$0,
              bin_reader_t,
              bin_size_t,
              bin_write_t,
              bin_writer_t,
              bin_shape_t,
              compare,
              t_of_sexp,
              sexp_of_t,
              map]}
    var Of_stable_format1=[0,V1$17];
    function V1$18(Stable_format,M)
     {var
       compare=M[1],
       map=M[2],
       to_stable_format=M[3],
       of_stable_format=M[4],
       _aZO_=
        caml_call1
         (caml_call1(Stable[3][1],[0,Stable_format[9],Stable_format[10]]),
          [0,to_stable_format,of_stable_format]),
       t_of_sexp=_aZO_[1],
       sexp_of_t=_aZO_[2],
       include=
        caml_call1
         (caml_call1
           (Stable$0[3][1],
            [0,
             Stable_format[8],
             Stable_format[5],
             Stable_format[6],
             Stable_format[2],
             Stable_format[3]]),
          [0,to_stable_format,of_stable_format]),
       bin_shape_t=include[1],
       bin_size_t=include[2],
       bin_write_t=include[3],
       bin_read_t=include[4],
       bin_read_t$0=include[5],
       bin_writer_t=include[6],
       bin_reader_t=include[7],
       bin_t=include[8];
      return [0,
              bin_t,
              bin_read_t,
              bin_read_t$0,
              bin_reader_t,
              bin_size_t,
              bin_write_t,
              bin_writer_t,
              bin_shape_t,
              compare,
              t_of_sexp,
              sexp_of_t,
              map]}
    var Of_stable_format2=[0,V1$18];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$565);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Make_stable=
      [0,Of_stable_format,Of_stable_format1,Of_stable_format2];
    caml_register_global
     (7600,Core_kernel_Make_stable,"Core_kernel__Make_stable");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$566);
    caml_call1(Expect_test_collector[4][1],cst_src_stable_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$567,cst$312);
    var Unit_test=0;
    function _aLF_(param){Make$8(_hx_[2]);return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst_Result_V1,
      0,
      cst_src_stable_ml$0,
      6,
      2,
      84,
      _aLF_);
    var
     Unit_tests=[0],
     _aLG_=_gy_[2],
     _aMz_=Base_Ppx_compare_lib[3],
     _aLH_=_aLG_[1],
     _aLI_=_aLG_[2],
     _aLJ_=_aLG_[3],
     _aLK_=_aLG_[4],
     _aLL_=_aLG_[5],
     _aLM_=_aLG_[6],
     _aLN_=_aLG_[7],
     _aLO_=_aLG_[8],
     _aLP_=_aLG_[9],
     _aLQ_=_aLG_[10],
     _aLR_=_aLG_[11],
     _aLS_=_aLG_[12],
     _aLT_=_aLG_[13],
     _aLU_=_aLG_[14],
     _aLV_=_aLG_[15],
     _aLW_=_aLG_[16],
     _aLX_=_aLG_[17],
     _aLY_=_aLG_[18],
     _aLZ_=_aLG_[19],
     _aL0_=_aLG_[20],
     _aL1_=_aLG_[21],
     _aL2_=_aLG_[22],
     _aL3_=_aLG_[23],
     _aL4_=_aLG_[24],
     _aL5_=_aLG_[25],
     _aL6_=_aLG_[26],
     _aL7_=_aLG_[27],
     _aL8_=_aLG_[28],
     _aL9_=_aLG_[29],
     _aL__=_aLG_[30],
     _aL$_=_aLG_[31],
     _aMa_=_aLG_[32],
     _aMb_=_aLG_[33],
     _aMc_=_aLG_[34],
     _aMd_=_aLG_[35],
     _aMe_=_aLG_[36],
     _aMf_=_aLG_[37],
     _aMg_=_aLG_[38],
     _aMh_=_aLG_[39],
     _aMi_=_aLG_[40],
     _aMj_=_aLG_[41],
     _aMk_=_aLG_[42],
     _aMl_=_aLG_[43],
     _aMm_=_aLG_[44],
     _aMn_=_aLG_[45],
     _aMo_=_aLG_[46],
     _aMp_=_aLG_[47],
     _aMq_=_aLG_[48],
     _aMr_=_aLG_[49],
     _aMs_=_aLG_[50],
     _aMt_=_aLG_[51],
     _aMu_=_aLG_[52],
     _aMv_=_aLG_[53],
     _aMw_=_aLG_[54],
     _aMx_=_aLG_[55],
     _aMy_=_aLG_[56],
     _aMA_=_aMz_[1],
     _aMB_=_aMz_[2],
     _aMC_=_aMz_[3],
     _aMD_=_aMz_[4],
     _aME_=_aMz_[5],
     _aMF_=_aMz_[6],
     _aMG_=_aMz_[7],
     _aMH_=_aMz_[8],
     _aMI_=_aMz_[9],
     _aMJ_=_aMz_[10],
     _aMK_=_aMz_[11],
     _aML_=_aMz_[12],
     _aMM_=_aMz_[13],
     _aMN_=include$0[1],
     _aMO_=include$0[2];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$568);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Stable=
      [0,
       Unit_test,
       Unit_tests,
       0,
       _Y8_,
       _Y9_,
       _Y__,
       _Y$_,
       _Za_,
       _Zb_,
       _Zc_,
       _Zd_,
       _Ze_,
       _Zf_,
       _Zg_,
       _Zh_,
       _Zi_,
       _Zj_,
       _Zk_,
       _Zl_,
       _Zm_,
       _Zn_,
       _Zo_,
       _Zp_,
       _Zq_,
       _Zr_,
       _Zs_,
       _Zt_,
       _Zu_,
       _Zv_,
       _Zw_,
       _Zx_,
       _Zy_,
       _Zz_,
       _ZA_,
       _ZB_,
       _ZC_,
       _ZD_,
       _ZE_,
       _ZF_,
       _ZG_,
       _ZH_,
       _ZI_,
       _ZJ_,
       _ZK_,
       _ZL_,
       _ZM_,
       _ZN_,
       _ZO_,
       _ZP_,
       _ZQ_,
       _ZR_,
       _ZS_,
       _ZT_,
       _ZU_,
       _ZV_,
       _ZW_,
       _ZX_,
       _ZY_,
       _ZZ_,
       _Z0_,
       _Z1_,
       _Z2_,
       _Z3_,
       _Z4_,
       _Z5_,
       _Z6_,
       _Z7_,
       _Z8_,
       _Z9_,
       _Z__,
       _Z$_,
       __a_,
       __b_,
       __c_,
       __d_,
       __e_,
       __f_,
       __g_,
       __h_,
       __i_,
       __j_,
       __k_,
       __l_,
       __m_,
       __n_,
       __o_,
       __p_,
       __q_,
       __r_,
       __s_,
       __t_,
       __u_,
       __v_,
       __w_,
       __x_,
       __y_,
       __z_,
       __A_,
       __B_,
       __C_,
       __D_,
       __E_,
       __F_,
       __G_,
       __H_,
       __I_,
       __J_,
       __K_,
       __L_,
       __M_,
       __N_,
       __O_,
       __P_,
       __Q_,
       __R_,
       __S_,
       __T_,
       __U_,
       __V_,
       __W_,
       __X_,
       __Y_,
       __Z_,
       __0_,
       __1_,
       __2_,
       __3_,
       __4_,
       __5_,
       __6_,
       __7_,
       __8_,
       __9_,
       ____,
       __$_,
       _$a_,
       _$b_,
       _$c_,
       _$d_,
       _$e_,
       _$f_,
       _$g_,
       _$h_,
       _$i_,
       _$j_,
       _$k_,
       _$l_,
       _$m_,
       _$n_,
       _$o_,
       _$p_,
       _$q_,
       _$r_,
       _$s_,
       _$t_,
       _$u_,
       _$v_,
       _$w_,
       _$x_,
       _$y_,
       _$z_,
       _$A_,
       _$B_,
       _$C_,
       _$D_,
       _$E_,
       _$F_,
       _$G_,
       _$H_,
       _$I_,
       _$J_,
       _$K_,
       _$L_,
       _$M_,
       _$N_,
       _$O_,
       _$P_,
       _$Q_,
       _$R_,
       _$S_,
       _$T_,
       _$U_,
       _$V_,
       _$W_,
       _$X_,
       _$Y_,
       _$Z_,
       _$0_,
       _$1_,
       _$2_,
       _$3_,
       _$4_,
       _$5_,
       _$6_,
       _$7_,
       _$8_,
       _$9_,
       _$__,
       _$$_,
       _aaa_,
       _aab_,
       _aac_,
       _aad_,
       _aae_,
       _aaf_,
       _aag_,
       _aah_,
       _aai_,
       _aaj_,
       _aak_,
       _aal_,
       _aam_,
       _aan_,
       _aao_,
       _aap_,
       _aaq_,
       _aar_,
       _aas_,
       _aat_,
       _aau_,
       _aav_,
       _aax_,
       _aay_,
       _aaz_,
       _aaA_,
       _aaB_,
       _aaC_,
       _aaD_,
       hash_fold_t$36,
       _aaE_,
       _aaF_,
       _aaG_,
       _aaH_,
       _aaI_,
       _aaJ_,
       _aaK_,
       _aaL_,
       _aaM_,
       _aaN_,
       _aaO_,
       _aaP_,
       _aaQ_,
       _aaR_,
       _aaS_,
       _abj_,
       _abi_,
       _abh_,
       _abg_,
       _abf_,
       _abe_,
       _abd_,
       _abc_,
       _abb_,
       _aba_,
       _aa$_,
       _aa__,
       _aa9_,
       _aa8_,
       _aa7_,
       _aa6_,
       _aa5_,
       _aa4_,
       _aa3_,
       _aa2_,
       _aa1_,
       _aa0_,
       _aaZ_,
       _aaY_,
       _aaX_,
       _aaW_,
       _aaV_,
       _aaU_,
       _aaT_,
       bin_shape_sexp_option$0,
       bin_size_sexp_option$0,
       bin_write_sexp_option$0,
       bin_writer_sexp_option$0,
       bin_read_sexp_option$1,
       bin_read_sexp_option$2,
       bin_reader_sexp_option$0,
       bin_sexp_option$0,
       compare$27,
       hash_fold_t$13,
       bin_shape_sexp_list$0,
       bin_size_sexp_list$0,
       bin_write_sexp_list$0,
       bin_writer_sexp_list$0,
       bin_read_sexp_list$1,
       bin_read_sexp_list$2,
       bin_reader_sexp_list$0,
       bin_sexp_list$0,
       compare$19,
       hash_fold_t$12,
       Sexp,
       Hashable$0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       _aLH_,
       _aLI_,
       _aLJ_,
       _aLK_,
       _aLL_,
       _aLM_,
       _aLN_,
       _aLO_,
       _aLP_,
       _aLQ_,
       _aLR_,
       _aLS_,
       _aLT_,
       _aLU_,
       _aLV_,
       _aLW_,
       _aLX_,
       _aLY_,
       _aLZ_,
       _aL0_,
       _aL1_,
       _aL2_,
       _aL3_,
       _aL4_,
       _aL5_,
       _aL6_,
       _aL7_,
       _aL8_,
       _aL9_,
       _aL__,
       _aL$_,
       _aMa_,
       _aMb_,
       _aMc_,
       _aMd_,
       _aMe_,
       _aMf_,
       _aMg_,
       _aMh_,
       _aMi_,
       _aMj_,
       _aMk_,
       _aMl_,
       _aMm_,
       _aMn_,
       _aMo_,
       _aMp_,
       _aMq_,
       _aMr_,
       _aMs_,
       _aMt_,
       _aMu_,
       _aMv_,
       _aMw_,
       _aMx_,
       _aMy_,
       _aMA_,
       _aMB_,
       _aMC_,
       _aMD_,
       _aME_,
       _aMF_,
       _aMG_,
       _aMH_,
       _aMI_,
       _aMJ_,
       _aMK_,
       _aML_,
       _aMM_,
       _aMN_,
       _aMO_];
    caml_register_global(7601,Core_kernel_Stable,"Core_kernel__Stable");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$569);
    caml_call1(Expect_test_collector[4][1],cst_src_queue_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$570,cst$313);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$571);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Queue_intf=[0];
    caml_register_global
     (7602,Core_kernel_Queue_intf,"Core_kernel__Queue_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$572);
    caml_call1
     (Expect_test_collector[4][1],cst_src_int_replace_polymorphic_compare_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$573,cst$314);
    var
     _aMP_=Base_Import0[126],
     _aMQ_=_aMP_[1],
     _aMR_=_aMP_[2],
     _aMS_=_aMP_[3],
     _aMT_=_aMP_[4],
     _aMU_=_aMP_[5],
     _aMV_=_aMP_[6],
     _aMW_=_aMP_[7],
     _aMX_=_aMP_[8],
     _aMY_=_aMP_[9],
     _aMZ_=_aMP_[10],
     _aM0_=_aMP_[11],
     _aM1_=_aMP_[12];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$574);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Int_replace_polymorphic_compare=
      [0,
       _aMQ_,
       _aMR_,
       _aMS_,
       _aMT_,
       _aMU_,
       _aMV_,
       _aMW_,
       _aMX_,
       _aMY_,
       _aMZ_,
       _aM0_,
       _aM1_];
    caml_register_global
     (7604,
      Core_kernel_Int_replace_polymorphic_compare,
      "Core_kernel__Int_replace_polymorphic_compare");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$575);
    caml_call1(Expect_test_collector[4][1],cst_src_bigbuffer_internal_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$576,cst$315);
    function sexp_of_t$149(param)
     {var
       v_bstr=param[1],
       v_pos=param[2],
       v_len=param[3],
       v_init=param[4],
       arg=caml_call1(sexpifier,v_init),
       bnds=[0,[1,[0,_aM2_,[0,arg,0]]],0],
       arg$0=caml_call1(sexp_of_t$0,v_len),
       bnds$0=[0,[1,[0,_aM3_,[0,arg$0,0]]],bnds],
       arg$1=caml_call1(sexp_of_t$0,v_pos),
       bnds$1=[0,[1,[0,_aM4_,[0,arg$1,0]]],bnds$0],
       arg$2=caml_call1(sexpifier,v_bstr),
       bnds$2=[0,[1,[0,_aM5_,[0,arg$2,0]]],bnds$1];
      return [1,bnds$2]}
    function resize$1(buf,more)
     {var
       min_len=caml_call2(_ah_,buf[3],more),
       new_len=caml_call2(_ah_,min_len,min_len),
       new_buf=create$18(0,new_len);
      caml_call6(blito$3,buf[1],0,[0,buf[2]],new_buf,0,0);
      buf[1] = new_buf;
      buf[3] = new_len;
      return 0}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$577);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var include$159=[0,sexp_of_t$149,resize$1];
    caml_register_global(7605,include$159,"Core_kernel__Bigbuffer_internal");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$578);
    caml_call1(Expect_test_collector[4][1],cst_src_bigbuffer_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$579,cst$316);
    function internal(t){return t}
    function length$50(t){return t[2]}
    function create$67(n)
     {var n$0=caml_call2(_aK_,1,n),bstr=create$18(0,n$0);
      return [0,bstr,0,n$0,bstr]}
    function contents(buf)
     {return caml_call3(to_string$17,0,[0,buf[2]],buf[1])}
    function contents_bytes(buf)
     {return caml_call3(to_bytes,0,[0,buf[2]],buf[1])}
    function big_contents(buf){return caml_call3(subo$3,0,[0,buf[2]],buf[1])}
    function volatile_contents(buf){return buf[1]}
    function add_char(buf,c)
     {var pos=buf[2];
      if(caml_call2(_aF_,pos,buf[3]))resize$1(buf,1);
      caml_ba_set_1(buf[1],pos,c);
      buf[2] = caml_call2(_ah_,pos,1);
      return 0}
    function create$68(len){return caml_call1(create$13,len)}
    function unsafe_blit$6(src,src_pos,dst,dst_pos,len)
     {return caml_call5(To_bytes[3],src[1],src_pos,dst,dst_pos,len)}
    var _aM6_=[0,create$68,length$18,get$2,set$6,unsafe_blit$6];
    function create$69(len)
     {var t=create$67(len),_aZM_=1;
      if(! (len < 1))
       {var for$0=_aZM_;
        for(;;)
         {add_char(t,97);
          var _aZN_=for$0 + 1 | 0;
          if(len !== for$0){var for$0=_aZN_;continue}
          break}}
      return t}
    function set$21(t,i,c){return caml_ba_set_1(t[1],i,c)}
    function get$17(t,i){return caml_ba_get_1(t[1],i)}
    var _aM7_=[0,create$69,length$50,get$17,set$21];
    function of_bool$2(b){return b?97:98}
    var
     include$160=
      caml_call1
       (caml_call1
         (caml_call1(Base_for_tests_Test_blit[6],[0,equal$22,of_bool$2]),
          _aM7_),
        _aM6_),
     blit$10=include$160[1],
     blito$7=include$160[2],
     unsafe_blit$7=include$160[3],
     sub$13=include$160[4],
     subo$7=include$160[5];
    function nth$9(buf,pos)
     {if(! caml_call2(_aA_,pos,0))
       if(! caml_call2(_aF_,pos,buf[2]))return caml_ba_get_1(buf[1],pos);
      return caml_call1(_aW_,cst_Bigbuffer_nth)}
    function clear$11(buf){buf[2] = 0;return 0}
    function reset(buf)
     {buf[2] = 0;buf[1] = buf[4];buf[3] = caml_ba_dim_1(buf[1]);return 0}
    function add_substring(buf,src,src_pos,len)
     {var _aZJ_=caml_call2(_aA_,src_pos,0);
      if(_aZJ_)
       var _aZK_=_aZJ_;
      else
       var
        _aZL_=caml_call2(_aA_,len,0),
        _aZK_=
         _aZL_
         ||
         caml_call2
          (_aE_,src_pos,caml_call2(_ai_,caml_ml_string_length(src),len));
      if(_aZK_)caml_call1(_aW_,cst_Bigbuffer_add_substring);
      var new_pos=caml_call2(_ah_,buf[2],len);
      if(caml_call2(_aE_,new_pos,buf[3]))resize$1(buf,len);
      caml_call5(From_string$0[1],src,src_pos,buf[1],buf[2],len);
      buf[2] = new_pos;
      return 0}
    function add_subbytes(buf,src,src_pos,len)
     {var _aZG_=caml_call2(_aA_,src_pos,0);
      if(_aZG_)
       var _aZH_=_aZG_;
      else
       var
        _aZI_=caml_call2(_aA_,len,0),
        _aZH_=
         _aZI_
         ||
         caml_call2
          (_aE_,src_pos,caml_call2(_ai_,caml_call1(length$18,src),len));
      if(_aZH_)caml_call1(_aW_,cst_Bigbuffer_add_subbytes);
      var new_pos=caml_call2(_ah_,buf[2],len);
      if(caml_call2(_aE_,new_pos,buf[3]))resize$1(buf,len);
      caml_call5(From_bytes[1],src,src_pos,buf[1],buf[2],len);
      buf[2] = new_pos;
      return 0}
    function add_bigstring(buf,src)
     {var len=caml_ba_dim_1(src),new_pos=caml_call2(_ah_,buf[2],len);
      if(caml_call2(_aE_,new_pos,buf[3]))resize$1(buf,len);
      caml_call6(blito$3,src,0,[0,len],buf[1],[0,buf[2]],0);
      buf[2] = new_pos;
      return 0}
    function add_string(buf,src)
     {var len=caml_ml_string_length(src),new_pos=caml_call2(_ah_,buf[2],len);
      if(caml_call2(_aE_,new_pos,buf[3]))resize$1(buf,len);
      caml_call6(From_string$0[2],src,0,[0,len],buf[1],[0,buf[2]],0);
      buf[2] = new_pos;
      return 0}
    function add_bytes(buf,src)
     {var len=caml_call1(length$18,src),new_pos=caml_call2(_ah_,buf[2],len);
      if(caml_call2(_aE_,new_pos,buf[3]))resize$1(buf,len);
      caml_call6(From_bytes[2],src,0,[0,len],buf[1],[0,buf[2]],0);
      buf[2] = new_pos;
      return 0}
    function add_buffer(buf_dst,buf_src)
     {var
       len=buf_src[2],
       dst_pos=buf_dst[2],
       new_pos=caml_call2(_ah_,dst_pos,len);
      if(caml_call2(_aE_,new_pos,buf_dst[3]))resize$1(buf_dst,len);
      caml_call6(blito$3,buf_src[1],0,[0,len],buf_dst[1],[0,dst_pos],0);
      buf_dst[2] = new_pos;
      return 0}
    function add_substitute(buf,f,s)
     {var lim$1=caml_ml_string_length(s),previous=32,i$7=0;
      for(;;)
       {var _aZF_=caml_call2(_aA_,i$7,lim$1);
        if(_aZF_)
         {var previous$0=caml_string_get(s,i$7);
          if(36 === previous$0)
           {if(caml_call2(equal$22,previous,92))
             {add_char(buf,previous$0);
              var i$8=caml_call2(_ah_,i$7,1),previous=previous$0,i$7=i$8;
              continue}
            var start=caml_call2(_ah_,i$7,1),opening=caml_string_get(s,start);
            if(40 === opening)
             var switch$0=0;
            else
             if(123 === opening)
              var switch$0=0;
             else
              {var
                i$6=caml_call2(_ah_,start,1),
                lim$0=caml_ml_string_length(s),
                i$3=i$6;
               for(;;)
                {if(caml_call2(_aF_,i$3,lim$0))
                  var stop=lim$0;
                 else
                  {var match=caml_string_get(s,i$3);
                   if(95 <= match)
                    if(123 <= match)
                     if(192 <= match)
                      switch(match - 192 | 0)
                       {case 0:
                        case 1:
                        case 2:
                        case 7:
                        case 8:
                        case 9:
                        case 10:
                        case 11:
                        case 14:
                        case 15:
                        case 20:
                        case 25:
                        case 27:
                        case 28:
                        case 32:
                        case 33:
                        case 34:
                        case 39:
                        case 40:
                        case 41:
                        case 42:
                        case 43:
                        case 46:
                        case 47:
                        case 52:
                        case 57:
                        case 59:
                        case 60:var switch$1=1;break;
                        default:var switch$1=0}
                     else
                      var switch$1=0;
                    else
                     var switch$1=96 === match?0:1;
                   else
                    var
                     switch$1=
                      58 <= match?25 < (match - 65 | 0) >>> 0?0:1:48 <= match?1:0;
                   if(switch$1)
                    {var i$4=caml_call2(_ah_,i$3,1),i$3=i$4;continue}
                   var stop=i$3}
                 var
                  match$0=
                   [0,
                    caml_call3(_HE_,s,start,caml_call2(_ai_,stop,start)),
                    stop],
                  switch$0=1;
                 break}}
            if(! switch$0)
             {var i$5=caml_call2(_ah_,start,1),k$2=0;
              if(40 === opening)
               var _aZD_=41;
              else
               {if(123 !== opening)throw [0,Assert_failure,_aM8_];
                var _aZD_=125}
              var lim=caml_ml_string_length(s),k=k$2,i=i$5;
              for(;;)
               {if(caml_call2(_aF_,i,lim))throw Caml[141];
                if(caml_call2(equal$22,caml_string_get(s,i),opening))
                 {var
                   i$0=caml_call2(_ah_,i,1),
                   k$0=caml_call2(_ah_,k,1),
                   k=k$0,
                   i=i$0;
                  continue}
                if(! caml_call2(equal$22,caml_string_get(s,i),_aZD_))
                 {var i$2=caml_call2(_ah_,i,1),i=i$2;continue}
                if(! caml_call2(_aD_,k,0))
                 {var
                   i$1=caml_call2(_ah_,i,1),
                   k$1=caml_call2(_ai_,k,1),
                   k=k$1,
                   i=i$1;
                  continue}
                var
                 _aZE_=caml_call2(_ah_,i,1),
                 match$0=
                  [0,
                   caml_call3
                    (_HE_,s,i$5,caml_call2(_ai_,caml_call2(_ai_,i,start),1)),
                   _aZE_];
                break}}
            var next_i=match$0[2],ident=match$0[1];
            add_string(buf,caml_call1(f,ident));
            var previous=32,i$7=next_i;
            continue}
          if(caml_call2(equal$22,previous,92))
           {add_char(buf,92);
            add_char(buf,previous$0);
            var i$9=caml_call2(_ah_,i$7,1),previous=previous$0,i$7=i$9;
            continue}
          if(92 === previous$0)
           {var i$10=caml_call2(_ah_,i$7,1),previous=previous$0,i$7=i$10;
            continue}
          add_char(buf,previous$0);
          var i$11=caml_call2(_ah_,i$7,1),previous=previous$0,i$7=i$11;
          continue}
        return _aZF_}}
    function formatter_of_buffer(buf)
     {function _aZA_(_aZC_){return 0}
      function _aZB_(s,pos,len){return add_substring(buf,s,pos,len)}
      return caml_call2(Stdlib_format[102],_aZB_,_aZA_)}
    function bprintf(buf)
     {var _aZx_=formatter_of_buffer(buf);
      function _aZy_(_aZz_){return 0}
      return caml_call2(Stdlib_format[118],_aZy_,_aZx_)}
    var Format=[0,formatter_of_buffer,bprintf];
    function bprintf$0(buf)
     {return caml_call1(_eL_,function(_aZw_){return add_string(buf,_aZw_)})}
    var Printf$0=[0,bprintf$0];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$580);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Bigbuffer=
      [0,
       sexp_of_t$149,
       create$67,
       contents,
       contents_bytes,
       blit$10,
       blito$7,
       unsafe_blit$7,
       sub$13,
       subo$7,
       nth$9,
       length$50,
       clear$11,
       reset,
       add_char,
       add_string,
       add_substring,
       add_bytes,
       add_subbytes,
       add_buffer,
       big_contents,
       volatile_contents,
       add_bigstring,
       add_substitute,
       Format,
       Printf$0,
       internal];
    caml_register_global(7607,Core_kernel_Bigbuffer,"Core_kernel__Bigbuffer");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$581);
    caml_call1(Expect_test_collector[4][1],cst_src_bigstring_marshal_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$582,cst$317);
    function marshal_blit(opt,v,_aZv_,len,bstr)
     {if(opt)var sth=opt[1],flags=sth;else var flags=0;
      if(_aZv_)var sth$0=_aZv_[1],pos=sth$0;else var pos=0;
      var len$0=get_opt_len(bstr,pos,len);
      check_args(cst_marshal,pos,len$0,bstr);
      return runtime.bigstring_marshal_blit_stub(v,pos,len$0,bstr,flags)}
    function marshal(opt,x)
     {if(opt)var sth=opt[1],flags=sth;else var flags=0;
      return runtime.bigstring_marshal_stub(x,flags)}
    function marshal_data_size(opt,bstr)
     {if(opt)var sth=opt[1],pos=sth;else var pos=0;
      if(! caml_call2(_aA_,pos,0))
       {var _aZu_=Stdlib_marshal[6];
        if(! caml_call2(_aE_,pos,caml_call2(_ai_,caml_ba_dim_1(bstr),_aZu_)))
         return bigstring_marshal_data_size_stub(pos,bstr)}
      return caml_call1(_aW_,cst_Bigstring_marshal_data_size)}
    function unmarshal_next(pos,bstr)
     {if(pos)
       var
        pos$0=pos[1],
        _aZt_=
         caml_call2(_aA_,pos$0,0)
          ?caml_call1(_aW_,cst_Bigstring_unmarshal_pos_0)
          :pos$0,
        pos$1=_aZt_;
      else
       var pos$1=0;
      var
       len=caml_ba_dim_1(bstr),
       len_header=caml_call2(_ai_,len,Stdlib_marshal[6]);
      if(caml_call2(_aE_,pos$1,len_header))
       return caml_call1(_aW_,cst_Bigstring_unmarshal_pos_len_header);
      var
       data_len=bigstring_marshal_data_size_stub(pos$1,bstr),
       block_len=caml_call2(_ah_,Stdlib_marshal[6],data_len),
       next_pos=caml_call2(_ah_,pos$1,block_len);
      if(caml_call2(_aE_,next_pos,len))
       return caml_call1(_aW_,cst_Bigstring_unmarshal_pos_block_len_len);
      var v=runtime.bigstring_unmarshal_stub(pos$1,block_len,bstr);
      return [0,v,next_pos]}
    function unmarshal(pos,bstr)
     {return caml_call1(_aT_,unmarshal_next(pos,bstr))}
    function skip(pos,bstr)
     {if(pos)
       var
        pos$0=pos[1],
        _aZs_=
         caml_call2(_aA_,pos$0,0)
          ?caml_call1(_aW_,cst_Bigstring_skip_pos_0)
          :pos$0,
        pos$1=_aZs_;
      else
       var pos$1=0;
      var
       len=caml_ba_dim_1(bstr),
       len_header=caml_call2(_ai_,len,Stdlib_marshal[6]);
      if(caml_call2(_aE_,pos$1,len_header))
       return caml_call1(_aW_,cst_Bigstring_skip_pos_len_header);
      var
       data_len=bigstring_marshal_data_size_stub(pos$1,bstr),
       block_len=caml_call2(_ah_,Stdlib_marshal[6],data_len),
       next_pos=caml_call2(_ah_,pos$1,block_len);
      return caml_call2(_aE_,next_pos,len)
              ?caml_call1(_aW_,cst_Bigstring_skip_pos_block_len_len)
              :next_pos}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$583);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel_Bigstring_marshal=
      [0,marshal_blit,marshal,marshal_data_size,unmarshal,unmarshal_next,skip];
    caml_register_global
     (7609,Core_kernel_Bigstring_marshal,"Core_kernel__Bigstring_marshal");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$584);
    caml_call1(Expect_test_collector[4][1],cst_src_container_unit_tests_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$585,cst$318);
    function Test_generic(Elt,Container)
     {var
       _aYO_=Container[13],
       _aYP_=Container[14],
       _aYQ_=Container[6],
       _aYR_=Container[4],
       _aYS_=Container[5],
       _aYT_=Container[3],
       _aYU_=Container[19],
       _aYV_=Container[2],
       _aYW_=Container[1],
       _aYX_=Container[16],
       _aYY_=Container[15],
       _aYZ_=Container[7],
       _aY0_=Container[8];
      function _aY1_(param)
       {return caml_call2
                (iter$2,
                 _aNA_,
                 function(n)
                  {var
                    list=caml_call2(init$1,n,Elt[1]),
                    c=caml_call1(Container[20],list);
                   function sort(l){return caml_call2(sort$0,caml_compare,l)}
                   function sorts_are_equal(l1,l2)
                    {var _aZr_=sort(l2);return caml_equal(sort(l1),_aZr_)}
                   if(n === caml_call1(Container[3],c))
                    {if((0 === n?1:0) === caml_call1(Container[4],c))
                      {var _aY$_=function(ac,e){return [0,e,ac]};
                       if(sorts_are_equal(list,caml_call3(Container[6],c,0,_aY$_)))
                        {if(sorts_are_equal(list,caml_call1(Container[15],c)))
                          {if
                            (sorts_are_equal
                              (list,caml_call1(to_list$1,caml_call1(Container[16],c))))
                            {var
                              _aZa_=
                               function(e){return 0 === caml_call1(Elt[2],e)?1:0};
                             if
                              ((0 < n?1:0)
                               ===
                               caml_call1(is_some,caml_call2(Container[13],c,_aZa_)))
                              {var
                                _aZb_=
                                 function(e){return caml_call1(Elt[2],e) === (n - 1 | 0)?1:0};
                               if
                                ((0 < n?1:0)
                                 ===
                                 caml_call1(is_some,caml_call2(Container[13],c,_aZb_)))
                                {var
                                  _aZc_=
                                   function(e){return caml_call1(Elt[2],e) === n?1:0};
                                 if(caml_call1(is_none,caml_call2(Container[13],c,_aZc_)))
                                  {var _aZd_=caml_call1(Elt[1],0);
                                   if((0 < n?1:0) === caml_call2(Container[19],c,_aZd_))
                                    {var _aZe_=caml_call1(Elt[1],n - 1 | 0);
                                     if((0 < n?1:0) === caml_call2(Container[19],c,_aZe_))
                                      {var _aZf_=caml_call1(Elt[1],n);
                                       if(caml_call2(Container[19],c,_aZf_))
                                        throw [0,Assert_failure,_aM9_];
                                       var
                                        _aZg_=
                                         function(e){return 0 === caml_call1(Elt[2],e)?_aM__:0};
                                       if
                                        ((0 < n?1:0)
                                         ===
                                         caml_call1(is_some,caml_call2(Container[14],c,_aZg_)))
                                        {var
                                          _aZh_=
                                           function(e)
                                            {return caml_call1(Elt[2],e) === (n - 1 | 0)?_aM$_:0};
                                         if
                                          ((0 < n?1:0)
                                           ===
                                           caml_call1(is_some,caml_call2(Container[14],c,_aZh_)))
                                          {var
                                            _aZi_=
                                             function(e){return caml_call1(Elt[2],e) === n?_aNa_:0};
                                           if(caml_call1(is_none,caml_call2(Container[14],c,_aZi_)))
                                            {var
                                              r=[0,0],
                                              _aZj_=
                                               function(e)
                                                {var _aZq_=caml_call1(Elt[2],e);
                                                 r[1] = r[1] + _aZq_ | 0;
                                                 return 0};
                                             caml_call2(Container[5],c,_aZj_);
                                             var
                                              _aZk_=
                                               caml_call3
                                                (fold$2,
                                                 list,
                                                 0,
                                                 function(n,e){return n + caml_call1(Elt[2],e) | 0});
                                             if(r[1] === _aZk_)
                                              {var
                                                _aZl_=
                                                 caml_call3
                                                  (Container[12],
                                                   [0,t_of_sexp$32,sexp_of_t$43,_w7_,_w4_,_w3_],
                                                   c,
                                                   Elt[2]);
                                               if(r[1] === _aZl_)
                                                {var
                                                  sexp=caml_call1(caml_call1(Container[2],sexp_of_t$43),c),
                                                  c2=caml_call1(caml_call1(Container[1],t_of_sexp$32),sexp);
                                                 if(sorts_are_equal(list,caml_call1(Container[15],c2)))
                                                  {var
                                                    compare_elt=
                                                     function(a,b)
                                                      {var _aZp_=caml_call1(Elt[2],b);
                                                       return caml_call2(compare$30,caml_call1(Elt[2],a),_aZp_)};
                                                   if(0 === n)
                                                    {if(0 !== r[1])throw [0,Assert_failure,_aNf_];
                                                     if(0 !== caml_call2(Container[17],c,compare_elt))
                                                      throw [0,Assert_failure,_aNe_];
                                                     if(0 !== caml_call2(Container[18],c,compare_elt))
                                                      throw [0,Assert_failure,_aNd_]}
                                                   else
                                                    {if(r[1] !== (caml_mul(n,n - 1 | 0) / 2 | 0))
                                                      throw [0,Assert_failure,_aNj_];
                                                     var _aZn_=Elt[2];
                                                     if
                                                      (!
                                                       caml_equal
                                                        (caml_call2
                                                          (map$23,caml_call2(Container[17],c,compare_elt),_aZn_),
                                                         _aNg_))
                                                      throw [0,Assert_failure,_aNi_];
                                                     var _aZo_=Elt[2];
                                                     if
                                                      (!
                                                       caml_equal
                                                        (caml_call2
                                                          (map$23,caml_call2(Container[18],c,compare_elt),_aZo_),
                                                         [0,n - 1 | 0]))
                                                      throw [0,Assert_failure,_aNh_]}
                                                   var
                                                    mid=caml_call1(Container[3],c) / 2 | 0,
                                                    _aZm_=
                                                     function(count,elt)
                                                      {return count === mid?[1,count]:[0,count + 1 | 0]},
                                                    match=caml_call3(Container[7],c,0,_aZm_);
                                                   if(0 === match[0])
                                                    {if(0 === match[1])
                                                      {if(0 === caml_call1(Container[3],c))return 0;
                                                       throw [0,Assert_failure,_aNb_]}
                                                     return caml_call1(failwith,cst_Expected_fold_to_stop_early)}
                                                   var x=match[1];
                                                   if(mid === x)return 0;
                                                   throw [0,Assert_failure,_aNc_]}
                                                 throw [0,Assert_failure,_aNk_]}
                                               throw [0,Assert_failure,_aNl_]}
                                             throw [0,Assert_failure,_aNm_]}
                                           throw [0,Assert_failure,_aNn_]}
                                         throw [0,Assert_failure,_aNo_]}
                                       throw [0,Assert_failure,_aNp_]}
                                     throw [0,Assert_failure,_aNq_]}
                                   throw [0,Assert_failure,_aNr_]}
                                 throw [0,Assert_failure,_aNs_]}
                               throw [0,Assert_failure,_aNt_]}
                             throw [0,Assert_failure,_aNu_]}
                           throw [0,Assert_failure,_aNv_]}
                         throw [0,Assert_failure,_aNw_]}
                       throw [0,Assert_failure,_aNx_]}
                     throw [0,Assert_failure,_aNy_]}
                   throw [0,Assert_failure,_aNz_]})}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_List_iter_0_1_2_3_4_8_1024_f_fun,
        0,
        cst_src_container_unit_tests_ml$0,
        46,
        2,
        2533,
        _aY1_);
      var
       _aY2_=Container[17],
       _aY3_=Container[18],
       _aY4_=Container[11],
       _aY5_=Container[12],
       _aY6_=Container[9],
       _aY7_=Container[10];
      function _aY8_(param)
       {return caml_call2
                (iter$2,
                 _aNE_,
                 function(bools)
                  {var
                    count_should_be=
                     caml_call3
                      (fold$2,bools,0,function(n,b){return b?n + 1 | 0:n}),
                    forall_should_be=
                     caml_call3
                      (fold$2,bools,1,function(ac,b){var ac$0=b?ac:b;return ac$0}),
                    exists_should_be=
                     caml_call3
                      (fold$2,bools,0,function(ac,b){var b$0=b || ac;return b$0}),
                    _aY9_=
                     caml_call2
                      (map$11,
                       bools,
                       function(b){var _aY__=b?1:0;return caml_call1(Elt[1],_aY__)}),
                    container=caml_call1(Container[20],_aY9_);
                   function is_one(e){return 1 === caml_call1(Elt[2],e)?1:0}
                   if
                    (forall_should_be
                     ===
                     caml_call2(Container[10],container,is_one))
                    {if
                      (exists_should_be
                       ===
                       caml_call2(Container[9],container,is_one))
                      {if
                        (count_should_be
                         ===
                         caml_call2(Container[11],container,is_one))
                        return 0;
                       throw [0,Assert_failure,_aNB_]}
                     throw [0,Assert_failure,_aNC_]}
                   throw [0,Assert_failure,_aND_]})}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_List_iter_true_false_fals,
        0,
        cst_src_container_unit_tests_ml$1,
        106,
        2,
        950,
        _aY8_);
      return [0,
              _aYW_,
              _aYV_,
              _aYT_,
              _aYR_,
              _aYS_,
              _aYQ_,
              _aYZ_,
              _aY0_,
              _aY6_,
              _aY7_,
              _aY4_,
              _aY5_,
              _aYO_,
              _aYP_,
              _aYY_,
              _aYX_,
              _aY2_,
              _aY3_,
              _aYU_]}
    function Test_S1(Container)
     {var
       t_of_sexp=Container[1],
       sexp_of_t=Container[2],
       length=Container[4],
       is_empty=Container[5],
       iter=Container[6],
       fold=Container[7],
       fold_result=Container[8],
       fold_until=Container[9],
       exists=Container[10],
       for_all=Container[11],
       count=Container[12],
       sum=Container[13],
       find=Container[14],
       find_map=Container[15],
       to_list=Container[16],
       to_array=Container[17],
       min_elt=Container[18],
       max_elt=Container[19],
       of_list=Container[20],
       _aYK_=Container[3];
      function mem(t,a){return caml_call3(_aYK_,t,a,caml_equal)}
      var
       _aYL_=
        [0,
         t_of_sexp,
         sexp_of_t,
         length,
         is_empty,
         iter,
         fold,
         fold_result,
         fold_until,
         exists,
         for_all,
         count,
         sum,
         find,
         find_map,
         to_list,
         to_array,
         min_elt,
         max_elt,
         mem,
         of_list];
      function of_int(_aYN_){return _aYN_}
      function to_int(_aYM_){return _aYM_}
      var
       include=Test_generic([0,of_int,to_int],_aYL_),
       t_of_sexp$0=include[1],
       sexp_of_t$0=include[2],
       length$0=include[3],
       is_empty$0=include[4],
       iter$0=include[5],
       fold$0=include[6],
       fold_result$0=include[7],
       fold_until$0=include[8],
       exists$0=include[9],
       for_all$0=include[10],
       count$0=include[11],
       sum$0=include[12],
       find$0=include[13],
       find_map$0=include[14],
       to_list$0=include[15],
       to_array$0=include[16],
       min_elt$0=include[17],
       max_elt$0=include[18],
       mem$0=Container[3];
      return [0,
              t_of_sexp$0,
              sexp_of_t$0,
              length$0,
              is_empty$0,
              iter$0,
              fold$0,
              fold_result$0,
              fold_until$0,
              exists$0,
              for_all$0,
              count$0,
              sum$0,
              find$0,
              find_map$0,
              to_list$0,
              to_array$0,
              min_elt$0,
              max_elt$0,
              mem$0]}
    Test_S1
     ([0,
       _iK_,
       _iJ_,
       mem$0,
       length$1,
       is_empty$1,
       iter$0,
       fold$1,
       fold_result$0,
       fold_until$0,
       exists$0,
       for_all$0,
       count$0,
       sum$1,
       find$0,
       find_map$0,
       to_list$1,
       to_array$0,
       min_elt$0,
       max_elt$0,
       of_list$1]);
    Test_S1
     ([0,
       t_of_sexp$30,
       sexp_of_t$41,
       _uc_,
       length$17,
       is_empty$14,
       iter$17,
       _ua_,
       _uf_,
       _ug_,
       _t9_,
       _ub_,
       _t7_,
       _t8_,
       _t__,
       _t$_,
       to_list$9,
       to_array$8,
       _ud_,
       _ue_,
       of_list$10]);
    Test_S1
     ([0,
       t_of_sexp$30,
       sexp_of_t$41,
       _uc_,
       length$17,
       is_empty$14,
       iter$17,
       _ua_,
       _uf_,
       _ug_,
       _t9_,
       _ub_,
       _t7_,
       _t8_,
       _t__,
       _t$_,
       to_list$9,
       to_array$8,
       _ud_,
       _ue_,
       of_list$10]);
    Test_S1
     ([0,
       t_of_sexp$109,
       sexp_of_t$142,
       mem$23,
       length$45,
       is_empty$27,
       iter$41,
       fold$29,
       fold_result$13,
       fold_until$13,
       exists$23,
       for_all$23,
       count$18,
       sum$14,
       find$24,
       find_map$13,
       to_list$23,
       to_array$17,
       min_elt$21,
       max_elt$17,
       of_list$16]);
    Test_S1
     ([0,
       t_of_sexp$23,
       sexp_of_t$25,
       mem$2,
       length$4,
       is_empty$2,
       iter$2,
       fold$2,
       fold_result$1,
       fold_until$1,
       exists$1,
       for_all$1,
       count$1,
       sum$2,
       find$2,
       find_map$1,
       to_list$2,
       to_array$1,
       min_elt$1,
       max_elt$1,
       of_list$4]);
    Test_S1
     ([0,
       t_of_sexp$91,
       sexp_of_t$94,
       mem$14,
       length$23,
       is_empty$15,
       iter$23,
       fold$19,
       fold_result$8,
       fold_until$8,
       exists$17,
       for_all$17,
       count$13,
       sum$9,
       find$15,
       find_map$8,
       to_list$15,
       to_array$9,
       min_elt$12,
       max_elt$12,
       of_list$11]);
    Test_S1
     ([0,
       t_of_sexp$113,
       sexp_of_t$148,
       mem$25,
       length$49,
       is_empty$30,
       iter$45,
       fold$31,
       fold_result$14,
       fold_until$14,
       exists$25,
       for_all$25,
       count$20,
       sum$15,
       find$26,
       find_map$14,
       to_list$24,
       to_array$18,
       min_elt$22,
       max_elt$18,
       of_list$17]);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$586);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Container_unit_tests=[0,Test_generic,Test_S1];
    caml_register_global
     (7610,
      Core_kernel_Container_unit_tests,
      "Core_kernel__Container_unit_tests");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$587);
    caml_call1(Expect_test_collector[4][1],cst_src_core_kernel_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$588,cst$319);
    var
     Core_kernel_private=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
     include$161=
      [0,
       Applicative$0,
       Avltree$0,
       Backtrace$0,
       Bin_prot,
       Binary_search$0,
       Commutative_group$0,
       Comparisons$0,
       Equal$0,
       Exn$0,
       Expect_test_config$0,
       Field$1,
       Floatable$0,
       Hash$0,
       Heap_block$0,
       In_channel,
       Int_conversions,
       Invariant$0,
       Monad$0,
       Obj_array$0,
       Ordered_collection_common,
       Out_channel,
       Poly$2,
       Polymorphic_compare$0,
       Pretty_printer$0,
       Random$0,
       Sexp_maybe$0,
       Staged$0,
       Stringable$0,
       Validate$0,
       With_return$0,
       Word_size$0,
       Array$0,
       Binary_searchable$0,
       Blit$0,
       Bool,
       Bytes,
       Char,
       Comparable,
       Comparator,
       Container$0,
       Either,
       Error,
       Float$0,
       Fn,
       Hash_set$14,
       Hashtbl,
       Hashtbl_intf,
       Info,
       Int$0,
       Int_intf,
       Int32,
       Int63,
       Int64$0,
       Lazy,
       Linked_queue,
       List$1,
       Maybe_bound,
       Nativeint,
       Option,
       Ordering,
       Or_error,
       Printf,
       Ref,
       Result,
       Sequence$0,
       Set$24,
       Sexp$0,
       Sexpable$0,
       Sign,
       Source_code_position,
       String,
       Type_equal,
       Unit,
       Arg,
       Bag,
       Bigsubstring,
       Binable$3,
       Binary_packing,
       Blang,
       Bounded_index,
       Bounded_int_table,
       Bucket,
       Bus,
       Byte_units,
       Day_of_week,
       Debug,
       Deque,
       Deriving_hash,
       Doubly_linked,
       Ephemeron,
       Fdeque,
       Fheap,
       Flags,
       Float_with_finite_only_serialization,
       Force_once,
       Fqueue,
       Gc,
       Hash_heap,
       Hash_queue$13,
       Hashable$2,
       Heap,
       Hexdump,
       Hexdump_intf,
       Host_and_port,
       Identifiable,
       Immediate_option,
       Immediate_option_intf,
       Int_set,
       Interfaces,
       Limiter,
       Linked_stack,
       Map$24,
       Memo,
       Month,
       Moption,
       No_polymorphic_compare,
       Nothing,
       Only_in_test,
       Option_array,
       Optional_syntax$3,
       Percent,
       Pid,
       Pool,
       Pool_intf,
       Pooled_hashtbl,
       Printexc,
       Queue,
       Quickcheck,
       Quickcheck_intf,
       Quickcheckable,
       Robustly_comparable,
       Rope,
       Set_once,
       Splittable_random$0,
       Stable_comparable,
       Stable_unit_test,
       Stack,
       String_id,
       Substring,
       Substring_intf,
       Thread_safe_queue,
       Timing_wheel_ns,
       Total_map,
       Tuple,
       Tuple_type$0,
       Tuple2,
       Tuple3,
       Type_immediacy,
       Uniform_array,
       Union_find,
       Unique_id,
       Unit_of_time,
       Univ,
       Univ_map,
       Unpack_buffer,
       Validated,
       Weak,
       Weak_pointer,
       _aLA_,
       _aLB_,
       _aLC_,
       invalid_arg,
       failwith,
       Exit,
       min$5,
       max$5,
       abs$3,
       max_int,
       min_int,
       lnot$3,
       infinity,
       neg_infinity,
       nan,
       max_float,
       min_float,
       epsilon_float,
       _Dw_,
       char_of_int,
       string_of_bool,
       bool_of_string,
       string_of_int,
       string_of_float,
       stdin,
       stdout,
       stderr,
       print_char,
       print_string,
       print_bytes,
       print_int,
       print_float,
       print_endline,
       print_newline,
       prerr_char,
       prerr_string,
       prerr_bytes,
       prerr_int,
       prerr_float,
       prerr_endline,
       prerr_newline,
       read_line,
       read_int,
       read_float,
       open_out,
       open_out_bin,
       open_out_gen,
       flush,
       flush_all,
       output_char,
       output_string,
       output_bytes,
       output,
       output_substring,
       output_byte,
       output_binary_int,
       output_value,
       seek_out,
       pos_out,
       out_channel_length,
       close_out,
       close_out_noerr,
       set_binary_mode_out,
       open_in,
       open_in_bin,
       open_in_gen,
       input_char,
       input_line,
       input,
       really_input,
       really_input_string,
       input_byte,
       input_binary_int,
       input_value,
       seek_in,
       pos_in,
       in_channel_length,
       close_in,
       close_in_noerr,
       set_binary_mode_in,
       LargeFile,
       string_of_format,
       _Dy_,
       exit,
       at_exit,
       valid_float_lexem,
       unsafe_really_input,
       do_at_exit,
       _hQ_,
       _IB_,
       _IC_,
       _ID_,
       _IE_,
       _IF_,
       _IG_,
       robustly_compare,
       t_of_sexp$58,
       sexpifier,
       _QU_,
       _QV_,
       _QW_,
       _QX_,
       _QY_,
       _QZ_,
       _Q0_,
       _Q1_,
       _Q2_,
       _Q3_,
       _Q4_,
       _Q5_,
       _Nz_,
       never_returns,
       _Q6_,
       _Q7_,
       _Q8_,
       _Q9_,
       _Q__,
       _Q$_,
       _Ra_,
       _Rb_,
       _Rc_,
       _Rd_,
       _Re_,
       _Rf_,
       _Rg_,
       _Rh_,
       _Ri_,
       _Rj_,
       _Rk_,
       _Rl_,
       _Rm_,
       _Rn_,
       _Ro_,
       _Rp_,
       _Rq_,
       _Rr_,
       _Rs_,
       _Rt_,
       _Ru_,
       _Rv_,
       _Rw_,
       _Rx_,
       _Ry_,
       _Rz_,
       _RA_,
       _RB_,
       _RC_,
       _RD_,
       _RE_,
       _RF_,
       _RG_,
       _RH_,
       _RI_,
       _RJ_,
       _RK_,
       _RL_,
       _RM_,
       _RN_,
       _RO_,
       _RP_,
       _RQ_,
       _RR_,
       _RS_,
       _RT_,
       _RU_,
       _RV_,
       _RW_,
       _RX_,
       _RY_,
       _RZ_,
       Bug,
       C_malloc_exn,
       _R3_,
       fst3,
       snd3,
       trd3,
       uw,
       _wX_,
       _wY_,
       _wU_,
       _R4_,
       print_s,
       _eK_,
       _hR_,
       _eO_,
       _lv_,
       _lw_,
       _R5_,
       failwithp,
       failwiths,
       force,
       _eP_,
       ident,
       _R6_,
       _eI_,
       is_none,
       is_some,
       _eL_,
       _ls_,
       _R7_,
       phys_same,
       _eR_,
       _R8_,
       _R9_,
       _kM_,
       round$3,
       _eJ_,
       _R__,
       _R$_,
       _Sa_,
       _Sb_,
       _Sc_,
       _Sd_,
       _Se_,
       _Sf_,
       _Sg_,
       _Sh_,
       _Si_,
       _Sj_,
       _Sk_,
       _Sl_,
       _Sm_,
       _Sn_,
       _So_,
       _Sp_,
       bin_array,
       bin_read_array$0,
       bin_read_array,
       bin_reader_array,
       bin_size_array,
       bin_write_array,
       bin_writer_array,
       bin_shape_array,
       _iI_,
       _iK_,
       _iJ_,
       typerep_of_array$0,
       _Sw_,
       bin_bool,
       _bY_,
       _bZ_,
       bin_reader_bool,
       _bb_,
       _bW_,
       bin_writer_bool,
       bin_shape_bool,
       _BS_,
       _BF_,
       hash_bool,
       _Bz_,
       _BA_,
       typerep_of_bool$0,
       typename_of_bool$0,
       bin_char,
       _Ci_,
       _Ch_,
       bin_reader_char,
       _Cf_,
       _Ce_,
       bin_writer_char,
       bin_shape_char,
       _Cx_,
       _Cl_,
       hash_char,
       _Cn_,
       _Co_,
       typerep_of_char$0,
       typename_of_char$0,
       bin_float,
       bin_read_t$5,
       bin_read_t$6,
       bin_reader_float,
       bin_size_t$2,
       bin_write_t$2,
       bin_writer_float,
       bin_shape_float,
       compare$48,
       hash_fold_t$27,
       hash_float,
       t_of_sexp$47,
       sexp_of_t$59,
       typerep_of_float$0,
       typename_of_float$0,
       bin_int,
       bin_read_t$74,
       bin_read_t$73,
       bin_reader_int,
       bin_size_t$36,
       bin_write_t$36,
       bin_writer_int,
       bin_shape_int,
       compare$30,
       hash_fold_t$15,
       hash_int,
       t_of_sexp$32,
       sexp_of_t$43,
       typerep_of_int$0,
       typename_of_int$0,
       bin_int32,
       bin_read_t$91,
       bin_read_t$92,
       bin_reader_int32,
       bin_size_t$45,
       bin_write_t$45,
       bin_writer_int32,
       bin_shape_int32,
       _KS_,
       _K5_,
       hash_int32,
       _K3_,
       _K2_,
       typerep_of_int32$0,
       typename_of_int32$0,
       bin_int64,
       bin_read_t$75,
       bin_read_t$76,
       bin_reader_int64,
       bin_size_t$37,
       bin_write_t$37,
       bin_writer_int64,
       bin_shape_int64,
       _y1_,
       _zc_,
       hash_int64,
       _za_,
       _y$_,
       typerep_of_int64$0,
       typename_of_int64$0,
       bin_lazy_t,
       bin_read_lazy_t$0,
       bin_read_lazy_t,
       bin_reader_lazy_t,
       bin_size_lazy_t,
       bin_write_lazy_t,
       bin_writer_lazy_t,
       bin_shape_lazy_t,
       _Ll_,
       _Lm_,
       _Ln_,
       _Lo_,
       typerep_of_lazy_t$0,
       _SV_,
       bin_list,
       bin_read_list$0,
       bin_read_list,
       bin_reader_list,
       bin_size_list,
       bin_write_list,
       bin_writer_list,
       bin_shape_list,
       compare$19,
       hash_fold_t$12,
       t_of_sexp$23,
       sexp_of_t$25,
       typerep_of_list$0,
       _S2_,
       bin_nativeint,
       bin_read_t$95,
       bin_read_t$96,
       bin_reader_nativeint,
       bin_size_t$47,
       bin_write_t$47,
       bin_writer_nativeint,
       bin_shape_nativeint,
       _MW_,
       _M9_,
       hash_nativeint,
       _M7_,
       _M6_,
       typerep_of_nativeint$0,
       typename_of_nativeint$0,
       bin_option,
       bin_read_option$0,
       bin_read_option,
       bin_reader_option,
       bin_size_option,
       bin_write_option,
       bin_writer_option,
       bin_shape_option,
       compare$27,
       hash_fold_t$13,
       t_of_sexp$29,
       sexp_of_t$39,
       typerep_of_option$0,
       _Ta_,
       bin_string,
       bin_read_t$89,
       bin_read_t$90,
       bin_reader_string,
       bin_size_t$44,
       bin_write_t$44,
       bin_writer_string,
       bin_shape_string,
       compare$47,
       hash_fold_t$25,
       hash_string,
       t_of_sexp$46,
       sexp_of_t$58,
       typerep_of_string$0,
       typename_of_string$0,
       bin_bytes,
       bin_read_t$1,
       bin_read_t$2,
       bin_reader_bytes,
       bin_size_t$0,
       bin_write_t$0,
       bin_writer_bytes,
       bin_shape_bytes,
       compare$38,
       t_of_sexp$40,
       sexp_of_t$51,
       typerep_of_bytes$0,
       typename_of_bytes$0,
       bin_ref,
       bin_read_ref$0,
       bin_read_ref,
       bin_reader_ref,
       bin_size_ref,
       bin_write_ref,
       bin_writer_ref,
       bin_shape_ref,
       _Oj_,
       _Ok_,
       _Ol_,
       typerep_of_ref$0,
       _Tn_,
       bin_unit,
       _AR_,
       _AS_,
       bin_reader_unit,
       _AU_,
       _AV_,
       bin_writer_unit,
       bin_shape_unit,
       _Bh_,
       _A6_,
       hash_unit,
       _A8_,
       _A9_,
       typerep_of_unit$0,
       typename_of_unit$0,
       bin_float_array,
       bin_read_float_array$0,
       bin_read_float_array,
       bin_reader_float_array,
       bin_size_float_array,
       bin_write_float_array,
       bin_writer_float_array,
       bin_shape_float_array,
       compare_float_array,
       float_array_of_sexp,
       sexp_of_float_array,
       typerep_of_float_array,
       typename_of_float_array,
       _Tv_,
       bin_shape_sexp_array,
       bin_size_sexp_array,
       bin_write_sexp_array,
       bin_writer_sexp_array,
       bin_read_sexp_array,
       bin_read_sexp_array$0,
       bin_reader_sexp_array,
       bin_sexp_array,
       _iI_,
       Typename_of_sexp_array,
       _TC_,
       typerep_of_sexp_array,
       bin_shape_sexp_bool,
       _bb_,
       _bW_,
       bin_writer_sexp_bool,
       _bZ_,
       _bY_,
       bin_reader_sexp_bool,
       bin_sexp_bool,
       _BS_,
       _BF_,
       hash_sexp_bool,
       Typename_of_sexp_bool,
       typename_of_sexp_bool,
       typerep_of_sexp_bool,
       bin_shape_sexp_list,
       bin_size_sexp_list,
       bin_write_sexp_list,
       bin_writer_sexp_list,
       bin_read_sexp_list,
       bin_read_sexp_list$0,
       bin_reader_sexp_list,
       bin_sexp_list,
       compare$19,
       hash_fold_t$12,
       Typename_of_sexp_list,
       _TM_,
       typerep_of_sexp_list,
       bin_shape_sexp_option,
       bin_size_sexp_option,
       bin_write_sexp_option,
       bin_writer_sexp_option,
       bin_read_sexp_option,
       bin_read_sexp_option$0,
       bin_reader_sexp_option,
       bin_sexp_option,
       compare$27,
       hash_fold_t$13,
       Typename_of_sexp_option,
       _TT_,
       typerep_of_sexp_option,
       bin_shape_sexp_opaque$0,
       bin_size_sexp_opaque$0,
       bin_write_sexp_opaque$0,
       bin_writer_sexp_opaque$0,
       bin_read_sexp_opaque$1,
       bin_read_sexp_opaque$2,
       bin_reader_sexp_opaque$0,
       bin_sexp_opaque$0,
       compare_sexp_opaque$0,
       hash_fold_sexp_opaque$0,
       Typename_of_sexp_opaque$0,
       typename_of_sexp_opaque$0,
       typerep_of_sexp_opaque$0,
       _aLD_,
       _aLE_,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       Core_kernel_private],
     _aNF_=include$161[1],
     _aNG_=include$161[2],
     _aNH_=include$161[3],
     _aNI_=include$161[4],
     _aNJ_=include$161[5],
     _aNK_=include$161[6],
     _aNL_=include$161[7],
     _aNM_=include$161[8],
     _aNN_=include$161[9],
     _aNO_=include$161[10],
     _aNP_=include$161[11],
     _aNQ_=include$161[12],
     _aNR_=include$161[13],
     _aNS_=include$161[14],
     _aNT_=include$161[15],
     _aNU_=include$161[16],
     _aNV_=include$161[17],
     _aNW_=include$161[18],
     _aNX_=include$161[19],
     _aNY_=include$161[20],
     _aNZ_=include$161[21],
     _aN0_=include$161[22],
     _aN1_=include$161[23],
     _aN2_=include$161[24],
     _aN3_=include$161[25],
     _aN4_=include$161[26],
     _aN5_=include$161[27],
     _aN6_=include$161[28],
     _aN7_=include$161[29],
     _aN8_=include$161[30],
     _aN9_=include$161[31],
     _aN__=include$161[32],
     _aN$_=include$161[33],
     _aOa_=include$161[34],
     _aOb_=include$161[35],
     _aOc_=include$161[36],
     _aOd_=include$161[37],
     _aOe_=include$161[38],
     _aOf_=include$161[39],
     _aOg_=include$161[40],
     _aOh_=include$161[41],
     _aOi_=include$161[42],
     _aOj_=include$161[43],
     _aOk_=include$161[44],
     _aOl_=include$161[45],
     _aOm_=include$161[46],
     _aOn_=include$161[47],
     _aOo_=include$161[48],
     _aOp_=include$161[49],
     _aOq_=include$161[50],
     _aOr_=include$161[51],
     _aOs_=include$161[52],
     _aOt_=include$161[53],
     _aOu_=include$161[54],
     _aOv_=include$161[55],
     _aOw_=include$161[56],
     _aOx_=include$161[57],
     _aOy_=include$161[58],
     _aOz_=include$161[59],
     _aOA_=include$161[60],
     _aOB_=include$161[61],
     _aOC_=include$161[62],
     _aOD_=include$161[63],
     _aOE_=include$161[64],
     _aOF_=include$161[65],
     _aOG_=include$161[66],
     _aOH_=include$161[67],
     _aOI_=include$161[68],
     _aOJ_=include$161[69],
     _aOK_=include$161[70],
     _aOL_=include$161[71],
     _aOM_=include$161[72],
     _aON_=include$161[73],
     _aOO_=include$161[74],
     _aOP_=include$161[75],
     _aOQ_=include$161[76],
     _aOR_=include$161[77],
     _aOS_=include$161[78],
     _aOT_=include$161[79],
     _aOU_=include$161[80],
     _aOV_=include$161[81],
     _aOW_=include$161[82],
     _aOX_=include$161[83],
     _aOY_=include$161[84],
     _aOZ_=include$161[85],
     _aO0_=include$161[86],
     _aO1_=include$161[87],
     _aO2_=include$161[88],
     _aO3_=include$161[89],
     _aO4_=include$161[90],
     _aO5_=include$161[91],
     _aO6_=include$161[92],
     _aO7_=include$161[93],
     _aO8_=include$161[94],
     _aO9_=include$161[95],
     _aO__=include$161[96],
     _aO$_=include$161[97],
     _aPa_=include$161[98],
     _aPb_=include$161[99],
     _aPc_=include$161[100],
     _aPd_=include$161[101],
     _aPe_=include$161[102],
     _aPf_=include$161[103],
     _aPg_=include$161[104],
     _aPh_=include$161[105],
     _aPi_=include$161[106],
     _aPj_=include$161[107],
     _aPk_=include$161[108],
     _aPl_=include$161[109],
     _aPm_=include$161[110],
     _aPn_=include$161[111],
     _aPo_=include$161[112],
     _aPp_=include$161[113],
     _aPq_=include$161[114],
     _aPr_=include$161[115],
     _aPs_=include$161[116],
     _aPt_=include$161[117],
     _aPu_=include$161[118],
     _aPv_=include$161[119],
     _aPw_=include$161[120],
     _aPx_=include$161[121],
     _aPy_=include$161[122],
     _aPz_=include$161[123],
     _aPA_=include$161[124],
     _aPB_=include$161[125],
     _aPC_=include$161[126],
     _aPD_=include$161[127],
     _aPE_=include$161[128],
     _aPF_=include$161[129],
     _aPG_=include$161[130],
     _aPH_=include$161[131],
     _aPI_=include$161[132],
     _aPJ_=include$161[133],
     _aPK_=include$161[134],
     _aPL_=include$161[135],
     _aPM_=include$161[136],
     _aPN_=include$161[137],
     _aPO_=include$161[138],
     _aPP_=include$161[139],
     _aPQ_=include$161[140],
     _aPR_=include$161[141],
     _aPS_=include$161[142],
     _aPT_=include$161[143],
     _aPU_=include$161[144],
     _aPV_=include$161[145],
     _aPW_=include$161[146],
     _aPX_=include$161[147],
     _aPY_=include$161[148],
     _aPZ_=include$161[149],
     _aP0_=include$161[150],
     _aP1_=include$161[151],
     _aP2_=include$161[152],
     _aP3_=include$161[153],
     _aP4_=include$161[154],
     _aP5_=include$161[155],
     _aP6_=include$161[156],
     _aP7_=include$161[157],
     _aP8_=include$161[158],
     _aP9_=include$161[159],
     _aP__=include$161[160],
     _aP$_=include$161[161],
     _aQa_=include$161[162],
     _aQb_=include$161[163],
     _aQc_=include$161[164],
     _aQd_=include$161[165],
     _aQe_=include$161[166],
     _aQf_=include$161[167],
     _aQg_=include$161[168],
     _aQh_=include$161[169],
     _aQi_=include$161[170],
     _aQj_=include$161[171],
     _aQk_=include$161[172],
     _aQl_=include$161[173],
     _aQm_=include$161[174],
     _aQn_=include$161[175],
     _aQo_=include$161[176],
     _aQp_=include$161[177],
     _aQq_=include$161[178],
     _aQr_=include$161[179],
     _aQs_=include$161[180],
     _aQt_=include$161[181],
     _aQu_=include$161[182],
     _aQv_=include$161[183],
     _aQw_=include$161[184],
     _aQx_=include$161[185],
     _aQy_=include$161[186],
     _aQz_=include$161[187],
     _aQA_=include$161[188],
     _aQB_=include$161[189],
     _aQC_=include$161[190],
     _aQD_=include$161[191],
     _aQE_=include$161[192],
     _aQF_=include$161[193],
     _aQG_=include$161[194],
     _aQH_=include$161[195],
     _aQI_=include$161[196],
     _aQJ_=include$161[197],
     _aQK_=include$161[198],
     _aQL_=include$161[199],
     _aQM_=include$161[200],
     _aQN_=include$161[201],
     _aQO_=include$161[202],
     _aQP_=include$161[203],
     _aQQ_=include$161[204],
     _aQR_=include$161[205],
     _aQS_=include$161[206],
     _aQT_=include$161[207],
     _aQU_=include$161[208],
     _aQV_=include$161[209],
     _aQW_=include$161[210],
     _aQX_=include$161[211],
     _aQY_=include$161[212],
     _aQZ_=include$161[213],
     _aQ0_=include$161[214],
     _aQ1_=include$161[215],
     _aQ2_=include$161[216],
     _aQ3_=include$161[217],
     _aQ4_=include$161[218],
     _aQ5_=include$161[219],
     _aQ6_=include$161[220],
     _aQ7_=include$161[221],
     _aQ8_=include$161[222],
     _aQ9_=include$161[223],
     _aQ__=include$161[224],
     _aQ$_=include$161[225],
     _aRa_=include$161[226],
     _aRb_=include$161[227],
     _aRc_=include$161[228],
     _aRd_=include$161[229],
     _aRe_=include$161[230],
     _aRf_=include$161[231],
     _aRg_=include$161[232],
     _aRh_=include$161[233],
     _aRi_=include$161[234],
     _aRj_=include$161[235],
     _aRk_=include$161[236],
     _aRl_=include$161[237],
     _aRm_=include$161[238],
     _aRn_=include$161[239],
     _aRo_=include$161[240],
     _aRp_=include$161[241],
     _aRq_=include$161[242],
     _aRr_=include$161[243],
     _aRs_=include$161[244],
     _aRt_=include$161[245],
     _aRu_=include$161[246],
     _aRv_=include$161[247],
     _aRw_=include$161[248],
     _aRx_=include$161[249],
     _aRy_=include$161[250],
     _aRz_=include$161[251],
     _aRA_=include$161[252],
     _aRB_=include$161[253],
     _aRC_=include$161[254],
     _aRD_=include$161[255],
     _aRE_=include$161[256],
     _aRF_=include$161[257],
     _aRG_=include$161[258],
     _aRH_=include$161[259],
     _aRI_=include$161[260],
     _aRJ_=include$161[261],
     _aRK_=include$161[262],
     _aRL_=include$161[263],
     _aRM_=include$161[264],
     _aRN_=include$161[265],
     _aRO_=include$161[266],
     _aRP_=include$161[267],
     _aRQ_=include$161[268],
     _aRR_=include$161[269],
     _aRS_=include$161[270],
     _aRT_=include$161[271],
     _aRU_=include$161[272],
     _aRV_=include$161[273],
     _aRW_=include$161[274],
     _aRX_=include$161[275],
     _aRY_=include$161[276],
     _aRZ_=include$161[277],
     _aR0_=include$161[278],
     _aR1_=include$161[279],
     _aR2_=include$161[280],
     _aR3_=include$161[281],
     _aR4_=include$161[282],
     _aR5_=include$161[283],
     _aR6_=include$161[284],
     _aR7_=include$161[285],
     _aR8_=include$161[286],
     _aR9_=include$161[287],
     _aR__=include$161[288],
     _aR$_=include$161[289],
     _aSa_=include$161[290],
     _aSb_=include$161[291],
     _aSc_=include$161[292],
     _aSd_=include$161[293],
     _aSe_=include$161[294],
     _aSf_=include$161[295],
     _aSg_=include$161[296],
     _aSh_=include$161[297],
     _aSi_=include$161[298],
     _aSj_=include$161[299],
     _aSk_=include$161[300],
     _aSl_=include$161[301],
     _aSm_=include$161[302],
     _aSn_=include$161[303],
     _aSo_=include$161[304],
     _aSp_=include$161[305],
     _aSq_=include$161[306],
     _aSr_=include$161[307],
     _aSs_=include$161[308],
     _aSt_=include$161[309],
     _aSu_=include$161[310],
     _aSv_=include$161[311],
     _aSw_=include$161[312],
     _aSx_=include$161[313],
     _aSy_=include$161[314],
     _aSz_=include$161[315],
     _aSA_=include$161[316],
     _aSB_=include$161[317],
     _aSC_=include$161[318],
     _aSD_=include$161[319],
     _aSE_=include$161[320],
     _aSF_=include$161[321],
     _aSG_=include$161[322],
     _aSH_=include$161[323],
     _aSI_=include$161[324],
     _aSJ_=include$161[325],
     _aSK_=include$161[326],
     _aSL_=include$161[327],
     _aSM_=include$161[328],
     _aSN_=include$161[329],
     _aSO_=include$161[330],
     _aSP_=include$161[331],
     _aSQ_=include$161[332],
     _aSR_=include$161[333],
     _aSS_=include$161[334],
     _aST_=include$161[335],
     _aSU_=include$161[336],
     _aSV_=include$161[337],
     _aSW_=include$161[338],
     _aSX_=include$161[339],
     _aSY_=include$161[340],
     _aSZ_=include$161[341],
     _aS0_=include$161[342],
     _aS1_=include$161[343],
     _aS2_=include$161[344],
     _aS3_=include$161[345],
     _aS4_=include$161[346],
     _aS5_=include$161[347],
     _aS6_=include$161[348],
     _aS7_=include$161[349],
     _aS8_=include$161[350],
     _aS9_=include$161[351],
     _aS__=include$161[352],
     _aS$_=include$161[353],
     _aTa_=include$161[354],
     _aTb_=include$161[355],
     _aTc_=include$161[356],
     _aTd_=include$161[357],
     _aTe_=include$161[358],
     _aTf_=include$161[359],
     _aTg_=include$161[360],
     _aTh_=include$161[361],
     _aTi_=include$161[362],
     _aTj_=include$161[363],
     _aTk_=include$161[364],
     _aTl_=include$161[365],
     _aTm_=include$161[366],
     _aTn_=include$161[367],
     _aTo_=include$161[368],
     _aTp_=include$161[369],
     _aTq_=include$161[370],
     _aTr_=include$161[371],
     _aTs_=include$161[372],
     _aTt_=include$161[373],
     _aTu_=include$161[374],
     _aTv_=include$161[375],
     _aTw_=include$161[376],
     _aTx_=include$161[377],
     _aTy_=include$161[378],
     _aTz_=include$161[379],
     _aTA_=include$161[380],
     _aTB_=include$161[381],
     _aTC_=include$161[382],
     _aTD_=include$161[383],
     _aTE_=include$161[384],
     _aTF_=include$161[385],
     _aTG_=include$161[386],
     _aTH_=include$161[387],
     _aTI_=include$161[388],
     _aTJ_=include$161[389],
     _aTK_=include$161[390],
     _aTL_=include$161[391],
     _aTM_=include$161[392],
     _aTN_=include$161[393],
     _aTO_=include$161[394],
     _aTP_=include$161[395],
     _aTQ_=include$161[396],
     _aTR_=include$161[397],
     _aTS_=include$161[398],
     _aTT_=include$161[399],
     _aTU_=include$161[400],
     _aTV_=include$161[401],
     _aTW_=include$161[402],
     _aTX_=include$161[403],
     _aTY_=include$161[404],
     _aTZ_=include$161[405],
     _aT0_=include$161[406],
     _aT1_=include$161[407],
     _aT2_=include$161[408],
     _aT3_=include$161[409],
     _aT4_=include$161[410],
     _aT5_=include$161[411],
     _aT6_=include$161[412],
     _aT7_=include$161[413],
     _aT8_=include$161[414],
     _aT9_=include$161[415],
     _aT__=include$161[416],
     _aT$_=include$161[417],
     _aUa_=include$161[418],
     _aUb_=include$161[419],
     _aUc_=include$161[420],
     _aUd_=include$161[421],
     _aUe_=include$161[422],
     _aUf_=include$161[423],
     _aUg_=include$161[424],
     _aUh_=include$161[425],
     _aUi_=include$161[426],
     _aUj_=include$161[427],
     _aUk_=include$161[428],
     _aUl_=include$161[429],
     _aUm_=include$161[430],
     _aUn_=include$161[431],
     _aUo_=include$161[432],
     _aUp_=include$161[433],
     _aUq_=include$161[434],
     _aUr_=include$161[435],
     _aUs_=include$161[436],
     _aUt_=include$161[437],
     _aUu_=include$161[438],
     _aUv_=include$161[439],
     _aUw_=include$161[440],
     _aUx_=include$161[441],
     _aUy_=include$161[442],
     _aUz_=include$161[443],
     _aUA_=include$161[444],
     _aUB_=include$161[445],
     _aUC_=include$161[446],
     _aUD_=include$161[447],
     _aUE_=include$161[448],
     _aUF_=include$161[449],
     _aUG_=include$161[450],
     _aUH_=include$161[451],
     _aUI_=include$161[452],
     _aUJ_=include$161[453],
     _aUK_=include$161[454],
     _aUL_=include$161[455],
     _aUM_=include$161[456],
     _aUN_=include$161[457],
     _aUO_=include$161[458],
     _aUP_=include$161[459],
     _aUQ_=include$161[460],
     _aUR_=include$161[461],
     _aUS_=include$161[462],
     _aUT_=include$161[463],
     _aUU_=include$161[464],
     _aUV_=include$161[465],
     _aUW_=include$161[466],
     _aUX_=include$161[467],
     _aUY_=include$161[468],
     _aUZ_=include$161[469],
     _aU0_=include$161[470],
     _aU1_=include$161[471],
     _aU2_=include$161[472],
     _aU3_=include$161[473],
     _aU4_=include$161[474],
     _aU5_=include$161[475],
     _aU6_=include$161[476],
     _aU7_=include$161[477],
     _aU8_=include$161[478],
     _aU9_=include$161[479],
     _aU__=include$161[480],
     _aU$_=include$161[481],
     _aVa_=include$161[482],
     _aVb_=include$161[483],
     _aVc_=include$161[484],
     _aVd_=include$161[485],
     _aVe_=include$161[486],
     _aVf_=include$161[487],
     _aVg_=include$161[488],
     _aVh_=include$161[489],
     _aVi_=include$161[490],
     _aVj_=include$161[491],
     _aVk_=include$161[492],
     _aVl_=include$161[493],
     _aVm_=include$161[494],
     _aVn_=include$161[495],
     _aVo_=include$161[496],
     _aVp_=include$161[497],
     _aVq_=include$161[498],
     _aVr_=include$161[499],
     _aVs_=include$161[500],
     _aVt_=include$161[501],
     _aVu_=include$161[502],
     _aVv_=include$161[503],
     _aVw_=include$161[504],
     _aVx_=include$161[505],
     _aVy_=include$161[506],
     _aVz_=include$161[507],
     _aVA_=include$161[508],
     _aVB_=include$161[509],
     _aVC_=include$161[510],
     _aVD_=include$161[511],
     _aVE_=include$161[512],
     _aVF_=include$161[513],
     _aVG_=include$161[514],
     _aVH_=include$161[515],
     _aVI_=include$161[516],
     _aVJ_=include$161[517],
     _aVK_=include$161[518],
     _aVL_=include$161[519],
     _aVM_=include$161[520],
     _aVN_=include$161[521],
     _aVO_=include$161[522],
     _aVP_=include$161[523],
     _aVQ_=include$161[524],
     _aVR_=include$161[525],
     _aVS_=include$161[526],
     _aVT_=include$161[527],
     _aVU_=include$161[528],
     _aVV_=include$161[529],
     _aVW_=include$161[530],
     _aVX_=include$161[531],
     _aVY_=include$161[532],
     _aVZ_=include$161[533],
     _aV0_=include$161[534],
     _aV1_=include$161[535],
     _aV2_=include$161[536],
     _aV3_=include$161[537],
     _aV4_=include$161[538],
     _aV5_=include$161[539],
     _aV6_=include$161[540],
     _aV7_=include$161[541],
     _aV8_=include$161[542],
     _aV9_=include$161[543],
     _aV__=include$161[544],
     _aV$_=include$161[545],
     _aWa_=include$161[546],
     _aWb_=include$161[547],
     _aWc_=include$161[548],
     _aWd_=include$161[549],
     _aWe_=include$161[550],
     _aWf_=include$161[551],
     _aWg_=include$161[552],
     _aWh_=include$161[553],
     _aWi_=include$161[554],
     _aWj_=include$161[555],
     _aWk_=include$161[556],
     _aWl_=include$161[557],
     _aWm_=include$161[558],
     _aWn_=include$161[559],
     _aWo_=include$161[560],
     _aWp_=include$161[561],
     _aWq_=include$161[562],
     _aWr_=include$161[563],
     _aWs_=include$161[564],
     _aWt_=include$161[565],
     _aWu_=include$161[566],
     _aWv_=include$161[567],
     _aWw_=include$161[568],
     _aWx_=include$161[569],
     _aWy_=include$161[570],
     _aWz_=include$161[571],
     _aWA_=include$161[572],
     _aWB_=include$161[573],
     _aWC_=include$161[574],
     _aWD_=include$161[575],
     _aWE_=include$161[576],
     _aWF_=include$161[577],
     _aWG_=include$161[578],
     _aWH_=include$161[579],
     _aWI_=include$161[580],
     _aWJ_=include$161[581],
     _aWK_=include$161[582],
     _aWL_=include$161[583],
     _aWM_=include$161[584],
     _aWN_=include$161[585],
     _aWO_=include$161[586],
     _aWP_=include$161[587],
     _aWQ_=include$161[588],
     _aWR_=include$161[589],
     _aWS_=include$161[590],
     _aWT_=include$161[591],
     _aWU_=include$161[592],
     _aWV_=include$161[593],
     _aWW_=include$161[594],
     _aWX_=include$161[595],
     _aWY_=include$161[596],
     _aWZ_=include$161[597],
     _aW0_=include$161[598],
     _aW1_=include$161[599],
     _aW2_=include$161[600],
     _aW3_=include$161[601],
     _aW4_=include$161[602],
     _aW5_=include$161[603],
     _aW6_=include$161[604],
     _aW7_=include$161[605],
     _aW8_=include$161[606],
     _aW9_=include$161[607],
     _aW__=include$161[608],
     _aW$_=include$161[609],
     _aXa_=include$161[610],
     _aXb_=include$161[611],
     _aXc_=include$161[612],
     _aXd_=include$161[613],
     _aXe_=include$161[614],
     _aXf_=include$161[615],
     _aXg_=include$161[616],
     _aXh_=include$161[617],
     _aXi_=include$161[618],
     _aXj_=include$161[619],
     _aXk_=include$161[620],
     _aXl_=include$161[621],
     _aXm_=include$161[622],
     _aXn_=include$161[623],
     _aXo_=include$161[624],
     _aXp_=include$161[625],
     _aXq_=include$161[626],
     _aXr_=include$161[627],
     _aXs_=include$161[628],
     _aXt_=include$161[629],
     _aXu_=include$161[630],
     _aXv_=include$161[631],
     _aXw_=include$161[632],
     _aXx_=include$161[633],
     _aXy_=include$161[634],
     _aXz_=include$161[635],
     _aXA_=include$161[636],
     _aXB_=include$161[637],
     _aXC_=include$161[638],
     _aXD_=include$161[639],
     _aXE_=include$161[640],
     _aXF_=include$161[641],
     _aXG_=include$161[642],
     _aXH_=include$161[643],
     _aXI_=include$161[644],
     _aXJ_=include$161[645],
     _aXK_=include$161[646],
     _aXL_=include$161[647],
     _aXM_=include$161[648],
     _aXN_=include$161[649],
     _aXO_=include$161[650],
     _aXP_=include$161[651],
     _aXQ_=include$161[652],
     _aXR_=include$161[653],
     _aXS_=include$161[654],
     _aXT_=include$161[655],
     _aXU_=include$161[656],
     _aXV_=include$161[657],
     _aXW_=include$161[658],
     _aXX_=include$161[659],
     _aXY_=include$161[660],
     _aXZ_=include$161[661],
     _aX0_=include$161[662],
     _aX1_=include$161[663],
     _aX2_=include$161[664],
     _aX3_=include$161[665],
     _aX4_=include$161[666],
     _aX5_=include$161[667],
     _aX6_=include$161[668],
     _aX7_=include$161[669],
     _aX8_=include$161[670],
     _aX9_=include$161[671],
     _aX__=include$161[672],
     _aX$_=include$161[673],
     _aYa_=include$161[674],
     _aYb_=include$161[675],
     _aYc_=include$161[676],
     _aYd_=include$161[677],
     _aYe_=include$161[678],
     _aYf_=include$161[679],
     _aYg_=include$161[680],
     _aYh_=include$161[681],
     _aYi_=include$161[682],
     _aYj_=include$161[683],
     _aYk_=include$161[684],
     _aYl_=include$161[685],
     _aYm_=include$161[686],
     _aYn_=include$161[687],
     _aYo_=include$161[688],
     _aYp_=include$161[689],
     _aYq_=include$161[690],
     _aYr_=include$161[691],
     _aYs_=include$161[692],
     _aYt_=include$161[693],
     _aYu_=include$161[694],
     _aYv_=include$161[695],
     _aYw_=include$161[696],
     _aYx_=include$161[697],
     _aYy_=include$161[698],
     _aYz_=include$161[699],
     _aYA_=include$161[700];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$589);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Core_kernel$0=
      [0,
       include$161,
       _aNF_,
       _aNG_,
       _aNH_,
       _aNI_,
       _aNJ_,
       _aNK_,
       _aNL_,
       _aNM_,
       _aNN_,
       _aNO_,
       _aNP_,
       _aNQ_,
       _aNR_,
       _aNS_,
       _aNT_,
       _aNU_,
       _aNV_,
       _aNW_,
       _aNX_,
       _aNY_,
       _aNZ_,
       _aN0_,
       _aN1_,
       _aN2_,
       _aN3_,
       _aN4_,
       _aN5_,
       _aN6_,
       _aN7_,
       _aN8_,
       _aN9_,
       _aN__,
       _aN$_,
       _aOa_,
       _aOb_,
       _aOc_,
       _aOd_,
       _aOe_,
       _aOf_,
       _aOg_,
       _aOh_,
       _aOi_,
       _aOj_,
       _aOk_,
       _aOl_,
       _aOm_,
       _aOn_,
       _aOo_,
       _aOp_,
       _aOq_,
       _aOr_,
       _aOs_,
       _aOt_,
       _aOu_,
       _aOv_,
       _aOw_,
       _aOx_,
       _aOy_,
       _aOz_,
       _aOA_,
       _aOB_,
       _aOC_,
       _aOD_,
       _aOE_,
       _aOF_,
       _aOG_,
       _aOH_,
       _aOI_,
       _aOJ_,
       _aOK_,
       _aOL_,
       _aOM_,
       _aON_,
       _aOO_,
       _aOP_,
       _aOQ_,
       _aOR_,
       _aOS_,
       _aOT_,
       _aOU_,
       _aOV_,
       _aOW_,
       _aOX_,
       _aOY_,
       _aOZ_,
       _aO0_,
       _aO1_,
       _aO2_,
       _aO3_,
       _aO4_,
       _aO5_,
       _aO6_,
       _aO7_,
       _aO8_,
       _aO9_,
       _aO__,
       _aO$_,
       _aPa_,
       _aPb_,
       _aPc_,
       _aPd_,
       _aPe_,
       _aPf_,
       _aPg_,
       _aPh_,
       _aPi_,
       _aPj_,
       _aPk_,
       _aPl_,
       _aPm_,
       _aPn_,
       _aPo_,
       _aPp_,
       _aPq_,
       _aPr_,
       _aPs_,
       _aPt_,
       _aPu_,
       _aPv_,
       _aPw_,
       _aPx_,
       _aPy_,
       _aPz_,
       _aPA_,
       _aPB_,
       _aPC_,
       _aPD_,
       _aPE_,
       _aPF_,
       _aPG_,
       _aPH_,
       _aPI_,
       _aPJ_,
       _aPK_,
       _aPL_,
       _aPM_,
       _aPN_,
       _aPO_,
       _aPP_,
       _aPQ_,
       _aPR_,
       _aPS_,
       _aPT_,
       _aPU_,
       _aPV_,
       _aPW_,
       _aPX_,
       _aPY_,
       _aPZ_,
       _aP0_,
       _aP1_,
       _aP2_,
       _aP3_,
       _aP4_,
       _aP5_,
       _aP6_,
       _aP7_,
       _aP8_,
       _aP9_,
       _aP__,
       _aP$_,
       _aQa_,
       _aQb_,
       _aQc_,
       _aQd_,
       _aQe_,
       _aQf_,
       _aQg_,
       _aQh_,
       _aQi_,
       _aQj_,
       _aQk_,
       _aQl_,
       _aQm_,
       _aQn_,
       _aQo_,
       _aQp_,
       _aQq_,
       _aQr_,
       _aQs_,
       _aQt_,
       _aQu_,
       _aQv_,
       _aQw_,
       _aQx_,
       _aQy_,
       _aQz_,
       _aQA_,
       _aQB_,
       _aQC_,
       _aQD_,
       _aQE_,
       _aQF_,
       _aQG_,
       _aQH_,
       _aQI_,
       _aQJ_,
       _aQK_,
       _aQL_,
       _aQM_,
       _aQN_,
       _aQO_,
       _aQP_,
       _aQQ_,
       _aQR_,
       _aQS_,
       _aQT_,
       _aQU_,
       _aQV_,
       _aQW_,
       _aQX_,
       _aQY_,
       _aQZ_,
       _aQ0_,
       _aQ1_,
       _aQ2_,
       _aQ3_,
       _aQ4_,
       _aQ5_,
       _aQ6_,
       _aQ7_,
       _aQ8_,
       _aQ9_,
       _aQ__,
       _aQ$_,
       _aRa_,
       _aRb_,
       _aRc_,
       _aRd_,
       _aRe_,
       _aRf_,
       _aRg_,
       _aRh_,
       _aRi_,
       _aRj_,
       _aRk_,
       _aRl_,
       _aRm_,
       _aRn_,
       _aRo_,
       _aRp_,
       _aRq_,
       _aRr_,
       _aRs_,
       _aRt_,
       _aRu_,
       _aRv_,
       _aRw_,
       _aRx_,
       _aRy_,
       _aRz_,
       _aRA_,
       _aRB_,
       _aRC_,
       _aRD_,
       _aRE_,
       _aRF_,
       _aRG_,
       _aRH_,
       _aRI_,
       _aRJ_,
       _aRK_,
       _aRL_,
       _aRM_,
       _aRN_,
       _aRO_,
       _aRP_,
       _aRQ_,
       _aRR_,
       _aRS_,
       _aRT_,
       _aRU_,
       _aRV_,
       _aRW_,
       _aRX_,
       _aRY_,
       _aRZ_,
       _aR0_,
       _aR1_,
       _aR2_,
       _aR3_,
       _aR4_,
       _aR5_,
       _aR6_,
       _aR7_,
       _aR8_,
       _aR9_,
       _aR__,
       _aR$_,
       _aSa_,
       _aSb_,
       _aSc_,
       _aSd_,
       _aSe_,
       _aSf_,
       _aSg_,
       _aSh_,
       _aSi_,
       _aSj_,
       _aSk_,
       _aSl_,
       _aSm_,
       _aSn_,
       _aSo_,
       _aSp_,
       _aSq_,
       _aSr_,
       _aSs_,
       _aSt_,
       _aSu_,
       _aSv_,
       _aSw_,
       _aSx_,
       _aSy_,
       _aSz_,
       _aSA_,
       _aSB_,
       _aSC_,
       _aSD_,
       _aSE_,
       _aSF_,
       _aSG_,
       _aSH_,
       _aSI_,
       _aSJ_,
       _aSK_,
       _aSL_,
       _aSM_,
       _aSN_,
       _aSO_,
       _aSP_,
       _aSQ_,
       _aSR_,
       _aSS_,
       _aST_,
       _aSU_,
       _aSV_,
       _aSW_,
       _aSX_,
       _aSY_,
       _aSZ_,
       _aS0_,
       _aS1_,
       _aS2_,
       _aS3_,
       _aS4_,
       _aS5_,
       _aS6_,
       _aS7_,
       _aS8_,
       _aS9_,
       _aS__,
       _aS$_,
       _aTa_,
       _aTb_,
       _aTc_,
       _aTd_,
       _aTe_,
       _aTf_,
       _aTg_,
       _aTh_,
       _aTi_,
       _aTj_,
       _aTk_,
       _aTl_,
       _aTm_,
       _aTn_,
       _aTo_,
       _aTp_,
       _aTq_,
       _aTr_,
       _aTs_,
       _aTt_,
       _aTu_,
       _aTv_,
       _aTw_,
       _aTx_,
       _aTy_,
       _aTz_,
       _aTA_,
       _aTB_,
       _aTC_,
       _aTD_,
       _aTE_,
       _aTF_,
       _aTG_,
       _aTH_,
       _aTI_,
       _aTJ_,
       _aTK_,
       _aTL_,
       _aTM_,
       _aTN_,
       _aTO_,
       _aTP_,
       _aTQ_,
       _aTR_,
       _aTS_,
       _aTT_,
       _aTU_,
       _aTV_,
       _aTW_,
       _aTX_,
       _aTY_,
       _aTZ_,
       _aT0_,
       _aT1_,
       _aT2_,
       _aT3_,
       _aT4_,
       _aT5_,
       _aT6_,
       _aT7_,
       _aT8_,
       _aT9_,
       _aT__,
       _aT$_,
       _aUa_,
       _aUb_,
       _aUc_,
       _aUd_,
       _aUe_,
       _aUf_,
       _aUg_,
       _aUh_,
       _aUi_,
       _aUj_,
       _aUk_,
       _aUl_,
       _aUm_,
       _aUn_,
       _aUo_,
       _aUp_,
       _aUq_,
       _aUr_,
       _aUs_,
       _aUt_,
       _aUu_,
       _aUv_,
       _aUw_,
       _aUx_,
       _aUy_,
       _aUz_,
       _aUA_,
       _aUB_,
       _aUC_,
       _aUD_,
       _aUE_,
       _aUF_,
       _aUG_,
       _aUH_,
       _aUI_,
       _aUJ_,
       _aUK_,
       _aUL_,
       _aUM_,
       _aUN_,
       _aUO_,
       _aUP_,
       _aUQ_,
       _aUR_,
       _aUS_,
       _aUT_,
       _aUU_,
       _aUV_,
       _aUW_,
       _aUX_,
       _aUY_,
       _aUZ_,
       _aU0_,
       _aU1_,
       _aU2_,
       _aU3_,
       _aU4_,
       _aU5_,
       _aU6_,
       _aU7_,
       _aU8_,
       _aU9_,
       _aU__,
       _aU$_,
       _aVa_,
       _aVb_,
       _aVc_,
       _aVd_,
       _aVe_,
       _aVf_,
       _aVg_,
       _aVh_,
       _aVi_,
       _aVj_,
       _aVk_,
       _aVl_,
       _aVm_,
       _aVn_,
       _aVo_,
       _aVp_,
       _aVq_,
       _aVr_,
       _aVs_,
       _aVt_,
       _aVu_,
       _aVv_,
       _aVw_,
       _aVx_,
       _aVy_,
       _aVz_,
       _aVA_,
       _aVB_,
       _aVC_,
       _aVD_,
       _aVE_,
       _aVF_,
       _aVG_,
       _aVH_,
       _aVI_,
       _aVJ_,
       _aVK_,
       _aVL_,
       _aVM_,
       _aVN_,
       _aVO_,
       _aVP_,
       _aVQ_,
       _aVR_,
       _aVS_,
       _aVT_,
       _aVU_,
       _aVV_,
       _aVW_,
       _aVX_,
       _aVY_,
       _aVZ_,
       _aV0_,
       _aV1_,
       _aV2_,
       _aV3_,
       _aV4_,
       _aV5_,
       _aV6_,
       _aV7_,
       _aV8_,
       _aV9_,
       _aV__,
       _aV$_,
       _aWa_,
       _aWb_,
       _aWc_,
       _aWd_,
       _aWe_,
       _aWf_,
       _aWg_,
       _aWh_,
       _aWi_,
       _aWj_,
       _aWk_,
       _aWl_,
       _aWm_,
       _aWn_,
       _aWo_,
       _aWp_,
       _aWq_,
       _aWr_,
       _aWs_,
       _aWt_,
       _aWu_,
       _aWv_,
       _aWw_,
       _aWx_,
       _aWy_,
       _aWz_,
       _aWA_,
       _aWB_,
       _aWC_,
       _aWD_,
       _aWE_,
       _aWF_,
       _aWG_,
       _aWH_,
       _aWI_,
       _aWJ_,
       _aWK_,
       _aWL_,
       _aWM_,
       _aWN_,
       _aWO_,
       _aWP_,
       _aWQ_,
       _aWR_,
       _aWS_,
       _aWT_,
       _aWU_,
       _aWV_,
       _aWW_,
       _aWX_,
       _aWY_,
       _aWZ_,
       _aW0_,
       _aW1_,
       _aW2_,
       _aW3_,
       _aW4_,
       _aW5_,
       _aW6_,
       _aW7_,
       _aW8_,
       _aW9_,
       _aW__,
       _aW$_,
       _aXa_,
       _aXb_,
       _aXc_,
       _aXd_,
       _aXe_,
       _aXf_,
       _aXg_,
       _aXh_,
       _aXi_,
       _aXj_,
       _aXk_,
       _aXl_,
       _aXm_,
       _aXn_,
       _aXo_,
       _aXp_,
       _aXq_,
       _aXr_,
       _aXs_,
       _aXt_,
       _aXu_,
       _aXv_,
       _aXw_,
       _aXx_,
       _aXy_,
       _aXz_,
       _aXA_,
       _aXB_,
       _aXC_,
       _aXD_,
       _aXE_,
       _aXF_,
       _aXG_,
       _aXH_,
       _aXI_,
       _aXJ_,
       _aXK_,
       _aXL_,
       _aXM_,
       _aXN_,
       _aXO_,
       _aXP_,
       _aXQ_,
       _aXR_,
       _aXS_,
       _aXT_,
       _aXU_,
       _aXV_,
       _aXW_,
       _aXX_,
       _aXY_,
       _aXZ_,
       _aX0_,
       _aX1_,
       _aX2_,
       _aX3_,
       _aX4_,
       _aX5_,
       _aX6_,
       _aX7_,
       _aX8_,
       _aX9_,
       _aX__,
       _aX$_,
       _aYa_,
       _aYb_,
       _aYc_,
       _aYd_,
       _aYe_,
       _aYf_,
       _aYg_,
       _aYh_,
       _aYi_,
       _aYj_,
       _aYk_,
       _aYl_,
       _aYm_,
       _aYn_,
       _aYo_,
       _aYp_,
       _aYq_,
       _aYr_,
       _aYs_,
       _aYt_,
       _aYu_,
       _aYv_,
       _aYw_,
       _aYx_,
       _aYy_,
       _aYz_,
       _aYA_];
    caml_register_global(7611,Core_kernel$0,"Core_kernel");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_core_kernel$590);
    caml_call1(Expect_test_collector[4][1],cst_src_constrained_float_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core_kernel$591,cst$320);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core_kernel$592);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Core_kernel_Constrained_float=[0];
    caml_register_global
     (7612,Core_kernel_Constrained_float,"Core_kernel__Constrained_float");
    return}
  (function(){return this}()));

//# sourceMappingURL=data:application/json;base64,
