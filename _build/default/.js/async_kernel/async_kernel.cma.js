(function(joo_global_object)
   {"use strict";
    var
     runtime=joo_global_object.jsoo_runtime,
     caml_check_bound=runtime.caml_check_bound,
     caml_compare=runtime.caml_compare,
     caml_equal=runtime.caml_equal,
     caml_fresh_oo_id=runtime.caml_fresh_oo_id,
     caml_gc_major=runtime.caml_gc_major,
     caml_list_of_js_array=runtime.caml_list_of_js_array,
     caml_new_string=runtime.caml_new_string,
     caml_obj_tag=runtime.caml_obj_tag,
     caml_register_global=runtime.caml_register_global,
     caml_string_compare=runtime.caml_string_compare,
     caml_string_notequal=runtime.caml_string_notequal,
     caml_trampoline=runtime.caml_trampoline,
     caml_trampoline_return=runtime.caml_trampoline_return,
     caml_update_dummy=runtime.caml_update_dummy,
     caml_wrap_exception=runtime.caml_wrap_exception;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4
              ?f(a0,a1,a2,a3)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3])}
    function caml_call5(f,a0,a1,a2,a3,a4)
     {return f.length == 5
              ?f(a0,a1,a2,a3,a4)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4])}
    function caml_call6(f,a0,a1,a2,a3,a4,a5)
     {return f.length == 6
              ?f(a0,a1,a2,a3,a4,a5)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5])}
    function caml_call7(f,a0,a1,a2,a3,a4,a5,a6)
     {return f.length == 7
              ?f(a0,a1,a2,a3,a4,a5,a6)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6])}
    function caml_call8(f,a0,a1,a2,a3,a4,a5,a6,a7)
     {return f.length == 8
              ?f(a0,a1,a2,a3,a4,a5,a6,a7)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6,a7])}
    function caml_call9(f,a0,a1,a2,a3,a4,a5,a6,a7,a8)
     {return f.length == 9
              ?f(a0,a1,a2,a3,a4,a5,a6,a7,a8)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6,a7,a8])}
    function caml_call25
     (f,
      a0,
      a1,
      a2,
      a3,
      a4,
      a5,
      a6,
      a7,
      a8,
      a9,
      a10,
      a11,
      a12,
      a13,
      a14,
      a15,
      a16,
      a17,
      a18,
      a19,
      a20,
      a21,
      a22,
      a23,
      a24)
     {return f.length == 25
              ?f
                (a0,
                 a1,
                 a2,
                 a3,
                 a4,
                 a5,
                 a6,
                 a7,
                 a8,
                 a9,
                 a10,
                 a11,
                 a12,
                 a13,
                 a14,
                 a15,
                 a16,
                 a17,
                 a18,
                 a19,
                 a20,
                 a21,
                 a22,
                 a23,
                 a24)
              :runtime.caml_call_gen
                (f,
                 [a0,
                  a1,
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7,
                  a8,
                  a9,
                  a10,
                  a11,
                  a12,
                  a13,
                  a14,
                  a15,
                  a16,
                  a17,
                  a18,
                  a19,
                  a20,
                  a21,
                  a22,
                  a23,
                  a24])}
    var
     global_data=runtime.caml_get_global_data(),
     cst_async_kernel=caml_new_string("async_kernel"),
     cst_src_time_ns_ml=caml_new_string("src/time_ns.ml"),
     cst=caml_new_string(""),
     cst_async_kernel$0=caml_new_string("async_kernel"),
     cst_async_kernel$1=caml_new_string("async_kernel"),
     cst_async_kernel$2=caml_new_string("async_kernel"),
     cst_src_timing_wheel_ns_ml=caml_new_string("src/timing_wheel_ns.ml"),
     cst$0=caml_new_string(""),
     cst_async_kernel$3=caml_new_string("async_kernel"),
     cst_async_kernel$4=caml_new_string("async_kernel"),
     cst_Here_is_an_explanation_of_each_field=
      caml_new_string("\n\nHere is an explanation of each field.\n"),
     cst_environment_variable_affects_Async_in_various_ways_Its_value_should_be_a_sexp_of_the_following_form_where_all_fields_are_optional=
      caml_new_string
       (" environment variable affects Async\nin various ways.  Its value should be a sexp of the following form,\nwhere all fields are optional:\n\n"),
     cst_The=caml_new_string("The "),
     cst$3=caml_new_string(")"),
     cst_default$1=caml_new_string(" (default "),
     cst$4=caml_new_string("\n"),
     cst_min=caml_new_string("min "),
     cst$2=caml_new_string("    "),
     cst_A_list_of_tags_specifying_which_Async_functions_should_print_debug_messages_to_stderr_Each_tag_identifies_a_group_of_related_Async_functions_The_tag_all_means_to_print_debug_messages_for_all_functions_Allowed_values_are=
      caml_new_string
       ("\n  A list of tags specifying which Async functions should print debug\n  messages to stderr.  Each tag identifies a group of related Async\n  functions.  The tag [all] means to print debug messages for all\n  functions.  Allowed values are:\n\n"),
     cst_This_determines_what_OS_subsystem_Async_uses_to_watch_file_descriptors_for_being_ready_The_default_is_to_use_epoll_if_timerfd_s_are_supported_and_if_not_use_select_Allowed_values_are=
      caml_new_string
       ("\n  This determines what OS subsystem Async uses to watch file descriptors for being ready.\n  The default is to use [epoll] if timerfd's are supported and if not, use [select].\n\n  Allowed values are:"),
     level_bits$0=[0,14,[0,15,[0,9,[0,6,0]]]],
     level_bits=[0,10,[0,10,[0,9,0]]],
     cst_max_num_jobs_per_priority_per_cycle$0=
      caml_new_string("max_num_jobs_per_priority_per_cycle"),
     cst_abort_after_thread_pool_stuck_for$0=
      caml_new_string("abort_after_thread_pool_stuck_for"),
     cst_check_invariants$0=caml_new_string("check_invariants"),
     cst_detect_invalid_access_from_thread$0=
      caml_new_string("detect_invalid_access_from_thread"),
     cst_dump_core_on_job_delay$0=caml_new_string("dump_core_on_job_delay"),
     cst_epoll_max_ready_events$0=caml_new_string("epoll_max_ready_events"),
     cst_file_descr_watcher$2=caml_new_string("file_descr_watcher"),
     cst_max_inter_cycle_timeout$0=caml_new_string("max_inter_cycle_timeout"),
     cst_max_num_open_file_descrs$0=
      caml_new_string("max_num_open_file_descrs"),
     cst_max_num_threads$0=caml_new_string("max_num_threads"),
     cst_min_inter_cycle_timeout$0=caml_new_string("min_inter_cycle_timeout"),
     cst_print_debug_messages_for$0=
      caml_new_string("print_debug_messages_for"),
     cst_record_backtraces$0=caml_new_string("record_backtraces"),
     cst_report_thread_pool_stuck_for$0=
      caml_new_string("report_thread_pool_stuck_for"),
     cst_timing_wheel_config$0=caml_new_string("timing_wheel_config"),
     cst_Epoll=caml_new_string("Epoll"),
     cst_Epoll_if_timerfd=caml_new_string("Epoll_if_timerfd"),
     cst_Select=caml_new_string("Select"),
     cst_epoll=caml_new_string("epoll"),
     cst_epoll_if_timerfd=caml_new_string("epoll_if_timerfd"),
     cst_select=caml_new_string("select"),
     cst_Epoll$0=caml_new_string("Epoll"),
     cst_Epoll_if_timerfd$0=caml_new_string("Epoll_if_timerfd"),
     cst_Select$0=caml_new_string("Select"),
     cst_epoll$0=caml_new_string("epoll"),
     cst_epoll_if_timerfd$0=caml_new_string("epoll_if_timerfd"),
     cst_select$0=caml_new_string("select"),
     cst_all=caml_new_string("all"),
     cst_Monitor_send_exn=caml_new_string("Monitor_send_exn"),
     cst_All=caml_new_string("All"),
     cst_Clock=caml_new_string("Clock"),
     cst_Fd=caml_new_string("Fd"),
     cst_File_descr_watcher=caml_new_string("File_descr_watcher"),
     cst_Finalizers=caml_new_string("Finalizers"),
     cst_Interruptor=caml_new_string("Interruptor"),
     cst_Monitor=caml_new_string("Monitor"),
     cst_Parallel=caml_new_string("Parallel"),
     cst_Reader=caml_new_string("Reader"),
     cst_Scheduler=caml_new_string("Scheduler"),
     cst_Shutdown=caml_new_string("Shutdown"),
     cst_Thread_pool=caml_new_string("Thread_pool"),
     cst_Thread_safe=caml_new_string("Thread_safe"),
     cst_Writer=caml_new_string("Writer"),
     cst_parallel=caml_new_string("parallel"),
     cst_clock=caml_new_string("clock"),
     cst_fd=caml_new_string("fd"),
     cst_file_descr_watcher=caml_new_string("file_descr_watcher"),
     cst_finalizers=caml_new_string("finalizers"),
     cst_interruptor=caml_new_string("interruptor"),
     cst_monitor=caml_new_string("monitor"),
     cst_monitor_send_exn=caml_new_string("monitor_send_exn"),
     cst_reader=caml_new_string("reader"),
     cst_scheduler=caml_new_string("scheduler"),
     cst_shutdown=caml_new_string("shutdown"),
     cst_thread_pool=caml_new_string("thread_pool"),
     cst_thread_safe=caml_new_string("thread_safe"),
     cst_writer=caml_new_string("writer"),
     cst_all$0=caml_new_string("all"),
     cst_Monitor_send_exn$0=caml_new_string("Monitor_send_exn"),
     cst_All$0=caml_new_string("All"),
     cst_Clock$0=caml_new_string("Clock"),
     cst_Fd$0=caml_new_string("Fd"),
     cst_File_descr_watcher$0=caml_new_string("File_descr_watcher"),
     cst_Finalizers$0=caml_new_string("Finalizers"),
     cst_Interruptor$0=caml_new_string("Interruptor"),
     cst_Monitor$0=caml_new_string("Monitor"),
     cst_Parallel$0=caml_new_string("Parallel"),
     cst_Reader$0=caml_new_string("Reader"),
     cst_Scheduler$0=caml_new_string("Scheduler"),
     cst_Shutdown$0=caml_new_string("Shutdown"),
     cst_Thread_pool$0=caml_new_string("Thread_pool"),
     cst_Thread_safe$0=caml_new_string("Thread_safe"),
     cst_Writer$0=caml_new_string("Writer"),
     cst_parallel$0=caml_new_string("parallel"),
     cst_clock$0=caml_new_string("clock"),
     cst_fd$0=caml_new_string("fd"),
     cst_file_descr_watcher$0=caml_new_string("file_descr_watcher"),
     cst_finalizers$0=caml_new_string("finalizers"),
     cst_interruptor$0=caml_new_string("interruptor"),
     cst_monitor$0=caml_new_string("monitor"),
     cst_monitor_send_exn$0=caml_new_string("monitor_send_exn"),
     cst_reader$0=caml_new_string("reader"),
     cst_scheduler$0=caml_new_string("scheduler"),
     cst_shutdown$0=caml_new_string("shutdown"),
     cst_thread_pool$0=caml_new_string("thread_pool"),
     cst_thread_safe$0=caml_new_string("thread_safe"),
     cst_writer$0=caml_new_string("writer"),
     cst_Do_not_watch=caml_new_string("Do_not_watch"),
     cst_Watch=caml_new_string("Watch"),
     cst_do_not_watch=caml_new_string("do_not_watch"),
     cst_watch=caml_new_string("watch"),
     cst_Do_not_watch$0=caml_new_string("Do_not_watch"),
     cst_Watch$0=caml_new_string("Watch"),
     cst_do_not_watch$0=caml_new_string("do_not_watch"),
     cst_watch$0=caml_new_string("watch"),
     cst_dump_if_delayed_by=caml_new_string("dump_if_delayed_by"),
     cst_how_to_dump=caml_new_string("how_to_dump"),
     cst_how_to_dump$0=caml_new_string("how_to_dump"),
     cst_dump_if_delayed_by$0=caml_new_string("dump_if_delayed_by"),
     cst_Call_abort=caml_new_string("Call_abort"),
     cst_Call_gcore=caml_new_string("Call_gcore"),
     cst_Default=caml_new_string("Default"),
     cst_call_abort=caml_new_string("call_abort"),
     cst_call_gcore=caml_new_string("call_gcore"),
     cst_default=caml_new_string("default"),
     cst_Call_abort$0=caml_new_string("Call_abort"),
     cst_Call_gcore$0=caml_new_string("Call_gcore"),
     cst_Default$0=caml_new_string("Default"),
     cst_call_abort$0=caml_new_string("call_abort"),
     cst_call_gcore$0=caml_new_string("call_gcore"),
     cst_default$0=caml_new_string("default"),
     cst_async_kernel$5=caml_new_string("async_kernel"),
     cst_src_async_kernel_config_ml=
      caml_new_string("src/async_kernel_config.ml"),
     cst$1=caml_new_string(""),
     cst_async_kernel$6=caml_new_string("async_kernel"),
     here=[0,caml_new_string("src/async_kernel_config.ml"),13,259,274],
     here$0=[0,caml_new_string("src/async_kernel_config.ml"),20,414,429],
     here$1=[0,caml_new_string("src/async_kernel_config.ml"),27,578,593],
     here$2=[0,caml_new_string("src/async_kernel_config.ml"),35,759,776],
     here$3=[0,caml_new_string("src/async_kernel_config.ml"),47,981,996],
     here$4=[0,caml_new_string("src/async_kernel_config.ml"),54,1139,1154],
     tp_loc=
      caml_new_string
       ("src/async_kernel_config.ml.Dump_core_on_job_delay.How_to_dump.t"),
     tp_loc$0=
      caml_new_string
       ("src/async_kernel_config.ml.Dump_core_on_job_delay.watch"),
     tp_loc$1=
      caml_new_string("src/async_kernel_config.ml.Dump_core_on_job_delay.t"),
     tp_loc$2=caml_new_string("src/async_kernel_config.ml.Debug_tag.T.t"),
     list=caml_list_of_js_array([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14]),
     tp_loc$3=
      caml_new_string("src/async_kernel_config.ml.File_descr_watcher.T.t"),
     list$0=[0,0,[0,1,[0,2,0]]],
     cst_timing_wheel_config=caml_new_string("timing_wheel_config"),
     cst_report_thread_pool_stuck_for=
      caml_new_string("report_thread_pool_stuck_for"),
     cst_record_backtraces=caml_new_string("record_backtraces"),
     cst_print_debug_messages_for=caml_new_string("print_debug_messages_for"),
     cst_min_inter_cycle_timeout=caml_new_string("min_inter_cycle_timeout"),
     cst_max_num_jobs_per_priority_per_cycle=
      caml_new_string("max_num_jobs_per_priority_per_cycle"),
     cst_max_num_threads=caml_new_string("max_num_threads"),
     cst_max_num_open_file_descrs=caml_new_string("max_num_open_file_descrs"),
     cst_max_inter_cycle_timeout=caml_new_string("max_inter_cycle_timeout"),
     cst_file_descr_watcher$1=caml_new_string("file_descr_watcher"),
     cst_epoll_max_ready_events=caml_new_string("epoll_max_ready_events"),
     cst_dump_core_on_job_delay=caml_new_string("dump_core_on_job_delay"),
     cst_detect_invalid_access_from_thread=
      caml_new_string("detect_invalid_access_from_thread"),
     cst_check_invariants=caml_new_string("check_invariants"),
     cst_abort_after_thread_pool_stuck_for=
      caml_new_string("abort_after_thread_pool_stuck_for"),
     tp_loc$4=caml_new_string("src/async_kernel_config.ml.t"),
     empty=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
     environment_variable=caml_new_string("ASYNC_CONFIG"),
     cst$5=caml_new_string(""),
     cst_async_kernel$7=caml_new_string("async_kernel"),
     cst_async_kernel$8=caml_new_string("async_kernel"),
     cst_src_debug_ml=caml_new_string("src/debug.ml"),
     cst$6=caml_new_string(""),
     cst_async_kernel$9=caml_new_string("async_kernel"),
     cst_async_kernel$10=caml_new_string("async_kernel"),
     cst_async_kernel$11=caml_new_string("async_kernel"),
     cst_src_import_ml=caml_new_string("src/import.ml"),
     cst$7=caml_new_string(""),
     cst_async_kernel$12=caml_new_string("async_kernel"),
     cst_async_kernel$13=caml_new_string("async_kernel"),
     cst_async_kernel$14=caml_new_string("async_kernel"),
     cst_src_priority_ml=caml_new_string("src/priority.ml"),
     cst$8=caml_new_string(""),
     cst_async_kernel$15=caml_new_string("async_kernel"),
     cst_async_kernel$16=caml_new_string("async_kernel"),
     cst_async_kernel$17=caml_new_string("async_kernel"),
     cst_src_types_ml=caml_new_string("src/types.ml"),
     cst$9=caml_new_string(""),
     cst_async_kernel$18=caml_new_string("async_kernel"),
     cst_async_kernel$19=caml_new_string("async_kernel"),
     cst_id$0=caml_new_string("id"),
     cst_created_monitor=caml_new_string("created monitor"),
     cst_async_kernel$20=caml_new_string("async_kernel"),
     cst_src_monitor0_ml=caml_new_string("src/monitor0.ml"),
     cst$10=caml_new_string(""),
     cst_async_kernel$21=caml_new_string("async_kernel"),
     names=
      [0,
       caml_new_string("name"),
       [0,
        caml_new_string("here"),
        [0,
         caml_new_string("id"),
         [0,
          caml_new_string("parent"),
          [0,
           caml_new_string("next_error"),
           [0,
            caml_new_string("handlers_for_all_errors"),
            [0,
             caml_new_string("tails_for_all_errors"),
             [0,
              caml_new_string("has_seen_error"),
              [0,caml_new_string("is_detached"),0]]]]]]]]],
     cst_is_detached=caml_new_string("is_detached"),
     cst_has_seen_error=caml_new_string("has_seen_error"),
     cst_tails_for_all_errors=caml_new_string("tails_for_all_errors"),
     cst_handlers_for_all_errors=caml_new_string("handlers_for_all_errors"),
     cst_next_error=caml_new_string("next_error"),
     cst_parent=caml_new_string("parent"),
     cst_id=caml_new_string("id"),
     cst_here=caml_new_string("here"),
     cst_name=caml_new_string("name"),
     cst_async_kernel$22=caml_new_string("async_kernel"),
     cst_async_kernel$23=caml_new_string("async_kernel"),
     cst_src_execution_context_ml=caml_new_string("src/execution_context.ml"),
     cst$11=caml_new_string(""),
     cst_async_kernel$24=caml_new_string("async_kernel"),
     names$0=
      [0,
       caml_new_string("monitor"),
       [0,
        caml_new_string("priority"),
        [0,
         caml_new_string("local_storage"),
         [0,caml_new_string("backtrace_history"),0]]]],
     cst_backtrace_history=caml_new_string("backtrace_history"),
     cst_local_storage=caml_new_string("local_storage"),
     cst_priority=caml_new_string("priority"),
     cst_monitor$1=caml_new_string("monitor"),
     cst_async_kernel$25=caml_new_string("async_kernel"),
     cst_async_kernel$26=caml_new_string("async_kernel"),
     cst_src_external_job_ml=caml_new_string("src/external_job.ml"),
     cst$12=caml_new_string(""),
     cst_async_kernel$27=caml_new_string("async_kernel"),
     cst_async_kernel$28=caml_new_string("async_kernel"),
     cst_async_kernel$29=caml_new_string("async_kernel"),
     cst_src_job_pool_ml=caml_new_string("src/job_pool.ml"),
     cst$13=caml_new_string(""),
     cst_async_kernel$30=caml_new_string("async_kernel"),
     cst_async_kernel$31=caml_new_string("async_kernel"),
     cst_async_kernel$32=caml_new_string("async_kernel"),
     cst_src_job_ml=caml_new_string("src/job.ml"),
     cst$14=caml_new_string(""),
     cst_async_kernel$33=caml_new_string("async_kernel"),
     cst_async_kernel$34=caml_new_string("async_kernel"),
     cst_async_kernel$35=caml_new_string("async_kernel"),
     cst_src_job_or_event_ml=caml_new_string("src/job_or_event.ml"),
     cst$15=caml_new_string(""),
     cst_async_kernel$36=caml_new_string("async_kernel"),
     cst_async_kernel$37=caml_new_string("async_kernel"),
     cst_async_kernel$38=caml_new_string("async_kernel"),
     cst_src_job_or_event_intf_ml=caml_new_string("src/job_or_event_intf.ml"),
     cst$16=caml_new_string(""),
     cst_async_kernel$39=caml_new_string("async_kernel"),
     cst_async_kernel$40=caml_new_string("async_kernel"),
     cst_async_kernel$41=caml_new_string("async_kernel"),
     cst_src_scheduler0_ml=caml_new_string("src/scheduler0.ml"),
     cst$17=caml_new_string(""),
     cst_async_kernel$42=caml_new_string("async_kernel"),
     cst_async_kernel$43=caml_new_string("async_kernel"),
     cst_Jobs_set_jobs_left_this_cycle_got_negative_number=
      caml_new_string("Jobs.set_jobs_left_this_cycle got negative number"),
     cst_async_kernel$44=caml_new_string("async_kernel"),
     cst_src_job_queue_ml=caml_new_string("src/job_queue.ml"),
     cst$18=caml_new_string(""),
     cst_async_kernel$45=caml_new_string("async_kernel"),
     cst_length=caml_new_string("length"),
     cst_front=caml_new_string("front"),
     cst_mask=caml_new_string("mask"),
     cst_jobs=caml_new_string("jobs"),
     cst_jobs_left_this_cycle=caml_new_string("jobs_left_this_cycle"),
     cst_num_jobs_run=caml_new_string("num_jobs_run"),
     cst_async_kernel$46=caml_new_string("async_kernel"),
     cst_cannot_call_advance_by_alarms_from_callback=
      caml_new_string("cannot call [advance_by_alarms] from callback"),
     cst_Synchronous_time_source_abort_exn_cannot_abort_event=
      caml_new_string
       ("[Synchronous_time_source.abort_exn] cannot abort event"),
     cst_at_intervals_got_span_smaller_than_alarm_precision=
      caml_new_string("at_intervals got span smaller than alarm precision"),
     pos$1=caml_new_string("src/synchronous_time_source0.ml:216:29"),
     pos$0=caml_new_string("src/synchronous_time_source0.ml:215:29"),
     cst_wall_clock=caml_new_string("wall_clock"),
     cst_Job_t=caml_new_string("<Job.t>"),
     cst_bug_set_status_transition_not_allowed=
      caml_new_string("bug -- set_status transition not allowed"),
     cst_src_synchronous_time_source0_ml_134_26=
      caml_new_string("src/synchronous_time_source0.ml:134:26"),
     pos=caml_new_string("src/synchronous_time_source0.ml:115:27"),
     cst_Y_m_dT_H_M_S_z=caml_new_string("%Y-%m-%dT%H:%M:%S%z"),
     cst_async_kernel$47=caml_new_string("async_kernel"),
     cst_src_synchronous_time_source0_ml=
      caml_new_string("src/synchronous_time_source0.ml"),
     cst$19=caml_new_string(""),
     cst_async_kernel$48=caml_new_string("async_kernel"),
     names$1=
      [0,
       caml_new_string("alarm"),
       [0,
        caml_new_string("at"),
        [0,
         caml_new_string("callback"),
         [0,
          caml_new_string("execution_context"),
          [0,
           caml_new_string("interval"),
           [0,caml_new_string("next_fired"),[0,caml_new_string("status"),0]]]]]]],
     cst_status=caml_new_string("status"),
     cst_next_fired=caml_new_string("next_fired"),
     cst_interval=caml_new_string("interval"),
     cst_execution_context=caml_new_string("execution_context"),
     cst_callback=caml_new_string("callback"),
     cst_at=caml_new_string("at"),
     cst_alarm=caml_new_string("alarm"),
     names$2=
      [0,
       caml_new_string("advance_errors"),
       [0,
        caml_new_string("am_advancing"),
        [0,
         caml_new_string("events"),
         [0,
          caml_new_string("fired_events"),
          [0,
           caml_new_string("handle_fired"),
           [0,
            caml_new_string("is_wall_clock"),
            [0,caml_new_string("scheduler"),0]]]]]]],
     cst_scheduler$1=caml_new_string("scheduler"),
     cst_is_wall_clock=caml_new_string("is_wall_clock"),
     cst_handle_fired=caml_new_string("handle_fired"),
     cst_fired_events=caml_new_string("fired_events"),
     cst_events=caml_new_string("events"),
     cst_am_advancing=caml_new_string("am_advancing"),
     cst_advance_errors=caml_new_string("advance_errors"),
     cst_async_kernel$49=caml_new_string("async_kernel"),
     cst_got_uncaught_exn=caml_new_string("got_uncaught_exn"),
     cst_Scheduler_invariant_failed=
      caml_new_string("Scheduler.invariant failed"),
     cst_unhandled_exception=caml_new_string("unhandled exception"),
     cst_async_kernel$50=caml_new_string("async_kernel"),
     cst_src_scheduler1_ml=caml_new_string("src/scheduler1.ml"),
     cst$20=caml_new_string(""),
     cst_async_kernel$51=caml_new_string("async_kernel"),
     names$3=
      [0,caml_new_string("execution_context"),[0,caml_new_string("exec"),0]],
     cst_exec=caml_new_string("exec"),
     cst_execution_context$0=caml_new_string("execution_context"),
     names$4=
      caml_list_of_js_array
       ([caml_new_string("check_access"),
         caml_new_string("job_pool"),
         caml_new_string("normal_priority_jobs"),
         caml_new_string("low_priority_jobs"),
         caml_new_string("very_low_priority_workers"),
         caml_new_string("main_execution_context"),
         caml_new_string("current_execution_context"),
         caml_new_string("uncaught_exn"),
         caml_new_string("cycle_count"),
         caml_new_string("cycle_start"),
         caml_new_string("run_every_cycle_start"),
         caml_new_string("last_cycle_time"),
         caml_new_string("last_cycle_num_jobs"),
         caml_new_string("time_source"),
         caml_new_string("external_jobs"),
         caml_new_string("thread_safe_external_job_hook"),
         caml_new_string("job_queued_hook"),
         caml_new_string("event_added_hook"),
         caml_new_string("yield"),
         caml_new_string("yield_until_no_jobs_remain"),
         caml_new_string("check_invariants"),
         caml_new_string("max_num_jobs_per_priority_per_cycle"),
         caml_new_string("record_backtraces"),
         caml_new_string("on_start_of_cycle"),
         caml_new_string("on_end_of_cycle")]),
     cst_on_end_of_cycle=caml_new_string("on_end_of_cycle"),
     cst_on_start_of_cycle=caml_new_string("on_start_of_cycle"),
     cst_record_backtraces$1=caml_new_string("record_backtraces"),
     cst_max_num_jobs_per_priority_per_cycle$1=
      caml_new_string("max_num_jobs_per_priority_per_cycle"),
     cst_check_invariants$1=caml_new_string("check_invariants"),
     cst_yield_until_no_jobs_remain=
      caml_new_string("yield_until_no_jobs_remain"),
     cst_yield=caml_new_string("yield"),
     cst_event_added_hook=caml_new_string("event_added_hook"),
     cst_job_queued_hook=caml_new_string("job_queued_hook"),
     cst_thread_safe_external_job_hook=
      caml_new_string("thread_safe_external_job_hook"),
     cst_external_jobs=caml_new_string("external_jobs"),
     cst_time_source=caml_new_string("time_source"),
     cst_last_cycle_num_jobs=caml_new_string("last_cycle_num_jobs"),
     cst_last_cycle_time=caml_new_string("last_cycle_time"),
     cst_run_every_cycle_start=caml_new_string("run_every_cycle_start"),
     cst_cycle_start=caml_new_string("cycle_start"),
     cst_cycle_count=caml_new_string("cycle_count"),
     cst_uncaught_exn=caml_new_string("uncaught_exn"),
     cst_current_execution_context=
      caml_new_string("current_execution_context"),
     cst_main_execution_context=caml_new_string("main_execution_context"),
     cst_very_low_priority_workers=
      caml_new_string("very_low_priority_workers"),
     cst_low_priority_jobs=caml_new_string("low_priority_jobs"),
     cst_normal_priority_jobs=caml_new_string("normal_priority_jobs"),
     cst_job_pool=caml_new_string("job_pool"),
     cst_check_access=caml_new_string("check_access"),
     cst_Async_cannot_create_its_raw_scheduler=
      caml_new_string("Async cannot create its raw scheduler"),
     cst_async_kernel$52=caml_new_string("async_kernel"),
     cst_src_ivar0_ml$1=caml_new_string("src/ivar0.ml"),
     cst_assert_is_empty_t_assert_not_is_full_t=
      caml_new_string
       (": <<assert (is_empty t); assert (not (is_full t))[...]>>"),
     cst_src_ivar0_ml$2=caml_new_string("src/ivar0.ml"),
     cst_assert_not_is_empty_t_assert_is_full_t=
      caml_new_string
       (": <<assert (not (is_empty t)); assert (is_full t)[...]>>"),
     cst_src_ivar0_ml$3=caml_new_string("src/ivar0.ml"),
     cst_assert_equal_t1_t1_assert_equal_t2_t2_a=
      caml_new_string
       (": <<assert (equal t1 t1); assert (equal t2 t2); a[...]>>"),
     cst_src_ivar0_ml$4=caml_new_string("src/ivar0.ml"),
     cst_squash_t_assert_t_cell_Empty=
      caml_new_string(": <<squash t; assert (t.cell = Empty)>>"),
     cst_src_ivar0_ml$5=caml_new_string("src/ivar0.ml"),
     cst_squash_t2_assert_t2_t1=
      caml_new_string(": <<squash t2; assert (t2 --> t1)>>"),
     cst_src_ivar0_ml$6=caml_new_string("src/ivar0.ml"),
     cst_squash_t4_assert_t2_t1_assert_t3=
      caml_new_string
       (": <<squash t4; assert (t2 --> t1); assert (t3 -->[...]>>"),
     cst_src_ivar0_ml$7=caml_new_string("src/ivar0.ml"),
     cst_fill_t_13_assert_peek_t_Some_13=
      caml_new_string(": <<fill t 13; assert ((peek t) = (Some 13))>>"),
     cst_src_ivar0_ml$8=caml_new_string("src/ivar0.ml"),
     cst_fill_t_13_assert_try_fill_t_14_false_with=
      caml_new_string
       (": <<fill t 13; assert ((try fill t 14; false with[...]>>"),
     cst_src_ivar0_ml$9=caml_new_string("src/ivar0.ml"),
     cst_fill_t2_13_assert_peek_t1_Some_13_a=
      caml_new_string
       (": <<fill t2 13; assert ((peek t1) = (Some 13)); a[...]>>"),
     cst_src_ivar0_ml$10=caml_new_string("src/ivar0.ml"),
     cst_r_13_let_t_create_with_cell_empty_one=
      caml_new_string
       (": <<r := 13; (let t = create_with_cell empty_one_[...]>>"),
     cst_src_ivar0_ml$11=caml_new_string("src/ivar0.ml"),
     cst_r_13_let_t_create_with_cell_cell_of_h=
      caml_new_string
       (": <<r := 13; (let t = create_with_cell (cell_of_h[...]>>"),
     cst_src_ivar0_ml$12=caml_new_string("src/ivar0.ml"),
     cst_r_1_upon_t_fun_i_r_r_i_st=
      caml_new_string
       (": <<r := 1; upon t (fun i -> r := ((!r) + i)); st[...]>>"),
     cst_src_ivar0_ml$13=caml_new_string("src/ivar0.ml"),
     cst_r_1_upon_t_fun_i_r_r_i_up=
      caml_new_string
       (": <<r := 1; upon t (fun i -> r := ((!r) + i)); up[...]>>"),
     cst_src_ivar0_ml$14=caml_new_string("src/ivar0.ml"),
     cst_r_1_let_num_handlers_1000_in_for=
      caml_new_string
       (": <<r := 1; (let num_handlers = 1000 in  for _ = [...]>>"),
     cst_src_ivar0_ml$15=caml_new_string("src/ivar0.ml"),
     cst_r_1_upon_t2_fun_i_r_r_i_f=
      caml_new_string
       (": <<r := 1; upon t2 (fun i -> r := ((!r) + i)); f[...]>>"),
     cst_src_ivar0_ml$16=caml_new_string("src/ivar0.ml"),
     cst_r_1_let_u_upon_t_fun_i_r_r=
      caml_new_string
       (": <<r := 1; (let u = upon' t (fun i -> r := ((!r)[...]>>"),
     cst_src_ivar0_ml$17=caml_new_string("src/ivar0.ml"),
     cst_r_1_let_u_upon_t_fun_i_r_r$0=
      caml_new_string
       (": <<r := 1; (let u = upon' t (fun i -> r := ((!r)[...]>>"),
     cst_src_ivar0_ml$18=caml_new_string("src/ivar0.ml"),
     cst_r_1_let_u1_upon_t_fun_i_r_r=
      caml_new_string
       (": <<r := 1; (let u1 = upon' t (fun i -> r := ((!r[...]>>"),
     cst_src_ivar0_ml$19=caml_new_string("src/ivar0.ml"),
     cst_r_1_let_u1_upon_t1_fun_r=
      caml_new_string
       (": <<r := 1; (let u1 = upon' t1 (fun () -> r := (([...]>>"),
     cst_src_ivar0_ml$20=caml_new_string("src/ivar0.ml"),
     cst_connect_i1_i2_stabilize_assert_i1_cell=
      caml_new_string
       (": <<connect i1 i2; stabilize (); assert (i1.cell [...]>>"),
     cst_src_ivar0_ml$21=caml_new_string("src/ivar0.ml"),
     cst_connect_a1_b2_stabilize_assert_a1_cell=
      caml_new_string
       (": <<connect a1 b2; stabilize (); assert (a1.cell [...]>>"),
     cst_src_ivar0_ml$22=caml_new_string("src/ivar0.ml"),
     cst_connect_a2_b2_stabilize_assert_a1_cell=
      caml_new_string
       (": <<connect a2 b2; stabilize (); assert (a1.cell [...]>>"),
     cst_src_ivar0_ml$23=caml_new_string("src/ivar0.ml"),
     cst_connect_b_c_stabilize_assert_a_cell_E=
      caml_new_string
       (": <<connect b c; stabilize (); assert (a.cell = E[...]>>"),
     cst_src_ivar0_ml$24=caml_new_string("src/ivar0.ml"),
     cst_connect_a1_a1_stabilize_assert_a1_cell=
      caml_new_string
       (": <<connect a1 a1; stabilize (); assert (a1.cell [...]>>"),
     cst_src_ivar0_ml$25=caml_new_string("src/ivar0.ml"),
     cst_connect_a1_a2_stabilize_assert_a1_cell=
      caml_new_string
       (": <<connect a1 a2; stabilize (); assert (a1.cell [...]>>"),
     cst_src_ivar0_ml$26=caml_new_string("src/ivar0.ml"),
     cst_connect_a2_a1_stabilize_assert_a1_cell=
      caml_new_string
       (": <<connect a2 a1; stabilize (); assert (a1.cell [...]>>"),
     cst_src_ivar0_ml$27=caml_new_string("src/ivar0.ml"),
     cst_connect_a1_b1_stabilize_assert_phys_equ=
      caml_new_string
       (": <<connect a1 b1; stabilize (); assert (phys_equ[...]>>"),
     cst_src_ivar0_ml$28=caml_new_string("src/ivar0.ml"),
     cst_connect_a1_b1_stabilize_assert_phys_equ$0=
      caml_new_string
       (": <<connect a1 b1; stabilize (); assert (phys_equ[...]>>"),
     cst_src_ivar0_ml$29=caml_new_string("src/ivar0.ml"),
     cst_connect_a1_b1_stabilize_match_a1_cell_w=
      caml_new_string
       (": <<connect a1 b1; stabilize (); (match a1.cell w[...]>>"),
     cst_src_ivar0_ml$30=caml_new_string("src/ivar0.ml"),
     cst_connect_a1_b1_stabilize_assert_phys_equ$1=
      caml_new_string
       (": <<connect a1 b1; stabilize (); assert (phys_equ[...]>>"),
     cst_src_ivar0_ml$31=caml_new_string("src/ivar0.ml"),
     cst_connect_a1_b1_stabilize_assert_phys_equ$2=
      caml_new_string
       (": <<connect a1 b1; stabilize (); assert (phys_equ[...]>>"),
     cst_src_ivar0_ml$32=caml_new_string("src/ivar0.ml"),
     cst_connect_i1_i2_stabilize_assert_i1_cell$0=
      caml_new_string
       (": <<connect i1 i2; stabilize (); assert (i1.cell [...]>>"),
     cst_src_ivar0_ml$33=caml_new_string("src/ivar0.ml"),
     cst_connect_a1_b2_stabilize_assert_a1_cell$0=
      caml_new_string
       (": <<connect a1 b2; stabilize (); assert (a1.cell [...]>>"),
     cst_src_ivar0_ml$34=caml_new_string("src/ivar0.ml"),
     cst_connect_a1_b1_stabilize_assert_a1_cell=
      caml_new_string
       (": <<connect a1 b1; stabilize (); assert (a1.cell [...]>>"),
     cst_Ivar_fill_of_full_ivar=caml_new_string("Ivar.fill of full ivar"),
     cst_Ivar_value_exn_called_on_empty_ivar=
      caml_new_string("Ivar.value_exn called on empty ivar"),
     cst_async_kernel$53=caml_new_string("async_kernel"),
     cst_src_ivar0_ml=caml_new_string("src/ivar0.ml"),
     cst$21=caml_new_string(""),
     cst_async_kernel$54=caml_new_string("async_kernel"),
     cst_src_ivar0_ml$0=caml_new_string("src/ivar0.ml"),
     cst_assert_Obj_tag_o1_Obj_tag_o2_assert=
      caml_new_string
       (": <<assert ((Obj.tag o1) = (Obj.tag o2)); assert [...]>>"),
     cst_src_ivar0_ml$35=caml_new_string("src/ivar0.ml"),
     cst$22=caml_new_string(""),
     cst_async_kernel$55=caml_new_string("async_kernel"),
     cst_Deferred_value_exn_called_on_undetermined_deferred=
      caml_new_string("Deferred.value_exn called on undetermined deferred"),
     cst_async_kernel$56=caml_new_string("async_kernel"),
     cst_src_deferred0_ml=caml_new_string("src/deferred0.ml"),
     cst$23=caml_new_string(""),
     cst_async_kernel$57=caml_new_string("async_kernel"),
     cst_async_kernel$58=caml_new_string("async_kernel"),
     cst_async_kernel$59=caml_new_string("async_kernel"),
     cst_src_ivar_ml=caml_new_string("src/ivar.ml"),
     cst$24=caml_new_string(""),
     cst_async_kernel$60=caml_new_string("async_kernel"),
     cst_async_kernel$61=caml_new_string("async_kernel"),
     cst_async_kernel$62=caml_new_string("async_kernel"),
     cst_src_monad_sequence_ml=caml_new_string("src/monad_sequence.ml"),
     cst$25=caml_new_string(""),
     cst_async_kernel$63=caml_new_string("async_kernel"),
     cst_async_kernel$64=caml_new_string("async_kernel"),
     cst_async_kernel$65=caml_new_string("async_kernel"),
     cst_src_deferred1_ml=caml_new_string("src/deferred1.ml"),
     cst$26=caml_new_string(""),
     cst_async_kernel$66=caml_new_string("async_kernel"),
     cst_async_kernel$67=caml_new_string("async_kernel"),
     cst_async_kernel$68=caml_new_string("async_kernel"),
     cst_src_deferred_std_ml=caml_new_string("src/deferred_std.ml"),
     cst$27=caml_new_string(""),
     cst_async_kernel$69=caml_new_string("async_kernel"),
     cst_async_kernel$70=caml_new_string("async_kernel"),
     cst_attempt_to_fill_full_ivar=
      caml_new_string("attempt to fill full ivar"),
     cst_async_kernel$71=caml_new_string("async_kernel"),
     cst_src_ivar_filler_ml=caml_new_string("src/ivar_filler.ml"),
     cst$28=caml_new_string(""),
     cst_async_kernel$72=caml_new_string("async_kernel"),
     cst_async_kernel$73=caml_new_string("async_kernel"),
     cst_stream_is_closed=caml_new_string("stream is closed"),
     cst_open_tail=caml_new_string("<open tail>"),
     cst_closed_tail=caml_new_string("<closed tail>"),
     cst_async_kernel$74=caml_new_string("async_kernel"),
     cst_src_tail_ml=caml_new_string("src/tail.ml"),
     cst$29=caml_new_string(""),
     cst_async_kernel$75=caml_new_string("async_kernel"),
     cst_async_kernel$76=caml_new_string("async_kernel"),
     cst_Monitor_catch_got_unexpected_empty_stream=
      caml_new_string("Monitor.catch got unexpected empty stream"),
     cst_Async_finally=caml_new_string("Async finally"),
     cst_Monitor_protect=caml_new_string("Monitor.protect"),
     cst_try_with_join_or_error=caml_new_string("try_with_join_or_error"),
     cst_try_with_or_error=caml_new_string("try_with_or_error"),
     cst$32=caml_new_string(""),
     cst_failed_to_set_Monitor_Expert_try_with_log_exn=
      caml_new_string("failed to set [Monitor.Expert.try_with_log_exn]"),
     cst_Monitor_send_exn_found_listening_monitor=
      caml_new_string("Monitor.send_exn found listening monitor"),
     cst_Monitor_send_exn$1=caml_new_string("Monitor.send_exn"),
     cst_monitor_ml_Error=caml_new_string("monitor.ml.Error"),
     cst$31=caml_new_string(""),
     cst_async_kernel$77=caml_new_string("async_kernel"),
     cst_src_monitor_ml=caml_new_string("src/monitor.ml"),
     cst$30=caml_new_string(""),
     cst_async_kernel$78=caml_new_string("async_kernel"),
     job_queue=caml_new_string('Called from file "job_queue.ml"'),
     deferred0=caml_new_string('Called from file "deferred0.ml"'),
     deferred1=caml_new_string('Called from file "deferred1.ml"'),
     monitor$2=caml_new_string('Called from file "monitor.ml"'),
     import0=caml_new_string('Raised at file "import0.ml"'),
     error=caml_new_string('Called from file "error.ml"'),
     cst_Async_kernel_Monitor_Error=
      caml_new_string("Async_kernel__Monitor.Error_"),
     cst_async_kernel$79=caml_new_string("async_kernel"),
     cst_Stream_first_of_empty_stream=
      caml_new_string("Stream.first of empty stream"),
     cst_async_kernel$80=caml_new_string("async_kernel"),
     cst_src_async_stream_ml=caml_new_string("src/async_stream.ml"),
     cst$33=caml_new_string(""),
     cst_async_kernel$81=caml_new_string("async_kernel"),
     cst_src_async_stream_ml$0=caml_new_string("src/async_stream.ml"),
     cst_Deferred_is_determined_closed_s=
      caml_new_string(": <<Deferred.is_determined (closed s)>>"),
     cst_async_kernel$82=caml_new_string("async_kernel"),
     cst_async_kernel$83=caml_new_string("async_kernel"),
     cst_src_synchronous_time_source_ml=
      caml_new_string("src/synchronous_time_source.ml"),
     cst$34=caml_new_string(""),
     cst_async_kernel$84=caml_new_string("async_kernel"),
     cst_async_kernel$85=caml_new_string("async_kernel"),
     cst_async_kernel$86=caml_new_string("async_kernel"),
     cst_src_time_source_intf_ml=caml_new_string("src/time_source_intf.ml"),
     cst$35=caml_new_string(""),
     cst_async_kernel$87=caml_new_string("async_kernel"),
     cst_async_kernel$88=caml_new_string("async_kernel"),
     cst_async_kernel$89=caml_new_string("async_kernel"),
     cst_src_bvar_ml=caml_new_string("src/bvar.ml"),
     cst$36=caml_new_string(""),
     cst_async_kernel$90=caml_new_string("async_kernel"),
     cst_ivar=caml_new_string("ivar"),
     cst_has_any_waiters=caml_new_string("has_any_waiters"),
     cst_async_kernel$91=caml_new_string("async_kernel"),
     cst_Time_source_with_timeout_bug_should_only_abort_once=
      caml_new_string("Time_source.with_timeout bug: should only abort once"),
     cst_Time_source_with_timeout_bug_both_completed_and_timed_out=
      caml_new_string
       ("Time_source.with_timeout bug: both completed and timed out"),
     cst_Time_source_every_got_nonpositive_span=
      caml_new_string("Time_source.every got nonpositive span"),
     cst_Time_source_Event_run_at=caml_new_string("Time_source.Event.run_at"),
     cst_Time_source_Event_reschedule_at=
      caml_new_string("Time_source.Event.reschedule_at"),
     cst_Clock_Event_abort_exn_failed_to_abort_event_that_previously_aborted=
      caml_new_string
       ("Clock.Event.abort_exn failed to abort event that previously aborted"),
     cst_Clock_Event_abort_exn_failed_to_abort_event_that_previously_happened=
      caml_new_string
       ("Clock.Event.abort_exn failed to abort event that previously happened"),
     cst_Time_source_Event_abort=caml_new_string("Time_source.Event.abort"),
     pos$2=caml_new_string("src/time_source.ml:225:31"),
     cst_wall_clock$0=caml_new_string("<wall_clock>"),
     cst_async_kernel$92=caml_new_string("async_kernel"),
     cst_src_time_source_ml=caml_new_string("src/time_source.ml"),
     cst$37=caml_new_string(""),
     cst_async_kernel$93=caml_new_string("async_kernel"),
     cst_scheduled_at=caml_new_string("scheduled_at"),
     cst_num_fires_to_skip=caml_new_string("num_fires_to_skip"),
     cst_fired=caml_new_string("fired"),
     cst_alarm$0=caml_new_string("alarm"),
     cst_async_kernel$94=caml_new_string("async_kernel"),
     cst_throttle_aborted_job=caml_new_string("throttle aborted job"),
     cst_Throttle_create_requires_positive_max_concurrent_jobs_but_got=
      caml_new_string
       ("Throttle.create requires positive max_concurrent_jobs, but got"),
     cst_Throttle_invariant_failed=
      caml_new_string("Throttle.invariant failed"),
     cst_async_kernel$95=caml_new_string("async_kernel"),
     cst_src_throttle_ml=caml_new_string("src/throttle.ml"),
     cst$38=caml_new_string(""),
     cst_async_kernel$96=caml_new_string("async_kernel"),
     cst_cleaned=caml_new_string("cleaned"),
     cst_num_resources_not_cleaned=
      caml_new_string("num_resources_not_cleaned"),
     cst_cleans=caml_new_string("cleans"),
     cst_is_dead=caml_new_string("is_dead"),
     cst_capacity_available=caml_new_string("capacity_available"),
     cst_num_jobs_running=caml_new_string("num_jobs_running"),
     cst_jobs_waiting_to_start=caml_new_string("jobs_waiting_to_start"),
     cst_job_resources_not_in_use=caml_new_string("job_resources_not_in_use"),
     cst_max_concurrent_jobs=caml_new_string("max_concurrent_jobs"),
     cst_continue_on_error=caml_new_string("continue_on_error"),
     cst_async_kernel$97=caml_new_string("async_kernel"),
     cst_async_kernel$98=caml_new_string("async_kernel"),
     cst_src_deferred_array_ml=caml_new_string("src/deferred_array.ml"),
     cst$39=caml_new_string(""),
     cst_async_kernel$99=caml_new_string("async_kernel"),
     cst_async_kernel$100=caml_new_string("async_kernel"),
     cst_async_kernel$101=caml_new_string("async_kernel"),
     cst_src_deferred_list_ml=caml_new_string("src/deferred_list.ml"),
     cst$40=caml_new_string(""),
     cst_async_kernel$102=caml_new_string("async_kernel"),
     cst_async_kernel$103=caml_new_string("async_kernel"),
     cst_async_kernel$104=caml_new_string("async_kernel"),
     cst_src_deferred_map_ml=caml_new_string("src/deferred_map.ml"),
     cst$41=caml_new_string(""),
     cst_async_kernel$105=caml_new_string("async_kernel"),
     cst_async_kernel$106=caml_new_string("async_kernel"),
     cst_src_scheduler_ml_323_57=caml_new_string("src/scheduler.ml:323:57"),
     cst_src_scheduler_ml_316_77=caml_new_string("src/scheduler.ml:316:77"),
     cst_src_scheduler_ml$0=caml_new_string("src/scheduler.ml"),
     cst_run_cycles_until_no_jobs_remain_assert_i=
      caml_new_string
       (": <<run_cycles_until_no_jobs_remain (); assert (i[...]>>"),
     cst_src_scheduler_ml$1=caml_new_string("src/scheduler.ml"),
     cst_run_cycles_until_no_jobs_remain_assert_i$0=
      caml_new_string
       (": <<run_cycles_until_no_jobs_remain (); assert (i[...]>>"),
     cst_Scheduler_yield_every_got_nonpositive_count=
      caml_new_string("Scheduler.yield_every got nonpositive count"),
     cst_reset_in_forked_process=caml_new_string("reset_in_forked_process"),
     cst_Async_scheduler_is_unusable_due_to_make_async_unusable=
      caml_new_string
       ("Async scheduler is unusable due to [make_async_unusable]"),
     cst_run_cycles_until_no_jobs_remain_starting=
      caml_new_string("run_cycles_until_no_jobs_remain starting"),
     cst_run_cycles_until_no_jobs_remain_cannot_proceed_scheduler_is_dead=
      caml_new_string
       ("run_cycles_until_no_jobs_remain cannot proceed -- scheduler is dead"),
     cst_run_cycles_until_no_jobs_remain_finished=
      caml_new_string("run_cycles_until_no_jobs_remain finished"),
     cst_run_cycle_starting=caml_new_string("run_cycle starting"),
     cst_run_cycle_finished=caml_new_string("run_cycle finished"),
     cst_enqueueing_finalizer_using_last_semantic=
      caml_new_string("enqueueing finalizer (using 'last' semantic)"),
     cst_adding_finalizer_using_last_semantic=
      caml_new_string("adding finalizer (using 'last' semantic)"),
     cst_enqueueing_finalizer=caml_new_string("enqueueing finalizer"),
     cst_adding_finalizer=caml_new_string("adding finalizer"),
     cst_async_kernel$107=caml_new_string("async_kernel"),
     cst_src_scheduler_ml=caml_new_string("src/scheduler.ml"),
     cst$42=caml_new_string(""),
     cst_async_kernel$108=caml_new_string("async_kernel"),
     cst_src_scheduler_ml$2=caml_new_string("src/scheduler.ml"),
     cst$43=caml_new_string(""),
     cst_async_kernel$109=caml_new_string("async_kernel"),
     pos$5=caml_new_string("src/deferred_memo.ml:47:19"),
     pos$4=caml_new_string("src/deferred_memo.ml:46:19"),
     pos$3=caml_new_string("src/deferred_memo.ml:40:21"),
     cst_boom=caml_new_string("boom!"),
     cst_src_deferred_memo_ml$0=caml_new_string("src/deferred_memo.ml"),
     cst_test_general_should_raise_false=
      caml_new_string(": <<test general ~should_raise:false>>"),
     cst_src_deferred_memo_ml$1=caml_new_string("src/deferred_memo.ml"),
     cst_test_unit_should_raise_false=
      caml_new_string(": <<test unit ~should_raise:false>>"),
     cst_src_deferred_memo_ml$2=caml_new_string("src/deferred_memo.ml"),
     cst_test_general_should_raise_true=
      caml_new_string(": <<test general ~should_raise:true>>"),
     cst_src_deferred_memo_ml$3=caml_new_string("src/deferred_memo.ml"),
     cst_test_unit_should_raise_true=
      caml_new_string(": <<test unit ~should_raise:true>>"),
     cst_caught_exception_in_memoized_function=
      caml_new_string("caught exception in memoized function"),
     cst_async_kernel$110=caml_new_string("async_kernel"),
     cst_src_deferred_memo_ml=caml_new_string("src/deferred_memo.ml"),
     cst$44=caml_new_string(""),
     cst_async_kernel$111=caml_new_string("async_kernel"),
     cst_src_deferred_memo_ml$4=caml_new_string("src/deferred_memo.ml"),
     cst$45=caml_new_string(""),
     cst_async_kernel$112=caml_new_string("async_kernel"),
     cst_async_kernel$113=caml_new_string("async_kernel"),
     cst_src_deferred_option_ml=caml_new_string("src/deferred_option.ml"),
     cst$46=caml_new_string(""),
     cst_async_kernel$114=caml_new_string("async_kernel"),
     cst_async_kernel$115=caml_new_string("async_kernel"),
     cst_async_kernel$116=caml_new_string("async_kernel"),
     cst_src_deferred_result_ml=caml_new_string("src/deferred_result.ml"),
     cst$47=caml_new_string(""),
     cst_async_kernel$117=caml_new_string("async_kernel"),
     cst_async_kernel$118=caml_new_string("async_kernel"),
     cst_foo$10=caml_new_string("foo"),
     cst_monitor_ml_Error_foo$0=caml_new_string("(monitor.ml.Error foo"),
     cst_foo$9=caml_new_string("foo"),
     cst_monitor_ml_Error_foo=caml_new_string("(monitor.ml.Error foo"),
     cst_foo$7=caml_new_string("foo"),
     cst_foo$8=caml_new_string("foo"),
     cst_foo$5=caml_new_string("foo"),
     cst_foo$6=caml_new_string("foo"),
     cst_bar=caml_new_string("bar"),
     cst_foo$3=caml_new_string("foo"),
     cst_bar$0=caml_new_string("bar"),
     cst_foo$4=caml_new_string("foo"),
     cst_foo$2=caml_new_string("foo"),
     cst_foo$0=caml_new_string("foo"),
     cst_foo$1=caml_new_string("foo"),
     cst_error=caml_new_string("error"),
     cst$50=caml_new_string(""),
     cst_031425=caml_new_string("031425"),
     cst$49=caml_new_string(""),
     cst_012=caml_new_string("012"),
     cst_src_deferred_or_error_ml$0=
      caml_new_string("src/deferred_or_error.ml"),
     cst_stabilize_assert_determined_def_123=
      caml_new_string(": <<stabilize (); assert (determined def 123)>>"),
     cst_src_deferred_or_error_ml$1=
      caml_new_string("src/deferred_or_error.ml"),
     cst_stabilize_assert_Deferred_peek_def_None=
      caml_new_string
       (": <<stabilize (); assert ((Deferred.peek def) = None)>>"),
     cst_src_deferred_or_error_ml$2=
      caml_new_string("src/deferred_or_error.ml"),
     cst_stabilize_assert_determined_def_012=
      caml_new_string(': <<stabilize (); assert (determined def "012")>>'),
     cst_src_deferred_or_error_ml$3=
      caml_new_string("src/deferred_or_error.ml"),
     cst_stabilize_assert_determined_def_0_1=
      caml_new_string
       (': <<stabilize (); assert (determined def ["0"; "1[...]>>'),
     cst_src_deferred_or_error_ml$4=
      caml_new_string("src/deferred_or_error.ml"),
     cst_stabilize_assert_determined_def_ass=
      caml_new_string
       (": <<stabilize (); assert (determined def ()); ass[...]>>"),
     cst_src_deferred_or_error_ml$5=
      caml_new_string("src/deferred_or_error.ml"),
     cst_stabilize_assert_determined_def_1_2_3=
      caml_new_string(": <<stabilize (); assert (determined def [1; 2; 3])>>"),
     cst_src_deferred_or_error_ml$6=
      caml_new_string("src/deferred_or_error.ml"),
     cst_stabilize_assert_determined_def_2_11_20=
      caml_new_string
       (": <<stabilize (); assert (determined def [2; 11; 20])>>"),
     cst_src_deferred_or_error_ml$7=
      caml_new_string("src/deferred_or_error.ml"),
     cst_stabilize_assert_determined_def_0_2_4=
      caml_new_string(": <<stabilize (); assert (determined def [0; 2; 4])>>"),
     cst_src_deferred_or_error_ml$8=
      caml_new_string("src/deferred_or_error.ml"),
     cst_stabilize_assert_determined_def_1_0=
      caml_new_string(": <<stabilize (); assert (determined def [1; 0])>>"),
     cst_src_deferred_or_error_ml$9=
      caml_new_string("src/deferred_or_error.ml"),
     cst_stabilize_assert_determined_def_1_3_5=
      caml_new_string(": <<stabilize (); assert (determined def [1; 3; 5])>>"),
     cst_src_deferred_or_error_ml$10=
      caml_new_string("src/deferred_or_error.ml"),
     cst_stabilize_assert_determined_def_3_1=
      caml_new_string
       (": <<stabilize (); assert (determined def [(3, 1);[...]>>"),
     cst_src_deferred_or_error_ml$11=
      caml_new_string("src/deferred_or_error.ml"),
     cst_stabilize_assert_determined_def_0_1_2=
      caml_new_string
       (": <<stabilize (); assert (determined def [0; 1; 2[...]>>"),
     cst_src_deferred_or_error_ml$12=
      caml_new_string("src/deferred_or_error.ml"),
     cst_stabilize_assert_determined_def_0_1_2$0=
      caml_new_string
       (": <<stabilize (); assert (determined def [0; 1; 2[...]>>"),
     cst_src_deferred_or_error_ml$13=
      caml_new_string("src/deferred_or_error.ml"),
     cst_stabilize_assert_determined_def_031425=
      caml_new_string(': <<stabilize (); assert (determined def "031425")>>'),
     cst_src_deferred_or_error_ml$14=
      caml_new_string("src/deferred_or_error.ml"),
     cst_stabilize_assert_determined_def_0_1_2$1=
      caml_new_string(": <<stabilize (); assert (determined def [0; 1; 2])>>"),
     cst_src_deferred_or_error_ml$15=
      caml_new_string("src/deferred_or_error.ml"),
     cst_stabilize_assert_determined_def_Some_3=
      caml_new_string(": <<stabilize (); assert (determined def (Some 3))>>"),
     cst_src_deferred_or_error_ml$16=
      caml_new_string("src/deferred_or_error.ml"),
     cst_stabilize_assert_determined_def_None=
      caml_new_string(": <<stabilize (); assert (determined def None)>>"),
     cst_src_deferred_or_error_ml$17=
      caml_new_string("src/deferred_or_error.ml"),
     cst_stabilize_assert_determined_def_Some_3$0=
      caml_new_string
       (": <<stabilize (); assert (determined def (Some (3[...]>>"),
     cst_src_deferred_or_error_ml$18=
      caml_new_string("src/deferred_or_error.ml"),
     cst_stabilize_assert_determined_def_None$0=
      caml_new_string(": <<stabilize (); assert (determined def None)>>"),
     cst_src_deferred_or_error_ml$19=
      caml_new_string("src/deferred_or_error.ml"),
     cst_stabilize_assert_determined_def_Some_4=
      caml_new_string(": <<stabilize (); assert (determined def (Some 4))>>"),
     cst_src_deferred_or_error_ml$20=
      caml_new_string("src/deferred_or_error.ml"),
     cst_stabilize_assert_determined_def_None$1=
      caml_new_string(": <<stabilize (); assert (determined def None)>>"),
     cst_src_deferred_or_error_ml$21=
      caml_new_string("src/deferred_or_error.ml"),
     cst_stabilize_assert_determined_def_Some_1=
      caml_new_string
       (": <<stabilize (); assert (determined def (Some (1[...]>>"),
     cst_src_deferred_or_error_ml$22=
      caml_new_string("src/deferred_or_error.ml"),
     cst_stabilize_assert_determined_def_None$2=
      caml_new_string(": <<stabilize (); assert (determined def None)>>"),
     cst_src_deferred_or_error_ml$23=
      caml_new_string("src/deferred_or_error.ml"),
     cst_stabilize_assert_determined_def_true=
      caml_new_string(": <<stabilize (); assert (determined def true)>>"),
     cst_src_deferred_or_error_ml$24=
      caml_new_string("src/deferred_or_error.ml"),
     cst_stabilize_assert_determined_def_false=
      caml_new_string(": <<stabilize (); assert (determined def false)>>"),
     cst_src_deferred_or_error_ml$25=
      caml_new_string("src/deferred_or_error.ml"),
     cst_stabilize_assert_determined_def_true$0=
      caml_new_string(": <<stabilize (); assert (determined def true)>>"),
     cst_src_deferred_or_error_ml$26=
      caml_new_string("src/deferred_or_error.ml"),
     cst_stabilize_assert_determined_def_false$0=
      caml_new_string(": <<stabilize (); assert (determined def false)>>"),
     cst_src_deferred_or_error_ml$27=
      caml_new_string("src/deferred_or_error.ml"),
     cst_stabilize_assert_determined_def_false$1=
      caml_new_string(": <<stabilize (); assert (determined def false)>>"),
     cst_src_deferred_or_error_ml$28=
      caml_new_string("src/deferred_or_error.ml"),
     cst_stabilize_assert_determined_def_true$1=
      caml_new_string(": <<stabilize (); assert (determined def true)>>"),
     cst_src_deferred_or_error_ml$29=
      caml_new_string("src/deferred_or_error.ml"),
     cst_stabilize_assert_determined_def_false$2=
      caml_new_string(": <<stabilize (); assert (determined def false)>>"),
     cst_src_deferred_or_error_ml$30=
      caml_new_string("src/deferred_or_error.ml"),
     cst_stabilize_assert_determined_def_true$2=
      caml_new_string(": <<stabilize (); assert (determined def true)>>"),
     cst_src_deferred_or_error_ml$31=
      caml_new_string("src/deferred_or_error.ml"),
     cst_stabilize_match_Deferred_peek_def_with=
      caml_new_string
       (": <<stabilize (); (match Deferred.peek def with |[...]>>"),
     cst_src_deferred_or_error_ml$32=
      caml_new_string("src/deferred_or_error.ml"),
     cst_stabilize_match_Deferred_peek_def_with$0=
      caml_new_string
       (": <<stabilize (); (match Deferred.peek def with |[...]>>"),
     cst_foo=caml_new_string("foo"),
     cst_src_deferred_or_error_ml$33=
      caml_new_string("src/deferred_or_error.ml"),
     cst_eq_fail_err_Error_err=
      caml_new_string(": <<eq (fail err) (Error err)>>"),
     cst_src_deferred_or_error_ml$34=
      caml_new_string("src/deferred_or_error.ml"),
     cst_assert_eq_ok_exn_return_1_1_assert=
      caml_new_string
       (": <<assert (eq' (ok_exn (return 1)) 1); assert   [...]>>"),
     cst_src_deferred_or_error_ml$35=
      caml_new_string("src/deferred_or_error.ml"),
     cst_eq_of_exn_Failure_foo_Or_error_of_exn=
      caml_new_string
       (': <<eq (of_exn (Failure "foo")) (Or_error.of_exn [...]>>'),
     cst_src_deferred_or_error_ml$36=
      caml_new_string("src/deferred_or_error.ml"),
     cst_assert_eq_of_exn_result_return_1_Ok_1=
      caml_new_string
       (": <<assert (eq (of_exn_result (return 1)) (Ok 1))[...]>>"),
     cst_src_deferred_or_error_ml$37=
      caml_new_string("src/deferred_or_error.ml"),
     cst_eq_error_foo_bar_String_sexp_of_t_Or=
      caml_new_string
       (': <<eq (error "foo" "bar" String.sexp_of_t)   (Or[...]>>'),
     cst_src_deferred_or_error_ml$38=
      caml_new_string("src/deferred_or_error.ml"),
     cst_eq_error_string_foo_Or_error_error_strin=
      caml_new_string
       (': <<eq (error_string "foo") (Or_error.error_strin[...]>>'),
     cst_src_deferred_or_error_ml$39=
      caml_new_string("src/deferred_or_error.ml"),
     cst_eq_unimplemented_foo_Or_error_unimplemen=
      caml_new_string
       (': <<eq (unimplemented "foo") (Or_error.unimplemen[...]>>'),
     cst_src_deferred_or_error_ml$40=
      caml_new_string("src/deferred_or_error.ml"),
     cst_check_combine_errors_Or_error_combine_errors=
      caml_new_string(": <<check combine_errors Or_error.combine_errors>>"),
     cst_src_deferred_or_error_ml$41=
      caml_new_string("src/deferred_or_error.ml"),
     cst_check_combine_errors_unit_Or_error_combine_er=
      caml_new_string
       (": <<check combine_errors_unit Or_error.combine_er[...]>>"),
     cst_src_deferred_or_error_ml$42=
      caml_new_string("src/deferred_or_error.ml"),
     cst_eq_ok_unit_Ok=caml_new_string(": <<eq ok_unit (Ok ())>>"),
     cst_src_deferred_or_error_ml$43=
      caml_new_string("src/deferred_or_error.ml"),
     cst_stabilize_Option_is_none_Deferred_peek_rv=
      caml_new_string(": <<stabilize (); Option.is_none (Deferred.peek rv)>>"),
     cst_src_deferred_or_error_ml$44=
      caml_new_string("src/deferred_or_error.ml"),
     cst_assert_eq_try_with_fun_Deferred_retu=
      caml_new_string
       (": <<assert (eq (try_with (fun () -> Deferred.retu[...]>>"),
     cst_src_deferred_or_error_ml$45=
      caml_new_string("src/deferred_or_error.ml"),
     cst_assert_eq_try_with_join_fun_return_1=
      caml_new_string
       (": <<assert (eq (try_with_join (fun () -> return 1[...]>>"),
     cst_async_kernel$119=caml_new_string("async_kernel"),
     cst_src_deferred_or_error_ml=caml_new_string("src/deferred_or_error.ml"),
     cst$48=caml_new_string(""),
     cst_async_kernel$120=caml_new_string("async_kernel"),
     cst_src_deferred_or_error_ml$46=
      caml_new_string("src/deferred_or_error.ml"),
     cst$51=caml_new_string(""),
     cst_async_kernel$121=caml_new_string("async_kernel"),
     cst_async_kernel$122=caml_new_string("async_kernel"),
     cst_src_deferred_queue_ml=caml_new_string("src/deferred_queue.ml"),
     cst$52=caml_new_string(""),
     cst_async_kernel$123=caml_new_string("async_kernel"),
     cst_async_kernel$124=caml_new_string("async_kernel"),
     cst_async_kernel$125=caml_new_string("async_kernel"),
     cst_src_deferred_sequence_ml=caml_new_string("src/deferred_sequence.ml"),
     cst$53=caml_new_string(""),
     cst_async_kernel$126=caml_new_string("async_kernel"),
     cst_async_kernel$127=caml_new_string("async_kernel"),
     pos$30=caml_new_string("src/monad_sequence_unit_tests.ml:410:23"),
     pos$29=caml_new_string("src/monad_sequence_unit_tests.ml:398:21"),
     pos$28=caml_new_string("src/monad_sequence_unit_tests.ml:382:21"),
     pos$27=caml_new_string("src/monad_sequence_unit_tests.ml:351:23"),
     pos$26=caml_new_string("src/monad_sequence_unit_tests.ml:345:23"),
     pos$25=caml_new_string("src/monad_sequence_unit_tests.ml:338:23"),
     pos$24=caml_new_string("src/monad_sequence_unit_tests.ml:330:23"),
     pos$23=caml_new_string("src/monad_sequence_unit_tests.ml:322:23"),
     pos$22=caml_new_string("src/monad_sequence_unit_tests.ml:314:23"),
     pos$21=caml_new_string("src/monad_sequence_unit_tests.ml:306:23"),
     pos$20=caml_new_string("src/monad_sequence_unit_tests.ml:297:23"),
     pos$19=caml_new_string("src/monad_sequence_unit_tests.ml:289:23"),
     pos$18=caml_new_string("src/monad_sequence_unit_tests.ml:280:23"),
     pos$17=caml_new_string("src/monad_sequence_unit_tests.ml:270:23"),
     pos$16=caml_new_string("src/monad_sequence_unit_tests.ml:262:23"),
     pos$15=caml_new_string("src/monad_sequence_unit_tests.ml:254:23"),
     pos$14=caml_new_string("src/monad_sequence_unit_tests.ml:245:23"),
     pos$13=caml_new_string("src/monad_sequence_unit_tests.ml:237:23"),
     pos$12=caml_new_string("src/monad_sequence_unit_tests.ml:228:23"),
     pos$11=caml_new_string("src/monad_sequence_unit_tests.ml:219:23"),
     pos$10=caml_new_string("src/monad_sequence_unit_tests.ml:211:23"),
     pos$9=caml_new_string("src/monad_sequence_unit_tests.ml:203:23"),
     pos$8=caml_new_string("src/monad_sequence_unit_tests.ml:195:23"),
     pos$7=caml_new_string("src/monad_sequence_unit_tests.ml:135:29"),
     pos$6=caml_new_string("src/monad_sequence_unit_tests.ml:121:27"),
     hows=
      caml_list_of_js_array
       ([-686623969,
         -676829465,
         [0,-159979741,1],
         [0,-159979741,2],
         [0,-159979741,3],
         [0,-159979741,4],
         [0,-159979741,5],
         [0,-159979741,6],
         [0,-159979741,7],
         [0,-159979741,8],
         [0,-159979741,9],
         [0,-159979741,10]]),
     cst_src_monad_sequence_unit_tests_ml$0=
      caml_new_string("src/monad_sequence_unit_tests.ml"),
     cst_test1_S_map_M_map_f_fun_x_x_2_hand=
      caml_new_string
       (": <<test1 S.map M.map ~f:(fun x -> x * 2)   ~hand[...]>>"),
     cst_src_monad_sequence_unit_tests_ml$1=
      caml_new_string("src/monad_sequence_unit_tests.ml"),
     cst_test2_S_mapi_M_mapi_f_fun_i_fun_x_x=
      caml_new_string
       (": <<test2 S.mapi M.mapi ~f:(fun i -> fun x -> (x [...]>>"),
     cst_src_monad_sequence_unit_tests_ml$2=
      caml_new_string("src/monad_sequence_unit_tests.ml"),
     cst_test1_S_filter_M_filter_f_fun_x_x_mod_2=
      caml_new_string
       (": <<test1 S.filter M.filter ~f:(fun x -> (x mod 2[...]>>"),
     cst_src_monad_sequence_unit_tests_ml$3=
      caml_new_string("src/monad_sequence_unit_tests.ml"),
     cst_test2_S_filteri_M_filteri_f_fun_i_fun_x=
      caml_new_string
       (": <<test2 S.filteri M.filteri ~f:(fun i -> fun x [...]>>"),
     cst_src_monad_sequence_unit_tests_ml$4=
      caml_new_string("src/monad_sequence_unit_tests.ml"),
     cst_test1_S_filter_map_M_filter_map_f_fun_x=
      caml_new_string
       (": <<test1 S.filter_map M.filter_map   ~f:(fun x -[...]>>"),
     cst_src_monad_sequence_unit_tests_ml$5=
      caml_new_string("src/monad_sequence_unit_tests.ml"),
     cst_test2_S_filter_mapi_M_filter_mapi_f_fun_i=
      caml_new_string
       (": <<test2 S.filter_mapi M.filter_mapi   ~f:(fun i[...]>>"),
     cst_src_monad_sequence_unit_tests_ml$6=
      caml_new_string("src/monad_sequence_unit_tests.ml"),
     cst_test1_S_concat_map_M_concat_map_f_fun_x=
      caml_new_string
       (": <<test1 S.concat_map M.concat_map   ~f:(fun x -[...]>>"),
     cst_src_monad_sequence_unit_tests_ml$7=
      caml_new_string("src/monad_sequence_unit_tests.ml"),
     cst_test2_S_concat_mapi_M_concat_mapi_f_fun_i=
      caml_new_string
       (": <<test2 S.concat_mapi M.concat_mapi   ~f:(fun i[...]>>"),
     cst_src_monad_sequence_unit_tests_ml$8=
      caml_new_string("src/monad_sequence_unit_tests.ml"),
     cst_test1_sequential_S_find_M_find_f_fun_x=
      caml_new_string
       (": <<test1_sequential S.find M.find ~f:(fun x -> ([...]>>"),
     cst_src_monad_sequence_unit_tests_ml$9=
      caml_new_string("src/monad_sequence_unit_tests.ml"),
     cst_test2_sequential_S_findi_M_findi_f_fun_i=
      caml_new_string
       (": <<test2_sequential S.findi M.findi ~f:(fun i ->[...]>>"),
     cst_src_monad_sequence_unit_tests_ml$10=
      caml_new_string("src/monad_sequence_unit_tests.ml"),
     cst_test1_sequential_S_find_map_M_find_map_f=
      caml_new_string
       (": <<test1_sequential S.find_map M.find_map   ~f:([...]>>"),
     cst_src_monad_sequence_unit_tests_ml$11=
      caml_new_string("src/monad_sequence_unit_tests.ml"),
     cst_test2_sequential_S_find_mapi_M_find_mapi_f=
      caml_new_string
       (": <<test2_sequential S.find_mapi M.find_mapi   ~f[...]>>"),
     cst_src_monad_sequence_unit_tests_ml$12=
      caml_new_string("src/monad_sequence_unit_tests.ml"),
     cst_test2_sequential_S_fold_init_10_M_fold_i=
      caml_new_string
       (": <<test2_sequential (S.fold ~init:10) (M.fold ~i[...]>>"),
     cst_src_monad_sequence_unit_tests_ml$13=
      caml_new_string("src/monad_sequence_unit_tests.ml"),
     cst_test3_sequential_S_foldi_init_10_M_foldi=
      caml_new_string
       (": <<test3_sequential (S.foldi ~init:10) (M.foldi [...]>>"),
     cst_src_monad_sequence_unit_tests_ml$14=
      caml_new_string("src/monad_sequence_unit_tests.ml"),
     cst_test1_sequential_S_for_all_M_for_all_f_fun=
      caml_new_string
       (": <<test1_sequential S.for_all M.for_all ~f:(fun [...]>>"),
     cst_src_monad_sequence_unit_tests_ml$15=
      caml_new_string("src/monad_sequence_unit_tests.ml"),
     cst_test2_sequential_S_for_alli_M_for_alli_f=
      caml_new_string
       (": <<test2_sequential S.for_alli M.for_alli   ~f:([...]>>"),
     cst_src_monad_sequence_unit_tests_ml$16=
      caml_new_string("src/monad_sequence_unit_tests.ml"),
     cst_test1_sequential_S_exists_M_exists_f_fun_x=
      caml_new_string
       (": <<test1_sequential S.exists M.exists ~f:(fun x [...]>>"),
     cst_src_monad_sequence_unit_tests_ml$17=
      caml_new_string("src/monad_sequence_unit_tests.ml"),
     cst_test2_sequential_S_existsi_M_existsi_f_fu=
      caml_new_string
       (": <<test2_sequential S.existsi M.existsi   ~f:(fu[...]>>"),
     cst_src_monad_sequence_unit_tests_ml$18=
      caml_new_string("src/monad_sequence_unit_tests.ml"),
     cst_test1_S_iter_M_iter_f_fun_handl=
      caml_new_string
       (": <<test1 S.iter M.iter ~f:(fun _ -> ())   ~handl[...]>>"),
     cst_src_monad_sequence_unit_tests_ml$19=
      caml_new_string("src/monad_sequence_unit_tests.ml"),
     cst_test2_S_iteri_M_iteri_f_fun_fun=
      caml_new_string
       (": <<test2 S.iteri M.iteri ~f:(fun _ -> fun _ -> ([...]>>"),
     cst_src_monad_sequence_unit_tests_ml$20=
      caml_new_string("src/monad_sequence_unit_tests.ml"),
     cst_iter_lots_of_random_sequences_f_fun_seque=
      caml_new_string
       (": <<iter_lots_of_random_sequences   ~f:(fun seque[...]>>"),
     cst_src_monad_sequence_unit_tests_ml$21=
      caml_new_string("src/monad_sequence_unit_tests.ml"),
     cst_iter_lots_of_random_sequences_f_fun_seque$0=
      caml_new_string
       (": <<iter_lots_of_random_sequences   ~f:(fun seque[...]>>"),
     cst_src_monad_sequence_unit_tests_ml$22=
      caml_new_string("src/monad_sequence_unit_tests.ml"),
     cst_iter_lots_of_random_sequences_f_fun_seque$1=
      caml_new_string
       (": <<iter_lots_of_random_sequences   ~f:(fun seque[...]>>"),
     cst_src_monad_sequence_unit_tests_ml$23=
      caml_new_string("src/monad_sequence_unit_tests.ml"),
     cst_iter_lots_of_random_sequences_f_fun_seque$2=
      caml_new_string
       (": <<iter_lots_of_random_sequences   ~f:(fun seque[...]>>"),
     cst_async_kernel$128=caml_new_string("async_kernel"),
     cst_src_monad_sequence_unit_tests_ml=
      caml_new_string("src/monad_sequence_unit_tests.ml"),
     cst$54=caml_new_string(""),
     cst_async_kernel$129=caml_new_string("async_kernel"),
     cst_async_kernel$130=caml_new_string("async_kernel"),
     cst_async_kernel$131=caml_new_string("async_kernel"),
     cst_src_deferred_ml=caml_new_string("src/deferred.ml"),
     cst$55=caml_new_string(""),
     cst_async_kernel$132=caml_new_string("async_kernel"),
     cst_src_deferred_ml$0=caml_new_string("src/deferred.ml"),
     cst_Deferred_array_tests=caml_new_string(": Deferred_array_tests"),
     cst_src_deferred_ml$1=caml_new_string("src/deferred.ml"),
     cst_Deferred_sequence_tests=caml_new_string(": Deferred_sequence_tests"),
     cst_src_deferred_ml$2=caml_new_string("src/deferred.ml"),
     cst_Deferred_queue_tests=caml_new_string(": Deferred_queue_tests"),
     cst_src_deferred_ml$3=caml_new_string("src/deferred.ml"),
     cst_Deferred_list_tests=caml_new_string(": Deferred_list_tests"),
     cst_async_kernel$133=caml_new_string("async_kernel"),
     cst_at_kill=caml_new_string("at_kill"),
     cst_kill=caml_new_string("kill"),
     cst_enqueue$0=caml_new_string("enqueue'"),
     cst_enqueue=caml_new_string("enqueue"),
     cst_Throttle=caml_new_string("Throttle"),
     cst_async_kernel$134=caml_new_string("async_kernel"),
     cst_src_throttle_debug_ml=caml_new_string("src/throttle_debug.ml"),
     cst$56=caml_new_string(""),
     cst_async_kernel$135=caml_new_string("async_kernel"),
     cst_async_kernel$136=caml_new_string("async_kernel"),
     cst_src_throttle_unit_tests_ml_280_64=
      caml_new_string("src/throttle_unit_tests.ml:280:64"),
     cst_src_throttle_unit_tests_ml_220_56=
      caml_new_string("src/throttle_unit_tests.ml:220:56"),
     cst_failure=caml_new_string("failure"),
     cst_src_throttle_unit_tests_ml_66_51=
      caml_new_string("src/throttle_unit_tests.ml:66:51"),
     cst_src_throttle_unit_tests_ml_54_51=
      caml_new_string("src/throttle_unit_tests.ml:54:51"),
     cst_async_kernel$137=caml_new_string("async_kernel"),
     cst_src_throttle_unit_tests_ml=
      caml_new_string("src/throttle_unit_tests.ml"),
     cst$57=caml_new_string(""),
     cst_async_kernel$138=caml_new_string("async_kernel"),
     cst_src_throttle_unit_tests_ml$0=
      caml_new_string("src/throttle_unit_tests.ml"),
     cst_try_ignore_create_continue_on_error_false=
      caml_new_string
       (": <<try   ignore (create ~continue_on_error:false[...]>>"),
     cst_src_throttle_unit_tests_ml$1=
      caml_new_string("src/throttle_unit_tests.ml"),
     cst_assert_i_0_stabilize_assert_i=
      caml_new_string
       (": <<assert ((!i) = 0); stabilize (); assert ((!i)[...]>>"),
     cst_src_throttle_unit_tests_ml$2=
      caml_new_string("src/throttle_unit_tests.ml"),
     cst_assert_max_concurrent_jobs_t_1_assert=
      caml_new_string
       (": <<assert ((max_concurrent_jobs t) = 1); assert [...]>>"),
     cst_src_throttle_unit_tests_ml$3=
      caml_new_string("src/throttle_unit_tests.ml"),
     cst_stabilize_assert_not_is_dead_t_asser=
      caml_new_string
       (": <<stabilize (); assert (not (is_dead t)); asser[...]>>"),
     cst_src_throttle_unit_tests_ml$4=
      caml_new_string("src/throttle_unit_tests.ml"),
     cst_assert_max_concurrent_jobs_t_2_let_r=
      caml_new_string
       (": <<assert ((max_concurrent_jobs t) = 2); (let r [...]>>"),
     cst_src_throttle_unit_tests_ml$5=
      caml_new_string("src/throttle_unit_tests.ml"),
     cst_assert_num_jobs_waiting_to_start_t_0=
      caml_new_string
       (": <<assert ((num_jobs_waiting_to_start t) = 0); ([...]>>"),
     cst_src_throttle_unit_tests_ml$6=
      caml_new_string("src/throttle_unit_tests.ml"),
     cst_stabilize_assert_Option_is_some_Deferre=
      caml_new_string
       (": <<stabilize (); assert (Option.is_some (Deferre[...]>>"),
     cst_src_throttle_unit_tests_ml$7=
      caml_new_string("src/throttle_unit_tests.ml"),
     cst_List_iter_1_10_100_1000_f_fun_num_jo=
      caml_new_string
       (": <<List.iter [1; 10; 100; 1000]   ~f:(fun num_jo[...]>>"),
     cst_src_throttle_unit_tests_ml$8=
      caml_new_string("src/throttle_unit_tests.ml"),
     cst_for_num_resources_1_to_3_do_for_num_jobs=
      caml_new_string
       (": <<for num_resources = 1 to 3 do   for num_jobs_[...]>>"),
     cst_src_throttle_unit_tests_ml$9=
      caml_new_string("src/throttle_unit_tests.ml"),
     cst_Stream_iter_Monitor_detach_and_get_error_str=
      caml_new_string
       (": <<Stream.iter (Monitor.detach_and_get_error_str[...]>>"),
     cst_src_throttle_unit_tests_ml$10=
      caml_new_string("src/throttle_unit_tests.ml"),
     cst_stabilize_assert_Deferred_is_determined_d=
      caml_new_string(": <<stabilize (); assert (Deferred.is_determined d)>>"),
     cst_src_throttle_unit_tests_ml$11=
      caml_new_string("src/throttle_unit_tests.ml"),
     cst_kill_t_let_r_ref_true_in_let_d_enqueue=
      caml_new_string
       (": <<kill t; (let r = ref true in  let d = enqueue[...]>>"),
     cst_src_throttle_unit_tests_ml$12=
      caml_new_string("src/throttle_unit_tests.ml"),
     cst_stabilize_assert_Deferred_peek_d_So=
      caml_new_string
       (": <<stabilize (); assert ((Deferred.peek d) = (So[...]>>"),
     cst_async_kernel$139=caml_new_string("async_kernel"),
     cst_async_kernel$140=caml_new_string("async_kernel"),
     cst_src_clock_intf_ml=caml_new_string("src/clock_intf.ml"),
     cst$58=caml_new_string(""),
     cst_async_kernel$141=caml_new_string("async_kernel"),
     cst_async_kernel$142=caml_new_string("async_kernel"),
     cst_async_kernel$143=caml_new_string("async_kernel"),
     cst_src_clock_ns_ml=caml_new_string("src/clock_ns.ml"),
     cst$59=caml_new_string(""),
     cst_async_kernel$144=caml_new_string("async_kernel"),
     cst_async_kernel$145=caml_new_string("async_kernel"),
     cst_async_kernel$146=caml_new_string("async_kernel"),
     cst_src_require_explicit_time_source_ml=
      caml_new_string("src/require_explicit_time_source.ml"),
     cst$60=caml_new_string(""),
     cst_async_kernel$147=caml_new_string("async_kernel"),
     cst_async_kernel$148=caml_new_string("async_kernel"),
     cst_src_pipe_ml_1882_47=caml_new_string("src/pipe.ml:1882:47"),
     l$8=[0,1,[0,2,[0,3,0]]],
     cst_src_pipe_ml_1863_48=caml_new_string("src/pipe.ml:1863:48"),
     l$7=[0,13,[0,17,0]],
     l$6=[0,1,[0,2,[0,3,0]]],
     cst_src_pipe_ml_1829_47=caml_new_string("src/pipe.ml:1829:47"),
     l$5=[0,1,[0,2,[0,3,0]]],
     cst_src_pipe_ml_1809_48=caml_new_string("src/pipe.ml:1809:48"),
     l$4=[0,13,[0,17,0]],
     l$3=[0,1,[0,2,[0,3,0]]],
     cst_src_pipe_ml_1736_50=caml_new_string("src/pipe.ml:1736:50"),
     l$2=[0,1,[0,2,[0,3,0]]],
     cst_mismatch=caml_new_string("mismatch"),
     partial=[0,22,0],
     partial$0=[0,4,[0,22,0]],
     partial$1=[0,3,[0,3,[0,4,[0,22,0]]]],
     partial$2=[0,2,[0,27,[0,49,0]]],
     partial$3=[0,[0,2,[0,27,[0,49,0]]],0],
     partial$4=[0,1,[0,3,[0,3,[0,4,[0,22,[0,27,[0,31,[0,59,[0,72,0]]]]]]]]],
     partial$5=
      [0,
       [0,1,[0,3,[0,3,[0,4,[0,22,[0,27,[0,31,[0,59,[0,72,0]]]]]]]]],
       [0,[0,2,[0,27,[0,49,[0,127,[0,311,0]]]]],0]],
     partial$6=[0,2,[0,9,[0,12,[0,27,[0,101,0]]]]],
     cases=
      [0,
       0,
       [0,
        [0,0,0],
        [0,
         [0,[0,1,[0,3,[0,7,0]]],0],
         [0,
          [0,0,[0,0,[0,0,0]]],
          [0,
           [0,[0,1,[0,7,[0,10,0]]],0],
           [0,
            [0,
             [0,1,[0,5,[0,12,0]]],
             [0,[0,3,[0,3,[0,4,partial]]],[0,[0,1,0],[0,[0,40,0],0]]]],
            [0,
             [0,[0,1,[0,5,[0,12,0]]],[0,[0,3,[0,3,partial$0]],[0,0,[0,0,0]]]],
             [0,
              [0,[0,27,0],[0,[0,1,partial$1],[0,partial$2,0]]],
              [0,
               [0,[0,27,0],[0,partial$4,partial$3]],
               [0,[0,partial$6,partial$5],0]]]]]]]]]],
     transfer_by=[0,1,[0,2,[0,3,[0,5,[0,10,0]]]]],
     l$1=[0,1,[0,2,[0,3,0]]],
     l$0=[0,1,[0,2,[0,3,0]]],
     pos$35=caml_new_string("src/pipe.ml:1542:21"),
     expect$1=[0,1,[0,2,[0,3,[0,4,[0,5,0]]]]],
     pos$34=caml_new_string("src/pipe.ml:1525:21"),
     pos$33=caml_new_string("src/pipe.ml:1522:21"),
     expect=[0,17724,0],
     expect$0=[0,17724,1],
     pos$32=caml_new_string("src/pipe.ml:1509:23"),
     l=[0,12,[0,13,0]],
     cst_src_pipe_ml_1319_37=caml_new_string("src/pipe.ml:1319:37"),
     cst_fail$0=caml_new_string("fail"),
     cst_expected_exn_to_bubble_up$0=
      caml_new_string("expected exn to bubble up"),
     cst_src_pipe_ml_1297_37=caml_new_string("src/pipe.ml:1297:37"),
     cst_fail=caml_new_string("fail"),
     cst_expected_exn_to_bubble_up=
      caml_new_string("expected exn to bubble up"),
     pos$31=caml_new_string("src/pipe.ml:1283:23"),
     cst_src_pipe_ml$0=caml_new_string("src/pipe.ml"),
     cst_List_iter_List_init_10_f_fun_i_List_ini=
      caml_new_string
       (": <<List.iter (List.init 10 ~f:(fun i -> List.ini[...]>>"),
     cst_src_pipe_ml$1=caml_new_string("src/pipe.ml"),
     cst_upon_read_all_reader_fun_q_assert_Q_t=
      caml_new_string
       (": <<upon (read_all reader) (fun q -> assert ((Q.t[...]>>"),
     cst_src_pipe_ml$2=caml_new_string("src/pipe.ml"),
     cst_assert_not_is_closed_writer_close_writer=
      caml_new_string
       (": <<assert (not (is_closed writer)); close writer[...]>>"),
     cst_src_pipe_ml$3=caml_new_string("src/pipe.ml"),
     cst_assert_not_is_closed_writer_close_read_r=
      caml_new_string
       (": <<assert (not (is_closed writer)); close_read r[...]>>"),
     cst_src_pipe_ml$4=caml_new_string("src/pipe.ml"),
     cst_check_read_read_check_read_read_check_read=
      caml_new_string
       (": <<check_read read'; check_read read; check_read[...]>>"),
     cst_src_pipe_ml$5=caml_new_string("src/pipe.ml"),
     cst_check_read_read_function_Ok_q_Q_to_li=
      caml_new_string
       (": <<check_read read' (function | `Ok q -> Q.to_li[...]>>"),
     cst_src_pipe_ml$6=caml_new_string("src/pipe.ml"),
     cst_don_t_wait_for_write_writer_13_let_f2_d=
      caml_new_string
       (": <<don't_wait_for (write writer 13); (let f2 = d[...]>>"),
     cst_src_pipe_ml$7=caml_new_string("src/pipe.ml"),
     cst_stabilize_assert_not_is_closed_reader=
      caml_new_string
       (": <<stabilize (); assert (not (is_closed reader))[...]>>"),
     cst_src_pipe_ml$8=caml_new_string("src/pipe.ml"),
     cst_stabilize_assert_is_closed_reader_asse=
      caml_new_string
       (": <<stabilize (); assert (is_closed reader); asse[...]>>"),
     cst_src_pipe_ml$9=caml_new_string("src/pipe.ml"),
     cst_stabilize_assert_not_is_closed_reader$0=
      caml_new_string
       (": <<stabilize (); assert (not (is_closed reader))[...]>>"),
     cst_src_pipe_ml$10=caml_new_string("src/pipe.ml"),
     cst_for_max_0_to_5_do_let_list_unfold=
      caml_new_string
       (": <<for max = 0 to 5 do   let list =     (unfold [...]>>"),
     cst_src_pipe_ml$11=caml_new_string("src/pipe.ml"),
     cst_create_reader_close_on_exception_false=
      caml_new_string(": [create_reader ~close_on_exception:false]"),
     cst_src_pipe_ml$12=caml_new_string("src/pipe.ml"),
     cst_create_reader_close_on_exception_true=
      caml_new_string(": [create_reader ~close_on_exception:true]"),
     cst_src_pipe_ml$13=caml_new_string("src/pipe.ml"),
     cst_assert_not_is_closed_writer_write_withou=
      caml_new_string
       (": <<assert (not (is_closed writer)); write_withou[...]>>"),
     cst_src_pipe_ml$14=caml_new_string("src/pipe.ml"),
     cst_close_writer_stabilize_assert_Deferred=
      caml_new_string
       (": <<close writer; stabilize (); assert ((Deferred[...]>>"),
     cst_src_pipe_ml$15=caml_new_string("src/pipe.ml"),
     cst_close_read_reader_stabilize_assert_Def=
      caml_new_string
       (": <<close_read reader; stabilize (); assert ((Def[...]>>"),
     cst_src_pipe_ml$16=caml_new_string("src/pipe.ml"),
     cst_stabilize_assert_Deferred_peek_p_Non=
      caml_new_string
       (": <<stabilize (); assert ((Deferred.peek p) = Non[...]>>"),
     cst_src_pipe_ml$17=caml_new_string("src/pipe.ml"),
     cst_assert_length_writer_2_stabilize_a=
      caml_new_string
       (": <<assert ((length writer) = 2); stabilize (); a[...]>>"),
     cst_src_pipe_ml$18=caml_new_string("src/pipe.ml"),
     cst_close_writer_let_d_read_all_reader_in_sta=
      caml_new_string
       (": <<close writer; (let d = read_all reader in sta[...]>>"),
     cst_src_pipe_ml$19=caml_new_string("src/pipe.ml"),
     cst_don_t_wait_for_write_writer_13_close_write=
      caml_new_string
       (": <<don't_wait_for (write writer 13); close write[...]>>"),
     cst_src_pipe_ml$20=caml_new_string("src/pipe.ml"),
     cst_don_t_wait_for_write_writer_Q_of_list_12=
      caml_new_string
       (": <<don't_wait_for (write' writer (Q.of_list [12;[...]>>"),
     cst_src_pipe_ml$21=caml_new_string("src/pipe.ml"),
     cst_don_t_wait_for_write_writer_Q_of_list_12$0=
      caml_new_string
       (": <<don't_wait_for (write' writer (Q.of_list [12;[...]>>"),
     cst_src_pipe_ml$22=caml_new_string("src/pipe.ml"),
     cst_clear_reader_stabilize_assert_Deferred=
      caml_new_string
       (": <<clear reader; stabilize (); assert ((Deferred[...]>>"),
     cst_src_pipe_ml$23=caml_new_string("src/pipe.ml"),
     cst_don_t_wait_for_write_writer_Q_of_list_1=
      caml_new_string
       (": <<don't_wait_for (write' writer (Q.of_list [1; [...]>>"),
     cst_src_pipe_ml$24=caml_new_string("src/pipe.ml"),
     cst_stabilize_assert_length_pipe_0_Tai=
      caml_new_string
       (": <<stabilize (); assert ((length pipe) = 0); Tai[...]>>"),
     cst_src_pipe_ml$25=caml_new_string("src/pipe.ml"),
     cst_for_i_0_to_5_do_let_data_List_init_i_f=
      caml_new_string
       (": <<for i = 0 to 5 do   let data = List.init i ~f[...]>>"),
     cst_src_pipe_ml$26=caml_new_string("src/pipe.ml"),
     cst_closing_the_pipe_produced_by_of_sequence_early=
      caml_new_string(": closing the pipe produced by [of_sequence] early"),
     cst_src_pipe_ml$27=caml_new_string("src/pipe.ml"),
     cst_to_sequence_produces_immediate_values_when_available=
      caml_new_string
       (": to_sequence produces immediate values when available"),
     cst_src_pipe_ml$28=caml_new_string("src/pipe.ml"),
     cst_to_sequence_produces_deferred_values_when_it_should_block=
      caml_new_string
       (": to_sequence produces deferred values when it should block"),
     cst_src_pipe_ml$29=caml_new_string("src/pipe.ml"),
     cst_stabilize_assert_read_result_d=
      caml_new_string(": <<stabilize (); assert ((read_result d) = [])>>"),
     cst_src_pipe_ml$30=caml_new_string("src/pipe.ml"),
     cst_stabilize_assert_read_result_d_l=
      caml_new_string(": <<stabilize (); assert ((read_result d) = l)>>"),
     cst_src_pipe_ml$31=caml_new_string("src/pipe.ml"),
     cst_stabilize_assert_List_length_read_resu=
      caml_new_string
       (": <<stabilize (); assert ((List.length (read_resu[...]>>"),
     cst_src_pipe_ml$32=caml_new_string("src/pipe.ml"),
     cst_close_w_let_d_read_all_t_in_stabilize=
      caml_new_string
       (": <<close w; (let d = read_all t in stabilize ();[...]>>"),
     cst_src_pipe_ml$33=caml_new_string("src/pipe.ml"),
     cst_write_without_pushback_w_of_list_1_2_3=
      caml_new_string
       (": <<write_without_pushback w (of_list [1; 2; 3]);[...]>>"),
     cst_src_pipe_ml$34=caml_new_string("src/pipe.ml"),
     cst_write_without_pushback_w_of_list_1_2_3$0=
      caml_new_string
       (": <<write_without_pushback w (of_list [1; 2; 3]);[...]>>"),
     cst_src_pipe_ml$35=caml_new_string("src/pipe.ml"),
     cst_stabilize_assert_not_is_closed_t_wri=
      caml_new_string
       (": <<stabilize (); assert (not (is_closed t)); wri[...]>>"),
     cst_src_pipe_ml$36=caml_new_string("src/pipe.ml"),
     cst_stabilize_assert_Deferred_is_determined=
      caml_new_string
       (": <<stabilize (); assert (Deferred.is_determined [...]>>"),
     cst_src_pipe_ml$37=caml_new_string("src/pipe.ml"),
     cst_write_without_pushback_w_1_let_t_merge_r=
      caml_new_string
       (": <<write_without_pushback w 1; (let t = merge [r[...]>>"),
     cst_src_pipe_ml$38=caml_new_string("src/pipe.ml"),
     cst_upon_iter_t_f_fun_q_Queue_iter=
      caml_new_string
       (": <<upon   (iter' t      ~f:(fun q -> Queue.iter [...]>>"),
     cst_src_pipe_ml$39=caml_new_string("src/pipe.ml"),
     cst_write_without_pushback_w_13_let_iter_finish=
      caml_new_string
       (": <<write_without_pushback w 13; (let iter_finish[...]>>"),
     cst_I_is_17=caml_new_string("I_is_17"),
     cst_src_pipe_ml$40=caml_new_string("src/pipe.ml"),
     cst_write_without_pushback_w_13_let_iter_finish$0=
      caml_new_string
       (": <<write_without_pushback w 13; (let iter_finish[...]>>"),
     cst_src_pipe_ml$41=caml_new_string("src/pipe.ml"),
     cst_upon_iter_t_f_fun_i_r_r_i_re=
      caml_new_string
       (": <<upon (iter t ~f:(fun i -> r := ((!r) + i); re[...]>>"),
     cst_src_pipe_ml$42=caml_new_string("src/pipe.ml"),
     cst_ignore_Monitor_try_with_fun=
      caml_new_string
       (": <<ignore   (Monitor.try_with      (fun () ->   [...]>>"),
     cst_src_pipe_ml$43=caml_new_string("src/pipe.ml"),
     cst_ignore_Monitor_try_with_fun$0=
      caml_new_string
       (": <<ignore   (Monitor.try_with      (fun () ->   [...]>>"),
     cst_src_pipe_ml$44=caml_new_string("src/pipe.ml"),
     cst_upon_iter_without_pushback_t_f_fun_i_r=
      caml_new_string
       (": <<upon (iter_without_pushback t ~f:(fun i -> r [...]>>"),
     cst_src_pipe_ml$45=caml_new_string("src/pipe.ml"),
     cst_ignore_Monitor_try_with_fun$1=
      caml_new_string
       (": <<ignore   (Monitor.try_with      (fun () ->   [...]>>"),
     cst_src_pipe_ml$46=caml_new_string("src/pipe.ml"),
     cst_ignore_Monitor_try_with_fun$2=
      caml_new_string
       (": <<ignore   (Monitor.try_with      (fun () ->   [...]>>"),
     cst_src_pipe_ml$47=caml_new_string("src/pipe.ml"),
     cst_assert_Deferred_peek_downstream_flushed_w=
      caml_new_string
       (": <<assert ((Deferred.peek (downstream_flushed w)[...]>>"),
     cst_src_pipe_ml$48=caml_new_string("src/pipe.ml"),
     cst_stabilize_assert_Deferred_peek_f1_S=
      caml_new_string
       (": <<stabilize (); assert ((Deferred.peek f1) = (S[...]>>"),
     cst_src_pipe_ml$49=caml_new_string("src/pipe.ml"),
     cst_after_transfer_finishes_the_upstream_pipe_can_be_GCed=
      caml_new_string
       (": after transfer finishes, the upstream pipe can be GCed"),
     cst_src_pipe_ml$50=caml_new_string("src/pipe.ml"),
     cst_assert_Result_is_error_Result_try_with_fun=
      caml_new_string
       (": <<assert (Result.is_error (Result.try_with (fun[...]>>"),
     cst_src_pipe_ml$51=caml_new_string("src/pipe.ml"),
     cst_don_t_wait_for_fold_r_init_f_fun=
      caml_new_string
       (": <<don't_wait_for   (fold r ~init:() ~f:(fun () [...]>>"),
     cst_src_pipe_ml$52=caml_new_string("src/pipe.ml"),
     cst_don_t_wait_for_fold_without_pushback_r_in=
      caml_new_string
       (": <<don't_wait_for   (fold_without_pushback r ~in[...]>>"),
     cst_src_pipe_ml$53=caml_new_string("src/pipe.ml"),
     cst_don_t_wait_for_iter_r_f_fun_incr_i=
      caml_new_string
       (": <<don't_wait_for (iter r ~f:(fun () -> incr i; [...]>>"),
     cst_src_pipe_ml$54=caml_new_string("src/pipe.ml"),
     cst_don_t_wait_for_iter_without_pushback_r_f_f=
      caml_new_string
       (": <<don't_wait_for (iter_without_pushback r ~f:(f[...]>>"),
     cst_src_pipe_ml$55=caml_new_string("src/pipe.ml"),
     cst_upon_transfer_r_w2_f_fun_close_read=
      caml_new_string
       (": <<upon (transfer r w2 ~f:(fun () -> close_read [...]>>"),
     cst_src_pipe_ml$56=caml_new_string("src/pipe.ml"),
     cst_stabilize_assert_Deferred_peek_res=
      caml_new_string
       (": <<stabilize (); assert ((Deferred.peek res) = ([...]>>"),
     cst_src_pipe_ml$57=caml_new_string("src/pipe.ml"),
     cst_stabilize_assert_Deferred_peek_res$0=
      caml_new_string
       (": <<stabilize (); assert ((Deferred.peek res) = ([...]>>"),
     cst_src_pipe_ml$58=caml_new_string("src/pipe.ml"),
     cst_stabilize_assert_Deferred_peek_res$1=
      caml_new_string
       (": <<stabilize (); assert ((Deferred.peek res) = ([...]>>"),
     cst_iter_without_pushback_got_non_positive_max_iterations_per_job=
      caml_new_string
       ("iter_without_pushback got non-positive max_iterations_per_job"),
     cst_read_exactly=caml_new_string("read_exactly"),
     cst_Pipe_read_exactly_got_num_values_0=
      caml_new_string("Pipe.read_exactly got num_values <= 0"),
     cst_Pipe_read_choice_single_consumer_exn_choice_was_enabled_but_pipe_is_empty_this_is_likely_due_to_a_race_condition_with_one_or_more_other_consumers=
      caml_new_string
       ("Pipe.read_choice_single_consumer_exn: choice was enabled but pipe is empty; this is likely due to a race condition with one or more other consumers"),
     cst_values_available=caml_new_string("values_available"),
     cst_read$0=caml_new_string("read"),
     cst_read=caml_new_string("read'"),
     cst_max_queue_length_0=caml_new_string("max_queue_length <= 0"),
     cst_read_now=caml_new_string("read_now"),
     cst_Attempt_to_use_consumer_with_wrong_pipe=
      caml_new_string("Attempt to use consumer with wrong pipe"),
     cst_write=caml_new_string("write"),
     cst_write_to_closed_pipe=caml_new_string("write to closed pipe"),
     cst_negative_size_budget=caml_new_string("negative size_budget"),
     cst_close_read=caml_new_string("close_read"),
     cst_close=caml_new_string("close"),
     cst_Pipe_invariant_failed=caml_new_string("Pipe.invariant failed"),
     cst_Pipe_Blocked_read_invariant_failed=
      caml_new_string("Pipe.Blocked_read.invariant failed"),
     cst_Pipe_Consumer_invariant_failed=
      caml_new_string("Pipe.Consumer.invariant failed"),
     cst_async_kernel$149=caml_new_string("async_kernel"),
     cst_src_pipe_ml=caml_new_string("src/pipe.ml"),
     cst$61=caml_new_string(""),
     cst_async_kernel$150=caml_new_string("async_kernel"),
     cst_downstream_flushed=caml_new_string("downstream_flushed"),
     cst_values_read=caml_new_string("values_read"),
     cst_pipe_id=caml_new_string("pipe_id"),
     cst_consumer=caml_new_string("consumer"),
     cst_wants=caml_new_string("wants"),
     cst_upstream_flusheds=caml_new_string("upstream_flusheds"),
     cst_consumers=caml_new_string("consumers"),
     cst_read_closed=caml_new_string("read_closed"),
     cst_closed=caml_new_string("closed"),
     cst_blocked_reads=caml_new_string("blocked_reads"),
     cst_blocked_flushes=caml_new_string("blocked_flushes"),
     cst_num_values_read=caml_new_string("num_values_read"),
     cst_pushback=caml_new_string("pushback"),
     cst_size_budget=caml_new_string("size_budget"),
     cst_buffer=caml_new_string("buffer"),
     cst_id$1=caml_new_string("id"),
     cst_src_pipe_ml$59=caml_new_string("src/pipe.ml"),
     cst$62=caml_new_string(""),
     cst_async_kernel$151=caml_new_string("async_kernel"),
     cst_async_kernel$152=caml_new_string("async_kernel"),
     cst_src_persistent_connection_intf_ml=
      caml_new_string("src/persistent_connection_intf.ml"),
     cst$63=caml_new_string(""),
     cst_async_kernel$153=caml_new_string("async_kernel"),
     cst_async_kernel$154=caml_new_string("async_kernel"),
     cst_async_kernel$155=caml_new_string("async_kernel"),
     cst_src_persistent_connection_ml=
      caml_new_string("src/persistent_connection.ml"),
     cst$64=caml_new_string(""),
     cst_async_kernel$156=caml_new_string("async_kernel"),
     cst_async_kernel$157=caml_new_string("async_kernel"),
     cst_Mvar_take_exn_called_on_empty_mvar=
      caml_new_string("Mvar.take_exn called on empty mvar"),
     cst_Mvar_peek_exn_called_on_empty_mvar=
      caml_new_string("Mvar.peek_exn called on empty mvar"),
     pos$36=caml_new_string("src/mvar.ml:22:23"),
     cst_async_kernel$158=caml_new_string("async_kernel"),
     cst_src_mvar_ml=caml_new_string("src/mvar.ml"),
     cst$65=caml_new_string(""),
     cst_async_kernel$159=caml_new_string("async_kernel"),
     cst_value_available=caml_new_string("value_available"),
     cst_taken=caml_new_string("taken"),
     cst_current_value=caml_new_string("current_value"),
     cst_async_kernel$160=caml_new_string("async_kernel"),
     cst_Limiter_killed=caml_new_string("Limiter killed"),
     cst_async_kernel$161=caml_new_string("async_kernel"),
     cst_src_limiter_ml=caml_new_string("src/limiter.ml"),
     cst$66=caml_new_string(""),
     cst_async_kernel$162=caml_new_string("async_kernel"),
     cst_async_kernel$163=caml_new_string("async_kernel"),
     cst_foo$13=caml_new_string("foo"),
     cst_foo$12=caml_new_string("foo"),
     cst_foo$11=caml_new_string("foo"),
     final$1=caml_new_string("foo"),
     final$0=caml_new_string("foo"),
     cst_src_lazy_deferred_ml$0=caml_new_string("src/lazy_deferred.ml"),
     cst_stabilize_let_consumer_wait_def_in_st=
      caml_new_string
       (": <<stabilize (); (let consumer = wait def in  st[...]>>"),
     cst_src_lazy_deferred_ml$1=caml_new_string("src/lazy_deferred.ml"),
     cst_stabilize_let_opt_peek_def_in_stabili=
      caml_new_string
       (": <<stabilize (); (let opt = peek def in  stabili[...]>>"),
     cst_src_lazy_deferred_ml$2=caml_new_string("src/lazy_deferred.ml"),
     cst_stabilize_let_consumer_force_def_in_s=
      caml_new_string
       (": <<stabilize (); (let consumer = force def in  s[...]>>"),
     cst_src_lazy_deferred_ml$3=caml_new_string("src/lazy_deferred.ml"),
     cst_stabilize_let_consumer_wait_def_in_st$0=
      caml_new_string
       (": <<stabilize (); (let consumer = wait def in  st[...]>>"),
     cst_src_lazy_deferred_ml$4=caml_new_string("src/lazy_deferred.ml"),
     cst_make_bind_test_make_final=
      caml_new_string(": <<make_bind_test make final>>"),
     cst_src_lazy_deferred_ml$5=caml_new_string("src/lazy_deferred.ml"),
     cst_make_bind_test_make_final$0=
      caml_new_string(": <<make_bind_test make final>>"),
     cst_E_for_test=caml_new_string("E_for_test"),
     cst_src_lazy_deferred_ml$6=caml_new_string("src/lazy_deferred.ml"),
     cst_stabilize_assert_not_is_determined_def=
      caml_new_string
       (": <<stabilize (); assert (not (is_determined def)[...]>>"),
     cst_src_lazy_deferred_ml$7=caml_new_string("src/lazy_deferred.ml"),
     cst_stabilize_assert_not_is_determined_def$0=
      caml_new_string
       (": <<stabilize (); assert (not (is_determined def)[...]>>"),
     cst_src_lazy_deferred_ml$8=caml_new_string("src/lazy_deferred.ml"),
     cst_stabilize_assert_not_is_determined_def$1=
      caml_new_string
       (": <<stabilize (); assert (not (is_determined def)[...]>>"),
     cst_src_lazy_deferred_ml$9=caml_new_string("src/lazy_deferred.ml"),
     cst_stabilize_assert_not_is_determined_def$2=
      caml_new_string
       (": <<stabilize (); assert (not (is_determined def)[...]>>"),
     cst_async_kernel$164=caml_new_string("async_kernel"),
     cst_src_lazy_deferred_ml=caml_new_string("src/lazy_deferred.ml"),
     cst$67=caml_new_string(""),
     cst_async_kernel$165=caml_new_string("async_kernel"),
     cst_src_lazy_deferred_ml$10=caml_new_string("src/lazy_deferred.ml"),
     cst$68=caml_new_string(""),
     cst_async_kernel$166=caml_new_string("async_kernel"),
     cst_async_kernel$167=caml_new_string("async_kernel"),
     cst_src_eager_deferred0_ml=caml_new_string("src/eager_deferred0.ml"),
     cst$69=caml_new_string(""),
     cst_async_kernel$168=caml_new_string("async_kernel"),
     cst_src_eager_deferred0_ml$0=caml_new_string("src/eager_deferred0.ml"),
     cst_Eager_deferred_list_tests=
      caml_new_string(": Eager_deferred_list_tests"),
     cst_async_kernel$169=caml_new_string("async_kernel"),
     cst_async_kernel$170=caml_new_string("async_kernel"),
     cst_src_eager_deferred_result_ml=
      caml_new_string("src/eager_deferred_result.ml"),
     cst$70=caml_new_string(""),
     cst_async_kernel$171=caml_new_string("async_kernel"),
     cst_async_kernel$172=caml_new_string("async_kernel"),
     cst_foo$25=caml_new_string("foo"),
     cst_monitor_ml_Error_foo$2=caml_new_string("(monitor.ml.Error foo"),
     cst_foo$24=caml_new_string("foo"),
     cst_monitor_ml_Error_foo$1=caml_new_string("(monitor.ml.Error foo"),
     cst_foo$22=caml_new_string("foo"),
     cst_foo$23=caml_new_string("foo"),
     cst_foo$20=caml_new_string("foo"),
     cst_foo$21=caml_new_string("foo"),
     cst_bar$1=caml_new_string("bar"),
     cst_foo$18=caml_new_string("foo"),
     cst_bar$2=caml_new_string("bar"),
     cst_foo$19=caml_new_string("foo"),
     cst_foo$17=caml_new_string("foo"),
     cst_foo$15=caml_new_string("foo"),
     cst_foo$16=caml_new_string("foo"),
     cst_error$0=caml_new_string("error"),
     cst$72=caml_new_string(""),
     cst_031425$0=caml_new_string("031425"),
     t$9=[0,0,[0,1,[0,2,[0,3,[0,4,0]]]]],
     t$8=[0,0,[0,1,[0,2,[0,3,[0,4,0]]]]],
     t$7=[0,0,[0,1,[0,2,[0,3,[0,4,0]]]]],
     init$6=caml_new_string(""),
     t$6=[0,0,[0,1,[0,2,0]]],
     cst_012$0=caml_new_string("012"),
     cst_src_eager_deferred_or_error_ml$0=
      caml_new_string("src/eager_deferred_or_error.ml"),
     cst_stabilize_assert_determined_def_123$0=
      caml_new_string(": <<stabilize (); assert (determined def 123)>>"),
     cst_src_eager_deferred_or_error_ml$1=
      caml_new_string("src/eager_deferred_or_error.ml"),
     cst_stabilize_assert_Deferred_peek_def_None$0=
      caml_new_string
       (": <<stabilize (); assert ((Deferred.peek def) = None)>>"),
     cst_src_eager_deferred_or_error_ml$2=
      caml_new_string("src/eager_deferred_or_error.ml"),
     cst_stabilize_assert_determined_def_012$0=
      caml_new_string(': <<stabilize (); assert (determined def "012")>>'),
     cst_src_eager_deferred_or_error_ml$3=
      caml_new_string("src/eager_deferred_or_error.ml"),
     cst_stabilize_assert_determined_def_0_1$0=
      caml_new_string
       (': <<stabilize (); assert (determined def ["0"; "1[...]>>'),
     cst_src_eager_deferred_or_error_ml$4=
      caml_new_string("src/eager_deferred_or_error.ml"),
     cst_stabilize_assert_determined_def_ass$0=
      caml_new_string
       (": <<stabilize (); assert (determined def ()); ass[...]>>"),
     cst_src_eager_deferred_or_error_ml$5=
      caml_new_string("src/eager_deferred_or_error.ml"),
     cst_stabilize_assert_determined_def_1_2_3$0=
      caml_new_string(": <<stabilize (); assert (determined def [1; 2; 3])>>"),
     cst_src_eager_deferred_or_error_ml$6=
      caml_new_string("src/eager_deferred_or_error.ml"),
     cst_stabilize_assert_determined_def_2_11_20$0=
      caml_new_string
       (": <<stabilize (); assert (determined def [2; 11; 20])>>"),
     cst_src_eager_deferred_or_error_ml$7=
      caml_new_string("src/eager_deferred_or_error.ml"),
     cst_stabilize_assert_determined_def_0_2_4$0=
      caml_new_string(": <<stabilize (); assert (determined def [0; 2; 4])>>"),
     cst_src_eager_deferred_or_error_ml$8=
      caml_new_string("src/eager_deferred_or_error.ml"),
     cst_stabilize_assert_determined_def_1_0$0=
      caml_new_string(": <<stabilize (); assert (determined def [1; 0])>>"),
     cst_src_eager_deferred_or_error_ml$9=
      caml_new_string("src/eager_deferred_or_error.ml"),
     cst_stabilize_assert_determined_def_1_3_5$0=
      caml_new_string(": <<stabilize (); assert (determined def [1; 3; 5])>>"),
     cst_src_eager_deferred_or_error_ml$10=
      caml_new_string("src/eager_deferred_or_error.ml"),
     cst_stabilize_assert_determined_def_3_1$0=
      caml_new_string
       (": <<stabilize (); assert (determined def [(3, 1);[...]>>"),
     cst_src_eager_deferred_or_error_ml$11=
      caml_new_string("src/eager_deferred_or_error.ml"),
     cst_stabilize_assert_determined_def_0_1_2$2=
      caml_new_string
       (": <<stabilize (); assert (determined def [0; 1; 2[...]>>"),
     cst_src_eager_deferred_or_error_ml$12=
      caml_new_string("src/eager_deferred_or_error.ml"),
     cst_stabilize_assert_determined_def_0_1_2$3=
      caml_new_string
       (": <<stabilize (); assert (determined def [0; 1; 2[...]>>"),
     cst_src_eager_deferred_or_error_ml$13=
      caml_new_string("src/eager_deferred_or_error.ml"),
     cst_stabilize_assert_determined_def_031425$0=
      caml_new_string(': <<stabilize (); assert (determined def "031425")>>'),
     cst_src_eager_deferred_or_error_ml$14=
      caml_new_string("src/eager_deferred_or_error.ml"),
     cst_stabilize_assert_determined_def_0_1_2$4=
      caml_new_string(": <<stabilize (); assert (determined def [0; 1; 2])>>"),
     cst_src_eager_deferred_or_error_ml$15=
      caml_new_string("src/eager_deferred_or_error.ml"),
     cst_stabilize_assert_determined_def_Some_3$1=
      caml_new_string(": <<stabilize (); assert (determined def (Some 3))>>"),
     cst_src_eager_deferred_or_error_ml$16=
      caml_new_string("src/eager_deferred_or_error.ml"),
     cst_stabilize_assert_determined_def_None$3=
      caml_new_string(": <<stabilize (); assert (determined def None)>>"),
     cst_src_eager_deferred_or_error_ml$17=
      caml_new_string("src/eager_deferred_or_error.ml"),
     cst_stabilize_assert_determined_def_Some_3$2=
      caml_new_string
       (": <<stabilize (); assert (determined def (Some (3[...]>>"),
     cst_src_eager_deferred_or_error_ml$18=
      caml_new_string("src/eager_deferred_or_error.ml"),
     cst_stabilize_assert_determined_def_None$4=
      caml_new_string(": <<stabilize (); assert (determined def None)>>"),
     cst_src_eager_deferred_or_error_ml$19=
      caml_new_string("src/eager_deferred_or_error.ml"),
     cst_stabilize_assert_determined_def_Some_4$0=
      caml_new_string(": <<stabilize (); assert (determined def (Some 4))>>"),
     cst_src_eager_deferred_or_error_ml$20=
      caml_new_string("src/eager_deferred_or_error.ml"),
     cst_stabilize_assert_determined_def_None$5=
      caml_new_string(": <<stabilize (); assert (determined def None)>>"),
     cst_src_eager_deferred_or_error_ml$21=
      caml_new_string("src/eager_deferred_or_error.ml"),
     cst_stabilize_assert_determined_def_Some_1$0=
      caml_new_string
       (": <<stabilize (); assert (determined def (Some (1[...]>>"),
     cst_src_eager_deferred_or_error_ml$22=
      caml_new_string("src/eager_deferred_or_error.ml"),
     cst_stabilize_assert_determined_def_None$6=
      caml_new_string(": <<stabilize (); assert (determined def None)>>"),
     cst_src_eager_deferred_or_error_ml$23=
      caml_new_string("src/eager_deferred_or_error.ml"),
     cst_stabilize_assert_determined_def_true$3=
      caml_new_string(": <<stabilize (); assert (determined def true)>>"),
     cst_src_eager_deferred_or_error_ml$24=
      caml_new_string("src/eager_deferred_or_error.ml"),
     cst_stabilize_assert_determined_def_false$3=
      caml_new_string(": <<stabilize (); assert (determined def false)>>"),
     cst_src_eager_deferred_or_error_ml$25=
      caml_new_string("src/eager_deferred_or_error.ml"),
     cst_stabilize_assert_determined_def_true$4=
      caml_new_string(": <<stabilize (); assert (determined def true)>>"),
     cst_src_eager_deferred_or_error_ml$26=
      caml_new_string("src/eager_deferred_or_error.ml"),
     cst_stabilize_assert_determined_def_false$4=
      caml_new_string(": <<stabilize (); assert (determined def false)>>"),
     cst_src_eager_deferred_or_error_ml$27=
      caml_new_string("src/eager_deferred_or_error.ml"),
     cst_stabilize_assert_determined_def_false$5=
      caml_new_string(": <<stabilize (); assert (determined def false)>>"),
     cst_src_eager_deferred_or_error_ml$28=
      caml_new_string("src/eager_deferred_or_error.ml"),
     cst_stabilize_assert_determined_def_true$5=
      caml_new_string(": <<stabilize (); assert (determined def true)>>"),
     cst_src_eager_deferred_or_error_ml$29=
      caml_new_string("src/eager_deferred_or_error.ml"),
     cst_stabilize_assert_determined_def_false$6=
      caml_new_string(": <<stabilize (); assert (determined def false)>>"),
     cst_src_eager_deferred_or_error_ml$30=
      caml_new_string("src/eager_deferred_or_error.ml"),
     cst_stabilize_assert_determined_def_true$6=
      caml_new_string(": <<stabilize (); assert (determined def true)>>"),
     cst_src_eager_deferred_or_error_ml$31=
      caml_new_string("src/eager_deferred_or_error.ml"),
     cst_stabilize_match_Deferred_peek_def_with$1=
      caml_new_string
       (": <<stabilize (); (match Deferred.peek def with |[...]>>"),
     cst_src_eager_deferred_or_error_ml$32=
      caml_new_string("src/eager_deferred_or_error.ml"),
     cst_stabilize_match_Deferred_peek_def_with$2=
      caml_new_string
       (": <<stabilize (); (match Deferred.peek def with |[...]>>"),
     cst_foo$14=caml_new_string("foo"),
     cst_src_eager_deferred_or_error_ml$33=
      caml_new_string("src/eager_deferred_or_error.ml"),
     cst_eq_fail_err_Error_err$0=
      caml_new_string(": <<eq (fail err) (Error err)>>"),
     cst_src_eager_deferred_or_error_ml$34=
      caml_new_string("src/eager_deferred_or_error.ml"),
     cst_assert_eq_ok_exn_return_1_1_assert$0=
      caml_new_string
       (": <<assert (eq' (ok_exn (return 1)) 1); assert   [...]>>"),
     cst_src_eager_deferred_or_error_ml$35=
      caml_new_string("src/eager_deferred_or_error.ml"),
     cst_eq_of_exn_Failure_foo_Or_error_of_exn$0=
      caml_new_string
       (': <<eq (of_exn (Failure "foo")) (Or_error.of_exn [...]>>'),
     cst_src_eager_deferred_or_error_ml$36=
      caml_new_string("src/eager_deferred_or_error.ml"),
     cst_assert_eq_of_exn_result_return_1_Ok_1$0=
      caml_new_string
       (": <<assert (eq (of_exn_result (return 1)) (Ok 1))[...]>>"),
     cst_src_eager_deferred_or_error_ml$37=
      caml_new_string("src/eager_deferred_or_error.ml"),
     cst_eq_error_foo_bar_String_sexp_of_t_Or$0=
      caml_new_string
       (': <<eq (error "foo" "bar" String.sexp_of_t)   (Or[...]>>'),
     cst_src_eager_deferred_or_error_ml$38=
      caml_new_string("src/eager_deferred_or_error.ml"),
     cst_eq_error_string_foo_Or_error_error_strin$0=
      caml_new_string
       (': <<eq (error_string "foo") (Or_error.error_strin[...]>>'),
     cst_src_eager_deferred_or_error_ml$39=
      caml_new_string("src/eager_deferred_or_error.ml"),
     cst_eq_unimplemented_foo_Or_error_unimplemen$0=
      caml_new_string
       (': <<eq (unimplemented "foo") (Or_error.unimplemen[...]>>'),
     cst_src_eager_deferred_or_error_ml$40=
      caml_new_string("src/eager_deferred_or_error.ml"),
     cst_check_combine_errors_Or_error_combine_errors$0=
      caml_new_string(": <<check combine_errors Or_error.combine_errors>>"),
     cst_src_eager_deferred_or_error_ml$41=
      caml_new_string("src/eager_deferred_or_error.ml"),
     cst_check_combine_errors_unit_Or_error_combine_er$0=
      caml_new_string
       (": <<check combine_errors_unit Or_error.combine_er[...]>>"),
     cst_src_eager_deferred_or_error_ml$42=
      caml_new_string("src/eager_deferred_or_error.ml"),
     cst_eq_ok_unit_Ok$0=caml_new_string(": <<eq ok_unit (Ok ())>>"),
     cst_src_eager_deferred_or_error_ml$43=
      caml_new_string("src/eager_deferred_or_error.ml"),
     cst_stabilize_Option_is_none_Deferred_peek_rv$0=
      caml_new_string(": <<stabilize (); Option.is_none (Deferred.peek rv)>>"),
     cst_src_eager_deferred_or_error_ml$44=
      caml_new_string("src/eager_deferred_or_error.ml"),
     cst_assert_eq_try_with_fun_Deferred_retu$0=
      caml_new_string
       (": <<assert (eq (try_with (fun () -> Deferred.retu[...]>>"),
     cst_src_eager_deferred_or_error_ml$45=
      caml_new_string("src/eager_deferred_or_error.ml"),
     cst_assert_eq_try_with_join_fun_return_1$0=
      caml_new_string
       (": <<assert (eq (try_with_join (fun () -> return 1[...]>>"),
     cst_async_kernel$173=caml_new_string("async_kernel"),
     cst_src_eager_deferred_or_error_ml=
      caml_new_string("src/eager_deferred_or_error.ml"),
     cst$71=caml_new_string(""),
     cst_async_kernel$174=caml_new_string("async_kernel"),
     cst_src_eager_deferred_or_error_ml$46=
      caml_new_string("src/eager_deferred_or_error.ml"),
     cst$73=caml_new_string(""),
     cst_async_kernel$175=caml_new_string("async_kernel"),
     cst_async_kernel$176=caml_new_string("async_kernel"),
     cst_src_eager_deferred_ml=caml_new_string("src/eager_deferred.ml"),
     cst$74=caml_new_string(""),
     cst_async_kernel$177=caml_new_string("async_kernel"),
     cst_async_kernel$178=caml_new_string("async_kernel"),
     pos$37=caml_new_string("src/deferred_unit_tests.ml:37:25"),
     cst_unit_test_didn_t_finish=caml_new_string("unit test didn't finish"),
     cst_src_deferred_unit_tests_ml$0=
      caml_new_string("src/deferred_unit_tests.ml"),
     cst_test_fun_map_let_f_e=
      caml_new_string
       (": <<test   (fun () ->      [%map        let f = e[...]>>"),
     cst_src_deferred_unit_tests_ml$1=
      caml_new_string("src/deferred_unit_tests.ml"),
     cst_test_fun_let_t1_Ivar_create=
      caml_new_string
       (": <<test   (fun () ->      let t1 = Ivar.create ([...]>>"),
     cst_async_kernel$179=caml_new_string("async_kernel"),
     cst_src_deferred_unit_tests_ml=
      caml_new_string("src/deferred_unit_tests.ml"),
     cst$75=caml_new_string(""),
     cst_async_kernel$180=caml_new_string("async_kernel"),
     cst_src_deferred_unit_tests_ml$2=
      caml_new_string("src/deferred_unit_tests.ml"),
     cst$76=caml_new_string(""),
     cst_async_kernel$181=caml_new_string("async_kernel"),
     pos$49=caml_new_string("src/deferred_sequence_unit_tests.ml:212:19"),
     pos$48=caml_new_string("src/deferred_sequence_unit_tests.ml:210:19"),
     pos$47=caml_new_string("src/deferred_sequence_unit_tests.ml:207:19"),
     pos$46=caml_new_string("src/deferred_sequence_unit_tests.ml:204:19"),
     pos$45=caml_new_string("src/deferred_sequence_unit_tests.ml:201:19"),
     pos$44=caml_new_string("src/deferred_sequence_unit_tests.ml:198:19"),
     pos$43=caml_new_string("src/deferred_sequence_unit_tests.ml:195:19"),
     pos$42=caml_new_string("src/deferred_sequence_unit_tests.ml:192:19"),
     pos$41=caml_new_string("src/deferred_sequence_unit_tests.ml:190:19"),
     pos$40=caml_new_string("src/deferred_sequence_unit_tests.ml:188:19"),
     pos$39=caml_new_string("src/deferred_sequence_unit_tests.ml:186:19"),
     pos$38=caml_new_string("src/deferred_sequence_unit_tests.ml:184:19"),
     cst_async_kernel$182=caml_new_string("async_kernel"),
     cst_src_deferred_sequence_unit_tests_ml=
      caml_new_string("src/deferred_sequence_unit_tests.ml"),
     cst$77=caml_new_string(""),
     cst_async_kernel$183=caml_new_string("async_kernel"),
     cst_src_deferred_sequence_unit_tests_ml$0=
      caml_new_string("src/deferred_sequence_unit_tests.ml"),
     cst_assert_Sequence_fold_numbers_init_f_de=
      caml_new_string
       (": <<assert ((Sequence.fold numbers ~init ~f) = de[...]>>"),
     cst_src_deferred_sequence_unit_tests_ml$1=
      caml_new_string("src/deferred_sequence_unit_tests.ml"),
     cst_assert_Sequence_foldi_numbers_init_f_d=
      caml_new_string
       (": <<assert ((Sequence.foldi numbers ~init ~f) = d[...]>>"),
     cst_src_deferred_sequence_unit_tests_ml$2=
      caml_new_string("src/deferred_sequence_unit_tests.ml"),
     cst_assert_sequences_equal_Sequence_filter_numbe=
      caml_new_string
       (": <<assert_sequences_equal (Sequence.filter numbe[...]>>"),
     cst_src_deferred_sequence_unit_tests_ml$3=
      caml_new_string("src/deferred_sequence_unit_tests.ml"),
     cst_assert_sequences_equal_Sequence_filteri_numb=
      caml_new_string
       (": <<assert_sequences_equal (Sequence.filteri numb[...]>>"),
     cst_src_deferred_sequence_unit_tests_ml$4=
      caml_new_string("src/deferred_sequence_unit_tests.ml"),
     cst_assert_sequences_equal_Sequence_filter_map_n=
      caml_new_string
       (": <<assert_sequences_equal (Sequence.filter_map n[...]>>"),
     cst_src_deferred_sequence_unit_tests_ml$5=
      caml_new_string("src/deferred_sequence_unit_tests.ml"),
     cst_assert_sequences_equal_Sequence_filter_mapi=
      caml_new_string
       (": <<assert_sequences_equal (Sequence.filter_mapi [...]>>"),
     cst_src_deferred_sequence_unit_tests_ml$6=
      caml_new_string("src/deferred_sequence_unit_tests.ml"),
     cst_assert_sequences_equal_Sequence_concat_map_n=
      caml_new_string
       (": <<assert_sequences_equal (Sequence.concat_map n[...]>>"),
     cst_src_deferred_sequence_unit_tests_ml$7=
      caml_new_string("src/deferred_sequence_unit_tests.ml"),
     cst_assert_sequences_equal_Sequence_concat_mapi=
      caml_new_string
       (": <<assert_sequences_equal (Sequence.concat_mapi [...]>>"),
     cst_src_deferred_sequence_unit_tests_ml$8=
      caml_new_string("src/deferred_sequence_unit_tests.ml"),
     cst_assert_sequences_equal_Sequence_map_numbers=
      caml_new_string
       (": <<assert_sequences_equal (Sequence.map numbers [...]>>"),
     cst_src_deferred_sequence_unit_tests_ml$9=
      caml_new_string("src/deferred_sequence_unit_tests.ml"),
     cst_assert_sequences_equal_Sequence_mapi_numbers=
      caml_new_string
       (": <<assert_sequences_equal (Sequence.mapi numbers[...]>>"),
     cst_src_deferred_sequence_unit_tests_ml$10=
      caml_new_string("src/deferred_sequence_unit_tests.ml"),
     cst_deferred_result_Deferred_Sequence_iter_num=
      caml_new_string
       (": <<deferred_result   (Deferred.Sequence.iter num[...]>>"),
     cst_src_deferred_sequence_unit_tests_ml$11=
      caml_new_string("src/deferred_sequence_unit_tests.ml"),
     cst_deferred_result_Deferred_Sequence_iteri_nu=
      caml_new_string
       (": <<deferred_result   (Deferred.Sequence.iteri nu[...]>>"),
     cst_src_deferred_sequence_unit_tests_ml$12=
      caml_new_string("src/deferred_sequence_unit_tests.ml"),
     cst_for_n_0_to_5_do_test_result_int_Seque=
      caml_new_string
       (": <<for n = 0 to 5 do   ([%test_result :int Seque[...]>>"),
     cst_async_kernel$184=caml_new_string("async_kernel"),
     cst_async_kernel$185=caml_new_string("async_kernel"),
     cst_src_async_quickcheck_intf_ml=
      caml_new_string("src/async_quickcheck_intf.ml"),
     cst$78=caml_new_string(""),
     cst_async_kernel$186=caml_new_string("async_kernel"),
     cst_async_kernel$187=caml_new_string("async_kernel"),
     cst_random_input=caml_new_string("random input"),
     cst_async_kernel$188=caml_new_string("async_kernel"),
     cst_src_async_quickcheck_ml=caml_new_string("src/async_quickcheck.ml"),
     cst$79=caml_new_string(""),
     cst_async_kernel$189=caml_new_string("async_kernel"),
     cst_async_kernel$190=caml_new_string("async_kernel"),
     cst_foo$26=caml_new_string("foo"),
     cst_foo$27=caml_new_string("foo"),
     cst_src_async_condition_ml$0=caml_new_string("src/async_condition.ml"),
     cst_assert_not_Deferred_is_determined_consumer=
      caml_new_string
       (": <<assert (not (Deferred.is_determined consumer)[...]>>"),
     cst_src_async_condition_ml$1=caml_new_string("src/async_condition.ml"),
     cst_signal_cond_let_consumer_wait_cond_in=
      caml_new_string
       (": <<signal cond (); (let consumer = wait cond in [...]>>"),
     cst_src_async_condition_ml$2=caml_new_string("src/async_condition.ml"),
     cst_stabilize_Array_iter_consumers_f_fun=
      caml_new_string
       (": <<stabilize (); Array.iter consumers   ~f:(fun [...]>>"),
     cst_src_async_condition_ml$3=caml_new_string("src/async_condition.ml"),
     cst_stabilize_Array_iter_consumers_f_fun$0=
      caml_new_string
       (": <<stabilize (); Array.iter consumers   ~f:(fun [...]>>"),
     cst_src_async_condition_ml$4=caml_new_string("src/async_condition.ml"),
     cst_stabilize_Array_iter_consumers_f_fun$1=
      caml_new_string
       (": <<stabilize (); Array.iter consumers   ~f:(fun [...]>>"),
     cst_async_kernel$191=caml_new_string("async_kernel"),
     cst_src_async_condition_ml=caml_new_string("src/async_condition.ml"),
     cst$80=caml_new_string(""),
     cst_async_kernel$192=caml_new_string("async_kernel"),
     cst_src_async_condition_ml$5=caml_new_string("src/async_condition.ml"),
     cst$81=caml_new_string(""),
     cst_async_kernel$193=caml_new_string("async_kernel"),
     cst_src_async_gc_ml$0=caml_new_string("src/async_gc.ml"),
     cst_add_finalizer_exn_x_fun_z_r_z_sta=
      caml_new_string
       (": <<add_finalizer_exn x (fun z -> r := (!z)); sta[...]>>"),
     cst_src_async_gc_ml$1=caml_new_string("src/async_gc.ml"),
     cst_stabilize_assert_r_r_false_stabil=
      caml_new_string
       (": <<stabilize (); assert (!r); r := false; stabil[...]>>"),
     cst_async_kernel$194=caml_new_string("async_kernel"),
     cst_src_async_gc_ml=caml_new_string("src/async_gc.ml"),
     cst$82=caml_new_string(""),
     cst_async_kernel$195=caml_new_string("async_kernel"),
     cst_src_async_gc_ml$2=caml_new_string("src/async_gc.ml"),
     cst$83=caml_new_string(""),
     cst_async_kernel$196=caml_new_string("async_kernel"),
     cst_async_kernel$197=caml_new_string("async_kernel"),
     cst_src_async_invariant_intf_ml=
      caml_new_string("src/async_invariant_intf.ml"),
     cst$84=caml_new_string(""),
     cst_async_kernel$198=caml_new_string("async_kernel"),
     cst_async_kernel$199=caml_new_string("async_kernel"),
     cst_problem_with_field=caml_new_string("problem with field"),
     cst_invariant_failed=caml_new_string("invariant failed"),
     cst_async_kernel$200=caml_new_string("async_kernel"),
     cst_src_async_invariant_ml=caml_new_string("src/async_invariant.ml"),
     cst$85=caml_new_string(""),
     cst_async_kernel$201=caml_new_string("async_kernel"),
     cst_async_kernel$202=caml_new_string("async_kernel"),
     pos$50=caml_new_string("src/async_kernel.ml:113:17"),
     cst_async_kernel$203=caml_new_string("async_kernel"),
     cst_src_async_kernel_ml=caml_new_string("src/async_kernel.ml"),
     cst$86=caml_new_string(""),
     cst_async_kernel$204=caml_new_string("async_kernel"),
     cst_src_async_kernel_ml$0=caml_new_string("src/async_kernel.ml"),
     cst_return_does_not_allocate=
      caml_new_string(": [return ()] does not allocate"),
     cst_async_kernel$205=caml_new_string("async_kernel"),
     include=global_data.Core_kernel__Time_ns_alternate_sexp,
     Ppx_bench_lib_Benchmark_accumulator=
      global_data.Ppx_bench_lib__Benchmark_accumulator,
     Expect_test_collector=global_data.Expect_test_collector,
     Ppx_inline_test_lib_Runtime=global_data.Ppx_inline_test_lib__Runtime,
     include$1=global_data.Core_kernel__Timing_wheel_ns,
     Base_Field=global_data.Base__Field,
     Core_kernel_Option=global_data.Core_kernel__Option,
     Core_kernel_List=global_data.Core_kernel__List,
     Core_kernel_Sexp=global_data.Core_kernel__Sexp,
     Core_kernel=global_data.Core_kernel,
     Core_kernel_String=global_data.Core_kernel__String,
     Core_kernel_Int=global_data.Core_kernel__Int,
     Sexplib0_Sexp_conv=global_data.Sexplib0__Sexp_conv,
     Sexplib0_Sexp_conv_error=global_data.Sexplib0__Sexp_conv_error,
     Ppx_compare_lib=global_data.Ppx_compare_lib,
     Core_kernel_Validated=global_data.Core_kernel__Validated,
     Core_kernel_Sexpable=global_data.Core_kernel__Sexpable,
     Base_Word_size=global_data.Base__Word_size,
     Core_kernel_Result=global_data.Core_kernel__Result,
     Core_kernel_Error=global_data.Core_kernel__Error,
     Core_kernel_Debug=global_data.Core_kernel__Debug,
     CamlinternalMod=global_data.CamlinternalMod,
     Core_kernel_Info=global_data.Core_kernel__Info,
     Core_kernel_Bag=global_data.Core_kernel__Bag,
     Core_kernel_Source_code_position=
      global_data.Core_kernel__Source_code_position,
     Base_Backtrace=global_data.Base__Backtrace,
     Core_kernel_Univ_map=global_data.Core_kernel__Univ_map,
     Core_kernel_Pool=global_data.Core_kernel__Pool,
     Stdlib_obj=global_data.Stdlib__obj,
     Base_Obj_array=global_data.Base__Obj_array,
     Core_kernel_Thread_safe_queue=global_data.Core_kernel__Thread_safe_queue,
     Assert_failure=global_data.Assert_failure,
     include$11=global_data.Base__Invariant,
     Ppx_assert_lib_Runtime=global_data.Ppx_assert_lib__Runtime,
     Base_Exn=global_data.Base__Exn,
     Core_kernel_Deque=global_data.Core_kernel__Deque,
     Inline_test_config=global_data.Inline_test_config,
     Core_kernel_Binable=global_data.Core_kernel__Binable,
     Base_Monad=global_data.Base__Monad,
     Core_kernel_Or_error=global_data.Core_kernel__Or_error,
     Sexplib_Conv=global_data.Sexplib__Conv,
     Core_kernel_Stack=global_data.Core_kernel__Stack,
     Core_kernel_Queue=global_data.Core_kernel__Queue,
     Core_kernel_Array=global_data.Core_kernel__Array,
     Core_kernel_Map=global_data.Core_kernel__Map,
     Base_Heap_block=global_data.Base__Heap_block,
     Stdlib_gc=global_data.Stdlib__gc,
     Invalid_argument=global_data.Invalid_argument,
     include$26=global_data.Core_kernel__Gc,
     Core_kernel_Unit=global_data.Core_kernel__Unit,
     Core_kernel_Memo=global_data.Core_kernel__Memo,
     Failure=global_data.Failure,
     Caml=global_data.Caml,
     Base_Applicative=global_data.Base__Applicative,
     Core_kernel_Sequence=global_data.Core_kernel__Sequence,
     Base_Random=global_data.Base__Random,
     Core_kernel_Heap=global_data.Core_kernel__Heap,
     Core_kernel_Hashtbl=global_data.Core_kernel__Hashtbl,
     Core_kernel_Time_ns=global_data.Core_kernel__Time_ns,
     Core_kernel_Moption=global_data.Core_kernel__Moption,
     Core_kernel_Limiter=global_data.Core_kernel__Limiter,
     Core_kernel_Quickcheck=global_data.Core_kernel__Quickcheck,
     Async_kernel=
      [0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0];
    caml_register_global(2593,Async_kernel,"Async_kernel__");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_async_kernel);
    caml_call1(Expect_test_collector[4][1],cst_src_time_ns_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$0,cst);
    var
     _a_=include[1],
     _b_=include[2],
     _c_=include[3],
     _d_=include[4],
     _e_=include[5],
     _f_=include[6],
     _g_=include[7],
     _h_=include[8],
     _i_=include[9],
     _j_=include[10],
     _k_=include[11],
     _l_=include[12],
     _m_=include[13],
     _n_=include[14],
     _o_=include[15],
     _p_=include[16],
     _q_=include[17],
     _r_=include[18],
     _s_=include[19],
     _t_=include[20],
     _u_=include[21],
     _v_=include[22],
     _w_=include[23],
     _x_=include[24],
     _y_=include[25],
     _z_=include[26],
     _A_=include[27],
     _B_=include[28],
     _C_=include[29],
     _D_=include[30],
     _E_=include[31],
     _F_=include[32],
     _G_=include[33],
     _H_=include[34],
     _I_=include[35],
     _J_=include[36],
     _K_=include[37],
     _L_=include[38],
     _M_=include[39],
     _N_=include[40],
     _O_=include[41],
     _P_=include[42],
     _Q_=include[43],
     _R_=include[44],
     _cm_=[0,caml_new_string("<no task id>")],
     _ch_=[0,[2,0,[10,0]],caml_new_string("%s%!")],
     _b__=[0,caml_new_string(" [ulimit -n -H]"),0],
     _b5_=[0,caml_new_string("\n"),0],
     _b1_=
      [0,
       caml_new_string
        ("\n  This is used to adjust the time/space tradeoff in the timing wheel\n  used to implement Async's clock.  Time is split into intervals of\n  size [alarm_precision], and alarms with times in the same interval\n  fire in the same cycle.  Level [i] in the timing wheel has an\n  array of size [2^b], where [b] is the [i]'th entry in [level_bits].\n"),
       0],
     _b2_=
      [0,
       caml_new_string
        ("\n  By default, Async will print a message to stderr every second if\n  the thread pool is stuck for longer than this.\n"),
       0],
     _b3_=
      [0,
       caml_new_string
        ("\n  If true, this will cause Async to keep in the execution context the\n  history of stack backtraces (obtained via [Backtrace.get]) that led\n  to the current job.  If an Async job has an unhandled exception,\n  this backtrace history will be recorded in the exception.  In\n  particular the history will appear in an unhandled exception that\n  reaches the main monitor.  This can have a substantial performance\n  impact, both in running time and space usage.\n"),
       0],
     _b4_=
      [0,
       caml_new_string
        ("\n  Turning on debug messages will substantially slow down most programs.\n"),
       0],
     _b6_=
      [0,
       caml_new_string
        ("\n  The minimum timeout the scheduler will pass to the OS when it checks\n  for I/O between cycles.  This is zero by default.  Setting it to a\n  nonzero value is used to increase thread fairness between the scheduler\n  and other threads.  A plausible setting is 1us.  This is also\n  configurable in OCaml via [Scheduler.set_min_inter_cycle_timeout].\n"),
       0],
     _b7_=
      [0,
       caml_new_string
        ("\n  The maximum number of jobs that will be done at each priority within\n  each Async cycle.  This limits how many jobs the scheduler will run\n  before pausing to check for I/O.\n"),
       0],
     _b8_=
      [0,
       caml_new_string
        ("\n  The maximum number of threads that Async will create to do blocking\n  system calls and handle calls to [In_thread.run].\n"),
       0],
     _b9_=
      [0,
       caml_new_string
        ("\n  The maximum number of open file descriptors allowed at any one time."),
       0],
     _b$_=
      [0,
       caml_new_string
        ("\n  The maximum amount of time the scheduler will pause between cycles\n  when it has no jobs and is going to wait for I/O.  In principle one\n  doesn't need this, and we could use an infinite timeout.  We instead\n  use a small timeout (by default), to be more robust to bugs that\n  could prevent Async from waking up and servicing events.  For\n  example, as of 2013-01, the OCaml runtime has a bug that causes it\n  to not necessarily run an OCaml signal handler in a timely manner.\n  This in turn can cause a simple Async program that is waiting on a\n  signal to hang, when in fact it should handle the signal.\n\n  We use 50ms as the default timeout, because it is infrequent enough\n  to have a negligible performance impact, and frequent enough that\n  the latency would typically be not noticeable.  Also, 50ms is what\n  the OCaml ticker thread uses.\n"),
       0],
     _ca_=[0,caml_new_string(".\n"),0],
     _cb_=[0,caml_new_string(", ")],
     _cc_=
      [0,
       caml_new_string
        ("\n  The maximum number of ready events that Async's call to [Epoll.wait]\n  will handle.\n"),
       0],
     _cd_=
      [0,
       caml_new_string
        ("\n  Can be set to [Do_not_watch] or:\n\n    (Watch ((dump_if_delayed_by SPAN) (how_to_dump HOW)))\n\n  If set to [Watch], then on program start this will start a regular\n  Async job that increments a counter, and a C thread that will\n  detect if that job is delayed by [dump_if_delayed_by], and if so,\n  will core dump the program.  If available, [/usr/bin/gcore] is\n  used by default to dump the core, which should allow the program\n  to continue running.  Otherwise, [abort] will be called from C,\n  which will kill the program while causing a core dump.  One can\n  force [abort] or [gcore] via [how_to_dump], which should be one of:\n  [Call_abort], [Call_gcore], or [Default].\n"),
       0],
     _ce_=
      [0,
       caml_new_string
        ("\n  If true, causes Async routines to check if they are being accessed\n  from some thread other than the thread currently holding the Async\n  lock, which is not allowed and can lead to very confusing behavior.\n"),
       0],
     _cf_=
      [0,
       caml_new_string
        ("\n  If true, causes Async to regularly check invariants of its internal\n  data structures.  This can substantially slow down your program.\n"),
       0],
     _cg_=
      [0,
       caml_new_string
        ("\n  By default, Async will send an exception to the toplevel monitor\n  if it detects that the thread pool is stuck for longer than this.\n"),
       0],
     _bx_=[0,caml_new_string("timing_wheel_config")],
     _by_=[0,caml_new_string("report_thread_pool_stuck_for")],
     _bz_=[0,caml_new_string("record_backtraces")],
     _bA_=[0,caml_new_string("print_debug_messages_for")],
     _bB_=[0,caml_new_string("min_inter_cycle_timeout")],
     _bC_=[0,caml_new_string("max_num_jobs_per_priority_per_cycle")],
     _bD_=[0,caml_new_string("max_num_threads")],
     _bE_=[0,caml_new_string("max_num_open_file_descrs")],
     _bF_=[0,caml_new_string("max_inter_cycle_timeout")],
     _bG_=[0,caml_new_string("file_descr_watcher")],
     _bH_=[0,caml_new_string("epoll_max_ready_events")],
     _bI_=[0,caml_new_string("dump_core_on_job_delay")],
     _bJ_=[0,caml_new_string("detect_invalid_access_from_thread")],
     _bK_=[0,caml_new_string("check_invariants")],
     _bL_=[0,caml_new_string("abort_after_thread_pool_stuck_for")],
     _a2_=[0,caml_new_string("Epoll_if_timerfd")],
     _a3_=[0,caml_new_string("Epoll")],
     _a4_=[0,caml_new_string("Select")],
     _aN_=[0,caml_new_string("All")],
     _aO_=[0,caml_new_string("Clock")],
     _aP_=[0,caml_new_string("Fd")],
     _aQ_=[0,caml_new_string("File_descr_watcher")],
     _aR_=[0,caml_new_string("Finalizers")],
     _aS_=[0,caml_new_string("Interruptor")],
     _aT_=[0,caml_new_string("Monitor")],
     _aU_=[0,caml_new_string("Monitor_send_exn")],
     _aV_=[0,caml_new_string("Parallel")],
     _aW_=[0,caml_new_string("Reader")],
     _aX_=[0,caml_new_string("Scheduler")],
     _aY_=[0,caml_new_string("Shutdown")],
     _aZ_=[0,caml_new_string("Thread_pool")],
     _a0_=[0,caml_new_string("Thread_safe")],
     _a1_=[0,caml_new_string("Writer")],
     _aL_=[0,caml_new_string("Watch")],
     _aM_=[0,caml_new_string("Do_not_watch")],
     _aJ_=[0,caml_new_string("how_to_dump")],
     _aK_=[0,caml_new_string("dump_if_delayed_by")],
     _aG_=[0,caml_new_string("Default")],
     _aH_=[0,caml_new_string("Call_abort")],
     _aI_=[0,caml_new_string("Call_gcore")],
     _bN_=[0,0],
     _bO_=[0,0],
     _bV_=[0,0],
     _bX_=[0,0],
     _bY_=[0,0],
     _bZ_=[0,0],
     _b0_=[0,[0,2,[0,10,0]]],
     _zF_=
      [0,
       [11,
        caml_new_string("invalid value for "),
        [2,0,[11,caml_new_string(" environment variable"),0]]],
       caml_new_string("invalid value for %s environment variable")],
     _zK_=[0,[2,0,[11,caml_new_string("\n\n"),0]],caml_new_string("%s\n\n")],
     _cB_=[0,[2,0,[12,10,[10,0]]],caml_new_string("%s\n%!")],
     _cC_=[0,[2,0,[12,10,[10,0]]],caml_new_string("%s\n%!")],
     _cE_=[0,caml_new_string("Low")],
     _cD_=[0,caml_new_string("Normal")],
     _cF_=[0,[0,0,0]],
     _cG_=[0,caml_new_string("src/types.ml"),25,6],
     _cH_=[0,[0]],
     _cI_=[0,caml_new_string("src/types.ml"),53,6],
     _cJ_=[0,[0]],
     _cK_=[0,caml_new_string("src/types.ml"),57,6],
     _cL_=[0,[0,[0,[0]]]],
     _cM_=[0,caml_new_string("src/types.ml"),77,6],
     _cN_=[0,[0]],
     _cO_=[0,caml_new_string("src/types.ml"),85,6],
     _cP_=[0,[0]],
     _cQ_=[0,caml_new_string("src/types.ml"),89,6],
     _cR_=[0,[0]],
     _cS_=[0,caml_new_string("src/types.ml"),97,6],
     _cT_=[0,[0,[0,[0]]]],
     _cU_=[0,caml_new_string("src/types.ml"),106,6],
     _cV_=[0,[0]],
     _cW_=[0,caml_new_string("src/types.ml"),111,6],
     _cX_=[0,[0]],
     _cY_=[0,caml_new_string("src/types.ml"),115,6],
     _cZ_=[0,[0]],
     _c0_=[0,caml_new_string("src/types.ml"),119,6],
     _c1_=[0,[0]],
     _c2_=[0,caml_new_string("src/types.ml"),129,6],
     _c3_=[0,[0]],
     _c4_=[0,caml_new_string("src/types.ml"),137,6],
     _c5_=[0,[0]],
     _c6_=[0,caml_new_string("src/types.ml"),150,6],
     _c7_=[0,[0]],
     _c8_=[0,caml_new_string("src/types.ml"),179,6],
     _c9_=[0,[0]],
     _c__=[0,caml_new_string("src/types.ml"),184,6],
     _c$_=[0,[0]],
     _da_=[0,caml_new_string("src/types.ml"),189,6],
     _db_=[0,[0]],
     _dc_=[0,caml_new_string("src/types.ml"),200,6],
     _dd_=[0,[0,[0,[0]]]],
     _de_=[0,caml_new_string("src/types.ml"),212,6],
     _df_=[0,[0,0,0]],
     _dg_=[0,[0]],
     _dh_=[0,[0]],
     _di_=[0,[0,[0,[0]]]],
     _dj_=[0,[0]],
     _dk_=[0,[0]],
     _dl_=[0,[0]],
     _dm_=[0,[0,[0,[0]]]],
     _dn_=[0,[0]],
     _do_=[0,[0]],
     _dp_=[0,[0]],
     _dq_=[0,[0]],
     _dr_=[0,[0]],
     _ds_=[0,[0]],
     _dt_=[0,[0]],
     _du_=[0,[0]],
     _dv_=[0,[0]],
     _dw_=[0,[0]],
     _dx_=[0,[0,[0,[0]]]],
     _dQ_=[0,caml_new_string("is_detached")],
     _dR_=[0,caml_new_string("has_seen_error")],
     _dS_=[0,caml_new_string("id")],
     _dT_=[0,caml_new_string("here")],
     _dU_=[0,caml_new_string("name")],
     _dV_=[0,caml_new_string("main")],
     _d4_=[0,caml_new_string("backtrace_history")],
     _d5_=[0,caml_new_string("local_storage")],
     _d6_=[0,caml_new_string("priority")],
     _d7_=[0,caml_new_string("monitor")],
     _d8_=[0,caml_new_string("<job>")],
     _d9_=[0,0],
     _d__=[0,1],
     _eA_=[0,caml_new_string("t")],
     _eB_=[0,caml_new_string("n")],
     _ey_=[0,caml_new_string("src/job_queue.ml"),41,8],
     _ex_=[0,caml_new_string("src/job_queue.ml"),43,8],
     _ew_=[0,caml_new_string("src/job_queue.ml"),51,8],
     _ev_=[0,caml_new_string("src/job_queue.ml"),52,8],
     _eu_=[0,caml_new_string("src/job_queue.ml"),54,8],
     _et_=[0,caml_new_string("src/job_queue.ml"),55,8],
     _es_=[0,caml_new_string("src/job_queue.ml"),57,8],
     _er_=[0,caml_new_string("src/job_queue.ml"),58,8],
     _ez_=[0,caml_new_string("src/job_queue.ml"),37,1236,1258],
     _el_=[0,caml_new_string("length")],
     _em_=[0,caml_new_string("front")],
     _en_=[0,caml_new_string("mask")],
     _eo_=[0,caml_new_string("jobs")],
     _ep_=[0,caml_new_string("jobs_left_this_cycle")],
     _eq_=[0,caml_new_string("num_jobs_run")],
     _fD_=[0,0],
     _fC_=[0,caml_new_string("src/synchronous_time_source0.ml"),370,42],
     _fB_=[0,caml_new_string("reason")],
     _fx_=[0,caml_new_string("Ok")],
     _fy_=[0,caml_new_string("Currently_happening")],
     _fz_=[0,caml_new_string("Previously_aborted")],
     _fA_=[0,caml_new_string("Previously_happened")],
     _fv_=[0,caml_new_string("alarm_precision")],
     _fw_=[0,caml_new_string("span")],
     _fu_=[0,caml_new_string("src/synchronous_time_source0.ml"),252,47],
     _fs_=[0,caml_new_string("_")],
     _fr_=[0,caml_new_string("src/synchronous_time_source0.ml"),214,14],
     _fq_=[0,caml_new_string("src/synchronous_time_source0.ml"),220,12],
     _fp_=[0,caml_new_string("src/synchronous_time_source0.ml"),222,39],
     _ft_=[0,caml_new_string("src/synchronous_time_source0.ml"),200,6920,6944],
     _fm_=[0,caml_new_string("now")],
     _fn_=[0,caml_new_string("events")],
     _fo_=[0,caml_new_string("now")],
     _e7_=[0,caml_new_string("event")],
     _e8_=[0,caml_new_string("to_")],
     _e9_=[0,caml_new_string("from")],
     _e6_=[0,caml_new_string("src/synchronous_time_source0.ml"),111,3769,3795],
     _e3_=[0,caml_new_string("interval")],
     _e4_=[0,caml_new_string("at")],
     _e5_=[0,caml_new_string("status")],
     _e1_=[0,caml_new_string("src/synchronous_time_source0.ml"),86,39],
     _eF_=[0,caml_new_string("Aborted")],
     _eG_=[0,caml_new_string("Fired")],
     _eH_=[0,caml_new_string("Happening")],
     _eI_=[0,caml_new_string("Happened")],
     _eJ_=[0,caml_new_string("Scheduled")],
     _eD_=[0,13,[0,6,[0,6,[0,5,0]]]],
     _g4_=[0,0],
     _g2_=[0,caml_new_string("src/scheduler1.ml"),158,37],
     _g1_=[0,caml_new_string("src/scheduler1.ml"),159,46],
     _g0_=[0,caml_new_string("src/scheduler1.ml"),164,8],
     _gY_=[0,caml_new_string("t")],
     _gZ_=[0,caml_new_string("exn")],
     _gz_=[0,caml_new_string("on_end_of_cycle")],
     _gA_=[0,caml_new_string("on_start_of_cycle")],
     _gB_=[0,caml_new_string("record_backtraces")],
     _gC_=[0,caml_new_string("max_num_jobs_per_priority_per_cycle")],
     _gD_=[0,caml_new_string("check_invariants")],
     _gE_=[0,caml_new_string("yield_until_no_jobs_remain")],
     _gF_=[0,caml_new_string("yield")],
     _gG_=[0,caml_new_string("event_added_hook")],
     _gH_=[0,caml_new_string("job_queued_hook")],
     _gI_=[0,caml_new_string("thread_safe_external_job_hook")],
     _gJ_=[0,caml_new_string("external_jobs")],
     _gK_=[0,caml_new_string("time_source")],
     _gL_=[0,caml_new_string("last_cycle_num_jobs")],
     _gM_=[0,caml_new_string("last_cycle_time")],
     _gN_=[0,caml_new_string("run_every_cycle_start")],
     _gO_=[0,caml_new_string("cycle_start")],
     _gP_=[0,caml_new_string("cycle_count")],
     _gQ_=[0,caml_new_string("uncaught_exn")],
     _gR_=[0,caml_new_string("current_execution_context")],
     _gS_=[0,caml_new_string("main_execution_context")],
     _gT_=[0,caml_new_string("very_low_priority_workers")],
     _gU_=[0,caml_new_string("low_priority_jobs")],
     _gV_=[0,caml_new_string("normal_priority_jobs")],
     _gW_=[0,caml_new_string("job_pool")],
     _gX_=[0,caml_new_string("check_access")],
     _fM_=[0,caml_new_string("src/scheduler1.ml"),59,1762,1786],
     _fK_=[0,caml_new_string("exec")],
     _fL_=[0,caml_new_string("execution_context")],
     _fF_=[0,caml_new_string("Not_finished")],
     _fE_=[0,caml_new_string("Finished")],
     _iS_=[2,13],
     _iT_=[2,13],
     _iW_=[0,caml_new_string("src/ivar0.ml"),911,6],
     _iU_=[2,13],
     _iV_=[0,caml_new_string("src/ivar0.ml"),912,6],
     _iM_=[2,13],
     _iN_=[2,13],
     _iR_=[0,caml_new_string("src/ivar0.ml"),901,6],
     _iO_=[2,13],
     _iQ_=[0,caml_new_string("src/ivar0.ml"),902,6],
     _iP_=[0,caml_new_string("src/ivar0.ml"),903,6],
     _iH_=[2,13],
     _iI_=[2,13],
     _iL_=[0,caml_new_string("src/ivar0.ml"),891,6],
     _iJ_=[2,13],
     _iK_=[0,caml_new_string("src/ivar0.ml"),892,6],
     _iG_=[0,caml_new_string("src/ivar0.ml"),873,6],
     _iF_=[0,caml_new_string("src/ivar0.ml"),878,10],
     _iD_=[0,caml_new_string("src/ivar0.ml"),879,15],
     _iC_=[0,caml_new_string("src/ivar0.ml"),881,13],
     _iE_=[0,caml_new_string("src/ivar0.ml"),883,6],
     _iB_=[0,caml_new_string("src/ivar0.ml"),853,6],
     _iA_=[0,caml_new_string("src/ivar0.ml"),858,10],
     _iy_=[0,caml_new_string("src/ivar0.ml"),860,15],
     _ix_=[0,caml_new_string("src/ivar0.ml"),862,13],
     _iz_=[0,caml_new_string("src/ivar0.ml"),864,6],
     _iu_=[0,caml_new_string("src/ivar0.ml"),840,10],
     _it_=[0,caml_new_string("src/ivar0.ml"),841,10],
     _iw_=[0,caml_new_string("src/ivar0.ml"),838,8],
     _is_=[0,caml_new_string("src/ivar0.ml"),842,13],
     _iv_=[0,caml_new_string("src/ivar0.ml"),844,6],
     _ir_=[0,caml_new_string("src/ivar0.ml"),827,6],
     _iq_=[0,caml_new_string("src/ivar0.ml"),828,6],
     _ip_=[0,caml_new_string("src/ivar0.ml"),818,6],
     _io_=[0,caml_new_string("src/ivar0.ml"),819,6],
     _in_=[0,caml_new_string("src/ivar0.ml"),809,6],
     _im_=[0,caml_new_string("src/ivar0.ml"),810,6],
     _il_=[0,caml_new_string("src/ivar0.ml"),800,6],
     _ik_=[0,caml_new_string("src/ivar0.ml"),801,6],
     _ij_=[0,caml_new_string("src/ivar0.ml"),792,6],
     _ii_=[0,caml_new_string("src/ivar0.ml"),783,6],
     _ih_=[0,caml_new_string("src/ivar0.ml"),784,6],
     _ig_=[0,caml_new_string("src/ivar0.ml"),785,6],
     _if_=[0,caml_new_string("src/ivar0.ml"),771,6],
     _ie_=[0,caml_new_string("src/ivar0.ml"),772,6],
     _id_=[0,caml_new_string("src/ivar0.ml"),773,6],
     _ic_=[0,caml_new_string("src/ivar0.ml"),774,6],
     _ib_=[0,caml_new_string("src/ivar0.ml"),759,6],
     _ia_=[0,caml_new_string("src/ivar0.ml"),760,6],
     _h$_=[0,caml_new_string("src/ivar0.ml"),761,6],
     _h__=[0,caml_new_string("src/ivar0.ml"),749,6],
     _h9_=[0,caml_new_string("src/ivar0.ml"),750,6],
     _h8_=[0,caml_new_string("src/ivar0.ml"),739,6],
     _h7_=[0,caml_new_string("src/ivar0.ml"),722,6],
     _h6_=[0,caml_new_string("src/ivar0.ml"),726,6],
     _h5_=[0,caml_new_string("src/ivar0.ml"),707,6],
     _h4_=[0,caml_new_string("src/ivar0.ml"),710,6],
     _h3_=[0,caml_new_string("src/ivar0.ml"),713,6],
     _h2_=[0,caml_new_string("src/ivar0.ml"),695,6],
     _h1_=[0,caml_new_string("src/ivar0.ml"),699,6],
     _h0_=[0,caml_new_string("src/ivar0.ml"),685,6],
     _hZ_=[0,caml_new_string("src/ivar0.ml"),672,6],
     _hY_=[0,caml_new_string("src/ivar0.ml"),675,6],
     _hX_=[0,caml_new_string("src/ivar0.ml"),658,6],
     _hW_=[0,caml_new_string("src/ivar0.ml"),661,6],
     _hV_=[0,caml_new_string("src/ivar0.ml"),646,6],
     _hU_=[0,caml_new_string("src/ivar0.ml"),649,6],
     _hR_=[2,17],
     _hT_=[0,caml_new_string("src/ivar0.ml"),635,6],
     _hS_=[0,caml_new_string("src/ivar0.ml"),636,6],
     _hO_=[2,17],
     _hQ_=[0,caml_new_string("src/ivar0.ml"),626,6],
     _hP_=[0,caml_new_string("src/ivar0.ml"),627,6],
     _hK_=[0,13],
     _hN_=[0,caml_new_string("src/ivar0.ml"),617,6],
     _hL_=[0,13],
     _hM_=[0,caml_new_string("src/ivar0.ml"),618,6],
     _hJ_=[0,caml_new_string("src/ivar0.ml"),610,6],
     _hH_=[0,13],
     _hI_=[0,caml_new_string("src/ivar0.ml"),604,6],
     _hG_=[0,caml_new_string("src/ivar0.ml"),594,6],
     _hF_=[0,caml_new_string("src/ivar0.ml"),595,6],
     _hE_=[0,caml_new_string("src/ivar0.ml"),596,6],
     _hD_=[0,caml_new_string("src/ivar0.ml"),585,6],
     _hC_=[0,caml_new_string("src/ivar0.ml"),578,6],
     _hB_=[0,caml_new_string("src/ivar0.ml"),568,6],
     _hA_=[0,caml_new_string("src/ivar0.ml"),569,6],
     _hz_=[0,caml_new_string("src/ivar0.ml"),570,6],
     _hv_=[0,caml_new_string("src/ivar0.ml"),558,6],
     _hy_=[0,caml_new_string("src/ivar0.ml"),559,6],
     _hw_=[0,13],
     _hx_=[0,caml_new_string("src/ivar0.ml"),560,6],
     _hu_=[0,caml_new_string("src/ivar0.ml"),551,6],
     _hs_=[0,caml_new_string("src/ivar0.ml"),552,6],
     _ht_=[0,caml_new_string("src/ivar0.ml"),553,6],
     _hp_=[0,caml_new_string("src/ivar0.ml"),480,21],
     _hq_=[0,caml_new_string("src/ivar0.ml"),477,11],
     _ho_=[0,caml_new_string("src/ivar0.ml"),412,6],
     _hn_=[0,caml_new_string("src/ivar0.ml"),386,4],
     _hm_=[0,caml_new_string("src/ivar0.ml"),358,4],
     _hl_=[0,caml_new_string("src/ivar0.ml"),337,15],
     _hi_=[0,caml_new_string("_")],
     _hj_=[0,caml_new_string("t")],
     _hk_=[0,caml_new_string("src/ivar0.ml"),322,15],
     _hh_=[0,caml_new_string("src/ivar0.ml"),312,15],
     _hg_=[0,caml_new_string("src/ivar0.ml"),299,15],
     _hf_=[0,caml_new_string("src/ivar0.ml"),291,15],
     _hd_=[0,caml_new_string("Full")],
     _he_=[0,caml_new_string("src/ivar0.ml"),283,15],
     _hc_=[0,caml_new_string("Empty")],
     _hb_=[0,caml_new_string("src/ivar0.ml"),271,15],
     _ha_=[0,caml_new_string("src/ivar0.ml"),221,2],
     _g$_=[0,caml_new_string("src/ivar0.ml"),222,2],
     _g9_=[0,caml_new_string("src/ivar0.ml"),92,6],
     _g5_=[0,caml_new_string("next")],
     _g6_=[0,caml_new_string("prev")],
     _g7_=[0,caml_new_string("execution_context")],
     _g8_=[0,caml_new_string("run")],
     _i5_=[0,caml_new_string("Parallel")],
     _i6_=[0,caml_new_string("Sequential")],
     _i7_=[0,caml_new_string("Max_concurrent_jobs")],
     _i$_=[0,caml_new_string("src/deferred1.ml"),129,10],
     _jj_=[0,caml_new_string("_")],
     _ji_=[0,caml_new_string("src/ivar_filler.ml"),16,20],
     _jk_=[0,caml_new_string("src/ivar_filler.ml"),13,161,183],
     _jg_=[0,caml_new_string("Empty")],
     _jh_=[0,caml_new_string("Full")],
     _jl_=[0,caml_new_string("...")],
     _jC_=[0,caml_new_string("finally_exn")],
     _jD_=[0,caml_new_string("exn")],
     _jE_=[0,caml_new_string("finally")],
     _jA_=[0,3804260],
     _jB_=[0,3903734],
     _jz_=[0,caml_new_string("src/monitor.ml"),412,17],
     _jy_=[0,caml_new_string("exn")],
     _jw_=[0,3553398],
     _jx_=[1,0],
     _jv_=[0,caml_new_string("src/monitor.ml"),188,8],
     _jp_=
      [0,
       [11,
        caml_new_string("file "),
        [3,
         0,
         [11,
          caml_new_string(", line "),
          [4,
           0,
           0,
           0,
           [11,caml_new_string(", characters "),[4,0,0,0,[12,45,[4,0,0,0,0]]]]]]]],
       caml_new_string("file %S, line %d, characters %d-%d")],
     _jq_=
      [0,
       [11,
        caml_new_string("Caught by monitor "),
        [2,0,[11,caml_new_string(" at "),[2,0,0]]]],
       caml_new_string("Caught by monitor %s at %s")],
     _js_=
      [0,
       [11,caml_new_string("Caught by monitor at "),[2,0,0]],
       caml_new_string("Caught by monitor at %s")],
     _jt_=
      [0,
       [11,caml_new_string("Caught by monitor "),[2,0,0]],
       caml_new_string("Caught by monitor %s")],
     _jr_=[0,caml_new_string("backtrace_history")],
     _jo_=[0,caml_new_string("src/monitor.ml"),62,23],
     _jm_=[0,caml_new_string("src/monitor.ml"),22,44],
     _jn_=[0,caml_new_string("src/monitor.ml"),15,235,257],
     _jJ_=[0,-146189108],
     _jI_=[0,caml_new_string("src/async_stream.ml"),178,18],
     _jV_=[0,caml_new_string("has_any_waiters")],
     _jT_=[0,caml_new_string("_")],
     _jS_=[0,caml_new_string("src/bvar.ml"),18,13],
     _jR_=[0,caml_new_string("src/bvar.ml"),21,8],
     _jU_=[0,caml_new_string("src/bvar.ml"),13,303,325],
     _jP_=[0,caml_new_string("ivar")],
     _jQ_=[0,caml_new_string("has_any_waiters")],
     _kC_=[0,1],
     _kB_=[0,caml_new_string("span")],
     _kz_=[0,-146189108],
     _kA_=[0,3903734],
     _ky_=[0,caml_new_string("_")],
     _kx_=[0,caml_new_string("_")],
     _ku_=[0,caml_new_string("Ok")],
     _kv_=[0,caml_new_string("Previously_aborted")],
     _kw_=[0,caml_new_string("Previously_happened")],
     _kt_=[0,caml_new_string("_")],
     _ks_=[0,caml_new_string("_")],
     _kp_=[0,caml_new_string("Ok")],
     _kq_=[0,caml_new_string("Previously_aborted")],
     _kr_=[0,caml_new_string("Previously_happened")],
     _km_=[0,caml_new_string("Aborted")],
     _kn_=[0,caml_new_string("Happened")],
     _ko_=[0,caml_new_string("Scheduled_at")],
     _kk_=[0,caml_new_string("_")],
     _kj_=[0,caml_new_string("_")],
     _kh_=[0,caml_new_string("src/time_source.ml"),212,15],
     _ki_=[0,caml_new_string("src/time_source.ml"),214,15],
     _kg_=[0,caml_new_string("src/time_source.ml"),222,10],
     _kl_=[0,caml_new_string("src/time_source.ml"),206,6846,6870],
     _ka_=[0,caml_new_string("time_source")],
     _kb_=[0,caml_new_string("scheduled_at")],
     _kc_=[0,caml_new_string("num_fires_to_skip")],
     _kd_=[0,caml_new_string("fired")],
     _ke_=[0,caml_new_string("fire")],
     _kf_=[0,caml_new_string("alarm")],
     _j1_=[0,caml_new_string("Aborted")],
     _j2_=[0,caml_new_string("Happened")],
     _j0_=[0,caml_new_string("src/time_source.ml"),165,5],
     _jX_=[0,caml_new_string("_")],
     _jY_=[0,caml_new_string("events")],
     _jZ_=[0,caml_new_string("is_wall_clock")],
     _lu_=[0,caml_new_string("src/throttle.ml"),154,2],
     _lw_=[0,caml_new_string("src/throttle.ml"),155,2],
     _lv_=[0,caml_new_string("src/throttle.ml"),156,2],
     _lx_=[0,caml_new_string("max_concurrent_jobs")],
     _lg_=[0,caml_new_string("_")],
     _lt_=[0,caml_new_string("src/throttle.ml"),90,8],
     _ls_=[0,caml_new_string("src/throttle.ml"),93,8],
     _lr_=[0,caml_new_string("src/throttle.ml"),98,26],
     _lq_=[0,caml_new_string("src/throttle.ml"),100,8],
     _lp_=[0,caml_new_string("src/throttle.ml"),101,8],
     _lo_=[0,caml_new_string("src/throttle.ml"),103,13],
     _ln_=[0,caml_new_string("src/throttle.ml"),106,23],
     _lm_=[0,caml_new_string("src/throttle.ml"),110,8],
     _ll_=[0,caml_new_string("src/throttle.ml"),111,8],
     _lk_=[0,caml_new_string("src/throttle.ml"),112,66],
     _lj_=[0,caml_new_string("src/throttle.ml"),114,37],
     _lh_=[0,caml_new_string("t")],
     _li_=[0,caml_new_string("exn")],
     _k8_=[0,caml_new_string("cleaned")],
     _k9_=[0,caml_new_string("num_resources_not_cleaned")],
     _k__=[0,caml_new_string("cleans")],
     _k$_=[0,caml_new_string("is_dead")],
     _la_=[0,caml_new_string("capacity_available")],
     _lb_=[0,caml_new_string("num_jobs_running")],
     _lc_=[0,caml_new_string("jobs_waiting_to_start")],
     _ld_=[0,caml_new_string("job_resources_not_in_use")],
     _le_=[0,caml_new_string("max_concurrent_jobs")],
     _lf_=[0,caml_new_string("continue_on_error")],
     _kN_=[0,caml_new_string("src/throttle.ml"),46,18],
     _kK_=[0,caml_new_string("Abort")],
     _kL_=[0,caml_new_string("Start")],
     _kH_=[0,caml_new_string("Ok")],
     _kI_=[0,caml_new_string("Raised")],
     _kG_=[0,caml_new_string("Aborted")],
     _kJ_=[0,caml_new_string("outcome")],
     _kM_=[0,caml_new_string("start")],
     _kD_=[0,caml_new_string("Aborted")],
     _kE_=[0,caml_new_string("Ok")],
     _kF_=[0,caml_new_string("Raised")],
     _lz_=[0,0],
     _ly_=[0,0],
     _lB_=[0,0],
     _lA_=[0,0],
     _lQ_=[0,caml_new_string("src/scheduler.ml"),325,6],
     _lP_=[0,caml_new_string("src/scheduler.ml"),318,6],
     _lM_=[0,caml_new_string("src/scheduler.ml"),281,4],
     _lN_=[0,1],
     _lL_=[0,caml_new_string("n")],
     _lK_=[0,caml_new_string("scheduler")],
     _lT_=[0,3903734],
     _lS_=[0,3903734],
     _nK_=[0,1],
     _nN_=[0,caml_new_string("src/deferred_or_error.ml"),674,6],
     _nM_=[0,caml_new_string("src/deferred_or_error.ml"),675,6],
     _nL_=[0,caml_new_string("src/deferred_or_error.ml"),676,6],
     _nH_=[0,1],
     _nJ_=[0,caml_new_string("src/deferred_or_error.ml"),668,6],
     _nI_=[0,caml_new_string("src/deferred_or_error.ml"),669,6],
     _nG_=
      [0,
       [11,
        caml_new_string("expected "),
        [2,0,[11,caml_new_string(", got "),[2,0,[12,10,[10,0]]]]]],
       caml_new_string("expected %s, got %s\n%!")],
     _nF_=[0,0],
     _nA_=[0,0],
     _nB_=[0,caml_new_string("src/deferred_or_error.ml"),628,8],
     _nC_=[0,1,[0,1,0]],
     _nD_=[0,1,[0,0,0]],
     _nE_=[0,1,[0,0,[0,0,0]]],
     _nx_=[0,1],
     _nz_=[0,caml_new_string("src/deferred_or_error.ml"),606,6],
     _ny_=[0,caml_new_string("src/deferred_or_error.ml"),608,6],
     _nw_=[0,caml_new_string("src/deferred_or_error.ml"),592,6],
     _nv_=[0,caml_new_string("src/deferred_or_error.ml"),593,6],
     _nu_=
      [0,
       [11,
        caml_new_string("expected "),
        [2,0,[11,caml_new_string(", got "),[2,0,[12,10,[10,0]]]]]],
       caml_new_string("expected %s, got %s\n%!")],
     _nt_=[0,0,0],
     _ns_=[0,0,0],
     _nq_=[0,4,[0,3,[0,2,[0,1,[0,0,0]]]]],
     _nr_=[0,caml_new_string("src/deferred_or_error.ml"),542,6],
     _no_=[0,4,[0,3,[0,2,[0,1,[0,0,0]]]]],
     _np_=[0,caml_new_string("src/deferred_or_error.ml"),531,6],
     _nm_=[0,0,[0,1,[0,2,[0,3,[0,4,0]]]]],
     _nn_=[0,caml_new_string("src/deferred_or_error.ml"),520,6],
     _nk_=[0,0,[0,1,[0,2,[0,3,[0,4,0]]]]],
     _nl_=[0,caml_new_string("src/deferred_or_error.ml"),509,6],
     _ni_=[0,4,[0,3,[0,2,[0,1,[0,0,0]]]]],
     _nj_=[0,caml_new_string("src/deferred_or_error.ml"),498,6],
     _ng_=[0,4,[0,3,[0,2,[0,1,[0,0,0]]]]],
     _nh_=[0,caml_new_string("src/deferred_or_error.ml"),487,6],
     _ne_=[0,0,[0,1,[0,2,[0,3,[0,4,0]]]]],
     _nf_=[0,caml_new_string("src/deferred_or_error.ml"),476,6],
     _nc_=[0,0,[0,1,[0,2,[0,3,[0,4,0]]]]],
     _nd_=[0,caml_new_string("src/deferred_or_error.ml"),465,6],
     _na_=[0,4,[0,3,[0,2,[0,1,[0,0,0]]]]],
     _nb_=[0,caml_new_string("src/deferred_or_error.ml"),454,6],
     _m9_=[0,4,[0,3,[0,2,[0,1,[0,0,0]]]]],
     _m__=[0,[0,1,4]],
     _m$_=[0,caml_new_string("src/deferred_or_error.ml"),443,6],
     _m7_=[0,0,[0,1,[0,2,[0,3,[0,4,0]]]]],
     _m8_=[0,caml_new_string("src/deferred_or_error.ml"),432,6],
     _m4_=[0,0,[0,1,[0,2,[0,3,[0,4,0]]]]],
     _m5_=[0,4],
     _m6_=[0,caml_new_string("src/deferred_or_error.ml"),421,6],
     _m2_=[0,4,[0,3,[0,2,[0,1,[0,0,0]]]]],
     _m3_=[0,caml_new_string("src/deferred_or_error.ml"),410,6],
     _mZ_=[0,4,[0,3,[0,2,[0,1,[0,0,0]]]]],
     _m0_=[0,[0,3,1]],
     _m1_=[0,caml_new_string("src/deferred_or_error.ml"),399,6],
     _mX_=[0,0,[0,1,[0,2,[0,3,[0,4,0]]]]],
     _mY_=[0,caml_new_string("src/deferred_or_error.ml"),388,6],
     _mU_=[0,0,[0,1,[0,2,[0,3,[0,4,0]]]]],
     _mV_=[0,3],
     _mW_=[0,caml_new_string("src/deferred_or_error.ml"),377,6],
     _mS_=[0,0,[0,1,[0,2,0]]],
     _mT_=[0,caml_new_string("src/deferred_or_error.ml"),366,6],
     _mQ_=[0,0,[0,1,[0,2,0]]],
     _mR_=[0,caml_new_string("src/deferred_or_error.ml"),359,6],
     _mN_=[0,4,[0,3,[0,2,[0,1,[0,0,0]]]]],
     _mO_=[0,0,[0,1,[0,2,[0,3,[0,1,[0,2,[0,3,[0,2,[0,3,[0,3,0]]]]]]]]]],
     _mP_=[0,caml_new_string("src/deferred_or_error.ml"),350,6],
     _mK_=[0,0,[0,1,[0,2,[0,3,[0,4,0]]]]],
     _mL_=[0,0,[0,1,[0,2,[0,3,[0,0,[0,1,[0,2,[0,0,[0,1,[0,0,0]]]]]]]]]],
     _mM_=[0,caml_new_string("src/deferred_or_error.ml"),339,6],
     _mH_=[0,4,[0,3,[0,2,[0,1,[0,0,0]]]]],
     _mI_=[0,[0,3,1],[0,[0,4,0],0]],
     _mJ_=[0,caml_new_string("src/deferred_or_error.ml"),328,6],
     _mE_=[0,0,[0,1,[0,2,[0,3,[0,4,0]]]]],
     _mF_=[0,1,[0,3,[0,5,0]]],
     _mG_=[0,caml_new_string("src/deferred_or_error.ml"),317,6],
     _mB_=[0,4,[0,3,[0,2,[0,1,[0,0,0]]]]],
     _mC_=[0,1,[0,0,0]],
     _mD_=[0,caml_new_string("src/deferred_or_error.ml"),306,6],
     _my_=[0,0,[0,1,[0,2,[0,3,[0,4,0]]]]],
     _mz_=[0,0,[0,2,[0,4,0]]],
     _mA_=[0,caml_new_string("src/deferred_or_error.ml"),297,6],
     _mv_=[0,2,[0,1,[0,0,0]]],
     _mw_=[0,2,[0,11,[0,20,0]]],
     _mx_=[0,caml_new_string("src/deferred_or_error.ml"),288,6],
     _ms_=[0,0,[0,1,[0,2,0]]],
     _mt_=[0,1,[0,2,[0,3,0]]],
     _mu_=[0,caml_new_string("src/deferred_or_error.ml"),279,6],
     _mr_=[0,caml_new_string("src/deferred_or_error.ml"),269,6],
     _mq_=[0,caml_new_string("src/deferred_or_error.ml"),270,6],
     _mo_=
      [0,
       caml_new_string("0"),
       [0,caml_new_string("1"),[0,caml_new_string("2"),0]]],
     _mp_=[0,caml_new_string("src/deferred_or_error.ml"),258,6],
     _mm_=[0,0,[0,1,[0,2,0]]],
     _mn_=[0,caml_new_string("src/deferred_or_error.ml"),252,6],
     _ml_=[0,caml_new_string("src/deferred_or_error.ml"),243,6],
     _mk_=[0,caml_new_string("src/deferred_or_error.ml"),237,6],
     _mi_=[0,0],
     _mh_=[0,0],
     _nP_=[0,0],
     _nO_=[0,0],
     _nT_=[0,caml_new_string("src/monad_sequence_unit_tests.ml"),421,6],
     _nS_=[0,caml_new_string("src/monad_sequence_unit_tests.ml"),426,6],
     _nR_=[0,caml_new_string("src/monad_sequence_unit_tests.ml"),431,6],
     _nQ_=[0,caml_new_string("src/monad_sequence_unit_tests.ml"),47,4],
     _n0_=[0,caml_new_string("_")],
     _nZ_=[0,caml_new_string("_")],
     _pz_=[0,caml_new_string("src/throttle_unit_tests.ml"),329,8],
     _pA_=[0,0],
     _pB_=[0,caml_new_string("src/throttle_unit_tests.ml"),335,2],
     _pv_=[0,-216426513],
     _px_=[0,caml_new_string("src/throttle_unit_tests.ml"),318,2],
     _pw_=[0,caml_new_string("src/throttle_unit_tests.ml"),319,2],
     _ps_=[0,caml_new_string("src/throttle_unit_tests.ml"),305,30],
     _pt_=[0,caml_new_string("src/throttle_unit_tests.ml"),308,2],
     _pp_=[0,caml_new_string("src/throttle_unit_tests.ml"),284,2],
     _po_=[0,caml_new_string("src/throttle_unit_tests.ml"),285,2],
     _pn_=[0,caml_new_string("src/throttle_unit_tests.ml"),286,2],
     _pc_=[0,caml_new_string("src/throttle_unit_tests.ml"),225,6],
     _pl_=[0,caml_new_string("src/throttle_unit_tests.ml"),227,6],
     _pd_=[0,caml_new_string("src/throttle_unit_tests.ml"),232,6],
     _pk_=[0,caml_new_string("src/throttle_unit_tests.ml"),233,6],
     _pj_=[0,caml_new_string("src/throttle_unit_tests.ml"),234,6],
     _pi_=[0,caml_new_string("src/throttle_unit_tests.ml"),235,6],
     _ph_=[0,caml_new_string("src/throttle_unit_tests.ml"),237,6],
     _pg_=[0,caml_new_string("src/throttle_unit_tests.ml"),240,6],
     _pf_=[0,caml_new_string("src/throttle_unit_tests.ml"),241,6],
     _pe_=[0,caml_new_string("src/throttle_unit_tests.ml"),243,6],
     _o8_=[0,caml_new_string("throttle")],
     _o9_=[0,caml_new_string("num_at_kill_started")],
     _o__=[0,caml_new_string("num_jobs_after_fail")],
     _o$_=[0,caml_new_string("num_jobs_before_fail")],
     _pa_=[0,caml_new_string("num_resources")],
     _pb_=[0,caml_new_string("exn")],
     _oZ_=[0,caml_new_string("src/throttle_unit_tests.ml"),164,12],
     _o0_=[0,caml_new_string("src/throttle_unit_tests.ml"),170,12],
     _o2_=[0,caml_new_string("src/throttle_unit_tests.ml"),155,6],
     _o1_=[0,caml_new_string("src/throttle_unit_tests.ml"),158,6],
     _oR_=[0,caml_new_string("src/throttle_unit_tests.ml"),181,6],
     _oY_=[0,caml_new_string("src/throttle_unit_tests.ml"),183,6],
     _oX_=[0,caml_new_string("src/throttle_unit_tests.ml"),184,6],
     _oW_=[0,caml_new_string("src/throttle_unit_tests.ml"),186,11],
     _oV_=[0,caml_new_string("src/throttle_unit_tests.ml"),189,6],
     _oU_=[0,caml_new_string("src/throttle_unit_tests.ml"),190,6],
     _oT_=[0,caml_new_string("src/throttle_unit_tests.ml"),191,6],
     _oS_=[0,caml_new_string("src/throttle_unit_tests.ml"),193,11],
     _o3_=[0,1,[0,10,[0,100,[0,1e3,0]]]],
     _o4_=[0,1,[0,10,[0,100,[0,1e3,0]]]],
     _oN_=[0,caml_new_string("src/throttle_unit_tests.ml"),127,2],
     _oM_=[0,caml_new_string("src/throttle_unit_tests.ml"),132,2],
     _oL_=[0,caml_new_string("src/throttle_unit_tests.ml"),137,2],
     _oK_=[0,caml_new_string("src/throttle_unit_tests.ml"),140,2],
     _oH_=[0,caml_new_string("src/throttle_unit_tests.ml"),93,2],
     _oG_=[0,caml_new_string("src/throttle_unit_tests.ml"),100,2],
     _oF_=[0,caml_new_string("src/throttle_unit_tests.ml"),102,2],
     _oE_=[0,caml_new_string("src/throttle_unit_tests.ml"),103,2],
     _oD_=[0,caml_new_string("src/throttle_unit_tests.ml"),105,2],
     _oC_=[0,caml_new_string("src/throttle_unit_tests.ml"),107,2],
     _oB_=[0,caml_new_string("src/throttle_unit_tests.ml"),108,2],
     _oA_=[0,caml_new_string("src/throttle_unit_tests.ml"),110,2],
     _oz_=[0,caml_new_string("src/throttle_unit_tests.ml"),111,2],
     _oy_=[0,caml_new_string("src/throttle_unit_tests.ml"),113,2],
     _ox_=[0,caml_new_string("src/throttle_unit_tests.ml"),114,2],
     _ow_=[0,caml_new_string("src/throttle_unit_tests.ml"),117,2],
     _ov_=[0,caml_new_string("src/throttle_unit_tests.ml"),118,2],
     _or_=[0,caml_new_string("src/throttle_unit_tests.ml"),79,2],
     _oq_=[0,caml_new_string("src/throttle_unit_tests.ml"),85,2],
     _ol_=[0,caml_new_string("src/throttle_unit_tests.ml"),69,2],
     _on_=[0,caml_new_string("src/throttle_unit_tests.ml"),70,2],
     _om_=[0,caml_new_string("src/throttle_unit_tests.ml"),71,2],
     _oe_=[0,caml_new_string("src/throttle_unit_tests.ml"),55,33],
     _oj_=[0,caml_new_string("src/throttle_unit_tests.ml"),52,2],
     _od_=[0,caml_new_string("src/throttle_unit_tests.ml"),53,2],
     _oi_=[0,caml_new_string("src/throttle_unit_tests.ml"),57,2],
     _oh_=[0,caml_new_string("src/throttle_unit_tests.ml"),58,2],
     _og_=[0,caml_new_string("src/throttle_unit_tests.ml"),59,2],
     _of_=[0,caml_new_string("src/throttle_unit_tests.ml"),60,2],
     _ob_=[0,caml_new_string("src/throttle_unit_tests.ml"),44,2],
     _oa_=[0,caml_new_string("src/throttle_unit_tests.ml"),46,2],
     _u0_=[0,0,[0,0,0]],
     _u1_=[0,[0,0,0]],
     _u2_=[0,caml_new_string("src/pipe.ml"),2050,6],
     _uX_=[0,0],
     _uW_=[0,0,[0,0,0]],
     _uY_=[0,[0,0,0]],
     _uZ_=[0,caml_new_string("src/pipe.ml"),2043,6],
     _uT_=[0,0,[0,0,0]],
     _uU_=[0,[0,0,0]],
     _uV_=[0,caml_new_string("src/pipe.ml"),2036,6],
     _uQ_=[0,caml_new_string("src/pipe.ml"),2025,8],
     _uP_=[0,0,[0,0,0]],
     _uR_=[0,[0,0,0]],
     _uS_=[0,caml_new_string("src/pipe.ml"),2029,6],
     _uN_=[0,0,[0,0,0]],
     _uO_=[0,caml_new_string("src/pipe.ml"),2018,6],
     _uL_=[0,0,[0,0,0]],
     _uM_=[0,caml_new_string("src/pipe.ml"),2010,6],
     _uJ_=[0,0,[0,0,0]],
     _uK_=[0,caml_new_string("src/pipe.ml"),2002,6],
     _uH_=[0,0,[0,0,0]],
     _uI_=[0,caml_new_string("src/pipe.ml"),1994,6],
     _uG_=[0,caml_new_string("src/pipe.ml"),1985,6],
     _uD_=[0,caml_new_string("src/pipe.ml"),1973,6],
     _uE_=[0,caml_new_string("src/pipe.ml"),1976,6],
     _un_=[0,17724],
     _uC_=[0,caml_new_string("src/pipe.ml"),1937,6],
     _uB_=[0,caml_new_string("src/pipe.ml"),1942,6],
     _uo_=[0,caml_new_string("src/pipe.ml"),1943,6],
     _up_=[0,caml_new_string("src/pipe.ml"),1944,6],
     _uq_=[0,caml_new_string("src/pipe.ml"),1945,6],
     _ur_=[0,[0,17724,0]],
     _uA_=[0,caml_new_string("src/pipe.ml"),1948,6],
     _uz_=[0,caml_new_string("src/pipe.ml"),1955,6],
     _uy_=[0,caml_new_string("src/pipe.ml"),1956,6],
     _ux_=[0,caml_new_string("src/pipe.ml"),1957,6],
     _uw_=[0,caml_new_string("src/pipe.ml"),1958,6],
     _uv_=[0,caml_new_string("src/pipe.ml"),1959,6],
     _uu_=[0,caml_new_string("src/pipe.ml"),1960,6],
     _us_=[0,caml_new_string("src/pipe.ml"),1961,6],
     _ut_=[0,caml_new_string("src/pipe.ml"),1962,6],
     _t7_=[0,17724],
     _um_=[0,caml_new_string("src/pipe.ml"),1896,6],
     _t8_=[0,17724],
     _ul_=[0,caml_new_string("src/pipe.ml"),1901,6],
     _t9_=[0,[0,17724,0]],
     _uk_=[0,caml_new_string("src/pipe.ml"),1904,6],
     _t__=[0,caml_new_string("src/pipe.ml"),1906,6],
     _t$_=[0,caml_new_string("src/pipe.ml"),1907,6],
     _ua_=[0,caml_new_string("src/pipe.ml"),1914,6],
     _ub_=[0,caml_new_string("src/pipe.ml"),1915,6],
     _uc_=[0,caml_new_string("src/pipe.ml"),1916,6],
     _ud_=[0,caml_new_string("src/pipe.ml"),1917,6],
     _uj_=[0,caml_new_string("src/pipe.ml"),1923,6],
     _ui_=[0,caml_new_string("src/pipe.ml"),1924,6],
     _uh_=[0,caml_new_string("src/pipe.ml"),1925,6],
     _ug_=[0,caml_new_string("src/pipe.ml"),1926,6],
     _uf_=[0,caml_new_string("src/pipe.ml"),1927,6],
     _ue_=[0,caml_new_string("src/pipe.ml"),1928,6],
     _t4_=[0,1],
     _t6_=[0,caml_new_string("src/pipe.ml"),1888,6],
     _t5_=[0,caml_new_string("src/pipe.ml"),1889,6],
     _t3_=[0,caml_new_string("src/pipe.ml"),1869,6],
     _t2_=[0,caml_new_string("src/pipe.ml"),1870,6],
     _t1_=[0,caml_new_string("src/pipe.ml"),1850,6],
     _t0_=[0,caml_new_string("src/pipe.ml"),1851,6],
     _tX_=[0,1],
     _tZ_=[0,caml_new_string("src/pipe.ml"),1836,6],
     _tY_=[0,caml_new_string("src/pipe.ml"),1837,6],
     _tW_=[0,caml_new_string("src/pipe.ml"),1816,6],
     _tV_=[0,caml_new_string("src/pipe.ml"),1817,6],
     _tU_=[0,caml_new_string("src/pipe.ml"),1796,6],
     _tT_=[0,caml_new_string("src/pipe.ml"),1797,6],
     _tK_=[0,1],
     _tL_=[0,caml_new_string("src/pipe.ml"),1767,6],
     _tM_=[0,caml_new_string("src/pipe.ml"),1769,6],
     _tS_=[0,caml_new_string("src/pipe.ml"),1773,26],
     _tN_=[0,caml_new_string("src/pipe.ml"),1774,26],
     _tO_=[0,caml_new_string("src/pipe.ml"),1776,6],
     _tR_=[0,caml_new_string("src/pipe.ml"),1779,6],
     _tP_=[0,caml_new_string("src/pipe.ml"),1780,6],
     _tQ_=[0,caml_new_string("src/pipe.ml"),1783,6],
     _tJ_=[0,caml_new_string("src/pipe.ml"),1745,6],
     _tI_=[0,caml_new_string("src/pipe.ml"),1746,6],
     _tH_=[0,caml_new_string("src/pipe.ml"),1722,6],
     _tG_=[0,caml_new_string("src/pipe.ml"),1723,6],
     _tF_=[0,caml_new_string("src/pipe.ml"),1709,6],
     _tC_=[0,caml_new_string("expected_result")],
     _tD_=[0,caml_new_string("actual_result")],
     _tE_=[0,caml_new_string("src/pipe.ml"),1700,6],
     _tv_=[0,caml_new_string("src/pipe.ml"),1632,6],
     _tw_=[0,caml_new_string("src/pipe.ml"),1635,6],
     _tx_=[0,caml_new_string("src/pipe.ml"),1637,6],
     _ty_=[0,caml_new_string("src/pipe.ml"),1641,37],
     _tz_=[0,13,0],
     _tB_=[0,caml_new_string("src/pipe.ml"),1642,17],
     _tA_=[0,caml_new_string("src/pipe.ml"),1648,38],
     _to_=[0,1,[0,2,[0,3,0]]],
     _tp_=[0,4,[0,5,[0,6,0]]],
     _tq_=[0,caml_new_string("src/pipe.ml"),1617,17],
     _tu_=[0,caml_new_string("src/pipe.ml"),1618,17],
     _tr_=[0,7,[0,8,[0,9,0]]],
     _ts_=[0,7,[0,8,[0,9,0]]],
     _tt_=[0,caml_new_string("src/pipe.ml"),1624,6],
     _tk_=[0,1,[0,2,[0,3,0]]],
     _tl_=[0,4,[0,5,[0,6,0]]],
     _tm_=[0,1,[0,2,[0,3,[0,4,[0,5,[0,6,0]]]]]],
     _tn_=[0,caml_new_string("src/pipe.ml"),1606,6],
     _tj_=[0,caml_new_string("src/pipe.ml"),1594,6],
     _ti_=[0,caml_new_string("src/pipe.ml"),1583,6],
     _th_=[0,caml_new_string("src/pipe.ml"),1575,6],
     _tg_=[0,caml_new_string("src/pipe.ml"),1567,6],
     _tc_=[0,1],
     _tf_=[0,caml_new_string("src/pipe.ml"),1549,6],
     _td_=[0,caml_new_string("src/pipe.ml"),1552,19],
     _te_=[0,caml_new_string("src/pipe.ml"),1556,38],
     _tb_=[0,caml_new_string("src/pipe.ml"),1540,26],
     _s9_=[0,caml_new_string("Eof")],
     _s__=[0,caml_new_string("Nothing_available")],
     _s$_=[0,caml_new_string("Ok")],
     _s5_=[0,caml_new_string("Eof")],
     _s6_=[0,caml_new_string("Nothing_available")],
     _s7_=[0,caml_new_string("Ok")],
     _s4_=[0,caml_new_string("src/pipe.ml"),1521,6],
     _s8_=[0,caml_new_string("src/pipe.ml"),1524,6],
     _ta_=[0,caml_new_string("src/pipe.ml"),1528,6],
     _s3_=[0,caml_new_string("src/pipe.ml"),1510,8],
     _s2_=[0,caml_new_string("src/pipe.ml"),1486,6],
     _s1_=[0,caml_new_string("src/pipe.ml"),1489,6],
     _s0_=[0,caml_new_string("src/pipe.ml"),1493,6],
     _sY_=[0,13,[0,14,[0,15,0]]],
     _sZ_=[0,caml_new_string("src/pipe.ml"),1497,6],
     _sU_=[0,caml_new_string("src/pipe.ml"),1472,29],
     _sT_=[0,1,[0,2,[0,3,0]]],
     _sX_=[0,caml_new_string("src/pipe.ml"),1476,6],
     _sV_=[0,14,[0,15,0]],
     _sW_=[0,caml_new_string("src/pipe.ml"),1477,6],
     _sP_=[0,0],
     _sS_=[0,caml_new_string("src/pipe.ml"),1455,6],
     _sR_=[0,caml_new_string("src/pipe.ml"),1456,6],
     _sQ_=[0,caml_new_string("src/pipe.ml"),1461,6],
     _sL_=[0,caml_new_string("src/pipe.ml"),1440,18],
     _sK_=[0,12,[0,13,[0,14,0]]],
     _sM_=[0,4],
     _sN_=[0,12,[0,13,[0,14,0]]],
     _sO_=[0,caml_new_string("src/pipe.ml"),1444,6],
     _sG_=[0,caml_new_string("src/pipe.ml"),1427,18],
     _sF_=[0,12,[0,13,[0,14,0]]],
     _sH_=[0,2],
     _sI_=[0,12,[0,13,0]],
     _sJ_=[0,caml_new_string("src/pipe.ml"),1431,6],
     _sD_=[0,13,0],
     _sE_=[0,caml_new_string("src/pipe.ml"),1416,6],
     _sC_=[0,caml_new_string("src/pipe.ml"),1407,6],
     _sB_=[0,caml_new_string("src/pipe.ml"),1386,6],
     _sA_=[0,caml_new_string("src/pipe.ml"),1388,6],
     _sz_=[0,caml_new_string("src/pipe.ml"),1391,6],
     _sy_=[0,caml_new_string("src/pipe.ml"),1392,6],
     _sx_=[0,caml_new_string("src/pipe.ml"),1395,6],
     _sv_=[0,0],
     _sw_=[0,caml_new_string("src/pipe.ml"),1396,6],
     _su_=[0,caml_new_string("src/pipe.ml"),1376,6],
     _ss_=[0,0],
     _st_=[0,caml_new_string("src/pipe.ml"),1379,6],
     _sq_=[0,0],
     _sr_=[0,caml_new_string("src/pipe.ml"),1369,6],
     _so_=[0,0],
     _sp_=[0,caml_new_string("src/pipe.ml"),1361,6],
     _sj_=[0,17724,0],
     _sk_=[0,caml_new_string("src/pipe.ml"),1342,10],
     _sl_=[0,caml_new_string("src/pipe.ml"),1345,6],
     _sn_=[0,caml_new_string("src/pipe.ml"),1350,6],
     _sm_=[0,caml_new_string("src/pipe.ml"),1351,6],
     _se_=[0,caml_new_string("no synchronous exceptions")],
     _si_=[0,caml_new_string("src/pipe.ml"),1325,6],
     _sf_=[0,17724,0],
     _sh_=[0,caml_new_string("src/pipe.ml"),1326,6],
     _sg_=[0,caml_new_string("src/pipe.ml"),1328,6],
     _r__=[0,caml_new_string("no synchronous exceptions")],
     _r$_=[0,caml_new_string("src/pipe.ml"),1301,6],
     _sa_=[0,17724,0],
     _sd_=[0,caml_new_string("src/pipe.ml"),1302,6],
     _sb_=[0,caml_new_string("src/pipe.ml"),1304,6],
     _sc_=[0,caml_new_string("src/pipe.ml"),1305,6],
     _r5_=[0,caml_new_string("src/pipe.ml"),1264,6],
     _r9_=[0,caml_new_string("src/pipe.ml"),1265,6],
     _r8_=[0,caml_new_string("src/pipe.ml"),1269,6],
     _r6_=[0,[0,0,0]],
     _r7_=[0,caml_new_string("src/pipe.ml"),1270,6],
     _r4_=[0,caml_new_string("src/pipe.ml"),1253,6],
     _r3_=[0,caml_new_string("src/pipe.ml"),1254,6],
     _r1_=[0,caml_new_string("src/pipe.ml"),1244,6],
     _r2_=[0,caml_new_string("src/pipe.ml"),1245,6],
     _rX_=[0,17724],
     _r0_=[0,caml_new_string("src/pipe.ml"),1235,6],
     _rY_=[0,-402004920],
     _rZ_=[0,caml_new_string("src/pipe.ml"),1236,6],
     _rW_=[0,caml_new_string("src/pipe.ml"),1224,46],
     _rV_=[0,caml_new_string("src/pipe.ml"),1222,51],
     _rU_=[0,1],
     _rT_=[0,caml_new_string("src/pipe.ml"),1220,46],
     _rS_=[0,caml_new_string("src/pipe.ml"),1218,54],
     _rR_=[0,caml_new_string("src/pipe.ml"),1217,61],
     _rO_=[0,13,0],
     _rP_=[0,caml_new_string("src/pipe.ml"),1214,20],
     _rQ_=[0,caml_new_string("src/pipe.ml"),1215,18],
     _rN_=[0,1],
     _rM_=[0,caml_new_string("src/pipe.ml"),1191,8],
     _rI_=[0,3456156],
     _rL_=[0,caml_new_string("src/pipe.ml"),1194,8],
     _rJ_=[0,3456156],
     _rK_=[0,caml_new_string("src/pipe.ml"),1197,8],
     _rE_=[0,caml_new_string("src/pipe.ml"),1180,6],
     _rH_=[0,caml_new_string("src/pipe.ml"),1182,6],
     _rG_=[0,caml_new_string("src/pipe.ml"),1183,6],
     _rF_=[0,caml_new_string("src/pipe.ml"),1184,6],
     _rA_=[0,caml_new_string("src/pipe.ml"),1171,6],
     _rD_=[0,caml_new_string("src/pipe.ml"),1173,6],
     _rC_=[0,caml_new_string("src/pipe.ml"),1174,6],
     _rB_=[0,caml_new_string("src/pipe.ml"),1175,6],
     _ry_=[0,0,0],
     _rz_=[0,caml_new_string("src/pipe.ml"),1164,39],
     _rx_=[0,caml_new_string("src/pipe.ml"),1158,43],
     _uF_=[0,caml_new_string("no-js"),0],
     _rv_=[0,caml_new_string("src/pipe.ml"),841,4],
     _ru_=[0,caml_new_string("max_iterations_per_job")],
     _rt_=[0,caml_new_string("src/pipe.ml"),612,6],
     _rs_=[0,caml_new_string("num_values")],
     _rr_=[0,caml_new_string("here")],
     _rq_=[0,caml_new_string("src/pipe.ml"),569,4],
     _rp_=[0,caml_new_string("max_queue_length")],
     _ro_=[0,caml_new_string("src/pipe.ml"),517,4],
     _rn_=[0,caml_new_string("_")],
     _rm_=[0,caml_new_string("_")],
     _rj_=[0,caml_new_string("_")],
     _rk_=[0,caml_new_string("pipe")],
     _rl_=[0,caml_new_string("consumer")],
     _rh_=[0,caml_new_string("_")],
     _rg_=[0,caml_new_string("_")],
     _rf_=[0,caml_new_string("_")],
     _re_=[0,caml_new_string("_")],
     _ri_=[0,caml_new_string("pipe")],
     _rd_=[0,caml_new_string("size_budget")],
     _rc_=[0,caml_new_string("src/pipe.ml"),408,2],
     _rb_=[0,caml_new_string("src/pipe.ml"),399,2],
     _ra_=[0,caml_new_string("_")],
     _q$_=[0,caml_new_string("_")],
     _q__=[0,caml_new_string("_")],
     _q9_=[0,caml_new_string("_")],
     _q8_=[0,caml_new_string("src/pipe.ml"),289,2],
     _q7_=[0,caml_new_string("src/pipe.ml"),283,2],
     _qV_=[0,caml_new_string("_")],
     _qU_=[0,caml_new_string("_")],
     _q6_=[0,caml_new_string("src/pipe.ml"),251,46],
     _q5_=[0,caml_new_string("src/pipe.ml"),253,8],
     _q2_=[0,caml_new_string("src/pipe.ml"),257,10],
     _q4_=[0,caml_new_string("src/pipe.ml"),258,8],
     _q3_=[0,caml_new_string("src/pipe.ml"),261,27],
     _qZ_=[0,caml_new_string("src/pipe.ml"),268,10],
     _q1_=[0,caml_new_string("src/pipe.ml"),265,33],
     _q0_=[0,caml_new_string("src/pipe.ml"),270,28],
     _qY_=[0,caml_new_string("src/pipe.ml"),276,10],
     _qW_=[0,caml_new_string("pipe")],
     _qX_=[0,caml_new_string("exn")],
     _qJ_=[0,caml_new_string("upstream_flusheds")],
     _qK_=[0,caml_new_string("consumers")],
     _qL_=[0,caml_new_string("read_closed")],
     _qM_=[0,caml_new_string("closed")],
     _qN_=[0,caml_new_string("blocked_reads")],
     _qO_=[0,caml_new_string("blocked_flushes")],
     _qP_=[0,caml_new_string("num_values_read")],
     _qQ_=[0,caml_new_string("pushback")],
     _qR_=[0,caml_new_string("size_budget")],
     _qS_=[0,caml_new_string("buffer")],
     _qT_=[0,caml_new_string("id")],
     _qh_=[0,caml_new_string("Ok")],
     _qi_=[0,caml_new_string("Reader_closed")],
     _qj_=[0,caml_new_string("ready")],
     _qk_=[0,caml_new_string("fill_when_num_values_read")],
     _qd_=[0,caml_new_string("_")],
     _qg_=[0,caml_new_string("src/pipe.ml"),131,30],
     _qe_=[0,caml_new_string("pipe")],
     _qf_=[0,caml_new_string("exn")],
     _qb_=[0,caml_new_string("consumer")],
     _qc_=[0,caml_new_string("wants")],
     _p6_=[0,caml_new_string("Eof")],
     _p7_=[0,caml_new_string("Ok")],
     _p3_=[0,caml_new_string("Eof")],
     _p4_=[0,caml_new_string("Ok")],
     _p0_=[0,caml_new_string("Eof")],
     _p1_=[0,caml_new_string("Ok")],
     _p2_=[0,caml_new_string("Zero")],
     _p5_=[0,caml_new_string("One")],
     _p8_=[0,caml_new_string("At_most")],
     _pZ_=[0,caml_new_string("src/pipe.ml"),70,51],
     _pX_=[0,caml_new_string("pipe")],
     _pY_=[0,caml_new_string("exn")],
     _pS_=[0,caml_new_string("downstream_flushed")],
     _pT_=[0,caml_new_string("Have_been_sent_downstream")],
     _pW_=[0,caml_new_string("Have_not_been_sent_downstream")],
     _pU_=[0,caml_new_string("values_read")],
     _pV_=[0,caml_new_string("pipe_id")],
     _pK_=[0,caml_new_string("Ok")],
     _pL_=[0,caml_new_string("Reader_closed")],
     _u__=[0,990972795,0],
     _u9_=[0,-289386606,0],
     _u8_=[0,-289386606,0],
     _u3_=[0,caml_new_string("Attempting_to_connect")],
     _u4_=[0,caml_new_string("Disconnected")],
     _u5_=[0,caml_new_string("Obtained_address")],
     _u6_=[0,caml_new_string("Failed_to_connect")],
     _u7_=[0,caml_new_string("Connected")],
     _vl_=[0,caml_new_string("src/mvar.ml"),57,2],
     _vj_=[0,caml_new_string("_")],
     _vk_=[0,caml_new_string("src/mvar.ml"),16,391,413],
     _vg_=[0,caml_new_string("value_available")],
     _vh_=[0,caml_new_string("taken")],
     _vi_=[0,caml_new_string("current_value")],
     _vC_=[0,caml_new_string("resources")],
     _vD_=[0,caml_new_string("throttle")],
     _vA_=
      [0,
       [11,
        caml_new_string("concurrent_jobs_target < 1 ("),
        [4,3,0,0,[11,caml_new_string(") doesn't make sense"),0]]],
       caml_new_string("concurrent_jobs_target < 1 (%i) doesn't make sense")],
     _vB_=[0,0],
     _vw_=
      [0,
       [11,
        caml_new_string("job asked for more tokens ("),
        [4,
         3,
         0,
         0,
         [11,caml_new_string(") than possible ("),[4,3,0,0,[12,41,0]]]]],
       caml_new_string("job asked for more tokens (%i) than possible (%i)")],
     _vx_=
      [0,
       [11,
        caml_new_string("job asked for more tokens ("),
        [4,
         3,
         0,
         0,
         [11,caml_new_string(") than possible ("),[4,3,0,0,[12,41,0]]]]],
       caml_new_string("job asked for more tokens (%i) than possible (%i)")],
     _vy_=
      [0,
       [11,
        caml_new_string("requested job size ("),
        [4,
         3,
         0,
         0,
         [11,
          caml_new_string(") exceeds the possible size ("),
          [4,3,0,0,[12,41,0]]]]],
       caml_new_string
        ("requested job size (%i) exceeds the possible size (%i)")],
     _vz_=
      [0,
       [11,
        caml_new_string("requested job size ("),
        [4,
         3,
         0,
         0,
         [11,
          caml_new_string(") exceeds the possible size ("),
          [4,3,0,0,[12,41,0]]]]],
       caml_new_string
        ("requested job size (%i) exceeds the possible size (%i)")],
     _vv_=[0,3553398],
     _vu_=[0,3553398],
     _vp_=[0,caml_new_string("throttle_queue")],
     _vq_=[0,caml_new_string("limiter")],
     _vr_=[0,caml_new_string("hopper_filled")],
     _vs_=[0,caml_new_string("is_dead")],
     _vt_=[0,caml_new_string("continue_on_error")],
     _vm_=[0,caml_new_string("Aborted")],
     _vn_=[0,caml_new_string("Ok")],
     _vo_=[0,caml_new_string("Raised")],
     _wk_=[0,caml_new_string("src/lazy_deferred.ml"),191,6],
     _wl_=[0,1],
     _wm_=[0,caml_new_string("src/lazy_deferred.ml"),194,6],
     _wh_=[0,caml_new_string("src/lazy_deferred.ml"),181,6],
     _wi_=[0,1],
     _wj_=[0,caml_new_string("src/lazy_deferred.ml"),184,6],
     _wf_=[0,caml_new_string("src/lazy_deferred.ml"),172,6],
     _wg_=[0,caml_new_string("src/lazy_deferred.ml"),175,6],
     _wd_=[0,caml_new_string("src/lazy_deferred.ml"),162,6],
     _we_=[0,caml_new_string("src/lazy_deferred.ml"),165,6],
     _v7_=[0,caml_new_string("src/lazy_deferred.ml"),116,6],
     _v8_=[0,caml_new_string("src/lazy_deferred.ml"),117,6],
     _v9_=[0,caml_new_string("src/lazy_deferred.ml"),121,6],
     _v__=[0,caml_new_string("src/lazy_deferred.ml"),122,6],
     _wc_=[0,caml_new_string("src/lazy_deferred.ml"),125,6],
     _wb_=[0,caml_new_string("src/lazy_deferred.ml"),126,6],
     _v$_=[0,caml_new_string("src/lazy_deferred.ml"),127,6],
     _wa_=[0,caml_new_string("src/lazy_deferred.ml"),130,6],
     _v0_=[0,caml_new_string("src/lazy_deferred.ml"),95,6],
     _v6_=[0,caml_new_string("src/lazy_deferred.ml"),96,6],
     _v1_=[0,caml_new_string("src/lazy_deferred.ml"),97,6],
     _v2_=[0,caml_new_string("src/lazy_deferred.ml"),100,6],
     _v5_=[0,caml_new_string("src/lazy_deferred.ml"),101,6],
     _v4_=[0,caml_new_string("src/lazy_deferred.ml"),102,6],
     _v3_=[0,caml_new_string("src/lazy_deferred.ml"),103,6],
     _vZ_=[0,caml_new_string("src/lazy_deferred.ml"),85,6],
     _vY_=[0,caml_new_string("src/lazy_deferred.ml"),86,6],
     _vX_=[0,caml_new_string("src/lazy_deferred.ml"),87,6],
     _vW_=[0,caml_new_string("src/lazy_deferred.ml"),75,6],
     _vU_=[0,caml_new_string("src/lazy_deferred.ml"),76,6],
     _vV_=[0,caml_new_string("src/lazy_deferred.ml"),77,6],
     _vR_=[0,caml_new_string("src/lazy_deferred.ml"),65,6],
     _vS_=[0,caml_new_string("src/lazy_deferred.ml"),66,6],
     _vT_=[0,caml_new_string("src/lazy_deferred.ml"),67,6],
     _wq_=[0,0],
     _wp_=[0,0],
     _x2_=[0,1],
     _x5_=[0,caml_new_string("src/eager_deferred_or_error.ml"),676,6],
     _x4_=[0,caml_new_string("src/eager_deferred_or_error.ml"),677,6],
     _x3_=[0,caml_new_string("src/eager_deferred_or_error.ml"),678,6],
     _xZ_=[0,1],
     _x1_=[0,caml_new_string("src/eager_deferred_or_error.ml"),670,6],
     _x0_=[0,caml_new_string("src/eager_deferred_or_error.ml"),671,6],
     _xY_=
      [0,
       [11,
        caml_new_string("expected "),
        [2,0,[11,caml_new_string(", got "),[2,0,[12,10,[10,0]]]]]],
       caml_new_string("expected %s, got %s\n%!")],
     _xX_=[0,0],
     _xS_=[0,0],
     _xT_=[0,caml_new_string("src/eager_deferred_or_error.ml"),630,8],
     _xU_=[0,1,[0,1,0]],
     _xV_=[0,1,[0,0,0]],
     _xW_=[0,1,[0,0,[0,0,0]]],
     _xP_=[0,1],
     _xR_=[0,caml_new_string("src/eager_deferred_or_error.ml"),608,6],
     _xQ_=[0,caml_new_string("src/eager_deferred_or_error.ml"),610,6],
     _xO_=[0,caml_new_string("src/eager_deferred_or_error.ml"),594,6],
     _xN_=[0,caml_new_string("src/eager_deferred_or_error.ml"),595,6],
     _xM_=
      [0,
       [11,
        caml_new_string("expected "),
        [2,0,[11,caml_new_string(", got "),[2,0,[12,10,[10,0]]]]]],
       caml_new_string("expected %s, got %s\n%!")],
     _xL_=[0,0,0],
     _xK_=[0,0,0],
     _xI_=[0,4,[0,3,[0,2,[0,1,[0,0,0]]]]],
     _xJ_=[0,caml_new_string("src/eager_deferred_or_error.ml"),544,6],
     _xG_=[0,4,[0,3,[0,2,[0,1,[0,0,0]]]]],
     _xH_=[0,caml_new_string("src/eager_deferred_or_error.ml"),533,6],
     _xE_=[0,0,[0,1,[0,2,[0,3,[0,4,0]]]]],
     _xF_=[0,caml_new_string("src/eager_deferred_or_error.ml"),522,6],
     _xC_=[0,0,[0,1,[0,2,[0,3,[0,4,0]]]]],
     _xD_=[0,caml_new_string("src/eager_deferred_or_error.ml"),511,6],
     _xA_=[0,4,[0,3,[0,2,[0,1,[0,0,0]]]]],
     _xB_=[0,caml_new_string("src/eager_deferred_or_error.ml"),500,6],
     _xy_=[0,4,[0,3,[0,2,[0,1,[0,0,0]]]]],
     _xz_=[0,caml_new_string("src/eager_deferred_or_error.ml"),489,6],
     _xw_=[0,0,[0,1,[0,2,[0,3,[0,4,0]]]]],
     _xx_=[0,caml_new_string("src/eager_deferred_or_error.ml"),478,6],
     _xu_=[0,0,[0,1,[0,2,[0,3,[0,4,0]]]]],
     _xv_=[0,caml_new_string("src/eager_deferred_or_error.ml"),467,6],
     _xs_=[0,4,[0,3,[0,2,[0,1,[0,0,0]]]]],
     _xt_=[0,caml_new_string("src/eager_deferred_or_error.ml"),456,6],
     _xp_=[0,4,[0,3,[0,2,[0,1,[0,0,0]]]]],
     _xq_=[0,[0,1,4]],
     _xr_=[0,caml_new_string("src/eager_deferred_or_error.ml"),445,6],
     _xn_=[0,0,[0,1,[0,2,[0,3,[0,4,0]]]]],
     _xo_=[0,caml_new_string("src/eager_deferred_or_error.ml"),434,6],
     _xk_=[0,0,[0,1,[0,2,[0,3,[0,4,0]]]]],
     _xl_=[0,4],
     _xm_=[0,caml_new_string("src/eager_deferred_or_error.ml"),423,6],
     _xi_=[0,4,[0,3,[0,2,[0,1,[0,0,0]]]]],
     _xj_=[0,caml_new_string("src/eager_deferred_or_error.ml"),412,6],
     _xf_=[0,4,[0,3,[0,2,[0,1,[0,0,0]]]]],
     _xg_=[0,[0,3,1]],
     _xh_=[0,caml_new_string("src/eager_deferred_or_error.ml"),401,6],
     _xd_=[0,0,[0,1,[0,2,[0,3,[0,4,0]]]]],
     _xe_=[0,caml_new_string("src/eager_deferred_or_error.ml"),390,6],
     _xa_=[0,0,[0,1,[0,2,[0,3,[0,4,0]]]]],
     _xb_=[0,3],
     _xc_=[0,caml_new_string("src/eager_deferred_or_error.ml"),379,6],
     _w__=[0,0,[0,1,[0,2,0]]],
     _w$_=[0,caml_new_string("src/eager_deferred_or_error.ml"),368,6],
     _w8_=[0,0,[0,1,[0,2,0]]],
     _w9_=[0,caml_new_string("src/eager_deferred_or_error.ml"),361,6],
     _w5_=[0,4,[0,3,[0,2,[0,1,[0,0,0]]]]],
     _w6_=[0,0,[0,1,[0,2,[0,3,[0,1,[0,2,[0,3,[0,2,[0,3,[0,3,0]]]]]]]]]],
     _w7_=[0,caml_new_string("src/eager_deferred_or_error.ml"),352,6],
     _w3_=[0,0,[0,1,[0,2,[0,3,[0,0,[0,1,[0,2,[0,0,[0,1,[0,0,0]]]]]]]]]],
     _w4_=[0,caml_new_string("src/eager_deferred_or_error.ml"),341,6],
     _w0_=[0,4,[0,3,[0,2,[0,1,[0,0,0]]]]],
     _w1_=[0,[0,3,1],[0,[0,4,0],0]],
     _w2_=[0,caml_new_string("src/eager_deferred_or_error.ml"),330,6],
     _wY_=[0,1,[0,3,[0,5,0]]],
     _wZ_=[0,caml_new_string("src/eager_deferred_or_error.ml"),319,6],
     _wV_=[0,4,[0,3,[0,2,[0,1,[0,0,0]]]]],
     _wW_=[0,1,[0,0,0]],
     _wX_=[0,caml_new_string("src/eager_deferred_or_error.ml"),308,6],
     _wT_=[0,0,[0,2,[0,4,0]]],
     _wU_=[0,caml_new_string("src/eager_deferred_or_error.ml"),299,6],
     _wQ_=[0,2,[0,1,[0,0,0]]],
     _wR_=[0,2,[0,11,[0,20,0]]],
     _wS_=[0,caml_new_string("src/eager_deferred_or_error.ml"),290,6],
     _wN_=[0,0,[0,1,[0,2,0]]],
     _wO_=[0,1,[0,2,[0,3,0]]],
     _wP_=[0,caml_new_string("src/eager_deferred_or_error.ml"),281,6],
     _wM_=[0,caml_new_string("src/eager_deferred_or_error.ml"),271,6],
     _wL_=[0,caml_new_string("src/eager_deferred_or_error.ml"),272,6],
     _wJ_=
      [0,
       caml_new_string("0"),
       [0,caml_new_string("1"),[0,caml_new_string("2"),0]]],
     _wK_=[0,caml_new_string("src/eager_deferred_or_error.ml"),260,6],
     _wI_=[0,caml_new_string("src/eager_deferred_or_error.ml"),254,6],
     _wH_=[0,caml_new_string("src/eager_deferred_or_error.ml"),245,6],
     _wG_=[0,caml_new_string("src/eager_deferred_or_error.ml"),239,6],
     _wE_=[0,0],
     _wD_=[0,0],
     _wA_=[0,3903734],
     _x7_=[0,caml_new_string("src/deferred_unit_tests.ml"),23,15],
     _yR_=[0,caml_new_string("yes")],
     _yS_=[0,caml_new_string("yes")],
     _yD_=[0,caml_new_string("src/deferred_sequence_unit_tests.ml"),165,2],
     _yE_=[0,caml_new_string("src/deferred_sequence_unit_tests.ml"),167,2],
     _yz_=[0,caml_new_string("src/deferred_sequence_unit_tests.ml"),152,2],
     _yA_=[0,caml_new_string("src/deferred_sequence_unit_tests.ml"),154,2],
     _yv_=[0,-686623969],
     _yw_=[0,-676829465],
     _yr_=[0,-686623969],
     _ys_=[0,-676829465],
     _yc_=[0,caml_new_string("src/deferred_sequence_unit_tests.ml"),43,2],
     _x$_=[0,caml_new_string("src/deferred_sequence_unit_tests.ml"),31,2],
     _x8_=[0,caml_new_string("src/deferred_sequence_unit_tests.ml"),10,2],
     _zk_=[0,caml_new_string("src/async_condition.ml"),102,8],
     _zl_=[0,caml_new_string("src/async_condition.ml"),108,8],
     _zi_=[0,caml_new_string("src/async_condition.ml"),88,8],
     _zj_=[0,caml_new_string("src/async_condition.ml"),92,8],
     _zd_=[0,caml_new_string("src/async_condition.ml"),59,8],
     _zh_=[0,caml_new_string("src/async_condition.ml"),62,6],
     _zg_=[0,caml_new_string("src/async_condition.ml"),64,8],
     _zf_=[0,caml_new_string("src/async_condition.ml"),69,8],
     _ze_=[0,caml_new_string("src/async_condition.ml"),72,8],
     _y$_=[0,caml_new_string("src/async_condition.ml"),43,6],
     _za_=[0,caml_new_string("src/async_condition.ml"),45,6],
     _zc_=[0,caml_new_string("src/async_condition.ml"),48,6],
     _zb_=[0,caml_new_string("src/async_condition.ml"),49,6],
     _y8_=[0,caml_new_string("src/async_condition.ml"),30,6],
     _y9_=[0,caml_new_string("src/async_condition.ml"),32,6],
     _y__=[0,caml_new_string("src/async_condition.ml"),35,6],
     _y6_=[0,caml_new_string("waits")],
     _zr_=[0,caml_new_string("src/async_gc.ml"),51,6],
     _zq_=[0,caml_new_string("src/async_gc.ml"),54,6],
     _zp_=[0,caml_new_string("src/async_gc.ml"),58,6],
     _zo_=[0,caml_new_string("src/async_gc.ml"),41,6],
     _zn_=[0,caml_new_string("src/async_gc.ml"),44,6],
     _zs_=[0,caml_new_string("no-js"),0],
     _zx_=[0,caml_new_string("exn")],
     _zy_=[0,caml_new_string("field")],
     _zz_=[0,1],
     _zv_=[0,caml_new_string("exn")],
     _zw_=[0,1];
    function after(t,span)
     {var result=caml_call2(_B_,t,span);
      if(caml_call2(include[44][16],span,include[44][63]))
       if(caml_call2(_q_,result,t))return _z_;
      return result}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$1);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     include$0=
      [0,
       _a_,
       _b_,
       _c_,
       _d_,
       _e_,
       _f_,
       _g_,
       _h_,
       _i_,
       _j_,
       _k_,
       _l_,
       _m_,
       _n_,
       _o_,
       _p_,
       _q_,
       _r_,
       _s_,
       _t_,
       _u_,
       _v_,
       _w_,
       _x_,
       _y_,
       _z_,
       _A_,
       _B_,
       _C_,
       _D_,
       _E_,
       _F_,
       _G_,
       _H_,
       _I_,
       _J_,
       _K_,
       _L_,
       _M_,
       _N_,
       _O_,
       _P_,
       _Q_,
       _R_,
       after];
    caml_register_global(2598,include$0,"Async_kernel__Time_ns");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_async_kernel$2);
    caml_call1(Expect_test_collector[4][1],cst_src_timing_wheel_ns_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$3,cst$0);
    var
     _S_=include$1[1],
     _T_=include$1[2],
     _U_=include$1[3],
     _V_=include$1[4],
     _W_=include$1[5],
     _X_=include$1[6],
     _Y_=include$1[7],
     _Z_=include$1[8],
     ___=include$1[9],
     _$_=include$1[10],
     _aa_=include$1[11],
     _ab_=include$1[12],
     _ac_=include$1[13],
     _ad_=include$1[14],
     _ae_=include$1[15],
     _af_=include$1[16],
     _ag_=include$1[17],
     _ah_=include$1[18],
     _ai_=include$1[19],
     _aj_=include$1[20],
     _ak_=include$1[21],
     _al_=include$1[22],
     _am_=include$1[23],
     _an_=include$1[24],
     _ao_=include$1[25],
     _ap_=include$1[26],
     _aq_=include$1[27],
     _ar_=include$1[28],
     _as_=include$1[29],
     _at_=include$1[30],
     _au_=include$1[31],
     _av_=include$1[32],
     _aw_=include$1[33],
     _ax_=include$1[34],
     _ay_=include$1[35],
     _az_=include$1[36],
     _aA_=include$1[37];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$4);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Async_kernel_Timing_wheel_ns=
      [0,
       _S_,
       _T_,
       _U_,
       _V_,
       _W_,
       _X_,
       _Y_,
       _Z_,
       ___,
       _$_,
       _aa_,
       _ab_,
       _ac_,
       _ad_,
       _ae_,
       _af_,
       _ag_,
       _ah_,
       _ai_,
       _aj_,
       _ak_,
       _al_,
       _am_,
       _an_,
       _ao_,
       _ap_,
       _aq_,
       _ar_,
       _as_,
       _at_,
       _au_,
       _av_,
       _aw_,
       _ax_,
       _ay_,
       _az_,
       _aA_];
    caml_register_global
     (2600,Async_kernel_Timing_wheel_ns,"Async_kernel__Timing_wheel_ns");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_async_kernel$5);
    caml_call1(Expect_test_collector[4][1],cst_src_async_kernel_config_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$6,cst$1);
    var
     sec=include[44][45],
     concat=Core_kernel_String[31],
     t_of_sexp=Core_kernel_Int[95],
     sexp_of_t=Core_kernel_Int[96],
     validate=Core_kernel_Int[5],
     Epoll_max_ready_events=
      caml_call1
       (Core_kernel_Validated[2],[0,t_of_sexp,sexp_of_t,here,validate]),
     include$2=include[44],
     t_of_sexp$0=include$2[96],
     sexp_of_t$0=include$2[97],
     validate$0=include[44][26],
     Max_inter_cycle_timeout=
      caml_call1
       (Core_kernel_Validated[2],
        [0,t_of_sexp$0,sexp_of_t$0,here$0,validate$0]),
     include$3=include[44],
     t_of_sexp$1=include$3[96],
     sexp_of_t$1=include$3[97],
     validate$1=include[44][27],
     Min_inter_cycle_timeout=
      caml_call1
       (Core_kernel_Validated[2],
        [0,t_of_sexp$1,sexp_of_t$1,here$1,validate$1]),
     t_of_sexp$2=Core_kernel_Int[95],
     sexp_of_t$2=Core_kernel_Int[96],
     validate$2=Core_kernel_Int[5],
     include$4=
      caml_call1
       (Core_kernel_Validated[2],
        [0,t_of_sexp$2,sexp_of_t$2,here$2,validate$2]),
     _aB_=include$4[1],
     _aC_=include$4[2],
     _aE_=include$4[4],
     _aF_=include$4[5],
     _aD_=include$4[3],
     default$0=caml_call1(_aE_,32768);
    function equal(t1,t2){return t1 === t2?1:0}
    var
     t_of_sexp$3=Core_kernel_Int[95],
     sexp_of_t$3=Core_kernel_Int[96],
     validate$3=Core_kernel_Int[5],
     Max_num_threads=
      caml_call1
       (Core_kernel_Validated[2],
        [0,t_of_sexp$3,sexp_of_t$3,here$3,validate$3]),
     t_of_sexp$4=Core_kernel_Int[95],
     sexp_of_t$4=Core_kernel_Int[96],
     validate$4=Core_kernel_Int[5],
     Max_num_jobs_per_priority_per_cycle=
      caml_call1
       (Core_kernel_Validated[2],
        [0,t_of_sexp$4,sexp_of_t$4,here$4,validate$4]);
    function t_of_sexp$5(sexp)
     {if(0 === sexp[0])
       {var _akq_=sexp[1];
        if(caml_string_notequal(_akq_,cst_Call_abort))
         {if(caml_string_notequal(_akq_,cst_Call_gcore))
           {if(caml_string_notequal(_akq_,cst_Default))
             if(caml_string_notequal(_akq_,cst_call_abort))
              if(caml_string_notequal(_akq_,cst_call_gcore))
               if(caml_string_notequal(_akq_,cst_default))
                var switch$0=1,switch$1=0,switch$2=0;
               else
                var switch$2=1;
              else
               var switch$1=1,switch$2=0;
             else
              var switch$0=0,switch$1=0,switch$2=0;
            else
             var switch$2=1;
            if(switch$2)return 0}
          else
           var switch$1=1;
          if(switch$1)return 2}
        else
         var switch$0=0;
        if(! switch$0)return 1}
      else
       {var _akr_=sexp[1];
        if(! _akr_)return caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc,sexp);
        var _aks_=_akr_[1];
        if(0 !== _aks_[0])
         return caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc,sexp);
        var _akt_=_aks_[1];
        if(caml_string_notequal(_akt_,cst_Call_abort$0))
         {if(caml_string_notequal(_akt_,cst_Call_gcore$0))
           {if(caml_string_notequal(_akt_,cst_Default$0))
             if(caml_string_notequal(_akt_,cst_call_abort$0))
              if(caml_string_notequal(_akt_,cst_call_gcore$0))
               if(caml_string_notequal(_akt_,cst_default$0))
                var switch$3=1,switch$4=0,switch$5=0;
               else
                var switch$5=1;
              else
               var switch$4=1,switch$5=0;
             else
              var switch$3=0,switch$4=0,switch$5=0;
            else
             var switch$5=1;
            if(switch$5)
             return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc,sexp)}
          else
           var switch$4=1;
          if(switch$4)
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc,sexp)}
        else
         var switch$3=0;
        if(! switch$3)
         return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc,sexp)}
      return caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc,sexp)}
    function sexp_of_t$5(param)
     {switch(param){case 0:return _aG_;case 1:return _aH_;default:return _aI_}}
    var How_to_dump=[0,t_of_sexp$5,sexp_of_t$5];
    function watch_of_sexp(sexp)
     {if(0 === sexp[0])
       return caml_call2(Sexplib0_Sexp_conv_error[15],tp_loc$0,sexp);
      var
       field_sexps=sexp[1],
       dump_if_delayed_by_field=[0,0],
       how_to_dump_field=[0,0],
       duplicates=[0,0],
       extra=[0,0],
       param=field_sexps;
      for(;;)
       {if(param)
         {var _akj_=param[1];
          if(1 === _akj_[0])
           {var _akk_=_akj_[1];
            if(_akk_)
             {var _akl_=_akk_[1];
              if(0 === _akl_[0])
               {var _akm_=_akk_[2],_akn_=_akl_[1];
                if(! _akm_)
                 {var tail$0=param[2];
                  if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_akn_,extra[1]];
                  var param=tail$0;
                  continue}
                if(! _akm_[2])
                 {var tail=param[2],field_sexp=_akm_[1];
                  if(caml_string_notequal(_akn_,cst_dump_if_delayed_by))
                   if(caml_string_notequal(_akn_,cst_how_to_dump))
                    {if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_akn_,extra[1]]}
                   else
                    if(how_to_dump_field[1])
                     duplicates[1] = [0,_akn_,duplicates[1]];
                    else
                     {var fvalue=caml_call1(How_to_dump[1],field_sexp);
                      how_to_dump_field[1] = [0,fvalue]}
                  else
                   if(dump_if_delayed_by_field[1])
                    duplicates[1] = [0,_akn_,duplicates[1]];
                   else
                    {var fvalue$0=caml_call1(include[44][96],field_sexp);
                     dump_if_delayed_by_field[1] = [0,fvalue$0]}
                  var param=tail;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[9],tp_loc$0,_akj_)}
        if(duplicates[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[11],tp_loc$0,duplicates[1],sexp);
        if(extra[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],tp_loc$0,extra[1],sexp);
        var _ako_=dump_if_delayed_by_field[1],_akp_=how_to_dump_field[1];
        if(_ako_)
         if(_akp_)
          {var how_to_dump_value=_akp_[1],dump_if_delayed_by_value=_ako_[1];
           return [0,dump_if_delayed_by_value,how_to_dump_value]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[14],
                 tp_loc$0,
                 sexp,
                 [0,
                  [0,
                   0 === dump_if_delayed_by_field[1]?1:0,
                   cst_dump_if_delayed_by$0],
                  [0,[0,0 === how_to_dump_field[1]?1:0,cst_how_to_dump$0],0]])}}
    function sexp_of_watch(param)
     {var
       v_how_to_dump=param[2],
       v_dump_if_delayed_by=param[1],
       arg=caml_call1(How_to_dump[2],v_how_to_dump),
       bnds=[0,[1,[0,_aJ_,[0,arg,0]]],0],
       arg$0=caml_call1(include[44][97],v_dump_if_delayed_by),
       bnds$0=[0,[1,[0,_aK_,[0,arg$0,0]]],bnds];
      return [1,bnds$0]}
    function t_of_sexp$6(sexp)
     {if(0 === sexp[0])
       {var _akf_=sexp[1];
        if(caml_string_notequal(_akf_,cst_Do_not_watch))
         {if(caml_string_notequal(_akf_,cst_Watch))
           if(caml_string_notequal(_akf_,cst_do_not_watch))
            if(caml_string_notequal(_akf_,cst_watch))
             var switch$0=1,switch$1=0;
            else
             var switch$1=1;
           else
            var switch$0=0,switch$1=0;
          else
           var switch$1=1;
          if(switch$1)
           return caml_call2(Sexplib0_Sexp_conv_error[5],tp_loc$1,sexp)}
        else
         var switch$0=0;
        if(! switch$0)return 0}
      else
       {var _akg_=sexp[1];
        if(! _akg_)
         return caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc$1,sexp);
        var _akh_=_akg_[1];
        if(0 !== _akh_[0])
         return caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc$1,sexp);
        var _aki_=_akh_[1];
        if(caml_string_notequal(_aki_,cst_Do_not_watch$0))
         {if(caml_string_notequal(_aki_,cst_Watch$0))
           if(caml_string_notequal(_aki_,cst_do_not_watch$0))
            if(caml_string_notequal(_aki_,cst_watch$0))
             var switch$2=1,switch$3=0;
            else
             var switch$3=1;
           else
            var switch$2=0,switch$3=0;
          else
           var switch$3=1;
          if(switch$3)
           {var sexp_args=_akg_[2];
            if(sexp_args)
             if(! sexp_args[2])
              {var v0=sexp_args[1],v0$0=watch_of_sexp(v0);return [0,v0$0]}
            return caml_call3(Sexplib0_Sexp_conv_error[4],tp_loc$1,_aki_,sexp)}}
        else
         var switch$2=0;
        if(! switch$2)
         return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$1,sexp)}
      return caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc$1,sexp)}
    function sexp_of_t$6(param)
     {if(param)
       {var v0=param[1],v0$0=sexp_of_watch(v0);return [1,[0,_aL_,[0,v0$0,0]]]}
      return _aM_}
    var
     Dump_core_on_job_delay=
      [0,How_to_dump,watch_of_sexp,sexp_of_watch,t_of_sexp$6,sexp_of_t$6];
    function t_of_sexp$7(sexp)
     {if(0 === sexp[0])
       {var _aj7_=sexp[1],_aj8_=caml_string_compare(_aj7_,cst_all);
        if(0 <= _aj8_)
         if(0 < _aj8_)
          var
           _aj9_=caml_string_compare(_aj7_,cst_parallel),
           switch$0=
            0 <= _aj9_
             ?0 < _aj9_
               ?caml_string_notequal(_aj7_,cst_reader)
                 ?caml_string_notequal(_aj7_,cst_scheduler)
                   ?caml_string_notequal(_aj7_,cst_shutdown)
                     ?caml_string_notequal(_aj7_,cst_thread_pool)
                       ?caml_string_notequal(_aj7_,cst_thread_safe)
                         ?caml_string_notequal(_aj7_,cst_writer)?15:14
                         :13
                       :12
                     :11
                   :10
                 :9
               :8
             :caml_string_notequal(_aj7_,cst_clock)
               ?caml_string_notequal(_aj7_,cst_fd)
                 ?caml_string_notequal(_aj7_,cst_file_descr_watcher)
                   ?caml_string_notequal(_aj7_,cst_finalizers)
                     ?caml_string_notequal(_aj7_,cst_interruptor)
                       ?caml_string_notequal(_aj7_,cst_monitor)
                         ?caml_string_notequal(_aj7_,cst_monitor_send_exn)?15:7
                         :6
                       :5
                     :4
                   :3
                 :2
               :1;
         else
          var switch$0=0;
        else
         var
          _aj__=caml_string_compare(_aj7_,cst_Monitor_send_exn),
          switch$0=
           0 <= _aj__
            ?0 < _aj__
              ?caml_string_notequal(_aj7_,cst_Parallel)
                ?caml_string_notequal(_aj7_,cst_Reader)
                  ?caml_string_notequal(_aj7_,cst_Scheduler)
                    ?caml_string_notequal(_aj7_,cst_Shutdown)
                      ?caml_string_notequal(_aj7_,cst_Thread_pool)
                        ?caml_string_notequal(_aj7_,cst_Thread_safe)
                          ?caml_string_notequal(_aj7_,cst_Writer)?15:14
                          :13
                        :12
                      :11
                    :10
                  :9
                :8
              :7
            :caml_string_notequal(_aj7_,cst_All)
              ?caml_string_notequal(_aj7_,cst_Clock)
                ?caml_string_notequal(_aj7_,cst_Fd)
                  ?caml_string_notequal(_aj7_,cst_File_descr_watcher)
                    ?caml_string_notequal(_aj7_,cst_Finalizers)
                      ?caml_string_notequal(_aj7_,cst_Interruptor)
                        ?caml_string_notequal(_aj7_,cst_Monitor)?15:6
                        :5
                      :4
                    :3
                  :2
                :1
              :0;
        switch(switch$0)
         {case 0:return 0;
          case 1:return 1;
          case 2:return 2;
          case 3:return 3;
          case 4:return 4;
          case 5:return 5;
          case 6:return 6;
          case 7:return 7;
          case 8:return 8;
          case 9:return 9;
          case 10:return 10;
          case 11:return 11;
          case 12:return 12;
          case 13:return 13;
          case 14:return 14
          }}
      else
       {var _aj$_=sexp[1];
        if(! _aj$_)
         return caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc$2,sexp);
        var _aka_=_aj$_[1];
        if(0 !== _aka_[0])
         return caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc$2,sexp);
        var _akb_=_aka_[1],_akc_=caml_string_compare(_akb_,cst_all$0);
        if(0 <= _akc_)
         if(0 < _akc_)
          var
           _akd_=caml_string_compare(_akb_,cst_parallel$0),
           switch$1=
            0 <= _akd_
             ?0 < _akd_
               ?caml_string_notequal(_akb_,cst_reader$0)
                 ?caml_string_notequal(_akb_,cst_scheduler$0)
                   ?caml_string_notequal(_akb_,cst_shutdown$0)
                     ?caml_string_notequal(_akb_,cst_thread_pool$0)
                       ?caml_string_notequal(_akb_,cst_thread_safe$0)
                         ?caml_string_notequal(_akb_,cst_writer$0)?15:14
                         :13
                       :12
                     :11
                   :10
                 :9
               :8
             :caml_string_notequal(_akb_,cst_clock$0)
               ?caml_string_notequal(_akb_,cst_fd$0)
                 ?caml_string_notequal(_akb_,cst_file_descr_watcher$0)
                   ?caml_string_notequal(_akb_,cst_finalizers$0)
                     ?caml_string_notequal(_akb_,cst_interruptor$0)
                       ?caml_string_notequal(_akb_,cst_monitor$0)
                         ?caml_string_notequal(_akb_,cst_monitor_send_exn$0)?15:7
                         :6
                       :5
                     :4
                   :3
                 :2
               :1;
         else
          var switch$1=0;
        else
         var
          _ake_=caml_string_compare(_akb_,cst_Monitor_send_exn$0),
          switch$1=
           0 <= _ake_
            ?0 < _ake_
              ?caml_string_notequal(_akb_,cst_Parallel$0)
                ?caml_string_notequal(_akb_,cst_Reader$0)
                  ?caml_string_notequal(_akb_,cst_Scheduler$0)
                    ?caml_string_notequal(_akb_,cst_Shutdown$0)
                      ?caml_string_notequal(_akb_,cst_Thread_pool$0)
                        ?caml_string_notequal(_akb_,cst_Thread_safe$0)
                          ?caml_string_notequal(_akb_,cst_Writer$0)?15:14
                          :13
                        :12
                      :11
                    :10
                  :9
                :8
              :7
            :caml_string_notequal(_akb_,cst_All$0)
              ?caml_string_notequal(_akb_,cst_Clock$0)
                ?caml_string_notequal(_akb_,cst_Fd$0)
                  ?caml_string_notequal(_akb_,cst_File_descr_watcher$0)
                    ?caml_string_notequal(_akb_,cst_Finalizers$0)
                      ?caml_string_notequal(_akb_,cst_Interruptor$0)
                        ?caml_string_notequal(_akb_,cst_Monitor$0)?15:6
                        :5
                      :4
                    :3
                  :2
                :1
              :0;
        switch(switch$1)
         {case 0:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$2,sexp);
          case 1:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$2,sexp);
          case 2:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$2,sexp);
          case 3:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$2,sexp);
          case 4:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$2,sexp);
          case 5:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$2,sexp);
          case 6:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$2,sexp);
          case 7:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$2,sexp);
          case 8:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$2,sexp);
          case 9:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$2,sexp);
          case 10:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$2,sexp);
          case 11:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$2,sexp);
          case 12:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$2,sexp);
          case 13:
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$2,sexp);
          case 14:return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$2,sexp)
          }}
      return caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc$2,sexp)}
    function sexp_of_t$7(param)
     {switch(param)
       {case 0:return _aN_;
        case 1:return _aO_;
        case 2:return _aP_;
        case 3:return _aQ_;
        case 4:return _aR_;
        case 5:return _aS_;
        case 6:return _aT_;
        case 7:return _aU_;
        case 8:return _aV_;
        case 9:return _aW_;
        case 10:return _aX_;
        case 11:return _aY_;
        case 12:return _aZ_;
        case 13:return _a0_;
        default:return _a1_}}
    function equal$0(x_003,x_004)
     {if(caml_call2(Ppx_compare_lib[1],x_003,x_004))
       var match=0;
      else
       {switch(x_003)
         {case 0:
           if(0 === x_004)
            var match=0,switch$0=13;
           else
            var match=-1,switch$0=13;
           break;
          case 1:
           if(1 === x_004)
            var match=0,switch$0=13;
           else
            if(0 === x_004)var switch$0=0;else var match=-1,switch$0=13;
           break;
          case 2:
           if(3 <= x_004)
            var match=-1,switch$0=13;
           else
            switch(x_004)
             {case 2:var match=0,switch$0=13;break;
              case 0:var switch$0=0;break;
              default:var switch$0=1}
           break;
          case 3:
           switch(x_004)
            {case 3:var match=0,switch$0=13;break;
             case 0:var switch$0=0;break;
             case 1:var switch$0=1;break;
             case 2:var switch$0=2;break;
             default:var match=-1,switch$0=13}
           break;
          case 4:
           switch(x_004)
            {case 4:var match=0,switch$0=13;break;
             case 0:var switch$0=0;break;
             case 1:var switch$0=1;break;
             case 2:var switch$0=2;break;
             case 3:var switch$0=3;break;
             default:var match=-1,switch$0=13}
           break;
          case 5:
           switch(x_004)
            {case 5:var match=0,switch$0=13;break;
             case 0:var switch$0=0;break;
             case 1:var switch$0=1;break;
             case 2:var switch$0=2;break;
             case 3:var switch$0=3;break;
             case 4:var switch$0=4;break;
             default:var match=-1,switch$0=13}
           break;
          case 6:
           switch(x_004)
            {case 6:var match=0,switch$0=13;break;
             case 0:var switch$0=0;break;
             case 1:var switch$0=1;break;
             case 2:var switch$0=2;break;
             case 3:var switch$0=3;break;
             case 4:var switch$0=4;break;
             case 5:var switch$0=5;break;
             default:var match=-1,switch$0=13}
           break;
          case 7:
           switch(x_004)
            {case 7:var match=0,switch$0=13;break;
             case 0:var switch$0=0;break;
             case 1:var switch$0=1;break;
             case 2:var switch$0=2;break;
             case 3:var switch$0=3;break;
             case 4:var switch$0=4;break;
             case 5:var switch$0=5;break;
             case 6:var switch$0=6;break;
             default:var match=-1,switch$0=13}
           break;
          case 8:
           switch(x_004)
            {case 8:var match=0,switch$0=13;break;
             case 0:var switch$0=0;break;
             case 1:var switch$0=1;break;
             case 2:var switch$0=2;break;
             case 3:var switch$0=3;break;
             case 4:var switch$0=4;break;
             case 5:var switch$0=5;break;
             case 6:var switch$0=6;break;
             case 7:var switch$0=7;break;
             default:var match=-1,switch$0=13}
           break;
          case 9:
           switch(x_004)
            {case 9:var match=0,switch$0=13;break;
             case 0:var switch$0=0;break;
             case 1:var switch$0=1;break;
             case 2:var switch$0=2;break;
             case 3:var switch$0=3;break;
             case 4:var switch$0=4;break;
             case 5:var switch$0=5;break;
             case 6:var switch$0=6;break;
             case 7:var switch$0=7;break;
             case 8:var switch$0=8;break;
             default:var match=-1,switch$0=13}
           break;
          case 10:
           switch(x_004)
            {case 10:var match=0,switch$0=13;break;
             case 0:var switch$0=0;break;
             case 1:var switch$0=1;break;
             case 2:var switch$0=2;break;
             case 3:var switch$0=3;break;
             case 4:var switch$0=4;break;
             case 5:var switch$0=5;break;
             case 6:var switch$0=6;break;
             case 7:var switch$0=7;break;
             case 8:var switch$0=8;break;
             case 9:var switch$0=9;break;
             default:var match=-1,switch$0=13}
           break;
          case 11:
           switch(x_004)
            {case 11:var match=0,switch$0=13;break;
             case 0:var switch$0=0;break;
             case 1:var switch$0=1;break;
             case 2:var switch$0=2;break;
             case 3:var switch$0=3;break;
             case 4:var switch$0=4;break;
             case 5:var switch$0=5;break;
             case 6:var switch$0=6;break;
             case 7:var switch$0=7;break;
             case 8:var switch$0=8;break;
             case 9:var switch$0=9;break;
             case 10:var switch$0=10;break;
             default:var match=-1,switch$0=13}
           break;
          case 12:
           switch(x_004)
            {case 12:var match=0,switch$0=13;break;
             case 0:var switch$0=0;break;
             case 1:var switch$0=1;break;
             case 2:var switch$0=2;break;
             case 3:var switch$0=3;break;
             case 4:var switch$0=4;break;
             case 5:var switch$0=5;break;
             case 6:var switch$0=6;break;
             case 7:var switch$0=7;break;
             case 8:var switch$0=8;break;
             case 9:var switch$0=9;break;
             case 10:var switch$0=10;break;
             case 11:var switch$0=11;break;
             default:var match=-1,switch$0=13}
           break;
          case 13:
           switch(x_004)
            {case 13:var match=0,switch$0=13;break;
             case 14:var match=-1,switch$0=13;break;
             case 0:var switch$0=0;break;
             case 1:var switch$0=1;break;
             case 2:var switch$0=2;break;
             case 3:var switch$0=3;break;
             case 4:var switch$0=4;break;
             case 5:var switch$0=5;break;
             case 6:var switch$0=6;break;
             case 7:var switch$0=7;break;
             case 8:var switch$0=8;break;
             case 9:var switch$0=9;break;
             case 10:var switch$0=10;break;
             case 11:var switch$0=11;break;
             default:var switch$0=12}
           break;
          default:
           switch(x_004)
            {case 13:var match=1,switch$0=13;break;
             case 14:var match=0,switch$0=13;break;
             case 0:var switch$0=0;break;
             case 1:var switch$0=1;break;
             case 2:var switch$0=2;break;
             case 3:var switch$0=3;break;
             case 4:var switch$0=4;break;
             case 5:var switch$0=5;break;
             case 6:var switch$0=6;break;
             case 7:var switch$0=7;break;
             case 8:var switch$0=8;break;
             case 9:var switch$0=9;break;
             case 10:var switch$0=10;break;
             case 11:var switch$0=11;break;
             default:var switch$0=12}}
        switch(switch$0)
         {case 0:var match=1;break;
          case 1:var match=1;break;
          case 2:var match=1;break;
          case 3:var match=1;break;
          case 4:var match=1;break;
          case 5:var match=1;break;
          case 6:var match=1;break;
          case 7:var match=1;break;
          case 8:var match=1;break;
          case 9:var match=1;break;
          case 10:var match=1;break;
          case 11:var match=1;break;
          case 12:var match=1;break
          }}
      return 0 === match?1:0}
    var
     include$5=caml_call1(Core_kernel_Sexpable[6],[0,t_of_sexp$7,sexp_of_t$7]),
     to_string=include$5[2];
    function t_of_sexp$8(sexp)
     {if(0 === sexp[0])
       {var _aj3_=sexp[1];
        if(caml_string_notequal(_aj3_,cst_Epoll))
         {if(caml_string_notequal(_aj3_,cst_Epoll_if_timerfd))
           {if(caml_string_notequal(_aj3_,cst_Select))
             if(caml_string_notequal(_aj3_,cst_epoll))
              if(caml_string_notequal(_aj3_,cst_epoll_if_timerfd))
               if(caml_string_notequal(_aj3_,cst_select))
                var switch$0=1,switch$1=0,switch$2=0;
               else
                var switch$2=1;
              else
               var switch$1=1,switch$2=0;
             else
              var switch$0=0,switch$1=0,switch$2=0;
            else
             var switch$2=1;
            if(switch$2)return 2}
          else
           var switch$1=1;
          if(switch$1)return 0}
        else
         var switch$0=0;
        if(! switch$0)return 1}
      else
       {var _aj4_=sexp[1];
        if(! _aj4_)
         return caml_call2(Sexplib0_Sexp_conv_error[7],tp_loc$3,sexp);
        var _aj5_=_aj4_[1];
        if(0 !== _aj5_[0])
         return caml_call2(Sexplib0_Sexp_conv_error[6],tp_loc$3,sexp);
        var _aj6_=_aj5_[1];
        if(caml_string_notequal(_aj6_,cst_Epoll$0))
         {if(caml_string_notequal(_aj6_,cst_Epoll_if_timerfd$0))
           {if(caml_string_notequal(_aj6_,cst_Select$0))
             if(caml_string_notequal(_aj6_,cst_epoll$0))
              if(caml_string_notequal(_aj6_,cst_epoll_if_timerfd$0))
               if(caml_string_notequal(_aj6_,cst_select$0))
                var switch$3=1,switch$4=0,switch$5=0;
               else
                var switch$5=1;
              else
               var switch$4=1,switch$5=0;
             else
              var switch$3=0,switch$4=0,switch$5=0;
            else
             var switch$5=1;
            if(switch$5)
             return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$3,sexp)}
          else
           var switch$4=1;
          if(switch$4)
           return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$3,sexp)}
        else
         var switch$3=0;
        if(! switch$3)
         return caml_call2(Sexplib0_Sexp_conv_error[3],tp_loc$3,sexp)}
      return caml_call2(Sexplib0_Sexp_conv_error[8],tp_loc$3,sexp)}
    function sexp_of_t$8(param)
     {switch(param){case 0:return _a2_;case 1:return _a3_;default:return _a4_}}
    var
     T=[0,t_of_sexp$8,sexp_of_t$8],
     t_of_sexp$9=T[1],
     sexp_of_t$9=T[2],
     include$6=caml_call1(Core_kernel_Sexpable[6],T),
     to_string$0=include$6[2];
    function timing_wheel_config(r){return r[15]}
    function report_thread_pool_stuck_for(r){return r[14]}
    function record_backtraces(r){return r[13]}
    function print_debug_messages_for(r){return r[12]}
    function min_inter_cycle_timeout(r){return r[11]}
    function max_num_jobs_per_priority_per_cycle(r){return r[10]}
    function max_num_threads(r){return r[9]}
    function max_num_open_file_descrs(r){return r[8]}
    function max_inter_cycle_timeout(r){return r[7]}
    function file_descr_watcher(r){return r[6]}
    function epoll_max_ready_events(r){return r[5]}
    function dump_core_on_job_delay(r){return r[4]}
    function detect_invalid_access_from_thread(r){return r[3]}
    function check_invariants(r){return r[2]}
    function abort_after_thread_pool_stuck_for(r){return r[1]}
    function _a5_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              v]}
    var
     _a6_=0,
     timing_wheel_config$0=
      [0,
       [0,
        function(param){return 0},
        cst_timing_wheel_config,
        _a6_,
        timing_wheel_config,
        _a5_]];
    function _a7_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              v,
              r[15]]}
    var
     _a8_=0,
     report_thread_pool_stuck_for$0=
      [0,
       [0,
        function(param){return 0},
        cst_report_thread_pool_stuck_for,
        _a8_,
        report_thread_pool_stuck_for,
        _a7_]];
    function _a9_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              v,
              r[14],
              r[15]]}
    var
     _a__=0,
     record_backtraces$0=
      [0,
       [0,
        function(param){return 0},
        cst_record_backtraces,
        _a__,
        record_backtraces,
        _a9_]];
    function _a$_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              v,
              r[13],
              r[14],
              r[15]]}
    var
     _ba_=0,
     print_debug_messages_for$0=
      [0,
       [0,
        function(param){return 0},
        cst_print_debug_messages_for,
        _ba_,
        print_debug_messages_for,
        _a$_]];
    function _bb_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              v,
              r[12],
              r[13],
              r[14],
              r[15]]}
    var
     _bc_=0,
     min_inter_cycle_timeout$0=
      [0,
       [0,
        function(param){return 0},
        cst_min_inter_cycle_timeout,
        _bc_,
        min_inter_cycle_timeout,
        _bb_]];
    function _bd_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              v,
              r[11],
              r[12],
              r[13],
              r[14],
              r[15]]}
    var
     _be_=0,
     max_num_jobs_per_priority_per_cycle$0=
      [0,
       [0,
        function(param){return 0},
        cst_max_num_jobs_per_priority_per_cycle,
        _be_,
        max_num_jobs_per_priority_per_cycle,
        _bd_]];
    function _bf_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              v,
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15]]}
    var
     _bg_=0,
     max_num_threads$0=
      [0,
       [0,
        function(param){return 0},
        cst_max_num_threads,
        _bg_,
        max_num_threads,
        _bf_]];
    function _bh_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              v,
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15]]}
    var
     _bi_=0,
     max_num_open_file_descrs$0=
      [0,
       [0,
        function(param){return 0},
        cst_max_num_open_file_descrs,
        _bi_,
        max_num_open_file_descrs,
        _bh_]];
    function _bj_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              v,
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15]]}
    var
     _bk_=0,
     max_inter_cycle_timeout$0=
      [0,
       [0,
        function(param){return 0},
        cst_max_inter_cycle_timeout,
        _bk_,
        max_inter_cycle_timeout,
        _bj_]];
    function _bl_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              v,
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15]]}
    var
     _bm_=0,
     file_descr_watcher$0=
      [0,
       [0,
        function(param){return 0},
        cst_file_descr_watcher$1,
        _bm_,
        file_descr_watcher,
        _bl_]];
    function _bn_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              v,
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15]]}
    var
     _bo_=0,
     epoll_max_ready_events$0=
      [0,
       [0,
        function(param){return 0},
        cst_epoll_max_ready_events,
        _bo_,
        epoll_max_ready_events,
        _bn_]];
    function _bp_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              v,
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15]]}
    var
     _bq_=0,
     dump_core_on_job_delay$0=
      [0,
       [0,
        function(param){return 0},
        cst_dump_core_on_job_delay,
        _bq_,
        dump_core_on_job_delay,
        _bp_]];
    function _br_(r,v)
     {return [0,
              r[1],
              r[2],
              v,
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15]]}
    var
     _bs_=0,
     detect_invalid_access_from_thread$0=
      [0,
       [0,
        function(param){return 0},
        cst_detect_invalid_access_from_thread,
        _bs_,
        detect_invalid_access_from_thread,
        _br_]];
    function _bt_(r,v)
     {return [0,
              r[1],
              v,
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15]]}
    var
     _bu_=0,
     check_invariants$0=
      [0,
       [0,
        function(param){return 0},
        cst_check_invariants,
        _bu_,
        check_invariants,
        _bt_]];
    function _bv_(r,v)
     {return [0,
              v,
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15]]}
    var
     _bw_=0,
     abort_after_thread_pool_stuck_for$0=
      [0,
       [0,
        function(param){return 0},
        cst_abort_after_thread_pool_stuck_for,
        _bw_,
        abort_after_thread_pool_stuck_for,
        _bv_]];
    function sexp_of_t$10(param)
     {var
       v_timing_wheel_config=param[15],
       v_report_thread_pool_stuck_for=param[14],
       v_record_backtraces=param[13],
       v_print_debug_messages_for=param[12],
       v_min_inter_cycle_timeout=param[11],
       v_max_num_jobs_per_priority_per_cycle=param[10],
       v_max_num_threads=param[9],
       v_max_num_open_file_descrs=param[8],
       v_max_inter_cycle_timeout=param[7],
       v_file_descr_watcher=param[6],
       v_epoll_max_ready_events=param[5],
       v_dump_core_on_job_delay=param[4],
       v_detect_invalid_access_from_thread=param[3],
       v_check_invariants=param[2],
       v_abort_after_thread_pool_stuck_for=param[1],
       bnds=0;
      if(v_timing_wheel_config)
       var
        v=v_timing_wheel_config[1],
        arg=caml_call1(include$1[9][2],v),
        bnd=[1,[0,_bx_,[0,arg,0]]],
        bnds$0=[0,bnd,bnds];
      else
       var bnds$0=bnds;
      if(v_report_thread_pool_stuck_for)
       var
        v$0=v_report_thread_pool_stuck_for[1],
        arg$0=caml_call1(include[44][97],v$0),
        bnd$0=[1,[0,_by_,[0,arg$0,0]]],
        bnds$1=[0,bnd$0,bnds$0];
      else
       var bnds$1=bnds$0;
      if(v_record_backtraces)
       var
        v$1=v_record_backtraces[1],
        arg$1=caml_call1(Core_kernel[410],v$1),
        bnd$1=[1,[0,_bz_,[0,arg$1,0]]],
        bnds$2=[0,bnd$1,bnds$1];
      else
       var bnds$2=bnds$1;
      if(v_print_debug_messages_for)
       var
        v$2=v_print_debug_messages_for[1],
        arg$2=caml_call2(Core_kernel[513],sexp_of_t$7,v$2),
        bnd$2=[1,[0,_bA_,[0,arg$2,0]]],
        bnds$3=[0,bnd$2,bnds$2];
      else
       var bnds$3=bnds$2;
      if(v_min_inter_cycle_timeout)
       var
        v$3=v_min_inter_cycle_timeout[1],
        arg$3=caml_call1(Min_inter_cycle_timeout[2],v$3),
        bnd$3=[1,[0,_bB_,[0,arg$3,0]]],
        bnds$4=[0,bnd$3,bnds$3];
      else
       var bnds$4=bnds$3;
      if(v_max_num_jobs_per_priority_per_cycle)
       var
        v$4=v_max_num_jobs_per_priority_per_cycle[1],
        arg$4=caml_call1(Max_num_jobs_per_priority_per_cycle[2],v$4),
        bnd$4=[1,[0,_bC_,[0,arg$4,0]]],
        bnds$5=[0,bnd$4,bnds$4];
      else
       var bnds$5=bnds$4;
      if(v_max_num_threads)
       var
        v$5=v_max_num_threads[1],
        arg$5=caml_call1(Max_num_threads[2],v$5),
        bnd$5=[1,[0,_bD_,[0,arg$5,0]]],
        bnds$6=[0,bnd$5,bnds$5];
      else
       var bnds$6=bnds$5;
      if(v_max_num_open_file_descrs)
       var
        v$6=v_max_num_open_file_descrs[1],
        arg$6=caml_call1(_aC_,v$6),
        bnd$6=[1,[0,_bE_,[0,arg$6,0]]],
        bnds$7=[0,bnd$6,bnds$6];
      else
       var bnds$7=bnds$6;
      if(v_max_inter_cycle_timeout)
       var
        v$7=v_max_inter_cycle_timeout[1],
        arg$7=caml_call1(Max_inter_cycle_timeout[2],v$7),
        bnd$7=[1,[0,_bF_,[0,arg$7,0]]],
        bnds$8=[0,bnd$7,bnds$7];
      else
       var bnds$8=bnds$7;
      if(v_file_descr_watcher)
       var
        v$8=v_file_descr_watcher[1],
        arg$8=caml_call1(sexp_of_t$9,v$8),
        bnd$8=[1,[0,_bG_,[0,arg$8,0]]],
        bnds$9=[0,bnd$8,bnds$8];
      else
       var bnds$9=bnds$8;
      if(v_epoll_max_ready_events)
       var
        v$9=v_epoll_max_ready_events[1],
        arg$9=caml_call1(Epoll_max_ready_events[2],v$9),
        bnd$9=[1,[0,_bH_,[0,arg$9,0]]],
        bnds$10=[0,bnd$9,bnds$9];
      else
       var bnds$10=bnds$9;
      if(v_dump_core_on_job_delay)
       var
        v$10=v_dump_core_on_job_delay[1],
        arg$10=caml_call1(Dump_core_on_job_delay[5],v$10),
        bnd$10=[1,[0,_bI_,[0,arg$10,0]]],
        bnds$11=[0,bnd$10,bnds$10];
      else
       var bnds$11=bnds$10;
      if(v_detect_invalid_access_from_thread)
       var
        v$11=v_detect_invalid_access_from_thread[1],
        arg$11=caml_call1(Core_kernel[410],v$11),
        bnd$11=[1,[0,_bJ_,[0,arg$11,0]]],
        bnds$12=[0,bnd$11,bnds$11];
      else
       var bnds$12=bnds$11;
      if(v_check_invariants)
       var
        v$12=v_check_invariants[1],
        arg$12=caml_call1(Core_kernel[410],v$12),
        bnd$12=[1,[0,_bK_,[0,arg$12,0]]],
        bnds$13=[0,bnd$12,bnds$12];
      else
       var bnds$13=bnds$12;
      if(v_abort_after_thread_pool_stuck_for)
       var
        v$13=v_abort_after_thread_pool_stuck_for[1],
        arg$13=caml_call1(include[44][97],v$13),
        bnd$13=[1,[0,_bL_,[0,arg$13,0]]],
        bnds$14=[0,bnd$13,bnds$13];
      else
       var bnds$14=bnds$13;
      return [1,bnds$14]}
    function default_timing_wheel_config_for_word_size(word_size)
     {if(0 === word_size)
       var alarm_precision=include$1[2][10],level_bits$1=level_bits;
      else
       var
        alarm_precision=caml_call2(include$1[2][13],include$1[2][10],3),
        level_bits$1=level_bits$0;
      var _aj2_=[0,caml_call1(include$1[8][5],level_bits$1)];
      return caml_call3(include$1[9][4],_aj2_,alarm_precision,0)}
    var
     default_timing_wheel_config=
      default_timing_wheel_config_for_word_size(Base_Word_size[3]),
     _bM_=[0,caml_call1(sec,1)],
     _bP_=caml_call1(sec,0),
     _bQ_=[0,caml_call1(Min_inter_cycle_timeout[4],_bP_)],
     _bR_=[0,caml_call1(Max_num_jobs_per_priority_per_cycle[4],500)],
     _bS_=[0,caml_call1(Max_num_threads[4],50)],
     _bT_=caml_call1(sec,0.05),
     _bU_=[0,caml_call1(Max_inter_cycle_timeout[4],_bT_)],
     _bW_=[0,caml_call1(Epoll_max_ready_events[4],256)],
     default$1=
      [0,
       [0,caml_call1(sec,60)],
       _bZ_,
       _bY_,
       _bX_,
       _bW_,
       _bV_,
       _bU_,
       [0,default$0],
       _bS_,
       _bR_,
       _bQ_,
       _bO_,
       _bN_,
       _bM_,
       [0,default_timing_wheel_config]],
     example=
      [0,
       default$1[1],
       default$1[2],
       default$1[3],
       default$1[4],
       default$1[5],
       default$1[6],
       default$1[7],
       default$1[8],
       default$1[9],
       default$1[10],
       default$1[11],
       _b0_,
       default$1[13],
       default$1[14],
       default$1[15]];
    function usage(param)
     {var _ajT_=0;
      function field(to_sexp,description,ac,field)
       {var
         _aj0_=caml_call2(Base_Field[3],field,default$1),
         _aj1_=
          caml_call1(to_sexp,caml_call4(Core_kernel_Option[52],0,0,0,_aj0_));
        return [0,[0,caml_call1(Base_Field[2],field),_aj1_,description],ac]}
      var _ajA_=include$1[9][2],_ajB_=include[44][97],_ajC_=Core_kernel[410];
      function _ajD_(d)
       {return caml_call2(concat,0,[0,cst$2,[0,caml_call1(to_string,d),_b5_]])}
      var
       _ajE_=
        [0,
         cst_A_list_of_tags_specifying_which_Async_functions_should_print_debug_messages_to_stderr_Each_tag_identifies_a_group_of_related_Async_functions_The_tag_all_means_to_print_debug_messages_for_all_functions_Allowed_values_are,
         [0,
          caml_call2(concat,0,caml_call2(Core_kernel_List[84],list,_ajD_)),
          _b4_]],
       _ajF_=caml_call1(Core_kernel[513],sexp_of_t$7),
       _ajG_=Min_inter_cycle_timeout[2],
       _ajH_=Max_num_jobs_per_priority_per_cycle[2],
       _ajI_=Max_num_threads[2];
      function _ajJ_(default$0)
       {var
         _ajY_=caml_call1(_aF_,default$0),
         _ajZ_=
          caml_call2
           (concat,
            0,
            [0,cst_min,[0,caml_call2(Core_kernel_Int[14],0,_ajY_),_b__]]);
        return caml_call1(Core_kernel[557],_ajZ_)}
      var
       _ajK_=Max_inter_cycle_timeout[2],
       _ajL_=
        [0,
         cst_This_determines_what_OS_subsystem_Async_uses_to_watch_file_descriptors_for_being_ready_The_default_is_to_use_epoll_if_timerfd_s_are_supported_and_if_not_use_select_Allowed_values_are,
         [0,
          caml_call2
           (concat,_cb_,caml_call2(Core_kernel_List[84],list$0,to_string$0)),
          _ca_]],
       _ajM_=Epoll_max_ready_events[2],
       _ajN_=Dump_core_on_job_delay[5],
       _ajO_=Core_kernel[410],
       _ajP_=Core_kernel[410],
       fields=
        field
         (_ajA_,
          _b1_,
          field
           (_ajB_,
            _b2_,
            field
             (_ajC_,
              _b3_,
              field
               (_ajF_,
                _ajE_,
                field
                 (_ajG_,
                  _b6_,
                  field
                   (_ajH_,
                    _b7_,
                    field
                     (_ajI_,
                      _b8_,
                      field
                       (_ajJ_,
                        _b9_,
                        field
                         (_ajK_,
                          _b$_,
                          field
                           (sexp_of_t$9,
                            _ajL_,
                            field
                             (_ajM_,
                              _cc_,
                              field
                               (_ajN_,
                                _cd_,
                                field
                                 (_ajO_,
                                  _ce_,
                                  field
                                   (_ajP_,
                                    _cf_,
                                    field
                                     (include[44][97],_cg_,0,abort_after_thread_pool_stuck_for$0),
                                    check_invariants$0),
                                  detect_invalid_access_from_thread$0),
                                dump_core_on_job_delay$0),
                              epoll_max_ready_events$0),
                            file_descr_watcher$0),
                          max_inter_cycle_timeout$0),
                        max_num_open_file_descrs$0),
                      max_num_threads$0),
                    max_num_jobs_per_priority_per_cycle$0),
                  min_inter_cycle_timeout$0),
                print_debug_messages_for$0),
              record_backtraces$0),
            report_thread_pool_stuck_for$0),
          timing_wheel_config$0);
      function _ajQ_(param)
       {var description=param[3],default$0=param[2],name=param[1];
        return caml_call2
                (concat,
                 0,
                 [0,
                  cst$4,
                  [0,
                   name,
                   [0,
                    cst_default$1,
                    [0,
                     caml_call1(Core_kernel_Sexp[85],default$0),
                     [0,cst$3,description]]]]])}
      function _ajR_(param,_ajX_)
       {var name2=_ajX_[1],name1=param[1];
        return caml_call2(Core_kernel_String[117],name1,name2)}
      var
       _ajS_=caml_call2(Core_kernel_List[71],_ajR_,fields),
       _ajU_=
        [0,
         cst_Here_is_an_explanation_of_each_field,
         [0,
          caml_call2(concat,0,caml_call2(Core_kernel_List[84],_ajS_,_ajQ_)),
          _ajT_]],
       _ajV_=sexp_of_t$10(example),
       _ajW_=
        caml_call2
         (concat,
          0,
          [0,
           cst_The,
           [0,
            environment_variable,
            [0,
             cst_environment_variable_affects_Async_in_various_ways_Its_value_should_be_a_sexp_of_the_following_form_where_all_fields_are_optional,
             [0,caml_call2(Core_kernel_Sexp[83],0,_ajV_),_ajU_]]]]);
      caml_call2(Core_kernel[344],_ch_,_ajW_);
      return caml_call1(Core_kernel[243],1)}
    function _ci_(param){return runtime.caml_sys_getenv(environment_variable)}
    var match=caml_call1(Core_kernel_Option[59],_ci_);
    if(match)
     {var _cj_=match[1];
      if(caml_string_notequal(_cj_,cst$5))
       {var
         _ck_=
          function(param$0)
           {var sexp=caml_call1(Core_kernel_Sexp[77],_cj_);
            if(0 === sexp[0])
             return caml_call2(Sexplib0_Sexp_conv_error[15],tp_loc$4,sexp);
            var
             field_sexps=sexp[1],
             abort_after_thread_pool_stuck_for_field=[0,0],
             check_invariants_field=[0,0],
             detect_invalid_access_from_thread_field=[0,0],
             dump_core_on_job_delay_field=[0,0],
             epoll_max_ready_events_field=[0,0],
             file_descr_watcher_field=[0,0],
             max_inter_cycle_timeout_field=[0,0],
             max_num_open_file_descrs_field=[0,0],
             max_num_threads_field=[0,0],
             max_num_jobs_per_priority_per_cycle_field=[0,0],
             min_inter_cycle_timeout_field=[0,0],
             print_debug_messages_for_field=[0,0],
             record_backtraces_field=[0,0],
             report_thread_pool_stuck_for_field=[0,0],
             timing_wheel_config_field=[0,0],
             duplicates=[0,0],
             extra=[0,0],
             param=field_sexps;
            for(;;)
             {if(param)
               {var _ajv_=param[1];
                if(1 === _ajv_[0])
                 {var _ajw_=_ajv_[1];
                  if(_ajw_)
                   {var _ajx_=_ajw_[1];
                    if(0 === _ajx_[0])
                     {var _ajy_=_ajw_[2],_ajz_=_ajx_[1];
                      if(! _ajy_)
                       {var tail$0=param[2];
                        if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_ajz_,extra[1]];
                        var param=tail$0;
                        continue}
                      if(! _ajy_[2])
                       {var
                         tail=param[2],
                         field_sexp=_ajy_[1],
                         switch$0=
                          caml_string_compare
                           (_ajz_,cst_max_num_jobs_per_priority_per_cycle$0);
                        if(0 <= switch$0)
                         if(0 < switch$0)
                          if
                           (caml_string_notequal(_ajz_,cst_max_num_open_file_descrs$0))
                           if(caml_string_notequal(_ajz_,cst_max_num_threads$0))
                            if
                             (caml_string_notequal(_ajz_,cst_min_inter_cycle_timeout$0))
                             if
                              (caml_string_notequal(_ajz_,cst_print_debug_messages_for$0))
                              if(caml_string_notequal(_ajz_,cst_record_backtraces$0))
                               if
                                (caml_string_notequal
                                  (_ajz_,cst_report_thread_pool_stuck_for$0))
                                if(caml_string_notequal(_ajz_,cst_timing_wheel_config$0))
                                 var switch$1=1;
                                else
                                 {if(timing_wheel_config_field[1])
                                   duplicates[1] = [0,_ajz_,duplicates[1]];
                                  else
                                   {var fvalue=caml_call1(include$1[9][1],field_sexp);
                                    timing_wheel_config_field[1] = [0,fvalue]}
                                  var switch$1=0}
                               else
                                {if(report_thread_pool_stuck_for_field[1])
                                  duplicates[1] = [0,_ajz_,duplicates[1]];
                                 else
                                  {var fvalue$0=caml_call1(include[44][96],field_sexp);
                                   report_thread_pool_stuck_for_field[1] = [0,fvalue$0]}
                                 var switch$1=0}
                              else
                               {if(record_backtraces_field[1])
                                 duplicates[1] = [0,_ajz_,duplicates[1]];
                                else
                                 {var fvalue$1=caml_call1(Core_kernel[409],field_sexp);
                                  record_backtraces_field[1] = [0,fvalue$1]}
                                var switch$1=0}
                             else
                              {if(print_debug_messages_for_field[1])
                                duplicates[1] = [0,_ajz_,duplicates[1]];
                               else
                                {var
                                  fvalue$2=
                                   caml_call2(Core_kernel[512],t_of_sexp$7,field_sexp);
                                 print_debug_messages_for_field[1] = [0,fvalue$2]}
                               var switch$1=0}
                            else
                             {if(min_inter_cycle_timeout_field[1])
                               duplicates[1] = [0,_ajz_,duplicates[1]];
                              else
                               {var
                                 fvalue$3=
                                  caml_call1(Min_inter_cycle_timeout[1],field_sexp);
                                min_inter_cycle_timeout_field[1] = [0,fvalue$3]}
                              var switch$1=0}
                           else
                            {if(max_num_threads_field[1])
                              duplicates[1] = [0,_ajz_,duplicates[1]];
                             else
                              {var fvalue$4=caml_call1(Max_num_threads[1],field_sexp);
                               max_num_threads_field[1] = [0,fvalue$4]}
                             var switch$1=0}
                          else
                           {if(max_num_open_file_descrs_field[1])
                             duplicates[1] = [0,_ajz_,duplicates[1]];
                            else
                             {var fvalue$5=caml_call1(_aB_,field_sexp);
                              max_num_open_file_descrs_field[1] = [0,fvalue$5]}
                            var switch$1=0}
                         else
                          {if(max_num_jobs_per_priority_per_cycle_field[1])
                            duplicates[1] = [0,_ajz_,duplicates[1]];
                           else
                            {var
                              fvalue$6=
                               caml_call1
                                (Max_num_jobs_per_priority_per_cycle[1],field_sexp);
                             max_num_jobs_per_priority_per_cycle_field[1] = [0,fvalue$6]}
                           var switch$1=0}
                        else
                         if
                          (caml_string_notequal
                            (_ajz_,cst_abort_after_thread_pool_stuck_for$0))
                          if(caml_string_notequal(_ajz_,cst_check_invariants$0))
                           if
                            (caml_string_notequal
                              (_ajz_,cst_detect_invalid_access_from_thread$0))
                            if(caml_string_notequal(_ajz_,cst_dump_core_on_job_delay$0))
                             if(caml_string_notequal(_ajz_,cst_epoll_max_ready_events$0))
                              if(caml_string_notequal(_ajz_,cst_file_descr_watcher$2))
                               if
                                (caml_string_notequal(_ajz_,cst_max_inter_cycle_timeout$0))
                                var switch$1=1;
                               else
                                {if(max_inter_cycle_timeout_field[1])
                                  duplicates[1] = [0,_ajz_,duplicates[1]];
                                 else
                                  {var
                                    fvalue$7=
                                     caml_call1(Max_inter_cycle_timeout[1],field_sexp);
                                   max_inter_cycle_timeout_field[1] = [0,fvalue$7]}
                                 var switch$1=0}
                              else
                               {if(file_descr_watcher_field[1])
                                 duplicates[1] = [0,_ajz_,duplicates[1]];
                                else
                                 {var fvalue$8=caml_call1(t_of_sexp$9,field_sexp);
                                  file_descr_watcher_field[1] = [0,fvalue$8]}
                                var switch$1=0}
                             else
                              {if(epoll_max_ready_events_field[1])
                                duplicates[1] = [0,_ajz_,duplicates[1]];
                               else
                                {var
                                  fvalue$9=
                                   caml_call1(Epoll_max_ready_events[1],field_sexp);
                                 epoll_max_ready_events_field[1] = [0,fvalue$9]}
                               var switch$1=0}
                            else
                             {if(dump_core_on_job_delay_field[1])
                               duplicates[1] = [0,_ajz_,duplicates[1]];
                              else
                               {var
                                 fvalue$10=
                                  caml_call1(Dump_core_on_job_delay[4],field_sexp);
                                dump_core_on_job_delay_field[1] = [0,fvalue$10]}
                              var switch$1=0}
                           else
                            {if(detect_invalid_access_from_thread_field[1])
                              duplicates[1] = [0,_ajz_,duplicates[1]];
                             else
                              {var fvalue$11=caml_call1(Core_kernel[409],field_sexp);
                               detect_invalid_access_from_thread_field[1] = [0,fvalue$11]}
                             var switch$1=0}
                          else
                           {if(check_invariants_field[1])
                             duplicates[1] = [0,_ajz_,duplicates[1]];
                            else
                             {var fvalue$12=caml_call1(Core_kernel[409],field_sexp);
                              check_invariants_field[1] = [0,fvalue$12]}
                            var switch$1=0}
                         else
                          {if(abort_after_thread_pool_stuck_for_field[1])
                            duplicates[1] = [0,_ajz_,duplicates[1]];
                           else
                            {var fvalue$13=caml_call1(include[44][96],field_sexp);
                             abort_after_thread_pool_stuck_for_field[1] = [0,fvalue$13]}
                           var switch$1=0}
                        if(switch$1)
                         if(Sexplib0_Sexp_conv[26][1])extra[1] = [0,_ajz_,extra[1]];
                        var param=tail;
                        continue}}}}
                caml_call2(Sexplib0_Sexp_conv_error[9],tp_loc$4,_ajv_)}
              if(duplicates[1])
               return caml_call3
                       (Sexplib0_Sexp_conv_error[11],tp_loc$4,duplicates[1],sexp);
              if(extra[1])
               return caml_call3
                       (Sexplib0_Sexp_conv_error[12],tp_loc$4,extra[1],sexp);
              var
               timing_wheel_config_value=timing_wheel_config_field[1],
               report_thread_pool_stuck_for_value=
                report_thread_pool_stuck_for_field[1],
               record_backtraces_value=record_backtraces_field[1],
               print_debug_messages_for_value=
                print_debug_messages_for_field[1],
               min_inter_cycle_timeout_value=min_inter_cycle_timeout_field[1],
               max_num_jobs_per_priority_per_cycle_value=
                max_num_jobs_per_priority_per_cycle_field[1],
               max_num_threads_value=max_num_threads_field[1],
               max_num_open_file_descrs_value=
                max_num_open_file_descrs_field[1],
               max_inter_cycle_timeout_value=max_inter_cycle_timeout_field[1],
               file_descr_watcher_value=file_descr_watcher_field[1],
               epoll_max_ready_events_value=epoll_max_ready_events_field[1],
               dump_core_on_job_delay_value=dump_core_on_job_delay_field[1],
               detect_invalid_access_from_thread_value=
                detect_invalid_access_from_thread_field[1],
               check_invariants_value=check_invariants_field[1],
               abort_after_thread_pool_stuck_for_value=
                abort_after_thread_pool_stuck_for_field[1];
              return [0,
                      abort_after_thread_pool_stuck_for_value,
                      check_invariants_value,
                      detect_invalid_access_from_thread_value,
                      dump_core_on_job_delay_value,
                      epoll_max_ready_events_value,
                      file_descr_watcher_value,
                      max_inter_cycle_timeout_value,
                      max_num_open_file_descrs_value,
                      max_num_threads_value,
                      max_num_jobs_per_priority_per_cycle_value,
                      min_inter_cycle_timeout_value,
                      print_debug_messages_for_value,
                      record_backtraces_value,
                      report_thread_pool_stuck_for_value,
                      timing_wheel_config_value]}},
         match$0=caml_call1(Core_kernel_Result[43],_ck_);
        if(0 === match$0[0])
         var t=match$0[1],t$0=t;
        else
         {var
           exn$0=match$0[1],
           _zE_=Core_kernel[614],
           _zG_=caml_call2(Core_kernel[366],_zF_,environment_variable),
           _zH_=caml_call5(Core_kernel_Error[13],0,0,_zG_,exn$0,_zE_),
           _zI_=caml_call1(Core_kernel_Error[5],_zH_),
           _zJ_=caml_call2(Core_kernel_Sexp[83],0,_zI_);
          caml_call2(Core_kernel[344],_zK_,_zJ_);
          var t$0=usage(0)}
        var t$1=t$0}
      else
       var t$1=usage(0);
      var t$2=t$1}
    else
     var t$2=empty;
    function print_debug_messages_for$1(tag)
     {var _aju_=t$2[12];
      if(_aju_)
       {var l=_aju_[1];return caml_call3(Core_kernel_List[16],l,tag,equal$0)}
      return 0}
    var all=print_debug_messages_for$1(0);
    function debug(tag){return all?all:print_debug_messages_for$1(tag)}
    var
     clock=debug(1),
     fd=debug(2),
     file_descr_watcher$1=debug(3),
     finalizers=debug(4),
     interruptor=debug(5),
     monitor=debug(6),
     monitor_send_exn=debug(7),
     parallel=debug(8),
     reader=debug(9),
     scheduler=debug(10),
     shutdown=debug(11),
     thread_pool=debug(12),
     thread_safe=debug(13),
     writer=debug(14);
    function _cl_(field)
     {var
       _ajr_=caml_call2(Base_Field[3],field,default$1),
       _ajs_=caml_call4(Core_kernel_Option[52],0,0,0,_ajr_),
       _ajt_=caml_call2(Base_Field[3],field,t$2);
      return caml_call2(Core_kernel_Option[51],_ajt_,_ajs_)}
    var
     abort_after_thread_pool_stuck_for$1=
      _cl_(abort_after_thread_pool_stuck_for$0),
     check_invariants$1=_cl_(check_invariants$0),
     detect_invalid_access_from_thread$1=
      _cl_(detect_invalid_access_from_thread$0),
     epoll_max_ready_events$1=_cl_(epoll_max_ready_events$0),
     file_descr_watcher$2=_cl_(file_descr_watcher$0),
     max_inter_cycle_timeout$1=_cl_(max_inter_cycle_timeout$0),
     max_num_open_file_descrs$1=_cl_(max_num_open_file_descrs$0),
     max_num_threads$1=_cl_(max_num_threads$0),
     max_num_jobs_per_priority_per_cycle$1=
      _cl_(max_num_jobs_per_priority_per_cycle$0),
     min_inter_cycle_timeout$1=_cl_(min_inter_cycle_timeout$0),
     record_backtraces$1=_cl_(record_backtraces$0),
     report_thread_pool_stuck_for$1=_cl_(report_thread_pool_stuck_for$0),
     timing_wheel_config$1=_cl_(timing_wheel_config$0),
     dump_core_on_job_delay$1=_cl_(dump_core_on_job_delay$0),
     t$3=
      [0,
       [0,abort_after_thread_pool_stuck_for$1],
       [0,check_invariants$1],
       [0,detect_invalid_access_from_thread$1],
       [0,dump_core_on_job_delay$1],
       [0,epoll_max_ready_events$1],
       [0,file_descr_watcher$2],
       [0,max_inter_cycle_timeout$1],
       [0,max_num_open_file_descrs$1],
       [0,max_num_threads$1],
       [0,max_num_jobs_per_priority_per_cycle$1],
       [0,min_inter_cycle_timeout$1],
       t$2[12],
       [0,record_backtraces$1],
       [0,report_thread_pool_stuck_for$1],
       [0,timing_wheel_config$1]],
     task_id=[0,function(param){return _cm_}];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$7);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     include$7=
      [0,
       clock,
       fd,
       file_descr_watcher$1,
       finalizers,
       interruptor,
       monitor,
       monitor_send_exn,
       parallel,
       reader,
       scheduler,
       shutdown,
       thread_pool,
       thread_safe,
       writer],
     Async_kernel_Async_kernel_config=
      [0,
       Epoll_max_ready_events,
       Max_inter_cycle_timeout,
       Min_inter_cycle_timeout,
       Max_num_threads,
       Max_num_jobs_per_priority_per_cycle,
       [0,_aB_,_aC_,_aD_,_aE_,_aF_,equal,default$0],
       Dump_core_on_job_delay,
       sexp_of_t$10,
       t$3,
       environment_variable,
       include$7,
       [0,sexp_of_t$9],
       abort_after_thread_pool_stuck_for$1,
       check_invariants$1,
       detect_invalid_access_from_thread$1,
       dump_core_on_job_delay$1,
       epoll_max_ready_events$1,
       file_descr_watcher$2,
       max_inter_cycle_timeout$1,
       max_num_jobs_per_priority_per_cycle$1,
       max_num_open_file_descrs$1,
       max_num_threads$1,
       min_inter_cycle_timeout$1,
       record_backtraces$1,
       report_thread_pool_stuck_for$1,
       timing_wheel_config$1,
       default_timing_wheel_config_for_word_size,
       task_id];
    caml_register_global
     (2616,
      Async_kernel_Async_kernel_config,
      "Async_kernel__Async_kernel_config");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_async_kernel$8);
    caml_call1(Expect_test_collector[4][1],cst_src_debug_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$9,cst$6);
    var
     _cn_=include$7[1],
     _cq_=include$7[4],
     _cs_=include$7[6],
     _ct_=include$7[7],
     _cw_=include$7[10],
     _co_=include$7[2],
     _cp_=include$7[3],
     _cr_=include$7[5],
     _cu_=include$7[8],
     _cv_=include$7[9],
     _cx_=include$7[11],
     _cy_=include$7[12],
     _cz_=include$7[13],
     _cA_=include$7[14];
    function log(v2,v3,sexp_of_a)
     {var
       v1=caml_call1(_A_,0),
       v0=caml_call1(task_id[1],0),
       v0$0=caml_call1(Core_kernel_Sexp[92],v0),
       v1$0=caml_call1(_Q_,v1),
       v2$0=caml_call1(Core_kernel[557],v2),
       v3$0=caml_call1(sexp_of_a,v3),
       _ajq_=
        caml_call2
         (Core_kernel_Sexp[83],0,[1,[0,v0$0,[0,v1$0,[0,v2$0,[0,v3$0,0]]]]]);
      return caml_call2(Core_kernel[344],_cB_,_ajq_)}
    function log_string(message){return log(message,0,Core_kernel[598])}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$10);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Async_kernel_Debug=
      [0,
       _cn_,
       _co_,
       _cp_,
       _cq_,
       _cr_,
       _cs_,
       _ct_,
       _cu_,
       _cv_,
       _cw_,
       _cx_,
       _cy_,
       _cz_,
       _cA_,
       log,
       log_string];
    caml_register_global(2617,Async_kernel_Debug,"Async_kernel__Debug");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_async_kernel$11);
    caml_call1(Expect_test_collector[4][1],cst_src_import_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$12,cst$7);
    var
     concat$0=Core_kernel_String[31],
     eprint=Core_kernel_Debug[1],
     eprint_s=Core_kernel_Debug[3],
     eprints=Core_kernel_Debug[2],
     Debug_in_this_directory=0,
     Time_ns_in_this_directory=0,
     Debug=0,
     Time_ns=0,
     Epoll_max_ready_events$0=0,
     Max_inter_cycle_timeout$0=0,
     Max_num_open_file_descrs=0,
     Max_num_threads$0=0,
     Max_num_jobs_per_priority_per_cycle$0=0;
    function print_s(sexp)
     {var _ajp_=caml_call2(Core_kernel_Sexp[83],0,sexp);
      return caml_call2(Core_kernel[361],_cC_,_ajp_)}
    var sec$0=include[44][45],Thread=[0],Unix=[0];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$13);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Async_kernel_Import=
      [0,
       Debug_in_this_directory,
       Time_ns_in_this_directory,
       Debug,
       Time_ns,
       Epoll_max_ready_events$0,
       Max_inter_cycle_timeout$0,
       Max_num_open_file_descrs,
       Max_num_threads$0,
       Max_num_jobs_per_priority_per_cycle$0,
       concat$0,
       eprint,
       eprint_s,
       eprints,
       print_s,
       sec$0,
       Thread,
       Unix];
    caml_register_global(2619,Async_kernel_Import,"Async_kernel__Import");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_async_kernel$14);
    caml_call1(Expect_test_collector[4][1],cst_src_priority_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$15,cst$8);
    function sexp_of_t$11(param){return 0 === param?_cD_:_cE_}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$16);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Async_kernel_Priority=[0,sexp_of_t$11,0,1];
    caml_register_global(2620,Async_kernel_Priority,"Async_kernel__Priority");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_async_kernel$17);
    caml_call1(Expect_test_collector[4][1],cst_src_types_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$18,cst$9);
    var
     Bvar=caml_call2(CamlinternalMod[1],_cG_,_cF_),
     Cell=caml_call2(CamlinternalMod[1],_cI_,_cH_),
     Deferred=caml_call2(CamlinternalMod[1],_cK_,_cJ_),
     Event=caml_call2(CamlinternalMod[1],_cM_,_cL_),
     Execution_context=caml_call2(CamlinternalMod[1],_cO_,_cN_),
     External_job=caml_call2(CamlinternalMod[1],_cQ_,_cP_),
     Handler=caml_call2(CamlinternalMod[1],_cS_,_cR_),
     Ivar=caml_call2(CamlinternalMod[1],_cU_,_cT_),
     Job=caml_call2(CamlinternalMod[1],_cW_,_cV_),
     Job_or_event=caml_call2(CamlinternalMod[1],_cY_,_cX_),
     Job_pool=caml_call2(CamlinternalMod[1],_c0_,_cZ_),
     Job_queue=caml_call2(CamlinternalMod[1],_c2_,_c1_),
     Jobs=caml_call2(CamlinternalMod[1],_c4_,_c3_),
     Monitor=caml_call2(CamlinternalMod[1],_c6_,_c5_),
     Scheduler=caml_call2(CamlinternalMod[1],_c8_,_c7_),
     Stream=caml_call2(CamlinternalMod[1],_c__,_c9_),
     Tail=caml_call2(CamlinternalMod[1],_da_,_c$_),
     Time_source=caml_call2(CamlinternalMod[1],_dc_,_db_),
     Very_low_priority_worker=caml_call2(CamlinternalMod[1],_de_,_dd_),
     normal=0;
    function to_repr(t){return t}
    function of_repr(t){return t}
    caml_call3(CamlinternalMod[2],_df_,Bvar,[0,of_repr,to_repr]);
    caml_call3(CamlinternalMod[2],_dg_,Cell,Cell);
    caml_call3(CamlinternalMod[2],_dh_,Deferred,Deferred);
    caml_call3(CamlinternalMod[2],_di_,Event,Event);
    caml_call3(CamlinternalMod[2],_dj_,Execution_context,Execution_context);
    caml_call3(CamlinternalMod[2],_dk_,External_job,External_job);
    caml_call3(CamlinternalMod[2],_dl_,Handler,Handler);
    caml_call3(CamlinternalMod[2],_dm_,Ivar,Ivar);
    caml_call3(CamlinternalMod[2],_dn_,Job,Job);
    caml_call3(CamlinternalMod[2],_do_,Job_or_event,Job_or_event);
    caml_call3(CamlinternalMod[2],_dp_,Job_pool,Job_pool);
    caml_call3(CamlinternalMod[2],_dq_,Job_queue,Job_queue);
    caml_call3(CamlinternalMod[2],_dr_,Jobs,Jobs);
    caml_call3(CamlinternalMod[2],_ds_,Monitor,Monitor);
    caml_call3(CamlinternalMod[2],_dt_,Scheduler,Scheduler);
    caml_call3(CamlinternalMod[2],_du_,Stream,Stream);
    caml_call3(CamlinternalMod[2],_dv_,Tail,Tail);
    caml_call3(CamlinternalMod[2],_dw_,Time_source,Time_source);
    caml_call3
     (CamlinternalMod[2],
      _dx_,
      Very_low_priority_worker,
      Very_low_priority_worker);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$19);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Async_kernel_Types=
      [0,
       Bvar,
       Cell,
       Deferred,
       Event,
       Execution_context,
       External_job,
       Handler,
       Ivar,
       Job,
       Job_or_event,
       Job_pool,
       Job_queue,
       Jobs,
       Monitor,
       Scheduler,
       Stream,
       Tail,
       Time_source,
       Very_low_priority_worker];
    caml_register_global(2622,Async_kernel_Types,"Async_kernel__Types");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_async_kernel$20);
    caml_call1(Expect_test_collector[4][1],cst_src_monitor0_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$21,cst$10);
    function is_detached(r){return r[9]}
    function set_is_detached(r,v){r[9] = v;return 0}
    function has_seen_error(r){return r[8]}
    function set_has_seen_error(r,v){r[8] = v;return 0}
    function tails_for_all_errors(r){return r[7]}
    function set_tails_for_all_errors(r,v){r[7] = v;return 0}
    function handlers_for_all_errors(r){return r[6]}
    function set_handlers_for_all_errors(r,v){r[6] = v;return 0}
    function next_error(r){return r[5]}
    function set_next_error(r,v){r[5] = v;return 0}
    function parent(r){return r[4]}
    function id(r){return r[3]}
    function here$5(r){return r[2]}
    function name(r){return r[1]}
    function _dy_(r,v){return [0,r[1],r[2],r[3],r[4],r[5],r[6],r[7],r[8],v]}
    var
     _dz_=[0,set_is_detached],
     is_detached$0=
      [0,[0,function(param){return 0},cst_is_detached,_dz_,is_detached,_dy_]];
    function _dA_(r,v){return [0,r[1],r[2],r[3],r[4],r[5],r[6],r[7],v,r[9]]}
    var
     _dB_=[0,set_has_seen_error],
     has_seen_error$0=
      [0,
       [0,
        function(param){return 0},
        cst_has_seen_error,
        _dB_,
        has_seen_error,
        _dA_]];
    function _dC_(r,v){return [0,r[1],r[2],r[3],r[4],r[5],r[6],v,r[8],r[9]]}
    var
     _dD_=[0,set_tails_for_all_errors],
     tails_for_all_errors$0=
      [0,
       [0,
        function(param){return 0},
        cst_tails_for_all_errors,
        _dD_,
        tails_for_all_errors,
        _dC_]];
    function _dE_(r,v){return [0,r[1],r[2],r[3],r[4],r[5],v,r[7],r[8],r[9]]}
    var
     _dF_=[0,set_handlers_for_all_errors],
     handlers_for_all_errors$0=
      [0,
       [0,
        function(param){return 0},
        cst_handlers_for_all_errors,
        _dF_,
        handlers_for_all_errors,
        _dE_]];
    function _dG_(r,v){return [0,r[1],r[2],r[3],r[4],v,r[6],r[7],r[8],r[9]]}
    var
     _dH_=[0,set_next_error],
     next_error$0=
      [0,[0,function(param){return 0},cst_next_error,_dH_,next_error,_dG_]];
    function _dI_(r,v){return [0,r[1],r[2],r[3],v,r[5],r[6],r[7],r[8],r[9]]}
    var
     _dJ_=0,
     parent$0=[0,[0,function(param){return 0},cst_parent,_dJ_,parent,_dI_]];
    function _dK_(r,v){return [0,r[1],r[2],v,r[4],r[5],r[6],r[7],r[8],r[9]]}
    var _dL_=0,id$0=[0,[0,function(param){return 0},cst_id,_dL_,id,_dK_]];
    function _dM_(r,v){return [0,r[1],v,r[3],r[4],r[5],r[6],r[7],r[8],r[9]]}
    var
     _dN_=0,
     here$6=[0,[0,function(param){return 0},cst_here,_dN_,here$5,_dM_]];
    function _dO_(r,v){return [0,v,r[2],r[3],r[4],r[5],r[6],r[7],r[8],r[9]]}
    var
     _dP_=0,
     name$0=[0,[0,function(param){return 0},cst_name,_dP_,name,_dO_]];
    function make_creator
     (name_fun,
      here_fun,
      id_fun,
      parent_fun,
      next_error_fun,
      handlers_for_all_errors_fun,
      tails_for_all_errors_fun,
      has_seen_error_fun,
      is_detached_fun,
      compile_acc)
     {var
       match=caml_call2(name_fun,name$0,compile_acc),
       compile_acc$0=match[2],
       name_gen=match[1],
       match$0=caml_call2(here_fun,here$6,compile_acc$0),
       compile_acc$1=match$0[2],
       here_gen=match$0[1],
       match$1=caml_call2(id_fun,id$0,compile_acc$1),
       compile_acc$2=match$1[2],
       id_gen=match$1[1],
       match$2=caml_call2(parent_fun,parent$0,compile_acc$2),
       compile_acc$3=match$2[2],
       parent_gen=match$2[1],
       match$3=caml_call2(next_error_fun,next_error$0,compile_acc$3),
       compile_acc$4=match$3[2],
       next_error_gen=match$3[1],
       match$4=
        caml_call2
         (handlers_for_all_errors_fun,handlers_for_all_errors$0,compile_acc$4),
       compile_acc$5=match$4[2],
       handlers_for_all_errors_gen=match$4[1],
       match$5=
        caml_call2
         (tails_for_all_errors_fun,tails_for_all_errors$0,compile_acc$5),
       compile_acc$6=match$5[2],
       tails_for_all_errors_gen=match$5[1],
       match$6=caml_call2(has_seen_error_fun,has_seen_error$0,compile_acc$6),
       compile_acc$7=match$6[2],
       has_seen_error_gen=match$6[1],
       match$7=caml_call2(is_detached_fun,is_detached$0,compile_acc$7),
       compile_acc$8=match$7[2],
       is_detached_gen=match$7[1];
      return [0,
              function(acc)
               {var
                 name=caml_call1(name_gen,acc),
                 here=caml_call1(here_gen,acc),
                 id=caml_call1(id_gen,acc),
                 parent=caml_call1(parent_gen,acc),
                 next_error=caml_call1(next_error_gen,acc),
                 handlers_for_all_errors=
                  caml_call1(handlers_for_all_errors_gen,acc),
                 tails_for_all_errors=caml_call1(tails_for_all_errors_gen,acc),
                 has_seen_error=caml_call1(has_seen_error_gen,acc),
                 is_detached=caml_call1(is_detached_gen,acc);
                return [0,
                        name,
                        here,
                        id,
                        parent,
                        next_error,
                        handlers_for_all_errors,
                        tails_for_all_errors,
                        has_seen_error,
                        is_detached]},
              compile_acc$8]}
    function create
     (name,
      here,
      id,
      parent,
      next_error,
      handlers_for_all_errors,
      tails_for_all_errors,
      has_seen_error,
      is_detached)
     {return [0,
              name,
              here,
              id,
              parent,
              next_error,
              handlers_for_all_errors,
              tails_for_all_errors,
              has_seen_error,
              is_detached]}
    function map
     (name_fun,
      here_fun,
      id_fun,
      parent_fun,
      next_error_fun,
      handlers_for_all_errors_fun,
      tails_for_all_errors_fun,
      has_seen_error_fun,
      is_detached_fun)
     {var
       _ajh_=caml_call1(is_detached_fun,is_detached$0),
       _aji_=caml_call1(has_seen_error_fun,has_seen_error$0),
       _ajj_=caml_call1(tails_for_all_errors_fun,tails_for_all_errors$0),
       _ajk_=caml_call1(handlers_for_all_errors_fun,handlers_for_all_errors$0),
       _ajl_=caml_call1(next_error_fun,next_error$0),
       _ajm_=caml_call1(parent_fun,parent$0),
       _ajn_=caml_call1(id_fun,id$0),
       _ajo_=caml_call1(here_fun,here$6);
      return [0,
              caml_call1(name_fun,name$0),
              _ajo_,
              _ajn_,
              _ajm_,
              _ajl_,
              _ajk_,
              _ajj_,
              _aji_,
              _ajh_]}
    function iter
     (name_fun,
      here_fun,
      id_fun,
      parent_fun,
      next_error_fun,
      handlers_for_all_errors_fun,
      tails_for_all_errors_fun,
      has_seen_error_fun,
      is_detached_fun)
     {caml_call1(name_fun,name$0);
      caml_call1(here_fun,here$6);
      caml_call1(id_fun,id$0);
      caml_call1(parent_fun,parent$0);
      caml_call1(next_error_fun,next_error$0);
      caml_call1(handlers_for_all_errors_fun,handlers_for_all_errors$0);
      caml_call1(tails_for_all_errors_fun,tails_for_all_errors$0);
      caml_call1(has_seen_error_fun,has_seen_error$0);
      return caml_call1(is_detached_fun,is_detached$0)}
    function fold
     (init,
      name_fun,
      here_fun,
      id_fun,
      parent_fun,
      next_error_fun,
      handlers_for_all_errors_fun,
      tails_for_all_errors_fun,
      has_seen_error_fun,
      is_detached_fun)
     {return caml_call2
              (is_detached_fun,
               caml_call2
                (has_seen_error_fun,
                 caml_call2
                  (tails_for_all_errors_fun,
                   caml_call2
                    (handlers_for_all_errors_fun,
                     caml_call2
                      (next_error_fun,
                       caml_call2
                        (parent_fun,
                         caml_call2
                          (id_fun,
                           caml_call2(here_fun,caml_call2(name_fun,init,name$0),here$6),
                           id$0),
                         parent$0),
                       next_error$0),
                     handlers_for_all_errors$0),
                   tails_for_all_errors$0),
                 has_seen_error$0),
               is_detached$0)}
    function map_poly(record)
     {var
       _ai$_=[0,caml_call1(record[1],is_detached$0),0],
       _aja_=[0,caml_call1(record[1],has_seen_error$0),_ai$_],
       _ajb_=[0,caml_call1(record[1],tails_for_all_errors$0),_aja_],
       _ajc_=[0,caml_call1(record[1],handlers_for_all_errors$0),_ajb_],
       _ajd_=[0,caml_call1(record[1],next_error$0),_ajc_],
       _aje_=[0,caml_call1(record[1],parent$0),_ajd_],
       _ajf_=[0,caml_call1(record[1],id$0),_aje_],
       _ajg_=[0,caml_call1(record[1],here$6),_ajf_];
      return [0,caml_call1(record[1],name$0),_ajg_]}
    function for_all
     (name_fun,
      here_fun,
      id_fun,
      parent_fun,
      next_error_fun,
      handlers_for_all_errors_fun,
      tails_for_all_errors_fun,
      has_seen_error_fun,
      is_detached_fun)
     {var
       _ai3_=caml_call1(name_fun,name$0),
       _ai4_=_ai3_?caml_call1(here_fun,here$6):_ai3_,
       _ai5_=_ai4_?caml_call1(id_fun,id$0):_ai4_,
       _ai6_=_ai5_?caml_call1(parent_fun,parent$0):_ai5_,
       _ai7_=_ai6_?caml_call1(next_error_fun,next_error$0):_ai6_,
       _ai8_=
        _ai7_
         ?caml_call1(handlers_for_all_errors_fun,handlers_for_all_errors$0)
         :_ai7_,
       _ai9_=
        _ai8_
         ?caml_call1(tails_for_all_errors_fun,tails_for_all_errors$0)
         :_ai8_,
       _ai__=_ai9_?caml_call1(has_seen_error_fun,has_seen_error$0):_ai9_;
      return _ai__?caml_call1(is_detached_fun,is_detached$0):_ai__}
    function exists
     (name_fun,
      here_fun,
      id_fun,
      parent_fun,
      next_error_fun,
      handlers_for_all_errors_fun,
      tails_for_all_errors_fun,
      has_seen_error_fun,
      is_detached_fun)
     {var
       _ai2_=caml_call1(name_fun,name$0),
       _aiV_=_ai2_ || caml_call1(here_fun,here$6),
       _aiW_=_aiV_ || caml_call1(id_fun,id$0),
       _aiX_=_aiW_ || caml_call1(parent_fun,parent$0),
       _aiY_=_aiX_ || caml_call1(next_error_fun,next_error$0),
       _aiZ_=
        _aiY_
        ||
        caml_call1(handlers_for_all_errors_fun,handlers_for_all_errors$0),
       _ai0_=
        _aiZ_
        ||
        caml_call1(tails_for_all_errors_fun,tails_for_all_errors$0),
       _ai1_=_ai0_ || caml_call1(has_seen_error_fun,has_seen_error$0);
      return _ai1_?_ai1_:caml_call1(is_detached_fun,is_detached$0)}
    function to_list
     (name_fun,
      here_fun,
      id_fun,
      parent_fun,
      next_error_fun,
      handlers_for_all_errors_fun,
      tails_for_all_errors_fun,
      has_seen_error_fun,
      is_detached_fun)
     {var
       _aiN_=[0,caml_call1(is_detached_fun,is_detached$0),0],
       _aiO_=[0,caml_call1(has_seen_error_fun,has_seen_error$0),_aiN_],
       _aiP_=
        [0,caml_call1(tails_for_all_errors_fun,tails_for_all_errors$0),_aiO_],
       _aiQ_=
        [0,
         caml_call1(handlers_for_all_errors_fun,handlers_for_all_errors$0),
         _aiP_],
       _aiR_=[0,caml_call1(next_error_fun,next_error$0),_aiQ_],
       _aiS_=[0,caml_call1(parent_fun,parent$0),_aiR_],
       _aiT_=[0,caml_call1(id_fun,id$0),_aiS_],
       _aiU_=[0,caml_call1(here_fun,here$6),_aiT_];
      return [0,caml_call1(name_fun,name$0),_aiU_]}
    function iter$0
     (record,
      name_fun,
      here_fun,
      id_fun,
      parent_fun,
      next_error_fun,
      handlers_for_all_errors_fun,
      tails_for_all_errors_fun,
      has_seen_error_fun,
      is_detached_fun)
     {caml_call3(name_fun,name$0,record,record[1]);
      caml_call3(here_fun,here$6,record,record[2]);
      caml_call3(id_fun,id$0,record,record[3]);
      caml_call3(parent_fun,parent$0,record,record[4]);
      caml_call3(next_error_fun,next_error$0,record,record[5]);
      caml_call3
       (handlers_for_all_errors_fun,
        handlers_for_all_errors$0,
        record,
        record[6]);
      caml_call3
       (tails_for_all_errors_fun,tails_for_all_errors$0,record,record[7]);
      caml_call3(has_seen_error_fun,has_seen_error$0,record,record[8]);
      return caml_call3(is_detached_fun,is_detached$0,record,record[9])}
    function fold$0
     (record,
      init,
      name_fun,
      here_fun,
      id_fun,
      parent_fun,
      next_error_fun,
      handlers_for_all_errors_fun,
      tails_for_all_errors_fun,
      has_seen_error_fun,
      is_detached_fun)
     {var
       _aiF_=record[9],
       _aiG_=record[8],
       _aiH_=record[7],
       _aiI_=record[6],
       _aiJ_=record[5],
       _aiK_=record[4],
       _aiL_=record[3],
       _aiM_=record[2];
      return caml_call4
              (is_detached_fun,
               caml_call4
                (has_seen_error_fun,
                 caml_call4
                  (tails_for_all_errors_fun,
                   caml_call4
                    (handlers_for_all_errors_fun,
                     caml_call4
                      (next_error_fun,
                       caml_call4
                        (parent_fun,
                         caml_call4
                          (id_fun,
                           caml_call4
                            (here_fun,
                             caml_call4(name_fun,init,name$0,record,record[1]),
                             here$6,
                             record,
                             _aiM_),
                           id$0,
                           record,
                           _aiL_),
                         parent$0,
                         record,
                         _aiK_),
                       next_error$0,
                       record,
                       _aiJ_),
                     handlers_for_all_errors$0,
                     record,
                     _aiI_),
                   tails_for_all_errors$0,
                   record,
                   _aiH_),
                 has_seen_error$0,
                 record,
                 _aiG_),
               is_detached$0,
               record,
               _aiF_)}
    function for_all$0
     (record,
      name_fun,
      here_fun,
      id_fun,
      parent_fun,
      next_error_fun,
      handlers_for_all_errors_fun,
      tails_for_all_errors_fun,
      has_seen_error_fun,
      is_detached_fun)
     {var
       _aix_=caml_call3(name_fun,name$0,record,record[1]),
       _aiy_=_aix_?caml_call3(here_fun,here$6,record,record[2]):_aix_,
       _aiz_=_aiy_?caml_call3(id_fun,id$0,record,record[3]):_aiy_,
       _aiA_=_aiz_?caml_call3(parent_fun,parent$0,record,record[4]):_aiz_,
       _aiB_=
        _aiA_?caml_call3(next_error_fun,next_error$0,record,record[5]):_aiA_,
       _aiC_=
        _aiB_
         ?caml_call3
           (handlers_for_all_errors_fun,
            handlers_for_all_errors$0,
            record,
            record[6])
         :_aiB_,
       _aiD_=
        _aiC_
         ?caml_call3
           (tails_for_all_errors_fun,tails_for_all_errors$0,record,record[7])
         :_aiC_,
       _aiE_=
        _aiD_
         ?caml_call3(has_seen_error_fun,has_seen_error$0,record,record[8])
         :_aiD_;
      return _aiE_
              ?caml_call3(is_detached_fun,is_detached$0,record,record[9])
              :_aiE_}
    function exists$0
     (record,
      name_fun,
      here_fun,
      id_fun,
      parent_fun,
      next_error_fun,
      handlers_for_all_errors_fun,
      tails_for_all_errors_fun,
      has_seen_error_fun,
      is_detached_fun)
     {var
       _aiw_=caml_call3(name_fun,name$0,record,record[1]),
       _aip_=_aiw_ || caml_call3(here_fun,here$6,record,record[2]),
       _aiq_=_aip_ || caml_call3(id_fun,id$0,record,record[3]),
       _air_=_aiq_ || caml_call3(parent_fun,parent$0,record,record[4]),
       _ais_=_air_ || caml_call3(next_error_fun,next_error$0,record,record[5]),
       _ait_=
        _ais_
        ||
        caml_call3
         (handlers_for_all_errors_fun,
          handlers_for_all_errors$0,
          record,
          record[6]),
       _aiu_=
        _ait_
        ||
        caml_call3
         (tails_for_all_errors_fun,tails_for_all_errors$0,record,record[7]),
       _aiv_=
        _aiu_
        ||
        caml_call3(has_seen_error_fun,has_seen_error$0,record,record[8]);
      return _aiv_
              ?_aiv_
              :caml_call3(is_detached_fun,is_detached$0,record,record[9])}
    function to_list$0
     (record,
      name_fun,
      here_fun,
      id_fun,
      parent_fun,
      next_error_fun,
      handlers_for_all_errors_fun,
      tails_for_all_errors_fun,
      has_seen_error_fun,
      is_detached_fun)
     {var
       _aih_=[0,caml_call3(is_detached_fun,is_detached$0,record,record[9]),0],
       _aii_=
        [0,
         caml_call3(has_seen_error_fun,has_seen_error$0,record,record[8]),
         _aih_],
       _aij_=
        [0,
         caml_call3
          (tails_for_all_errors_fun,tails_for_all_errors$0,record,record[7]),
         _aii_],
       _aik_=
        [0,
         caml_call3
          (handlers_for_all_errors_fun,
           handlers_for_all_errors$0,
           record,
           record[6]),
         _aij_],
       _ail_=
        [0,caml_call3(next_error_fun,next_error$0,record,record[5]),_aik_],
       _aim_=[0,caml_call3(parent_fun,parent$0,record,record[4]),_ail_],
       _ain_=[0,caml_call3(id_fun,id$0,record,record[3]),_aim_],
       _aio_=[0,caml_call3(here_fun,here$6,record,record[2]),_ain_];
      return [0,caml_call3(name_fun,name$0,record,record[1]),_aio_]}
    function map$0
     (record,
      name_fun,
      here_fun,
      id_fun,
      parent_fun,
      next_error_fun,
      handlers_for_all_errors_fun,
      tails_for_all_errors_fun,
      has_seen_error_fun,
      is_detached_fun)
     {var
       _ah$_=caml_call3(is_detached_fun,is_detached$0,record,record[9]),
       _aia_=caml_call3(has_seen_error_fun,has_seen_error$0,record,record[8]),
       _aib_=
        caml_call3
         (tails_for_all_errors_fun,tails_for_all_errors$0,record,record[7]),
       _aic_=
        caml_call3
         (handlers_for_all_errors_fun,
          handlers_for_all_errors$0,
          record,
          record[6]),
       _aid_=caml_call3(next_error_fun,next_error$0,record,record[5]),
       _aie_=caml_call3(parent_fun,parent$0,record,record[4]),
       _aif_=caml_call3(id_fun,id$0,record,record[3]),
       _aig_=caml_call3(here_fun,here$6,record,record[2]);
      return [0,
              caml_call3(name_fun,name$0,record,record[1]),
              _aig_,
              _aif_,
              _aie_,
              _aid_,
              _aic_,
              _aib_,
              _aia_,
              _ah$_]}
    function set_all_mutable_fields
     (record,
      next_error,
      handlers_for_all_errors,
      tails_for_all_errors,
      has_seen_error,
      is_detached)
     {record[5] = next_error;
      record[6] = handlers_for_all_errors;
      record[7] = tails_for_all_errors;
      record[8] = has_seen_error;
      record[9] = is_detached;
      return 0}
    var
     Direct=
      [0,
       iter$0,
       fold$0,
       for_all$0,
       exists$0,
       to_list$0,
       map$0,
       set_all_mutable_fields],
     Fields=
      [0,
       names,
       is_detached$0,
       has_seen_error$0,
       tails_for_all_errors$0,
       handlers_for_all_errors$0,
       next_error$0,
       parent$0,
       id$0,
       here$6,
       name$0,
       make_creator,
       create,
       map,
       iter,
       fold,
       map_poly,
       for_all,
       exists,
       to_list,
       Direct];
    function sexp_of_one(param)
     {var
       v_is_detached=param[5],
       v_has_seen_error=param[4],
       v_id=param[3],
       v_here=param[2],
       v_name=param[1],
       arg=caml_call1(Core_kernel[410],v_is_detached),
       bnds=[0,[1,[0,_dQ_,[0,arg,0]]],0],
       arg$0=caml_call1(Core_kernel[410],v_has_seen_error),
       bnds$0=[0,[1,[0,_dR_,[0,arg$0,0]]],bnds],
       arg$1=caml_call1(Core_kernel[455],v_id),
       bnds$1=[0,[1,[0,_dS_,[0,arg$1,0]]],bnds$0],
       arg$2=
        caml_call2
         (Core_kernel[542],Core_kernel_Source_code_position[1],v_here),
       bnds$2=[0,[1,[0,_dT_,[0,arg$2,0]]],bnds$1],
       arg$3=caml_call1(Core_kernel_Info[5],v_name),
       bnds$3=[0,[1,[0,_dU_,[0,arg$3,0]]],bnds$2];
      return [1,bnds$3]}
    function sexp_of_t$12(v)
     {return caml_call2(Core_kernel[513],sexp_of_one,v)}
    var Pretty=[0,sexp_of_one,sexp_of_t$12];
    function loop(param)
     {var
       parent=param[4],
       id=param[3],
       here=param[2],
       name=param[1],
       has_seen_error=param[8],
       is_detached=param[9];
      return function(ac)
       {var ac$0=[0,[0,name,here,id,has_seen_error,is_detached],ac];
        if(parent){var t=parent[1];return caml_call1(loop(t),ac$0)}
        return caml_call1(Core_kernel_List[47],ac$0)}}
    function to_pretty(t){return caml_call1(loop(t),0)}
    function sexp_of_monitor(t)
     {var _ah__=to_pretty(t);return caml_call1(Pretty[2],_ah__)}
    var r=[0,0];
    function next_id(param){r[1]++;return r[1]}
    function create_with_parent(here,info,match,parent)
     {var id=next_id(0);
      if(info)
       {var _ah8_=info[1];
        if(match)
         var s=match[1],_ah9_=caml_call2(Core_kernel_Info[16],_ah8_,s);
        else
         var _ah9_=_ah8_;
        var name=_ah9_}
      else
       if(match)
        var s$0=match[1],name=caml_call1(Core_kernel_Info[10],s$0);
       else
        var
         name=
          caml_call5(Core_kernel_Info[13],0,0,cst_id$0,id,Core_kernel[455]);
      var
       t=
        [0,name,here,id,parent,[0,0],caml_call1(Core_kernel_Bag[22],0),0,0,0];
      if(_cs_)log(cst_created_monitor,t,sexp_of_monitor);
      return t}
    var main=create_with_parent(0,0,_dV_,0);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$22);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     include$8=
      [0,
       _cs_,
       is_detached,
       set_is_detached,
       has_seen_error,
       set_has_seen_error,
       tails_for_all_errors,
       set_tails_for_all_errors,
       handlers_for_all_errors,
       set_handlers_for_all_errors,
       next_error,
       set_next_error,
       parent,
       id,
       here$5,
       name,
       Fields,
       Pretty,
       to_pretty,
       sexp_of_monitor,
       next_id,
       create_with_parent,
       main];
    caml_register_global(2626,include$8,"Async_kernel__Monitor0");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_async_kernel$23);
    caml_call1(Expect_test_collector[4][1],cst_src_execution_context_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$24,cst$11);
    function backtrace_history(r){return r[4]}
    function local_storage(r){return r[3]}
    function priority(r){return r[2]}
    function monitor$0(r){return r[1]}
    function _dW_(r,v){return [0,r[1],r[2],r[3],v]}
    var
     _dX_=0,
     backtrace_history$0=
      [0,
       [0,
        function(param){return 0},
        cst_backtrace_history,
        _dX_,
        backtrace_history,
        _dW_]];
    function _dY_(r,v){return [0,r[1],r[2],v,r[4]]}
    var
     _dZ_=0,
     local_storage$0=
      [0,
       [0,function(param){return 0},cst_local_storage,_dZ_,local_storage,_dY_]];
    function _d0_(r,v){return [0,r[1],v,r[3],r[4]]}
    var
     _d1_=0,
     priority$0=
      [0,[0,function(param){return 0},cst_priority,_d1_,priority,_d0_]];
    function _d2_(r,v){return [0,v,r[2],r[3],r[4]]}
    var
     _d3_=0,
     monitor$1=
      [0,[0,function(param){return 0},cst_monitor$1,_d3_,monitor$0,_d2_]];
    function make_creator$0
     (monitor_fun,
      priority_fun,
      local_storage_fun,
      backtrace_history_fun,
      compile_acc)
     {var
       match=caml_call2(monitor_fun,monitor$1,compile_acc),
       compile_acc$0=match[2],
       monitor_gen=match[1],
       match$0=caml_call2(priority_fun,priority$0,compile_acc$0),
       compile_acc$1=match$0[2],
       priority_gen=match$0[1],
       match$1=caml_call2(local_storage_fun,local_storage$0,compile_acc$1),
       compile_acc$2=match$1[2],
       local_storage_gen=match$1[1],
       match$2=
        caml_call2(backtrace_history_fun,backtrace_history$0,compile_acc$2),
       compile_acc$3=match$2[2],
       backtrace_history_gen=match$2[1];
      return [0,
              function(acc)
               {var
                 monitor=caml_call1(monitor_gen,acc),
                 priority=caml_call1(priority_gen,acc),
                 local_storage=caml_call1(local_storage_gen,acc),
                 backtrace_history=caml_call1(backtrace_history_gen,acc);
                return [0,monitor,priority,local_storage,backtrace_history]},
              compile_acc$3]}
    function create$0(monitor,priority,local_storage,backtrace_history)
     {return [0,monitor,priority,local_storage,backtrace_history]}
    function map$1
     (monitor_fun,priority_fun,local_storage_fun,backtrace_history_fun)
     {var
       _ah5_=caml_call1(backtrace_history_fun,backtrace_history$0),
       _ah6_=caml_call1(local_storage_fun,local_storage$0),
       _ah7_=caml_call1(priority_fun,priority$0);
      return [0,caml_call1(monitor_fun,monitor$1),_ah7_,_ah6_,_ah5_]}
    function iter$1
     (monitor_fun,priority_fun,local_storage_fun,backtrace_history_fun)
     {caml_call1(monitor_fun,monitor$1);
      caml_call1(priority_fun,priority$0);
      caml_call1(local_storage_fun,local_storage$0);
      return caml_call1(backtrace_history_fun,backtrace_history$0)}
    function fold$1
     (init,monitor_fun,priority_fun,local_storage_fun,backtrace_history_fun)
     {return caml_call2
              (backtrace_history_fun,
               caml_call2
                (local_storage_fun,
                 caml_call2
                  (priority_fun,
                   caml_call2(monitor_fun,init,monitor$1),
                   priority$0),
                 local_storage$0),
               backtrace_history$0)}
    function map_poly$0(record)
     {var
       _ah2_=[0,caml_call1(record[1],backtrace_history$0),0],
       _ah3_=[0,caml_call1(record[1],local_storage$0),_ah2_],
       _ah4_=[0,caml_call1(record[1],priority$0),_ah3_];
      return [0,caml_call1(record[1],monitor$1),_ah4_]}
    function for_all$1
     (monitor_fun,priority_fun,local_storage_fun,backtrace_history_fun)
     {var
       _ahZ_=caml_call1(monitor_fun,monitor$1),
       _ah0_=_ahZ_?caml_call1(priority_fun,priority$0):_ahZ_,
       _ah1_=_ah0_?caml_call1(local_storage_fun,local_storage$0):_ah0_;
      return _ah1_?caml_call1(backtrace_history_fun,backtrace_history$0):_ah1_}
    function exists$1
     (monitor_fun,priority_fun,local_storage_fun,backtrace_history_fun)
     {var
       _ahY_=caml_call1(monitor_fun,monitor$1),
       _ahW_=_ahY_ || caml_call1(priority_fun,priority$0),
       _ahX_=_ahW_ || caml_call1(local_storage_fun,local_storage$0);
      return _ahX_?_ahX_:caml_call1(backtrace_history_fun,backtrace_history$0)}
    function to_list$1
     (monitor_fun,priority_fun,local_storage_fun,backtrace_history_fun)
     {var
       _ahT_=[0,caml_call1(backtrace_history_fun,backtrace_history$0),0],
       _ahU_=[0,caml_call1(local_storage_fun,local_storage$0),_ahT_],
       _ahV_=[0,caml_call1(priority_fun,priority$0),_ahU_];
      return [0,caml_call1(monitor_fun,monitor$1),_ahV_]}
    function iter$2
     (record,monitor_fun,priority_fun,local_storage_fun,backtrace_history_fun)
     {caml_call3(monitor_fun,monitor$1,record,record[1]);
      caml_call3(priority_fun,priority$0,record,record[2]);
      caml_call3(local_storage_fun,local_storage$0,record,record[3]);
      return caml_call3
              (backtrace_history_fun,backtrace_history$0,record,record[4])}
    function fold$2
     (record,
      init,
      monitor_fun,
      priority_fun,
      local_storage_fun,
      backtrace_history_fun)
     {var _ahQ_=record[4],_ahR_=record[3],_ahS_=record[2];
      return caml_call4
              (backtrace_history_fun,
               caml_call4
                (local_storage_fun,
                 caml_call4
                  (priority_fun,
                   caml_call4(monitor_fun,init,monitor$1,record,record[1]),
                   priority$0,
                   record,
                   _ahS_),
                 local_storage$0,
                 record,
                 _ahR_),
               backtrace_history$0,
               record,
               _ahQ_)}
    function for_all$2
     (record,monitor_fun,priority_fun,local_storage_fun,backtrace_history_fun)
     {var
       _ahN_=caml_call3(monitor_fun,monitor$1,record,record[1]),
       _ahO_=_ahN_?caml_call3(priority_fun,priority$0,record,record[2]):_ahN_,
       _ahP_=
        _ahO_
         ?caml_call3(local_storage_fun,local_storage$0,record,record[3])
         :_ahO_;
      return _ahP_
              ?caml_call3
                (backtrace_history_fun,backtrace_history$0,record,record[4])
              :_ahP_}
    function exists$2
     (record,monitor_fun,priority_fun,local_storage_fun,backtrace_history_fun)
     {var
       _ahM_=caml_call3(monitor_fun,monitor$1,record,record[1]),
       _ahK_=_ahM_ || caml_call3(priority_fun,priority$0,record,record[2]),
       _ahL_=
        _ahK_
        ||
        caml_call3(local_storage_fun,local_storage$0,record,record[3]);
      return _ahL_
              ?_ahL_
              :caml_call3
                (backtrace_history_fun,backtrace_history$0,record,record[4])}
    function to_list$2
     (record,monitor_fun,priority_fun,local_storage_fun,backtrace_history_fun)
     {var
       _ahH_=
        [0,
         caml_call3
          (backtrace_history_fun,backtrace_history$0,record,record[4]),
         0],
       _ahI_=
        [0,
         caml_call3(local_storage_fun,local_storage$0,record,record[3]),
         _ahH_],
       _ahJ_=[0,caml_call3(priority_fun,priority$0,record,record[2]),_ahI_];
      return [0,caml_call3(monitor_fun,monitor$1,record,record[1]),_ahJ_]}
    function map$2
     (record,monitor_fun,priority_fun,local_storage_fun,backtrace_history_fun)
     {var
       _ahE_=
        caml_call3(backtrace_history_fun,backtrace_history$0,record,record[4]),
       _ahF_=caml_call3(local_storage_fun,local_storage$0,record,record[3]),
       _ahG_=caml_call3(priority_fun,priority$0,record,record[2]);
      return [0,
              caml_call3(monitor_fun,monitor$1,record,record[1]),
              _ahG_,
              _ahF_,
              _ahE_]}
    function set_all_mutable_fields$0(record){return 0}
    var
     Direct$0=
      [0,
       iter$2,
       fold$2,
       for_all$2,
       exists$2,
       to_list$2,
       map$2,
       set_all_mutable_fields$0];
    function sexp_of_t$13(param)
     {var
       v_backtrace_history=param[4],
       v_local_storage=param[3],
       v_priority=param[2],
       v_monitor=param[1],
       arg=caml_call2(Core_kernel[513],Base_Backtrace[1],v_backtrace_history),
       bnds=[0,[1,[0,_d4_,[0,arg,0]]],0],
       arg$0=caml_call1(Core_kernel_Univ_map[2],v_local_storage),
       bnds$0=[0,[1,[0,_d5_,[0,arg$0,0]]],bnds],
       arg$1=sexp_of_t$11(v_priority),
       bnds$1=[0,[1,[0,_d6_,[0,arg$1,0]]],bnds$0],
       arg$2=sexp_of_monitor(v_monitor),
       bnds$2=[0,[1,[0,_d7_,[0,arg$2,0]]],bnds$1];
      return [1,bnds$2]}
    function f(param){return 0}
    var execution_context=[0,main,normal,Core_kernel_Univ_map[4],0];
    function create_like(monitor,priority,local_storage,t)
     {var
       monitor$0=caml_call2(Core_kernel_Option[51],monitor,t[1]),
       _ahC_=t[4],
       _ahD_=caml_call2(Core_kernel_Option[51],local_storage,t[3]);
      return [0,
              monitor$0,
              caml_call2(Core_kernel_Option[51],priority,t[2]),
              _ahD_,
              _ahC_]}
    function find_local(t,key)
     {return caml_call2(Core_kernel_Univ_map[9],t[3],key)}
    function with_local(init,key,data)
     {var _ahz_=init[4];
      function _ahA_(param){return data}
      var _ahB_=caml_call3(Core_kernel_Univ_map[13],init[3],key,_ahA_);
      return [0,init[1],init[2],_ahB_,_ahz_]}
    function record_backtrace(init)
     {var _ahx_=init[4],_ahy_=[0,caml_call2(Base_Backtrace[2],0,0),_ahx_];
      return [0,init[1],init[2],init[3],_ahy_]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$25);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Async_kernel_Execution_context=
      [0,
       backtrace_history,
       local_storage,
       priority,
       monitor$0,
       [0,
        names$0,
        backtrace_history$0,
        local_storage$0,
        priority$0,
        monitor$1,
        fold$1,
        make_creator$0,
        create$0,
        map$1,
        iter$1,
        for_all$1,
        exists$1,
        to_list$1,
        map_poly$0,
        Direct$0],
       sexp_of_t$13,
       f,
       execution_context,
       create_like,
       find_local,
       with_local,
       record_backtrace];
    caml_register_global
     (2629,Async_kernel_Execution_context,"Async_kernel__Execution_context");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_async_kernel$26);
    caml_call1(Expect_test_collector[4][1],cst_src_external_job_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$27,cst$12);
    function sexp_of_t$14(param){return _d8_}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$28);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Async_kernel_External_job=[0,sexp_of_t$14];
    caml_register_global
     (2630,Async_kernel_External_job,"Async_kernel__External_job");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_async_kernel$29);
    caml_call1(Expect_test_collector[4][1],cst_src_job_pool_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$30,cst$13);
    function dummy_f(_ahw_){return 0}
    var dummy_a=0;
    function sexp_of_slots(v)
     {var _ahs_=Sexplib0_Sexp_conv[23];
      function _aht_(f)
       {function _ahu_(_ahv_){return 0}
        return caml_call1(Sexplib0_Sexp_conv[24],_ahu_)}
      return caml_call4(Core_kernel_Pool[2][5],sexp_of_t$13,_aht_,_ahs_,v)}
    function sexp_of_t$15(v)
     {return caml_call2(Core_kernel_Pool[5],sexp_of_slots,v)}
    function invariant(t)
     {function _ahq_(_ahr_){return 0}
      return caml_call2(Core_kernel_Pool[6],_ahq_,t)}
    function create$1(param)
     {return caml_call3
              (Core_kernel_Pool[10],
               Core_kernel_Pool[2][19],
               1,
               [0,execution_context,dummy_f,dummy_a])}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$31);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Async_kernel_Job_pool=
      [0,sexp_of_slots,sexp_of_t$15,invariant,create$1];
    caml_register_global(2632,Async_kernel_Job_pool,"Async_kernel__Job_pool");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_async_kernel$32);
    caml_call1(Expect_test_collector[4][1],cst_src_job_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$33,cst$14);
    function sexp_of_t$16(v)
     {return caml_call2(Core_kernel_Pool[4][1],sexp_of_slots,v)}
    function invariant$0(param){return 0}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$34);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Async_kernel_Job=[0,sexp_of_t$16,invariant$0];
    caml_register_global(2633,Async_kernel_Job,"Async_kernel__Job");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_async_kernel$35);
    caml_call1(Expect_test_collector[4][1],cst_src_job_or_event_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$36,cst$15);
    function of_event(event){return event}
    function of_job(job){return job}
    function is_event(t){return caml_call1(Stdlib_obj[1],t)}
    function is_job(t){return typeof t === "number"}
    function kind(t){return is_event(t)?_d9_:_d__}
    function project(param,job_or_event){return job_or_event}
    var Match=[0,kind,project];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$37);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var include$9=[0,of_event,of_job,is_event,is_job,Match];
    caml_register_global(2635,include$9,"Async_kernel__Job_or_event");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_async_kernel$38);
    caml_call1(Expect_test_collector[4][1],cst_src_job_or_event_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$39,cst$16);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$40);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Async_kernel_Job_or_event_intf=[0,0];
    caml_register_global
     (2636,Async_kernel_Job_or_event_intf,"Async_kernel__Job_or_event_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_async_kernel$41);
    caml_call1(Expect_test_collector[4][1],cst_src_scheduler0_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$42,cst$17);
    function events(t){return t[14][3]}
    function set_execution_context(t,execution_context)
     {var
       _aho_=1 - caml_call2(Core_kernel[359],t[7],execution_context),
       _ahp_=_aho_?(t[7] = execution_context,0):_aho_;
      return _ahp_}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$43);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var include$10=[0,events,set_execution_context];
    caml_register_global(2637,include$10,"Async_kernel__Scheduler0");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_async_kernel$44);
    caml_call1(Expect_test_collector[4][1],cst_src_job_queue_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$45,cst$18);
    var Scheduler$0=0;
    function dummy_f$0(_ahn_){return 0}
    var dummy_a$0=0;
    function length(r){return r[6]}
    function set_length(r,v){r[6] = v;return 0}
    function front(r){return r[5]}
    function set_front(r,v){r[5] = v;return 0}
    function mask(r){return r[4]}
    function set_mask(r,v){r[4] = v;return 0}
    function jobs(r){return r[3]}
    function set_jobs(r,v){r[3] = v;return 0}
    function jobs_left_this_cycle(r){return r[2]}
    function set_jobs_left_this_cycle(r,v){r[2] = v;return 0}
    function num_jobs_run(r){return r[1]}
    function set_num_jobs_run(r,v){r[1] = v;return 0}
    function _d$_(r,v){return [0,r[1],r[2],r[3],r[4],r[5],v]}
    var
     _ea_=[0,set_length],
     length$0=[0,[0,function(param){return 0},cst_length,_ea_,length,_d$_]];
    function _eb_(r,v){return [0,r[1],r[2],r[3],r[4],v,r[6]]}
    var
     _ec_=[0,set_front],
     front$0=[0,[0,function(param){return 0},cst_front,_ec_,front,_eb_]];
    function _ed_(r,v){return [0,r[1],r[2],r[3],v,r[5],r[6]]}
    var
     _ee_=[0,set_mask],
     mask$0=[0,[0,function(param){return 0},cst_mask,_ee_,mask,_ed_]];
    function _ef_(r,v){return [0,r[1],r[2],v,r[4],r[5],r[6]]}
    var
     _eg_=[0,set_jobs],
     jobs$0=[0,[0,function(param){return 0},cst_jobs,_eg_,jobs,_ef_]];
    function _eh_(r,v){return [0,r[1],v,r[3],r[4],r[5],r[6]]}
    var
     _ei_=[0,set_jobs_left_this_cycle],
     jobs_left_this_cycle$0=
      [0,
       [0,
        function(param){return 0},
        cst_jobs_left_this_cycle,
        _ei_,
        jobs_left_this_cycle,
        _eh_]];
    function _ej_(r,v){return [0,v,r[2],r[3],r[4],r[5],r[6]]}
    var
     _ek_=[0,set_num_jobs_run],
     num_jobs_run$0=
      [0,
       [0,function(param){return 0},cst_num_jobs_run,_ek_,num_jobs_run,_ej_]];
    function sexp_of_t$17(param)
     {var
       v_num_jobs_run=param[1],
       v_jobs_left_this_cycle=param[2],
       v_jobs=param[3],
       v_mask=param[4],
       v_front=param[5],
       v_length=param[6],
       arg=caml_call1(Core_kernel[455],v_length),
       bnds=[0,[1,[0,_el_,[0,arg,0]]],0],
       arg$0=caml_call1(Core_kernel[455],v_front),
       bnds$0=[0,[1,[0,_em_,[0,arg$0,0]]],bnds],
       arg$1=caml_call1(Core_kernel[455],v_mask),
       bnds$1=[0,[1,[0,_en_,[0,arg$1,0]]],bnds$0],
       arg$2=caml_call1(Base_Obj_array[1],v_jobs),
       bnds$2=[0,[1,[0,_eo_,[0,arg$2,0]]],bnds$1],
       arg$3=caml_call1(Core_kernel[455],v_jobs_left_this_cycle),
       bnds$3=[0,[1,[0,_ep_,[0,arg$3,0]]],bnds$2],
       arg$4=caml_call1(Core_kernel[455],v_num_jobs_run),
       bnds$4=[0,[1,[0,_eq_,[0,arg$4,0]]],bnds$3];
      return [1,bnds$4]}
    function offset(t,i){return ((t[5] + i | 0) & t[4]) * 3 | 0}
    function capacity(t){return t[4] + 1 | 0}
    function invariant$1(t)
     {function _ahi_(param)
       {function check(f){return caml_call2(include$11[2],t,f)}
        var
         length_fun=
          check
           (function(length)
             {if(0 <= length)
               {if(length <= capacity(t))return 0;
                throw [0,Assert_failure,_er_]}
              throw [0,Assert_failure,_es_]}),
         front_fun=
          check
           (function(front)
             {if(0 <= front)
               {if(front < capacity(t))return 0;throw [0,Assert_failure,_et_]}
              throw [0,Assert_failure,_eu_]}),
         mask_fun=
          check
           (function(mask)
             {var capacity=mask + 1 | 0;
              if(caml_call1(Core_kernel_Int[71],capacity))
               {if((capacity * 3 | 0) === caml_call1(Base_Obj_array[13],t[3]))
                 return 0;
                throw [0,Assert_failure,_ev_]}
              throw [0,Assert_failure,_ew_]}),
         jobs_fun=
          check
           (function(jobs)
             {var _ahk_=t[6] - 1 | 0,_ahj_=0;
              if(! (_ahk_ < 0))
               {var i=_ahj_;
                for(;;)
                 {var _ahl_=offset(t,i);
                  caml_call2(Base_Obj_array[14],jobs,_ahl_);
                  var _ahm_=i + 1 | 0;
                  if(_ahk_ !== i){var i=_ahm_;continue}
                  break}}
              return 0}),
         jobs_left_this_cycle_fun=
          check
           (function(jobs_left_this_cycle)
             {if(0 <= jobs_left_this_cycle)return 0;
              throw [0,Assert_failure,_ex_]}),
         num_jobs_run_fun=
          check
           (function(num_jobs_run)
             {if(0 <= num_jobs_run)return 0;throw [0,Assert_failure,_ey_]});
        caml_call1(num_jobs_run_fun,num_jobs_run$0);
        caml_call1(jobs_left_this_cycle_fun,jobs_left_this_cycle$0);
        caml_call1(jobs_fun,jobs$0);
        caml_call1(mask_fun,mask$0);
        caml_call1(front_fun,front$0);
        return caml_call1(length_fun,length$0)}
      return caml_call4(include$11[1],_ez_,t,sexp_of_t$17,_ahi_)}
    function create_array(capacity)
     {return caml_call1(Base_Obj_array[9],capacity * 3 | 0)}
    function create$2(param){return [0,0,0,create_array(1),0,0,0]}
    function clear(t){t[5] = 0;t[6] = 0;t[2] = 0;return 0}
    function set(t,i,execution_context,f,a)
     {var offset$0=offset(t,i);
      caml_call3(Base_Obj_array[17],t[3],offset$0,execution_context);
      caml_call3(Base_Obj_array[17],t[3],offset$0 + 1 | 0,f);
      return caml_call3(Base_Obj_array[17],t[3],offset$0 + 2 | 0,a)}
    function enqueue(t,execution_context,f,a)
     {var _ahh_=capacity(t);
      if(t[6] === _ahh_)
       {var
         old_capacity=capacity(t),
         new_capacity=old_capacity * 2 | 0,
         old_jobs=t[3],
         old_front=t[5],
         len1=
          caml_call2(Core_kernel_Int[108],t[6],old_capacity - old_front | 0)
          *
          3
          |
          0,
         len2=(t[6] * 3 | 0) - len1 | 0,
         new_jobs=create_array(new_capacity);
        caml_call5
         (Base_Obj_array[2],old_jobs,old_front * 3 | 0,new_jobs,0,len1);
        caml_call5(Base_Obj_array[2],old_jobs,0,new_jobs,len1,len2);
        t[4] = new_capacity - 1 | 0;
        t[3] = new_jobs;
        t[5] = 0}
      set(t,t[6],execution_context,f,a);
      t[6] = t[6] + 1 | 0;
      return 0}
    function set_jobs_left_this_cycle$0(t,n)
     {if(n < 0)
       {var
         _ahe_=[0,[1,[0,_eA_,[0,sexp_of_t$17(t),0]]],0],
         _ahf_=[0,[1,[0,_eB_,[0,caml_call1(Core_kernel[455],n),0]]],_ahe_],
         _ahg_=
          [1,
           [0,
            caml_call1
             (Sexplib0_Sexp_conv[7],
              cst_Jobs_set_jobs_left_this_cycle_got_negative_number),
            _ahf_]];
        caml_call1(Core_kernel[364],_ahg_)}
      t[2] = n;
      return 0}
    function can_run_a_job(t)
     {var _ahc_=0 < t[6]?1:0,_ahd_=_ahc_?0 < t[2]?1:0:_ahc_;return _ahd_}
    function run_job(t,scheduler,execution_context,f,a)
     {t[1] = t[1] + 1 | 0;
      set_execution_context(scheduler,execution_context);
      return caml_call1(f,a)}
    function run_external_jobs(t,scheduler)
     {var external_jobs=scheduler[15];
      for(;;)
       {if(0 < caml_call1(Core_kernel_Thread_safe_queue[4],external_jobs))
         {var
           match=caml_call1(Core_kernel_Thread_safe_queue[6],external_jobs),
           a=match[3],
           f=match[2],
           execution_context=match[1];
          run_job(t,scheduler,execution_context,f,a);
          continue}
        return 0}}
    function run_jobs(t,scheduler)
     {try
       {run_external_jobs(t,scheduler);
        for(;;)
         {if(can_run_a_job(t))
           {var
             this_job=offset(t,0),
             execution_context$0=caml_call2(Base_Obj_array[15],t[3],this_job),
             f=caml_call2(Base_Obj_array[15],t[3],this_job + 1 | 0),
             a=caml_call2(Base_Obj_array[15],t[3],this_job + 2 | 0);
            set(t,0,execution_context,dummy_f$0,dummy_a$0);
            t[5] = (t[5] + 1 | 0) & t[4];
            t[6] = t[6] - 1 | 0;
            t[2] = t[2] - 1 | 0;
            run_job(t,scheduler,execution_context$0,f,a);
            run_external_jobs(t,scheduler);
            continue}
          var _ahb_=Core_kernel_Result[44];
          return _ahb_}}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        var backtrace=caml_call1(Base_Backtrace[6][4],0);
        return [1,[0,exn,backtrace]]}}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$46);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Async_kernel_Job_queue=
      [0,
       Scheduler$0,
       sexp_of_t$17,
       invariant$1,
       create$2,
       enqueue,
       clear,
       set_jobs_left_this_cycle$0,
       can_run_a_job,
       length,
       run_jobs,
       num_jobs_run];
    caml_register_global
     (2642,Async_kernel_Job_queue,"Async_kernel__Job_queue");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_async_kernel$47);
    caml_call1
     (Expect_test_collector[4][1],cst_src_synchronous_time_source0_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$48,cst$19);
    function sexp_of_t$18(t)
     {var
       _ag$_=caml_call1(_F_,t),
       _aha_=
        runtime.core_kernel_time_ns_format
         (caml_call1(include[44][52],_ag$_),cst_Y_m_dT_H_M_S_z);
      return caml_call1(Core_kernel[557],_aha_)}
    var
     Time_ns$0=
      [0,
       _a_,
       _b_,
       _c_,
       _d_,
       _e_,
       _f_,
       _g_,
       _h_,
       _i_,
       _j_,
       _k_,
       _l_,
       _m_,
       _n_,
       _o_,
       _p_,
       _q_,
       _r_,
       _s_,
       _t_,
       _u_,
       _v_,
       _w_,
       _x_,
       _y_,
       _z_,
       _A_,
       _B_,
       _C_,
       _D_,
       _E_,
       _F_,
       _G_,
       _H_,
       _I_,
       _J_,
       _K_,
       _L_,
       _M_,
       _N_,
       _O_,
       _P_,
       _R_,
       after,
       sexp_of_t$18],
     include$12=include$1[6],
     sexp_of_t$19=include$12[1],
     null$0=include$12[2],
     at=include$12[3],
     interval_num=include$12[4],
     value=include$12[5];
    function is_null(t)
     {var _ag__=caml_call1(null$0,0);
      return caml_call2(Core_kernel[359],t,_ag__)}
    var
     Alarm=[0,sexp_of_t$19,null$0,at,interval_num,value,is_null],
     _eC_=caml_call2(include$1[2][13],include$1[2][10],3),
     _eE_=[0,caml_call1(include$1[8][5],_eD_)],
     default_timing_wheel_config$0=caml_call3(include$1[9][4],_eE_,_eC_,0),
     Alarm_precision=0;
    function compare(a_001,b_002)
     {if(caml_call2(Ppx_compare_lib[1],a_001,b_002))return 0;
      switch(a_001)
       {case 0:return 0 === b_002?0:-1;
        case 1:
         if(1 === b_002)return 0;
         if(0 !== b_002)return -1;
         var switch$0=0;
         break;
        case 2:
         switch(b_002)
          {case 2:return 0;
           case 0:var switch$0=0;break;
           case 1:var switch$0=1;break;
           default:return -1}
         break;
        case 3:
         switch(b_002)
          {case 3:return 0;
           case 4:return -1;
           case 0:var switch$0=0;break;
           case 1:var switch$0=1;break;
           default:var switch$0=2}
         break;
        default:
         switch(b_002)
          {case 3:return 1;
           case 4:return 0;
           case 0:var switch$0=0;break;
           case 1:var switch$0=1;break;
           default:var switch$0=2}}
      switch(switch$0){case 0:return 1;case 1:return 1;default:return 1}}
    function sexp_of_t$20(param)
     {switch(param)
       {case 0:return _eF_;
        case 1:return _eG_;
        case 2:return _eH_;
        case 3:return _eI_;
        default:return _eJ_}}
    function transition_is_allowed(from,to)
     {switch(from)
       {case 1:var switch$0=1 === to?0:3 <= to?0:1;break;
        case 2:var switch$0=3 <= to?1:0;break;
        case 4:var switch$0=2 <= to?0:1;break;
        default:var switch$0=0}
      return switch$0?1:0}
    var Status=[0,compare,sexp_of_t$20,transition_is_allowed];
    function status(r){return r[7]}
    function set_status(r,v){r[7] = v;return 0}
    function next_fired(r){return r[6]}
    function set_next_fired(r,v){r[6] = v;return 0}
    function interval(r){return r[5]}
    function set_interval(r,v){r[5] = v;return 0}
    function execution_context$0(r){return r[4]}
    function callback(r){return r[3]}
    function at$0(r){return r[2]}
    function set_at(r,v){r[2] = v;return 0}
    function alarm(r){return r[1]}
    function set_alarm(r,v){r[1] = v;return 0}
    function _eK_(r,v){return [0,r[1],r[2],r[3],r[4],r[5],r[6],v]}
    var
     _eL_=[0,set_status],
     status$0=[0,[0,function(param){return 0},cst_status,_eL_,status,_eK_]];
    function _eM_(r,v){return [0,r[1],r[2],r[3],r[4],r[5],v,r[7]]}
    var
     _eN_=[0,set_next_fired],
     next_fired$0=
      [0,[0,function(param){return 0},cst_next_fired,_eN_,next_fired,_eM_]];
    function _eO_(r,v){return [0,r[1],r[2],r[3],r[4],v,r[6],r[7]]}
    var
     _eP_=[0,set_interval],
     interval$0=
      [0,[0,function(param){return 0},cst_interval,_eP_,interval,_eO_]];
    function _eQ_(r,v){return [0,r[1],r[2],r[3],v,r[5],r[6],r[7]]}
    var
     _eR_=0,
     execution_context$1=
      [0,
       [0,
        function(param){return 0},
        cst_execution_context,
        _eR_,
        execution_context$0,
        _eQ_]];
    function _eS_(r,v){return [0,r[1],r[2],v,r[4],r[5],r[6],r[7]]}
    var
     _eT_=0,
     callback$0=
      [0,[0,function(param){return 0},cst_callback,_eT_,callback,_eS_]];
    function _eU_(r,v){return [0,r[1],v,r[3],r[4],r[5],r[6],r[7]]}
    var
     _eV_=[0,set_at],
     at$1=[0,[0,function(param){return 0},cst_at,_eV_,at$0,_eU_]];
    function _eW_(r,v){return [0,v,r[2],r[3],r[4],r[5],r[6],r[7]]}
    var
     _eX_=[0,set_alarm],
     alarm$0=[0,[0,function(param){return 0},cst_alarm,_eX_,alarm,_eW_]];
    function make_creator$1
     (alarm_fun,
      at_fun,
      callback_fun,
      execution_context_fun,
      interval_fun,
      next_fired_fun,
      status_fun,
      compile_acc)
     {var
       match=caml_call2(alarm_fun,alarm$0,compile_acc),
       compile_acc$0=match[2],
       alarm_gen=match[1],
       match$0=caml_call2(at_fun,at$1,compile_acc$0),
       compile_acc$1=match$0[2],
       at_gen=match$0[1],
       match$1=caml_call2(callback_fun,callback$0,compile_acc$1),
       compile_acc$2=match$1[2],
       callback_gen=match$1[1],
       match$2=
        caml_call2(execution_context_fun,execution_context$1,compile_acc$2),
       compile_acc$3=match$2[2],
       execution_context_gen=match$2[1],
       match$3=caml_call2(interval_fun,interval$0,compile_acc$3),
       compile_acc$4=match$3[2],
       interval_gen=match$3[1],
       match$4=caml_call2(next_fired_fun,next_fired$0,compile_acc$4),
       compile_acc$5=match$4[2],
       next_fired_gen=match$4[1],
       match$5=caml_call2(status_fun,status$0,compile_acc$5),
       compile_acc$6=match$5[2],
       status_gen=match$5[1];
      return [0,
              function(acc)
               {var
                 alarm=caml_call1(alarm_gen,acc),
                 at=caml_call1(at_gen,acc),
                 callback=caml_call1(callback_gen,acc),
                 execution_context=caml_call1(execution_context_gen,acc),
                 interval=caml_call1(interval_gen,acc),
                 next_fired=caml_call1(next_fired_gen,acc),
                 status=caml_call1(status_gen,acc);
                return [0,
                        alarm,
                        at,
                        callback,
                        execution_context,
                        interval,
                        next_fired,
                        status]},
              compile_acc$6]}
    function create$3
     (alarm,at,callback,execution_context,interval,next_fired,status)
     {return [0,
              alarm,
              at,
              callback,
              execution_context,
              interval,
              next_fired,
              status]}
    function map$3
     (alarm_fun,
      at_fun,
      callback_fun,
      execution_context_fun,
      interval_fun,
      next_fired_fun,
      status_fun)
     {var
       _ag4_=caml_call1(status_fun,status$0),
       _ag5_=caml_call1(next_fired_fun,next_fired$0),
       _ag6_=caml_call1(interval_fun,interval$0),
       _ag7_=caml_call1(execution_context_fun,execution_context$1),
       _ag8_=caml_call1(callback_fun,callback$0),
       _ag9_=caml_call1(at_fun,at$1);
      return [0,
              caml_call1(alarm_fun,alarm$0),
              _ag9_,
              _ag8_,
              _ag7_,
              _ag6_,
              _ag5_,
              _ag4_]}
    function iter$3
     (alarm_fun,
      at_fun,
      callback_fun,
      execution_context_fun,
      interval_fun,
      next_fired_fun,
      status_fun)
     {caml_call1(alarm_fun,alarm$0);
      caml_call1(at_fun,at$1);
      caml_call1(callback_fun,callback$0);
      caml_call1(execution_context_fun,execution_context$1);
      caml_call1(interval_fun,interval$0);
      caml_call1(next_fired_fun,next_fired$0);
      return caml_call1(status_fun,status$0)}
    function fold$3
     (init,
      alarm_fun,
      at_fun,
      callback_fun,
      execution_context_fun,
      interval_fun,
      next_fired_fun,
      status_fun)
     {return caml_call2
              (status_fun,
               caml_call2
                (next_fired_fun,
                 caml_call2
                  (interval_fun,
                   caml_call2
                    (execution_context_fun,
                     caml_call2
                      (callback_fun,
                       caml_call2(at_fun,caml_call2(alarm_fun,init,alarm$0),at$1),
                       callback$0),
                     execution_context$1),
                   interval$0),
                 next_fired$0),
               status$0)}
    function map_poly$1(record)
     {var
       _agY_=[0,caml_call1(record[1],status$0),0],
       _agZ_=[0,caml_call1(record[1],next_fired$0),_agY_],
       _ag0_=[0,caml_call1(record[1],interval$0),_agZ_],
       _ag1_=[0,caml_call1(record[1],execution_context$1),_ag0_],
       _ag2_=[0,caml_call1(record[1],callback$0),_ag1_],
       _ag3_=[0,caml_call1(record[1],at$1),_ag2_];
      return [0,caml_call1(record[1],alarm$0),_ag3_]}
    function for_all$3
     (alarm_fun,
      at_fun,
      callback_fun,
      execution_context_fun,
      interval_fun,
      next_fired_fun,
      status_fun)
     {var
       _agS_=caml_call1(alarm_fun,alarm$0),
       _agT_=_agS_?caml_call1(at_fun,at$1):_agS_,
       _agU_=_agT_?caml_call1(callback_fun,callback$0):_agT_,
       _agV_=_agU_?caml_call1(execution_context_fun,execution_context$1):_agU_,
       _agW_=_agV_?caml_call1(interval_fun,interval$0):_agV_,
       _agX_=_agW_?caml_call1(next_fired_fun,next_fired$0):_agW_;
      return _agX_?caml_call1(status_fun,status$0):_agX_}
    function exists$3
     (alarm_fun,
      at_fun,
      callback_fun,
      execution_context_fun,
      interval_fun,
      next_fired_fun,
      status_fun)
     {var
       _agR_=caml_call1(alarm_fun,alarm$0),
       _agM_=_agR_ || caml_call1(at_fun,at$1),
       _agN_=_agM_ || caml_call1(callback_fun,callback$0),
       _agO_=_agN_ || caml_call1(execution_context_fun,execution_context$1),
       _agP_=_agO_ || caml_call1(interval_fun,interval$0),
       _agQ_=_agP_ || caml_call1(next_fired_fun,next_fired$0);
      return _agQ_?_agQ_:caml_call1(status_fun,status$0)}
    function to_list$3
     (alarm_fun,
      at_fun,
      callback_fun,
      execution_context_fun,
      interval_fun,
      next_fired_fun,
      status_fun)
     {var
       _agG_=[0,caml_call1(status_fun,status$0),0],
       _agH_=[0,caml_call1(next_fired_fun,next_fired$0),_agG_],
       _agI_=[0,caml_call1(interval_fun,interval$0),_agH_],
       _agJ_=[0,caml_call1(execution_context_fun,execution_context$1),_agI_],
       _agK_=[0,caml_call1(callback_fun,callback$0),_agJ_],
       _agL_=[0,caml_call1(at_fun,at$1),_agK_];
      return [0,caml_call1(alarm_fun,alarm$0),_agL_]}
    function iter$4
     (record,
      alarm_fun,
      at_fun,
      callback_fun,
      execution_context_fun,
      interval_fun,
      next_fired_fun,
      status_fun)
     {caml_call3(alarm_fun,alarm$0,record,record[1]);
      caml_call3(at_fun,at$1,record,record[2]);
      caml_call3(callback_fun,callback$0,record,record[3]);
      caml_call3(execution_context_fun,execution_context$1,record,record[4]);
      caml_call3(interval_fun,interval$0,record,record[5]);
      caml_call3(next_fired_fun,next_fired$0,record,record[6]);
      return caml_call3(status_fun,status$0,record,record[7])}
    function fold$4
     (record,
      init,
      alarm_fun,
      at_fun,
      callback_fun,
      execution_context_fun,
      interval_fun,
      next_fired_fun,
      status_fun)
     {var
       _agA_=record[7],
       _agB_=record[6],
       _agC_=record[5],
       _agD_=record[4],
       _agE_=record[3],
       _agF_=record[2];
      return caml_call4
              (status_fun,
               caml_call4
                (next_fired_fun,
                 caml_call4
                  (interval_fun,
                   caml_call4
                    (execution_context_fun,
                     caml_call4
                      (callback_fun,
                       caml_call4
                        (at_fun,
                         caml_call4(alarm_fun,init,alarm$0,record,record[1]),
                         at$1,
                         record,
                         _agF_),
                       callback$0,
                       record,
                       _agE_),
                     execution_context$1,
                     record,
                     _agD_),
                   interval$0,
                   record,
                   _agC_),
                 next_fired$0,
                 record,
                 _agB_),
               status$0,
               record,
               _agA_)}
    function for_all$4
     (record,
      alarm_fun,
      at_fun,
      callback_fun,
      execution_context_fun,
      interval_fun,
      next_fired_fun,
      status_fun)
     {var
       _agu_=caml_call3(alarm_fun,alarm$0,record,record[1]),
       _agv_=_agu_?caml_call3(at_fun,at$1,record,record[2]):_agu_,
       _agw_=_agv_?caml_call3(callback_fun,callback$0,record,record[3]):_agv_,
       _agx_=
        _agw_
         ?caml_call3
           (execution_context_fun,execution_context$1,record,record[4])
         :_agw_,
       _agy_=_agx_?caml_call3(interval_fun,interval$0,record,record[5]):_agx_,
       _agz_=
        _agy_?caml_call3(next_fired_fun,next_fired$0,record,record[6]):_agy_;
      return _agz_?caml_call3(status_fun,status$0,record,record[7]):_agz_}
    function exists$4
     (record,
      alarm_fun,
      at_fun,
      callback_fun,
      execution_context_fun,
      interval_fun,
      next_fired_fun,
      status_fun)
     {var
       _agt_=caml_call3(alarm_fun,alarm$0,record,record[1]),
       _ago_=_agt_ || caml_call3(at_fun,at$1,record,record[2]),
       _agp_=_ago_ || caml_call3(callback_fun,callback$0,record,record[3]),
       _agq_=
        _agp_
        ||
        caml_call3(execution_context_fun,execution_context$1,record,record[4]),
       _agr_=_agq_ || caml_call3(interval_fun,interval$0,record,record[5]),
       _ags_=_agr_ || caml_call3(next_fired_fun,next_fired$0,record,record[6]);
      return _ags_?_ags_:caml_call3(status_fun,status$0,record,record[7])}
    function to_list$4
     (record,
      alarm_fun,
      at_fun,
      callback_fun,
      execution_context_fun,
      interval_fun,
      next_fired_fun,
      status_fun)
     {var
       _agi_=[0,caml_call3(status_fun,status$0,record,record[7]),0],
       _agj_=
        [0,caml_call3(next_fired_fun,next_fired$0,record,record[6]),_agi_],
       _agk_=[0,caml_call3(interval_fun,interval$0,record,record[5]),_agj_],
       _agl_=
        [0,
         caml_call3
          (execution_context_fun,execution_context$1,record,record[4]),
         _agk_],
       _agm_=[0,caml_call3(callback_fun,callback$0,record,record[3]),_agl_],
       _agn_=[0,caml_call3(at_fun,at$1,record,record[2]),_agm_];
      return [0,caml_call3(alarm_fun,alarm$0,record,record[1]),_agn_]}
    function map$4
     (record,
      alarm_fun,
      at_fun,
      callback_fun,
      execution_context_fun,
      interval_fun,
      next_fired_fun,
      status_fun)
     {var
       _agc_=caml_call3(status_fun,status$0,record,record[7]),
       _agd_=caml_call3(next_fired_fun,next_fired$0,record,record[6]),
       _age_=caml_call3(interval_fun,interval$0,record,record[5]),
       _agf_=
        caml_call3(execution_context_fun,execution_context$1,record,record[4]),
       _agg_=caml_call3(callback_fun,callback$0,record,record[3]),
       _agh_=caml_call3(at_fun,at$1,record,record[2]);
      return [0,
              caml_call3(alarm_fun,alarm$0,record,record[1]),
              _agh_,
              _agg_,
              _agf_,
              _age_,
              _agd_,
              _agc_]}
    function set_all_mutable_fields$1
     (record,alarm,at,interval,next_fired,status)
     {record[1] = alarm;
      record[2] = at;
      record[5] = interval;
      record[6] = next_fired;
      record[7] = status;
      return 0}
    var
     Direct$1=
      [0,
       iter$4,
       fold$4,
       for_all$4,
       exists$4,
       to_list$4,
       map$4,
       set_all_mutable_fields$1],
     Fields$0=
      [0,
       names$1,
       status$0,
       next_fired$0,
       interval$0,
       execution_context$1,
       callback$0,
       at$1,
       alarm$0,
       make_creator$1,
       create$3,
       map$3,
       iter$3,
       fold$3,
       map_poly$1,
       for_all$3,
       exists$3,
       to_list$3,
       Direct$1],
     none=[],
     _eY_=0,
     _eZ_=0;
    function _e0_(param){throw [0,Assert_failure,_e1_]}
    var _e2_=Time_ns$0[25];
    caml_update_dummy
     (none,
      [0,caml_call1(Alarm[2],0),_e2_,_e0_,execution_context,_eZ_,none,_eY_]);
    function is_none(t){return caml_call2(Core_kernel[359],t,none)}
    function is_some(t){return 1 - is_none(t)}
    function sexp_of_t$21(param)
     {var
       at=param[2],
       interval=param[5],
       status=param[7],
       _aga_=
        [0,
         [1,
          [0,_e3_,[0,caml_call2(Core_kernel[542],include[44][97],interval),0]]],
         0],
       _agb_=[0,[1,[0,_e4_,[0,caml_call1(Time_ns$0[45],at),0]]],_aga_];
      return [1,[0,[1,[0,_e5_,[0,caml_call1(Status[2],status),0]]],_agb_]]}
    function invariant$2(t)
     {function _afX_(param)
       {function _afZ_(_af$_){return 0}
        function _af0_(_af__){return 0}
        function _af1_(_af9_){return 0}
        function _af2_(_af8_){return 0}
        function _af3_(_af7_){return 0}
        function _af4_(_af6_){return 0}
        function f(alarm)
         {var
           got=caml_call1(Alarm[6],alarm),
           _af5_=4 <= t[7]?0:1,
           sexpifier=Core_kernel[410],
           comparator=Core_kernel[406];
          return caml_call8
                  (Ppx_assert_lib_Runtime[3],
                   pos,
                   sexpifier,
                   comparator,
                   0,
                   0,
                   0,
                   _af5_,
                   got)}
        var _afY_=caml_call2(include$11[2],t,f);
        return caml_call7
                (Fields$0[12],_afY_,_af4_,_af3_,_af2_,_af1_,_af0_,_afZ_)}
      return caml_call4(include$11[1],_e6_,t,sexp_of_t$21,_afX_)}
    function compare_at(t1,t2){return caml_call2(Time_ns$0[20],t1[2],t2[2])}
    function set_status$0(t,to)
     {var from=t[7];
      if(1 - caml_call2(Status[3],from,to))
       {var
         _afS_=[0,[1,[0,_e7_,[0,sexp_of_t$21(t),0]]],0],
         _afT_=[0,[1,[0,_e8_,[0,caml_call1(Status[2],to),0]]],_afS_],
         _afU_=[0,[1,[0,_e9_,[0,caml_call1(Status[2],from),0]]],_afT_],
         _afV_=
          [0,
           caml_call1
            (Sexplib0_Sexp_conv[7],cst_bug_set_status_transition_not_allowed),
           _afU_],
         _afW_=
          [1,
           [0,
            caml_call1
             (Sexplib0_Sexp_conv[7],
              cst_src_synchronous_time_source0_ml_134_26),
            _afV_]];
        caml_call1(Core_kernel[364],_afW_)}
      t[7] = to;
      return 0}
    var
     Event$0=
      [0,
       Status,
       status,
       next_fired,
       set_next_fired,
       interval,
       set_interval,
       execution_context$0,
       callback,
       at$0,
       set_at,
       alarm,
       set_alarm,
       Fields$0,
       none,
       is_none,
       is_some,
       sexp_of_t$21,
       invariant$2,
       compare_at,
       set_status$0];
    function sexp_of_t$22(t)
     {var
       match=caml_call1(Match[1],t),
       k=match[1],
       match$0=caml_call2(Match[2],k,t);
      return 0 === k
              ?caml_call1(Event$0[17],match$0)
              :caml_call1(Sexplib0_Sexp_conv[7],cst_Job_t)}
    var Job_or_event$0=[0,of_event,of_job,is_event,is_job,Match,sexp_of_t$22];
    function scheduler$0(r){return r[7]}
    function is_wall_clock(r){return r[6]}
    function handle_fired(r){return r[5]}
    function fired_events(r){return r[4]}
    function set_fired_events(r,v){r[4] = v;return 0}
    function events$0(r){return r[3]}
    function am_advancing(r){return r[2]}
    function set_am_advancing(r,v){r[2] = v;return 0}
    function advance_errors(r){return r[1]}
    function set_advance_errors(r,v){r[1] = v;return 0}
    function _e__(r,v){return [0,r[1],r[2],r[3],r[4],r[5],r[6],v]}
    var
     _e$_=0,
     scheduler$1=
      [0,[0,function(param){return 0},cst_scheduler$1,_e$_,scheduler$0,_e__]];
    function _fa_(r,v){return [0,r[1],r[2],r[3],r[4],r[5],v,r[7]]}
    var
     _fb_=0,
     is_wall_clock$0=
      [0,
       [0,function(param){return 0},cst_is_wall_clock,_fb_,is_wall_clock,_fa_]];
    function _fc_(r,v){return [0,r[1],r[2],r[3],r[4],v,r[6],r[7]]}
    var
     _fd_=0,
     handle_fired$0=
      [0,
       [0,function(param){return 0},cst_handle_fired,_fd_,handle_fired,_fc_]];
    function _fe_(r,v){return [0,r[1],r[2],r[3],v,r[5],r[6],r[7]]}
    var
     _ff_=[0,set_fired_events],
     fired_events$0=
      [0,
       [0,function(param){return 0},cst_fired_events,_ff_,fired_events,_fe_]];
    function _fg_(r,v){return [0,r[1],r[2],v,r[4],r[5],r[6],r[7]]}
    var
     _fh_=0,
     events$1=[0,[0,function(param){return 0},cst_events,_fh_,events$0,_fg_]];
    function _fi_(r,v){return [0,r[1],v,r[3],r[4],r[5],r[6],r[7]]}
    var
     _fj_=[0,set_am_advancing],
     am_advancing$0=
      [0,
       [0,function(param){return 0},cst_am_advancing,_fj_,am_advancing,_fi_]];
    function _fk_(r,v){return [0,v,r[2],r[3],r[4],r[5],r[6],r[7]]}
    var
     _fl_=[0,set_advance_errors],
     advance_errors$0=
      [0,
       [0,
        function(param){return 0},
        cst_advance_errors,
        _fl_,
        advance_errors,
        _fk_]];
    function make_creator$2
     (advance_errors_fun,
      am_advancing_fun,
      events_fun,
      fired_events_fun,
      handle_fired_fun,
      is_wall_clock_fun,
      scheduler_fun,
      compile_acc)
     {var
       match=caml_call2(advance_errors_fun,advance_errors$0,compile_acc),
       compile_acc$0=match[2],
       advance_errors_gen=match[1],
       match$0=caml_call2(am_advancing_fun,am_advancing$0,compile_acc$0),
       compile_acc$1=match$0[2],
       am_advancing_gen=match$0[1],
       match$1=caml_call2(events_fun,events$1,compile_acc$1),
       compile_acc$2=match$1[2],
       events_gen=match$1[1],
       match$2=caml_call2(fired_events_fun,fired_events$0,compile_acc$2),
       compile_acc$3=match$2[2],
       fired_events_gen=match$2[1],
       match$3=caml_call2(handle_fired_fun,handle_fired$0,compile_acc$3),
       compile_acc$4=match$3[2],
       handle_fired_gen=match$3[1],
       match$4=caml_call2(is_wall_clock_fun,is_wall_clock$0,compile_acc$4),
       compile_acc$5=match$4[2],
       is_wall_clock_gen=match$4[1],
       match$5=caml_call2(scheduler_fun,scheduler$1,compile_acc$5),
       compile_acc$6=match$5[2],
       scheduler_gen=match$5[1];
      return [0,
              function(acc)
               {var
                 advance_errors=caml_call1(advance_errors_gen,acc),
                 am_advancing=caml_call1(am_advancing_gen,acc),
                 events=caml_call1(events_gen,acc),
                 fired_events=caml_call1(fired_events_gen,acc),
                 handle_fired=caml_call1(handle_fired_gen,acc),
                 is_wall_clock=caml_call1(is_wall_clock_gen,acc),
                 scheduler=caml_call1(scheduler_gen,acc);
                return [0,
                        advance_errors,
                        am_advancing,
                        events,
                        fired_events,
                        handle_fired,
                        is_wall_clock,
                        scheduler]},
              compile_acc$6]}
    function create$4
     (advance_errors,
      am_advancing,
      events,
      fired_events,
      handle_fired,
      is_wall_clock,
      scheduler)
     {return [0,
              advance_errors,
              am_advancing,
              events,
              fired_events,
              handle_fired,
              is_wall_clock,
              scheduler]}
    function map$5
     (advance_errors_fun,
      am_advancing_fun,
      events_fun,
      fired_events_fun,
      handle_fired_fun,
      is_wall_clock_fun,
      scheduler_fun)
     {var
       _afM_=caml_call1(scheduler_fun,scheduler$1),
       _afN_=caml_call1(is_wall_clock_fun,is_wall_clock$0),
       _afO_=caml_call1(handle_fired_fun,handle_fired$0),
       _afP_=caml_call1(fired_events_fun,fired_events$0),
       _afQ_=caml_call1(events_fun,events$1),
       _afR_=caml_call1(am_advancing_fun,am_advancing$0);
      return [0,
              caml_call1(advance_errors_fun,advance_errors$0),
              _afR_,
              _afQ_,
              _afP_,
              _afO_,
              _afN_,
              _afM_]}
    function iter$5
     (advance_errors_fun,
      am_advancing_fun,
      events_fun,
      fired_events_fun,
      handle_fired_fun,
      is_wall_clock_fun,
      scheduler_fun)
     {caml_call1(advance_errors_fun,advance_errors$0);
      caml_call1(am_advancing_fun,am_advancing$0);
      caml_call1(events_fun,events$1);
      caml_call1(fired_events_fun,fired_events$0);
      caml_call1(handle_fired_fun,handle_fired$0);
      caml_call1(is_wall_clock_fun,is_wall_clock$0);
      return caml_call1(scheduler_fun,scheduler$1)}
    function fold$5
     (init,
      advance_errors_fun,
      am_advancing_fun,
      events_fun,
      fired_events_fun,
      handle_fired_fun,
      is_wall_clock_fun,
      scheduler_fun)
     {return caml_call2
              (scheduler_fun,
               caml_call2
                (is_wall_clock_fun,
                 caml_call2
                  (handle_fired_fun,
                   caml_call2
                    (fired_events_fun,
                     caml_call2
                      (events_fun,
                       caml_call2
                        (am_advancing_fun,
                         caml_call2(advance_errors_fun,init,advance_errors$0),
                         am_advancing$0),
                       events$1),
                     fired_events$0),
                   handle_fired$0),
                 is_wall_clock$0),
               scheduler$1)}
    function map_poly$2(record)
     {var
       _afG_=[0,caml_call1(record[1],scheduler$1),0],
       _afH_=[0,caml_call1(record[1],is_wall_clock$0),_afG_],
       _afI_=[0,caml_call1(record[1],handle_fired$0),_afH_],
       _afJ_=[0,caml_call1(record[1],fired_events$0),_afI_],
       _afK_=[0,caml_call1(record[1],events$1),_afJ_],
       _afL_=[0,caml_call1(record[1],am_advancing$0),_afK_];
      return [0,caml_call1(record[1],advance_errors$0),_afL_]}
    function for_all$5
     (advance_errors_fun,
      am_advancing_fun,
      events_fun,
      fired_events_fun,
      handle_fired_fun,
      is_wall_clock_fun,
      scheduler_fun)
     {var
       _afA_=caml_call1(advance_errors_fun,advance_errors$0),
       _afB_=_afA_?caml_call1(am_advancing_fun,am_advancing$0):_afA_,
       _afC_=_afB_?caml_call1(events_fun,events$1):_afB_,
       _afD_=_afC_?caml_call1(fired_events_fun,fired_events$0):_afC_,
       _afE_=_afD_?caml_call1(handle_fired_fun,handle_fired$0):_afD_,
       _afF_=_afE_?caml_call1(is_wall_clock_fun,is_wall_clock$0):_afE_;
      return _afF_?caml_call1(scheduler_fun,scheduler$1):_afF_}
    function exists$5
     (advance_errors_fun,
      am_advancing_fun,
      events_fun,
      fired_events_fun,
      handle_fired_fun,
      is_wall_clock_fun,
      scheduler_fun)
     {var
       _afz_=caml_call1(advance_errors_fun,advance_errors$0),
       _afu_=_afz_ || caml_call1(am_advancing_fun,am_advancing$0),
       _afv_=_afu_ || caml_call1(events_fun,events$1),
       _afw_=_afv_ || caml_call1(fired_events_fun,fired_events$0),
       _afx_=_afw_ || caml_call1(handle_fired_fun,handle_fired$0),
       _afy_=_afx_ || caml_call1(is_wall_clock_fun,is_wall_clock$0);
      return _afy_?_afy_:caml_call1(scheduler_fun,scheduler$1)}
    function to_list$5
     (advance_errors_fun,
      am_advancing_fun,
      events_fun,
      fired_events_fun,
      handle_fired_fun,
      is_wall_clock_fun,
      scheduler_fun)
     {var
       _afo_=[0,caml_call1(scheduler_fun,scheduler$1),0],
       _afp_=[0,caml_call1(is_wall_clock_fun,is_wall_clock$0),_afo_],
       _afq_=[0,caml_call1(handle_fired_fun,handle_fired$0),_afp_],
       _afr_=[0,caml_call1(fired_events_fun,fired_events$0),_afq_],
       _afs_=[0,caml_call1(events_fun,events$1),_afr_],
       _aft_=[0,caml_call1(am_advancing_fun,am_advancing$0),_afs_];
      return [0,caml_call1(advance_errors_fun,advance_errors$0),_aft_]}
    function iter$6
     (record,
      advance_errors_fun,
      am_advancing_fun,
      events_fun,
      fired_events_fun,
      handle_fired_fun,
      is_wall_clock_fun,
      scheduler_fun)
     {caml_call3(advance_errors_fun,advance_errors$0,record,record[1]);
      caml_call3(am_advancing_fun,am_advancing$0,record,record[2]);
      caml_call3(events_fun,events$1,record,record[3]);
      caml_call3(fired_events_fun,fired_events$0,record,record[4]);
      caml_call3(handle_fired_fun,handle_fired$0,record,record[5]);
      caml_call3(is_wall_clock_fun,is_wall_clock$0,record,record[6]);
      return caml_call3(scheduler_fun,scheduler$1,record,record[7])}
    function fold$6
     (record,
      init,
      advance_errors_fun,
      am_advancing_fun,
      events_fun,
      fired_events_fun,
      handle_fired_fun,
      is_wall_clock_fun,
      scheduler_fun)
     {var
       _afi_=record[7],
       _afj_=record[6],
       _afk_=record[5],
       _afl_=record[4],
       _afm_=record[3],
       _afn_=record[2];
      return caml_call4
              (scheduler_fun,
               caml_call4
                (is_wall_clock_fun,
                 caml_call4
                  (handle_fired_fun,
                   caml_call4
                    (fired_events_fun,
                     caml_call4
                      (events_fun,
                       caml_call4
                        (am_advancing_fun,
                         caml_call4
                          (advance_errors_fun,init,advance_errors$0,record,record[1]),
                         am_advancing$0,
                         record,
                         _afn_),
                       events$1,
                       record,
                       _afm_),
                     fired_events$0,
                     record,
                     _afl_),
                   handle_fired$0,
                   record,
                   _afk_),
                 is_wall_clock$0,
                 record,
                 _afj_),
               scheduler$1,
               record,
               _afi_)}
    function for_all$6
     (record,
      advance_errors_fun,
      am_advancing_fun,
      events_fun,
      fired_events_fun,
      handle_fired_fun,
      is_wall_clock_fun,
      scheduler_fun)
     {var
       _afc_=caml_call3(advance_errors_fun,advance_errors$0,record,record[1]),
       _afd_=
        _afc_
         ?caml_call3(am_advancing_fun,am_advancing$0,record,record[2])
         :_afc_,
       _afe_=_afd_?caml_call3(events_fun,events$1,record,record[3]):_afd_,
       _aff_=
        _afe_
         ?caml_call3(fired_events_fun,fired_events$0,record,record[4])
         :_afe_,
       _afg_=
        _aff_
         ?caml_call3(handle_fired_fun,handle_fired$0,record,record[5])
         :_aff_,
       _afh_=
        _afg_
         ?caml_call3(is_wall_clock_fun,is_wall_clock$0,record,record[6])
         :_afg_;
      return _afh_
              ?caml_call3(scheduler_fun,scheduler$1,record,record[7])
              :_afh_}
    function exists$6
     (record,
      advance_errors_fun,
      am_advancing_fun,
      events_fun,
      fired_events_fun,
      handle_fired_fun,
      is_wall_clock_fun,
      scheduler_fun)
     {var
       _afb_=caml_call3(advance_errors_fun,advance_errors$0,record,record[1]),
       _ae8_=
        _afb_
        ||
        caml_call3(am_advancing_fun,am_advancing$0,record,record[2]),
       _ae9_=_ae8_ || caml_call3(events_fun,events$1,record,record[3]),
       _ae__=
        _ae9_
        ||
        caml_call3(fired_events_fun,fired_events$0,record,record[4]),
       _ae$_=
        _ae__
        ||
        caml_call3(handle_fired_fun,handle_fired$0,record,record[5]),
       _afa_=
        _ae$_
        ||
        caml_call3(is_wall_clock_fun,is_wall_clock$0,record,record[6]);
      return _afa_
              ?_afa_
              :caml_call3(scheduler_fun,scheduler$1,record,record[7])}
    function to_list$6
     (record,
      advance_errors_fun,
      am_advancing_fun,
      events_fun,
      fired_events_fun,
      handle_fired_fun,
      is_wall_clock_fun,
      scheduler_fun)
     {var
       _ae2_=[0,caml_call3(scheduler_fun,scheduler$1,record,record[7]),0],
       _ae3_=
        [0,
         caml_call3(is_wall_clock_fun,is_wall_clock$0,record,record[6]),
         _ae2_],
       _ae4_=
        [0,caml_call3(handle_fired_fun,handle_fired$0,record,record[5]),_ae3_],
       _ae5_=
        [0,caml_call3(fired_events_fun,fired_events$0,record,record[4]),_ae4_],
       _ae6_=[0,caml_call3(events_fun,events$1,record,record[3]),_ae5_],
       _ae7_=
        [0,caml_call3(am_advancing_fun,am_advancing$0,record,record[2]),_ae6_];
      return [0,
              caml_call3(advance_errors_fun,advance_errors$0,record,record[1]),
              _ae7_]}
    function map$6
     (record,
      advance_errors_fun,
      am_advancing_fun,
      events_fun,
      fired_events_fun,
      handle_fired_fun,
      is_wall_clock_fun,
      scheduler_fun)
     {var
       _aeW_=caml_call3(scheduler_fun,scheduler$1,record,record[7]),
       _aeX_=caml_call3(is_wall_clock_fun,is_wall_clock$0,record,record[6]),
       _aeY_=caml_call3(handle_fired_fun,handle_fired$0,record,record[5]),
       _aeZ_=caml_call3(fired_events_fun,fired_events$0,record,record[4]),
       _ae0_=caml_call3(events_fun,events$1,record,record[3]),
       _ae1_=caml_call3(am_advancing_fun,am_advancing$0,record,record[2]);
      return [0,
              caml_call3(advance_errors_fun,advance_errors$0,record,record[1]),
              _ae1_,
              _ae0_,
              _aeZ_,
              _aeY_,
              _aeX_,
              _aeW_]}
    function set_all_mutable_fields$2
     (record,advance_errors,am_advancing,fired_events)
     {record[1] = advance_errors;
      record[2] = am_advancing;
      record[4] = fired_events;
      return 0}
    var
     Direct$2=
      [0,
       iter$6,
       fold$6,
       for_all$6,
       exists$6,
       to_list$6,
       map$6,
       set_all_mutable_fields$2],
     Fields$1=
      [0,
       names$2,
       scheduler$1,
       is_wall_clock$0,
       handle_fired$0,
       fired_events$0,
       events$1,
       am_advancing$0,
       advance_errors$0,
       make_creator$2,
       create$4,
       map$5,
       iter$5,
       fold$5,
       map_poly$2,
       for_all$5,
       exists$5,
       to_list$5,
       Direct$2];
    function sexp_of_t$23(param,_aeK_)
     {var
       events=_aeK_[3],
       is_wall_clock=_aeK_[6],
       now=caml_call1(include$1[12],events);
      if(is_wall_clock)
       {var _aeL_=[0,[1,[0,_fm_,[0,caml_call1(Time_ns$0[45],now),0]]],0];
        return [1,[0,caml_call1(Sexplib0_Sexp_conv[7],cst_wall_clock),_aeL_]]}
      var all_events=[0,0];
      function _aeM_(alarm)
       {var _aeU_=all_events[1],_aeV_=caml_call2(Alarm[5],events,alarm);
        all_events[1] = [0,[0,caml_call2(Alarm[3],events,alarm),_aeV_],_aeU_];
        return 0}
      caml_call2(include$1[16],events,_aeM_);
      function _aeN_(_aeT_){return _aeT_[2]}
      var _aeO_=all_events[1];
      function _aeP_(param,_aeS_)
       {var at2=_aeS_[1],at1=param[1];
        return caml_call2(Time_ns$0[20],at1,at2)}
      var
       _aeQ_=caml_call2(Core_kernel_List[71],_aeP_,_aeO_),
       events$0=caml_call2(Core_kernel_List[84],_aeQ_,_aeN_),
       _aeR_=
        [0,
         [1,
          [0,
           _fn_,
           [0,caml_call2(Core_kernel[513],Job_or_event$0[6],events$0),0]]],
         0];
      return [1,[0,[1,[0,_fo_,[0,caml_call1(Time_ns$0[45],now),0]]],_aeR_]]}
    function timing_wheel_now(t){return caml_call1(include$1[12],t[3])}
    function invariant$3(t)
     {function _aep_(param)
       {function check(f){return caml_call2(include$11[2],t,f)}
        function _aet_(_aeJ_){return 0}
        function _aeu_(_aeI_){return 0}
        function _aev_(_aeH_){return 0}
        var
         _aew_=
          check
           (function(fired_events)
             {var current=[0,fired_events];
              for(;;)
               {if(caml_call1(Event$0[16],current[1]))
                 {var _aeG_=timing_wheel_now(t);
                  if(caml_call2(Time_ns$0[14],current[1][2],_aeG_))
                   {var next=current[1][6];
                    if(caml_call1(Event$0[16],next))
                     if(! caml_call2(Time_ns$0[14],current[1][2],next[2]))
                      throw [0,Assert_failure,_fp_];
                    current[1] = next;
                    continue}
                  throw [0,Assert_failure,_fq_]}
                return 0}}),
         _aex_=
          check
           (function(events)
             {function _aeC_(_aeF_){return 0}
              caml_call2(include$1[7],_aeC_,events);
              function _aeD_(alarm)
               {var
                 job_or_event=caml_call2(Alarm[5],events,alarm),
                 match=caml_call1(Match[1],job_or_event),
                 k=match[1],
                 match$0=caml_call2(Match[2],k,job_or_event);
                if(0 === k)
                 {if(caml_call2(Core_kernel[359],alarm,match$0[1]))
                   {var
                     _aeE_=match$0[2],
                     expect=caml_call2(Alarm[3],events,alarm),
                     sexpifier=Time_ns$0[45],
                     comparator=Time_ns$0[20];
                    caml_call8
                     (Ppx_assert_lib_Runtime[3],
                      pos$0,
                      sexpifier,
                      comparator,
                      0,
                      0,
                      0,
                      expect,
                      _aeE_);
                    var sexpifier$0=Event$0[1][2],comparator$0=Event$0[1][1];
                    return caml_call8
                            (Ppx_assert_lib_Runtime[3],
                             pos$1,
                             sexpifier$0,
                             comparator$0,
                             0,
                             0,
                             0,
                             4,
                             match$0[7])}
                  throw [0,Assert_failure,_fr_]}
                return 0}
              return caml_call2(include$1[16],events,_aeD_)});
        function _aey_(_aeB_){return 0}
        function _aez_(_aeA_){return 0}
        return caml_call7
                (Fields$1[12],_aez_,_aey_,_aex_,_aew_,_aev_,_aeu_,_aet_)}
      function _aeq_(param){return _fs_}
      function _aer_(_aes_){return sexp_of_t$23(_aeq_,_aes_)}
      return caml_call4(include$11[1],_ft_,t,_aer_,_aep_)}
    var
     include$13=
      [0,
       Event$0,
       Job_or_event$0,
       scheduler$0,
       is_wall_clock,
       handle_fired,
       fired_events,
       set_fired_events,
       events$0,
       am_advancing,
       set_am_advancing,
       advance_errors,
       set_advance_errors,
       Fields$1,
       sexp_of_t$23,
       timing_wheel_now,
       invariant$3];
    function sexp_of_t$24(v)
     {return caml_call2(include$13[14],Core_kernel[284],v)}
    var invariant$4=include$13[16];
    function sexp_of_t$25(v)
     {return caml_call2(include$13[14],Core_kernel[315],v)}
    var Read_write=[0,sexp_of_t$25,invariant$4];
    function is_wall_clock$1(t){return t[6]}
    function read_only(t){return t}
    function fire(t,event)
     {if(4 <= event[7])
       {caml_call2(include$13[1][20],event,1);
        event[1] = caml_call1(Alarm[2],0);
        var prev=[0,include$13[1][14]],current=[0,t[4]];
        for(;;)
         {if(caml_call1(include$13[1][16],current[1]))
           if(caml_call2(Time_ns$0[17],current[1][2],event[2]))
            {prev[1] = current[1];current[1] = current[1][6];continue}
          event[6] = current[1];
          return caml_call1(include$13[1][15],prev[1])
                  ?(t[4] = event,0)
                  :(prev[1][6] = event,0)}}
      throw [0,Assert_failure,_fu_]}
    function alarm_precision(t){return caml_call1(include$1[11],t[3])}
    function now(t)
     {return t[6]?caml_call1(Time_ns$0[27],0):caml_call1(include$13[15],t)}
    var timing_wheel_now$0=include$13[15];
    function schedule(t,event)
     {var _aeo_=caml_call1(include$13[2][1],event);
      event[1] = caml_call3(include$1[24],t[3],event[2],_aeo_);
      return 0}
    var
     include$14=include$13[1],
     Status$0=include$14[1],
     status$1=include$14[2],
     next_fired$1=include$14[3],
     set_next_fired$0=include$14[4],
     interval$1=include$14[5],
     set_interval$0=include$14[6],
     execution_context$2=include$14[7],
     callback$1=include$14[8],
     set_at$0=include$14[10],
     alarm$1=include$14[11],
     set_alarm$0=include$14[12],
     Fields$2=include$14[13],
     none$0=include$14[14],
     is_none$0=include$14[15],
     is_some$0=include$14[16],
     sexp_of_t$26=include$14[17],
     invariant$5=include$14[18],
     compare_at$0=include$14[19],
     set_status$1=include$14[20];
    function add(t,at,interval,callback)
     {var
       _aem_=t[7][7],
       event=[0,caml_call1(Alarm[2],0),at,callback,_aem_,interval,none$0,4],
       _aen_=caml_call1(timing_wheel_now$0,t);
      if(caml_call2(Time_ns$0[14],at,_aen_))
       fire(t,event);
      else
       schedule(t,event);
      return event}
    function at$2(t,at,callback){return add(t,at,0,callback)}
    function after$0(t,span,callback)
     {var _ael_=now(t);
      return at$2(t,caml_call2(Time_ns$0[44],_ael_,span),callback)}
    function at_intervals(t,span,callback)
     {var alarm_precision$0=alarm_precision(t);
      if(caml_call2(include[44][17],span,alarm_precision$0))
       {var
         _aei_=
          [0,
           [1,[0,_fv_,[0,caml_call1(include[44][97],alarm_precision$0),0]]],
           0],
         _aej_=[0,[1,[0,_fw_,[0,caml_call1(include[44][97],span),0]]],_aei_],
         _aek_=
          [1,
           [0,
            caml_call1
             (Sexplib0_Sexp_conv[7],
              cst_at_intervals_got_span_smaller_than_alarm_precision),
            _aej_]];
        caml_call1(Core_kernel[364],_aek_)}
      return add(t,now(t),[0,span],callback)}
    function sexp_of_t$27(param)
     {switch(param)
       {case 0:return _fx_;
        case 1:return _fy_;
        case 2:return _fz_;
        default:return _fA_}}
    var Abort_result=[0,sexp_of_t$27];
    function abort(t,event)
     {switch(event[7])
       {case 0:return 2;
        case 1:caml_call2(include$13[1][20],event,0);return 0;
        case 2:
         return caml_call1(Core_kernel_Option[46],event[5])?1:(event[5] = 0,0);
        case 3:return 3;
        default:
         caml_call2(include$13[1][20],event,0);
         caml_call2(include$1[27],t[3],event[1]);
         event[1] = caml_call1(Alarm[2],0);
         return 0}}
    function abort_if_possible(t,event){abort(t,event);return 0}
    function abort_exn(t,event)
     {var reason=abort(t,event);
      if(0 === reason)return 0;
      var
       _aeg_=[0,[1,[0,_fB_,[0,caml_call1(Abort_result[1],reason),0]]],0],
       _aeh_=
        [1,
         [0,
          caml_call1
           (Sexplib0_Sexp_conv[7],
            cst_Synchronous_time_source_abort_exn_cannot_abort_event),
          _aeg_]];
      return caml_call1(Core_kernel[364],_aeh_)}
    var
     Event$1=
      [0,
       Status$0,
       status$1,
       next_fired$1,
       set_next_fired$0,
       interval$1,
       set_interval$0,
       execution_context$2,
       callback$1,
       set_at$0,
       alarm$1,
       set_alarm$0,
       Fields$2,
       none$0,
       is_none$0,
       is_some$0,
       sexp_of_t$26,
       invariant$5,
       compare_at$0,
       set_status$1,
       add,
       at$2,
       after$0,
       at_intervals,
       Abort_result,
       abort,
       abort_if_possible,
       abort_exn];
    function run_after(t,span,callback)
     {caml_call3(Event$1[22],t,span,callback);return 0}
    function run_at(t,at,callback)
     {caml_call3(Event$1[21],t,at,callback);return 0}
    function run_at_intervals(t,span,callback)
     {caml_call3(Event$1[23],t,span,callback);return 0}
    function run_fired_events(t,send_exn)
     {var current_execution_context=t[7][7];
      for(;;)
       {if(caml_call1(Event$1[15],t[4]))
         {var event=t[4];
          t[4] = event[6];
          event[6] = Event$1[13];
          var _aeb_=event[7];
          if(1 === _aeb_)
           {caml_call2(Event$1[19],event,2);
            set_execution_context(t[7],event[4]);
            try
             {caml_call1(event[3],0);var switch$0=0}
            catch(exn)
             {exn = caml_wrap_exception(exn);
              if(send_exn)
               {var
                 send_exn$0=send_exn[1],
                 backtrace=caml_call2(Base_Backtrace[2],0,0);
                caml_call3
                 (send_exn$0,event[4][1],[0,[0,936718974,backtrace]],exn)}
              else
               {var _aec_=t[1];
                t[1] = [0,caml_call2(Core_kernel_Error[19],0,exn),_aec_]}
              var status=3,switch$0=1}
            if(! switch$0)
             {var _aed_=event[5];
              if(_aed_)
               {var interval=_aed_[1],_aee_=caml_call1(timing_wheel_now$0,t);
                event[2]
                =
                caml_call5(Time_ns$0[38],0,event[2],_aee_,interval,0);
                schedule(t,event);
                var _aef_=4}
              else
               var _aef_=3;
              var status=_aef_}
            caml_call2(Event$1[19],event,status)}
          else
           if(0 !== _aeb_)throw [0,Assert_failure,_fC_];
          continue}
        return set_execution_context(t[7],current_execution_context)}}
    function advance_clock(t,to,send_exn)
     {caml_call3(include$1[21],t[3],to,t[5]);
      return run_fired_events(t,send_exn)}
    function fire_past_alarms(t,send_exn)
     {caml_call2(include$1[22],t[3],t[5]);return run_fired_events(t,send_exn)}
    function advance(t,to,send_exn)
     {advance_clock(t,to,send_exn);return fire_past_alarms(t,send_exn)}
    function advance_by_alarms(t,to)
     {var send_exn=0;
      if(t[2])
       {var
         _ad$_=
          caml_call1
           (Sexplib0_Sexp_conv[7],
            cst_cannot_call_advance_by_alarms_from_callback);
        caml_call1(Core_kernel[364],_ad$_)}
      t[2] = 1;
      if(t[1])t[1] = 0;
      run_fired_events(t,send_exn);
      var continue$0=[0,1];
      for(;;)
       {if(continue$0[1])
         {if(caml_call1(include$1[14],t[3])){continue$0[1] = 0;continue}
          var next_alarm_fires_at=caml_call1(include$1[36],t[3]);
          if(caml_call2(Time_ns$0[13],next_alarm_fires_at,to))
           continue$0[1] = 0;
          else
           advance(t,caml_call1(include$1[34],t[3]),send_exn);
          continue}
        advance(t,to,send_exn);
        t[2] = 0;
        var _aea_=t[1];
        return _aea_
                ?(t[1] = 0,[1,caml_call2(Core_kernel_Error[18],0,_aea_)])
                :_fD_}}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$49);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     include$15=
      [0,
       Time_ns$0,
       Alarm,
       Alarm_precision,
       default_timing_wheel_config$0,
       include$13,
       sexp_of_t$24,
       invariant$4,
       Read_write,
       is_wall_clock$1,
       read_only,
       fire,
       alarm_precision,
       now,
       timing_wheel_now$0,
       schedule,
       Event$1,
       run_after,
       run_at,
       run_at_intervals,
       run_fired_events,
       advance_clock,
       fire_past_alarms,
       advance,
       advance_by_alarms];
    caml_register_global
     (2644,include$15,"Async_kernel__Synchronous_time_source0");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_async_kernel$50);
    caml_call1(Expect_test_collector[4][1],cst_src_scheduler1_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$51,cst$20);
    var Synchronous_time_source=0,Event$2=0,Alarm$0=0,Job_or_event$1=0;
    function create_with_cell(cell){return [0,cell]}
    function create$5(param){return [0,0]}
    function create_full(a){return [0,[2,a]]}
    var Ivar$0=[0,create_with_cell,create$5,create_full];
    function create$6(param)
     {var _ad__=[0,0,caml_call1(Ivar$0[2],0)];
      return caml_call1(Bvar[1],_ad__)}
    var Bvar$0=[0,create$6];
    function sexp_of_t$28(param){return 0 === param?_fE_:_fF_}
    var Exec_result=[0,sexp_of_t$28];
    function exec(r){return r[2]}
    function execution_context$3(r){return r[1]}
    function _fG_(r,v){return [0,r[1],v]}
    var
     _fH_=0,
     exec$0=[0,[0,function(param){return 0},cst_exec,_fH_,exec,_fG_]];
    function _fI_(r,v){return [0,v,r[2]]}
    var
     _fJ_=0,
     execution_context$4=
      [0,
       [0,
        function(param){return 0},
        cst_execution_context$0,
        _fJ_,
        execution_context$3,
        _fI_]];
    function make_creator$3(execution_context_fun,exec_fun,compile_acc)
     {var
       match=caml_call2(execution_context_fun,execution_context$4,compile_acc),
       compile_acc$0=match[2],
       execution_context_gen=match[1],
       match$0=caml_call2(exec_fun,exec$0,compile_acc$0),
       compile_acc$1=match$0[2],
       exec_gen=match$0[1];
      return [0,
              function(acc)
               {var
                 execution_context=caml_call1(execution_context_gen,acc),
                 exec=caml_call1(exec_gen,acc);
                return [0,execution_context,exec]},
              compile_acc$1]}
    function create$7(execution_context,exec)
     {return [0,execution_context,exec]}
    function map$7(execution_context_fun,exec_fun)
     {var _ad9_=caml_call1(exec_fun,exec$0);
      return [0,caml_call1(execution_context_fun,execution_context$4),_ad9_]}
    function iter$7(execution_context_fun,exec_fun)
     {caml_call1(execution_context_fun,execution_context$4);
      return caml_call1(exec_fun,exec$0)}
    function fold$7(init,execution_context_fun,exec_fun)
     {return caml_call2
              (exec_fun,
               caml_call2(execution_context_fun,init,execution_context$4),
               exec$0)}
    function map_poly$3(record)
     {var _ad8_=[0,caml_call1(record[1],exec$0),0];
      return [0,caml_call1(record[1],execution_context$4),_ad8_]}
    function for_all$7(execution_context_fun,exec_fun)
     {var _ad7_=caml_call1(execution_context_fun,execution_context$4);
      return _ad7_?caml_call1(exec_fun,exec$0):_ad7_}
    function exists$7(execution_context_fun,exec_fun)
     {var _ad6_=caml_call1(execution_context_fun,execution_context$4);
      return _ad6_?_ad6_:caml_call1(exec_fun,exec$0)}
    function to_list$7(execution_context_fun,exec_fun)
     {var _ad5_=[0,caml_call1(exec_fun,exec$0),0];
      return [0,caml_call1(execution_context_fun,execution_context$4),_ad5_]}
    function iter$8(record,execution_context_fun,exec_fun)
     {caml_call3(execution_context_fun,execution_context$4,record,record[1]);
      return caml_call3(exec_fun,exec$0,record,record[2])}
    function fold$8(record,init,execution_context_fun,exec_fun)
     {var _ad4_=record[2];
      return caml_call4
              (exec_fun,
               caml_call4
                (execution_context_fun,
                 init,
                 execution_context$4,
                 record,
                 record[1]),
               exec$0,
               record,
               _ad4_)}
    function for_all$8(record,execution_context_fun,exec_fun)
     {var
       _ad3_=
        caml_call3(execution_context_fun,execution_context$4,record,record[1]);
      return _ad3_?caml_call3(exec_fun,exec$0,record,record[2]):_ad3_}
    function exists$8(record,execution_context_fun,exec_fun)
     {var
       _ad2_=
        caml_call3(execution_context_fun,execution_context$4,record,record[1]);
      return _ad2_?_ad2_:caml_call3(exec_fun,exec$0,record,record[2])}
    function to_list$8(record,execution_context_fun,exec_fun)
     {var _ad1_=[0,caml_call3(exec_fun,exec$0,record,record[2]),0];
      return [0,
              caml_call3
               (execution_context_fun,execution_context$4,record,record[1]),
              _ad1_]}
    function map$8(record,execution_context_fun,exec_fun)
     {var _ad0_=caml_call3(exec_fun,exec$0,record,record[2]);
      return [0,
              caml_call3
               (execution_context_fun,execution_context$4,record,record[1]),
              _ad0_]}
    function set_all_mutable_fields$3(record){return 0}
    var
     Direct$3=
      [0,
       iter$8,
       fold$8,
       for_all$8,
       exists$8,
       to_list$8,
       map$8,
       set_all_mutable_fields$3],
     Fields$3=
      [0,
       names$3,
       exec$0,
       execution_context$4,
       make_creator$3,
       create$7,
       map$7,
       iter$7,
       fold$7,
       map_poly$3,
       for_all$7,
       exists$7,
       to_list$7,
       Direct$3];
    function sexp_of_t$29(param)
     {var v_execution_context=param[1],bnds=0;
      function _adY_(_adZ_){return 0}
      var
       arg=caml_call1(Sexplib0_Sexp_conv[24],_adY_),
       bnds$0=[0,[1,[0,_fK_,[0,arg,0]]],bnds],
       arg$0=sexp_of_t$13(v_execution_context),
       bnds$1=[0,[1,[0,_fL_,[0,arg$0,0]]],bnds$0];
      return [1,bnds$1]}
    function invariant$6(t)
     {function _adU_(param)
       {function _adW_(_adX_){return 0}
        var _adV_=caml_call2(include$11[2],t,f);
        return caml_call2(Fields$3[7],_adV_,_adW_)}
      return caml_call4(include$11[1],_fM_,t,sexp_of_t$29,_adU_)}
    var
     Very_low_priority_worker$0=
      [0,
       Exec_result,
       exec,
       execution_context$3,
       Fields$3,
       sexp_of_t$29,
       invariant$6];
    function on_end_of_cycle(r){return r[25]}
    function set_on_end_of_cycle(r,v){r[25] = v;return 0}
    function on_start_of_cycle(r){return r[24]}
    function set_on_start_of_cycle(r,v){r[24] = v;return 0}
    function record_backtraces$2(r){return r[23]}
    function set_record_backtraces(r,v){r[23] = v;return 0}
    function max_num_jobs_per_priority_per_cycle$2(r){return r[22]}
    function set_max_num_jobs_per_priority_per_cycle(r,v){r[22] = v;return 0}
    function check_invariants$2(r){return r[21]}
    function set_check_invariants(r,v){r[21] = v;return 0}
    function yield_until_no_jobs_remain(r){return r[20]}
    function set_yield_until_no_jobs_remain(r,v){r[20] = v;return 0}
    function yield$0(r){return r[19]}
    function set_yield(r,v){r[19] = v;return 0}
    function event_added_hook(r){return r[18]}
    function set_event_added_hook(r,v){r[18] = v;return 0}
    function job_queued_hook(r){return r[17]}
    function set_job_queued_hook(r,v){r[17] = v;return 0}
    function thread_safe_external_job_hook(r){return r[16]}
    function set_thread_safe_external_job_hook(r,v){r[16] = v;return 0}
    function external_jobs(r){return r[15]}
    function time_source(r){return r[14]}
    function set_time_source(r,v){r[14] = v;return 0}
    function last_cycle_num_jobs(r){return r[13]}
    function set_last_cycle_num_jobs(r,v){r[13] = v;return 0}
    function last_cycle_time(r){return r[12]}
    function set_last_cycle_time(r,v){r[12] = v;return 0}
    function run_every_cycle_start(r){return r[11]}
    function set_run_every_cycle_start(r,v){r[11] = v;return 0}
    function cycle_start(r){return r[10]}
    function set_cycle_start(r,v){r[10] = v;return 0}
    function cycle_count(r){return r[9]}
    function set_cycle_count(r,v){r[9] = v;return 0}
    function uncaught_exn_unwrapped(r){return r[8]}
    function set_uncaught_exn(r,v){r[8] = v;return 0}
    function current_execution_context(r){return r[7]}
    function set_current_execution_context(r,v){r[7] = v;return 0}
    function main_execution_context(r){return r[6]}
    function set_main_execution_context(r,v){r[6] = v;return 0}
    function very_low_priority_workers(r){return r[5]}
    function low_priority_jobs(r){return r[4]}
    function normal_priority_jobs(r){return r[3]}
    function job_pool(r){return r[2]}
    function set_job_pool(r,v){r[2] = v;return 0}
    function check_access(r){return r[1]}
    function set_check_access(r,v){r[1] = v;return 0}
    function _fN_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              v]}
    var
     _fO_=[0,set_on_end_of_cycle],
     on_end_of_cycle$0=
      [0,
       [0,
        function(param){return 0},
        cst_on_end_of_cycle,
        _fO_,
        on_end_of_cycle,
        _fN_]];
    function _fP_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              v,
              r[25]]}
    var
     _fQ_=[0,set_on_start_of_cycle],
     on_start_of_cycle$0=
      [0,
       [0,
        function(param){return 0},
        cst_on_start_of_cycle,
        _fQ_,
        on_start_of_cycle,
        _fP_]];
    function _fR_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              v,
              r[24],
              r[25]]}
    var
     _fS_=[0,set_record_backtraces],
     record_backtraces$3=
      [0,
       [0,
        function(param){return 0},
        cst_record_backtraces$1,
        _fS_,
        record_backtraces$2,
        _fR_]];
    function _fT_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              v,
              r[23],
              r[24],
              r[25]]}
    var
     _fU_=[0,set_max_num_jobs_per_priority_per_cycle],
     max_num_jobs_per_priority_per_cycle$3=
      [0,
       [0,
        function(param){return 0},
        cst_max_num_jobs_per_priority_per_cycle$1,
        _fU_,
        max_num_jobs_per_priority_per_cycle$2,
        _fT_]];
    function _fV_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              v,
              r[22],
              r[23],
              r[24],
              r[25]]}
    var
     _fW_=[0,set_check_invariants],
     check_invariants$3=
      [0,
       [0,
        function(param){return 0},
        cst_check_invariants$1,
        _fW_,
        check_invariants$2,
        _fV_]];
    function _fX_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              v,
              r[21],
              r[22],
              r[23],
              r[24],
              r[25]]}
    var
     _fY_=[0,set_yield_until_no_jobs_remain],
     yield_until_no_jobs_remain$0=
      [0,
       [0,
        function(param){return 0},
        cst_yield_until_no_jobs_remain,
        _fY_,
        yield_until_no_jobs_remain,
        _fX_]];
    function _fZ_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              v,
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25]]}
    var
     _f0_=[0,set_yield],
     yield$1=[0,[0,function(param){return 0},cst_yield,_f0_,yield$0,_fZ_]];
    function _f1_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              v,
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25]]}
    var
     _f2_=[0,set_event_added_hook],
     event_added_hook$0=
      [0,
       [0,
        function(param){return 0},
        cst_event_added_hook,
        _f2_,
        event_added_hook,
        _f1_]];
    function _f3_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              v,
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25]]}
    var
     _f4_=[0,set_job_queued_hook],
     job_queued_hook$0=
      [0,
       [0,
        function(param){return 0},
        cst_job_queued_hook,
        _f4_,
        job_queued_hook,
        _f3_]];
    function _f5_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              v,
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25]]}
    var
     _f6_=[0,set_thread_safe_external_job_hook],
     thread_safe_external_job_hook$0=
      [0,
       [0,
        function(param){return 0},
        cst_thread_safe_external_job_hook,
        _f6_,
        thread_safe_external_job_hook,
        _f5_]];
    function _f7_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              v,
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25]]}
    var
     _f8_=0,
     external_jobs$0=
      [0,
       [0,function(param){return 0},cst_external_jobs,_f8_,external_jobs,_f7_]];
    function _f9_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              v,
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25]]}
    var
     _f__=[0,set_time_source],
     time_source$0=
      [0,[0,function(param){return 0},cst_time_source,_f__,time_source,_f9_]];
    function _f$_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              v,
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25]]}
    var
     _ga_=[0,set_last_cycle_num_jobs],
     last_cycle_num_jobs$0=
      [0,
       [0,
        function(param){return 0},
        cst_last_cycle_num_jobs,
        _ga_,
        last_cycle_num_jobs,
        _f$_]];
    function _gb_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              v,
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25]]}
    var
     _gc_=[0,set_last_cycle_time],
     last_cycle_time$0=
      [0,
       [0,
        function(param){return 0},
        cst_last_cycle_time,
        _gc_,
        last_cycle_time,
        _gb_]];
    function _gd_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              v,
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25]]}
    var
     _ge_=[0,set_run_every_cycle_start],
     run_every_cycle_start$0=
      [0,
       [0,
        function(param){return 0},
        cst_run_every_cycle_start,
        _ge_,
        run_every_cycle_start,
        _gd_]];
    function _gf_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              v,
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25]]}
    var
     _gg_=[0,set_cycle_start],
     cycle_start$0=
      [0,[0,function(param){return 0},cst_cycle_start,_gg_,cycle_start,_gf_]];
    function _gh_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              v,
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25]]}
    var
     _gi_=[0,set_cycle_count],
     cycle_count$0=
      [0,[0,function(param){return 0},cst_cycle_count,_gi_,cycle_count,_gh_]];
    function _gj_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              v,
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25]]}
    var
     _gk_=[0,set_uncaught_exn],
     uncaught_exn=
      [0,
       [0,
        function(param){return 0},
        cst_uncaught_exn,
        _gk_,
        uncaught_exn_unwrapped,
        _gj_]];
    function _gl_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              v,
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25]]}
    var
     _gm_=[0,set_current_execution_context],
     current_execution_context$0=
      [0,
       [0,
        function(param){return 0},
        cst_current_execution_context,
        _gm_,
        current_execution_context,
        _gl_]];
    function _gn_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              v,
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25]]}
    var
     _go_=[0,set_main_execution_context],
     main_execution_context$0=
      [0,
       [0,
        function(param){return 0},
        cst_main_execution_context,
        _go_,
        main_execution_context,
        _gn_]];
    function _gp_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              v,
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25]]}
    var
     _gq_=0,
     very_low_priority_workers$0=
      [0,
       [0,
        function(param){return 0},
        cst_very_low_priority_workers,
        _gq_,
        very_low_priority_workers,
        _gp_]];
    function _gr_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              v,
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25]]}
    var
     _gs_=0,
     low_priority_jobs$0=
      [0,
       [0,
        function(param){return 0},
        cst_low_priority_jobs,
        _gs_,
        low_priority_jobs,
        _gr_]];
    function _gt_(r,v)
     {return [0,
              r[1],
              r[2],
              v,
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25]]}
    var
     _gu_=0,
     normal_priority_jobs$0=
      [0,
       [0,
        function(param){return 0},
        cst_normal_priority_jobs,
        _gu_,
        normal_priority_jobs,
        _gt_]];
    function _gv_(r,v)
     {return [0,
              r[1],
              v,
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25]]}
    var
     _gw_=[0,set_job_pool],
     job_pool$0=
      [0,[0,function(param){return 0},cst_job_pool,_gw_,job_pool,_gv_]];
    function _gx_(r,v)
     {return [0,
              v,
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17],
              r[18],
              r[19],
              r[20],
              r[21],
              r[22],
              r[23],
              r[24],
              r[25]]}
    var
     _gy_=[0,set_check_access],
     check_access$0=
      [0,
       [0,function(param){return 0},cst_check_access,_gy_,check_access,_gx_]];
    function make_creator$4
     (check_access_fun,
      job_pool_fun,
      normal_priority_jobs_fun,
      low_priority_jobs_fun,
      very_low_priority_workers_fun,
      main_execution_context_fun,
      current_execution_context_fun,
      uncaught_exn_fun,
      cycle_count_fun,
      cycle_start_fun,
      run_every_cycle_start_fun,
      last_cycle_time_fun,
      last_cycle_num_jobs_fun,
      time_source_fun,
      external_jobs_fun,
      thread_safe_external_job_hook_fun,
      job_queued_hook_fun,
      event_added_hook_fun,
      yield_fun,
      yield_until_no_jobs_remain_fun,
      check_invariants_fun,
      max_num_jobs_per_priority_per_cycle_fun,
      record_backtraces_fun,
      on_start_of_cycle_fun,
      on_end_of_cycle_fun,
      compile_acc)
     {var
       match=caml_call2(check_access_fun,check_access$0,compile_acc),
       compile_acc$0=match[2],
       check_access_gen=match[1],
       match$0=caml_call2(job_pool_fun,job_pool$0,compile_acc$0),
       compile_acc$1=match$0[2],
       job_pool_gen=match$0[1],
       match$1=
        caml_call2
         (normal_priority_jobs_fun,normal_priority_jobs$0,compile_acc$1),
       compile_acc$2=match$1[2],
       normal_priority_jobs_gen=match$1[1],
       match$2=
        caml_call2(low_priority_jobs_fun,low_priority_jobs$0,compile_acc$2),
       compile_acc$3=match$2[2],
       low_priority_jobs_gen=match$2[1],
       match$3=
        caml_call2
         (very_low_priority_workers_fun,
          very_low_priority_workers$0,
          compile_acc$3),
       compile_acc$4=match$3[2],
       very_low_priority_workers_gen=match$3[1],
       match$4=
        caml_call2
         (main_execution_context_fun,main_execution_context$0,compile_acc$4),
       compile_acc$5=match$4[2],
       main_execution_context_gen=match$4[1],
       match$5=
        caml_call2
         (current_execution_context_fun,
          current_execution_context$0,
          compile_acc$5),
       compile_acc$6=match$5[2],
       current_execution_context_gen=match$5[1],
       match$6=caml_call2(uncaught_exn_fun,uncaught_exn,compile_acc$6),
       compile_acc$7=match$6[2],
       uncaught_exn_gen=match$6[1],
       match$7=caml_call2(cycle_count_fun,cycle_count$0,compile_acc$7),
       compile_acc$8=match$7[2],
       cycle_count_gen=match$7[1],
       match$8=caml_call2(cycle_start_fun,cycle_start$0,compile_acc$8),
       compile_acc$9=match$8[2],
       cycle_start_gen=match$8[1],
       match$9=
        caml_call2
         (run_every_cycle_start_fun,run_every_cycle_start$0,compile_acc$9),
       compile_acc$10=match$9[2],
       run_every_cycle_start_gen=match$9[1],
       match$10=
        caml_call2(last_cycle_time_fun,last_cycle_time$0,compile_acc$10),
       compile_acc$11=match$10[2],
       last_cycle_time_gen=match$10[1],
       match$11=
        caml_call2
         (last_cycle_num_jobs_fun,last_cycle_num_jobs$0,compile_acc$11),
       compile_acc$12=match$11[2],
       last_cycle_num_jobs_gen=match$11[1],
       match$12=caml_call2(time_source_fun,time_source$0,compile_acc$12),
       compile_acc$13=match$12[2],
       time_source_gen=match$12[1],
       match$13=caml_call2(external_jobs_fun,external_jobs$0,compile_acc$13),
       compile_acc$14=match$13[2],
       external_jobs_gen=match$13[1],
       match$14=
        caml_call2
         (thread_safe_external_job_hook_fun,
          thread_safe_external_job_hook$0,
          compile_acc$14),
       compile_acc$15=match$14[2],
       thread_safe_external_job_hook_gen=match$14[1],
       match$15=
        caml_call2(job_queued_hook_fun,job_queued_hook$0,compile_acc$15),
       compile_acc$16=match$15[2],
       job_queued_hook_gen=match$15[1],
       match$16=
        caml_call2(event_added_hook_fun,event_added_hook$0,compile_acc$16),
       compile_acc$17=match$16[2],
       event_added_hook_gen=match$16[1],
       match$17=caml_call2(yield_fun,yield$1,compile_acc$17),
       compile_acc$18=match$17[2],
       yield_gen=match$17[1],
       match$18=
        caml_call2
         (yield_until_no_jobs_remain_fun,
          yield_until_no_jobs_remain$0,
          compile_acc$18),
       compile_acc$19=match$18[2],
       yield_until_no_jobs_remain_gen=match$18[1],
       match$19=
        caml_call2(check_invariants_fun,check_invariants$3,compile_acc$19),
       compile_acc$20=match$19[2],
       check_invariants_gen=match$19[1],
       match$20=
        caml_call2
         (max_num_jobs_per_priority_per_cycle_fun,
          max_num_jobs_per_priority_per_cycle$3,
          compile_acc$20),
       compile_acc$21=match$20[2],
       max_num_jobs_per_priority_per_cycle_gen=match$20[1],
       match$21=
        caml_call2(record_backtraces_fun,record_backtraces$3,compile_acc$21),
       compile_acc$22=match$21[2],
       record_backtraces_gen=match$21[1],
       match$22=
        caml_call2(on_start_of_cycle_fun,on_start_of_cycle$0,compile_acc$22),
       compile_acc$23=match$22[2],
       on_start_of_cycle_gen=match$22[1],
       match$23=
        caml_call2(on_end_of_cycle_fun,on_end_of_cycle$0,compile_acc$23),
       compile_acc$24=match$23[2],
       on_end_of_cycle_gen=match$23[1];
      return [0,
              function(acc)
               {var
                 check_access=caml_call1(check_access_gen,acc),
                 job_pool=caml_call1(job_pool_gen,acc),
                 normal_priority_jobs=caml_call1(normal_priority_jobs_gen,acc),
                 low_priority_jobs=caml_call1(low_priority_jobs_gen,acc),
                 very_low_priority_workers=
                  caml_call1(very_low_priority_workers_gen,acc),
                 main_execution_context=
                  caml_call1(main_execution_context_gen,acc),
                 current_execution_context=
                  caml_call1(current_execution_context_gen,acc),
                 uncaught_exn=caml_call1(uncaught_exn_gen,acc),
                 cycle_count=caml_call1(cycle_count_gen,acc),
                 cycle_start=caml_call1(cycle_start_gen,acc),
                 run_every_cycle_start=
                  caml_call1(run_every_cycle_start_gen,acc),
                 last_cycle_time=caml_call1(last_cycle_time_gen,acc),
                 last_cycle_num_jobs=caml_call1(last_cycle_num_jobs_gen,acc),
                 time_source=caml_call1(time_source_gen,acc),
                 external_jobs=caml_call1(external_jobs_gen,acc),
                 thread_safe_external_job_hook=
                  caml_call1(thread_safe_external_job_hook_gen,acc),
                 job_queued_hook=caml_call1(job_queued_hook_gen,acc),
                 event_added_hook=caml_call1(event_added_hook_gen,acc),
                 yield$0=caml_call1(yield_gen,acc),
                 yield_until_no_jobs_remain=
                  caml_call1(yield_until_no_jobs_remain_gen,acc),
                 check_invariants=caml_call1(check_invariants_gen,acc),
                 max_num_jobs_per_priority_per_cycle=
                  caml_call1(max_num_jobs_per_priority_per_cycle_gen,acc),
                 record_backtraces=caml_call1(record_backtraces_gen,acc),
                 on_start_of_cycle=caml_call1(on_start_of_cycle_gen,acc),
                 on_end_of_cycle=caml_call1(on_end_of_cycle_gen,acc);
                return [0,
                        check_access,
                        job_pool,
                        normal_priority_jobs,
                        low_priority_jobs,
                        very_low_priority_workers,
                        main_execution_context,
                        current_execution_context,
                        uncaught_exn,
                        cycle_count,
                        cycle_start,
                        run_every_cycle_start,
                        last_cycle_time,
                        last_cycle_num_jobs,
                        time_source,
                        external_jobs,
                        thread_safe_external_job_hook,
                        job_queued_hook,
                        event_added_hook,
                        yield$0,
                        yield_until_no_jobs_remain,
                        check_invariants,
                        max_num_jobs_per_priority_per_cycle,
                        record_backtraces,
                        on_start_of_cycle,
                        on_end_of_cycle]},
              compile_acc$24]}
    function create$8
     (check_access,
      job_pool,
      normal_priority_jobs,
      low_priority_jobs,
      very_low_priority_workers,
      main_execution_context,
      current_execution_context,
      uncaught_exn,
      cycle_count,
      cycle_start,
      run_every_cycle_start,
      last_cycle_time,
      last_cycle_num_jobs,
      time_source,
      external_jobs,
      thread_safe_external_job_hook,
      job_queued_hook,
      event_added_hook,
      yield$0,
      yield_until_no_jobs_remain,
      check_invariants,
      max_num_jobs_per_priority_per_cycle,
      record_backtraces,
      on_start_of_cycle,
      on_end_of_cycle)
     {return [0,
              check_access,
              job_pool,
              normal_priority_jobs,
              low_priority_jobs,
              very_low_priority_workers,
              main_execution_context,
              current_execution_context,
              uncaught_exn,
              cycle_count,
              cycle_start,
              run_every_cycle_start,
              last_cycle_time,
              last_cycle_num_jobs,
              time_source,
              external_jobs,
              thread_safe_external_job_hook,
              job_queued_hook,
              event_added_hook,
              yield$0,
              yield_until_no_jobs_remain,
              check_invariants,
              max_num_jobs_per_priority_per_cycle,
              record_backtraces,
              on_start_of_cycle,
              on_end_of_cycle]}
    function map$9
     (check_access_fun,
      job_pool_fun,
      normal_priority_jobs_fun,
      low_priority_jobs_fun,
      very_low_priority_workers_fun,
      main_execution_context_fun,
      current_execution_context_fun,
      uncaught_exn_fun,
      cycle_count_fun,
      cycle_start_fun,
      run_every_cycle_start_fun,
      last_cycle_time_fun,
      last_cycle_num_jobs_fun,
      time_source_fun,
      external_jobs_fun,
      thread_safe_external_job_hook_fun,
      job_queued_hook_fun,
      event_added_hook_fun,
      yield_fun,
      yield_until_no_jobs_remain_fun,
      check_invariants_fun,
      max_num_jobs_per_priority_per_cycle_fun,
      record_backtraces_fun,
      on_start_of_cycle_fun,
      on_end_of_cycle_fun)
     {var
       _adw_=caml_call1(on_end_of_cycle_fun,on_end_of_cycle$0),
       _adx_=caml_call1(on_start_of_cycle_fun,on_start_of_cycle$0),
       _ady_=caml_call1(record_backtraces_fun,record_backtraces$3),
       _adz_=
        caml_call1
         (max_num_jobs_per_priority_per_cycle_fun,
          max_num_jobs_per_priority_per_cycle$3),
       _adA_=caml_call1(check_invariants_fun,check_invariants$3),
       _adB_=
        caml_call1
         (yield_until_no_jobs_remain_fun,yield_until_no_jobs_remain$0),
       _adC_=caml_call1(yield_fun,yield$1),
       _adD_=caml_call1(event_added_hook_fun,event_added_hook$0),
       _adE_=caml_call1(job_queued_hook_fun,job_queued_hook$0),
       _adF_=
        caml_call1
         (thread_safe_external_job_hook_fun,thread_safe_external_job_hook$0),
       _adG_=caml_call1(external_jobs_fun,external_jobs$0),
       _adH_=caml_call1(time_source_fun,time_source$0),
       _adI_=caml_call1(last_cycle_num_jobs_fun,last_cycle_num_jobs$0),
       _adJ_=caml_call1(last_cycle_time_fun,last_cycle_time$0),
       _adK_=caml_call1(run_every_cycle_start_fun,run_every_cycle_start$0),
       _adL_=caml_call1(cycle_start_fun,cycle_start$0),
       _adM_=caml_call1(cycle_count_fun,cycle_count$0),
       _adN_=caml_call1(uncaught_exn_fun,uncaught_exn),
       _adO_=
        caml_call1(current_execution_context_fun,current_execution_context$0),
       _adP_=caml_call1(main_execution_context_fun,main_execution_context$0),
       _adQ_=
        caml_call1(very_low_priority_workers_fun,very_low_priority_workers$0),
       _adR_=caml_call1(low_priority_jobs_fun,low_priority_jobs$0),
       _adS_=caml_call1(normal_priority_jobs_fun,normal_priority_jobs$0),
       _adT_=caml_call1(job_pool_fun,job_pool$0);
      return [0,
              caml_call1(check_access_fun,check_access$0),
              _adT_,
              _adS_,
              _adR_,
              _adQ_,
              _adP_,
              _adO_,
              _adN_,
              _adM_,
              _adL_,
              _adK_,
              _adJ_,
              _adI_,
              _adH_,
              _adG_,
              _adF_,
              _adE_,
              _adD_,
              _adC_,
              _adB_,
              _adA_,
              _adz_,
              _ady_,
              _adx_,
              _adw_]}
    function iter$9
     (check_access_fun,
      job_pool_fun,
      normal_priority_jobs_fun,
      low_priority_jobs_fun,
      very_low_priority_workers_fun,
      main_execution_context_fun,
      current_execution_context_fun,
      uncaught_exn_fun,
      cycle_count_fun,
      cycle_start_fun,
      run_every_cycle_start_fun,
      last_cycle_time_fun,
      last_cycle_num_jobs_fun,
      time_source_fun,
      external_jobs_fun,
      thread_safe_external_job_hook_fun,
      job_queued_hook_fun,
      event_added_hook_fun,
      yield_fun,
      yield_until_no_jobs_remain_fun,
      check_invariants_fun,
      max_num_jobs_per_priority_per_cycle_fun,
      record_backtraces_fun,
      on_start_of_cycle_fun,
      on_end_of_cycle_fun)
     {caml_call1(check_access_fun,check_access$0);
      caml_call1(job_pool_fun,job_pool$0);
      caml_call1(normal_priority_jobs_fun,normal_priority_jobs$0);
      caml_call1(low_priority_jobs_fun,low_priority_jobs$0);
      caml_call1(very_low_priority_workers_fun,very_low_priority_workers$0);
      caml_call1(main_execution_context_fun,main_execution_context$0);
      caml_call1(current_execution_context_fun,current_execution_context$0);
      caml_call1(uncaught_exn_fun,uncaught_exn);
      caml_call1(cycle_count_fun,cycle_count$0);
      caml_call1(cycle_start_fun,cycle_start$0);
      caml_call1(run_every_cycle_start_fun,run_every_cycle_start$0);
      caml_call1(last_cycle_time_fun,last_cycle_time$0);
      caml_call1(last_cycle_num_jobs_fun,last_cycle_num_jobs$0);
      caml_call1(time_source_fun,time_source$0);
      caml_call1(external_jobs_fun,external_jobs$0);
      caml_call1
       (thread_safe_external_job_hook_fun,thread_safe_external_job_hook$0);
      caml_call1(job_queued_hook_fun,job_queued_hook$0);
      caml_call1(event_added_hook_fun,event_added_hook$0);
      caml_call1(yield_fun,yield$1);
      caml_call1(yield_until_no_jobs_remain_fun,yield_until_no_jobs_remain$0);
      caml_call1(check_invariants_fun,check_invariants$3);
      caml_call1
       (max_num_jobs_per_priority_per_cycle_fun,
        max_num_jobs_per_priority_per_cycle$3);
      caml_call1(record_backtraces_fun,record_backtraces$3);
      caml_call1(on_start_of_cycle_fun,on_start_of_cycle$0);
      return caml_call1(on_end_of_cycle_fun,on_end_of_cycle$0)}
    function fold$9
     (init,
      check_access_fun,
      job_pool_fun,
      normal_priority_jobs_fun,
      low_priority_jobs_fun,
      very_low_priority_workers_fun,
      main_execution_context_fun,
      current_execution_context_fun,
      uncaught_exn_fun,
      cycle_count_fun,
      cycle_start_fun,
      run_every_cycle_start_fun,
      last_cycle_time_fun,
      last_cycle_num_jobs_fun,
      time_source_fun,
      external_jobs_fun,
      thread_safe_external_job_hook_fun,
      job_queued_hook_fun,
      event_added_hook_fun,
      yield_fun,
      yield_until_no_jobs_remain_fun,
      check_invariants_fun,
      max_num_jobs_per_priority_per_cycle_fun,
      record_backtraces_fun,
      on_start_of_cycle_fun,
      on_end_of_cycle_fun)
     {return caml_call2
              (on_end_of_cycle_fun,
               caml_call2
                (on_start_of_cycle_fun,
                 caml_call2
                  (record_backtraces_fun,
                   caml_call2
                    (max_num_jobs_per_priority_per_cycle_fun,
                     caml_call2
                      (check_invariants_fun,
                       caml_call2
                        (yield_until_no_jobs_remain_fun,
                         caml_call2
                          (yield_fun,
                           caml_call2
                            (event_added_hook_fun,
                             caml_call2
                              (job_queued_hook_fun,
                               caml_call2
                                (thread_safe_external_job_hook_fun,
                                 caml_call2
                                  (external_jobs_fun,
                                   caml_call2
                                    (time_source_fun,
                                     caml_call2
                                      (last_cycle_num_jobs_fun,
                                       caml_call2
                                        (last_cycle_time_fun,
                                         caml_call2
                                          (run_every_cycle_start_fun,
                                           caml_call2
                                            (cycle_start_fun,
                                             caml_call2
                                              (cycle_count_fun,
                                               caml_call2
                                                (uncaught_exn_fun,
                                                 caml_call2
                                                  (current_execution_context_fun,
                                                   caml_call2
                                                    (main_execution_context_fun,
                                                     caml_call2
                                                      (very_low_priority_workers_fun,
                                                       caml_call2
                                                        (low_priority_jobs_fun,
                                                         caml_call2
                                                          (normal_priority_jobs_fun,
                                                           caml_call2
                                                            (job_pool_fun,
                                                             caml_call2(check_access_fun,init,check_access$0),
                                                             job_pool$0),
                                                           normal_priority_jobs$0),
                                                         low_priority_jobs$0),
                                                       very_low_priority_workers$0),
                                                     main_execution_context$0),
                                                   current_execution_context$0),
                                                 uncaught_exn),
                                               cycle_count$0),
                                             cycle_start$0),
                                           run_every_cycle_start$0),
                                         last_cycle_time$0),
                                       last_cycle_num_jobs$0),
                                     time_source$0),
                                   external_jobs$0),
                                 thread_safe_external_job_hook$0),
                               job_queued_hook$0),
                             event_added_hook$0),
                           yield$1),
                         yield_until_no_jobs_remain$0),
                       check_invariants$3),
                     max_num_jobs_per_priority_per_cycle$3),
                   record_backtraces$3),
                 on_start_of_cycle$0),
               on_end_of_cycle$0)}
    function map_poly$4(record)
     {var
       _ac__=[0,caml_call1(record[1],on_end_of_cycle$0),0],
       _ac$_=[0,caml_call1(record[1],on_start_of_cycle$0),_ac__],
       _ada_=[0,caml_call1(record[1],record_backtraces$3),_ac$_],
       _adb_=
        [0,caml_call1(record[1],max_num_jobs_per_priority_per_cycle$3),_ada_],
       _adc_=[0,caml_call1(record[1],check_invariants$3),_adb_],
       _add_=[0,caml_call1(record[1],yield_until_no_jobs_remain$0),_adc_],
       _ade_=[0,caml_call1(record[1],yield$1),_add_],
       _adf_=[0,caml_call1(record[1],event_added_hook$0),_ade_],
       _adg_=[0,caml_call1(record[1],job_queued_hook$0),_adf_],
       _adh_=[0,caml_call1(record[1],thread_safe_external_job_hook$0),_adg_],
       _adi_=[0,caml_call1(record[1],external_jobs$0),_adh_],
       _adj_=[0,caml_call1(record[1],time_source$0),_adi_],
       _adk_=[0,caml_call1(record[1],last_cycle_num_jobs$0),_adj_],
       _adl_=[0,caml_call1(record[1],last_cycle_time$0),_adk_],
       _adm_=[0,caml_call1(record[1],run_every_cycle_start$0),_adl_],
       _adn_=[0,caml_call1(record[1],cycle_start$0),_adm_],
       _ado_=[0,caml_call1(record[1],cycle_count$0),_adn_],
       _adp_=[0,caml_call1(record[1],uncaught_exn),_ado_],
       _adq_=[0,caml_call1(record[1],current_execution_context$0),_adp_],
       _adr_=[0,caml_call1(record[1],main_execution_context$0),_adq_],
       _ads_=[0,caml_call1(record[1],very_low_priority_workers$0),_adr_],
       _adt_=[0,caml_call1(record[1],low_priority_jobs$0),_ads_],
       _adu_=[0,caml_call1(record[1],normal_priority_jobs$0),_adt_],
       _adv_=[0,caml_call1(record[1],job_pool$0),_adu_];
      return [0,caml_call1(record[1],check_access$0),_adv_]}
    function for_all$9
     (check_access_fun,
      job_pool_fun,
      normal_priority_jobs_fun,
      low_priority_jobs_fun,
      very_low_priority_workers_fun,
      main_execution_context_fun,
      current_execution_context_fun,
      uncaught_exn_fun,
      cycle_count_fun,
      cycle_start_fun,
      run_every_cycle_start_fun,
      last_cycle_time_fun,
      last_cycle_num_jobs_fun,
      time_source_fun,
      external_jobs_fun,
      thread_safe_external_job_hook_fun,
      job_queued_hook_fun,
      event_added_hook_fun,
      yield_fun,
      yield_until_no_jobs_remain_fun,
      check_invariants_fun,
      max_num_jobs_per_priority_per_cycle_fun,
      record_backtraces_fun,
      on_start_of_cycle_fun,
      on_end_of_cycle_fun)
     {var
       _acM_=caml_call1(check_access_fun,check_access$0),
       _acN_=_acM_?caml_call1(job_pool_fun,job_pool$0):_acM_,
       _acO_=
        _acN_
         ?caml_call1(normal_priority_jobs_fun,normal_priority_jobs$0)
         :_acN_,
       _acP_=_acO_?caml_call1(low_priority_jobs_fun,low_priority_jobs$0):_acO_,
       _acQ_=
        _acP_
         ?caml_call1
           (very_low_priority_workers_fun,very_low_priority_workers$0)
         :_acP_,
       _acR_=
        _acQ_
         ?caml_call1(main_execution_context_fun,main_execution_context$0)
         :_acQ_,
       _acS_=
        _acR_
         ?caml_call1
           (current_execution_context_fun,current_execution_context$0)
         :_acR_,
       _acT_=_acS_?caml_call1(uncaught_exn_fun,uncaught_exn):_acS_,
       _acU_=_acT_?caml_call1(cycle_count_fun,cycle_count$0):_acT_,
       _acV_=_acU_?caml_call1(cycle_start_fun,cycle_start$0):_acU_,
       _acW_=
        _acV_
         ?caml_call1(run_every_cycle_start_fun,run_every_cycle_start$0)
         :_acV_,
       _acX_=_acW_?caml_call1(last_cycle_time_fun,last_cycle_time$0):_acW_,
       _acY_=
        _acX_?caml_call1(last_cycle_num_jobs_fun,last_cycle_num_jobs$0):_acX_,
       _acZ_=_acY_?caml_call1(time_source_fun,time_source$0):_acY_,
       _ac0_=_acZ_?caml_call1(external_jobs_fun,external_jobs$0):_acZ_,
       _ac1_=
        _ac0_
         ?caml_call1
           (thread_safe_external_job_hook_fun,thread_safe_external_job_hook$0)
         :_ac0_,
       _ac2_=_ac1_?caml_call1(job_queued_hook_fun,job_queued_hook$0):_ac1_,
       _ac3_=_ac2_?caml_call1(event_added_hook_fun,event_added_hook$0):_ac2_,
       _ac4_=_ac3_?caml_call1(yield_fun,yield$1):_ac3_,
       _ac5_=
        _ac4_
         ?caml_call1
           (yield_until_no_jobs_remain_fun,yield_until_no_jobs_remain$0)
         :_ac4_,
       _ac6_=_ac5_?caml_call1(check_invariants_fun,check_invariants$3):_ac5_,
       _ac7_=
        _ac6_
         ?caml_call1
           (max_num_jobs_per_priority_per_cycle_fun,
            max_num_jobs_per_priority_per_cycle$3)
         :_ac6_,
       _ac8_=_ac7_?caml_call1(record_backtraces_fun,record_backtraces$3):_ac7_,
       _ac9_=_ac8_?caml_call1(on_start_of_cycle_fun,on_start_of_cycle$0):_ac8_;
      return _ac9_?caml_call1(on_end_of_cycle_fun,on_end_of_cycle$0):_ac9_}
    function exists$9
     (check_access_fun,
      job_pool_fun,
      normal_priority_jobs_fun,
      low_priority_jobs_fun,
      very_low_priority_workers_fun,
      main_execution_context_fun,
      current_execution_context_fun,
      uncaught_exn_fun,
      cycle_count_fun,
      cycle_start_fun,
      run_every_cycle_start_fun,
      last_cycle_time_fun,
      last_cycle_num_jobs_fun,
      time_source_fun,
      external_jobs_fun,
      thread_safe_external_job_hook_fun,
      job_queued_hook_fun,
      event_added_hook_fun,
      yield_fun,
      yield_until_no_jobs_remain_fun,
      check_invariants_fun,
      max_num_jobs_per_priority_per_cycle_fun,
      record_backtraces_fun,
      on_start_of_cycle_fun,
      on_end_of_cycle_fun)
     {var
       _acL_=caml_call1(check_access_fun,check_access$0),
       _aco_=_acL_ || caml_call1(job_pool_fun,job_pool$0),
       _acp_=
        _aco_
        ||
        caml_call1(normal_priority_jobs_fun,normal_priority_jobs$0),
       _acq_=_acp_ || caml_call1(low_priority_jobs_fun,low_priority_jobs$0),
       _acr_=
        _acq_
        ||
        caml_call1(very_low_priority_workers_fun,very_low_priority_workers$0),
       _acs_=
        _acr_
        ||
        caml_call1(main_execution_context_fun,main_execution_context$0),
       _act_=
        _acs_
        ||
        caml_call1(current_execution_context_fun,current_execution_context$0),
       _acu_=_act_ || caml_call1(uncaught_exn_fun,uncaught_exn),
       _acv_=_acu_ || caml_call1(cycle_count_fun,cycle_count$0),
       _acw_=_acv_ || caml_call1(cycle_start_fun,cycle_start$0),
       _acx_=
        _acw_
        ||
        caml_call1(run_every_cycle_start_fun,run_every_cycle_start$0),
       _acy_=_acx_ || caml_call1(last_cycle_time_fun,last_cycle_time$0),
       _acz_=
        _acy_
        ||
        caml_call1(last_cycle_num_jobs_fun,last_cycle_num_jobs$0),
       _acA_=_acz_ || caml_call1(time_source_fun,time_source$0),
       _acB_=_acA_ || caml_call1(external_jobs_fun,external_jobs$0),
       _acC_=
        _acB_
        ||
        caml_call1
         (thread_safe_external_job_hook_fun,thread_safe_external_job_hook$0),
       _acD_=_acC_ || caml_call1(job_queued_hook_fun,job_queued_hook$0),
       _acE_=_acD_ || caml_call1(event_added_hook_fun,event_added_hook$0),
       _acF_=_acE_ || caml_call1(yield_fun,yield$1),
       _acG_=
        _acF_
        ||
        caml_call1
         (yield_until_no_jobs_remain_fun,yield_until_no_jobs_remain$0),
       _acH_=_acG_ || caml_call1(check_invariants_fun,check_invariants$3),
       _acI_=
        _acH_
        ||
        caml_call1
         (max_num_jobs_per_priority_per_cycle_fun,
          max_num_jobs_per_priority_per_cycle$3),
       _acJ_=_acI_ || caml_call1(record_backtraces_fun,record_backtraces$3),
       _acK_=_acJ_ || caml_call1(on_start_of_cycle_fun,on_start_of_cycle$0);
      return _acK_?_acK_:caml_call1(on_end_of_cycle_fun,on_end_of_cycle$0)}
    function to_list$9
     (check_access_fun,
      job_pool_fun,
      normal_priority_jobs_fun,
      low_priority_jobs_fun,
      very_low_priority_workers_fun,
      main_execution_context_fun,
      current_execution_context_fun,
      uncaught_exn_fun,
      cycle_count_fun,
      cycle_start_fun,
      run_every_cycle_start_fun,
      last_cycle_time_fun,
      last_cycle_num_jobs_fun,
      time_source_fun,
      external_jobs_fun,
      thread_safe_external_job_hook_fun,
      job_queued_hook_fun,
      event_added_hook_fun,
      yield_fun,
      yield_until_no_jobs_remain_fun,
      check_invariants_fun,
      max_num_jobs_per_priority_per_cycle_fun,
      record_backtraces_fun,
      on_start_of_cycle_fun,
      on_end_of_cycle_fun)
     {var
       _ab2_=[0,caml_call1(on_end_of_cycle_fun,on_end_of_cycle$0),0],
       _ab3_=[0,caml_call1(on_start_of_cycle_fun,on_start_of_cycle$0),_ab2_],
       _ab4_=[0,caml_call1(record_backtraces_fun,record_backtraces$3),_ab3_],
       _ab5_=
        [0,
         caml_call1
          (max_num_jobs_per_priority_per_cycle_fun,
           max_num_jobs_per_priority_per_cycle$3),
         _ab4_],
       _ab6_=[0,caml_call1(check_invariants_fun,check_invariants$3),_ab5_],
       _ab7_=
        [0,
         caml_call1
          (yield_until_no_jobs_remain_fun,yield_until_no_jobs_remain$0),
         _ab6_],
       _ab8_=[0,caml_call1(yield_fun,yield$1),_ab7_],
       _ab9_=[0,caml_call1(event_added_hook_fun,event_added_hook$0),_ab8_],
       _ab__=[0,caml_call1(job_queued_hook_fun,job_queued_hook$0),_ab9_],
       _ab$_=
        [0,
         caml_call1
          (thread_safe_external_job_hook_fun,thread_safe_external_job_hook$0),
         _ab__],
       _aca_=[0,caml_call1(external_jobs_fun,external_jobs$0),_ab$_],
       _acb_=[0,caml_call1(time_source_fun,time_source$0),_aca_],
       _acc_=
        [0,caml_call1(last_cycle_num_jobs_fun,last_cycle_num_jobs$0),_acb_],
       _acd_=[0,caml_call1(last_cycle_time_fun,last_cycle_time$0),_acc_],
       _ace_=
        [0,
         caml_call1(run_every_cycle_start_fun,run_every_cycle_start$0),
         _acd_],
       _acf_=[0,caml_call1(cycle_start_fun,cycle_start$0),_ace_],
       _acg_=[0,caml_call1(cycle_count_fun,cycle_count$0),_acf_],
       _ach_=[0,caml_call1(uncaught_exn_fun,uncaught_exn),_acg_],
       _aci_=
        [0,
         caml_call1(current_execution_context_fun,current_execution_context$0),
         _ach_],
       _acj_=
        [0,
         caml_call1(main_execution_context_fun,main_execution_context$0),
         _aci_],
       _ack_=
        [0,
         caml_call1(very_low_priority_workers_fun,very_low_priority_workers$0),
         _acj_],
       _acl_=[0,caml_call1(low_priority_jobs_fun,low_priority_jobs$0),_ack_],
       _acm_=
        [0,caml_call1(normal_priority_jobs_fun,normal_priority_jobs$0),_acl_],
       _acn_=[0,caml_call1(job_pool_fun,job_pool$0),_acm_];
      return [0,caml_call1(check_access_fun,check_access$0),_acn_]}
    function iter$10
     (record,
      check_access_fun,
      job_pool_fun,
      normal_priority_jobs_fun,
      low_priority_jobs_fun,
      very_low_priority_workers_fun,
      main_execution_context_fun,
      current_execution_context_fun,
      uncaught_exn_fun,
      cycle_count_fun,
      cycle_start_fun,
      run_every_cycle_start_fun,
      last_cycle_time_fun,
      last_cycle_num_jobs_fun,
      time_source_fun,
      external_jobs_fun,
      thread_safe_external_job_hook_fun,
      job_queued_hook_fun,
      event_added_hook_fun,
      yield_fun,
      yield_until_no_jobs_remain_fun,
      check_invariants_fun,
      max_num_jobs_per_priority_per_cycle_fun,
      record_backtraces_fun,
      on_start_of_cycle_fun,
      on_end_of_cycle_fun)
     {caml_call3(check_access_fun,check_access$0,record,record[1]);
      caml_call3(job_pool_fun,job_pool$0,record,record[2]);
      caml_call3
       (normal_priority_jobs_fun,normal_priority_jobs$0,record,record[3]);
      caml_call3(low_priority_jobs_fun,low_priority_jobs$0,record,record[4]);
      caml_call3
       (very_low_priority_workers_fun,
        very_low_priority_workers$0,
        record,
        record[5]);
      caml_call3
       (main_execution_context_fun,main_execution_context$0,record,record[6]);
      caml_call3
       (current_execution_context_fun,
        current_execution_context$0,
        record,
        record[7]);
      caml_call3(uncaught_exn_fun,uncaught_exn,record,record[8]);
      caml_call3(cycle_count_fun,cycle_count$0,record,record[9]);
      caml_call3(cycle_start_fun,cycle_start$0,record,record[10]);
      caml_call3
       (run_every_cycle_start_fun,run_every_cycle_start$0,record,record[11]);
      caml_call3(last_cycle_time_fun,last_cycle_time$0,record,record[12]);
      caml_call3
       (last_cycle_num_jobs_fun,last_cycle_num_jobs$0,record,record[13]);
      caml_call3(time_source_fun,time_source$0,record,record[14]);
      caml_call3(external_jobs_fun,external_jobs$0,record,record[15]);
      caml_call3
       (thread_safe_external_job_hook_fun,
        thread_safe_external_job_hook$0,
        record,
        record[16]);
      caml_call3(job_queued_hook_fun,job_queued_hook$0,record,record[17]);
      caml_call3(event_added_hook_fun,event_added_hook$0,record,record[18]);
      caml_call3(yield_fun,yield$1,record,record[19]);
      caml_call3
       (yield_until_no_jobs_remain_fun,
        yield_until_no_jobs_remain$0,
        record,
        record[20]);
      caml_call3(check_invariants_fun,check_invariants$3,record,record[21]);
      caml_call3
       (max_num_jobs_per_priority_per_cycle_fun,
        max_num_jobs_per_priority_per_cycle$3,
        record,
        record[22]);
      caml_call3(record_backtraces_fun,record_backtraces$3,record,record[23]);
      caml_call3(on_start_of_cycle_fun,on_start_of_cycle$0,record,record[24]);
      return caml_call3
              (on_end_of_cycle_fun,on_end_of_cycle$0,record,record[25])}
    function fold$10
     (record,
      init,
      check_access_fun,
      job_pool_fun,
      normal_priority_jobs_fun,
      low_priority_jobs_fun,
      very_low_priority_workers_fun,
      main_execution_context_fun,
      current_execution_context_fun,
      uncaught_exn_fun,
      cycle_count_fun,
      cycle_start_fun,
      run_every_cycle_start_fun,
      last_cycle_time_fun,
      last_cycle_num_jobs_fun,
      time_source_fun,
      external_jobs_fun,
      thread_safe_external_job_hook_fun,
      job_queued_hook_fun,
      event_added_hook_fun,
      yield_fun,
      yield_until_no_jobs_remain_fun,
      check_invariants_fun,
      max_num_jobs_per_priority_per_cycle_fun,
      record_backtraces_fun,
      on_start_of_cycle_fun,
      on_end_of_cycle_fun)
     {var
       _abE_=record[25],
       _abF_=record[24],
       _abG_=record[23],
       _abH_=record[22],
       _abI_=record[21],
       _abJ_=record[20],
       _abK_=record[19],
       _abL_=record[18],
       _abM_=record[17],
       _abN_=record[16],
       _abO_=record[15],
       _abP_=record[14],
       _abQ_=record[13],
       _abR_=record[12],
       _abS_=record[11],
       _abT_=record[10],
       _abU_=record[9],
       _abV_=record[8],
       _abW_=record[7],
       _abX_=record[6],
       _abY_=record[5],
       _abZ_=record[4],
       _ab0_=record[3],
       _ab1_=record[2];
      return caml_call4
              (on_end_of_cycle_fun,
               caml_call4
                (on_start_of_cycle_fun,
                 caml_call4
                  (record_backtraces_fun,
                   caml_call4
                    (max_num_jobs_per_priority_per_cycle_fun,
                     caml_call4
                      (check_invariants_fun,
                       caml_call4
                        (yield_until_no_jobs_remain_fun,
                         caml_call4
                          (yield_fun,
                           caml_call4
                            (event_added_hook_fun,
                             caml_call4
                              (job_queued_hook_fun,
                               caml_call4
                                (thread_safe_external_job_hook_fun,
                                 caml_call4
                                  (external_jobs_fun,
                                   caml_call4
                                    (time_source_fun,
                                     caml_call4
                                      (last_cycle_num_jobs_fun,
                                       caml_call4
                                        (last_cycle_time_fun,
                                         caml_call4
                                          (run_every_cycle_start_fun,
                                           caml_call4
                                            (cycle_start_fun,
                                             caml_call4
                                              (cycle_count_fun,
                                               caml_call4
                                                (uncaught_exn_fun,
                                                 caml_call4
                                                  (current_execution_context_fun,
                                                   caml_call4
                                                    (main_execution_context_fun,
                                                     caml_call4
                                                      (very_low_priority_workers_fun,
                                                       caml_call4
                                                        (low_priority_jobs_fun,
                                                         caml_call4
                                                          (normal_priority_jobs_fun,
                                                           caml_call4
                                                            (job_pool_fun,
                                                             caml_call4
                                                              (check_access_fun,init,check_access$0,record,record[1]),
                                                             job_pool$0,
                                                             record,
                                                             _ab1_),
                                                           normal_priority_jobs$0,
                                                           record,
                                                           _ab0_),
                                                         low_priority_jobs$0,
                                                         record,
                                                         _abZ_),
                                                       very_low_priority_workers$0,
                                                       record,
                                                       _abY_),
                                                     main_execution_context$0,
                                                     record,
                                                     _abX_),
                                                   current_execution_context$0,
                                                   record,
                                                   _abW_),
                                                 uncaught_exn,
                                                 record,
                                                 _abV_),
                                               cycle_count$0,
                                               record,
                                               _abU_),
                                             cycle_start$0,
                                             record,
                                             _abT_),
                                           run_every_cycle_start$0,
                                           record,
                                           _abS_),
                                         last_cycle_time$0,
                                         record,
                                         _abR_),
                                       last_cycle_num_jobs$0,
                                       record,
                                       _abQ_),
                                     time_source$0,
                                     record,
                                     _abP_),
                                   external_jobs$0,
                                   record,
                                   _abO_),
                                 thread_safe_external_job_hook$0,
                                 record,
                                 _abN_),
                               job_queued_hook$0,
                               record,
                               _abM_),
                             event_added_hook$0,
                             record,
                             _abL_),
                           yield$1,
                           record,
                           _abK_),
                         yield_until_no_jobs_remain$0,
                         record,
                         _abJ_),
                       check_invariants$3,
                       record,
                       _abI_),
                     max_num_jobs_per_priority_per_cycle$3,
                     record,
                     _abH_),
                   record_backtraces$3,
                   record,
                   _abG_),
                 on_start_of_cycle$0,
                 record,
                 _abF_),
               on_end_of_cycle$0,
               record,
               _abE_)}
    function for_all$10
     (record,
      check_access_fun,
      job_pool_fun,
      normal_priority_jobs_fun,
      low_priority_jobs_fun,
      very_low_priority_workers_fun,
      main_execution_context_fun,
      current_execution_context_fun,
      uncaught_exn_fun,
      cycle_count_fun,
      cycle_start_fun,
      run_every_cycle_start_fun,
      last_cycle_time_fun,
      last_cycle_num_jobs_fun,
      time_source_fun,
      external_jobs_fun,
      thread_safe_external_job_hook_fun,
      job_queued_hook_fun,
      event_added_hook_fun,
      yield_fun,
      yield_until_no_jobs_remain_fun,
      check_invariants_fun,
      max_num_jobs_per_priority_per_cycle_fun,
      record_backtraces_fun,
      on_start_of_cycle_fun,
      on_end_of_cycle_fun)
     {var
       _abg_=caml_call3(check_access_fun,check_access$0,record,record[1]),
       _abh_=_abg_?caml_call3(job_pool_fun,job_pool$0,record,record[2]):_abg_,
       _abi_=
        _abh_
         ?caml_call3
           (normal_priority_jobs_fun,normal_priority_jobs$0,record,record[3])
         :_abh_,
       _abj_=
        _abi_
         ?caml_call3
           (low_priority_jobs_fun,low_priority_jobs$0,record,record[4])
         :_abi_,
       _abk_=
        _abj_
         ?caml_call3
           (very_low_priority_workers_fun,
            very_low_priority_workers$0,
            record,
            record[5])
         :_abj_,
       _abl_=
        _abk_
         ?caml_call3
           (main_execution_context_fun,
            main_execution_context$0,
            record,
            record[6])
         :_abk_,
       _abm_=
        _abl_
         ?caml_call3
           (current_execution_context_fun,
            current_execution_context$0,
            record,
            record[7])
         :_abl_,
       _abn_=
        _abm_?caml_call3(uncaught_exn_fun,uncaught_exn,record,record[8]):_abm_,
       _abo_=
        _abn_?caml_call3(cycle_count_fun,cycle_count$0,record,record[9]):_abn_,
       _abp_=
        _abo_
         ?caml_call3(cycle_start_fun,cycle_start$0,record,record[10])
         :_abo_,
       _abq_=
        _abp_
         ?caml_call3
           (run_every_cycle_start_fun,
            run_every_cycle_start$0,
            record,
            record[11])
         :_abp_,
       _abr_=
        _abq_
         ?caml_call3(last_cycle_time_fun,last_cycle_time$0,record,record[12])
         :_abq_,
       _abs_=
        _abr_
         ?caml_call3
           (last_cycle_num_jobs_fun,last_cycle_num_jobs$0,record,record[13])
         :_abr_,
       _abt_=
        _abs_
         ?caml_call3(time_source_fun,time_source$0,record,record[14])
         :_abs_,
       _abu_=
        _abt_
         ?caml_call3(external_jobs_fun,external_jobs$0,record,record[15])
         :_abt_,
       _abv_=
        _abu_
         ?caml_call3
           (thread_safe_external_job_hook_fun,
            thread_safe_external_job_hook$0,
            record,
            record[16])
         :_abu_,
       _abw_=
        _abv_
         ?caml_call3(job_queued_hook_fun,job_queued_hook$0,record,record[17])
         :_abv_,
       _abx_=
        _abw_
         ?caml_call3
           (event_added_hook_fun,event_added_hook$0,record,record[18])
         :_abw_,
       _aby_=_abx_?caml_call3(yield_fun,yield$1,record,record[19]):_abx_,
       _abz_=
        _aby_
         ?caml_call3
           (yield_until_no_jobs_remain_fun,
            yield_until_no_jobs_remain$0,
            record,
            record[20])
         :_aby_,
       _abA_=
        _abz_
         ?caml_call3
           (check_invariants_fun,check_invariants$3,record,record[21])
         :_abz_,
       _abB_=
        _abA_
         ?caml_call3
           (max_num_jobs_per_priority_per_cycle_fun,
            max_num_jobs_per_priority_per_cycle$3,
            record,
            record[22])
         :_abA_,
       _abC_=
        _abB_
         ?caml_call3
           (record_backtraces_fun,record_backtraces$3,record,record[23])
         :_abB_,
       _abD_=
        _abC_
         ?caml_call3
           (on_start_of_cycle_fun,on_start_of_cycle$0,record,record[24])
         :_abC_;
      return _abD_
              ?caml_call3
                (on_end_of_cycle_fun,on_end_of_cycle$0,record,record[25])
              :_abD_}
    function exists$10
     (record,
      check_access_fun,
      job_pool_fun,
      normal_priority_jobs_fun,
      low_priority_jobs_fun,
      very_low_priority_workers_fun,
      main_execution_context_fun,
      current_execution_context_fun,
      uncaught_exn_fun,
      cycle_count_fun,
      cycle_start_fun,
      run_every_cycle_start_fun,
      last_cycle_time_fun,
      last_cycle_num_jobs_fun,
      time_source_fun,
      external_jobs_fun,
      thread_safe_external_job_hook_fun,
      job_queued_hook_fun,
      event_added_hook_fun,
      yield_fun,
      yield_until_no_jobs_remain_fun,
      check_invariants_fun,
      max_num_jobs_per_priority_per_cycle_fun,
      record_backtraces_fun,
      on_start_of_cycle_fun,
      on_end_of_cycle_fun)
     {var
       _abf_=caml_call3(check_access_fun,check_access$0,record,record[1]),
       _aaU_=_abf_ || caml_call3(job_pool_fun,job_pool$0,record,record[2]),
       _aaV_=
        _aaU_
        ||
        caml_call3
         (normal_priority_jobs_fun,normal_priority_jobs$0,record,record[3]),
       _aaW_=
        _aaV_
        ||
        caml_call3(low_priority_jobs_fun,low_priority_jobs$0,record,record[4]),
       _aaX_=
        _aaW_
        ||
        caml_call3
         (very_low_priority_workers_fun,
          very_low_priority_workers$0,
          record,
          record[5]),
       _aaY_=
        _aaX_
        ||
        caml_call3
         (main_execution_context_fun,
          main_execution_context$0,
          record,
          record[6]),
       _aaZ_=
        _aaY_
        ||
        caml_call3
         (current_execution_context_fun,
          current_execution_context$0,
          record,
          record[7]),
       _aa0_=
        _aaZ_
        ||
        caml_call3(uncaught_exn_fun,uncaught_exn,record,record[8]),
       _aa1_=
        _aa0_
        ||
        caml_call3(cycle_count_fun,cycle_count$0,record,record[9]),
       _aa2_=
        _aa1_
        ||
        caml_call3(cycle_start_fun,cycle_start$0,record,record[10]),
       _aa3_=
        _aa2_
        ||
        caml_call3
         (run_every_cycle_start_fun,run_every_cycle_start$0,record,record[11]),
       _aa4_=
        _aa3_
        ||
        caml_call3(last_cycle_time_fun,last_cycle_time$0,record,record[12]),
       _aa5_=
        _aa4_
        ||
        caml_call3
         (last_cycle_num_jobs_fun,last_cycle_num_jobs$0,record,record[13]),
       _aa6_=
        _aa5_
        ||
        caml_call3(time_source_fun,time_source$0,record,record[14]),
       _aa7_=
        _aa6_
        ||
        caml_call3(external_jobs_fun,external_jobs$0,record,record[15]),
       _aa8_=
        _aa7_
        ||
        caml_call3
         (thread_safe_external_job_hook_fun,
          thread_safe_external_job_hook$0,
          record,
          record[16]),
       _aa9_=
        _aa8_
        ||
        caml_call3(job_queued_hook_fun,job_queued_hook$0,record,record[17]),
       _aa__=
        _aa9_
        ||
        caml_call3(event_added_hook_fun,event_added_hook$0,record,record[18]),
       _aa$_=_aa__ || caml_call3(yield_fun,yield$1,record,record[19]),
       _aba_=
        _aa$_
        ||
        caml_call3
         (yield_until_no_jobs_remain_fun,
          yield_until_no_jobs_remain$0,
          record,
          record[20]),
       _abb_=
        _aba_
        ||
        caml_call3(check_invariants_fun,check_invariants$3,record,record[21]),
       _abc_=
        _abb_
        ||
        caml_call3
         (max_num_jobs_per_priority_per_cycle_fun,
          max_num_jobs_per_priority_per_cycle$3,
          record,
          record[22]),
       _abd_=
        _abc_
        ||
        caml_call3
         (record_backtraces_fun,record_backtraces$3,record,record[23]),
       _abe_=
        _abd_
        ||
        caml_call3
         (on_start_of_cycle_fun,on_start_of_cycle$0,record,record[24]);
      return _abe_
              ?_abe_
              :caml_call3
                (on_end_of_cycle_fun,on_end_of_cycle$0,record,record[25])}
    function to_list$10
     (record,
      check_access_fun,
      job_pool_fun,
      normal_priority_jobs_fun,
      low_priority_jobs_fun,
      very_low_priority_workers_fun,
      main_execution_context_fun,
      current_execution_context_fun,
      uncaught_exn_fun,
      cycle_count_fun,
      cycle_start_fun,
      run_every_cycle_start_fun,
      last_cycle_time_fun,
      last_cycle_num_jobs_fun,
      time_source_fun,
      external_jobs_fun,
      thread_safe_external_job_hook_fun,
      job_queued_hook_fun,
      event_added_hook_fun,
      yield_fun,
      yield_until_no_jobs_remain_fun,
      check_invariants_fun,
      max_num_jobs_per_priority_per_cycle_fun,
      record_backtraces_fun,
      on_start_of_cycle_fun,
      on_end_of_cycle_fun)
     {var
       _aaw_=
        [0,
         caml_call3(on_end_of_cycle_fun,on_end_of_cycle$0,record,record[25]),
         0],
       _aax_=
        [0,
         caml_call3
          (on_start_of_cycle_fun,on_start_of_cycle$0,record,record[24]),
         _aaw_],
       _aay_=
        [0,
         caml_call3
          (record_backtraces_fun,record_backtraces$3,record,record[23]),
         _aax_],
       _aaz_=
        [0,
         caml_call3
          (max_num_jobs_per_priority_per_cycle_fun,
           max_num_jobs_per_priority_per_cycle$3,
           record,
           record[22]),
         _aay_],
       _aaA_=
        [0,
         caml_call3(check_invariants_fun,check_invariants$3,record,record[21]),
         _aaz_],
       _aaB_=
        [0,
         caml_call3
          (yield_until_no_jobs_remain_fun,
           yield_until_no_jobs_remain$0,
           record,
           record[20]),
         _aaA_],
       _aaC_=[0,caml_call3(yield_fun,yield$1,record,record[19]),_aaB_],
       _aaD_=
        [0,
         caml_call3(event_added_hook_fun,event_added_hook$0,record,record[18]),
         _aaC_],
       _aaE_=
        [0,
         caml_call3(job_queued_hook_fun,job_queued_hook$0,record,record[17]),
         _aaD_],
       _aaF_=
        [0,
         caml_call3
          (thread_safe_external_job_hook_fun,
           thread_safe_external_job_hook$0,
           record,
           record[16]),
         _aaE_],
       _aaG_=
        [0,
         caml_call3(external_jobs_fun,external_jobs$0,record,record[15]),
         _aaF_],
       _aaH_=
        [0,caml_call3(time_source_fun,time_source$0,record,record[14]),_aaG_],
       _aaI_=
        [0,
         caml_call3
          (last_cycle_num_jobs_fun,last_cycle_num_jobs$0,record,record[13]),
         _aaH_],
       _aaJ_=
        [0,
         caml_call3(last_cycle_time_fun,last_cycle_time$0,record,record[12]),
         _aaI_],
       _aaK_=
        [0,
         caml_call3
          (run_every_cycle_start_fun,
           run_every_cycle_start$0,
           record,
           record[11]),
         _aaJ_],
       _aaL_=
        [0,caml_call3(cycle_start_fun,cycle_start$0,record,record[10]),_aaK_],
       _aaM_=
        [0,caml_call3(cycle_count_fun,cycle_count$0,record,record[9]),_aaL_],
       _aaN_=
        [0,caml_call3(uncaught_exn_fun,uncaught_exn,record,record[8]),_aaM_],
       _aaO_=
        [0,
         caml_call3
          (current_execution_context_fun,
           current_execution_context$0,
           record,
           record[7]),
         _aaN_],
       _aaP_=
        [0,
         caml_call3
          (main_execution_context_fun,
           main_execution_context$0,
           record,
           record[6]),
         _aaO_],
       _aaQ_=
        [0,
         caml_call3
          (very_low_priority_workers_fun,
           very_low_priority_workers$0,
           record,
           record[5]),
         _aaP_],
       _aaR_=
        [0,
         caml_call3
          (low_priority_jobs_fun,low_priority_jobs$0,record,record[4]),
         _aaQ_],
       _aaS_=
        [0,
         caml_call3
          (normal_priority_jobs_fun,normal_priority_jobs$0,record,record[3]),
         _aaR_],
       _aaT_=[0,caml_call3(job_pool_fun,job_pool$0,record,record[2]),_aaS_];
      return [0,
              caml_call3(check_access_fun,check_access$0,record,record[1]),
              _aaT_]}
    function map$10
     (record,
      check_access_fun,
      job_pool_fun,
      normal_priority_jobs_fun,
      low_priority_jobs_fun,
      very_low_priority_workers_fun,
      main_execution_context_fun,
      current_execution_context_fun,
      uncaught_exn_fun,
      cycle_count_fun,
      cycle_start_fun,
      run_every_cycle_start_fun,
      last_cycle_time_fun,
      last_cycle_num_jobs_fun,
      time_source_fun,
      external_jobs_fun,
      thread_safe_external_job_hook_fun,
      job_queued_hook_fun,
      event_added_hook_fun,
      yield_fun,
      yield_until_no_jobs_remain_fun,
      check_invariants_fun,
      max_num_jobs_per_priority_per_cycle_fun,
      record_backtraces_fun,
      on_start_of_cycle_fun,
      on_end_of_cycle_fun)
     {var
       _$__=
        caml_call3(on_end_of_cycle_fun,on_end_of_cycle$0,record,record[25]),
       _$$_=
        caml_call3
         (on_start_of_cycle_fun,on_start_of_cycle$0,record,record[24]),
       _aaa_=
        caml_call3
         (record_backtraces_fun,record_backtraces$3,record,record[23]),
       _aab_=
        caml_call3
         (max_num_jobs_per_priority_per_cycle_fun,
          max_num_jobs_per_priority_per_cycle$3,
          record,
          record[22]),
       _aac_=
        caml_call3(check_invariants_fun,check_invariants$3,record,record[21]),
       _aad_=
        caml_call3
         (yield_until_no_jobs_remain_fun,
          yield_until_no_jobs_remain$0,
          record,
          record[20]),
       _aae_=caml_call3(yield_fun,yield$1,record,record[19]),
       _aaf_=
        caml_call3(event_added_hook_fun,event_added_hook$0,record,record[18]),
       _aag_=
        caml_call3(job_queued_hook_fun,job_queued_hook$0,record,record[17]),
       _aah_=
        caml_call3
         (thread_safe_external_job_hook_fun,
          thread_safe_external_job_hook$0,
          record,
          record[16]),
       _aai_=caml_call3(external_jobs_fun,external_jobs$0,record,record[15]),
       _aaj_=caml_call3(time_source_fun,time_source$0,record,record[14]),
       _aak_=
        caml_call3
         (last_cycle_num_jobs_fun,last_cycle_num_jobs$0,record,record[13]),
       _aal_=
        caml_call3(last_cycle_time_fun,last_cycle_time$0,record,record[12]),
       _aam_=
        caml_call3
         (run_every_cycle_start_fun,run_every_cycle_start$0,record,record[11]),
       _aan_=caml_call3(cycle_start_fun,cycle_start$0,record,record[10]),
       _aao_=caml_call3(cycle_count_fun,cycle_count$0,record,record[9]),
       _aap_=caml_call3(uncaught_exn_fun,uncaught_exn,record,record[8]),
       _aaq_=
        caml_call3
         (current_execution_context_fun,
          current_execution_context$0,
          record,
          record[7]),
       _aar_=
        caml_call3
         (main_execution_context_fun,
          main_execution_context$0,
          record,
          record[6]),
       _aas_=
        caml_call3
         (very_low_priority_workers_fun,
          very_low_priority_workers$0,
          record,
          record[5]),
       _aat_=
        caml_call3(low_priority_jobs_fun,low_priority_jobs$0,record,record[4]),
       _aau_=
        caml_call3
         (normal_priority_jobs_fun,normal_priority_jobs$0,record,record[3]),
       _aav_=caml_call3(job_pool_fun,job_pool$0,record,record[2]);
      return [0,
              caml_call3(check_access_fun,check_access$0,record,record[1]),
              _aav_,
              _aau_,
              _aat_,
              _aas_,
              _aar_,
              _aaq_,
              _aap_,
              _aao_,
              _aan_,
              _aam_,
              _aal_,
              _aak_,
              _aaj_,
              _aai_,
              _aah_,
              _aag_,
              _aaf_,
              _aae_,
              _aad_,
              _aac_,
              _aab_,
              _aaa_,
              _$$_,
              _$__]}
    function set_all_mutable_fields$4
     (record,
      check_access,
      job_pool,
      main_execution_context,
      current_execution_context,
      uncaught_exn,
      cycle_count,
      cycle_start,
      run_every_cycle_start,
      last_cycle_time,
      last_cycle_num_jobs,
      time_source,
      thread_safe_external_job_hook,
      job_queued_hook,
      event_added_hook,
      yield$0,
      yield_until_no_jobs_remain,
      check_invariants,
      max_num_jobs_per_priority_per_cycle,
      record_backtraces,
      on_start_of_cycle,
      on_end_of_cycle)
     {record[1] = check_access;
      record[2] = job_pool;
      record[6] = main_execution_context;
      record[7] = current_execution_context;
      record[8] = uncaught_exn;
      record[9] = cycle_count;
      record[10] = cycle_start;
      record[11] = run_every_cycle_start;
      record[12] = last_cycle_time;
      record[13] = last_cycle_num_jobs;
      record[14] = time_source;
      record[16] = thread_safe_external_job_hook;
      record[17] = job_queued_hook;
      record[18] = event_added_hook;
      record[19] = yield$0;
      record[20] = yield_until_no_jobs_remain;
      record[21] = check_invariants;
      record[22] = max_num_jobs_per_priority_per_cycle;
      record[23] = record_backtraces;
      record[24] = on_start_of_cycle;
      record[25] = on_end_of_cycle;
      return 0}
    var
     Direct$4=
      [0,
       iter$10,
       fold$10,
       for_all$10,
       exists$10,
       to_list$10,
       map$10,
       set_all_mutable_fields$4],
     Fields$4=
      [0,
       names$4,
       on_end_of_cycle$0,
       on_start_of_cycle$0,
       record_backtraces$3,
       max_num_jobs_per_priority_per_cycle$3,
       check_invariants$3,
       yield_until_no_jobs_remain$0,
       yield$1,
       event_added_hook$0,
       job_queued_hook$0,
       thread_safe_external_job_hook$0,
       external_jobs$0,
       time_source$0,
       last_cycle_num_jobs$0,
       last_cycle_time$0,
       run_every_cycle_start$0,
       cycle_start$0,
       cycle_count$0,
       uncaught_exn,
       current_execution_context$0,
       main_execution_context$0,
       very_low_priority_workers$0,
       low_priority_jobs$0,
       normal_priority_jobs$0,
       job_pool$0,
       check_access$0,
       make_creator$4,
       create$8,
       map$9,
       iter$9,
       fold$9,
       map_poly$4,
       for_all$9,
       exists$9,
       to_list$9,
       Direct$4];
    function sexp_of_t$30(param)
     {var
       v_check_access=param[1],
       v_job_pool=param[2],
       v_very_low_priority_workers=param[5],
       v_low_priority_jobs=param[4],
       v_normal_priority_jobs=param[3],
       v_main_execution_context=param[6],
       v_current_execution_context=param[7],
       v_uncaught_exn=param[8],
       v_cycle_count=param[9],
       v_cycle_start=param[10],
       v_run_every_cycle_start=param[11],
       v_last_cycle_time=param[12],
       v_last_cycle_num_jobs=param[13],
       v_time_source=param[14],
       v_external_jobs=param[15],
       v_job_queued_hook=param[17],
       v_event_added_hook=param[18],
       v_yield=param[19],
       v_yield_until_no_jobs_remain=param[20],
       v_check_invariants=param[21],
       v_max_num_jobs_per_priority_per_cycle=param[22],
       v_record_backtraces=param[23],
       bnds=0;
      function _$R_(_$9_){return 0}
      var
       arg=caml_call1(Sexplib0_Sexp_conv[24],_$R_),
       bnds$0=[0,[1,[0,_gz_,[0,arg,0]]],bnds];
      function _$S_(_$8_){return 0}
      var
       arg$0=caml_call1(Sexplib0_Sexp_conv[24],_$S_),
       bnds$1=[0,[1,[0,_gA_,[0,arg$0,0]]],bnds$0],
       arg$1=caml_call1(Core_kernel[410],v_record_backtraces),
       bnds$2=[0,[1,[0,_gB_,[0,arg$1,0]]],bnds$1],
       arg$2=
        caml_call1
         (Max_num_jobs_per_priority_per_cycle[2],
          v_max_num_jobs_per_priority_per_cycle),
       bnds$3=[0,[1,[0,_gC_,[0,arg$2,0]]],bnds$2],
       arg$3=caml_call1(Core_kernel[410],v_check_invariants),
       bnds$4=[0,[1,[0,_gD_,[0,arg$3,0]]],bnds$3],
       arg$4=caml_call1(Sexplib0_Sexp_conv[23],v_yield_until_no_jobs_remain),
       bnds$5=[0,[1,[0,_gE_,[0,arg$4,0]]],bnds$4],
       arg$5=caml_call1(Sexplib0_Sexp_conv[23],v_yield),
       bnds$6=[0,[1,[0,_gF_,[0,arg$5,0]]],bnds$5];
      function _$T_(f)
       {function _$6_(_$7_){return 0}
        return caml_call1(Sexplib0_Sexp_conv[24],_$6_)}
      var
       arg$6=caml_call2(Core_kernel[542],_$T_,v_event_added_hook),
       bnds$7=[0,[1,[0,_gG_,[0,arg$6,0]]],bnds$6];
      function _$U_(f)
       {function _$4_(_$5_){return 0}
        return caml_call1(Sexplib0_Sexp_conv[24],_$4_)}
      var
       arg$7=caml_call2(Core_kernel[542],_$U_,v_job_queued_hook),
       bnds$8=[0,[1,[0,_gH_,[0,arg$7,0]]],bnds$7];
      function _$V_(_$3_){return 0}
      var
       arg$8=caml_call1(Sexplib0_Sexp_conv[24],_$V_),
       bnds$9=[0,[1,[0,_gI_,[0,arg$8,0]]],bnds$8],
       arg$9=
        caml_call2
         (Core_kernel_Thread_safe_queue[1],sexp_of_t$14,v_external_jobs),
       bnds$10=[0,[1,[0,_gJ_,[0,arg$9,0]]],bnds$9],
       arg$10=caml_call2(include$13[14],Core_kernel[315],v_time_source),
       bnds$11=[0,[1,[0,_gK_,[0,arg$10,0]]],bnds$10],
       arg$11=caml_call1(Core_kernel[455],v_last_cycle_num_jobs),
       bnds$12=[0,[1,[0,_gL_,[0,arg$11,0]]],bnds$11],
       arg$12=caml_call1(include[44][97],v_last_cycle_time),
       bnds$13=[0,[1,[0,_gM_,[0,arg$12,0]]],bnds$12];
      function _$W_(f)
       {function _$1_(_$2_){return 0}
        return caml_call1(Sexplib0_Sexp_conv[24],_$1_)}
      var
       arg$13=caml_call2(Core_kernel[513],_$W_,v_run_every_cycle_start),
       bnds$14=[0,[1,[0,_gN_,[0,arg$13,0]]],bnds$13],
       arg$14=caml_call1(_Q_,v_cycle_start),
       bnds$15=[0,[1,[0,_gO_,[0,arg$14,0]]],bnds$14],
       arg$15=caml_call1(Core_kernel[455],v_cycle_count),
       bnds$16=[0,[1,[0,_gP_,[0,arg$15,0]]],bnds$15];
      function _$X_(param)
       {var
         v1=param[2],
         v0=param[1],
         v0$0=caml_call1(Base_Exn[1],v0),
         v1$0=caml_call1(Core_kernel_Sexp[92],v1);
        return [1,[0,v0$0,[0,v1$0,0]]]}
      var
       arg$16=caml_call2(Core_kernel[542],_$X_,v_uncaught_exn),
       bnds$17=[0,[1,[0,_gQ_,[0,arg$16,0]]],bnds$16],
       arg$17=sexp_of_t$13(v_current_execution_context),
       bnds$18=[0,[1,[0,_gR_,[0,arg$17,0]]],bnds$17],
       arg$18=sexp_of_t$13(v_main_execution_context),
       bnds$19=[0,[1,[0,_gS_,[0,arg$18,0]]],bnds$18],
       arg$19=
        caml_call2
         (Core_kernel_Deque[10],
          Very_low_priority_worker$0[5],
          v_very_low_priority_workers),
       bnds$20=[0,[1,[0,_gT_,[0,arg$19,0]]],bnds$19],
       arg$20=sexp_of_t$17(v_low_priority_jobs),
       bnds$21=[0,[1,[0,_gU_,[0,arg$20,0]]],bnds$20],
       arg$21=sexp_of_t$17(v_normal_priority_jobs),
       bnds$22=[0,[1,[0,_gV_,[0,arg$21,0]]],bnds$21],
       arg$22=sexp_of_t$15(v_job_pool),
       bnds$23=[0,[1,[0,_gW_,[0,arg$22,0]]],bnds$22];
      function _$Y_(f)
       {function _$Z_(_$0_){return 0}
        return caml_call1(Sexplib0_Sexp_conv[24],_$Z_)}
      var
       arg$23=caml_call2(Core_kernel[542],_$Y_,v_check_access),
       bnds$24=[0,[1,[0,_gX_,[0,arg$23,0]]],bnds$23];
      return [1,bnds$24]}
    function uncaught_exn$0(t)
     {var _$P_=t[8];
      if(_$P_)
       {var
         match=_$P_[1],
         sexp=match[2],
         exn=match[1],
         _$Q_=
          function(param)
           {var
             v1=param[2],
             v0=param[1],
             v0$0=caml_call1(Base_Exn[1],v0),
             v1$0=caml_call1(Core_kernel_Sexp[92],v1);
            return [1,[0,v0$0,[0,v1$0,0]]]};
        return [0,
                caml_call5
                 (Core_kernel_Error[13],
                  0,
                  0,
                  cst_unhandled_exception,
                  [0,exn,sexp],
                  _$Q_)]}
      return 0}
    function num_pending_jobs(t){return t[3][6] + t[4][6] | 0}
    function num_jobs_run$1(t){return t[3][1] + t[4][1] | 0}
    function invariant$7(t)
     {try
       {var
         check=
          function(f,field)
           {return caml_call1(f,caml_call2(Base_Field[3],field,t))},
         __W_=function(_$O_){return 0},
         __X_=function(_$N_){return 0},
         __Y_=function(_$M_){return 0},
         __Z_=function(_$L_){return 0},
         __0_=function(_$K_){return 0},
         __1_=function(_$J_){return 0},
         __2_=function(_$I_){return 0},
         __3_=function(_$H_){return 0},
         __4_=function(_$G_){return 0},
         __5_=function(_$F_){return 0},
         __6_=function(_$E_){return 0},
         __7_=Read_write[2],
         __8_=function(_$D_){return check(__7_,_$D_)},
         __9_=
          function(last_cycle_num_jobs)
           {if(0 <= last_cycle_num_jobs)return 0;
            throw [0,Assert_failure,_g0_]},
         ____=function(_$C_){return check(__9_,_$C_)},
         __$_=function(_$B_){return 0},
         _$a_=function(_$A_){return 0},
         _$b_=function(_$z_){return 0},
         _$c_=
          function(cycle_count)
           {if(0 <= cycle_count)return 0;throw [0,Assert_failure,_g1_]},
         _$d_=function(_$y_){return check(_$c_,_$y_)},
         _$e_=
          function(uncaught_exn)
           {var _$x_=caml_call1(Core_kernel[356],uncaught_exn);
            if(_$x_)
             {if(0 === num_pending_jobs(t))return 0;
              throw [0,Assert_failure,_g2_]}
            return _$x_},
         _$f_=function(_$w_){return check(_$e_,_$w_)},
         _$g_=function(_$v_){return check(f,_$v_)},
         _$h_=function(_$u_){return check(f,_$u_)},
         _$i_=
          function(q)
           {return caml_call2
                    (Core_kernel_Deque[16],q,Very_low_priority_worker$0[6])},
         _$j_=function(_$t_){return check(_$i_,_$t_)},
         _$k_=function(_$s_){return check(invariant$1,_$s_)},
         _$l_=function(_$r_){return check(invariant$1,_$r_)},
         _$m_=function(_$q_){return check(invariant,_$q_)},
         _$n_=function(_$p_){return 0},
         _$o_=
          caml_call25
           (Fields$4[30],
            _$n_,
            _$m_,
            _$l_,
            _$k_,
            _$j_,
            _$h_,
            _$g_,
            _$f_,
            _$d_,
            _$b_,
            _$a_,
            __$_,
            ____,
            __8_,
            __6_,
            __5_,
            __4_,
            __3_,
            __2_,
            __1_,
            __0_,
            __Z_,
            __Y_,
            __X_,
            __W_);
        return _$o_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        var
         __T_=[0,[1,[0,_gY_,[0,sexp_of_t$30(t),0]]],0],
         __U_=[0,[1,[0,_gZ_,[0,caml_call1(Core_kernel[614],exn),0]]],__T_],
         __V_=
          [1,
           [0,
            caml_call1(Sexplib0_Sexp_conv[7],cst_Scheduler_invariant_failed),
            __U_]];
        return caml_call1(Core_kernel[364],__V_)}}
    function free_job(t,job){return caml_call2(Core_kernel_Pool[16],t[2],job)}
    function enqueue$0(t,execution_context,f,a)
     {var __Q_=caml_call1(Core_kernel[355],t[8]);
      if(__Q_)
       {var priority=execution_context[2],job_queue=0 === priority?t[3]:t[4];
        enqueue(job_queue,execution_context,f,a);
        var __R_=t[17];
        if(__R_){var f$0=__R_[1];return caml_call1(f$0,priority)}
        var __S_=0}
      else
       var __S_=__Q_;
      return __S_}
    function enqueue_job(t,job,free_job)
     {var
       job_pool=t[2],
       __O_=
        caml_call3(Core_kernel_Pool[33],job_pool,job,Core_kernel_Pool[3][5]),
       __P_=
        caml_call3(Core_kernel_Pool[33],job_pool,job,Core_kernel_Pool[3][4]);
      enqueue$0
       (t,
        caml_call3(Core_kernel_Pool[33],job_pool,job,Core_kernel_Pool[3][3]),
        __P_,
        __O_);
      return free_job?caml_call2(Core_kernel_Pool[16],t[2],job):free_job}
    function handle_fired$1(time_source,job_or_event)
     {var
       match=caml_call1(Match[1],job_or_event),
       k=match[1],
       match$0=caml_call2(Match[2],k,job_or_event);
      return 0 === k
              ?fire(time_source,match$0)
              :enqueue_job(time_source[7],match$0,1)}
    function create$9(param)
     {var
       now=caml_call1(_A_,0),
       t=[],
       time_source=[],
       events=caml_call2(include$1[10],timing_wheel_config$1,now);
      function __x_(__N_){return __N_}
      function __y_(__M_){return __M_}
      var
       __z_=caml_call1(Bvar$0[1],0),
       __A_=caml_call1(Bvar$0[1],0),
       __B_=0,
       __C_=0;
      function __D_(__L_){return 0}
      var
       __E_=caml_call1(Core_kernel_Thread_safe_queue[3],0),
       __F_=caml_call1(sec$0,0),
       __G_=caml_call3(Core_kernel_Deque[30],0,0,0),
       __H_=create$2(0),
       __I_=create$2(0);
      caml_update_dummy
       (t,
        [0,
         0,
         create$1(0),
         __I_,
         __H_,
         __G_,
         execution_context,
         execution_context,
         0,
         0,
         now,
         0,
         __F_,
         0,
         time_source,
         __E_,
         __D_,
         __C_,
         __B_,
         __A_,
         __z_,
         check_invariants$1,
         max_num_jobs_per_priority_per_cycle$1,
         record_backtraces$1,
         __y_,
         __x_]);
      var __J_=1;
      function __K_(alarm)
       {return handle_fired$1
                (time_source,caml_call2(include$1[6][5],events,alarm))}
      caml_update_dummy(time_source,[0,0,0,events,Event$1[13],__K_,__J_,t]);
      return t}
    function is_dead(t){return caml_call1(Core_kernel[356],t[8])}
    function set_check_access$0(t,f){t[1] = f;return 0}
    var match$1=caml_call1(Core_kernel_Result[43],create$9);
    if(0 === match$1[0])
     var t$4=match$1[1],_g3_=[0,t$4];
    else
     {var exn=match$1[1];
      log(cst_Async_cannot_create_its_raw_scheduler,exn,Core_kernel[614]);
      var _g3_=caml_call1(Core_kernel[243],1)}
    function check_access$1(t)
     {var __w_=t[1];if(__w_){var f=__w_[1];return caml_call1(f,0)}return 0}
    function t$5(param){var t=_g3_[1];check_access$1(t);return t}
    function current_execution_context$1(t)
     {return t[23]?record_backtrace(t[7]):t[7]}
    function with_execution_context(t,tmp_context,f)
     {var old_context=current_execution_context$1(t);
      set_execution_context(t,tmp_context);
      function __v_(param){return set_execution_context(t,old_context)}
      return caml_call2(Core_kernel[362],f,__v_)}
    function create_job(t,execution_context,f,a)
     {if(caml_call1(Core_kernel_Pool[15],t[2]))
       t[2] = caml_call2(Core_kernel_Pool[14],0,t[2]);
      return caml_call4(Core_kernel_Pool[20],t[2],execution_context,f,a)}
    function got_uncaught_exn(t,exn,sexp)
     {if(_cw_)
       log
        (cst_got_uncaught_exn,
         [0,exn,sexp],
         function(param)
          {var
            v1=param[2],
            v0=param[1],
            v0$0=caml_call1(Base_Exn[1],v0),
            v1$0=caml_call1(Core_kernel_Sexp[92],v1);
           return [1,[0,v0$0,[0,v1$0,0]]]});
      caml_call2(Core_kernel_List[19],[0,t[3],[0,t[4],0]],clear);
      t[8] = [0,[0,exn,sexp]];
      return 0}
    function start_cycle(t,max_num_jobs_per_priority)
     {var
       n=
        caml_call1
         (Max_num_jobs_per_priority_per_cycle[5],max_num_jobs_per_priority);
      set_jobs_left_this_cycle$0(t[3],n);
      return set_jobs_left_this_cycle$0(t[4],n)}
    function run_jobs$0(t)
     {for(;;)
       {var e=run_jobs(t[3],t);
        if(0 === e[0])
         {var e$0=run_jobs(t[4],t);
          if(0 === e$0[0])
           {if(! can_run_a_job(t[3]))
             if(! can_run_a_job(t[4]))return Core_kernel_Result[44];
            continue}
          return e$0}
        return e}}
    function stabilize(t)
     {start_cycle
       (t,
        caml_call1(Max_num_jobs_per_priority_per_cycle[4],Core_kernel_Int[61]));
      var match=run_jobs$0(t);
      if(0 === match[0])return _g4_;
      var match$0=match[1],exn=match$0[1];
      return [1,exn]}
    function create$10(opt,now,param)
     {if(opt)
       var sth=opt[1],timing_wheel_config=sth;
      else
       var timing_wheel_config=timing_wheel_config$1;
      var
       t=t$5(0),
       events=caml_call2(include$1[10],timing_wheel_config,now),
       time_source=[],
       __t_=0;
      function __u_(alarm)
       {return handle_fired$1
                (time_source,caml_call2(include$1[6][5],events,alarm))}
      caml_update_dummy(time_source,[0,0,0,events,Event$1[13],__u_,__t_,t]);
      return time_source}
    function wall_clock(param){return t$5(0)[14]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$52);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Async_kernel_Scheduler1=
      [0,
       events,
       set_execution_context,
       Synchronous_time_source,
       Event$2,
       Alarm$0,
       Job_or_event$1,
       _cw_,
       Ivar$0,
       Bvar$0,
       Very_low_priority_worker$0,
       on_end_of_cycle,
       set_on_end_of_cycle,
       on_start_of_cycle,
       set_on_start_of_cycle,
       record_backtraces$2,
       set_record_backtraces,
       max_num_jobs_per_priority_per_cycle$2,
       set_max_num_jobs_per_priority_per_cycle,
       check_invariants$2,
       set_check_invariants,
       yield_until_no_jobs_remain,
       set_yield_until_no_jobs_remain,
       yield$0,
       set_yield,
       event_added_hook,
       set_event_added_hook,
       job_queued_hook,
       set_job_queued_hook,
       thread_safe_external_job_hook,
       set_thread_safe_external_job_hook,
       external_jobs,
       time_source,
       set_time_source,
       last_cycle_num_jobs,
       set_last_cycle_num_jobs,
       last_cycle_time,
       set_last_cycle_time,
       run_every_cycle_start,
       set_run_every_cycle_start,
       cycle_start,
       set_cycle_start,
       cycle_count,
       set_cycle_count,
       set_uncaught_exn,
       set_current_execution_context,
       main_execution_context,
       set_main_execution_context,
       very_low_priority_workers,
       low_priority_jobs,
       normal_priority_jobs,
       job_pool,
       set_job_pool,
       Fields$4,
       sexp_of_t$30,
       uncaught_exn_unwrapped,
       uncaught_exn$0,
       num_pending_jobs,
       num_jobs_run$1,
       invariant$7,
       free_job,
       enqueue$0,
       enqueue_job,
       handle_fired$1,
       create$9,
       is_dead,
       set_check_access$0,
       _g3_,
       check_access$1,
       t$5,
       current_execution_context$1,
       with_execution_context,
       create_job,
       got_uncaught_exn,
       start_cycle,
       run_jobs$0,
       stabilize,
       create$10,
       wall_clock];
    caml_register_global
     (2647,Async_kernel_Scheduler1,"Async_kernel__Scheduler1");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_async_kernel$53);
    caml_call1(Expect_test_collector[4][1],cst_src_ivar0_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$54,cst$21);
    function sexp_of_t$31(of_a,param)
     {var
       v_execution_context=param[2],
       v_prev=param[3],
       v_next=param[4],
       arg=caml_call1(Sexplib0_Sexp_conv[23],v_next),
       bnds=[0,[1,[0,_g5_,[0,arg,0]]],0],
       arg$0=caml_call1(Sexplib0_Sexp_conv[23],v_prev),
       bnds$0=[0,[1,[0,_g6_,[0,arg$0,0]]],bnds],
       arg$1=sexp_of_t$13(v_execution_context),
       bnds$1=[0,[1,[0,_g7_,[0,arg$1,0]]],bnds$0];
      function __r_(__s_){return 0}
      var
       arg$2=caml_call1(Sexplib0_Sexp_conv[24],__r_),
       bnds$2=[0,[1,[0,_g8_,[0,arg$2,0]]],bnds$1];
      return [1,bnds$2]}
    function create$11(run,execution_context)
     {var t=[0,run,execution_context,0,0];t[3] = t;t[4] = t;return t}
    function create2(run1,execution_context1,run2,execution_context2)
     {var
       t1=[0,run1,execution_context1,0,0],
       t2=[0,run2,execution_context2,t1,t1];
      t1[3] = t2;
      t1[4] = t2;
      return t1}
    function enqueue$1(t,scheduler,v){return enqueue$0(scheduler,t[2],t[1],v)}
    function schedule_jobs(t,v)
     {var scheduler=t$5(0);
      enqueue$1(t,scheduler,v);
      var r=[0,t[4]];
      for(;;)
       {if(caml_call2(Core_kernel[359],r[1],t))return 0;
        enqueue$1(r[1],scheduler,v);
        r[1] = r[1][4];
        continue}}
    function add$0(t,run,execution_context)
     {var result=[0,run,execution_context,t[3],t];
      t[3][4] = result;
      t[3] = result;
      return result}
    function _g__(param)
     {var
       o2=create$11(function(__q_){return 0},execution_context),
       o1=[0,function(__p_){return 0},execution_context,o2,o2];
      if(caml_obj_tag(o1) === caml_obj_tag(o2))
       {if(o1.length - 1 === o2.length - 1)return 0;
        throw [0,Assert_failure,_g$_]}
      throw [0,Assert_failure,_ha_]}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_assert_Obj_tag_o1_Obj_tag_o2_assert,
      0,
      cst_src_ivar0_ml$0,
      215,
      0,
      294,
      _g__);
    function equal$1(t$0,t){return caml_call2(Core_kernel[359],t$0,t)}
    function indir(t){return [0,[3,t]]}
    var
     create_with_cell$0=Ivar$0[1],
     create$12=Ivar$0[2],
     create_full$0=Ivar$0[3];
    function squash(t$3)
     {var __n_=t$3[1];
      if(typeof __n_ !== "number" && 3 === __n_[0])
       {var t$4=__n_[1],__o_=t$4[1];
        if(typeof __o_ !== "number" && 3 === __o_[0])
         {var t$5=__o_[1],indir=__o_,t=t$5;
          for(;;)
           {var __l_=t[1];
            if(typeof __l_ !== "number" && 3 === __l_[0])
             {var t$0=__l_[1],indir=__l_,t=t$0;continue}
            var t$1=t$3;
            for(;;)
             {var __m_=t$1[1];
              if(typeof __m_ !== "number" && 3 === __m_[0])
               {var t$2=__m_[1];t$1[1] = indir;var t$1=t$2;continue}
              return t$1}}}
        return t$4}
      return t$3}
    function invariant$8(a_invariant,t)
     {var t$0=squash(t),__k_=t$0[1];
      if(typeof __k_ === "number")
       return 0;
      else
       switch(__k_[0])
        {case 0:
          var r=[0,__k_[4]];
          for(;;)
           {if(caml_call2(Core_kernel[359],r[1],__k_))return 0;
            var t1=r[1];
            if(caml_call2(Core_kernel[359],t1[4][3],t1))
             {r[1] = r[1][4];continue}
            throw [0,Assert_failure,_g9_]}
         case 1:return 0;
         case 2:var a=__k_[1];return caml_call1(a_invariant,a);
         default:throw [0,Assert_failure,_hb_]}}
    function sexp_of_t$32(sexp_of_a,t)
     {var t$0=squash(t),__j_=t$0[1];
      if(typeof __j_ !== "number")
       switch(__j_[0])
        {case 2:
          var a=__j_[1];return [1,[0,_hd_,[0,caml_call1(sexp_of_a,a),0]]];
         case 3:throw [0,Assert_failure,_he_]
         }
      return _hc_}
    function peek(t)
     {var t$0=squash(t),__i_=t$0[1];
      if(typeof __i_ !== "number")
       switch(__i_[0])
        {case 2:var a=__i_[1];return [0,a];
         case 3:throw [0,Assert_failure,_hf_]
         }
      return 0}
    function value$0(t,if_empty_then_failwith)
     {var t$0=squash(t),__h_=t$0[1];
      if(typeof __h_ !== "number")
       switch(__h_[0])
        {case 2:var a=__h_[1];return a;case 3:throw [0,Assert_failure,_hg_]}
      return caml_call1(Core_kernel[164],if_empty_then_failwith)}
    function value_exn(t)
     {return value$0(t,cst_Ivar_value_exn_called_on_empty_ivar)}
    function is_empty(t)
     {var t$0=squash(t),__g_=t$0[1];
      if(typeof __g_ !== "number")
       switch(__g_[0]){case 2:return 0;case 3:throw [0,Assert_failure,_hh_]}
      return 1}
    function is_full(t){return 1 - is_empty(t)}
    function fill(t,v)
     {var t$0=squash(t),__b_=t$0[1];
      if(typeof __b_ === "number")
       {t$0[1] = [2,v];return 0}
      else
       switch(__b_[0])
        {case 0:t$0[1] = [2,v];return schedule_jobs(__b_,v);
         case 1:
          var execution_context=__b_[2],run=__b_[1];
          t$0[1] = [2,v];
          return enqueue$0(t$5(0),execution_context,run,v);
         case 2:
          var
           __c_=0,
           __d_=0,
           __e_=
            [0,
             [1,
              [0,_hj_,[0,sexp_of_t$32(function(param){return _hi_},t$0),__d_]]],
             __c_],
           __f_=
            [1,
             [0,
              caml_call1(Sexplib0_Sexp_conv[7],cst_Ivar_fill_of_full_ivar),
              __e_]];
          return caml_call1(Core_kernel[364],__f_);
         default:throw [0,Assert_failure,_hk_]}}
    function remove_handler(t,handler)
     {handler[1] = function(__a_){return 0};
      var t$0=squash(t),_Z$_=t$0[1];
      if(typeof _Z$_ !== "number")
       switch(_Z$_[0])
        {case 0:
          if(caml_call2(Core_kernel[359],handler,handler[4]))
           {t$0[1] = 0;return 0}
          if(caml_call2(Core_kernel[359],handler,_Z$_))t$0[1] = handler[4];
          handler[4][3] = handler[3];
          handler[3][4] = handler[4];
          handler[3] = handler;
          handler[4] = handler;
          return 0;
         case 2:return 0;
         case 3:throw [0,Assert_failure,_hl_]
         }
      return 0}
    function add_handler(t,run,execution_context)
     {var t$0=squash(t),_Z__=t$0[1];
      if(typeof _Z__ === "number")
       {var handler=create$11(run,execution_context);
        t$0[1] = handler;
        return handler}
      else
       switch(_Z__[0])
        {case 0:return add$0(_Z__,run,execution_context);
         case 1:
          var
           execution_context$0=_Z__[2],
           run$0=_Z__[1],
           handler$0=create2(run,execution_context,run$0,execution_context$0);
          t$0[1] = handler$0;
          return handler$0;
         case 2:
          var
           v=_Z__[1],
           handler$1=create$11(run,execution_context),
           run$1=function(v){return caml_call1(handler$1[1],v)};
          enqueue$0(t$5(0),execution_context,run$1,v);
          return handler$1;
         default:throw [0,Assert_failure,_hm_]}}
    function has_handlers(t)
     {var t$0=squash(t),_Z9_=t$0[1];
      if(typeof _Z9_ !== "number")
       switch(_Z9_[0])
        {case 3:throw [0,Assert_failure,_hn_];case 2:break;default:return 1}
      return 0}
    function upon(t,run)
     {return add_handler(t,run,current_execution_context$1(t$5(0)))}
    function upon$0(t,run)
     {var
       scheduler=t$5(0),
       execution_context=current_execution_context$1(scheduler),
       t$0=squash(t),
       _Z8_=t$0[1];
      if(typeof _Z8_ === "number")
       {t$0[1] = [1,run,execution_context];return 0}
      else
       switch(_Z8_[0])
        {case 0:add$0(_Z8_,run,execution_context);return 0;
         case 1:
          var execution_context$0=_Z8_[2],run$0=_Z8_[1];
          t$0[1] = create2(run,execution_context,run$0,execution_context$0);
          return 0;
         case 2:
          var v=_Z8_[1];return enqueue$0(scheduler,execution_context,run,v);
         default:throw [0,Assert_failure,_ho_]}}
    function connect(bind_result,bind_rhs)
     {var _Z4_=1 - caml_call2(Core_kernel[359],bind_result,bind_rhs);
      if(_Z4_)
       {var
         bind_result$0=squash(bind_result),
         indir=[3,bind_result$0],
         ivar=bind_rhs;
        for(;;)
         {var cell=ivar[1];
          if(typeof cell === "number")
           var switch$0=0;
          else
           switch(cell[0])
            {case 2:var switch$0=1;break;
             case 3:
              var ivar$0=cell[1];ivar[1] = indir;var ivar=ivar$0;continue;
             default:var switch$0=0}
          if(! switch$0)
           if(1 - caml_call2(Core_kernel[359],ivar,bind_result$0))
            ivar[1] = indir;
          var _Z5_=bind_result$0[1];
          if(typeof _Z5_ === "number")
           var switch$1=0;
          else
           switch(_Z5_[0])
            {case 0:
              if(typeof cell === "number")
               var switch$1=1;
              else
               switch(cell[0])
                {case 0:
                  var last1=_Z5_[3],last2=cell[3];
                  last1[4] = cell;
                  last2[4] = _Z5_;
                  _Z5_[3] = last2;
                  cell[3] = last1;
                  return 0;
                 case 1:
                  var execution_context2=cell[2],run2=cell[1];
                  add$0(_Z5_,run2,execution_context2);
                  return 0;
                 case 2:
                  var v=cell[1];
                  bind_result$0[1] = cell;
                  return schedule_jobs(_Z5_,v);
                 default:var switch$1=0}
              break;
             case 1:
              var _Z6_=_Z5_[2],_Z7_=_Z5_[1];
              if(typeof cell === "number")
               var switch$1=1;
              else
               switch(cell[0])
                {case 0:
                  var handler1=add$0(cell,_Z7_,_Z6_);
                  bind_result$0[1] = handler1;
                  return 0;
                 case 1:
                  var
                   execution_context2$0=cell[2],
                   run2$0=cell[1],
                   handler1$0=create2(_Z7_,_Z6_,run2$0,execution_context2$0);
                  bind_result$0[1] = handler1$0;
                  return 0;
                 case 2:
                  var v$0=cell[1];
                  bind_result$0[1] = cell;
                  return enqueue$0(t$5(0),_Z6_,_Z7_,v$0);
                 default:var switch$1=0}
              break;
             case 2:var switch$1=0;break;
             default:var switch$1=2}
          switch(switch$1)
           {case 0:
             if(typeof cell === "number")
              var switch$3=1;
             else
              if(3 === cell[0])var switch$2=1,switch$3=0;else var switch$3=1;
             if(switch$3)
              {if(typeof _Z5_ !== "number")throw [0,Assert_failure,_hp_];
               var switch$2=0}
             break;
            case 1:var switch$2=0;break;
            default:var switch$2=1}
          if(switch$2)throw [0,Assert_failure,_hq_];
          return typeof cell === "number"?0:(bind_result$0[1] = cell,0)}}
      return _Z4_}
    function _hr_(param)
     {function _Zg_(i1,i2)
       {var _Z3_=i1[1];
        if(typeof _Z3_ !== "number" && 3 === _Z3_[0])
         {var i2$0=_Z3_[1];return caml_call2(Core_kernel[359],i2$0,i2)}
        return 0}
      var r=[0,0];
      function run(i){r[1] = r[1] + i | 0;return 0}
      var
       empty_one_handler=[1,run,execution_context],
       execution_context1=create_like(0,0,0,execution_context),
       execution_context2=create_like(0,0,0,execution_context),
       handler1=[0,run,execution_context1],
       handler2=[0,run,execution_context2];
      function eq_handlers(param,_Z1_)
       {var
         ec2=_Z1_[2],
         r2=_Z1_[1],
         ec1=param[2],
         r1=param[1],
         _Z2_=caml_call2(Core_kernel[359],r1,r2);
        return _Z2_?caml_call2(Core_kernel[359],ec1,ec2):_Z2_}
      function cell_of_handler_list(l$2)
       {if(l$2)
         {var
           l=l$2[2],
           match=l$2[1],
           execution_context=match[2],
           run=match[1],
           prev=create$11(run,execution_context),
           prev$0=prev,
           l$0=l;
          for(;;)
           {if(l$0)
             {var
               l$1=l$0[2],
               match$0=l$0[1],
               execution_context$0=match$0[2],
               run$0=match$0[1],
               prev$1=[0,run$0,execution_context$0,prev$0,prev];
              prev$0[4] = prev$1;
              var prev$0=prev$1,l$0=l$1;
              continue}
            prev[3] = prev$0;
            var match$1=[0,prev];
            break}}
        else
         var match$1=0;
        if(match$1){var h=match$1[1];return h}
        return 0}
      function handler_list_of_cell(c)
       {var t=c[3],acc=0;
        for(;;)
         {var acc$0=[0,[0,t[1],t[2]],acc];
          if(caml_call2(Core_kernel[359],t,c))return acc$0;
          var t$0=t[3],t=t$0,acc=acc$0;
          continue}}
      function squash$0(t){squash(t);return 0}
      function connect$0(bind_result,bind_rhs)
       {return connect(bind_result,bind_rhs)}
      function stabilize$0(param)
       {var _Z0_=stabilize(t$5(0));
        return caml_call1(Core_kernel_Result[30],_Z0_)}
      function _Zh_(param)
       {var t=caml_call1(create$12,0);
        if(is_empty(t))
         {if(is_full(t))throw [0,Assert_failure,_hs_];
          if(0 === peek(t))return 0;
          throw [0,Assert_failure,_ht_]}
        throw [0,Assert_failure,_hu_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_assert_is_empty_t_assert_not_is_full_t,
        0,
        cst_src_ivar0_ml$1,
        549,
        4,
        136,
        _Zh_);
      function _Zi_(param)
       {var t=caml_call1(create_full$0,13);
        if(is_empty(t))throw [0,Assert_failure,_hv_];
        if(is_full(t))
         {if(caml_equal(peek(t),_hw_))return 0;throw [0,Assert_failure,_hx_]}
        throw [0,Assert_failure,_hy_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_assert_not_is_empty_t_assert_is_full_t,
        0,
        cst_src_ivar0_ml$2,
        556,
        4,
        144,
        _Zi_);
      function _Zj_(param)
       {var t1=caml_call1(create$12,0),t2=caml_call1(create$12,0);
        if(equal$1(t1,t1))
         {if(equal$1(t2,t2))
           {if(equal$1(t1,t2))throw [0,Assert_failure,_hz_];return 0}
          throw [0,Assert_failure,_hA_]}
        throw [0,Assert_failure,_hB_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_assert_equal_t1_t1_assert_equal_t2_t2_a,
        0,
        cst_src_ivar0_ml$3,
        565,
        4,
        166,
        _Zj_);
      function _Zk_(param)
       {var t=caml_call1(create$12,0);
        squash$0(t);
        if(0 === t[1])return 0;
        throw [0,Assert_failure,_hC_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_squash_t_assert_t_cell_Empty,
        0,
        cst_src_ivar0_ml$4,
        575,
        4,
        94,
        _Zk_);
      function _Zl_(param)
       {var
         t1=caml_call1(create$12,0),
         t2=caml_call1(create_with_cell$0,[3,t1]);
        squash$0(t2);
        if(_Zg_(t2,t1))return 0;
        throw [0,Assert_failure,_hD_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_squash_t2_assert_t2_t1,
        0,
        cst_src_ivar0_ml$5,
        581,
        4,
        137,
        _Zl_);
      function _Zm_(param)
       {var
         t1=caml_call1(create$12,0),
         t2=caml_call1(create_with_cell$0,[3,t1]),
         t3=caml_call1(create_with_cell$0,[3,t2]),
         t4=caml_call1(create_with_cell$0,[3,t3]);
        squash$0(t4);
        if(_Zg_(t2,t1))
         {if(_Zg_(t3,t1))
           {if(_Zg_(t4,t1))return 0;throw [0,Assert_failure,_hE_]}
          throw [0,Assert_failure,_hF_]}
        throw [0,Assert_failure,_hG_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_squash_t4_assert_t2_t1_assert_t3,
        0,
        cst_src_ivar0_ml$6,
        588,
        4,
        281,
        _Zm_);
      function _Zn_(param)
       {var t=caml_call1(create$12,0);
        fill(t,13);
        if(caml_equal(peek(t),_hH_))return 0;
        throw [0,Assert_failure,_hI_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_fill_t_13_assert_peek_t_Some_13,
        0,
        cst_src_ivar0_ml$7,
        601,
        4,
        97,
        _Zn_);
      function _Zo_(param)
       {var t=caml_call1(create$12,0);
        fill(t,13);
        try {fill(t,14);var _ZY_=0,_ZX_=_ZY_}catch(_ZZ_){var _ZX_=1}
        if(_ZX_)return 0;
        throw [0,Assert_failure,_hJ_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_fill_t_13_assert_try_fill_t_14_false_with,
        0,
        cst_src_ivar0_ml$8,
        607,
        4,
        116,
        _Zo_);
      function _Zp_(param)
       {var
         t1=caml_call1(create$12,0),
         t2=caml_call1(create_with_cell$0,[3,t1]);
        fill(t2,13);
        if(caml_equal(peek(t1),_hK_))
         {if(caml_equal(peek(t2),_hL_))return 0;throw [0,Assert_failure,_hM_]}
        throw [0,Assert_failure,_hN_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_fill_t2_13_assert_peek_t1_Some_13_a,
        0,
        cst_src_ivar0_ml$9,
        613,
        4,
        180,
        _Zp_);
      function _Zq_(param)
       {r[1] = 13;
        var t=caml_call1(create_with_cell$0,empty_one_handler);
        fill(t,17);
        stabilize$0(0);
        if(caml_equal(t[1],_hO_))
         {if(30 === r[1])return 0;throw [0,Assert_failure,_hP_]}
        throw [0,Assert_failure,_hQ_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_r_13_let_t_create_with_cell_empty_one,
        0,
        cst_src_ivar0_ml$10,
        621,
        4,
        181,
        _Zq_);
      function _Zr_(param)
       {r[1] = 13;
        var
         t=
          caml_call1
           (create_with_cell$0,
            cell_of_handler_list([0,handler1,[0,handler2,0]]));
        fill(t,17);
        stabilize$0(0);
        if(caml_equal(t[1],_hR_))
         {if(47 === r[1])return 0;throw [0,Assert_failure,_hS_]}
        throw [0,Assert_failure,_hT_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_r_13_let_t_create_with_cell_cell_of_h,
        0,
        cst_src_ivar0_ml$11,
        630,
        4,
        208,
        _Zr_);
      function _Zs_(param)
       {var t=caml_call1(create$12,0);
        r[1] = 1;
        upon$0(t,function(i){r[1] = r[1] + i | 0;return 0});
        stabilize$0(0);
        if(1 === r[1])
         {fill(t,13);
          stabilize$0(0);
          if(14 === r[1])return 0;
          throw [0,Assert_failure,_hU_]}
        throw [0,Assert_failure,_hV_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_r_1_upon_t_fun_i_r_r_i_st,
        0,
        cst_src_ivar0_ml$12,
        641,
        4,
        202,
        _Zs_);
      function _Zt_(param)
       {var t=caml_call1(create$12,0);
        r[1] = 1;
        upon$0(t,function(i){r[1] = r[1] + i | 0;return 0});
        upon$0(t,function(i){r[1] = r[1] + i | 0;return 0});
        stabilize$0(0);
        if(1 === r[1])
         {fill(t,13);
          stabilize$0(0);
          if(27 === r[1])return 0;
          throw [0,Assert_failure,_hW_]}
        throw [0,Assert_failure,_hX_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_r_1_upon_t_fun_i_r_r_i_up,
        0,
        cst_src_ivar0_ml$13,
        652,
        4,
        239,
        _Zt_);
      function _Zu_(param)
       {var t=caml_call1(create$12,0);
        r[1] = 1;
        var for$0=1;
        for(;;)
         {upon$0(t,function(i){r[1] = r[1] + i | 0;return 0});
          var _ZW_=for$0 + 1 | 0;
          if(1e3 !== for$0){var for$0=_ZW_;continue}
          stabilize$0(0);
          if(1 === r[1])
           {fill(t,13);
            stabilize$0(0);
            if(r[1] === 13001)return 0;
            throw [0,Assert_failure,_hY_]}
          throw [0,Assert_failure,_hZ_]}}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_r_1_let_num_handlers_1000_in_for,
        0,
        cst_src_ivar0_ml$14,
        664,
        4,
        303,
        _Zu_);
      function _Zv_(param)
       {var
         t1=caml_call1(create$12,0),
         t2=caml_call1(create_with_cell$0,[3,t1]);
        r[1] = 1;
        upon$0(t2,function(i){r[1] = r[1] + i | 0;return 0});
        fill(t1,13);
        stabilize$0(0);
        if(14 === r[1])return 0;
        throw [0,Assert_failure,_h0_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_r_1_upon_t2_fun_i_r_r_i_f,
        0,
        cst_src_ivar0_ml$15,
        678,
        4,
        208,
        _Zv_);
      function _Zw_(param)
       {var t=caml_call1(create$12,0);
        r[1] = 1;
        var u=upon(t,function(i){r[1] = r[1] + i | 0;return 0});
        stabilize$0(0);
        if(1 === r[1])
         {remove_handler(t,u);
          fill(t,13);
          stabilize$0(0);
          if(1 === r[1])return 0;
          throw [0,Assert_failure,_h1_]}
        throw [0,Assert_failure,_h2_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_r_1_let_u_upon_t_fun_i_r_r,
        0,
        cst_src_ivar0_ml$16,
        690,
        4,
        238,
        _Zw_);
      function _Zx_(param)
       {var t=caml_call1(create$12,0);
        r[1] = 1;
        var u=upon(t,function(i){r[1] = r[1] + i | 0;return 0});
        stabilize$0(0);
        if(1 === r[1])
         {fill(t,13);
          stabilize$0(0);
          if(14 === r[1])
           {remove_handler(t,u);
            stabilize$0(0);
            if(14 === r[1])return 0;
            throw [0,Assert_failure,_h3_]}
          throw [0,Assert_failure,_h4_]}
        throw [0,Assert_failure,_h5_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_r_1_let_u_upon_t_fun_i_r_r$0,
        0,
        cst_src_ivar0_ml$17,
        702,
        4,
        283,
        _Zx_);
      function _Zy_(param)
       {var t=caml_call1(create$12,0);
        r[1] = 1;
        var u1=upon(t,function(i){r[1] = r[1] + i | 0;return 0});
        upon(t,function(i){r[1] = r[1] + i | 0;return 0});
        stabilize$0(0);
        if(1 === r[1])
         {remove_handler(t,u1);
          fill(t,13);
          stabilize$0(0);
          if(14 === r[1])return 0;
          throw [0,Assert_failure,_h6_]}
        throw [0,Assert_failure,_h7_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_r_1_let_u1_upon_t_fun_i_r_r,
        0,
        cst_src_ivar0_ml$18,
        716,
        4,
        303,
        _Zy_);
      function _Zz_(param)
       {var t1=caml_call1(create$12,0),t2=caml_call1(create$12,0);
        r[1] = 1;
        var u1=upon(t1,function(param){r[1] = r[1] + 13 | 0;return 0});
        upon(t2,function(param){r[1] = r[1] + 17 | 0;return 0});
        connect$0(t1,t2);
        remove_handler(t1,u1);
        fill(t1,0);
        stabilize$0(0);
        if(18 === r[1])return 0;
        throw [0,Assert_failure,_h8_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_r_1_let_u1_upon_t1_fun_r,
        0,
        cst_src_ivar0_ml$19,
        729,
        4,
        318,
        _Zz_);
      function _ZA_(param)
       {var i1=caml_call1(create$12,0),i2=caml_call1(create$12,0);
        connect$0(i1,i2);
        stabilize$0(0);
        if(0 === i1[1]){if(_Zg_(i2,i1))return 0;throw [0,Assert_failure,_h9_]}
        throw [0,Assert_failure,_h__]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_connect_i1_i2_stabilize_assert_i1_cell,
        0,
        cst_src_ivar0_ml$20,
        744,
        4,
        175,
        _ZA_);
      function _ZB_(param)
       {var
         a1=caml_call1(create$12,0),
         b1=caml_call1(create$12,0),
         b2=caml_call1(create_with_cell$0,[3,b1]);
        connect$0(a1,b2);
        stabilize$0(0);
        if(0 === a1[1])
         {if(_Zg_(b1,a1))
           {if(_Zg_(b2,a1))return 0;throw [0,Assert_failure,_h$_]}
          throw [0,Assert_failure,_ia_]}
        throw [0,Assert_failure,_ib_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_connect_a1_b2_stabilize_assert_a1_cell,
        0,
        cst_src_ivar0_ml$21,
        753,
        4,
        247,
        _ZB_);
      function _ZC_(param)
       {var
         a1=caml_call1(create$12,0),
         a2=caml_call1(create_with_cell$0,[3,a1]),
         b1=caml_call1(create$12,0),
         b2=caml_call1(create_with_cell$0,[3,b1]);
        connect$0(a2,b2);
        stabilize$0(0);
        if(0 === a1[1])
         {if(_Zg_(a2,a1))
           {if(_Zg_(b1,a1))
             {if(_Zg_(b2,a1))return 0;throw [0,Assert_failure,_ic_]}
            throw [0,Assert_failure,_id_]}
          throw [0,Assert_failure,_ie_]}
        throw [0,Assert_failure,_if_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_connect_a2_b2_stabilize_assert_a1_cell,
        0,
        cst_src_ivar0_ml$22,
        764,
        4,
        319,
        _ZC_);
      function _ZD_(param)
       {var
         a=caml_call1(create$12,0),
         b=caml_call1(create_with_cell$0,[3,a]),
         c=caml_call1(create_with_cell$0,[3,a]);
        connect$0(b,c);
        stabilize$0(0);
        if(0 === a[1])
         {if(_Zg_(b,a)){if(_Zg_(c,a))return 0;throw [0,Assert_failure,_ig_]}
          throw [0,Assert_failure,_ih_]}
        throw [0,Assert_failure,_ii_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_connect_b_c_stabilize_assert_a_cell_E,
        0,
        cst_src_ivar0_ml$23,
        777,
        4,
        253,
        _ZD_);
      function _ZE_(param)
       {var a1=caml_call1(create$12,0);
        connect$0(a1,a1);
        stabilize$0(0);
        if(0 === a1[1])return 0;
        throw [0,Assert_failure,_ij_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_connect_a1_a1_stabilize_assert_a1_cell,
        0,
        cst_src_ivar0_ml$24,
        788,
        4,
        121,
        _ZE_);
      function _ZF_(param)
       {var
         a1=caml_call1(create$12,0),
         a2=caml_call1(create_with_cell$0,[3,a1]);
        connect$0(a1,a2);
        stabilize$0(0);
        if(0 === a1[1]){if(_Zg_(a2,a1))return 0;throw [0,Assert_failure,_ik_]}
        throw [0,Assert_failure,_il_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_connect_a1_a2_stabilize_assert_a1_cell,
        0,
        cst_src_ivar0_ml$25,
        795,
        4,
        193,
        _ZF_);
      function _ZG_(param)
       {var
         a1=caml_call1(create$12,0),
         a2=caml_call1(create_with_cell$0,[3,a1]);
        connect$0(a2,a1);
        stabilize$0(0);
        if(0 === a1[1]){if(_Zg_(a2,a1))return 0;throw [0,Assert_failure,_im_]}
        throw [0,Assert_failure,_in_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_connect_a2_a1_stabilize_assert_a1_cell,
        0,
        cst_src_ivar0_ml$26,
        804,
        4,
        193,
        _ZG_);
      function _ZH_(param)
       {var
         a1=caml_call1(create$12,0),
         b1=caml_call1(create_with_cell$0,empty_one_handler);
        connect$0(a1,b1);
        stabilize$0(0);
        if(caml_call2(Core_kernel[359],a1[1],empty_one_handler))
         {if(_Zg_(b1,a1))return 0;throw [0,Assert_failure,_io_]}
        throw [0,Assert_failure,_ip_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_connect_a1_b1_stabilize_assert_phys_equ,
        0,
        cst_src_ivar0_ml$27,
        813,
        4,
        221,
        _ZH_);
      function _ZI_(param)
       {var
         a1=caml_call1(create_with_cell$0,empty_one_handler),
         b1=caml_call1(create$12,0);
        connect$0(a1,b1);
        stabilize$0(0);
        if(caml_call2(Core_kernel[359],a1[1],empty_one_handler))
         {if(_Zg_(b1,a1))return 0;throw [0,Assert_failure,_iq_]}
        throw [0,Assert_failure,_ir_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_connect_a1_b1_stabilize_assert_phys_equ$0,
        0,
        cst_src_ivar0_ml$28,
        822,
        4,
        221,
        _ZI_);
      function _ZJ_(param)
       {var
         a1=caml_call1(create_with_cell$0,empty_one_handler),
         b1=caml_call1(create_with_cell$0,empty_one_handler);
        connect$0(a1,b1);
        stabilize$0(0);
        var _ZT_=a1[1];
        if(typeof _ZT_ !== "number" && 0 === _ZT_[0])
         {var n=[0,1],r=[0,_ZT_[4]];
          for(;;)
           {if(caml_call2(Core_kernel[359],r[1],_ZT_))
             {if(2 === n[1])
               {var
                 _ZU_=
                  function(param)
                   {var execution_context$0=param[2],run$0=param[1];
                    if
                     (caml_call2
                       (Core_kernel[359],execution_context$0,execution_context))
                     {if(caml_call2(Core_kernel[359],run$0,run))return 0;
                      throw [0,Assert_failure,_it_]}
                    throw [0,Assert_failure,_iu_]},
                 _ZV_=handler_list_of_cell(_ZT_);
                caml_call2(Core_kernel_List[19],_ZV_,_ZU_);
                if(_Zg_(b1,a1))return 0;
                throw [0,Assert_failure,_iv_]}
              throw [0,Assert_failure,_iw_]}
            n[1]++;
            r[1] = r[1][4];
            continue}}
        throw [0,Assert_failure,_is_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_connect_a1_b1_stabilize_match_a1_cell_w,
        0,
        cst_src_ivar0_ml$29,
        831,
        4,
        560,
        _ZJ_);
      function _ZK_(param)
       {var
         empty_many_handlers1=cell_of_handler_list([0,handler1,0]),
         a1=caml_call1(create_with_cell$0,empty_many_handlers1),
         b1=
          caml_call1(create_with_cell$0,cell_of_handler_list([0,handler2,0]));
        connect$0(a1,b1);
        stabilize$0(0);
        if(caml_call2(Core_kernel[359],a1[1],empty_many_handlers1))
         {var _ZR_=a1[1];
          if(typeof _ZR_ !== "number" && 0 === _ZR_[0])
           {var match=handler_list_of_cell(_ZR_);
            if(match)
             {var _ZS_=match[2];
              if(_ZS_)
               if(! _ZS_[2])
                {var
                  h2=_ZS_[1],
                  h1=match[1],
                  switch$0=
                   eq_handlers(h1,handler1)?eq_handlers(h2,handler2)?1:0:0;
                 if(! switch$0)
                  {var
                    switch$1=
                     eq_handlers(h1,handler2)?eq_handlers(h2,handler1)?0:1:1;
                   if(switch$1)throw [0,Assert_failure,_iA_]}
                 if(_Zg_(b1,a1))return 0;
                 throw [0,Assert_failure,_iz_]}}
            throw [0,Assert_failure,_iy_]}
          throw [0,Assert_failure,_ix_]}
        throw [0,Assert_failure,_iB_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_connect_a1_b1_stabilize_assert_phys_equ$1,
        0,
        cst_src_ivar0_ml$30,
        847,
        4,
        708,
        _ZK_);
      function _ZL_(param)
       {var
         empty_many_handlers1=cell_of_handler_list([0,handler1,0]),
         a1=caml_call1(create_with_cell$0,empty_many_handlers1),
         b1=caml_call1(create_with_cell$0,empty_one_handler);
        connect$0(a1,b1);
        stabilize$0(0);
        if(caml_call2(Core_kernel[359],a1[1],empty_many_handlers1))
         {var _ZP_=a1[1];
          if(typeof _ZP_ !== "number" && 0 === _ZP_[0])
           {var match=handler_list_of_cell(_ZP_);
            if(match)
             {var _ZQ_=match[2];
              if(_ZQ_)
               if(! _ZQ_[2])
                {var h2=_ZQ_[1],h1=match[1];
                 if(! eq_handlers(h1,handler1))
                  if(! eq_handlers(h2,handler1))throw [0,Assert_failure,_iF_];
                 if(_Zg_(b1,a1))return 0;
                 throw [0,Assert_failure,_iE_]}}
            throw [0,Assert_failure,_iD_]}
          throw [0,Assert_failure,_iC_]}
        throw [0,Assert_failure,_iG_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_connect_a1_b1_stabilize_assert_phys_equ$2,
        0,
        cst_src_ivar0_ml$31,
        867,
        4,
        618,
        _ZL_);
      function _ZM_(param)
       {var i1=caml_call1(create$12,0),i2=caml_call1(create_with_cell$0,_iH_);
        connect$0(i1,i2);
        stabilize$0(0);
        if(caml_equal(i1[1],_iI_))
         {if(caml_equal(i2[1],_iJ_))return 0;throw [0,Assert_failure,_iK_]}
        throw [0,Assert_failure,_iL_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_connect_i1_i2_stabilize_assert_i1_cell$0,
        0,
        cst_src_ivar0_ml$32,
        886,
        4,
        202,
        _ZM_);
      function _ZN_(param)
       {var
         a1=caml_call1(create$12,0),
         b1=caml_call1(create_with_cell$0,_iM_),
         b2=caml_call1(create_with_cell$0,[3,b1]);
        connect$0(a1,b2);
        stabilize$0(0);
        if(caml_equal(a1[1],_iN_))
         {if(caml_equal(b1[1],_iO_))
           {if(_Zg_(b2,a1))return 0;throw [0,Assert_failure,_iP_]}
          throw [0,Assert_failure,_iQ_]}
        throw [0,Assert_failure,_iR_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_connect_a1_b2_stabilize_assert_a1_cell$0,
        0,
        cst_src_ivar0_ml$33,
        895,
        4,
        274,
        _ZN_);
      function _ZO_(param)
       {var
         a1=caml_call1(create_with_cell$0,empty_one_handler),
         b1=caml_call1(create_with_cell$0,_iS_);
        connect$0(a1,b1);
        stabilize$0(0);
        if(caml_equal(a1[1],_iT_))
         {if(caml_equal(b1[1],_iU_))return 0;throw [0,Assert_failure,_iV_]}
        throw [0,Assert_failure,_iW_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_connect_a1_b1_stabilize_assert_a1_cell,
        0,
        cst_src_ivar0_ml$34,
        906,
        4,
        227,
        _ZO_);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst$22,
      0,
      cst_src_ivar0_ml$35,
      512,
      0,
      10162,
      _hr_);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$55);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Handler$0=[0,sexp_of_t$31],
     include$16=
      [0,
       sexp_of_t$32,
       invariant$8,
       create$12,
       create_full$0,
       peek,
       value_exn,
       value$0,
       is_empty,
       is_full,
       equal$1,
       connect,
       fill,
       Handler$0,
       add_handler,
       remove_handler,
       has_handlers,
       upon$0,
       upon,
       indir];
    caml_register_global(2649,include$16,"Async_kernel__Ivar0");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_async_kernel$56);
    caml_call1(Expect_test_collector[4][1],cst_src_deferred0_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$57,cst$23);
    function of_ivar(ivar){return ivar}
    function invariant$9(invariant_a,t){return invariant$8(invariant_a,t)}
    function sexp_of_t$33(sexp_of_a,t){return sexp_of_t$32(sexp_of_a,t)}
    function peek$0(t){return peek(t)}
    function return$0(a){return caml_call1(create_full$0,a)}
    function is_determined(t){return is_full(t)}
    function value_exn$0(t)
     {return value$0(t,cst_Deferred_value_exn_called_on_undetermined_deferred)}
    function upon$1(t,f){return upon$0(t,f)}
    function create$13(f)
     {var result=caml_call1(create$12,0);caml_call1(f,result);return result}
    function bind(t,f)
     {var bind_result=caml_call1(create$12,0);
      upon$1(t,function(a){return connect(bind_result,caml_call1(f,a))});
      return bind_result}
    function add_handler$0(t,f,execution_context)
     {return add_handler(t,f,execution_context)}
    function remove_handler$0(t,h){return remove_handler(t,h)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$58);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     include$17=
      [0,
       sexp_of_t$33,
       invariant$9,
       of_ivar,
       create$13,
       peek$0,
       value_exn$0,
       is_determined,
       return$0,
       upon$1,
       bind,
       Handler$0,
       add_handler$0,
       remove_handler$0];
    caml_register_global(2650,include$17,"Async_kernel__Deferred0");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_async_kernel$59);
    caml_call1(Expect_test_collector[4][1],cst_src_ivar_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$60,cst$24);
    function fill_if_empty(t,v)
     {var _Zf_=is_empty(t);return _Zf_?fill(t,v):_Zf_}
    function to_binable(t){return peek(t)}
    function of_binable(param)
     {if(param){var a=param[1];return caml_call1(create_full$0,a)}
      return caml_call1(create$12,0)}
    var
     include$18=
      caml_call1
       (caml_call1
         (Core_kernel_Binable[3],
          [0,
           Core_kernel_Option[8],
           Core_kernel_Option[5],
           Core_kernel_Option[6],
           Core_kernel_Option[2],
           Core_kernel_Option[3]]),
        [0,to_binable,of_binable]),
     _iX_=include$18[1],
     _iY_=include$18[2],
     _iZ_=include$18[3],
     _i0_=include$18[4],
     _i1_=include$18[5],
     _i2_=include$18[6],
     _i3_=include$18[7],
     _i4_=include$18[8];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$61);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Async_kernel_Ivar=
      [0,
       _i4_,
       _i0_,
       _i1_,
       _i3_,
       _iY_,
       _iZ_,
       _i2_,
       _iX_,
       sexp_of_t$32,
       invariant$8,
       equal$1,
       create$12,
       create_full$0,
       fill,
       fill_if_empty,
       is_empty,
       is_full,
       of_ivar,
       peek,
       value_exn,
       has_handlers];
    caml_register_global(2652,Async_kernel_Ivar,"Async_kernel__Ivar");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_async_kernel$62);
    caml_call1(Expect_test_collector[4][1],cst_src_monad_sequence_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$63,cst$25);
    function sexp_of_how(param)
     {if(typeof param === "number")return -676829465 <= param?_i5_:_i6_;
      var v0=param[2];
      return [1,[0,_i7_,[0,caml_call1(Core_kernel[455],v0),0]]]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$64);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Async_kernel_Monad_sequence=[0,sexp_of_how];
    caml_register_global
     (2653,Async_kernel_Monad_sequence,"Async_kernel__Monad_sequence");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_async_kernel$65);
    caml_call1(Expect_test_collector[4][1],cst_src_deferred1_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$66,cst$26);
    var Scheduler$1=0;
    function never(param){return caml_call1(create$12,0)}
    var
     map$11=
      [0,
       -198771759,
       function(t,f)
        {var result=caml_call1(create$12,0);
         upon$1(t,function(a){return fill(result,caml_call1(f,a))});
         return result}],
     M=caml_call1(Base_Monad[1],[0,bind,return$0,map$11]),
     ignore_m=M[8],
     join=M[7],
     map$12=M[6],
     bind$0=M[4],
     Monad_infix=M[3],
     _i8_=M[2],
     _i9_=M[1],
     _i__=M[12],
     include$19=M[12][4],
     bind$1=include$19[2],
     map$13=include$19[3],
     both=include$19[4],
     Open_on_rhs=include$19[5],
     include$20=
      [0,return$0,_i__[2],_i__[3],[0,return$0,bind$1,map$13,both,Open_on_rhs]],
     unit=caml_call1(include$20[1],0);
    function both$0(t1,t2)
     {return create$13
              (function(result)
                {return upon$1
                         (t1,
                          function(a1)
                           {return upon$1
                                    (t2,function(a2){return fill(result,[0,a1,a2])})})})}
    var include$21=M[3],Infix=[0,include$21[1],include$21[2],upon$1,both$0];
    function don_t_wait_for(param){return 0}
    function map$14(param,f2)
     {var f1=param[2],t=param[1];
      return [0,t,function(x){return caml_call1(f2,caml_call1(f1,x))}]}
    var Choice=[0,map$14];
    function process(param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var rest=param$0[3],handler=param$0[2],t=param$0[1];
          remove_handler$0(t,handler);
          var param$0=rest;
          continue}
        return 0}}
    var Unregister=[0,process];
    function choice(t,f){return [0,t,f]}
    function enabled(choices)
     {var result=caml_call1(create$12,0),unregisters=[0,0];
      function ready(param)
       {var _Zc_=is_empty(result);
        return _Zc_
                ?(caml_call1(Unregister[1],unregisters[1]),
                  fill
                   (result,
                    function(param)
                     {function _Zd_(ac,param)
                       {var f=param[2],t=param[1],match=peek$0(t);
                        if(match){var v=match[1];return [0,caml_call1(f,v),ac]}
                        return ac}
                      var _Ze_=caml_call3(Core_kernel_List[20],choices,0,_Zd_);
                      return caml_call1(Core_kernel_List[47],_Ze_)}))
                :_Zc_}
      var execution_context=current_execution_context$1(t$5(0));
      function _Zb_(acc,param)
       {var t=param[1];
        return [0,t,add_handler$0(t,ready,execution_context),acc]}
      unregisters[1] = caml_call3(Core_kernel_List[20],choices,0,_Zb_);
      return result}
    function choose_result(choices)
     {var choices$0=choices;
      for(;;)
       {if(choices$0)
         {var
           choices$1=choices$0[2],
           match=choices$0[1],
           f=match[2],
           t=match[1],
           match$0=peek$0(t);
          if(match$0){var v=match$0[1];return caml_call1(f,v)}
          var choices$0=choices$1;
          continue}
        throw [0,Assert_failure,_i$_]}}
    function choose(choices)
     {var result=caml_call1(create$12,0),unregisters=[0,0];
      function ready(param)
       {var _Za_=is_empty(result);
        return _Za_
                ?(caml_call1(Unregister[1],unregisters[1]),
                  fill(result,choose_result(choices)))
                :_Za_}
      var execution_context=current_execution_context$1(t$5(0));
      function _Y$_(acc,param)
       {var t=param[1];
        return [0,t,add_handler$0(t,ready,execution_context),acc]}
      unregisters[1] = caml_call3(Core_kernel_List[20],choices,0,_Y$_);
      return result}
    function any_f(ts,f)
     {function _Y__(t){return [0,t,f]}
      return choose(caml_call2(Core_kernel_List[84],ts,_Y__))}
    function any(ts){return any_f(ts,function(_Y9_){return _Y9_})}
    function any_unit(ts){return any_f(ts,function(_Y8_){return 0})}
    function for$0(start,to,do$0)
     {function loop(i)
       {if(to < i)return caml_call1(include$20[1],0);
        function _Y6_(param){return loop(i + 1 | 0)}
        var _Y7_=caml_call1(do$0,i);
        return caml_call2(include$20[4][2],_Y7_,_Y6_)}
      return loop(start)}
    function repeat_until_finished(state,f)
     {return create$13
              (function(finished)
                {function loop(state)
                  {function _Y4_(param)
                    {if(990972795 <= param[1])
                      {var state=param[2];return loop(state)}
                     var result=param[2];
                     return fill(finished,result)}
                   var _Y5_=caml_call1(f,state);
                   return caml_call2(Infix[3],_Y5_,_Y4_)}
                 return loop(state)})}
    function forever(state,f)
     {var
       _Y0_=Core_kernel[271],
       _Y1_=
        repeat_until_finished
         (state,
          function(state)
           {function _Y2_(state){return [0,990972795,state]}
            var _Y3_=caml_call1(f,state);
            return caml_call2(include$20[4][3],_Y3_,_Y2_)});
      return caml_call2(Infix[3],_Y1_,_Y0_)}
    function fold$11(t,init,f)
     {return create$13
              (function(result)
                {function loop(t,b)
                  {if(t)
                    {var
                      xs=t[2],
                      x=t[1],
                      _YY_=function(b){return loop(xs,b)},
                      _YZ_=caml_call2(f,b,x);
                     return caml_call2(Infix[3],_YZ_,_YY_)}
                   return fill(result,b)}
                 return loop(t,init)})}
    function seqmap(t,f)
     {var
       _YU_=Core_kernel_List[47],
       _YV_=
        fold$11
         (t,
          0,
          function(bs,a)
           {function _YW_(b){return [0,b,bs]}
            var _YX_=caml_call1(f,a);
            return caml_call2(Infix[2],_YX_,_YW_)});
      return caml_call2(Infix[2],_YV_,_YU_)}
    function all$0(ds){return seqmap(ds,function(_YT_){return _YT_})}
    function all_ignore(ds){return fold$11(ds,0,function(param,d){return d})}
    function ok(x)
     {function _YS_(x){return [0,x]}return caml_call2(Infix[2],x,_YS_)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$67);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     include$22=
      [0,
       Scheduler$1,
       sexp_of_t$33,
       invariant$9,
       of_ivar,
       create$13,
       peek$0,
       value_exn$0,
       is_determined,
       upon$1,
       Handler$0,
       add_handler$0,
       remove_handler$0,
       never,
       M,
       _i9_,
       _i8_,
       Monad_infix,
       bind$0,
       map$12,
       join,
       ignore_m,
       return$0,
       include$20,
       unit,
       ignore_m,
       both$0,
       Infix,
       don_t_wait_for,
       Choice,
       Unregister,
       choice,
       enabled,
       choose_result,
       choose,
       any_f,
       any,
       any_unit,
       for$0,
       repeat_until_finished,
       forever,
       sexp_of_how,
       fold$11,
       seqmap,
       all$0,
       all_ignore,
       all_ignore,
       ok];
    caml_register_global(2655,include$22,"Async_kernel__Deferred1");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_async_kernel$68);
    caml_call1(Expect_test_collector[4][1],cst_src_deferred_std_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$69,cst$27);
    var
     _ja_=Infix[3],
     _jc_=include$20[1],
     _jd_=include$20[2],
     _je_=include$20[3],
     _jb_=Infix[4],
     _jf_=include$20[4];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$70);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Async_kernel_Deferred_std=
      [0,
       _ja_,
       _jb_,
       _jd_,
       _je_,
       _jf_,
       choice,
       choose,
       don_t_wait_for,
       never,
       _jc_,
       upon$1];
    caml_register_global
     (2656,Async_kernel_Deferred_std,"Async_kernel__Deferred_std");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_async_kernel$71);
    caml_call1(Expect_test_collector[4][1],cst_src_ivar_filler_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$72,cst$28);
    function sexp_of_t$34(of_a,v)
     {function _YR_(param)
       {if(param)
         {var v0=param[1],v0$0=sexp_of_t$32(of_a,v0);
          return [1,[0,_jg_,[0,v0$0,0]]]}
        return _jh_}
      return caml_call2(Core_kernel[583],_YR_,v)}
    function invariant$10(param,t)
     {function _YM_(param)
       {var _YQ_=t[1];
        if(_YQ_)
         {var ivar=_YQ_[1];
          if(is_empty(ivar))return 0;
          throw [0,Assert_failure,_ji_]}
        return 0}
      function _YN_(param){return _jj_}
      function _YO_(_YP_){return sexp_of_t$34(_YN_,_YP_)}
      return caml_call4(include$11[1],_jk_,t,_YO_,_YM_)}
    function create$14(param)
     {var ivar=caml_call1(create$12,0),t=[0,[0,ivar]];return [0,t,ivar]}
    function is_empty$0(t){return t[1]?1:0}
    function fill$0(t,a)
     {var _YK_=t[1];
      if(_YK_){var i=_YK_[1];t[1] = 0;return fill(i,a)}
      var
       _YL_=
        caml_call1(Sexplib0_Sexp_conv[7],cst_attempt_to_fill_full_ivar);
      return caml_call1(Core_kernel[364],_YL_)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$73);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Async_kernel_Ivar_filler=
      [0,sexp_of_t$34,invariant$10,create$14,is_empty$0,fill$0];
    caml_register_global
     (2657,Async_kernel_Ivar_filler,"Async_kernel__Ivar_filler");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_async_kernel$74);
    caml_call1(Expect_test_collector[4][1],cst_src_tail_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$75,cst$29);
    var Deferred$0=0;
    function sexp_of_t$35(sexp_of_a,d)
     {var d$0=d,ac=0;
      for(;;)
       {var match=peek$0(d$0);
        if(match)
         {var _YJ_=match[1];
          if(_YJ_)
           {var
             t=_YJ_[2],
             a=_YJ_[1],
             ac$0=[0,caml_call1(sexp_of_a,a),ac],
             d$0=t,
             ac=ac$0;
            continue}
          return [1,caml_call1(Core_kernel_List[47],ac)]}
        return [1,caml_call1(Core_kernel_List[47],[0,_jl_,ac])]}}
    function next(t){return t}
    var include$23=[0,sexp_of_t$35,next];
    function sexp_of_t$36(param,t)
     {var _YI_=is_empty(t[1])?cst_open_tail:cst_closed_tail;return [0,_YI_]}
    function create$15(param){return [0,caml_call1(create$12,0)]}
    function collect(t){return t[1]}
    function is_closed(t){return is_full(t[1])}
    function fill_exn(t,v)
     {if(is_closed(t))
       {var _YH_=caml_call1(Sexplib0_Sexp_conv[7],cst_stream_is_closed);
        return caml_call1(Core_kernel[364],_YH_)}
      return fill(t[1],v)}
    function close_exn(t){return fill_exn(t,0)}
    function close_if_open(t)
     {var _YG_=1 - is_closed(t);return _YG_?fill(t[1],0):_YG_}
    function extend(t,v)
     {var next=caml_call1(create$12,0);
      fill_exn(t,[0,v,next]);
      t[1] = next;
      return 0}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$76);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Async_kernel_Tail=
      [0,
       Deferred$0,
       sexp_of_t$36,
       create$15,
       extend,
       close_exn,
       close_if_open,
       is_closed,
       include$23,
       collect];
    caml_register_global(2658,Async_kernel_Tail,"Async_kernel__Tail");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_async_kernel$77);
    caml_call1(Expect_test_collector[4][1],cst_src_monitor_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$78,cst$30);
    var Deferred$1=0;
    function invariant$11(t)
     {function _Yo_(param)
       {function _Yq_(_YF_){return 0}
        function _Yr_(_YE_){return 0}
        function _Ys_(_YD_){return 0}
        function _Yt_(_YC_){return 0}
        function f(next_error)
         {if(is_empty(next_error))return 0;throw [0,Assert_failure,_jm_]}
        var _Yp_=caml_call2(include$11[2],t,f);
        function _Yu_(_YB_){return 0}
        function _Yv_(_YA_){return 0}
        function _Yw_(_Yz_){return 0}
        function _Yx_(_Yy_){return 0}
        return caml_call9
                (Fields[14],_Yx_,_Yw_,_Yv_,_Yu_,_Yp_,_Yt_,_Ys_,_Yr_,_Yq_)}
      return caml_call4(include$11[1],_jn_,t,sexp_of_monitor,_Yo_)}
    function current_execution_context$2(param)
     {return current_execution_context$1(t$5(0))}
    function current(param){return current_execution_context$2(0)[1]}
    function depth(t)
     {var t$0=t,n=0;
      for(;;)
       {var _Yn_=t$0[4];
        if(_Yn_){var t$1=_Yn_[1],n$0=n + 1 | 0,t$0=t$1,n=n$0;continue}
        return n}}
    function detach(t){t[9] = 1;return 0}
    function detach_and_iter_errors(t,f)
     {detach(t);
      var
       scheduler=t$5(0),
       execution_context=current_execution_context$1(scheduler),
       handler_state_ref=[0,0];
      function run_f(exn)
       {var _Yl_=handler_state_ref[1];
        if(typeof _Yl_ === "number")
         {if(0 === _Yl_)throw [0,Assert_failure,_jo_];return 0}
        var bag_elt=_Yl_[1];
        try
         {var _Ym_=caml_call1(f,exn);return _Ym_}
        catch(inner_exn)
         {inner_exn = caml_wrap_exception(inner_exn);
          handler_state_ref[1] = 1;
          caml_call2(Core_kernel_Bag[25],t[6],bag_elt);
          throw inner_exn}}
      handler_state_ref[1]
      =
      [0,caml_call2(Core_kernel_Bag[23],t[6],[0,execution_context,run_f])];
      return 0}
    function detach_and_get_error_stream(t)
     {detach(t);var tail=create$15(0);t[7] = [0,tail,t[7]];return tail[1]}
    function get_next_error(t){return t[5]}
    function detach_and_get_next_error(t){detach(t);return t[5]}
    function create$16(here,info,name,param)
     {var parent=current(0);
      return create_with_parent(here,info,name,[0,parent])}
    var Error=[248,cst_Async_kernel_Monitor_Error,caml_fresh_oo_id(0)];
    function _ju_(param)
     {if(param[1] === Error)
       {var
         t=param[2],
         monitor=t[4],
         backtrace_history=t[3],
         backtrace=t[2],
         exn=t[1],
         s=caml_call1(Core_kernel_Info[7],monitor[1]),
         name=caml_string_notequal(s,cst$31)?[0,s]:0,
         _Yd_=monitor[2];
        if(_Yd_)
         var
          here=_Yd_[1],
          column=here[4] - here[3] | 0,
          pos=
           [0,caml_call5(Core_kernel[366],_jp_,here[1],here[2],column,column)];
        else
         var pos=0;
        if(pos)
         {var _Ye_=pos[1];
          if(name)
           var
            name$0=name[1],
            _Yf_=[0,caml_call3(Core_kernel[366],_jq_,name$0,_Ye_),0];
          else
           var _Yf_=[0,caml_call2(Core_kernel[366],_js_,_Ye_),0];
          var monitor$0=_Yf_}
        else
         if(name)
          var
           name$1=name[1],
           monitor$0=[0,caml_call2(Core_kernel[366],_jt_,name$1),0];
         else
          var monitor$0=0;
        if(backtrace)
         var
          backtrace$0=backtrace[1],
          backtrace$1=caml_call1(Base_Backtrace[4],backtrace$0);
        else
         var backtrace$1=0;
        if(backtrace$1)
         {var rest=backtrace$1[2],t1=backtrace$1[1];
          if(caml_call2(Core_kernel_String[57],t1,import0))
           {if(rest)
             {var rest$0=rest[2],t2=rest[1];
              if(caml_call2(Core_kernel_String[57],t2,error))
               {if(rest$0)
                 {var rest$1=rest$0[2],t3=rest$0[1];
                  if(caml_call2(Core_kernel_String[57],t3,error))
                   var rest$2=rest$1,switch$2=1;
                  else
                   var switch$2=0}
                else
                 var switch$2=0;
                if(! switch$2)var rest$2=rest$0;
                var rest$3=rest$2,switch$1=1}
              else
               var switch$1=0}
            else
             var switch$1=0;
            if(! switch$1)var rest$3=rest;
            var traces=rest$3,switch$0=1}
          else
           var switch$0=0}
        else
         var switch$0=0;
        if(! switch$0)var traces=backtrace$1;
        var match=caml_call1(Core_kernel_List[47],traces);
        if(match)
         {var rest$4=match[2],t1$0=match[1];
          if(caml_call2(Core_kernel_String[57],t1$0,job_queue))
           {if(rest$4)
             {var rest$5=rest$4[2],t2$0=rest$4[1];
              if(caml_call2(Core_kernel_String[57],t2$0,job_queue))
               {if(rest$5)
                 {var rest$6=rest$5[2],t2$1=rest$5[1];
                  if(caml_call2(Core_kernel_String[57],t2$1,deferred0))
                   var switch$6=1;
                  else
                   if(caml_call2(Core_kernel_String[57],t2$1,deferred1))
                    var switch$6=1;
                   else
                    if(caml_call2(Core_kernel_String[57],t2$1,monitor$2))
                     var switch$6=1;
                    else
                     var switch$5=1,switch$6=0;
                  if(switch$6)
                   var
                    _Yg_=caml_call1(Core_kernel_List[47],rest$6),
                    switch$3=1,
                    switch$4=0,
                    switch$5=0}
                else
                 var switch$5=1;
                if(switch$5)
                 var
                  _Yg_=caml_call1(Core_kernel_List[47],rest$5),
                  switch$3=1,
                  switch$4=0}
              else
               var switch$4=1}
            else
             var switch$4=1;
            if(switch$4)
             var _Yg_=caml_call1(Core_kernel_List[47],rest$4),switch$3=1}
          else
           var switch$3=0}
        else
         var switch$3=0;
        if(! switch$3)var _Yg_=traces;
        var
         backtrace$2=caml_call2(Core_kernel[269],_Yg_,monitor$0),
         list_if_not_empty=function(l){return l?[0,l]:0},
         match$0=list_if_not_empty(backtrace$2),
         _Yh_=list_if_not_empty(backtrace_history),
         match$1=0;
        if(_Yh_)
         var
          v=_Yh_[1],
          _Yi_=
           [0,
            [1,
             [0,_jr_,[0,caml_call2(Core_kernel[513],Base_Backtrace[1],v),0]]],
            match$1];
        else
         var _Yi_=match$1;
        if(match$0)
         var
          v$0=match$0[1],
          _Yj_=[0,caml_call2(Core_kernel[513],Core_kernel[557],v$0),_Yi_];
        else
         var _Yj_=_Yi_;
        var sexp=[1,[0,caml_call1(Core_kernel[614],exn),_Yj_]];
        if(0 === sexp[0])var _Yk_=[0,sexp,0];else var l=sexp[1],_Yk_=l;
        return [1,
                [0,
                 caml_call1(Sexplib0_Sexp_conv[7],cst_monitor_ml_Error),
                 _Yk_]]}
      throw [0,Assert_failure,_jv_]}
    caml_call3(Sexplib_Conv[51][2],0,Error,_ju_);
    function extract_exn(exn)
     {if(exn[1] === Error){var error=exn[2];return error[1]}return exn}
    function send_exn(t,backtrace,exn)
     {if(exn[1] === Error)
       var exn$0=exn;
      else
       {if(backtrace)
         {var _Yb_=backtrace[1];
          if(typeof _Yb_ === "number")
           var _Yc_=[0,caml_call1(Base_Backtrace[6][4],0)];
          else
           var b=_Yb_[2],_Yc_=[0,b];
          var backtrace$0=_Yc_}
        else
         var backtrace$0=0;
        var
         backtrace_history=current_execution_context$2(0)[4],
         exn$0=[0,Error,[0,exn,backtrace$0,backtrace_history,t]]}
      if(_ct_)
       log
        (cst_Monitor_send_exn$1,
         [0,t,exn$0],
         function(param)
          {var
            v1=param[2],
            v0=param[1],
            v0$0=sexp_of_monitor(v0),
            v1$0=caml_call1(Core_kernel[614],v1);
           return [1,[0,v0$0,[0,v1$0,0]]]});
      t[8] = 1;
      var scheduler=t$5(0),t$0=t;
      for(;;)
       {fill(t$0[5],exn$0);
        t$0[5] = caml_call1(create$12,0);
        if(t$0[9])
         {if(_ct_)
           log
            (cst_Monitor_send_exn_found_listening_monitor,
             [0,t$0,exn$0],
             function(param)
              {var
                v1=param[2],
                v0=param[1],
                v0$0=sexp_of_monitor(v0),
                v1$0=caml_call1(Core_kernel[614],v1);
               return [1,[0,v0$0,[0,v1$0,0]]]});
          var
           _X9_=
            function(param)
             {var f=param[2],execution_context=param[1];
              return enqueue$0(scheduler,execution_context,f,exn$0)};
          caml_call2(Core_kernel_Bag[7],t$0[6],_X9_);
          var _X__=function(tail){return extend(tail,exn$0)};
          return caml_call2(Core_kernel_List[19],t$0[7],_X__)}
        var _X$_=t$0[4];
        if(_X$_){var t$1=_X$_[1],t$0=t$1;continue}
        var _Ya_=caml_call1(task_id[1],0);
        return got_uncaught_exn(t$5(0),exn$0,_Ya_)}}
    function within_context(context,f)
     {function _X8_(param)
       {var match=caml_call1(Core_kernel_Result[43],f);
        if(0 === match[0]){var x=match[1];return [0,x]}
        var exn=match[1];
        send_exn(context[1],_jw_,exn);
        return _jx_}
      return with_execution_context(t$5(0),context,_X8_)}
    function within_gen(monitor,priority,f)
     {var
       tmp_context=
        create_like(monitor,priority,0,current_execution_context$2(0));
      return within_context(tmp_context,f)}
    function within(monitor,priority,f)
     {var match=within_gen(monitor,priority,f);
      if(0 === match[0]){var d=match[1];return d}
      return never(0)}
    function within_v(monitor,priority,f)
     {var match=within_gen(monitor,priority,f);
      if(0 === match[0]){var x=match[1];return [0,x]}
      return 0}
    function within$0(monitor,priority,f)
     {var match=within_gen(monitor,priority,f);return 0 === match[0]?0:0}
    function schedule_with_data(monitor,priority,work,x)
     {var scheduler=t$5(0);
      return enqueue$0
              (scheduler,
               create_like
                (monitor,priority,0,current_execution_context$1(scheduler)),
               work,
               x)}
    function schedule$0(monitor,priority,work)
     {return schedule_with_data(monitor,priority,work,0)}
    function upon_work_fill_i(param)
     {var i=param[2],work=param[1];
      function _X7_(a){return fill(i,a)}
      return upon$1(caml_call1(work,0),_X7_)}
    function schedule$1(monitor,priority,work)
     {var i=caml_call1(create$12,0);
      schedule_with_data(monitor,priority,upon_work_fill_i,[0,work,i]);
      return i}
    function preserve_execution_context(f)
     {var
       scheduler=t$5(0),
       execution_context=current_execution_context$1(scheduler);
      function _X6_(a){return enqueue$0(scheduler,execution_context,f,a)}
      return caml_call1(Core_kernel[367],_X6_)}
    function preserve_execution_context$0(f)
     {var
       scheduler=t$5(0),
       execution_context=current_execution_context$1(scheduler);
      function call_and_fill(param)
       {var i=param[3],a=param[2],f=param[1];
        function _X5_(r){return fill(i,r)}
        return upon$1(caml_call1(f,a),_X5_)}
      function _X4_(a)
       {return create$13
                (function(i)
                  {return enqueue$0
                           (scheduler,execution_context,call_and_fill,[0,f,a,i])})}
      return caml_call1(Core_kernel[367],_X4_)}
    function stream_iter(stream,f)
     {function loop(stream)
       {function _X3_(param)
         {if(param)
           {var stream=param[2],v=param[1];
            loop(stream);
            return caml_call1(f,v)}
          return 0}
        return caml_call2(_ja_,caml_call1(include$23[2],stream),_X3_)}
      return loop(stream)}
    function create$17(here,info,name,run,f)
     {var
       monitor=create_with_parent(here,info,name,0),
       exns=detach_and_get_error_stream(monitor),
       ok=523273847 <= run?schedule$1([0,monitor],0,f):within([0,monitor],0,f);
      return [0,ok,exns]}
    function fill_result_and_handle_background_errors
     (result_filler,result,exns,handle_exns_after_result)
     {var _X2_=is_empty$0(result_filler);
      return _X2_
              ?(fill$0(result_filler,result),
                caml_call1(handle_exns_after_result,exns))
              :_X2_}
    var
     try_with_log_exn=
      [0,
       function(exn)
        {var
          _X0_=[0,[1,[0,_jy_,[0,caml_call1(Base_Exn[1],exn),0]]],0],
          _X1_=
           [1,
            [0,
             caml_call1
              (Sexplib0_Sexp_conv[7],
               cst_failed_to_set_Monitor_Expert_try_with_log_exn),
             _X0_]];
         return caml_call1(Core_kernel[364],_X1_)}],
     Expert=[0,try_with_log_exn];
    function try_with(here,info,opt,_XY_,_XX_,_XW_,f$0)
     {if(opt)var sth=opt[1],name=sth;else var name=cst$32;
      if(_XY_)
       var sth$0=_XY_[1],do_extract_exn=sth$0;
      else
       var do_extract_exn=0;
      if(_XX_)var sth$1=_XX_[1],run=sth$1;else var run=523273847;
      if(_XW_)var sth$2=_XW_[1],rest=sth$2;else var rest=3804260;
      var
       match=create$17(here,info,[0,name],run,f$0),
       exns=match[2],
       ok=match[1];
      if(typeof rest === "number")
       if(3804260 <= rest)
        var handle_exn=Expert[1][1];
       else
        var
         parent=current(0),
         handle_exn=function(exn){return send_exn(parent,0,exn)};
      else
       var
        f=rest[2],
        parent$0=current(0),
        handle_exn=
         function(exn)
          {return within$0
                   ([0,parent$0],0,function(param){return caml_call1(f,exn)})};
      function handle_exns_after_result(exns)
       {return stream_iter(exns,handle_exn)}
      return within
              ([0,main],
               0,
               function(param)
                {if(is_determined(ok))
                  {handle_exns_after_result(exns);
                   return caml_call1(_jc_,[0,value_exn$0(ok)])}
                 var
                  match=create$14(0),
                  result=match[2],
                  result_filler=match[1];
                 upon$1
                  (ok,
                   function(res)
                    {return fill_result_and_handle_background_errors
                             (result_filler,[0,res],exns,handle_exns_after_result)});
                 function _XZ_(param)
                  {if(param)
                    {var
                      exns=param[2],
                      exn=param[1],
                      exn$0=do_extract_exn?extract_exn(exn):exn;
                     return fill_result_and_handle_background_errors
                             (result_filler,[1,exn$0],exns,handle_exns_after_result)}
                   throw [0,Assert_failure,_jz_]}
                 upon$1(caml_call1(include$23[2],exns),_XZ_);
                 return result})}
    function try_with_or_error(here,info,opt,extract_exn,f)
     {if(opt)var sth=opt[1],name=sth;else var name=cst_try_with_or_error;
      var _XV_=Core_kernel_Or_error[42];
      return caml_call2
              (_je_,try_with(here,info,[0,name],extract_exn,_jB_,_jA_,f),_XV_)}
    function try_with_join_or_error(here,info,opt,extract_exn,f)
     {if(opt)var sth=opt[1],name=sth;else var name=cst_try_with_join_or_error;
      var _XU_=Core_kernel_Or_error[27];
      return caml_call2
              (_je_,try_with_or_error(here,info,[0,name],extract_exn,f),_XU_)}
    function protect(here,info,opt,f,finally$0)
     {if(opt)var sth=opt[1],name=sth;else var name=cst_Monitor_protect;
      function _XL_(r)
       {function _XN_(match)
         {if(0 === r[0])
           {var _XP_=r[1];if(0 === match[0])return _XP_;var e=match[1]}
          else
           {var _XQ_=r[1];
            if(0 !== match[0])
             {var
               finally_exn=match[1],
               _XR_=
                [0,
                 [1,[0,_jC_,[0,caml_call1(Core_kernel[614],finally_exn),0]]],
                 0],
               _XS_=
                [0,[1,[0,_jD_,[0,caml_call1(Core_kernel[614],_XQ_),0]]],_XR_],
               _XT_=
                [1,
                 [0,caml_call1(Sexplib0_Sexp_conv[7],cst_Async_finally),_XS_]];
              return caml_call1(Core_kernel[364],_XT_)}
            var e=_XQ_}
          throw e}
        var _XO_=try_with(here,info,_jE_,0,0,0,finally$0);
        return caml_call2(include$20[4][3],_XO_,_XN_)}
      var _XM_=try_with(here,info,[0,name],0,0,0,f);
      return caml_call2(include$20[4][2],_XM_,_XL_)}
    function handle_errors(here,info,name,f,handler)
     {var match=create$17(here,info,name,3903734,f),exns=match[2],ok=match[1];
      stream_iter(exns,handler);
      return ok}
    function catch_stream(here,info,name,f)
     {var
       match=
        create$17
         (here,
          info,
          name,
          3903734,
          function(param){caml_call1(f,0);return caml_call1(_jc_,0)}),
       exns=match[2];
      return exns}
    function catch$0(here,info,name,f)
     {function _XH_(param)
       {if(param){var x=param[1];return x}
        var
         _XK_=
          caml_call1
           (Sexplib0_Sexp_conv[7],
            cst_Monitor_catch_got_unexpected_empty_stream);
        return caml_call1(Core_kernel[364],_XK_)}
      var
       _XI_=catch_stream(here,info,name,f),
       _XJ_=caml_call1(include$23[2],_XI_);
      return caml_call2(include$20[4][3],_XJ_,_XH_)}
    function catch_error(here,info,name,f)
     {var arg=Core_kernel_Error[19];
      function _XG_(eta){return caml_call2(arg,0,eta)}
      return caml_call2(_je_,catch$0(here,info,name,f),_XG_)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$79);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     include$24=
      [0,
       within,
       within$0,
       within_v,
       schedule$1,
       schedule$0,
       within_context,
       preserve_execution_context,
       preserve_execution_context$0],
     Async_kernel_Monitor=
      [0,
       Deferred$1,
       sexp_of_monitor,
       invariant$11,
       create$16,
       name,
       parent,
       depth,
       current,
       detach,
       detach_and_iter_errors,
       detach_and_get_next_error,
       detach_and_get_error_stream,
       get_next_error,
       extract_exn,
       has_seen_error,
       send_exn,
       try_with,
       try_with_or_error,
       try_with_join_or_error,
       handle_errors,
       catch_stream,
       catch$0,
       catch_error,
       protect,
       main,
       Expert,
       include$24];
    caml_register_global(2661,Async_kernel_Monitor,"Async_kernel__Monitor");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_async_kernel$80);
    caml_call1(Expect_test_collector[4][1],cst_src_async_stream_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$81,cst$33);
    var _jG_=include$23[2],Deferred$2=0,_jF_=include$23[1];
    function first_exn(t)
     {function _XD_(param)
       {if(param){var x=param[1];return x}
        var
         _XF_=
          caml_call1(Sexplib0_Sexp_conv[7],cst_Stream_first_of_empty_stream);
        return caml_call1(Core_kernel[364],_XF_)}
      var _XE_=caml_call1(_jG_,t);
      return caml_call2(include$20[4][3],_XE_,_XD_)}
    function fold$12(t,init,f)
     {return create$13
              (function(result)
                {function loop(t,b)
                  {function _XA_(param)
                    {if(param)
                      {var
                        t=param[2],
                        v=param[1],
                        _XB_=function(_XC_){return loop(t,_XC_)};
                       return upon$1(caml_call2(f,b,v),_XB_)}
                     return fill(result,b)}
                   return upon$1(caml_call1(_jG_,t),_XA_)}
                 return loop(t,init)})}
    function fold$13(t,init,f)
     {return create$13
              (function(result)
                {function loop$0(counter,t,b)
                  {var match=peek$0(caml_call1(_jG_,t));
                   if(match)
                    {var next=match[1];
                     if(counter < 50)
                      {var counter$0=counter + 1 | 0;
                       return loop_next$0(counter$0,next,b)}
                     return caml_trampoline_return(loop_next$0,[0,next,b])}
                   function _Xz_(next){return loop_next(next,b)}
                   return upon$1(caml_call1(_jG_,t),_Xz_)}
                 function loop_next$0(counter,next,b)
                  {if(next)
                    {var t=next[2],v=next[1],_Xy_=caml_call2(f,b,v);
                     if(counter < 50)
                      {var counter$0=counter + 1 | 0;
                       return loop$0(counter$0,t,_Xy_)}
                     return caml_trampoline_return(loop$0,[0,t,_Xy_])}
                   return fill(result,b)}
                 function loop(t,b){return caml_trampoline(loop$0(0,t,b))}
                 function loop_next(next,b)
                  {return caml_trampoline(loop_next$0(0,next,b))}
                 return loop(t,init)})}
    function length$1(t)
     {return fold$13(t,0,function(n,param){return n + 1 | 0})}
    function iter$11(t,f)
     {return fold$12(t,0,function(param,v){return caml_call1(f,v)})}
    function closed(t)
     {var match=peek$0(caml_call1(_jG_,t));
      if(match)if(! match[1])return caml_call1(_jc_,0);
      return iter$11(t,function(param){return caml_call1(_jc_,0)})}
    function iter$12(t,f)
     {iter$11(t,function(a){caml_call1(f,a);return caml_call1(_jc_,0)});
      return 0}
    function create$18(f)
     {var tail=create$15(0),t=tail[1];caml_call1(f,tail);return t}
    function _jH_(param)
     {var s=create$18(close_exn);return is_determined(closed(s))}
    caml_call8
     (Ppx_inline_test_lib_Runtime[4],
      Inline_test_config,
      cst_Deferred_is_determined_closed_s,
      0,
      cst_src_async_stream_ml$0,
      62,
      0,
      83,
      _jH_);
    function unfold(b,f)
     {return create$18
              (function(tail)
                {function loop(b)
                  {function _Xx_(param)
                    {if(param)
                      {var match=param[1],b=match[2],a=match[1];
                       extend(tail,a);
                       return loop(b)}
                     return close_exn(tail)}
                   return upon$1(caml_call1(f,b),_Xx_)}
                 return loop(b)})}
    function of_list(l)
     {return create$18
              (function(tail)
                {function _Xw_(x){return extend(tail,x)}
                 caml_call2(Core_kernel_List[19],l,_Xw_);
                 return close_exn(tail)})}
    function to_list$11(s)
     {var _Xv_=Core_kernel_List[47];
      return caml_call2
              (_je_,
               fold$12(s,0,function(b,a){return caml_call1(_jc_,[0,a,b])}),
               _Xv_)}
    function copy_to_tail(t,tail)
     {return iter$11(t,function(a){return caml_call1(_jc_,extend(tail,a))})}
    function append(t1,t2)
     {return create$18
              (function(tail)
                {function _Xt_(param)
                  {function _Xu_(param){return close_exn(tail)}
                   return upon$1(copy_to_tail(t2,tail),_Xu_)}
                 return upon$1(copy_to_tail(t1,tail),_Xt_)})}
    function concat$1(t)
     {return create$18
              (function(tail)
                {function _Xs_(param){return close_exn(tail)}
                 return upon$1
                         (iter$11(t,function(t){return copy_to_tail(t,tail)}),_Xs_)})}
    function filter_deprecated(t,f)
     {return create$18
              (function(tail)
                {function _Xp_(param){return close_exn(tail)}
                 return upon$1
                         (iter$11
                           (t,
                            function(a)
                             {function _Xq_(param){return 0 === param?0:extend(tail,a)}
                              var _Xr_=caml_call1(_jc_,caml_call1(f,a));
                              return caml_call2(include$20[4][3],_Xr_,_Xq_)}),
                          _Xp_)})}
    function filter_map_deprecated(t,f)
     {return create$18
              (function(tail)
                {function _Xm_(param){return close_exn(tail)}
                 return upon$1
                         (iter$11
                           (t,
                            function(a)
                             {function _Xn_(param)
                               {if(param){var v=param[1];return extend(tail,v)}return 0}
                              var _Xo_=caml_call1(_jc_,caml_call1(f,a));
                              return caml_call2(include$20[4][3],_Xo_,_Xn_)}),
                          _Xm_)})}
    function map$15(t,f)
     {return create$18
              (function(tail)
                {function _Xj_(param){return close_exn(tail)}
                 return upon$1
                         (iter$11
                           (t,
                            function(v)
                             {function _Xk_(_Xl_){return extend(tail,_Xl_)}
                              return caml_call2(_je_,caml_call1(f,v),_Xk_)}),
                          _Xj_)})}
    function map$16(t,f)
     {return map$15(t,function(a){return caml_call1(_jc_,caml_call1(f,a))})}
    function first_n(s,n)
     {return create$18
              (function(tail)
                {function loop(s,n)
                  {if(0 === n)return close_exn(tail);
                   function _Xi_(param)
                    {if(param)
                      {var t=param[2],x=param[1];
                       extend(tail,x);
                       return loop(t,n - 1 | 0)}
                     return close_exn(tail)}
                   return upon$1(caml_call1(_jG_,s),_Xi_)}
                 return loop(s,n)})}
    function available_now(t)
     {var t$0=t,ac=0;
      for(;;)
       {var match=peek$0(caml_call1(_jG_,t$0));
        if(match)
         {var _Xh_=match[1];
          if(_Xh_)
           {var t$1=_Xh_[2],x=_Xh_[1],ac$0=[0,x,ac],t$0=t$1,ac=ac$0;continue}}
        return [0,caml_call1(Core_kernel_List[47],ac),t$0]}}
    function split(opt,_Xc_,t)
     {if(opt)var sth=opt[1],stop=sth;else var stop=never(0);
      if(_Xc_)
       var sth$0=_Xc_[1],f=sth$0;
      else
       var f=function(param){return 192584839};
      var reason_for_stopping=caml_call1(create$12,0),prefix=create$15(0);
      function finish(v){close_exn(prefix);return fill(reason_for_stopping,v)}
      function loop(t)
       {function _Xd_(param)
         {if(typeof param === "number")return finish([0,280164845,t]);
          var o=param[2];
          if(o)
           {var t$0=o[2],a=o[1],match=caml_call1(f,a);
            if(typeof match === "number"){extend(prefix,a);return loop(t$0)}
            var b=match[2];
            return finish([0,398750242,[0,b,t$0]])}
          return finish(1144100)}
        var _Xe_=0;
        function _Xf_(o){return [0,870035731,o]}
        var _Xg_=[0,[0,caml_call1(_jG_,t),_Xf_],_Xe_];
        return caml_call2
                (_ja_,
                 choose([0,[0,stop,function(param){return 280164845}],_Xg_]),
                 _Xd_)}
      loop(t);
      return [0,prefix[1],reason_for_stopping]}
    function find(t,f)
     {var
       match=
        split
         (0,
          [0,function(a){return caml_call1(f,a)?[0,398750242,a]:192584839}],
          t),
       found=match[2];
      function _Xb_(x)
       {if(typeof x !== "number")
         if(! (398750242 <= x[1]))throw [0,Assert_failure,_jI_];
        return x}
      return caml_call2(include$20[4][3],found,_Xb_)}
    function ungroup(t)
     {return create$18
              (function(tail)
                {function _W$_(param){return close_exn(tail)}
                 return upon$1
                         (iter$11
                           (t,
                            function(l)
                             {function _Xa_(x){return extend(tail,x)}
                              caml_call2(Core_kernel_List[19],l,_Xa_);
                              return caml_call1(_jc_,0)}),
                          _W$_)})}
    function interleave(ts)
     {return create$18
              (function(tail)
                {var num_open=[0,1];
                 function close(param)
                  {num_open[1] = num_open[1] - 1 | 0;
                   var _W__=0 === num_open[1]?1:0;
                   return _W__?close_exn(tail):_W__}
                 var
                  outer_closed=
                   iter$11
                    (ts,
                     function(t)
                      {num_open[1] = num_open[1] + 1 | 0;
                       upon$1(copy_to_tail(t,tail),close);
                       return caml_call1(_jc_,0)});
                 return upon$1(outer_closed,close)})}
    function take_until(t,d)
     {return create$18
              (function(tail)
                {function loop(t)
                  {function _W5_(param)
                    {if(typeof param !== "number")
                      {var _W9_=param[2];
                       if(_W9_)
                        {var t=_W9_[2],x=_W9_[1];extend(tail,x);return loop(t)}}
                     return close_exn(tail)}
                   var _W6_=0;
                   function _W7_(z){return [0,870035731,z]}
                   var _W8_=[0,[0,caml_call1(_jG_,t),_W7_],_W6_];
                   return upon$1
                           (choose([0,[0,d,function(param){return 926227490}],_W8_]),
                            _W5_)}
                 return loop(t)})}
    function iter_durably(t,f)
     {return create$13
              (function(result)
                {function loop(t)
                  {function _W3_(param)
                    {if(param)
                      {var
                        t=param[2],
                        x=param[1],
                        _W4_=
                         function(z)
                          {loop(t);
                           if(0 === z[0])return 0;
                           var e=z[1];
                           return send_exn(current(0),0,e)};
                       return caml_call2
                               (_ja_,
                                try_with
                                 (0,0,0,0,0,_jJ_,function(param){return caml_call1(f,x)}),
                                _W4_)}
                     return fill(result,0)}
                   return caml_call2(_ja_,caml_call1(_jG_,t),_W3_)}
                 return loop(t)})}
    function iter_durably_report_end(t,f)
     {return create$13
              (function(result)
                {function loop(t)
                  {function _W2_(param)
                    {if(param)
                      {var t=param[2],x=param[1];loop(t);return caml_call1(f,x)}
                     return fill(result,0)}
                   return caml_call2(_ja_,caml_call1(_jG_,t),_W2_)}
                 return loop(t)})}
    function iter_durably$0(t,f){iter_durably_report_end(t,f);return 0}
    function of_fun(f)
     {return unfold
              (0,
               function(param)
                {function _W0_(a){return [0,[0,a,0]]}
                 var _W1_=caml_call1(f,0);
                 return caml_call2(include$20[4][3],_W1_,_W0_)})}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$82);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Async_kernel_Async_stream=
      [0,
       Deferred$2,
       _jF_,
       create$18,
       _jG_,
       first_exn,
       of_list,
       to_list$11,
       of_fun,
       copy_to_tail,
       append,
       concat$1,
       available_now,
       filter_deprecated,
       filter_map_deprecated,
       fold$12,
       fold$13,
       iter$11,
       closed,
       iter$12,
       take_until,
       iter_durably,
       iter_durably$0,
       iter_durably_report_end,
       length$1,
       map$15,
       map$16,
       first_n,
       unfold,
       split,
       find,
       ungroup,
       interleave];
    caml_register_global
     (2662,Async_kernel_Async_stream,"Async_kernel__Async_stream");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_async_kernel$83);
    caml_call1(Expect_test_collector[4][1],cst_src_synchronous_time_source_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$84,cst$34);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$85);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Async_kernel_Synchronous_time_source=
      [0,
       [0,include$13[14]],
       Read_write,
       sexp_of_t$24,
       invariant$4,
       read_only,
       create$10,
       alarm_precision,
       is_wall_clock$1,
       now,
       timing_wheel_now$0,
       advance_by_alarms,
       run_at,
       run_after,
       run_at_intervals,
       [0,
        Event$1[16],
        Event$1[17],
        Event$1[21],
        Event$1[22],
        Event$1[23],
        Event$1[24],
        Event$1[25],
        Event$1[27],
        Event$1[26]],
       default_timing_wheel_config$0,
       wall_clock];
    caml_register_global
     (2663,
      Async_kernel_Synchronous_time_source,
      "Async_kernel__Synchronous_time_source");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_async_kernel$86);
    caml_call1(Expect_test_collector[4][1],cst_src_time_source_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$87,cst$35);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$88);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Async_kernel_Time_source_intf=[0,0];
    caml_register_global
     (2664,Async_kernel_Time_source_intf,"Async_kernel__Time_source_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_async_kernel$89);
    caml_call1(Expect_test_collector[4][1],cst_src_bvar_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$90,cst$36);
    function ivar(r){return r[2]}
    function set_ivar(r,v){r[2] = v;return 0}
    function _jK_(r){return r[1]}
    function set_has_any_waiters(r,v){r[1] = v;return 0}
    function _jL_(r,v){return [0,r[1],v]}
    var
     _jM_=[0,set_ivar],
     ivar$0=[0,[0,function(param){return 0},cst_ivar,_jM_,ivar,_jL_]];
    function _jN_(r,v){return [0,v,r[2]]}
    var
     _jO_=[0,set_has_any_waiters],
     has_any_waiters=
      [0,[0,function(param){return 0},cst_has_any_waiters,_jO_,_jK_,_jN_]];
    function invariant$12(invariant_a,param,t)
     {var repr=caml_call1(Bvar[2],t);
      function _WX_(param)
       {function check(f){return caml_call2(include$11[2],repr,f)}
        var
         ivar_fun=
          check
           (function(ivar)
             {invariant$8(invariant_a,ivar);
              if(is_empty(ivar))return 0;
              throw [0,Assert_failure,_jR_]}),
         has_any_waiters_fun=
          check
           (function(has_any_waiters)
             {var _WZ_=has_handlers(repr[2]);
              if(_WZ_)
               {if(has_any_waiters)return 0;throw [0,Assert_failure,_jS_]}
              return _WZ_});
        caml_call1(has_any_waiters_fun,has_any_waiters);
        return caml_call1(ivar_fun,ivar$0)}
      function of_a(param){return _jT_}
      function _WY_(param)
       {var
         v_has_any_waiters=param[1],
         v_ivar=param[2],
         arg=sexp_of_t$32(of_a,v_ivar),
         bnds=[0,[1,[0,_jP_,[0,arg,0]]],0],
         arg$0=caml_call1(Core_kernel[410],v_has_any_waiters),
         bnds$0=[0,[1,[0,_jQ_,[0,arg$0,0]]],bnds];
        return [1,bnds$0]}
      return caml_call4(include$11[1],_jU_,repr,_WY_,_WX_)}
    function sexp_of_t$37(param,_WW_,t)
     {var match=caml_call1(Bvar[2],t),has_any_waiters=match[1];
      return [1,[0,_jV_,[0,caml_call1(Core_kernel[410],has_any_waiters),0]]]}
    var _jW_=Bvar$0[1];
    function broadcast(t,a)
     {var
       repr=caml_call1(Bvar[2],t),
       _WU_=repr[1],
       _WV_=
        _WU_
         ?(repr[1] = 0,fill(repr[2],a),repr[2] = caml_call1(create$12,0),0)
         :_WU_;
      return _WV_}
    function wait(t)
     {var repr=caml_call1(Bvar[2],t);repr[1] = 1;return repr[2]}
    function has_any_waiters$0(t)
     {var repr=caml_call1(Bvar[2],t);return repr[1]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$91);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Async_kernel_Bvar=
      [0,sexp_of_t$37,invariant$12,_jW_,wait,broadcast,has_any_waiters$0];
    caml_register_global(2665,Async_kernel_Bvar,"Async_kernel__Bvar");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_async_kernel$92);
    caml_call1(Expect_test_collector[4][1],cst_src_time_source_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$93,cst$37);
    var invariant$13=include$13[16];
    function sexp_of_t$38(param,_WP_)
     {var events=_WP_[3],is_wall_clock=_WP_[6];
      if(is_wall_clock)
       return caml_call1(Sexplib0_Sexp_conv[7],cst_wall_clock$0);
      var _WQ_=0,_WR_=0;
      function _WS_(param){return _jX_}
      var
       _WT_=
        [0,[1,[0,_jY_,[0,caml_call2(include$1[3],_WS_,events),_WR_]]],_WQ_];
      return [1,
              [0,
               [1,[0,_jZ_,[0,caml_call1(Core_kernel[410],is_wall_clock),0]]],
               _WT_]]}
    function sexp_of_t$39(v){return sexp_of_t$38(Core_kernel[315],v)}
    var Read_write$0=[0,sexp_of_t$39,invariant$13];
    function sexp_of_t$40(v){return sexp_of_t$38(Core_kernel[284],v)}
    function read_only$0(t){return t}
    function alarm_precision$0(t){return caml_call1(include$1[11],t[3])}
    function next_alarm_fires_at(t){return caml_call1(include$1[35],t[3])}
    function timing_wheel_now$1(t){return caml_call1(include$1[12],t[3])}
    function now$0(t){return t[6]?caml_call1(_A_,0):timing_wheel_now$1(t)}
    var send_exn$0=[0,send_exn];
    function advance$0(t,to){return advance_clock(t,to,send_exn$0)}
    function advance_by(t,by){return advance$0(t,after(now$0(t),by))}
    function fire_past_alarms$0(t){return fire_past_alarms(t,send_exn$0)}
    function yield$2(t){return wait(t[7][19])}
    function advance_by_alarms$0(t,to)
     {function run_queued_alarms(param){return yield$2(t)}
      function finish(param)
       {advance$0(t,to);fire_past_alarms$0(t);return run_queued_alarms(0)}
      function walk_alarms(param)
       {var match=next_alarm_fires_at(t);
        if(match)
         {var next_alarm_fires_at$0=match[1];
          if(caml_call2(_m_,next_alarm_fires_at$0,to))return finish(0);
          advance$0(t,next_alarm_fires_at$0);
          var
           _WN_=function(param){return walk_alarms(0)},
           _WO_=run_queued_alarms(0);
          return caml_call2(include$20[4][2],_WO_,_WN_)}
        return finish(0)}
      function _WL_(param){return walk_alarms(0)}
      var _WM_=yield$2(t);
      return caml_call2(include$20[4][2],_WM_,_WL_)}
    function span_to_time(t,span){return after(now$0(t),span)}
    function run_at_internal(t,time,f$0,a)
     {var execution_context=current_execution_context$1(t[7]);
      if(caml_call2(_p_,time,caml_call1(include$1[12],t[3])))
       {var
         _WI_=create_job(t[7],execution_context,f$0,a),
         _WJ_=caml_call1(include$13[2][2],_WI_),
         alarm=caml_call3(include$1[24],t[3],time,_WJ_),
         _WK_=t[7][18];
        if(_WK_){var f=_WK_[1];caml_call1(f,time)}
        return alarm}
      enqueue$0(t[7],execution_context,f$0,a);
      return caml_call1(include$1[6][2],0)}
    function run_at$0(t,time,f,a){run_at_internal(t,time,f,a);return 0}
    function run_after$0(t,span,f,a)
     {return run_at$0(t,span_to_time(t,span),f,a)}
    function fill$1(result){return fill(result,0)}
    function at$3(t,time)
     {if(caml_call2(_n_,time,caml_call1(include$1[12],t[3])))
       return caml_call1(_jc_,0);
      var result=caml_call1(create$12,0);
      run_at_internal(t,time,fill$1,result);
      return result}
    function after$1(t,span){return at$3(t,span_to_time(t,span))}
    function remove_alarm(t,alarm)
     {var
       job_or_event=caml_call2(include$1[6][5],t[3],alarm),
       match=caml_call1(Match[1],job_or_event),
       k=match[1],
       match$0=caml_call2(Match[2],k,job_or_event);
      if(0 === k)throw [0,Assert_failure,_j0_];
      free_job(t[7],match$0);
      return caml_call2(include$1[27],t[3],alarm)}
    function sexp_of_t$41(of_a,of_h,param)
     {if(0 === param[0])
       {var v0=param[1],v0$0=caml_call1(of_a,v0);
        return [1,[0,_j1_,[0,v0$0,0]]]}
      var v0$1=param[1],v0$2=caml_call1(of_h,v0$1);
      return [1,[0,_j2_,[0,v0$2,0]]]}
    var Fired=[0,sexp_of_t$41];
    function scheduled_at(r){return r[5]}
    function set_scheduled_at(r,v){r[5] = v;return 0}
    function num_fires_to_skip(r){return r[4]}
    function set_num_fires_to_skip(r,v){r[4] = v;return 0}
    function _j3_(r){return r[3]}
    function alarm$2(r){return r[1]}
    function set_alarm$1(r,v){r[1] = v;return 0}
    function _j4_(r,v){return [0,r[1],r[2],r[3],r[4],v,r[6]]}
    var
     _j5_=[0,set_scheduled_at],
     scheduled_at$0=
      [0,
       [0,function(param){return 0},cst_scheduled_at,_j5_,scheduled_at,_j4_]];
    function _j6_(r,v){return [0,r[1],r[2],r[3],v,r[5],r[6]]}
    var
     _j7_=[0,set_num_fires_to_skip],
     num_fires_to_skip$0=
      [0,
       [0,
        function(param){return 0},
        cst_num_fires_to_skip,
        _j7_,
        num_fires_to_skip,
        _j6_]];
    function _j8_(r,v){return [0,r[1],r[2],v,r[4],r[5],r[6]]}
    var
     _j9_=0,
     fired=[0,[0,function(param){return 0},cst_fired,_j9_,_j3_,_j8_]];
    function _j__(r,v){return [0,v,r[2],r[3],r[4],r[5],r[6]]}
    var
     _j$_=[0,set_alarm$1],
     alarm$3=[0,[0,function(param){return 0},cst_alarm$0,_j$_,alarm$2,_j__]];
    function sexp_of_t$42(of_a,of_h,param)
     {var
       v_alarm=param[1],
       v_fired=param[3],
       v_num_fires_to_skip=param[4],
       v_scheduled_at=param[5],
       v_time_source=param[6],
       arg=sexp_of_t$24(v_time_source),
       bnds=[0,[1,[0,_ka_,[0,arg,0]]],0],
       arg$0=caml_call1(_Q_,v_scheduled_at),
       bnds$0=[0,[1,[0,_kb_,[0,arg$0,0]]],bnds],
       arg$1=caml_call1(Core_kernel[455],v_num_fires_to_skip),
       bnds$1=[0,[1,[0,_kc_,[0,arg$1,0]]],bnds$0],
       arg$2=sexp_of_t$32(caml_call2(Fired[1],of_a,of_h),v_fired),
       bnds$2=[0,[1,[0,_kd_,[0,arg$2,0]]],bnds$1];
      function _WG_(_WH_){return 0}
      var
       arg$3=caml_call1(Sexplib0_Sexp_conv[24],_WG_),
       bnds$3=[0,[1,[0,_ke_,[0,arg$3,0]]],bnds$2],
       arg$4=caml_call2(include$1[6][1],include$13[2][6],v_alarm),
       bnds$4=[0,[1,[0,_kf_,[0,arg$4,0]]],bnds$3];
      return [1,bnds$4]}
    function sexp_of_t_unit(v)
     {return sexp_of_t$42(Core_kernel[598],Core_kernel[598],v)}
    function fired$0(t){return t[3]}
    function invariant$14(invariant_a,invariant_h,t)
     {function _Wx_(param)
       {var events=t[6][3];
        function check(f){return caml_call2(include$11[2],t,f)}
        var
         scheduled_at_fun=
          check
           (function(got)
             {var _WF_=caml_call2(include$1[26],events,t[1]);
              if(_WF_)
               {var expect=caml_call2(include$1[6][3],events,t[1]);
                return caml_call8
                        (Ppx_assert_lib_Runtime[3],pos$2,_Q_,_t_,0,0,0,expect,got)}
              return _WF_}),
         num_fires_to_skip_fun=
          check
           (function(num_fires_to_skip)
             {if(0 <= num_fires_to_skip)return 0;
              throw [0,Assert_failure,_kg_]}),
         fired_fun=
          check
           (function(fired)
             {var match=peek$0(fired);
              if(match)
               {var _WE_=match[1];
                if(0 === _WE_[0])
                 {var a=_WE_[1];return caml_call1(invariant_a,a)}
                var h=_WE_[1];
                return caml_call1(invariant_h,h)}
              return 0}),
         alarm_fun=
          check
           (function(alarm)
             {if(is_full(t[3]))
               {if(caml_call2(include$1[26],events,alarm))
                 throw [0,Assert_failure,_kh_];
                return 0}
              var _WC_=caml_call2(include$1[26],events,alarm);
              if(_WC_)
               {var _WD_=caml_call2(include$1[6][5],events,alarm);
                if(caml_call1(include$13[2][4],_WD_))return 0;
                throw [0,Assert_failure,_ki_]}
              return _WC_});
        caml_call1(alarm_fun,alarm$3);
        caml_call1(fired_fun,fired);
        caml_call1(num_fires_to_skip_fun,num_fires_to_skip$0);
        caml_call1(scheduled_at_fun,scheduled_at$0);
        return 0}
      function _Wy_(param){return _kj_}
      function _Wz_(param){return _kk_}
      function _WA_(_WB_){return sexp_of_t$42(_Wz_,_Wy_,_WB_)}
      return caml_call4(include$11[1],_kl_,t,_WA_,_Wx_)}
    function sexp_of_t$43(of_a,of_h,param)
     {switch(param[0])
       {case 0:
         var v0=param[1],v0$0=caml_call1(of_a,v0);
         return [1,[0,_km_,[0,v0$0,0]]];
        case 1:
         var v0$1=param[1],v0$2=caml_call1(of_h,v0$1);
         return [1,[0,_kn_,[0,v0$2,0]]];
        default:
         var v0$3=param[1],v0$4=caml_call1(_Q_,v0$3);
         return [1,[0,_ko_,[0,v0$4,0]]]}}
    var Status$1=[0,sexp_of_t$43];
    function status$2(t)
     {var match=peek$0(t[3]);
      if(match)
       {var _Ww_=match[1];
        if(0 === _Ww_[0]){var a=_Ww_[1];return [0,a]}
        var h=_Ww_[1];
        return [1,h]}
      return [2,t[5]]}
    function sexp_of_t$44(of_a,of_h,param)
     {if(typeof param === "number")
       return _kp_;
      else
       {if(0 === param[0])
         {var v0=param[1],v0$0=caml_call1(of_a,v0);
          return [1,[0,_kq_,[0,v0$0,0]]]}
        var v0$1=param[1],v0$2=caml_call1(of_h,v0$1);
        return [1,[0,_kr_,[0,v0$2,0]]]}}
    var Abort_result$0=[0,sexp_of_t$44];
    function abort$0(t,a)
     {if(_cn_)
       {var
         _Wq_=function(param){return _ks_},
         _Wr_=function(param){return _kt_};
        log
         (cst_Time_source_Event_abort,
          t,
          function(_Wv_){return sexp_of_t$42(_Wr_,_Wq_,_Wv_)})}
      var match=peek$0(t[3]);
      if(match)
       {var _Ws_=match[1];
        if(0 === _Ws_[0]){var a$0=_Ws_[1];return [0,a$0]}
        var h=_Ws_[1];
        return [1,h]}
      fill(t[3],[0,a]);
      var _Wt_=t[1],_Wu_=t[6];
      if(caml_call2(include$1[26],_Wu_[3],_Wt_))remove_alarm(_Wu_,_Wt_);
      return 0}
    function abort_exn$0(t,a)
     {var match=abort$0(t,a);
      if(typeof match === "number")
       return 0;
      else
       {if(0 === match[0])
         {var
           _Wo_=
            caml_call1
             (Sexplib0_Sexp_conv[7],
              cst_Clock_Event_abort_exn_failed_to_abort_event_that_previously_aborted);
          return caml_call1(Core_kernel[364],_Wo_)}
        var
         _Wp_=
          caml_call1
           (Sexplib0_Sexp_conv[7],
            cst_Clock_Event_abort_exn_failed_to_abort_event_that_previously_happened);
        return caml_call1(Core_kernel[364],_Wp_)}}
    function abort_if_possible$0(t,a){abort$0(t,a);return 0}
    function schedule$2(t){t[1] = run_at_internal(t[6],t[5],t[2],0);return 0}
    function sexp_of_t$45(of_a,of_h,param)
     {if(typeof param === "number")
       return _ku_;
      else
       {if(0 === param[0])
         {var v0=param[1],v0$0=caml_call1(of_a,v0);
          return [1,[0,_kv_,[0,v0$0,0]]]}
        var v0$1=param[1],v0$2=caml_call1(of_h,v0$1);
        return [1,[0,_kw_,[0,v0$2,0]]]}}
    var Reschedule_result=[0,sexp_of_t$45];
    function reschedule_at(t,at)
     {if(_cn_)
       log
        (cst_Time_source_Event_reschedule_at,
         [0,t,at],
         function(param)
          {var v1=param[2],v0=param[1];
           function _Wn_(param){return _kx_}
           var
            v0$0=sexp_of_t$42(function(param){return _ky_},_Wn_,v0),
            v1$0=caml_call1(_Q_,v1);
           return [1,[0,v0$0,[0,v1$0,0]]]});
      var match=peek$0(t[3]);
      if(match)
       {var _Wm_=match[1];
        if(0 === _Wm_[0]){var a=_Wm_[1];return [0,a]}
        var h=_Wm_[1];
        return [1,h]}
      var
       events=t[6][3],
       match$0=caml_call2(include$1[26],events,t[1]),
       am_trying_to_reschedule_in_the_future=
        caml_call2(_p_,at,caml_call1(include$1[12],events));
      t[5] = at;
      if(0 === am_trying_to_reschedule_in_the_future)
       {if(0 !== match$0)
         {caml_call1(t[6][5],t[1]);caml_call2(include$1[27],events,t[1])}}
      else
       if(0 === match$0)
        {t[4] = t[4] + 1 | 0;schedule$2(t)}
       else
        caml_call3(include$1[28],events,t[1],at);
      return 0}
    function reschedule_after(t,span)
     {return reschedule_at(t,span_to_time(t[6],span))}
    function run_at$1(time_source,scheduled_at,f,z)
     {if(_cn_)log(cst_Time_source_Event_run_at,scheduled_at,_Q_);
      var _Wf_=0,_Wg_=caml_call1(create$12,0);
      function _Wh_(_Wl_){return 0}
      var
       t=
        [0,
         caml_call1(include$1[6][2],0),
         _Wh_,
         _Wg_,
         _Wf_,
         scheduled_at,
         time_source];
      function fire(param)
       {var _Wi_=is_empty(t[3]);
        if(_Wi_)
         {if(0 < t[4]){t[4] = t[4] - 1 | 0;return 0}
          var result=caml_call1(f,z),_Wj_=is_empty(t[3]);
          if(_Wj_)return fill(t[3],[1,result]);
          var _Wk_=_Wj_}
        else
         var _Wk_=_Wi_;
        return _Wk_}
      t[2] = fire;
      schedule$2(t);
      return t}
    function at$4(time_source,time)
     {var _Wd_=0;
      return run_at$1(time_source,time,function(_We_){return 0},_Wd_)}
    function run_after$1(time_source,span,f,a)
     {return run_at$1(time_source,span_to_time(time_source,span),f,a)}
    function after$2(time_source,span)
     {return at$4(time_source,span_to_time(time_source,span))}
    function at_times(opt,t,next_time)
     {if(opt)var sth=opt[1],stop=sth;else var stop=never(0);
      var tail=create$15(0);
      function loop(param)
       {function _V$_(param)
         {return 936767357 <= param?(extend(tail,0),loop(0)):close_exn(tail)}
        var _Wa_=0;
        function _Wb_(param){return 936767357}
        var _Wc_=[0,[0,at$3(t,caml_call1(next_time,0)),_Wb_],_Wa_];
        return upon$1
                (choose([0,[0,stop,function(param){return 926227490}],_Wc_]),
                 _V$_)}
      loop(0);
      return tail[1]}
    function at_varying_intervals(stop,t,compute_span)
     {return at_times
              (stop,
               t,
               function(param)
                {var _V__=caml_call1(compute_span,0);
                 return after(now$0(t),_V__)})}
    function at_intervals$0(start,stop,t,interval)
     {if(start)var x=start[1],start$0=x;else var start$0=now$0(t);
      return at_times
              (stop,
               t,
               function(param)
                {return caml_call5(_L_,0,start$0,now$0(t),interval,0)})}
    var immediately=0;
    function run_repeatedly(opt,stop,_V6_,_V5_,t,f,continue$0)
     {if(opt)var sth=opt[1],start=sth;else var start=caml_call1(_jc_,0);
      if(_V6_)
       var sth$0=_V6_[1],continue_on_error=sth$0;
      else
       var continue_on_error=1;
      if(_V5_)
       var sth$1=_V5_[1],finished=sth$1;
      else
       var finished=caml_call1(create$12,0);
      return upon$1
              (start,
               function(param)
                {var alarm=[0,caml_call1(include$1[6][2],0)];
                 if(stop)
                  {var stop$0=stop[1];
                   upon$1
                    (stop$0,
                     function(param)
                      {var _V9_=caml_call2(include$1[26],t[3],alarm[1]);
                       return _V9_
                               ?(remove_alarm(t,alarm[1]),fill_if_empty(finished,0))
                               :_V9_});
                   var stop$1=stop$0}
                 else
                  var stop$1=never(0);
                 function continue_f(param)
                  {if(is_determined(stop$1))return fill_if_empty(finished,0);
                   var _V7_=0;
                   if(typeof continue$0 === "number")
                    var _V8_=caml_call1(include$1[12],t[3]);
                   else
                    if(0 === continue$0[0])
                     var span=continue$0[1],_V8_=span_to_time(t,span);
                    else
                     var
                      interval=continue$0[2],
                      base=continue$0[1],
                      _V8_=caml_call5(_L_,0,base,now$0(t),interval,0);
                   alarm[1] = run_at_internal(t,_V8_,run_f,_V7_);
                   return 0}
                 function run_f(param)
                  {if(is_determined(stop$1))return fill_if_empty(finished,0);
                   if(continue_on_error)
                    return upon$1
                            (try_with(0,0,0,0,_kA_,_kz_,f),continue_try_with);
                   var d=caml_call1(f,0);
                   return is_determined(d)?continue_f(0):upon$1(d,continue_f)}
                 function continue_try_with(or_error)
                  {if(0 !== or_error[0])
                    {var error=or_error[1];send_exn(current(0),0,error)}
                   return continue_f(0)}
                 return run_f(0)})}
    function every(start,stop,continue_on_error,finished,t,span,f)
     {if(caml_call2(include[44][14],span,include[44][63]))
       {var
         _V3_=[0,[1,[0,_kB_,[0,caml_call1(include[44][97],span),0]]],0],
         _V4_=
          [1,
           [0,
            caml_call1
             (Sexplib0_Sexp_conv[7],
              cst_Time_source_every_got_nonpositive_span),
            _V3_]];
        caml_call1(Core_kernel[364],_V4_)}
      return run_repeatedly
              (start,stop,continue_on_error,finished,t,f,[0,span])}
    function every$0(start,stop,continue_on_error,t,span,f)
     {return every
              (start,
               stop,
               continue_on_error,
               0,
               t,
               span,
               function(param){caml_call1(f,0);return caml_call1(_jc_,0)})}
    function run_at_intervals$0(start,stop,continue_on_error,t,interval,f)
     {var now=now$0(t);
      if(start)
       var
        start$0=start[1],
        base=start$0,
        start$1=[0,at$3(t,caml_call5(_L_,_kC_,start$0,now,interval,0))];
      else
       var base=now,start$1=0;
      return run_repeatedly
              (start$1,stop,continue_on_error,0,t,f,[1,base,interval])}
    function run_at_intervals$1(start,stop,continue_on_error,t,interval,f)
     {return run_at_intervals$0
              (start,
               stop,
               continue_on_error,
               t,
               interval,
               function(param){caml_call1(f,0);return caml_call1(_jc_,0)})}
    function with_timeout(t,span,d)
     {var timeout=after$2(t,span),_VY_=0;
      function _VZ_(param)
       {if(0 === param[0])
         {var
           _V2_=
            caml_call1
             (Sexplib0_Sexp_conv[7],
              cst_Time_source_with_timeout_bug_both_completed_and_timed_out);
          return caml_call1(Core_kernel[364],_V2_)}
        return 642269825}
      var _V0_=[0,[0,timeout[3],_VZ_],_VY_];
      return choose
              ([0,
                [0,
                 d,
                 function(v)
                  {var match=abort$0(timeout,0);
                   if(typeof match === "number")
                    var switch$0=0;
                   else
                    if(0 === match[0])
                     {var
                       _V1_=
                        caml_call1
                         (Sexplib0_Sexp_conv[7],
                          cst_Time_source_with_timeout_bug_should_only_abort_once);
                      caml_call1(Core_kernel[364],_V1_);
                      var switch$0=1}
                    else
                     var switch$0=0;
                   return [0,1025039613,v]}],
                _V0_])}
    function of_synchronous(t){return t}
    function to_synchronous(t){return t}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$94);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     include$25=
      [0,
       sexp_of_t$42,
       sexp_of_t_unit,
       invariant$14,
       scheduled_at,
       Status$1,
       status$2,
       run_at$1,
       run_after$1,
       Abort_result$0,
       abort$0,
       abort_exn$0,
       abort_if_possible$0,
       Fired,
       fired$0,
       Reschedule_result,
       reschedule_at,
       reschedule_after,
       at$4,
       after$2],
     Async_kernel_Time_source=
      [0,
       [0,sexp_of_t$38],
       Read_write$0,
       sexp_of_t$40,
       invariant$13,
       read_only$0,
       create$10,
       wall_clock,
       alarm_precision$0,
       next_alarm_fires_at,
       now$0,
       timing_wheel_now$1,
       advance$0,
       advance_by,
       fire_past_alarms$0,
       advance_by_alarms$0,
       [0,immediately],
       run_repeatedly,
       run_at$0,
       run_after$0,
       at$3,
       after$1,
       with_timeout,
       include$25,
       at_varying_intervals,
       at_intervals$0,
       every,
       every$0,
       run_at_intervals$0,
       run_at_intervals$1,
       of_synchronous,
       to_synchronous];
    caml_register_global
     (2666,Async_kernel_Time_source,"Async_kernel__Time_source");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_async_kernel$95);
    caml_call1(Expect_test_collector[4][1],cst_src_throttle_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$96,cst$38);
    var Deferred$3=0;
    function sexp_of_outcome(of_a,param)
     {if(typeof param === "number")return _kD_;
      if(17724 <= param[1])
       {var v0=param[2];return [1,[0,_kE_,[0,caml_call1(of_a,v0),0]]]}
      var v0$0=param[2];
      return [1,[0,_kF_,[0,caml_call1(Core_kernel[614],v0$0),0]]]}
    function abort$1(t){return fill(t[1],774323088)}
    function cleaned(r){return r[10]}
    function num_resources_not_cleaned(r){return r[9]}
    function set_num_resources_not_cleaned(r,v){r[9] = v;return 0}
    function cleans(r){return r[8]}
    function set_cleans(r,v){r[8] = v;return 0}
    function is_dead$0(r){return r[7]}
    function set_is_dead(r,v){r[7] = v;return 0}
    function capacity_available(r){return r[6]}
    function set_capacity_available(r,v){r[6] = v;return 0}
    function num_jobs_running(r){return r[5]}
    function set_num_jobs_running(r,v){r[5] = v;return 0}
    function jobs_waiting_to_start(r){return r[4]}
    function job_resources_not_in_use(r){return r[3]}
    function max_concurrent_jobs(r){return r[2]}
    function continue_on_error(r){return r[1]}
    function _kO_(r,v)
     {return [0,r[1],r[2],r[3],r[4],r[5],r[6],r[7],r[8],r[9],v]}
    var
     _kP_=0,
     cleaned$0=[0,[0,function(param){return 0},cst_cleaned,_kP_,cleaned,_kO_]];
    function _kQ_(r,v)
     {return [0,r[1],r[2],r[3],r[4],r[5],r[6],r[7],r[8],v,r[10]]}
    var
     _kR_=[0,set_num_resources_not_cleaned],
     num_resources_not_cleaned$0=
      [0,
       [0,
        function(param){return 0},
        cst_num_resources_not_cleaned,
        _kR_,
        num_resources_not_cleaned,
        _kQ_]];
    function _kS_(r,v)
     {return [0,r[1],r[2],r[3],r[4],r[5],r[6],r[7],v,r[9],r[10]]}
    var
     _kT_=[0,set_cleans],
     cleans$0=[0,[0,function(param){return 0},cst_cleans,_kT_,cleans,_kS_]];
    function _kU_(r,v)
     {return [0,r[1],r[2],r[3],r[4],r[5],r[6],v,r[8],r[9],r[10]]}
    var
     _kV_=[0,set_is_dead],
     is_dead$1=
      [0,[0,function(param){return 0},cst_is_dead,_kV_,is_dead$0,_kU_]];
    function _kW_(r,v)
     {return [0,r[1],r[2],r[3],r[4],r[5],v,r[7],r[8],r[9],r[10]]}
    var
     _kX_=[0,set_capacity_available],
     capacity_available$0=
      [0,
       [0,
        function(param){return 0},
        cst_capacity_available,
        _kX_,
        capacity_available,
        _kW_]];
    function _kY_(r,v)
     {return [0,r[1],r[2],r[3],r[4],v,r[6],r[7],r[8],r[9],r[10]]}
    var
     _kZ_=[0,set_num_jobs_running],
     num_jobs_running$0=
      [0,
       [0,
        function(param){return 0},
        cst_num_jobs_running,
        _kZ_,
        num_jobs_running,
        _kY_]];
    function _k0_(r,v)
     {return [0,r[1],r[2],r[3],v,r[5],r[6],r[7],r[8],r[9],r[10]]}
    var
     _k1_=0,
     jobs_waiting_to_start$0=
      [0,
       [0,
        function(param){return 0},
        cst_jobs_waiting_to_start,
        _k1_,
        jobs_waiting_to_start,
        _k0_]];
    function _k2_(r,v)
     {return [0,r[1],r[2],v,r[4],r[5],r[6],r[7],r[8],r[9],r[10]]}
    var
     _k3_=0,
     job_resources_not_in_use$0=
      [0,
       [0,
        function(param){return 0},
        cst_job_resources_not_in_use,
        _k3_,
        job_resources_not_in_use,
        _k2_]];
    function _k4_(r,v)
     {return [0,r[1],v,r[3],r[4],r[5],r[6],r[7],r[8],r[9],r[10]]}
    var
     _k5_=0,
     max_concurrent_jobs$0=
      [0,
       [0,
        function(param){return 0},
        cst_max_concurrent_jobs,
        _k5_,
        max_concurrent_jobs,
        _k4_]];
    function _k6_(r,v)
     {return [0,v,r[2],r[3],r[4],r[5],r[6],r[7],r[8],r[9],r[10]]}
    var
     _k7_=0,
     continue_on_error$0=
      [0,
       [0,
        function(param){return 0},
        cst_continue_on_error,
        _k7_,
        continue_on_error,
        _k6_]];
    function iter$13
     (continue_on_error_fun,
      max_concurrent_jobs_fun,
      job_resources_not_in_use_fun,
      jobs_waiting_to_start_fun,
      num_jobs_running_fun,
      capacity_available_fun,
      is_dead_fun,
      cleans_fun,
      num_resources_not_cleaned_fun,
      cleaned_fun)
     {caml_call1(continue_on_error_fun,continue_on_error$0);
      caml_call1(max_concurrent_jobs_fun,max_concurrent_jobs$0);
      caml_call1(job_resources_not_in_use_fun,job_resources_not_in_use$0);
      caml_call1(jobs_waiting_to_start_fun,jobs_waiting_to_start$0);
      caml_call1(num_jobs_running_fun,num_jobs_running$0);
      caml_call1(capacity_available_fun,capacity_available$0);
      caml_call1(is_dead_fun,is_dead$1);
      caml_call1(cleans_fun,cleans$0);
      caml_call1(num_resources_not_cleaned_fun,num_resources_not_cleaned$0);
      return caml_call1(cleaned_fun,cleaned$0)}
    function sexp_of_t$46(of_a,param)
     {var
       v_jobs_waiting_to_start=param[4],
       v_job_resources_not_in_use=param[3],
       v_max_concurrent_jobs=param[2],
       v_continue_on_error=param[1],
       v_num_jobs_running=param[5],
       v_capacity_available=param[6],
       v_is_dead=param[7],
       v_cleans=param[8],
       v_num_resources_not_cleaned=param[9],
       v_cleaned=param[10],
       arg=sexp_of_t$32(Core_kernel[598],v_cleaned),
       bnds=[0,[1,[0,_k8_,[0,arg,0]]],0],
       arg$0=caml_call1(Core_kernel[455],v_num_resources_not_cleaned),
       bnds$0=[0,[1,[0,_k9_,[0,arg$0,0]]],bnds];
      function _VR_(f)
       {function _VW_(_VX_){return 0}
        return caml_call1(Sexplib0_Sexp_conv[24],_VW_)}
      var
       arg$1=caml_call2(Core_kernel[513],_VR_,v_cleans),
       bnds$1=[0,[1,[0,_k__,[0,arg$1,0]]],bnds$0],
       arg$2=caml_call1(Core_kernel[410],v_is_dead),
       bnds$2=[0,[1,[0,_k$_,[0,arg$2,0]]],bnds$1],
       _VS_=Core_kernel[598];
      function _VT_(_VV_){return sexp_of_t$32(_VS_,_VV_)}
      var
       arg$3=caml_call2(Core_kernel[542],_VT_,v_capacity_available),
       bnds$3=[0,[1,[0,_la_,[0,arg$3,0]]],bnds$2],
       arg$4=caml_call1(Core_kernel[455],v_num_jobs_running),
       bnds$4=[0,[1,[0,_lb_,[0,arg$4,0]]],bnds$3];
      function _VU_(param)
       {var
         v_outcome=param[2],
         v_start=param[1],
         bnds=0,
         arg=
          sexp_of_t$33
           (function(param)
             {return -216426513 === param?_kG_:17724 <= param?_kH_:_kI_},
            v_outcome),
         bnds$0=[0,[1,[0,_kJ_,[0,arg,0]]],bnds],
         arg$0=
          sexp_of_t$32
           (function(param)
             {if(typeof param === "number")return _kK_;
              var v0=param[2];
              return [1,[0,_kL_,[0,caml_call1(of_a,v0),0]]]},
            v_start),
         bnds$1=[0,[1,[0,_kM_,[0,arg$0,0]]],bnds$0];
        return [1,bnds$1]}
      var
       arg$5=caml_call2(Core_kernel_Queue[11],_VU_,v_jobs_waiting_to_start),
       bnds$5=[0,[1,[0,_lc_,[0,arg$5,0]]],bnds$4],
       arg$6=caml_call2(Core_kernel_Stack[10],of_a,v_job_resources_not_in_use),
       bnds$6=[0,[1,[0,_ld_,[0,arg$6,0]]],bnds$5],
       arg$7=caml_call1(Core_kernel[455],v_max_concurrent_jobs),
       bnds$7=[0,[1,[0,_le_,[0,arg$7,0]]],bnds$6],
       arg$8=caml_call1(Core_kernel[410],v_continue_on_error),
       bnds$8=[0,[1,[0,_lf_,[0,arg$8,0]]],bnds$7];
      return [1,bnds$8]}
    function invariant$15(invariant_a,t)
     {try
       {var
         check=
          function(f,field)
           {return caml_call1(f,caml_call2(Base_Field[3],field,t))},
         _Vl_=
          function(cleaned)
           {var _VQ_=is_full(cleaned);
            if(_VQ_){if(0 === t[9])return 0;throw [0,Assert_failure,_lj_]}
            return _VQ_},
         _Vm_=function(_VP_){return check(_Vl_,_VP_)},
         _Vn_=
          function(num_resources_not_cleaned)
           {if(0 <= num_resources_not_cleaned)
             {if(num_resources_not_cleaned <= t[2])
               {var _VO_=num_resources_not_cleaned < t[2]?1:0;
                if(_VO_){if(t[7])return 0;throw [0,Assert_failure,_lk_]}
                return _VO_}
              throw [0,Assert_failure,_ll_]}
            throw [0,Assert_failure,_lm_]},
         _Vo_=function(_VN_){return check(_Vn_,_VN_)},
         _Vp_=function(_VM_){return 0},
         _Vq_=function(_VL_){return 0},
         _Vr_=
          function(param)
           {if(param)
             {var ivar=param[1];
              if(is_empty(ivar))return 0;
              throw [0,Assert_failure,_ln_]}
            return 0},
         _Vs_=function(_VK_){return check(_Vr_,_VK_)},
         _Vt_=
          function(num_jobs_running)
           {if(0 <= num_jobs_running)
             {if(num_jobs_running <= t[2])
               {var _VJ_=num_jobs_running < t[2]?1:0;
                if(_VJ_)
                 {if(caml_call1(Core_kernel_Queue[14],t[4]))return 0;
                  throw [0,Assert_failure,_lo_]}
                return _VJ_}
              throw [0,Assert_failure,_lp_]}
            throw [0,Assert_failure,_lq_]},
         _Vu_=function(_VI_){return check(_Vt_,_VI_)},
         _Vv_=
          function(jobs_waiting_to_start)
           {var _VH_=t[7];
            if(_VH_)
             {if(caml_call1(Core_kernel_Queue[14],jobs_waiting_to_start))
               return 0;
              throw [0,Assert_failure,_lr_]}
            return _VH_},
         _Vw_=function(_VG_){return check(_Vv_,_VG_)},
         _Vx_=
          function(job_resources_not_in_use)
           {caml_call2
             (Core_kernel_Stack[15],job_resources_not_in_use,invariant_a);
            var _VF_=t[7]?0:t[2] - t[5] | 0;
            if
             (caml_call1(Core_kernel_Stack[13],job_resources_not_in_use)
              ===
              _VF_)
             return 0;
            throw [0,Assert_failure,_ls_]},
         _Vy_=function(_VE_){return check(_Vx_,_VE_)},
         _Vz_=
          function(max_concurrent_jobs)
           {if(0 < max_concurrent_jobs)return 0;throw [0,Assert_failure,_lt_]},
         _VA_=function(_VD_){return check(_Vz_,_VD_)},
         _VB_=
          iter$13
           (function(_VC_){return 0},
            _VA_,
            _Vy_,
            _Vw_,
            _Vu_,
            _Vs_,
            _Vq_,
            _Vp_,
            _Vo_,
            _Vm_);
        return _VB_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        var
         _Vg_=0,
         _Vh_=0,
         _Vi_=
          [0,
           [1,[0,_lh_,[0,sexp_of_t$46(function(param){return _lg_},t),_Vh_]]],
           _Vg_],
         _Vj_=[0,[1,[0,_li_,[0,caml_call1(Core_kernel[614],exn),0]]],_Vi_],
         _Vk_=
          [1,
           [0,
            caml_call1(Sexplib0_Sexp_conv[7],cst_Throttle_invariant_failed),
            _Vj_]];
        return caml_call1(Core_kernel[364],_Vk_)}}
    function sexp_of_t$47(of_a,of_kind,v){return sexp_of_t$46(of_a,v)}
    function invariant$16(invariant_a,param,t)
     {return invariant$15(invariant_a,t)}
    var T2=[0,sexp_of_t$47,invariant$16];
    function num_jobs_waiting_to_start(t)
     {return caml_call1(Core_kernel_Queue[13],t[4])}
    function clean_resource(t,a)
     {function _Vd_(param)
       {t[9] = t[9] - 1 | 0;
        var _Vf_=0 === t[9]?1:0;
        return _Vf_?fill(t[10],0):_Vf_}
      function _Ve_(f){return caml_call1(f,a)}
      return caml_call2
              (_ja_,
               all_ignore(caml_call2(Core_kernel_List[84],t[8],_Ve_)),
               _Vd_)}
    function kill(t)
     {var _Vb_=1 - t[7];
      if(_Vb_)
       {t[7] = 1;
        caml_call2(Core_kernel_Queue[15],t[4],abort$1);
        caml_call1(Core_kernel_Queue[46],t[4]);
        var _Vc_=function(a){return clean_resource(t,a)};
        caml_call2(Core_kernel_Stack[15],t[3],_Vc_);
        return caml_call1(Core_kernel_Stack[37],t[3])}
      return _Vb_}
    function at_kill(t,f)
     {var
       _Va_=caml_call1(include$24[8],f),
       f$0=caml_call1(Core_kernel[368],_Va_);
      t[8] = [0,f$0,t[8]];
      return 0}
    function cleaned$1(t){return t[10]}
    function start_job(t)
     {if(t[7])throw [0,Assert_failure,_lu_];
      if(t[5] < t[2])
       {if(caml_call1(Core_kernel_Queue[14],t[4]))
         throw [0,Assert_failure,_lv_];
        var t$0=caml_call1(Core_kernel_Queue[43],t[4]);
        t[5] = t[5] + 1 | 0;
        var
         a=caml_call1(Core_kernel_Stack[34],t[3]),
         _U__=
          function(res)
           {t[5] = t[5] - 1 | 0;
            if(! (17724 <= res))if(1 - t[1])kill(t);
            if(t[7])return clean_resource(t,a);
            caml_call2(Core_kernel_Stack[32],t[3],a);
            if(caml_call1(Core_kernel_Queue[14],t[4]))
             {var _U$_=t[6];
              if(_U$_){var ivar=_U$_[1];fill(ivar,0);t[6] = 0;return 0}
              return 0}
            return start_job(t)};
        fill(t$0[1],[0,389604418,a]);
        var
         _U9_=
          function(x)
           {if(-216426513 === x)throw [0,Assert_failure,_kN_];return x};
        return caml_call2(_ja_,caml_call2(include$20[4][3],t$0[2],_U9_),_U__)}
      throw [0,Assert_failure,_lw_]}
    function create_with(continue_on_error,job_resources)
     {var
       max_concurrent_jobs=caml_call1(Core_kernel_List[17],job_resources),
       _U7_=caml_call1(create$12,0),
       _U8_=caml_call2(Core_kernel_Queue[60],0,0);
      return [0,
              continue_on_error,
              max_concurrent_jobs,
              caml_call1(Core_kernel_Stack[29],job_resources),
              _U8_,
              0,
              0,
              0,
              0,
              max_concurrent_jobs,
              _U7_]}
    function create$19(opt,a)
     {if(opt)
       var sth=opt[1],continue_on_error=sth;
      else
       var continue_on_error=0;
      return create_with(continue_on_error,[0,a,0])}
    var Sequencer=[0,sexp_of_t$46,create$19];
    function create$20(continue_on_error,max_concurrent_jobs)
     {if(max_concurrent_jobs <= 0)
       {var
         _U3_=
          [0,
           [1,[0,_lx_,[0,caml_call1(Core_kernel[455],max_concurrent_jobs),0]]],
           0],
         _U4_=
          [1,
           [0,
            caml_call1
             (Sexplib0_Sexp_conv[7],
              cst_Throttle_create_requires_positive_max_concurrent_jobs_but_got),
            _U3_]];
        caml_call1(Core_kernel[364],_U4_)}
      function _U5_(_U6_){return 0}
      return create_with
              (continue_on_error,
               caml_call2(Core_kernel_List[128],max_concurrent_jobs,_U5_))}
    function enqueue$2(t,f)
     {var start=caml_call1(create$12,0);
      function _UZ_(param)
       {if(typeof param === "number")return caml_call1(_jc_,-216426513);
        var a=param[2];
        function _U1_(param)
         {if(0 === param[0]){var a=param[1];return [0,17724,a]}
          var exn=param[1];
          return [0,-387916264,exn]}
        var
         _U2_=
          try_with(0,0,0,0,0,0,function(param){return caml_call1(f,a)});
        return caml_call2(include$20[4][3],_U2_,_U1_)}
      var result=caml_call2(include$20[4][2],start,_UZ_);
      function _U0_(param)
       {return typeof param === "number"
                ?-216426513
                :17724 <= param[1]?17724:-387916264}
      var
       outcome=caml_call2(include$20[4][3],result,_U0_),
       internal_job=[0,start,outcome];
      if(t[7])
       abort$1(internal_job);
      else
       {caml_call2(Core_kernel_Queue[40],t[4],internal_job);
        if(t[5] < t[2])start_job(t)}
      return result}
    function enqueue$3(t,f)
     {function _UW_(param)
       {if(typeof param === "number")
         {var _UY_=caml_call1(Sexplib0_Sexp_conv[7],cst_throttle_aborted_job);
          return caml_call1(Core_kernel[364],_UY_)}
        if(17724 <= param[1]){var a=param[2];return a}
        var exn=param[2];
        throw exn}
      var _UX_=enqueue$2(t,f);
      return caml_call2(include$20[4][3],_UX_,_UW_)}
    function monad_sequence_how(opt,f)
     {if(opt)var sth=opt[1],how=sth;else var how=-686623969;
      if(typeof how === "number")
       if(-676829465 <= how)var f$0=f,switch$0=1;else var switch$0=0;
      else
       var switch$0=0;
      if(! switch$0)
       {if(typeof how === "number")
         var max_concurrent_jobs=1;
        else
         var
          max_concurrent_jobs$0=how[2],
          max_concurrent_jobs=max_concurrent_jobs$0;
        var
         t=create$20(0,max_concurrent_jobs),
         f$0=
          function(a)
           {return enqueue$3(t,function(param){return caml_call1(f,a)})}}
      return caml_call1(Core_kernel[367],f$0)}
    function monad_sequence_how2(opt,f)
     {if(opt)var sth=opt[1],how=sth;else var how=-686623969;
      if(typeof how === "number")
       if(-676829465 <= how)var f$0=f,switch$0=1;else var switch$0=0;
      else
       var switch$0=0;
      if(! switch$0)
       {if(typeof how === "number")
         var max_concurrent_jobs=1;
        else
         var
          max_concurrent_jobs$0=how[2],
          max_concurrent_jobs=max_concurrent_jobs$0;
        var
         t=create$20(0,max_concurrent_jobs),
         f$0=
          function(a1,a2)
           {return enqueue$3(t,function(param){return caml_call2(f,a1,a2)})}}
      return caml_call1(Core_kernel[367],f$0)}
    function prior_jobs_done(t)
     {return create$13
              (function(all_dummy_jobs_running)
                {var dummy_jobs_running=[0,0],_UU_=t[2],_UT_=1;
                 if(! (_UU_ < 1))
                  {var for$0=_UT_;
                   for(;;)
                    {enqueue$3
                      (t,
                       function(param)
                        {dummy_jobs_running[1]++;
                         if(dummy_jobs_running[1] === t[2])
                          fill(all_dummy_jobs_running,0);
                         return all_dummy_jobs_running});
                     var _UV_=for$0 + 1 | 0;
                     if(_UU_ !== for$0){var for$0=_UV_;continue}
                     break}}
                 return 0})}
    function capacity_available$1(t)
     {if(t[5] < t[2])return caml_call1(_jc_,0);
      var _US_=t[6];
      if(_US_){var ivar=_US_[1];return ivar}
      return create$13(function(ivar){t[6] = [0,ivar];return 0})}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$97);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Async_kernel_Throttle=
      [0,
       Deferred$3,
       T2,
       sexp_of_t$46,
       invariant$15,
       create$20,
       create_with,
       sexp_of_outcome,
       enqueue$2,
       enqueue$3,
       monad_sequence_how,
       monad_sequence_how2,
       prior_jobs_done,
       max_concurrent_jobs,
       num_jobs_running,
       num_jobs_waiting_to_start,
       capacity_available$1,
       kill,
       is_dead$0,
       at_kill,
       cleaned$1,
       Sequencer];
    caml_register_global(2669,Async_kernel_Throttle,"Async_kernel__Throttle");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_async_kernel$98);
    caml_call1(Expect_test_collector[4][1],cst_src_deferred_array_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$99,cst$39);
    function foldi(t,init,f)
     {return create$13
              (function(result)
                {function loop(i,b)
                  {if(i === caml_call1(Core_kernel_Array[17],t))
                    return fill(result,b);
                   function _UR_(b){return loop(i + 1 | 0,b)}
                   return caml_call2
                           (_ja_,caml_call3(f,i,b,caml_check_bound(t,i)[i + 1]),_UR_)}
                 return loop(0,init)})}
    function fold$14(t,init,f)
     {return foldi(t,init,function(param,a,x){return caml_call2(f,a,x)})}
    function seqmapi(t,f)
     {function _UN_(bs)
       {var _UQ_=caml_call1(Core_kernel_List[47],bs);
        return caml_call1(Core_kernel_Array[47],_UQ_)}
      var
       _UO_=
        foldi
         (t,
          0,
          function(i,bs,a)
           {function _UP_(b){return [0,b,bs]}
            return caml_call2(_je_,caml_call2(f,i,a),_UP_)});
      return caml_call2(include$20[4][3],_UO_,_UN_)}
    function all$1(ds){return seqmapi(ds,function(param,x){return x})}
    function all_unit(ds)
     {return caml_call1(ignore_m,fold$14(ds,0,function(param,d){return d}))}
    function iteri(opt,t,f)
     {if(opt)var sth=opt[1],how=sth;else var how=-686623969;
      if(typeof how === "number")
       if(! (-676829465 <= how))
        return foldi(t,0,function(i,param,x){return caml_call2(f,i,x)});
      var
       _UL_=caml_call2(Async_kernel_Throttle[11],[0,how],f),
       _UM_=caml_call1(Core_kernel[368],_UL_);
      return all_unit(caml_call2(Core_kernel_Array[54],t,_UM_))}
    function mapi(opt,t,f)
     {if(opt)var sth=opt[1],how=sth;else var how=-686623969;
      if(typeof how === "number")if(! (-676829465 <= how))return seqmapi(t,f);
      var
       _UJ_=caml_call2(Async_kernel_Throttle[11],[0,how],f),
       _UK_=caml_call1(Core_kernel[368],_UJ_);
      return all$1(caml_call2(Core_kernel_Array[54],t,_UK_))}
    function filteri(how,t,f)
     {function _UF_(bools)
       {function _UH_(ac,x,b){return b?[0,x,ac]:ac}
        var _UI_=caml_call4(Core_kernel_Array[76],t,bools,0,_UH_);
        return caml_call1(Core_kernel_Array[83],_UI_)}
      var _UG_=mapi(how,t,f);
      return caml_call2(include$20[4][3],_UG_,_UF_)}
    function filter_mapi(how,t,f)
     {var _UE_=Core_kernel_Array[68];
      return caml_call2(_je_,mapi(how,t,f),_UE_)}
    function concat_mapi(how,t,f)
     {function _UB_(t)
       {var _UD_=caml_call1(Core_kernel_Array[29],t);
        return caml_call1(Core_kernel_Array[39],_UD_)}
      var _UC_=mapi(how,t,f);
      return caml_call2(include$20[4][3],_UC_,_UB_)}
    function find_mapi(t,f)
     {function aux(i)
       {if(i === caml_call1(Core_kernel_Array[17],t))
         return caml_call1(_jc_,0);
        function _Uz_(some){return some?caml_call1(_jc_,some):aux(i + 1 | 0)}
        var _UA_=caml_call2(f,i,caml_check_bound(t,i)[i + 1]);
        return caml_call2(include$20[4][2],_UA_,_Uz_)}
      return aux(0)}
    function findi(t,f)
     {return find_mapi
              (t,
               function(i,elt)
                {function _Ux_(b){return b?[0,[0,i,elt]]:0}
                 var _Uy_=caml_call2(f,i,elt);
                 return caml_call2(include$20[4][3],_Uy_,_Ux_)})}
    function find$0(t,f)
     {return find_mapi
              (t,
               function(param,elt)
                {function _Uv_(b){return b?[0,elt]:0}
                 var _Uw_=caml_call1(f,elt);
                 return caml_call2(include$20[4][3],_Uw_,_Uv_)})}
    function existsi(t,f)
     {function _Ur_(param){return param?1:0}
      var
       _Us_=
        find_mapi
         (t,
          function(i,elt)
           {function _Ut_(b){return b?_ly_:0}
            var _Uu_=caml_call2(f,i,elt);
            return caml_call2(include$20[4][3],_Uu_,_Ut_)});
      return caml_call2(include$20[4][3],_Us_,_Ur_)}
    function for_alli(t,f)
     {function _Un_(param){return param?0:1}
      var
       _Uo_=
        find_mapi
         (t,
          function(i,elt)
           {function _Up_(b){return b?0:_lz_}
            var _Uq_=caml_call2(f,i,elt);
            return caml_call2(include$20[4][3],_Uq_,_Up_)});
      return caml_call2(include$20[4][3],_Uo_,_Un_)}
    function iter$14(how,t,f)
     {return iteri(how,t,function(param,a){return caml_call1(f,a)})}
    function map$17(how,t,f)
     {return mapi(how,t,function(param,a){return caml_call1(f,a)})}
    function filter_map(how,t,f)
     {return filter_mapi(how,t,function(param,a){return caml_call1(f,a)})}
    function filter(how,t,f)
     {return filteri(how,t,function(param,a){return caml_call1(f,a)})}
    function concat_map(how,t,f)
     {return concat_mapi(how,t,function(param,a){return caml_call1(f,a)})}
    function find_map(t,f)
     {return find_mapi(t,function(param,a){return caml_call1(f,a)})}
    function exists$11(t,f)
     {return existsi(t,function(param,a){return caml_call1(f,a)})}
    function for_all$11(t,f)
     {return for_alli(t,function(param,a){return caml_call1(f,a)})}
    function init(how,n,f)
     {function _Ul_(_Um_){return _Um_}
      return map$17(how,caml_call2(Core_kernel_Array[36],n,_Ul_),f)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$100);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Async_kernel_Deferred_array=
      [0,
       foldi,
       fold$14,
       find$0,
       findi,
       find_map,
       find_mapi,
       exists$11,
       existsi,
       for_all$11,
       for_alli,
       all$1,
       all_unit,
       init,
       iter$14,
       iteri,
       map$17,
       mapi,
       filter,
       filteri,
       filter_map,
       filter_mapi,
       concat_map,
       concat_mapi];
    caml_register_global
     (2671,Async_kernel_Deferred_array,"Async_kernel__Deferred_array");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_async_kernel$101);
    caml_call1(Expect_test_collector[4][1],cst_src_deferred_list_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$102,cst$40);
    function foldi$0(t,init,f)
     {return create$13
              (function(result)
                {function loop(t,i,b)
                  {if(t)
                    {var
                      xs=t[2],
                      x=t[1],
                      _Uk_=function(b){return loop(xs,i + 1 | 0,b)};
                     return caml_call2(_ja_,caml_call3(f,i,b,x),_Uk_)}
                   return fill(result,b)}
                 return loop(t,0,init)})}
    function fold$15(t,init,f)
     {return foldi$0(t,init,function(param,a,x){return caml_call2(f,a,x)})}
    function seqmapi$0(t,f)
     {var _Uh_=Core_kernel_List[47];
      return caml_call2
              (_je_,
               foldi$0
                (t,
                 0,
                 function(i,bs,a)
                  {function _Ui_(b){return [0,b,bs]}
                   var _Uj_=caml_call2(f,i,a);
                   return caml_call2(include$20[4][3],_Uj_,_Ui_)}),
               _Uh_)}
    function all$2(ds){return seqmapi$0(ds,function(param,x){return x})}
    function all_unit$0(ds)
     {return caml_call1(ignore_m,fold$15(ds,0,function(param,d){return d}))}
    function iteri$0(opt,t,f)
     {if(opt)var sth=opt[1],how=sth;else var how=-686623969;
      if(typeof how === "number")
       if(! (-676829465 <= how))
        return foldi$0(t,0,function(i,param,x){return caml_call2(f,i,x)});
      var
       _Uf_=caml_call2(Async_kernel_Throttle[11],[0,how],f),
       _Ug_=caml_call1(Core_kernel[368],_Uf_);
      return all_unit$0(caml_call2(Core_kernel_List[103],t,_Ug_))}
    function mapi$0(opt,t,f)
     {if(opt)var sth=opt[1],how=sth;else var how=-686623969;
      if(typeof how === "number")
       if(! (-676829465 <= how))return seqmapi$0(t,f);
      var
       _Ud_=caml_call2(Async_kernel_Throttle[11],[0,how],f),
       _Ue_=caml_call1(Core_kernel[368],_Ud_);
      return all$2(caml_call2(Core_kernel_List[103],t,_Ue_))}
    function filteri$0(how,t,f)
     {function _T$_(bools)
       {function _Ub_(ac,x,b){return b?[0,x,ac]:ac}
        var _Uc_=caml_call4(Core_kernel_List[56],t,bools,0,_Ub_);
        return caml_call1(Core_kernel_List[47],_Uc_)}
      var _Ua_=mapi$0(how,t,f);
      return caml_call2(include$20[4][3],_Ua_,_T$_)}
    function filter_mapi$0(how,t,f)
     {var _T__=Core_kernel_List[133];
      return caml_call2(_je_,mapi$0(how,t,f),_T__)}
    function concat_mapi$0(how,t,f)
     {var _T9_=Core_kernel_List[140];
      return caml_call2(_je_,mapi$0(how,t,f),_T9_)}
    function find_mapi$0(t,f)
     {function find_mapi(t,f,i)
       {if(t)
         {var
           tl=t[2],
           hd=t[1],
           _T7_=
            function(some)
             {return some?caml_call1(_jc_,some):find_mapi(tl,f,i + 1 | 0)},
           _T8_=caml_call2(f,i,hd);
          return caml_call2(include$20[4][2],_T8_,_T7_)}
        return caml_call1(_jc_,0)}
      return find_mapi(t,f,0)}
    function findi$0(t,f)
     {return find_mapi$0
              (t,
               function(i,elt)
                {function _T5_(b){return b?[0,[0,i,elt]]:0}
                 var _T6_=caml_call2(f,i,elt);
                 return caml_call2(include$20[4][3],_T6_,_T5_)})}
    function find$1(t,f)
     {return find_mapi$0
              (t,
               function(param,elt)
                {function _T3_(b){return b?[0,elt]:0}
                 var _T4_=caml_call1(f,elt);
                 return caml_call2(include$20[4][3],_T4_,_T3_)})}
    function existsi$0(t,f)
     {function _TZ_(param){return param?1:0}
      var
       _T0_=
        find_mapi$0
         (t,
          function(i,elt)
           {function _T1_(b){return b?_lA_:0}
            var _T2_=caml_call2(f,i,elt);
            return caml_call2(include$20[4][3],_T2_,_T1_)});
      return caml_call2(include$20[4][3],_T0_,_TZ_)}
    function for_alli$0(t,f)
     {function _TV_(param){return param?0:1}
      var
       _TW_=
        find_mapi$0
         (t,
          function(i,elt)
           {function _TX_(b){return b?0:_lB_}
            var _TY_=caml_call2(f,i,elt);
            return caml_call2(include$20[4][3],_TY_,_TX_)});
      return caml_call2(include$20[4][3],_TW_,_TV_)}
    function iter$15(how,t,f)
     {return iteri$0(how,t,function(param,a){return caml_call1(f,a)})}
    function map$18(how,t,f)
     {return mapi$0(how,t,function(param,a){return caml_call1(f,a)})}
    function filter$0(how,t,f)
     {return filteri$0(how,t,function(param,a){return caml_call1(f,a)})}
    function filter_map$0(how,t,f)
     {return filter_mapi$0(how,t,function(param,a){return caml_call1(f,a)})}
    function concat_map$0(how,t,f)
     {return concat_mapi$0(how,t,function(param,a){return caml_call1(f,a)})}
    function find_map$0(t,f)
     {return find_mapi$0(t,function(param,a){return caml_call1(f,a)})}
    function exists$12(t,f)
     {return existsi$0(t,function(param,a){return caml_call1(f,a)})}
    function for_all$12(t,f)
     {return for_alli$0(t,function(param,a){return caml_call1(f,a)})}
    function init$0(how,n,f)
     {function _TT_(_TU_){return _TU_}
      return map$18(how,caml_call2(Core_kernel_List[128],n,_TT_),f)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$103);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Async_kernel_Deferred_list=
      [0,
       foldi$0,
       fold$15,
       find$1,
       findi$0,
       find_map$0,
       find_mapi$0,
       exists$12,
       existsi$0,
       for_all$12,
       for_alli$0,
       all$2,
       all_unit$0,
       init$0,
       iter$15,
       iteri$0,
       map$18,
       mapi$0,
       filter$0,
       filteri$0,
       filter_map$0,
       filter_mapi$0,
       concat_map$0,
       concat_mapi$0];
    caml_register_global
     (2672,Async_kernel_Deferred_list,"Async_kernel__Deferred_list");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_async_kernel$104);
    caml_call1(Expect_test_collector[4][1],cst_src_deferred_map_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$105,cst$41);
    var Deferred$4=0;
    function change(t,k,f)
     {function _TQ_(opt)
       {function _TS_(param){return opt}
        return caml_call3(Core_kernel_Map[28],t,k,_TS_)}
      var _TR_=caml_call1(f,caml_call2(Core_kernel_Map[30],t,k));
      return caml_call2(include$20[4][3],_TR_,_TQ_)}
    function update(t,k,f)
     {function _TO_(data){return caml_call3(Core_kernel_Map[24],t,k,data)}
      var _TP_=caml_call1(f,caml_call2(Core_kernel_Map[30],t,k));
      return caml_call2(include$20[4][3],_TP_,_TO_)}
    function iter_keys(how,t,f)
     {var _TN_=caml_call1(Core_kernel_Map[56],t);
      return caml_call3(Async_kernel_Deferred_list[14],how,_TN_,f)}
    function iter$16(how,t,f)
     {var _TM_=caml_call1(Core_kernel_Map[57],t);
      return caml_call3(Async_kernel_Deferred_list[14],how,_TM_,f)}
    function iteri$1(how,t,f)
     {function _TK_(param)
       {var data=param[2],key=param[1];return caml_call2(f,key,data)}
      var _TL_=caml_call2(Core_kernel_Map[58],0,t);
      return caml_call3(Async_kernel_Deferred_list[14],how,_TL_,_TK_)}
    function fold$16(t,init,f)
     {function _TI_(key,data,alist){return [0,[0,key,data],alist]}
      var
       alist_in_increasing_key_order=
        caml_call3(Core_kernel_Map[42],t,0,_TI_);
      function _TJ_(ac,param)
       {var data=param[2],key=param[1];return caml_call3(f,key,data,ac)}
      return caml_call3
              (Async_kernel_Deferred_list[2],
               alist_in_increasing_key_order,
               init,
               _TJ_)}
    function fold_right(t,init,f)
     {function _TG_(key,data,alist){return [0,[0,key,data],alist]}
      var
       alist_in_decreasing_key_order=
        caml_call3(Core_kernel_Map[41],t,0,_TG_);
      function _TH_(ac,param)
       {var data=param[2],key=param[1];return caml_call3(f,key,data,ac)}
      return caml_call3
              (Async_kernel_Deferred_list[2],
               alist_in_decreasing_key_order,
               init,
               _TH_)}
    function result(r){return r[3]}
    function filter_mapi$1(how,t,f)
     {var jobs=[0,0];
      function _TA_(key,data)
       {var job=[0,key,data,0];jobs[1] = [0,job,jobs[1]];return job}
      var job_map=caml_call2(Core_kernel_Map[40],t,_TA_);
      function _TB_(param)
       {return caml_call2(Core_kernel_Map[47],job_map,result)}
      function _TC_(job)
       {var data=job[2],key=job[1];
        function _TE_(x){job[3] = x;return 0}
        var _TF_=caml_call2(f,key,data);
        return caml_call2(include$20[4][3],_TF_,_TE_)}
      var _TD_=caml_call3(Async_kernel_Deferred_list[14],how,jobs[1],_TC_);
      return caml_call2(include$20[4][3],_TD_,_TB_)}
    function filter_map$1(how,t,f)
     {return filter_mapi$1
              (how,t,function(param,data){return caml_call1(f,data)})}
    function filter_keys(how,t,f)
     {return filter_mapi$1
              (how,
               t,
               function(key,data)
                {function _Ty_(b){return b?[0,data]:0}
                 var _Tz_=caml_call1(f,key);
                 return caml_call2(include$20[4][3],_Tz_,_Ty_)})}
    function filter$1(how,t,f)
     {return filter_mapi$1
              (how,
               t,
               function(param,data)
                {function _Tw_(b){return b?[0,data]:0}
                 var _Tx_=caml_call1(f,data);
                 return caml_call2(include$20[4][3],_Tx_,_Tw_)})}
    function filteri$1(how,t,f)
     {return filter_mapi$1
              (how,
               t,
               function(key,data)
                {function _Tu_(b){return b?[0,data]:0}
                 var _Tv_=caml_call2(f,key,data);
                 return caml_call2(include$20[4][3],_Tv_,_Tu_)})}
    function mapi$1(how,t,f)
     {return filter_mapi$1
              (how,
               t,
               function(key,data)
                {function _Ts_(z){return [0,z]}
                 var _Tt_=caml_call2(f,key,data);
                 return caml_call2(include$20[4][3],_Tt_,_Ts_)})}
    function map$19(how,t,f)
     {return mapi$1(how,t,function(param,data){return caml_call1(f,data)})}
    function merge(how,t1,t2,f)
     {function _Tq_(thunk){return caml_call1(thunk,0)}
      function _Tr_(key,z)
       {return [0,function(param){return caml_call2(f,key,z)}]}
      return filter_map$1(how,caml_call3(Core_kernel_Map[60],t1,t2,_Tr_),_Tq_)}
    function all$3(t){return map$19(0,t,function(_Tp_){return _Tp_})}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$106);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Async_kernel_Deferred_map=
      [0,
       Deferred$4,
       change,
       update,
       iter_keys,
       iter$16,
       iteri$1,
       map$19,
       mapi$1,
       fold$16,
       fold_right,
       filter_keys,
       filter$1,
       filteri$1,
       filter_map$1,
       filter_mapi$1,
       merge,
       all$3];
    caml_register_global
     (2674,Async_kernel_Deferred_map,"Async_kernel__Deferred_map");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_async_kernel$107);
    caml_call1(Expect_test_collector[4][1],cst_src_scheduler_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$108,cst$42);
    var
     _lC_=include$24[1],
     _lD_=include$24[2],
     _lE_=include$24[3],
     _lF_=include$24[4],
     _lG_=include$24[5],
     _lH_=include$24[6],
     _lI_=include$24[7],
     _lJ_=include$24[8],
     Deferred$5=0;
    function find_local$0(key)
     {return find_local(current_execution_context$1(t$5(0)),key)}
    function with_local$0(key,value,f)
     {var
       t=t$5(0),
       execution_context=with_local(current_execution_context$1(t),key,value);
      return with_execution_context(t,execution_context,f)}
    var main_execution_context$1=t$5(0)[6];
    function can_run_a_job$0(t)
     {var _To_=0 < num_pending_jobs(t)?1:0;
      return _To_?_To_:has_any_waiters$0(t[19])}
    function has_upcoming_event(t)
     {var _Tn_=events(t);return 1 - caml_call1(include$1[14],_Tn_)}
    function next_upcoming_event(t)
     {var _Tm_=events(t);return caml_call1(include$1[35],_Tm_)}
    function next_upcoming_event_exn(t)
     {var _Tl_=events(t);return caml_call1(include$1[36],_Tl_)}
    function event_precision(t)
     {var _Tk_=events(t);return caml_call1(include$1[11],_Tk_)}
    function cycle_start$1(t){return t[10]}
    function run_every_cycle_start$1(t,f){t[11] = [0,f,t[11]];return 0}
    function map_cycle_times(t,f)
     {return create$18
              (function(tail)
                {return run_every_cycle_start$1
                         (t,function(param){return extend(tail,caml_call1(f,t[12]))})})}
    function long_cycles(t,at_least)
     {return create$18
              (function(tail)
                {return run_every_cycle_start$1
                         (t,
                          function(param)
                           {var _Tj_=caml_call2(include[44][13],t[12],at_least);
                            return _Tj_?extend(tail,t[12]):_Tj_})})}
    function cycle_num_jobs(t)
     {return create$18
              (function(tail)
                {return run_every_cycle_start$1
                         (t,function(param){return extend(tail,t[13])})})}
    function cycle_count$1(t){return t[9]}
    function set_max_num_jobs_per_priority_per_cycle$0(t,int$0)
     {t[22] = caml_call1(Max_num_jobs_per_priority_per_cycle[4],int$0);
      return 0}
    function max_num_jobs_per_priority_per_cycle$4(t)
     {return caml_call1(Max_num_jobs_per_priority_per_cycle[5],t[22])}
    function set_thread_safe_external_job_hook$0(t,f){t[16] = f;return 0}
    function thread_safe_enqueue_external_job(t,execution_context,f,a)
     {caml_call2
       (Core_kernel_Thread_safe_queue[5],t[15],[0,execution_context,f,a]);
      return caml_call1(t[16],0)}
    function set_event_added_hook$0(t,f){t[18] = [0,f];return 0}
    function set_job_queued_hook$0(t,f){t[17] = [0,f];return 0}
    function create_alarm(t,f)
     {var execution_context=current_execution_context$1(t);
      function _Ti_(param)
       {return thread_safe_enqueue_external_job(t,execution_context,f,0)}
      return caml_call1(include$26[9][6][2],_Ti_)}
    function add_finalizer(t,heap_block,f)
     {var execution_context=current_execution_context$1(t);
      function finalizer(heap_block)
       {if(_cq_)log_string(cst_enqueueing_finalizer);
        return thread_safe_enqueue_external_job
                (t,execution_context,f,heap_block)}
      if(_cq_)log_string(cst_adding_finalizer);
      try
       {var _Tg_=caml_call2(Stdlib_gc[3],finalizer,heap_block);return _Tg_}
      catch(_Th_)
       {_Th_ = caml_wrap_exception(_Th_);
        if(_Th_[1] === Invalid_argument)return 0;
        throw _Th_}}
    function add_finalizer_exn(t,x,f)
     {function _Tf_(heap_block)
       {return caml_call1(f,caml_call1(Base_Heap_block[4],heap_block))}
      return add_finalizer(t,caml_call1(Base_Heap_block[3],x),_Tf_)}
    function add_finalizer_last(t,heap_block,f)
     {var execution_context=current_execution_context$1(t);
      function finalizer(param)
       {if(_cq_)log_string(cst_enqueueing_finalizer_using_last_semantic);
        return thread_safe_enqueue_external_job(t,execution_context,f,0)}
      if(_cq_)log_string(cst_adding_finalizer_using_last_semantic);
      try
       {var _Td_=caml_call2(Stdlib_gc[4],finalizer,heap_block);return _Td_}
      catch(_Te_)
       {_Te_ = caml_wrap_exception(_Te_);
        if(_Te_[1] === Invalid_argument)return 0;
        throw _Te_}}
    function add_finalizer_last_exn(t,x,f)
     {return add_finalizer_last(t,caml_call1(Base_Heap_block[3],x),f)}
    function force_current_cycle_to_end(t)
     {return set_jobs_left_this_cycle$0(t[3],0)}
    var send_exn$1=[0,send_exn];
    function advance_clock$0(t,now){return advance(t[14],now,send_exn$1)}
    function run_cycle(t)
     {if(_cw_)log(cst_run_cycle_starting,t,sexp_of_t$30);
      caml_call1(t[24],0);
      var now=caml_call1(_A_,0);
      t[9] = t[9] + 1 | 0;
      t[10] = now;
      broadcast(t[19],0);
      var num_jobs_run_at_start_of_cycle=num_jobs_run$1(t);
      function _S8_(f){return caml_call1(f,0)}
      caml_call2(Core_kernel_List[19],t[11],_S8_);
      advance_clock$0(t,now);
      start_cycle(t,t[22]);
      for(;;)
       {var match=run_jobs$0(t);
        if(0 === match[0])
         {var _S9_=t[10];
          t[12] = caml_call2(_D_,caml_call1(_A_,0),_S9_);
          t[13] = num_jobs_run$1(t) - num_jobs_run_at_start_of_cycle | 0;
          var
           _S__=has_any_waiters$0(t[20]),
           _S$_=_S__?0 === (t[3][6] + t[4][6] | 0)?1:0:_S__;
          if(_S$_)broadcast(t[20],0);
          caml_call1(t[25],0);
          if(_cw_)
           {var
             _Ta_=
              function(param)
               {var
                 v1=param[2],
                 v0=param[1],
                 v0$0=caml_call2(Core_kernel[542],Core_kernel_Error[5],v0),
                 v1$0=caml_call1(Core_kernel[410],v1);
                return [1,[0,v0$0,[0,v1$0,0]]]},
             _Tb_=next_upcoming_event(t),
             _Tc_=caml_call1(Core_kernel[356],_Tb_);
            return log(cst_run_cycle_finished,[0,uncaught_exn$0(t),_Tc_],_Ta_)}
          return _cw_}
        var match$0=match[1],backtrace=match$0[2],exn=match$0[1];
        send_exn(current(0),[0,[0,936718974,backtrace]],exn);
        continue}}
    function stabilize$0(param)
     {if(_cw_)log_string(cst_run_cycles_until_no_jobs_remain_starting);
      var t=t$5(0);
      if(is_dead(t))
       {var
         _S4_=[0,[1,[0,_lK_,[0,sexp_of_t$30(t),0]]],0],
         _S5_=
          [1,
           [0,
            caml_call1
             (Sexplib0_Sexp_conv[7],
              cst_run_cycles_until_no_jobs_remain_cannot_proceed_scheduler_is_dead),
            _S4_]];
        caml_call1(Core_kernel[364],_S5_)}
      for(;;)
       {run_cycle(t);
        advance_clock$0(t,caml_call1(_A_,0));
        if(can_run_a_job$0(t))continue;
        set_execution_context(t,t[6]);
        if(_cw_)log_string(cst_run_cycles_until_no_jobs_remain_finished);
        var _S6_=Core_kernel_Error[23],_S7_=uncaught_exn$0(t);
        return caml_call2(Core_kernel_Option[18],_S7_,_S6_)}}
    function make_async_unusable(param)
     {var t=_g3_[1];
      t[1]
      =
      [0,
       function(param)
        {var
          _S3_=
           caml_call1
            (Sexplib0_Sexp_conv[7],
             cst_Async_scheduler_is_unusable_due_to_make_async_unusable);
         return caml_call1(Core_kernel[364],_S3_)}];
      return 0}
    function reset_in_forked_process(param)
     {if(_cw_)log_string(cst_reset_in_forked_process);
      _g3_[1] = create$9(0);
      return 0}
    function check_invariants$4(t){return t[21]}
    function set_check_invariants$0(t,b){t[21] = b;return 0}
    function set_record_backtraces$0(t,b){t[23] = b;return 0}
    function set_on_start_of_cycle$0(t,f){t[24] = f;return 0}
    function set_on_end_of_cycle$0(t,f){t[25] = f;return 0}
    function yield$3(t){return wait(t[19])}
    function yield_until_no_jobs_remain$1(t){return wait(t[20])}
    function yield_every(n)
     {if(0 < n)
       {if(1 === n)
         {var _SZ_=function(t){return yield$3(t)};
          return caml_call1(Core_kernel[367],_SZ_)}
        var
         count_until_yield=[0,n],
         _S0_=
          function(t)
           {count_until_yield[1] += -1;
            return 0 < count_until_yield[1]
                    ?caml_call1(_jc_,0)
                    :(count_until_yield[1] = n,yield$3(t))};
        return caml_call1(Core_kernel[367],_S0_)}
      var
       _S1_=[0,[1,[0,_lL_,[0,caml_call1(Core_kernel[455],n),0]]],0],
       _S2_=
        [1,
         [0,
          caml_call1
           (Sexplib0_Sexp_conv[7],
            cst_Scheduler_yield_every_got_nonpositive_count),
          _S1_]];
      return caml_call1(Core_kernel[364],_S2_)}
    function yield_then_run(t)
     {var _SX_=1 - caml_call1(Core_kernel_Deque[15],t[5]);
      if(_SX_)
       {var _SY_=function(param){return run(t)};
        return upon$1(yield$3(t),_SY_)}
      return _SX_}
    function run_workers$0(counter,t,num_execs_before_yielding)
     {if(0 === num_execs_before_yielding)return yield_then_run(t);
      var _SW_=1 - caml_call1(Core_kernel_Deque[15],t[5]);
      if(_SW_)
       {var worker=caml_call1(Core_kernel_Deque[59],t[5]);
        set_execution_context(t,worker[1]);
        if(counter < 50)
         {var counter$0=counter + 1 | 0;
          return run_worker(counter$0,t,worker,num_execs_before_yielding)}
        return caml_trampoline_return
                (run_worker,[0,t,worker,num_execs_before_yielding])}
      return _SW_}
    function run_worker(counter,t,worker,num_execs_before_yielding)
     {var num_execs_before_yielding$0=num_execs_before_yielding;
      for(;;)
       {if(caml_call2(Core_kernel[359],t[7],worker[1]))
         {if(0 === num_execs_before_yielding$0)
           {caml_call2(Core_kernel_Deque[50],t[5],worker);
            return yield_then_run(t)}
          var num_execs_before_yielding$1=num_execs_before_yielding$0 - 1 | 0;
          try
           {var val=caml_call1(worker[2],0)}
          catch(exn)
           {exn = caml_wrap_exception(exn);
            var bt=caml_call1(Base_Backtrace[6][4],0);
            send_exn(current(0),[0,[0,936718974,bt]],exn);
            if(counter < 50)
             {var counter$0=counter + 1 | 0;
              return run_workers$0(counter$0,t,num_execs_before_yielding$1)}
            return caml_trampoline_return
                    (run_workers$0,[0,t,num_execs_before_yielding$1])}
          if(0 === val)
           {if(counter < 50)
             {var counter$1=counter + 1 | 0;
              return run_workers$0(counter$1,t,num_execs_before_yielding$1)}
            return caml_trampoline_return
                    (run_workers$0,[0,t,num_execs_before_yielding$1])}
          var num_execs_before_yielding$0=num_execs_before_yielding$1;
          continue}
        throw [0,Assert_failure,_lM_]}}
    function run_workers(t,num_execs_before_yielding)
     {return caml_trampoline(run_workers$0(0,t,num_execs_before_yielding))}
    function run(t){return run_workers(t,1e3)}
    function enqueue$4(f)
     {var
       t=t$5(0),
       queue=t[5],
       running=1 - caml_call1(Core_kernel_Deque[15],queue),
       execution_context=create_like(0,_lN_,0,current_execution_context$1(t));
      caml_call2(Core_kernel_Deque[51],queue,[0,execution_context,f]);
      var _SV_=1 - running;
      return _SV_?enqueue$0(t,execution_context,run,t):_SV_}
    function _lO_(param)
     {function _SP_(param)
       {var
         d=
          caml_call1
           (_jG_,
            catch_stream
             (0,
              0,
              0,
              function(param)
               {var
                 _SU_=
                  caml_call1
                   (Sexplib0_Sexp_conv[7],cst_src_scheduler_ml_316_77);
                return caml_call1(Core_kernel[364],_SU_)}));
        stabilize$0(0);
        var _ST_=peek$0(d);
        if(caml_call1(Core_kernel[356],_ST_))return 0;
        throw [0,Assert_failure,_lP_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_run_cycles_until_no_jobs_remain_assert_i,
        0,
        cst_src_scheduler_ml$0,
        315,
        4,
        195,
        _SP_);
      function _SQ_(param)
       {var
         d=
          catch$0
           (0,
            0,
            0,
            function(param)
             {var
               _SS_=
                caml_call1(Sexplib0_Sexp_conv[7],cst_src_scheduler_ml_323_57);
              return caml_call1(Core_kernel[364],_SS_)});
        stabilize$0(0);
        var _SR_=peek$0(d);
        if(caml_call1(Core_kernel[356],_SR_))return 0;
        throw [0,Assert_failure,_lQ_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_run_cycles_until_no_jobs_remain_assert_i$0,
        0,
        cst_src_scheduler_ml$1,
        322,
        4,
        174,
        _SQ_);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst$43,
      0,
      cst_src_scheduler_ml$2,
      311,
      0,
      491,
      _lO_);
    var For_bench=[0,advance_clock$0];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$109);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     _lR_=[0,Very_low_priority_worker$0[1],enqueue$4],
     Async_kernel_Scheduler=
      [0,
       Deferred$5,
       sexp_of_t$30,
       t$5,
       invariant$7,
       current_execution_context$1,
       with_execution_context,
       set_execution_context,
       enqueue$0,
       create_job,
       enqueue_job,
       free_job,
       main_execution_context$1,
       cycle_start$1,
       run_cycle,
       stabilize$0,
       has_upcoming_event,
       next_upcoming_event,
       next_upcoming_event_exn,
       event_precision,
       uncaught_exn$0,
       uncaught_exn_unwrapped,
       num_pending_jobs,
       num_jobs_run$1,
       map_cycle_times,
       cycle_num_jobs,
       cycle_count$1,
       max_num_jobs_per_priority_per_cycle$4,
       set_max_num_jobs_per_priority_per_cycle$0,
       set_check_access$0,
       check_access$1,
       check_invariants$4,
       set_check_invariants$0,
       set_record_backtraces$0,
       long_cycles,
       can_run_a_job$0,
       create_alarm,
       add_finalizer,
       add_finalizer_exn,
       add_finalizer_last,
       add_finalizer_last_exn,
       set_thread_safe_external_job_hook$0,
       set_job_queued_hook$0,
       set_event_added_hook$0,
       set_on_start_of_cycle$0,
       set_on_end_of_cycle$0,
       thread_safe_enqueue_external_job,
       force_current_cycle_to_end,
       _lC_,
       _lD_,
       _lE_,
       _lF_,
       _lG_,
       _lI_,
       _lJ_,
       _lH_,
       find_local$0,
       with_local$0,
       make_async_unusable,
       reset_in_forked_process,
       yield$3,
       yield_every,
       yield_until_no_jobs_remain$1,
       _lR_,
       For_bench];
    caml_register_global
     (2679,Async_kernel_Scheduler,"Async_kernel__Scheduler");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_async_kernel$110);
    caml_call1(Expect_test_collector[4][1],cst_src_deferred_memo_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$111,cst$44);
    var Deferred$6=0;
    function reraise(param)
     {if(0 === param[0]){var x=param[1];return x}
      var exn=param[1];
      return caml_call2
              (Base_Exn[7],exn,cst_caught_exception_in_memoized_function)}
    function general(hashable,f)
     {function _SO_(a)
       {return try_with
                (0,0,0,0,_lS_,0,function(param){return caml_call1(f,a)})}
      var f$0=caml_call3(Core_kernel_Memo[1],[0,hashable[4]],0,_SO_);
      return function(a){return caml_call2(_je_,caml_call1(f$0,a),reraise)}}
    function unit$0(f)
     {function _SN_(param){return try_with(0,0,0,0,_lT_,0,f)}
      var f$0=caml_call1(Core_kernel_Memo[2],_SN_);
      return function(param)
       {return caml_call2(_je_,caml_call1(f$0,0),reraise)}}
    function _lU_(param)
     {function test(memo,should_raise)
       {var
         num_calls_to_f=[0,0],
         f=
          caml_call1
           (memo,
            function(param)
             {num_calls_to_f[1]++;
              function _SK_(param)
               {if(should_raise)
                 {var _SM_=caml_call1(Sexplib0_Sexp_conv[7],cst_boom);
                  return caml_call1(Core_kernel[364],_SM_)}
                return caml_call1(_jc_,7)}
              var _SL_=caml_call1(_jc_,0);
              return caml_call2(include$20[4][2],_SL_,_SK_)}),
         a=try_with(0,0,0,0,0,0,function(param){return caml_call1(f,0)}),
         b=try_with(0,0,0,0,0,0,function(param){return caml_call1(f,0)});
        stabilize$0(0);
        var sexpifier=Core_kernel[455],comparator=Core_kernel[451];
        caml_call8
         (Ppx_assert_lib_Runtime[3],
          pos$3,
          sexpifier,
          comparator,
          0,
          0,
          0,
          1,
          num_calls_to_f[1]);
        var
         is_correct=
          should_raise
           ?function(param){if(param)if(0 !== param[1][0])return 1;return 0}
           :function(param)
             {if(param)
               {var _SJ_=param[1];if(0 === _SJ_[0])if(7 === _SJ_[1])return 1}
              return 0},
         t=peek$0(a),
         _SH_=
          caml_call2(Core_kernel_Result[10],Core_kernel[455],Core_kernel[614]),
         sexpifier$0=caml_call1(Core_kernel[542],_SH_);
        caml_call6
         (Ppx_assert_lib_Runtime[1],pos$4,sexpifier$0,0,0,is_correct,t);
        var
         t$0=peek$0(b),
         _SI_=
          caml_call2(Core_kernel_Result[10],Core_kernel[455],Core_kernel[614]),
         sexpifier$1=caml_call1(Core_kernel[542],_SI_);
        return caml_call6
                (Ppx_assert_lib_Runtime[1],
                 pos$5,
                 sexpifier$1,
                 0,
                 0,
                 is_correct,
                 t$0)}
      var
       _Sz_=Core_kernel_Unit[44],
       _SA_=Core_kernel_Unit[43],
       _SB_=
        [0,
         Core_kernel_Unit[25],
         Core_kernel_Unit[40],
         Core_kernel_Unit[41],
         Core_kernel_Unit[42],
         [0,
          _SA_[1],
          _SA_[2],
          _SA_[3],
          _SA_[4],
          _SA_[5],
          _SA_[6],
          _SA_[7],
          _SA_[8],
          _SA_[9],
          _SA_[10],
          _SA_[11],
          _SA_[12],
          _SA_[13],
          _SA_[14],
          _SA_[15],
          _SA_[16],
          _SA_[17],
          _SA_[18],
          _SA_[19],
          _SA_[20],
          _SA_[21],
          _SA_[22],
          _SA_[23],
          _SA_[24],
          _SA_[25],
          _SA_[26],
          _SA_[27],
          _SA_[28],
          _SA_[29],
          _SA_[30],
          _SA_[31],
          _SA_[32],
          _SA_[33],
          _SA_[34],
          _SA_[35],
          _SA_[36],
          _SA_[37],
          _SA_[38],
          _SA_[39],
          _SA_[40],
          _SA_[41],
          _SA_[42],
          _SA_[43],
          _SA_[44],
          _SA_[45],
          _SA_[46],
          _SA_[47],
          _SA_[48],
          _SA_[49],
          _SA_[50],
          _SA_[51],
          _SA_[52],
          _SA_[53],
          _SA_[54],
          _SA_[55],
          _SA_[56],
          _SA_[57],
          _SA_[58],
          _SA_[59],
          _SA_[60],
          _SA_[61],
          _SA_[62],
          _SA_[63],
          _SA_[64],
          _SA_[65],
          _SA_[66],
          _SA_[67],
          _SA_[68],
          _SA_[69],
          _SA_[70],
          _SA_[71],
          _SA_[72],
          _SA_[73],
          _SA_[74],
          _SA_[75],
          _SA_[76],
          _SA_[77]],
         [0,_Sz_[1],_Sz_[2],_Sz_[3],_Sz_[4],_Sz_[5],_Sz_[6]],
         Core_kernel_Unit[45]];
      function general$0(_SG_){return general(_SB_,_SG_)}
      function _SC_(param){return test(general$0,0)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_general_should_raise_false,
        0,
        cst_src_deferred_memo_ml$0,
        52,
        4,
        54,
        _SC_);
      function _SD_(param){return test(unit$0,0)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_unit_should_raise_false,
        0,
        cst_src_deferred_memo_ml$1,
        53,
        4,
        54,
        _SD_);
      function _SE_(param){return test(general$0,1)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_general_should_raise_true,
        0,
        cst_src_deferred_memo_ml$2,
        54,
        4,
        53,
        _SE_);
      function _SF_(param){return test(unit$0,1)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_unit_should_raise_true,
        0,
        cst_src_deferred_memo_ml$3,
        55,
        4,
        53,
        _SF_);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst$45,
      0,
      cst_src_deferred_memo_ml$4,
      25,
      0,
      1288,
      _lU_);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$112);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Async_kernel_Deferred_memo=[0,Deferred$6,general,unit$0];
    caml_register_global
     (2682,Async_kernel_Deferred_memo,"Async_kernel__Deferred_memo");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_async_kernel$113);
    caml_call1(Expect_test_collector[4][1],cst_src_deferred_option_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$114,cst$46);
    function return$1(a){return return$0([0,a])}
    function bind$2(t,f)
     {return caml_call2
              (bind$0,
               t,
               function(param)
                {if(param){var a=param[1];return caml_call1(f,a)}
                 return return$0(0)})}
    var
     map$20=
      [0,
       -198771759,
       function(t,f)
        {return caml_call2
                 (map$12,
                  t,
                  function(r){return caml_call2(Core_kernel_Option[39],r,f)})}],
     include$27=caml_call1(Base_Monad[1],[0,bind$2,return$1,map$20]),
     _lV_=include$27[1],
     _lW_=include$27[2],
     _lX_=include$27[3],
     _lY_=include$27[4],
     _lZ_=include$27[5],
     _l0_=include$27[6],
     _l1_=include$27[7],
     _l2_=include$27[8],
     _l3_=include$27[9],
     _l4_=include$27[10],
     _l5_=include$27[11],
     _l6_=include$27[12];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$115);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Async_kernel_Deferred_option=
      [0,_lV_,_lW_,_lX_,_lY_,_lZ_,_l0_,_l1_,_l2_,_l3_,_l4_,_l5_,_l6_];
    caml_register_global
     (2683,Async_kernel_Deferred_option,"Async_kernel__Deferred_option");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_async_kernel$116);
    caml_call1(Expect_test_collector[4][1],cst_src_deferred_result_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$117,cst$47);
    function combine(t1,t2,ok,err)
     {function _Sx_(param)
       {var t2=param[2],t1=param[1];
        return caml_call4(Core_kernel_Result[38],t1,t2,ok,err)}
      var _Sy_=caml_call2(include$20[4][4],t1,t2);
      return caml_call2(include$20[4][3],_Sy_,_Sx_)}
    function return$2(a){return return$0([0,a])}
    function bind$3(t,f)
     {return caml_call2
              (bind$0,
               t,
               function(error)
                {if(0 === error[0]){var a=error[1];return caml_call1(f,a)}
                 return return$0(error)})}
    var
     map$21=
      [0,
       -198771759,
       function(t,f)
        {return caml_call2
                 (map$12,
                  t,
                  function(r){return caml_call2(Core_kernel_Result[36],r,f)})}],
     include$28=caml_call1(Base_Monad[2],[0,bind$3,map$21,return$2]),
     _l7_=include$28[1],
     _l8_=include$28[2],
     Monad_infix$0=include$28[4],
     bind$4=include$28[5],
     return$3=include$28[6],
     _l__=include$28[7],
     join$0=include$28[8],
     ignore_m$0=include$28[9],
     _l9_=include$28[3],
     _l$_=include$28[10],
     _ma_=include$28[11],
     _mb_=include$28[12];
    function map_error(t,f)
     {return caml_call2
              (map$12,
               t,
               function(r){return caml_call2(Core_kernel_Result[37],r,f)})}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$118);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Async_kernel_Deferred_result=
      [0,
       _l7_,
       _l8_,
       _l9_,
       Monad_infix$0,
       bind$4,
       return$3,
       _l__,
       join$0,
       ignore_m$0,
       _l$_,
       _ma_,
       _mb_,
       ignore_m$0,
       map_error,
       combine];
    caml_register_global
     (2684,Async_kernel_Deferred_result,"Async_kernel__Deferred_result");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_async_kernel$119);
    caml_call1(Expect_test_collector[4][1],cst_src_deferred_or_error_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$120,cst$48);
    var Deferred$7=0;
    function try_with$0(_St_,_Ss_,_Sr_,_Sq_)
     {var _Su_=0;
      return function(_Sv_,_Sw_)
       {return try_with(_St_,_Ss_,_Sr_,_Sq_,_Su_,_Sv_,_Sw_)}}
    function apply(f,x)
     {function _Sp_(e1,e2)
       {return caml_call2(Core_kernel_Error[18],0,[0,e1,[0,e2,0]])}
      return combine(f,x,function(f,x){return caml_call1(f,x)},_Sp_)}
    var
     map$22=[0,-198771759,_l__],
     include$29=caml_call1(Base_Applicative[4],[0,return$3,apply,map$22]),
     return$4=include$29[1],
     apply$0=include$29[2],
     map$23=include$29[3],
     map2=include$29[4],
     map3=include$29[5],
     all$4=include$29[6],
     all_unit$1=include$29[7],
     all_ignore$0=include$29[8],
     both$1=include$29[9],
     Applicative_infix=include$29[10],
     _mg_=Monad_infix$0[2],
     Open_on_rhs$0=[0],
     _mc_=include$29[11],
     _md_=include$29[12],
     _me_=include$29[13],
     _mf_=Monad_infix$0[1];
    function fail(error)
     {return return$0(caml_call1(Core_kernel_Result[25],error))}
    function ok_exn(t){return caml_call2(map$12,t,Core_kernel_Or_error[40])}
    function of_exn(exn)
     {return return$0(caml_call2(Core_kernel_Or_error[41],0,exn))}
    function of_exn_result(t)
     {return caml_call2(map$12,t,Core_kernel_Or_error[42])}
    function error$0(msg,v,sexp_of)
     {return return$0(caml_call4(Core_kernel_Or_error[43],0,msg,v,sexp_of))}
    function error_s(sexp)
     {return return$0(caml_call1(Core_kernel_Or_error[44],sexp))}
    function error_string(msg)
     {return return$0(caml_call1(Core_kernel_Or_error[45],msg))}
    function errorf(format)
     {return caml_call2(Core_kernel[357],error_string,format)}
    function tag(t,tag)
     {var _Sn_=Core_kernel_Or_error[47];
      return caml_call2
              (map$12,t,function(_So_){return caml_call2(_Sn_,_So_,tag)})}
    function tag_arg(t,message,a,sexp_of_a)
     {return caml_call2
              (map$12,
               t,
               function(t)
                {return caml_call4
                         (Core_kernel_Or_error[48],t,message,a,sexp_of_a)})}
    function unimplemented(msg)
     {return return$0(caml_call1(Core_kernel_Or_error[49],msg))}
    function combine_errors(l)
     {var _Sm_=Core_kernel_Or_error[53];
      return caml_call2(map$12,all$0(l),_Sm_)}
    function combine_errors_unit(l)
     {var _Sl_=Core_kernel_Or_error[54];
      return caml_call2(map$12,all$0(l),_Sl_)}
    function find_map_ok(l,f)
     {return repeat_until_finished
              ([0,l,0],
               function(param)
                {var errors=param[2],l=param[1];
                 if(l)
                  {var
                    tl=l[2],
                    hd=l[1],
                    _Sj_=
                     function(param)
                      {if(0 === param[0])
                        {var result=param[1];return [0,-289386606,[0,result]]}
                       var current_error=param[1];
                       return [0,990972795,[0,tl,[0,current_error,errors]]]};
                   return caml_call2(map$12,caml_call1(f,hd),_Sj_)}
                 var
                  _Sk_=caml_call1(Core_kernel_List[47],errors),
                  errors$0=caml_call2(Core_kernel_Error[18],0,_Sk_);
                 return return$0([0,-289386606,[1,errors$0]])})}
    var ok_unit=caml_call1(return$4,0);
    function try_with$1(extract_exn,here,name,f)
     {function _Si_(ok)
       {if(0 === ok[0])return ok;
        var exn=ok[1];
        return [1,caml_call2(Core_kernel_Error[19],0,exn)]}
      return caml_call2
              (map$12,
               caml_call2(try_with$0(here,0,name,extract_exn),0,f),
               _Si_)}
    function try_with_join(extract_exn,here,name,f)
     {var _Sh_=Core_kernel_Or_error[27];
      return caml_call2(map$12,try_with$1(extract_exn,here,name,f),_Sh_)}
    function foldi$1(list,acc,f)
     {function loop(i,acc,param)
       {if(param)
         {var
           tl=param[2],
           hd=param[1],
           _Sg_=function(acc){return loop(i + 1 | 0,acc,tl)};
          return caml_call2(bind$4,caml_call3(f,i,acc,hd),_Sg_)}
        return caml_call1(return$4,acc)}
      return loop(0,acc,list)}
    function fold$17(t,init,f)
     {return foldi$1(t,init,function(param,a,x){return caml_call2(f,a,x)})}
    function iteri$2(opt,t,f)
     {if(opt)var sth=opt[1],how=sth;else var how=-686623969;
      if(typeof how === "number")
       if(! (-676829465 <= how))
        return foldi$1(t,0,function(i,param,x){return caml_call2(f,i,x)});
      var
       _Se_=caml_call2(Async_kernel_Throttle[11],[0,how],f),
       _Sf_=caml_call1(Core_kernel[368],_Se_);
      return caml_call1(all_unit$1,caml_call2(Core_kernel_List[103],t,_Sf_))}
    function mapi$2(opt,t,f)
     {if(opt)var sth=opt[1],how=sth;else var how=-686623969;
      if(typeof how === "number")
       if(! (-676829465 <= how))
        {var _Sa_=Core_kernel_List[47];
         return caml_call2
                 (_mg_,
                  foldi$1
                   (t,
                    0,
                    function(i,bs,a)
                     {function _Sd_(b){return [0,b,bs]}
                      return caml_call2(map$23,caml_call2(f,i,a),_Sd_)}),
                  _Sa_)}
      var
       _Sb_=caml_call2(Async_kernel_Throttle[11],[0,how],f),
       _Sc_=caml_call1(Core_kernel[368],_Sb_);
      return caml_call1(all$4,caml_call2(Core_kernel_List[103],t,_Sc_))}
    function filter_mapi$2(how,t,f)
     {var _R$_=Core_kernel_List[133];
      return caml_call2(_mg_,mapi$2(how,t,f),_R$_)}
    function concat_mapi$1(how,t,f)
     {var _R__=Core_kernel_List[140];
      return caml_call2(_mg_,mapi$2(how,t,f),_R__)}
    function filteri$2(how,t,f)
     {return filter_mapi$2
              (how,
               t,
               function(i,x)
                {function _R9_(b){return b?[0,x]:0}
                 return caml_call2(map$23,caml_call2(f,i,x),_R9_)})}
    function find_mapi$1(t,f)
     {function find_mapi(t,f,i)
       {if(t)
         {var
           tl=t[2],
           hd=t[1],
           _R8_=
            function(some)
             {return some?caml_call1(return$4,some):find_mapi(tl,f,i + 1 | 0)};
          return caml_call2(bind$4,caml_call2(f,i,hd),_R8_)}
        return caml_call1(return$4,0)}
      return find_mapi(t,f,0)}
    function findi$1(t,f)
     {return find_mapi$1
              (t,
               function(i,elt)
                {function _R7_(b){return b?[0,[0,i,elt]]:0}
                 return caml_call2(map$23,caml_call2(f,i,elt),_R7_)})}
    function find$2(t,f)
     {return find_mapi$1
              (t,
               function(param,elt)
                {function _R6_(b){return b?[0,elt]:0}
                 return caml_call2(map$23,caml_call1(f,elt),_R6_)})}
    function existsi$1(t,f)
     {function _R4_(param){return param?1:0}
      return caml_call2
              (map$23,
               find_mapi$1
                (t,
                 function(i,elt)
                  {function _R5_(b){return b?_mh_:0}
                   return caml_call2(map$23,caml_call2(f,i,elt),_R5_)}),
               _R4_)}
    function for_alli$1(t,f)
     {function _R2_(param){return param?0:1}
      return caml_call2
              (map$23,
               find_mapi$1
                (t,
                 function(i,elt)
                  {function _R3_(b){return b?0:_mi_}
                   return caml_call2(map$23,caml_call2(f,i,elt),_R3_)}),
               _R2_)}
    function iter$17(how,t,f)
     {return iteri$2(how,t,function(param,a){return caml_call1(f,a)})}
    function map$24(how,t,f)
     {return mapi$2(how,t,function(param,a){return caml_call1(f,a)})}
    function filter$2(how,t,f)
     {return filteri$2(how,t,function(param,a){return caml_call1(f,a)})}
    function filter_map$2(how,t,f)
     {return filter_mapi$2(how,t,function(param,a){return caml_call1(f,a)})}
    function concat_map$1(how,t,f)
     {return concat_mapi$1(how,t,function(param,a){return caml_call1(f,a)})}
    function find_map$1(t,f)
     {return find_mapi$1(t,function(param,a){return caml_call1(f,a)})}
    function exists$13(t,f)
     {return existsi$1(t,function(param,a){return caml_call1(f,a)})}
    function for_all$13(t,f)
     {return for_alli$1(t,function(param,a){return caml_call1(f,a)})}
    function init$1(how,n,f)
     {function _R0_(_R1_){return _R1_}
      return map$24(how,caml_call2(Core_kernel_List[128],n,_R0_),f)}
    function _mj_(param)
     {var tasks=caml_call2(Core_kernel_Queue[60],0,0);
      function return$1(a)
       {var ivar=caml_call1(create$12,0);
        function task(param){return fill(ivar,[0,a])}
        caml_call2(Core_kernel_Queue[40],tasks,task);
        return ivar}
      function stabilize(param)
       {a:
        for(;;)
         for(;;)
          {var match=caml_call1(Core_kernel_Queue[42],tasks);
           if(match){var task=match[1];caml_call1(task,0);continue}
           stabilize$0(0);
           var _RZ_=1 - caml_call1(Core_kernel_Queue[14],tasks);
           if(_RZ_)continue a;
           return _RZ_}}
      function determined(def,value)
       {var match=peek$0(def);
        if(match)
         {var _RY_=match[1];
          if(0 === _RY_[0]){var v=_RY_[1];return caml_equal(value,v)}}
        return 0}
      function _QD_(param)
       {var def=return$1(123);
        stabilize(0);
        if(determined(def,123))return 0;
        throw [0,Assert_failure,_mk_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_determined_def_123,
        0,
        cst_src_deferred_or_error_ml$0,
        234,
        4,
        105,
        _QD_);
      function _QE_(param)
       {var def=never(0);
        stabilize(0);
        if(0 === peek$0(def))return 0;
        throw [0,Assert_failure,_ml_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_Deferred_peek_def_None,
        0,
        cst_src_deferred_or_error_ml$1,
        240,
        4,
        109,
        _QE_);
      function _QF_(param)
       {var
         def=
          fold$17
           (_mm_,
            cst$49,
            function(acc,value)
             {var _RX_=caml_call1(Core_kernel_Int[98],value);
              return return$1(caml_call2(Core_kernel[178],acc,_RX_))});
        stabilize(0);
        if(determined(def,cst_012))return 0;
        throw [0,Assert_failure,_mn_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_determined_def_012,
        0,
        cst_src_deferred_or_error_ml$2,
        246,
        4,
        213,
        _QF_);
      function _QG_(param)
       {var
         def=
          init$1
           (0,
            3,
            function(value)
             {return return$1(caml_call1(Core_kernel[182],value))});
        stabilize(0);
        if(determined(def,_mo_))return 0;
        throw [0,Assert_failure,_mp_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_determined_def_0_1,
        0,
        cst_src_deferred_or_error_ml$3,
        255,
        4,
        172,
        _QG_);
      function _QH_(param)
       {var r=[0,0],n=3;
        function _RW_(value){r[1] = r[1] + value | 0;return return$1(0)}
        var
         def=
          iter$17(0,caml_call2(Core_kernel_List[128],n,Core_kernel[352]),_RW_);
        stabilize(0);
        if(determined(def,0))
         {if(r[1] === 3)return 0;throw [0,Assert_failure,_mq_]}
        throw [0,Assert_failure,_mr_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_determined_def_ass,
        0,
        cst_src_deferred_or_error_ml$4,
        261,
        4,
        277,
        _QH_);
      function _QI_(param)
       {var
         def=
          map$24(0,_ms_,function(value){return return$1(value + 1 | 0)});
        stabilize(0);
        if(determined(def,_mt_))return 0;
        throw [0,Assert_failure,_mu_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_determined_def_1_2_3,
        0,
        cst_src_deferred_or_error_ml$5,
        273,
        4,
        192,
        _QI_);
      function _QJ_(param)
       {var
         def=
          mapi$2
           (0,
            _mv_,
            function(i,value){return return$1((i * 10 | 0) + value | 0)});
        stabilize(0);
        if(determined(def,_mw_))return 0;
        throw [0,Assert_failure,_mx_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_determined_def_2_11_20,
        0,
        cst_src_deferred_or_error_ml$6,
        282,
        4,
        201,
        _QJ_);
      function _QK_(param)
       {var
         def=
          filter$2
           (0,
            _my_,
            function(value){return return$1(0 === (value % 2 | 0)?1:0)});
        stabilize(0);
        if(determined(def,_mz_))return 0;
        throw [0,Assert_failure,_mA_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_determined_def_0_2_4,
        0,
        cst_src_deferred_or_error_ml$7,
        291,
        4,
        208,
        _QK_);
      function _QL_(param)
       {var
         def=
          filteri$2(0,_mB_,function(i,value){return return$1(value < i?1:0)});
        stabilize(0);
        if(determined(def,_mC_))return 0;
        throw [0,Assert_failure,_mD_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_determined_def_1_0,
        0,
        cst_src_deferred_or_error_ml$8,
        300,
        4,
        201,
        _QL_);
      function _QM_(param)
       {var
         def=
          filter_map$2
           (0,
            _mE_,
            function(value)
             {var _RV_=0 === (value % 2 | 0)?[0,value + 1 | 0]:0;
              return return$1(_RV_)});
        stabilize(0);
        if(determined(def,_mF_))return 0;
        throw [0,Assert_failure,_mG_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_determined_def_1_3_5,
        0,
        cst_src_deferred_or_error_ml$9,
        309,
        4,
        277,
        _QM_);
      function _QN_(param)
       {var
         def=
          filter_mapi$2
           (0,
            _mH_,
            function(i,value)
             {var _RU_=value < i?[0,[0,i,value]]:0;return return$1(_RU_)});
        stabilize(0);
        if(determined(def,_mI_))return 0;
        throw [0,Assert_failure,_mJ_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_determined_def_3_1,
        0,
        cst_src_deferred_or_error_ml$10,
        320,
        4,
        275,
        _QN_);
      function _QO_(param)
       {var
         def=
          concat_map$1
           (0,
            _mK_,
            function(value)
             {function _RS_(_RT_){return _RT_}
              return return$1
                      (caml_call2(Core_kernel_List[128],4 - value | 0,_RS_))});
        stabilize(0);
        if(determined(def,_mL_))return 0;
        throw [0,Assert_failure,_mM_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_determined_def_0_1_2,
        0,
        cst_src_deferred_or_error_ml$11,
        331,
        4,
        280,
        _QO_);
      function _QP_(param)
       {var
         def=
          concat_mapi$1
           (0,
            _mN_,
            function(i,value)
             {function _RR_(j){return i + j | 0}
              return return$1(caml_call2(Core_kernel_List[128],value,_RR_))});
        stabilize(0);
        if(determined(def,_mO_))return 0;
        throw [0,Assert_failure,_mP_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_determined_def_0_1_2$0,
        0,
        cst_src_deferred_or_error_ml$12,
        342,
        4,
        288,
        _QP_);
      function _QQ_(param)
       {var
         def=
          foldi$1
           (_mQ_,
            cst$50,
            function(i,acc,value)
             {var
               _RO_=caml_call1(Core_kernel_Int[98],i + 3 | 0),
               _RP_=caml_call1(Core_kernel_Int[98],value),
               _RQ_=caml_call2(Core_kernel[178],_RP_,_RO_);
              return return$1(caml_call2(Core_kernel[178],acc,_RQ_))});
        stabilize(0);
        if(determined(def,cst_031425))return 0;
        throw [0,Assert_failure,_mR_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_determined_def_031425,
        0,
        cst_src_deferred_or_error_ml$13,
        353,
        4,
        241,
        _QQ_);
      function _QR_(param)
       {function _RN_(i){return return$1(i)}
        var
         list=caml_call2(Core_kernel_List[128],3,_RN_),
         def=caml_call1(all$4,list);
        stabilize(0);
        if(determined(def,_mS_))return 0;
        throw [0,Assert_failure,_mT_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_determined_def_0_1_2$1,
        0,
        cst_src_deferred_or_error_ml$14,
        362,
        4,
        176,
        _QR_);
      function _QS_(param)
       {var
         def=
          find$2(_mU_,function(value){return return$1(3 === value?1:0)});
        stabilize(0);
        if(determined(def,_mV_))return 0;
        throw [0,Assert_failure,_mW_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_determined_def_Some_3,
        0,
        cst_src_deferred_or_error_ml$15,
        369,
        4,
        222,
        _QS_);
      function _QT_(param)
       {var
         def=
          find$2(_mX_,function(value){return return$1(5 === value?1:0)});
        stabilize(0);
        if(determined(def,0))return 0;
        throw [0,Assert_failure,_mY_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_determined_def_None,
        0,
        cst_src_deferred_or_error_ml$16,
        380,
        4,
        218,
        _QT_);
      function _QU_(param)
       {var
         def=
          findi$1(_mZ_,function(i,value){return return$1(value < i?1:0)});
        stabilize(0);
        if(determined(def,_m0_))return 0;
        throw [0,Assert_failure,_m1_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_determined_def_Some_3$0,
        0,
        cst_src_deferred_or_error_ml$17,
        391,
        4,
        229,
        _QU_);
      function _QV_(param)
       {var
         def=
          findi$1
           (_m2_,
            function(i,value){return return$1(5 === (i + value | 0)?1:0)});
        stabilize(0);
        if(determined(def,0))return 0;
        throw [0,Assert_failure,_m3_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_determined_def_None$0,
        0,
        cst_src_deferred_or_error_ml$18,
        402,
        4,
        225,
        _QV_);
      function _QW_(param)
       {var
         def=
          find_map$1
           (_m4_,
            function(value)
             {var _RM_=3 === value?[0,value + 1 | 0]:0;return return$1(_RM_)});
        stabilize(0);
        if(determined(def,_m5_))return 0;
        throw [0,Assert_failure,_m6_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_determined_def_Some_4,
        0,
        cst_src_deferred_or_error_ml$19,
        413,
        4,
        264,
        _QW_);
      function _QX_(param)
       {var
         def=
          find_map$1
           (_m7_,
            function(value)
             {var _RL_=5 === value?[0,value + 1 | 0]:0;return return$1(_RL_)});
        stabilize(0);
        if(determined(def,0))return 0;
        throw [0,Assert_failure,_m8_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_determined_def_None$1,
        0,
        cst_src_deferred_or_error_ml$20,
        424,
        4,
        260,
        _QX_);
      function _QY_(param)
       {var
         def=
          find_mapi$1
           (_m9_,
            function(i,value)
             {var _RK_=3 === value?[0,[0,i,value + 1 | 0]]:0;
              return return$1(_RK_)});
        stabilize(0);
        if(determined(def,_m__))return 0;
        throw [0,Assert_failure,_m$_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_determined_def_Some_1,
        0,
        cst_src_deferred_or_error_ml$21,
        435,
        4,
        273,
        _QY_);
      function _QZ_(param)
       {var
         def=
          find_mapi$1
           (_na_,
            function(i,value)
             {var _RJ_=5 === value?[0,[0,i,value + 1 | 0]]:0;
              return return$1(_RJ_)});
        stabilize(0);
        if(determined(def,0))return 0;
        throw [0,Assert_failure,_nb_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_determined_def_None$2,
        0,
        cst_src_deferred_or_error_ml$22,
        446,
        4,
        265,
        _QZ_);
      function _Q0_(param)
       {var
         def=
          exists$13(_nc_,function(value){return return$1(3 === value?1:0)});
        stabilize(0);
        if(determined(def,1))return 0;
        throw [0,Assert_failure,_nd_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_determined_def_true,
        0,
        cst_src_deferred_or_error_ml$23,
        457,
        4,
        220,
        _Q0_);
      function _Q1_(param)
       {var
         def=
          exists$13(_ne_,function(value){return return$1(5 === value?1:0)});
        stabilize(0);
        if(determined(def,0))return 0;
        throw [0,Assert_failure,_nf_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_determined_def_false,
        0,
        cst_src_deferred_or_error_ml$24,
        468,
        4,
        221,
        _Q1_);
      function _Q2_(param)
       {var
         def=
          existsi$1(_ng_,function(i,value){return return$1(value < i?1:0)});
        stabilize(0);
        if(determined(def,1))return 0;
        throw [0,Assert_failure,_nh_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_determined_def_true$0,
        0,
        cst_src_deferred_or_error_ml$25,
        479,
        4,
        223,
        _Q2_);
      function _Q3_(param)
       {var
         def=
          existsi$1
           (_ni_,
            function(i,value){return return$1(5 === (i + value | 0)?1:0)});
        stabilize(0);
        if(determined(def,0))return 0;
        throw [0,Assert_failure,_nj_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_determined_def_false$0,
        0,
        cst_src_deferred_or_error_ml$26,
        490,
        4,
        228,
        _Q3_);
      function _Q4_(param)
       {var
         def=
          for_all$13(_nk_,function(value){return return$1(3 !== value?1:0)});
        stabilize(0);
        if(determined(def,0))return 0;
        throw [0,Assert_failure,_nl_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_determined_def_false$1,
        0,
        cst_src_deferred_or_error_ml$27,
        501,
        4,
        223,
        _Q4_);
      function _Q5_(param)
       {var
         def=
          for_all$13(_nm_,function(value){return return$1(5 !== value?1:0)});
        stabilize(0);
        if(determined(def,1))return 0;
        throw [0,Assert_failure,_nn_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_determined_def_true$1,
        0,
        cst_src_deferred_or_error_ml$28,
        512,
        4,
        222,
        _Q5_);
      function _Q6_(param)
       {var
         def=
          for_alli$1(_no_,function(i,value){return return$1(i <= value?1:0)});
        stabilize(0);
        if(determined(def,0))return 0;
        throw [0,Assert_failure,_np_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_determined_def_false$2,
        0,
        cst_src_deferred_or_error_ml$29,
        523,
        4,
        226,
        _Q6_);
      function _Q7_(param)
       {var
         def=
          for_alli$1
           (_nq_,
            function(i,value){return return$1(5 !== (i + value | 0)?1:0)});
        stabilize(0);
        if(determined(def,1))return 0;
        throw [0,Assert_failure,_nr_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_determined_def_true$2,
        0,
        cst_src_deferred_or_error_ml$30,
        534,
        4,
        229,
        _Q7_);
      function _Q8_(param)
       {function f(param)
         {return return$0([1,caml_call1(Core_kernel_Error[10],cst_error)])}
        var def=try_with$1(0,0,0,function(param){return iter$17(0,_ns_,f)});
        stabilize(0);
        var match=peek$0(def);
        if(match)
         {var _RI_=match[1];if(0 === _RI_[0])if(0 !== _RI_[1][0])return 1}
        return 0}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_stabilize_match_Deferred_peek_def_with,
        0,
        cst_src_deferred_or_error_ml$31,
        546,
        4,
        255,
        _Q8_);
      function _Q9_(param)
       {function f(param){throw Caml[141]}
        var def=try_with$1(0,0,0,function(param){return iter$17(0,_nt_,f)});
        stabilize(0);
        var match=peek$0(def);
        if(match)if(0 !== match[1][0])return 1;
        return 0}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_stabilize_match_Deferred_peek_def_with$0,
        0,
        cst_src_deferred_or_error_ml$32,
        555,
        4,
        221,
        _Q9_);
      var err=caml_call1(Core_kernel_Error[10],cst_foo);
      function eq(deferred,expected)
       {stabilize(0);
        var _RC_=peek$0(deferred);
        if(_RC_)
         {var _RD_=_RC_[1];
          if(0 !== _RD_[0])
           {var _RF_=_RD_[1];
            if(0 === expected[0])return 1;
            var
             expected$0=expected[1],
             got=caml_call1(Core_kernel_Error[7],_RF_),
             expected$1=caml_call1(Core_kernel_Error[7],expected$0),
             _RG_=caml_call2(Core_kernel_String[112],expected$1,got),
             _RH_=_RG_ || (caml_call3(Core_kernel[344],_nu_,expected$1,got),0);
            return _RH_}
          var _RE_=_RD_[1];
          if(0 === expected[0]){var x=expected[1];return caml_equal(_RE_,x)}}
        return 0}
      function _Q__(param){return eq(fail(err),[1,err])}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_eq_fail_err_Error_err,
        0,
        cst_src_deferred_or_error_ml$33,
        587,
        4,
        48,
        _Q__);
      function _Q$_(param)
       {var deferred=ok_exn(return$1(1));
        stabilize(0);
        var expected=1;
        function _Ry_(got){return caml_equal(got,expected)}
        var _Rz_=peek$0(deferred);
        if(caml_call3(Core_kernel_Option[48],_Rz_,0,_Ry_))
         {var
           _RA_=function(param){return ok_exn(fail(err))},
           rv=caml_call2(try_with$0(0,0,0,0),0,_RA_);
          stabilize(0);
          var match=peek$0(rv);
          if(match)
           if(0 === match[1][0])var switch$0=0;else var _RB_=1,switch$0=1;
          else
           var switch$0=0;
          if(! switch$0)var _RB_=0;
          if(_RB_)return 0;
          throw [0,Assert_failure,_nv_]}
        throw [0,Assert_failure,_nw_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_assert_eq_ok_exn_return_1_1_assert,
        0,
        cst_src_deferred_or_error_ml$34,
        591,
        4,
        259,
        _Q$_);
      function _Ra_(param)
       {var _Rx_=caml_call2(Core_kernel_Or_error[41],0,[0,Failure,cst_foo$0]);
        return eq(of_exn([0,Failure,cst_foo$1]),_Rx_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_eq_of_exn_Failure_foo_Or_error_of_exn,
        0,
        cst_src_deferred_or_error_ml$35,
        601,
        4,
        84,
        _Ra_);
      function _Rb_(param)
       {if(eq(of_exn_result(return$1(1)),_nx_))
         {var
           exn_result=[1,[0,Failure,cst_foo$2]],
           _Rw_=caml_call1(Core_kernel_Or_error[42],exn_result);
          if(eq(of_exn_result(return$0(exn_result)),_Rw_))return 0;
          throw [0,Assert_failure,_ny_]}
        throw [0,Assert_failure,_nz_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_assert_eq_of_exn_result_return_1_Ok_1,
        0,
        cst_src_deferred_or_error_ml$36,
        605,
        4,
        237,
        _Rb_);
      function _Rc_(param)
       {var
         _Rv_=
          caml_call4
           (Core_kernel_Or_error[43],
            0,
            cst_foo$3,
            cst_bar,
            Core_kernel_String[106]);
        return eq(error$0(cst_foo$4,cst_bar$0,Core_kernel_String[106]),_Rv_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_eq_error_foo_bar_String_sexp_of_t_Or,
        0,
        cst_src_deferred_or_error_ml$37,
        612,
        4,
        108,
        _Rc_);
      function _Rd_(param)
       {var _Ru_=caml_call1(Core_kernel_Or_error[45],cst_foo$5);
        return eq(error_string(cst_foo$6),_Ru_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_eq_error_string_foo_Or_error_error_strin,
        0,
        cst_src_deferred_or_error_ml$38,
        616,
        4,
        76,
        _Rd_);
      function _Re_(param)
       {var _Rt_=caml_call1(Core_kernel_Or_error[49],cst_foo$7);
        return eq(unimplemented(cst_foo$8),_Rt_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_eq_unimplemented_foo_Or_error_unimplemen,
        0,
        cst_src_deferred_or_error_ml$39,
        620,
        4,
        78,
        _Re_);
      function check(deferred_f,immediate_f)
       {function check(l)
         {function _Rq_(param){return 0 === param?fail(err):return$1(0)}
          var deferred_l=caml_call2(Core_kernel_List[84],l,_Rq_);
          function _Rr_(param){return 0 === param?[1,err]:_nA_}
          var
           immediate_l=caml_call2(Core_kernel_List[84],l,_Rr_),
           _Rs_=caml_call1(immediate_f,immediate_l);
          if(eq(caml_call1(deferred_f,deferred_l),_Rs_))return 0;
          throw [0,Assert_failure,_nB_]}
        check(_nC_);
        check(0);
        check(_nD_);
        return check(_nE_)}
      function _Rf_(param)
       {return check(combine_errors,Core_kernel_Or_error[53])}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_check_combine_errors_Or_error_combine_errors,
        0,
        cst_src_deferred_or_error_ml$40,
        636,
        4,
        72,
        _Rf_);
      function _Rg_(param)
       {return check(combine_errors_unit,Core_kernel_Or_error[54])}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_check_combine_errors_unit_Or_error_combine_er,
        0,
        cst_src_deferred_or_error_ml$41,
        640,
        4,
        82,
        _Rg_);
      function _Rh_(param){return eq(ok_unit,_nF_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_eq_ok_unit_Ok,
        0,
        cst_src_deferred_or_error_ml$42,
        644,
        4,
        41,
        _Rh_);
      function _Ri_(param)
       {var rv=never(0);
        stabilize(0);
        var _Rp_=peek$0(rv);
        return caml_call1(Core_kernel_Option[46],_Rp_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_stabilize_Option_is_none_Deferred_peek_rv,
        0,
        cst_src_deferred_or_error_ml$43,
        648,
        4,
        103,
        _Ri_);
      function expect_failure_with_prefix(prefix,deferred)
       {stabilize(0);
        var match=peek$0(deferred);
        if(match)
         {var _Ro_=match[1];
          if(0 !== _Ro_[0])
           {var err=_Ro_[1],s=caml_call1(Core_kernel_Error[7],err);
            return caml_call2(Core_kernel_String[57],s,prefix)
                    ?1
                    :(caml_call3(Core_kernel[344],_nG_,prefix,s),0)}}
        return 0}
      function _Rj_(param)
       {if(eq(try_with$1(0,0,0,function(param){return return$0(1)}),_nH_))
         {if
           (expect_failure_with_prefix
             (cst_monitor_ml_Error_foo,
              try_with$1
               (0,
                0,
                0,
                function(param)
                 {var _Rn_=caml_call1(Sexplib0_Sexp_conv[7],cst_foo$9);
                  return caml_call1(Core_kernel[364],_Rn_)})))
           return 0;
          throw [0,Assert_failure,_nI_]}
        throw [0,Assert_failure,_nJ_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_assert_eq_try_with_fun_Deferred_retu,
        0,
        cst_src_deferred_or_error_ml$44,
        667,
        4,
        227,
        _Rj_);
      function _Rk_(param)
       {if(eq(try_with_join(0,0,0,function(param){return return$1(1)}),_nK_))
         {var _Rl_=[1,err];
          if(eq(try_with_join(0,0,0,function(param){return fail(err)}),_Rl_))
           {if
             (expect_failure_with_prefix
               (cst_monitor_ml_Error_foo$0,
                try_with$1
                 (0,
                  0,
                  0,
                  function(param)
                   {var _Rm_=caml_call1(Sexplib0_Sexp_conv[7],cst_foo$10);
                    return caml_call1(Core_kernel[364],_Rm_)})))
             return 0;
            throw [0,Assert_failure,_nL_]}
          throw [0,Assert_failure,_nM_]}
        throw [0,Assert_failure,_nN_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_assert_eq_try_with_join_fun_return_1,
        0,
        cst_src_deferred_or_error_ml$45,
        673,
        4,
        291,
        _Rk_);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst$51,
      0,
      cst_src_deferred_or_error_ml$46,
      193,
      0,
      12023,
      _mj_);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$121);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Async_kernel_Deferred_or_error=
      [0,
       Deferred$7,
       apply$0,
       map2,
       map3,
       both$1,
       Applicative_infix,
       _mc_,
       _md_,
       _me_,
       _l7_,
       _l8_,
       Monad_infix$0,
       bind$4,
       return$4,
       map$23,
       join$0,
       ignore_m$0,
       all$4,
       all_unit$1,
       all_ignore$0,
       [0,return$4,_mf_,_mg_,[0,return$4,bind$4,map$23,both$1,Open_on_rhs$0]],
       fail,
       ignore_m$0,
       ok_exn,
       of_exn,
       of_exn_result,
       error$0,
       error_s,
       error_string,
       errorf,
       tag,
       tag_arg,
       unimplemented,
       combine_errors,
       combine_errors_unit,
       find_map_ok,
       ok_unit,
       try_with$1,
       try_with_join,
       [0,
        foldi$1,
        fold$17,
        find$2,
        findi$1,
        find_map$1,
        find_mapi$1,
        exists$13,
        existsi$1,
        for_all$13,
        for_alli$1,
        all$4,
        all_unit$1,
        init$1,
        iter$17,
        iteri$2,
        map$24,
        mapi$2,
        filter$2,
        filteri$2,
        filter_map$2,
        filter_mapi$2,
        concat_map$1,
        concat_mapi$1]];
    caml_register_global
     (2688,Async_kernel_Deferred_or_error,"Async_kernel__Deferred_or_error");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_async_kernel$122);
    caml_call1(Expect_test_collector[4][1],cst_src_deferred_queue_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$123,cst$52);
    function foldi$2(t,init,f)
     {var _QC_=caml_call1(Core_kernel_Queue[25],t);
      return caml_call3(Async_kernel_Deferred_list[1],_QC_,init,f)}
    function fold$18(t,init,f)
     {var _QB_=caml_call1(Core_kernel_Queue[25],t);
      return caml_call3(Async_kernel_Deferred_list[2],_QB_,init,f)}
    function all$5(t)
     {var _Qz_=Core_kernel_Queue[37],_QA_=caml_call1(Core_kernel_Queue[25],t);
      return caml_call2
              (_je_,caml_call1(Async_kernel_Deferred_list[11],_QA_),_Qz_)}
    function all_unit$2(t)
     {var _Qy_=caml_call1(Core_kernel_Queue[25],t);
      return caml_call1(Async_kernel_Deferred_list[12],_Qy_)}
    function iter$18(how,t,f)
     {var _Qx_=caml_call1(Core_kernel_Queue[25],t);
      return caml_call3(Async_kernel_Deferred_list[14],how,_Qx_,f)}
    function iteri$3(how,t,f)
     {var _Qw_=caml_call1(Core_kernel_Queue[25],t);
      return caml_call3(Async_kernel_Deferred_list[15],how,_Qw_,f)}
    function map$25(how,t,f)
     {var _Qu_=Core_kernel_Queue[37],_Qv_=caml_call1(Core_kernel_Queue[25],t);
      return caml_call2
              (_je_,
               caml_call3(Async_kernel_Deferred_list[16],how,_Qv_,f),
               _Qu_)}
    function mapi$3(how,t,f)
     {var _Qs_=Core_kernel_Queue[37],_Qt_=caml_call1(Core_kernel_Queue[25],t);
      return caml_call2
              (_je_,
               caml_call3(Async_kernel_Deferred_list[17],how,_Qt_,f),
               _Qs_)}
    function init$2(how,n,f)
     {var _Qr_=Core_kernel_Queue[37];
      return caml_call2
              (_je_,caml_call3(Async_kernel_Deferred_list[13],how,n,f),_Qr_)}
    function filter$3(how,t,f)
     {var _Qp_=Core_kernel_Queue[37],_Qq_=caml_call1(Core_kernel_Queue[25],t);
      return caml_call2
              (_je_,
               caml_call3(Async_kernel_Deferred_list[18],how,_Qq_,f),
               _Qp_)}
    function filteri$3(how,t,f)
     {var _Qn_=Core_kernel_Queue[37],_Qo_=caml_call1(Core_kernel_Queue[25],t);
      return caml_call2
              (_je_,
               caml_call3(Async_kernel_Deferred_list[19],how,_Qo_,f),
               _Qn_)}
    function filter_map$3(how,t,f)
     {var _Ql_=Core_kernel_Queue[37],_Qm_=caml_call1(Core_kernel_Queue[25],t);
      return caml_call2
              (_je_,
               caml_call3(Async_kernel_Deferred_list[20],how,_Qm_,f),
               _Ql_)}
    function filter_mapi$3(how,t,f)
     {var _Qj_=Core_kernel_Queue[37],_Qk_=caml_call1(Core_kernel_Queue[25],t);
      return caml_call2
              (_je_,
               caml_call3(Async_kernel_Deferred_list[21],how,_Qk_,f),
               _Qj_)}
    function concat_map$2(how,t,f)
     {var _Qf_=Core_kernel_Queue[37];
      function _Qg_(x)
       {var _Qi_=Core_kernel_Queue[25];
        return caml_call2(_je_,caml_call1(f,x),_Qi_)}
      var _Qh_=caml_call1(Core_kernel_Queue[25],t);
      return caml_call2
              (_je_,
               caml_call3(Async_kernel_Deferred_list[22],how,_Qh_,_Qg_),
               _Qf_)}
    function concat_mapi$2(how,t,f)
     {var _Qb_=Core_kernel_Queue[37];
      function _Qc_(i,x)
       {var _Qe_=Core_kernel_Queue[25];
        return caml_call2(_je_,caml_call2(f,i,x),_Qe_)}
      var _Qd_=caml_call1(Core_kernel_Queue[25],t);
      return caml_call2
              (_je_,
               caml_call3(Async_kernel_Deferred_list[23],how,_Qd_,_Qc_),
               _Qb_)}
    function find_map$2(t,f)
     {var _Qa_=caml_call1(Core_kernel_Queue[25],t);
      return caml_call2(Async_kernel_Deferred_list[5],_Qa_,f)}
    function find_mapi$2(t,f)
     {var _P$_=caml_call1(Core_kernel_Queue[25],t);
      return caml_call2(Async_kernel_Deferred_list[6],_P$_,f)}
    function find$3(t,f)
     {var _P__=caml_call1(Core_kernel_Queue[25],t);
      return caml_call2(Async_kernel_Deferred_list[3],_P__,f)}
    function findi$2(t,f)
     {var _P9_=caml_call1(Core_kernel_Queue[25],t);
      return caml_call2(Async_kernel_Deferred_list[4],_P9_,f)}
    function for_all$14(t,f)
     {var _P8_=caml_call1(Core_kernel_Queue[25],t);
      return caml_call2(Async_kernel_Deferred_list[9],_P8_,f)}
    function for_alli$2(t,f)
     {var _P7_=caml_call1(Core_kernel_Queue[25],t);
      return caml_call2(Async_kernel_Deferred_list[10],_P7_,f)}
    function exists$14(t,f)
     {var _P6_=caml_call1(Core_kernel_Queue[25],t);
      return caml_call2(Async_kernel_Deferred_list[7],_P6_,f)}
    function existsi$2(t,f)
     {var _P5_=caml_call1(Core_kernel_Queue[25],t);
      return caml_call2(Async_kernel_Deferred_list[8],_P5_,f)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$124);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Async_kernel_Deferred_queue=
      [0,
       foldi$2,
       fold$18,
       find$3,
       findi$2,
       find_map$2,
       find_mapi$2,
       exists$14,
       existsi$2,
       for_all$14,
       for_alli$2,
       all$5,
       all_unit$2,
       init$2,
       iter$18,
       iteri$3,
       map$25,
       mapi$3,
       filter$3,
       filteri$3,
       filter_map$3,
       filter_mapi$3,
       concat_map$2,
       concat_mapi$2];
    caml_register_global
     (2689,Async_kernel_Deferred_queue,"Async_kernel__Deferred_queue");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_async_kernel$125);
    caml_call1(Expect_test_collector[4][1],cst_src_deferred_sequence_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$126,cst$53);
    function fold_mapi(opt,t,init,mapi_f,fold_f)
     {if(opt)var sth=opt[1],how=sth;else var how=-686623969;
      if(typeof how === "number")
       {if(-676829465 <= how)
         {var c$1=caml_call1(_jc_,init),i=0,t$0=t,c=c$1;
          for(;;)
           {var match=caml_call1(Core_kernel_Sequence[40],t$0);
            if(match)
             {var
               match$0=match[1],
               t$1=match$0[2],
               a=match$0[1],
               _PU_=
                function(c)
                  {return function(b)
                    {function _P4_(c){return caml_call2(fold_f,c,b)}
                     return caml_call2(include$20[4][3],c,_P4_)}}
                 (c),
               _PV_=caml_call2(mapi_f,i,a),
               c$0=caml_call2(include$20[4][2],_PV_,_PU_),
               i$0=i + 1 | 0,
               i=i$0,
               t$0=t$1,
               c=c$0;
              continue}
            return c}}
        var
         loop=
          function(i,t,c)
           {var match=caml_call1(Core_kernel_Sequence[40],t);
            if(match)
             {var
               match$0=match[1],
               t$0=match$0[2],
               a=match$0[1],
               _P2_=
                function(b){return loop(i + 1 | 0,t$0,caml_call2(fold_f,c,b))},
               _P3_=caml_call2(mapi_f,i,a);
              return caml_call2(include$20[4][2],_P3_,_P2_)}
            return caml_call1(_jc_,c)};
        return loop(0,t,init)}
      var
       max_concurrent_jobs=how[2],
       throttle=caml_call2(Async_kernel_Throttle[5],0,max_concurrent_jobs);
      function loop$0(i,t,c)
       {function _PW_(param)
         {var match=caml_call1(Core_kernel_Sequence[40],t);
          if(match)
           {var
             match$0=match[1],
             t$0=match$0[2],
             a=match$0[1],
             _PY_=
              function(b)
               {function _P1_(c){return caml_call2(fold_f,c,b)}
                return caml_call2(include$20[4][3],c,_P1_)},
             _PZ_=function(param){return caml_call2(mapi_f,i,a)},
             _P0_=caml_call2(Async_kernel_Throttle[9],throttle,_PZ_);
            return loop$0
                    (i + 1 | 0,t$0,caml_call2(include$20[4][2],_P0_,_PY_))}
          return c}
        var _PX_=caml_call1(Async_kernel_Throttle[16],throttle);
        return caml_call2(include$20[4][2],_PX_,_PW_)}
      return loop$0(0,t,caml_call1(_jc_,init))}
    function foldi$3(t,init,f)
     {function _PQ_(param){var b=param[2];return caml_call1(_jc_,b)}
      function _PR_(param,a,k)
       {var b=param[2],i=param[1];
        function _PS_(b){return caml_call1(k,[0,i + 1 | 0,b])}
        var _PT_=caml_call3(f,i,b,a);
        return caml_call2(include$20[4][2],_PT_,_PS_)}
      return caml_call4(Core_kernel_Sequence[99],t,[0,0,init],_PR_,_PQ_)}
    function fold$19(t,init,f)
     {function _PP_(b,a,k){return caml_call2(_jd_,caml_call2(f,b,a),k)}
      return caml_call4(Core_kernel_Sequence[99],t,init,_PP_,_jc_)}
    function all$6(t)
     {function _PL_(res)
       {var _PO_=caml_call1(Core_kernel_List[47],res);
        return caml_call1(Core_kernel_Sequence[103],_PO_)}
      var
       _PM_=
        fold$19
         (t,
          0,
          function(accum,d)
           {function _PN_(a){return [0,a,accum]}
            return caml_call2(include$20[4][3],d,_PN_)});
      return caml_call2(include$20[4][3],_PM_,_PL_)}
    function all_unit$3(t){return fold$19(t,0,function(param,v){return v})}
    function find_mapi$3(t,f)
     {function find_mapi(t,f,i)
       {var match=caml_call1(Core_kernel_Sequence[40],t);
        if(match)
         {var
           match$0=match[1],
           rest=match$0[2],
           v=match$0[1],
           _PJ_=
            function(some)
             {return some?caml_call1(_jc_,some):find_mapi(rest,f,i + 1 | 0)},
           _PK_=caml_call2(f,i,v);
          return caml_call2(include$20[4][2],_PK_,_PJ_)}
        return caml_call1(_jc_,0)}
      return find_mapi(t,f,0)}
    function findi$3(t,f)
     {return find_mapi$3
              (t,
               function(i,elt)
                {function _PH_(b){return b?[0,[0,i,elt]]:0}
                 var _PI_=caml_call2(f,i,elt);
                 return caml_call2(include$20[4][3],_PI_,_PH_)})}
    function find$4(t,f)
     {return find_mapi$3
              (t,
               function(param,elt)
                {function _PF_(b){return b?[0,elt]:0}
                 var _PG_=caml_call1(f,elt);
                 return caml_call2(include$20[4][3],_PG_,_PF_)})}
    function existsi$3(t,f)
     {function _PB_(param){return param?1:0}
      var
       _PC_=
        find_mapi$3
         (t,
          function(i,elt)
           {function _PD_(b){return b?_nO_:0}
            var _PE_=caml_call2(f,i,elt);
            return caml_call2(include$20[4][3],_PE_,_PD_)});
      return caml_call2(include$20[4][3],_PC_,_PB_)}
    function for_alli$3(t,f)
     {function _Px_(param){return param?0:1}
      var
       _Py_=
        find_mapi$3
         (t,
          function(i,elt)
           {function _Pz_(b){return b?0:_nP_}
            var _PA_=caml_call2(f,i,elt);
            return caml_call2(include$20[4][3],_PA_,_Pz_)});
      return caml_call2(include$20[4][3],_Py_,_Px_)}
    function iteri$4(how,t,f)
     {return fold_mapi(how,t,0,f,function(param,_Pw_){return 0})}
    function mapi$4(how,t,f)
     {function _Ps_(bs)
       {var _Pv_=caml_call1(Core_kernel_List[47],bs);
        return caml_call1(Core_kernel_Sequence[103],_Pv_)}
      function _Pt_(bs,b){return [0,b,bs]}
      var
       _Pu_=
        fold_mapi(how,t,0,function(i,a){return caml_call2(f,i,a)},_Pt_);
      return caml_call2(include$20[4][3],_Pu_,_Ps_)}
    function filter_mapi$4(how,t,f)
     {function _Po_(bs)
       {var _Pr_=caml_call1(Core_kernel_List[47],bs);
        return caml_call1(Core_kernel_Sequence[103],_Pr_)}
      function _Pp_(bs,maybe_v)
       {if(maybe_v){var b=maybe_v[1];return [0,b,bs]}return bs}
      var
       _Pq_=
        fold_mapi(how,t,0,function(i,a){return caml_call2(f,i,a)},_Pp_);
      return caml_call2(include$20[4][3],_Pq_,_Po_)}
    function concat_mapi$3(how,t,f)
     {var _Pn_=Core_kernel_Sequence[62];
      return caml_call2(_je_,mapi$4(how,t,f),_Pn_)}
    function filteri$4(how,t,f)
     {return filter_mapi$4
              (how,
               t,
               function(i,a)
                {function _Pl_(param){return 0 === param?0:[0,a]}
                 var _Pm_=caml_call2(f,i,a);
                 return caml_call2(include$20[4][3],_Pm_,_Pl_)})}
    function iter$19(how,t,f)
     {return iteri$4(how,t,function(param,a){return caml_call1(f,a)})}
    function map$26(how,t,f)
     {return mapi$4(how,t,function(param,a){return caml_call1(f,a)})}
    function filter$4(how,t,f)
     {return filteri$4(how,t,function(param,a){return caml_call1(f,a)})}
    function filter_map$4(how,t,f)
     {return filter_mapi$4(how,t,function(param,a){return caml_call1(f,a)})}
    function concat_map$3(how,t,f)
     {return concat_mapi$3(how,t,function(param,a){return caml_call1(f,a)})}
    function find_map$3(t,f)
     {return find_mapi$3(t,function(param,a){return caml_call1(f,a)})}
    function exists$15(t,f)
     {return existsi$3(t,function(param,a){return caml_call1(f,a)})}
    function for_all$15(t,f)
     {return for_alli$3(t,function(param,a){return caml_call1(f,a)})}
    function init$3(how,n,f)
     {function _Pj_(_Pk_){return _Pk_}
      return map$26(how,caml_call2(Core_kernel_Sequence[75],n,_Pj_),f)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$127);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Async_kernel_Deferred_sequence=
      [0,
       foldi$3,
       fold$19,
       find$4,
       findi$3,
       find_map$3,
       find_mapi$3,
       exists$15,
       existsi$3,
       for_all$15,
       for_alli$3,
       all$6,
       all_unit$3,
       init$3,
       iter$19,
       iteri$4,
       map$26,
       mapi$4,
       filter$4,
       filteri$4,
       filter_map$4,
       filter_mapi$4,
       concat_map$3,
       concat_mapi$3];
    caml_register_global
     (2691,Async_kernel_Deferred_sequence,"Async_kernel__Deferred_sequence");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_async_kernel$128);
    caml_call1
     (Expect_test_collector[4][1],cst_src_monad_sequence_unit_tests_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$129,cst$54);
    var Deferred$8=0;
    function Make(M,S)
     {function deferred_result(d)
       {var deferred_result=[0,0];
        upon$1(d,function(v){deferred_result[1] = [0,v];return 0});
        stabilize$0(0);
        if(caml_call1(Core_kernel[356],deferred_result[1]))return 0;
        throw [0,Assert_failure,_nQ_]}
      var _MU_=S[13];
      function test
       (method_deferred,
        method_base,
        f,
        transform_f,
        skip_parallel_check,
        handle_results)
       {var rand=caml_call1(Base_Random[16][2],[0,12345]);
        function _O6_(how)
         {if(typeof how === "number")
           var max_concurrent_jobs=-676829465 <= how?1e5:1;
          else
           var x=how[2],max_concurrent_jobs=x;
          var length=0;
          a:
          for(;;)
           {var reps=0;
            for(;;)
             {var
               parallel_cur=[0,0],
               parallel_max=[0,0],
               _O8_=
                function(i)
                 {var r=caml_call2(Base_Random[16][6],rand,10);
                  return 0 === r?i:r - 1 | 0},
               array=caml_call2(Core_kernel_Array[36],length,_O8_),
               _O9_=
                function(length,parallel_max,array)
                  {return function(deferred_sequence)
                    {var
                      _Pd_=parallel_max[1],
                      expect=
                       caml_call2(Core_kernel[166],max_concurrent_jobs,length),
                      sexpifier=Core_kernel[455],
                      comparator=Core_kernel[451];
                     caml_call8
                      (Ppx_assert_lib_Runtime[3],
                       pos$6,
                       sexpifier,
                       comparator,
                       0,
                       0,
                       0,
                       expect,
                       _Pd_);
                     var parallel_cur=[0,0],parallel_max$0=[0,0];
                     function _Pe_(i){return caml_check_bound(array,i)[i + 1]}
                     var base_sequence=caml_call2(M[5],length,_Pe_);
                     function _Pf_(deferred_result)
                      {var base_result=caml_call2(method_base,base_sequence,f);
                       caml_call2(handle_results,deferred_result,base_result);
                       var _Ph_=1 - skip_parallel_check;
                       if(_Ph_)
                        {var
                          _Pi_=parallel_max$0[1],
                          expect=
                           caml_call2(Core_kernel[166],max_concurrent_jobs,length),
                          sexpifier=Core_kernel[455],
                          comparator=Core_kernel[451];
                         return caml_call8
                                 (Ppx_assert_lib_Runtime[3],
                                  pos$7,
                                  sexpifier,
                                  comparator,
                                  0,
                                  0,
                                  0,
                                  expect,
                                  _Pi_)}
                       return _Ph_}
                     var
                      f$0=caml_call3(transform_f,f,parallel_cur,parallel_max$0),
                      _Pg_=
                       caml_call3(method_deferred,[0,how],deferred_sequence,f$0);
                     return caml_call2(include$20[4][3],_Pg_,_Pf_)}}
                 (length,parallel_max,array),
               _O__=
                function(parallel_cur,parallel_max,array)
                  {return function(i)
                    {parallel_cur[1]++;
                     parallel_max[1]
                     =
                     caml_call2(Core_kernel[167],parallel_max[1],parallel_cur[1]);
                     function _Pb_(param)
                      {parallel_cur[1] += -1;
                       return caml_call1(_jc_,caml_check_bound(array,i)[i + 1])}
                     var _Pc_=yield$3(t$5(0));
                     return caml_call2(include$20[4][2],_Pc_,_Pb_)}}
                 (parallel_cur,parallel_max,array),
               _O$_=caml_call3(S[13],[0,how],length,_O__);
              deferred_result(caml_call2(include$20[4][2],_O$_,_O9_));
              var _Pa_=reps + 1 | 0;
              if(50 !== reps){var reps=_Pa_;continue}
              var _O7_=length + 1 | 0;
              if(8 !== length){var length=_O7_;continue a}
              return 0}}}
        return caml_call2(Core_kernel_List[19],hows,_O6_)}
      function test1(method_deferred,method_base,f,handle_results)
       {var _O3_=0;
        return test
                (method_deferred,
                 method_base,
                 f,
                 function(f,parallel_cur,parallel_max,x)
                  {parallel_cur[1]++;
                   parallel_max[1]
                   =
                   caml_call2(Core_kernel[167],parallel_max[1],parallel_cur[1]);
                   function _O4_(param)
                    {parallel_cur[1] += -1;
                     return caml_call1(_jc_,caml_call1(f,x))}
                   var _O5_=yield$3(t$5(0));
                   return caml_call2(include$20[4][2],_O5_,_O4_)},
                 _O3_,
                 handle_results)}
      function test2(method_deferred,method_base,f,handle_results)
       {var _O0_=0;
        return test
                (method_deferred,
                 method_base,
                 f,
                 function(f,parallel_cur,parallel_max,x,y)
                  {parallel_cur[1]++;
                   parallel_max[1]
                   =
                   caml_call2(Core_kernel[167],parallel_max[1],parallel_cur[1]);
                   function _O1_(param)
                    {parallel_cur[1] += -1;
                     return caml_call1(_jc_,caml_call2(f,x,y))}
                   var _O2_=yield$3(t$5(0));
                   return caml_call2(include$20[4][2],_O2_,_O1_)},
                 _O0_,
                 handle_results)}
      function test1_sequential(method_deferred,method_base,f,handle_results)
       {var _OW_=1;
        function _OX_(f,param,_OZ_,x){return caml_call1(_jc_,caml_call1(f,x))}
        return test
                (function(_OY_){return method_deferred},
                 method_base,
                 f,
                 _OX_,
                 _OW_,
                 handle_results)}
      function test2_sequential(method_deferred,method_base,f,handle_results)
       {var _OS_=1;
        function _OT_(f,param,_OV_,x,y)
         {return caml_call1(_jc_,caml_call2(f,x,y))}
        return test
                (function(_OU_){return method_deferred},
                 method_base,
                 f,
                 _OT_,
                 _OS_,
                 handle_results)}
      var _MV_=S[16];
      function _MW_(param)
       {function _OQ_(got,expect)
         {var
           sexpifier=caml_call1(M[2],Core_kernel[455]),
           equal=0,
           message=0,
           here=0;
          function comparator(a_005,b_006)
           {return caml_call3(M[1],Core_kernel[451],a_005,b_006)}
          return caml_call8
                  (Ppx_assert_lib_Runtime[3],
                   pos$8,
                   sexpifier,
                   comparator,
                   here,
                   message,
                   equal,
                   expect,
                   got)}
        function _OR_(x){return x * 2 | 0}
        return test1(S[16],M[8],_OR_,_OQ_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test1_S_map_M_map_f_fun_x_x_2_hand,
        0,
        cst_src_monad_sequence_unit_tests_ml$0,
        192,
        2,
        198,
        _MW_);
      var _MX_=S[17];
      function _MY_(param)
       {function _OO_(got,expect)
         {var
           sexpifier=caml_call1(M[2],Core_kernel[455]),
           equal=0,
           message=0,
           here=0;
          function comparator(a_009,b_010)
           {return caml_call3(M[1],Core_kernel[451],a_009,b_010)}
          return caml_call8
                  (Ppx_assert_lib_Runtime[3],
                   pos$9,
                   sexpifier,
                   comparator,
                   here,
                   message,
                   equal,
                   expect,
                   got)}
        function _OP_(i,x){return (x * 2 | 0) ^ i}
        return test2(S[17],M[9],_OP_,_OO_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test2_S_mapi_M_mapi_f_fun_i_fun_x_x,
        0,
        cst_src_monad_sequence_unit_tests_ml$1,
        200,
        2,
        209,
        _MY_);
      var _MZ_=S[18];
      function _M0_(param)
       {function _OM_(got,expect)
         {var
           sexpifier=caml_call1(M[2],Core_kernel[455]),
           equal=0,
           message=0,
           here=0;
          function comparator(a_013,b_014)
           {return caml_call3(M[1],Core_kernel[451],a_013,b_014)}
          return caml_call8
                  (Ppx_assert_lib_Runtime[3],
                   pos$10,
                   sexpifier,
                   comparator,
                   here,
                   message,
                   equal,
                   expect,
                   got)}
        function _ON_(x){return 0 === (x % 2 | 0)?1:0}
        return test1(S[18],M[10],_ON_,_OM_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test1_S_filter_M_filter_f_fun_x_x_mod_2,
        0,
        cst_src_monad_sequence_unit_tests_ml$2,
        208,
        2,
        210,
        _M0_);
      var _M1_=S[19];
      function _M2_(param)
       {function _OK_(got,expect)
         {var
           sexpifier=caml_call1(M[2],Core_kernel[455]),
           equal=0,
           message=0,
           here=0;
          function comparator(a_017,b_018)
           {return caml_call3(M[1],Core_kernel[451],a_017,b_018)}
          return caml_call8
                  (Ppx_assert_lib_Runtime[3],
                   pos$11,
                   sexpifier,
                   comparator,
                   here,
                   message,
                   equal,
                   expect,
                   got)}
        function _OL_(i,x){return (x % 2 | 0) === (i % 2 | 0)?1:0}
        return test2(S[19],M[11],_OL_,_OK_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test2_S_filteri_M_filteri_f_fun_i_fun_x,
        0,
        cst_src_monad_sequence_unit_tests_ml$3,
        216,
        2,
        220,
        _M2_);
      var _M3_=S[20];
      function _M4_(param)
       {function _OI_(got,expect)
         {var
           sexpifier=caml_call1(M[2],Core_kernel[455]),
           equal=0,
           message=0,
           here=0;
          function comparator(a_021,b_022)
           {return caml_call3(M[1],Core_kernel[451],a_021,b_022)}
          return caml_call8
                  (Ppx_assert_lib_Runtime[3],
                   pos$12,
                   sexpifier,
                   comparator,
                   here,
                   message,
                   equal,
                   expect,
                   got)}
        function _OJ_(x){return 0 === (x % 2 | 0)?[0,x + 1 | 0]:0}
        return test1(S[20],M[12],_OJ_,_OI_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test1_S_filter_map_M_filter_map_f_fun_x,
        0,
        cst_src_monad_sequence_unit_tests_ml$4,
        224,
        2,
        255,
        _M4_);
      var _M5_=S[21];
      function _M6_(param)
       {function _OG_(got,expect)
         {var
           sexpifier=caml_call1(M[2],Core_kernel[455]),
           equal=0,
           message=0,
           here=0;
          function comparator(a_025,b_026)
           {return caml_call3(M[1],Core_kernel[451],a_025,b_026)}
          return caml_call8
                  (Ppx_assert_lib_Runtime[3],
                   pos$13,
                   sexpifier,
                   comparator,
                   here,
                   message,
                   equal,
                   expect,
                   got)}
        function _OH_(i,x){return (x % 2 | 0) === (i % 2 | 0)?[0,x + i | 0]:0}
        return test2(S[21],M[13],_OH_,_OG_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test2_S_filter_mapi_M_filter_mapi_f_fun_i,
        0,
        cst_src_monad_sequence_unit_tests_ml$5,
        233,
        2,
        265,
        _M6_);
      var _M7_=S[22];
      function _M8_(param)
       {function _OD_(got,expect)
         {var
           sexpifier=caml_call1(M[2],Core_kernel[455]),
           equal=0,
           message=0,
           here=0;
          function comparator(a_029,b_030)
           {return caml_call3(M[1],Core_kernel[451],a_029,b_030)}
          return caml_call8
                  (Ppx_assert_lib_Runtime[3],
                   pos$14,
                   sexpifier,
                   comparator,
                   here,
                   message,
                   equal,
                   expect,
                   got)}
        function _OE_(x)
         {function _OF_(j){return x + j | 0}
          return caml_call2(M[5],x % 3 | 0,_OF_)}
        return test1(S[22],M[14],_OE_,_OD_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test1_S_concat_map_M_concat_map_f_fun_x,
        0,
        cst_src_monad_sequence_unit_tests_ml$6,
        242,
        2,
        243,
        _M8_);
      var _M9_=S[23];
      function _M__(param)
       {function _OA_(got,expect)
         {var
           sexpifier=caml_call1(M[2],Core_kernel[455]),
           equal=0,
           message=0,
           here=0;
          function comparator(a_033,b_034)
           {return caml_call3(M[1],Core_kernel[451],a_033,b_034)}
          return caml_call8
                  (Ppx_assert_lib_Runtime[3],
                   pos$15,
                   sexpifier,
                   comparator,
                   here,
                   message,
                   equal,
                   expect,
                   got)}
        function _OB_(i,x)
         {function _OC_(j){return (x + i | 0) + j | 0}
          return caml_call2(M[5],(i + x | 0) % 3 | 0,_OC_)}
        return test2(S[23],M[15],_OB_,_OA_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test2_S_concat_mapi_M_concat_mapi_f_fun_i,
        0,
        cst_src_monad_sequence_unit_tests_ml$7,
        250,
        2,
        261,
        _M__);
      var _M$_=S[3];
      function _Na_(param)
       {function _Oy_(got,expect)
         {var
           sexpifier=caml_call1(Core_kernel[542],Core_kernel[455]),
           equal=0,
           message=0,
           here=0;
          function comparator(a_037,b_038)
           {return caml_call3(Core_kernel[539],Core_kernel[451],a_037,b_038)}
          return caml_call8
                  (Ppx_assert_lib_Runtime[3],
                   pos$16,
                   sexpifier,
                   comparator,
                   here,
                   message,
                   equal,
                   expect,
                   got)}
        function _Oz_(x){return 0 === (x % 2 | 0)?1:0}
        return test1_sequential(S[3],M[16],_Oz_,_Oy_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test1_sequential_S_find_M_find_f_fun_x,
        0,
        cst_src_monad_sequence_unit_tests_ml$8,
        259,
        2,
        220,
        _Na_);
      var _Nb_=S[4];
      function _Nc_(param)
       {function _Ou_(got,expect)
         {var equal=0,message=0,here=0;
          function _Ow_(param)
           {var
             v1=param[2],
             v0=param[1],
             v0$0=caml_call1(Core_kernel[455],v0),
             v1$0=caml_call1(Core_kernel[455],v1);
            return [1,[0,v0$0,[0,v1$0,0]]]}
          var sexpifier=caml_call1(Core_kernel[542],_Ow_);
          function comparator(a_041,b_042)
           {function _Ox_(a_043,b_044)
             {var
               t_046=a_043[2],
               t_045=a_043[1],
               t_048=b_044[2],
               t_047=b_044[1],
               n=caml_call2(Core_kernel[451],t_045,t_047);
              return 0 === n?caml_call2(Core_kernel[451],t_046,t_048):n}
            return caml_call3(Core_kernel[539],_Ox_,a_041,b_042)}
          return caml_call8
                  (Ppx_assert_lib_Runtime[3],
                   pos$17,
                   sexpifier,
                   comparator,
                   here,
                   message,
                   equal,
                   expect,
                   got)}
        function _Ov_(i,x){return (x % 2 | 0) === (i % 2 | 0)?1:0}
        return test2_sequential(S[4],M[17],_Ov_,_Ou_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test2_sequential_S_findi_M_findi_f_fun_i,
        0,
        cst_src_monad_sequence_unit_tests_ml$9,
        267,
        2,
        238,
        _Nc_);
      var _Nd_=S[5];
      function _Ne_(param)
       {function _Os_(got,expect)
         {var
           sexpifier=caml_call1(Core_kernel[542],Core_kernel[455]),
           equal=0,
           message=0,
           here=0;
          function comparator(a_049,b_050)
           {return caml_call3(Core_kernel[539],Core_kernel[451],a_049,b_050)}
          return caml_call8
                  (Ppx_assert_lib_Runtime[3],
                   pos$18,
                   sexpifier,
                   comparator,
                   here,
                   message,
                   equal,
                   expect,
                   got)}
        function _Ot_(x){return 0 === (x % 2 | 0)?[0,x + 1 | 0]:0}
        return test1_sequential(S[5],M[18],_Ot_,_Os_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test1_sequential_S_find_map_M_find_map_f,
        0,
        cst_src_monad_sequence_unit_tests_ml$10,
        276,
        2,
        265,
        _Ne_);
      var _Nf_=S[6];
      function _Ng_(param)
       {function _Oq_(got,expect)
         {var
           sexpifier=caml_call1(Core_kernel[542],Core_kernel[455]),
           equal=0,
           message=0,
           here=0;
          function comparator(a_053,b_054)
           {return caml_call3(Core_kernel[539],Core_kernel[451],a_053,b_054)}
          return caml_call8
                  (Ppx_assert_lib_Runtime[3],
                   pos$19,
                   sexpifier,
                   comparator,
                   here,
                   message,
                   equal,
                   expect,
                   got)}
        function _Or_(i,x){return (x % 2 | 0) === (i % 2 | 0)?[0,x + i | 0]:0}
        return test2_sequential(S[6],M[19],_Or_,_Oq_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test2_sequential_S_find_mapi_M_find_mapi_f,
        0,
        cst_src_monad_sequence_unit_tests_ml$11,
        285,
        2,
        275,
        _Ng_);
      var _Nh_=S[2];
      function _Ni_(param)
       {function _Oj_(got,expect)
         {var sexpifier=Core_kernel[455],comparator=Core_kernel[451];
          return caml_call8
                  (Ppx_assert_lib_Runtime[3],
                   pos$20,
                   sexpifier,
                   comparator,
                   0,
                   0,
                   0,
                   expect,
                   got)}
        function _Ok_(acc,x){return acc + x | 0}
        var _Ol_=M[4];
        function _Om_(_Op_){return caml_call2(_Ol_,_Op_,10)}
        var _On_=S[2];
        return test2_sequential
                (function(_Oo_){return caml_call2(_On_,_Oo_,10)},
                 _Om_,
                 _Ok_,
                 _Oj_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test2_sequential_S_fold_init_10_M_fold_i,
        0,
        cst_src_monad_sequence_unit_tests_ml$12,
        294,
        2,
        235,
        _Ni_);
      var _Nj_=S[1];
      function _Nk_(param)
       {function handle_results(got,expect)
         {var sexpifier=Core_kernel[455],comparator=Core_kernel[451];
          return caml_call8
                  (Ppx_assert_lib_Runtime[3],
                   pos$21,
                   sexpifier,
                   comparator,
                   0,
                   0,
                   0,
                   expect,
                   got)}
        function f(i,acc,x){return acc + (x ^ i) | 0}
        var _Od_=M[3];
        function method_base(_Oi_){return caml_call2(_Od_,_Oi_,10)}
        var _Oe_=S[1];
        function method_deferred(_Oh_){return caml_call2(_Oe_,_Oh_,10)}
        var _Ob_=1;
        function _Oc_(f,param,_Og_,x,y,z)
         {return caml_call1(_jc_,caml_call3(f,x,y,z))}
        return test
                (function(_Of_){return method_deferred},
                 method_base,
                 f,
                 _Oc_,
                 _Ob_,
                 handle_results)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test3_sequential_S_foldi_init_10_M_foldi,
        0,
        cst_src_monad_sequence_unit_tests_ml$13,
        302,
        2,
        254,
        _Nk_);
      var _Nl_=S[9];
      function _Nm_(param)
       {function _N$_(got,expect)
         {var sexpifier=Core_kernel[410],comparator=Core_kernel[406];
          return caml_call8
                  (Ppx_assert_lib_Runtime[3],
                   pos$22,
                   sexpifier,
                   comparator,
                   0,
                   0,
                   0,
                   expect,
                   got)}
        function _Oa_(x){return 0 !== (x % 5 | 0)?1:0}
        return test1_sequential(S[9],M[22],_Oa_,_N$_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test1_sequential_S_for_all_M_for_all_f_fun,
        0,
        cst_src_monad_sequence_unit_tests_ml$14,
        311,
        2,
        221,
        _Nm_);
      var _Nn_=S[10];
      function _No_(param)
       {function _N9_(got,expect)
         {var sexpifier=Core_kernel[410],comparator=Core_kernel[406];
          return caml_call8
                  (Ppx_assert_lib_Runtime[3],
                   pos$23,
                   sexpifier,
                   comparator,
                   0,
                   0,
                   0,
                   expect,
                   got)}
        function _N__(i,x){return (x % 5 | 0) !== (i % 5 | 0)?1:0}
        return test2_sequential(S[10],M[23],_N__,_N9_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test2_sequential_S_for_alli_M_for_alli_f,
        0,
        cst_src_monad_sequence_unit_tests_ml$15,
        319,
        2,
        231,
        _No_);
      var _Np_=S[7];
      function _Nq_(param)
       {function _N7_(got,expect)
         {var sexpifier=Core_kernel[410],comparator=Core_kernel[406];
          return caml_call8
                  (Ppx_assert_lib_Runtime[3],
                   pos$24,
                   sexpifier,
                   comparator,
                   0,
                   0,
                   0,
                   expect,
                   got)}
        function _N8_(x){return 0 === (x % 5 | 0)?1:0}
        return test1_sequential(S[7],M[20],_N8_,_N7_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test1_sequential_S_exists_M_exists_f_fun_x,
        0,
        cst_src_monad_sequence_unit_tests_ml$16,
        327,
        2,
        218,
        _Nq_);
      var _Nr_=S[8];
      function _Ns_(param)
       {function _N5_(got,expect)
         {var sexpifier=Core_kernel[410],comparator=Core_kernel[406];
          return caml_call8
                  (Ppx_assert_lib_Runtime[3],
                   pos$25,
                   sexpifier,
                   comparator,
                   0,
                   0,
                   0,
                   expect,
                   got)}
        function _N6_(i,x){return (x % 5 | 0) === (i % 5 | 0)?1:0}
        return test2_sequential(S[8],M[21],_N6_,_N5_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test2_sequential_S_existsi_M_existsi_f_fu,
        0,
        cst_src_monad_sequence_unit_tests_ml$17,
        335,
        2,
        228,
        _Ns_);
      function _Nt_(param)
       {function _N3_(got,expect)
         {var sexpifier=Core_kernel[598],comparator=Core_kernel[594];
          return caml_call8
                  (Ppx_assert_lib_Runtime[3],
                   pos$26,
                   sexpifier,
                   comparator,
                   0,
                   0,
                   0,
                   expect,
                   got)}
        function _N4_(param){return 0}
        return test1(S[14],M[6],_N4_,_N3_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test1_S_iter_M_iter_f_fun_handl,
        0,
        cst_src_monad_sequence_unit_tests_ml$18,
        342,
        2,
        194,
        _Nt_);
      function _Nu_(param)
       {function _N0_(got,expect)
         {var sexpifier=Core_kernel[598],comparator=Core_kernel[594];
          return caml_call8
                  (Ppx_assert_lib_Runtime[3],
                   pos$27,
                   sexpifier,
                   comparator,
                   0,
                   0,
                   0,
                   expect,
                   got)}
        function _N1_(param,_N2_){return 0}
        return test2(S[15],M[7],_N1_,_N0_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test2_S_iteri_M_iteri_f_fun_fun,
        0,
        cst_src_monad_sequence_unit_tests_ml$19,
        348,
        2,
        198,
        _Nu_);
      function iter_lots_of_random_sequences(f)
       {var rand=caml_call1(Base_Random[16][2],[0,67890]),length=0;
        a:
        for(;;)
         {var reps=0;
          for(;;)
           {var
             _NX_=
              function(i)
               {var r=caml_call2(Base_Random[16][6],rand,10);
                return 0 === r?i:r - 1 | 0},
             array=caml_call2(Core_kernel_Array[36],length,_NX_),
             _NY_=
              function(array)
                {return function(i){return caml_check_bound(array,i)[i + 1]}}
               (array),
             sequence=caml_call2(M[5],length,_NY_);
            caml_call1(f,sequence);
            var _NZ_=reps + 1 | 0;
            if(500 !== reps){var reps=_NZ_;continue}
            var _NW_=length + 1 | 0;
            if(10 !== length){var length=_NW_;continue a}
            return 0}}}
      var _Nv_=S[14];
      function _Nw_(param)
       {return iter_lots_of_random_sequences
                (function(sequence)
                  {var elts=[0,0],elts2=[0,0];
                   function _NS_(x){elts[1] = [0,x,elts[1]];return unit}
                   deferred_result(caml_call3(S[14],0,sequence,_NS_));
                   function _NT_(x){elts2[1] = [0,x,elts2[1]];return 0}
                   caml_call2(M[6],sequence,_NT_);
                   var
                    _NU_=elts[1],
                    _NV_=elts2[1],
                    sexpifier=caml_call1(Core_kernel[513],Core_kernel[455]),
                    equal=0,
                    message=0,
                    here=0;
                   function comparator(a_073,b_074)
                    {return caml_call3
                             (Core_kernel[510],Core_kernel[451],a_073,b_074)}
                   return caml_call8
                           (Ppx_assert_lib_Runtime[3],
                            pos$28,
                            sexpifier,
                            comparator,
                            here,
                            message,
                            equal,
                            _NV_,
                            _NU_)})}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_iter_lots_of_random_sequences_f_fun_seque,
        0,
        cst_src_monad_sequence_unit_tests_ml$20,
        370,
        2,
        385,
        _Nw_);
      var _Nx_=S[15];
      function _Ny_(param)
       {return iter_lots_of_random_sequences
                (function(sequence)
                  {var elts=[0,0],elts2=[0,0];
                   function _NM_(i,x)
                    {elts[1] = [0,[0,i,x],elts[1]];return unit}
                   deferred_result(caml_call3(S[15],0,sequence,_NM_));
                   function _NN_(i,x){elts2[1] = [0,[0,i,x],elts2[1]];return 0}
                   caml_call2(M[7],sequence,_NN_);
                   var _NO_=elts[1],_NP_=elts2[1],equal=0,message=0,here=0;
                   function _NQ_(param)
                    {var
                      v1=param[2],
                      v0=param[1],
                      v0$0=caml_call1(Core_kernel[455],v0),
                      v1$0=caml_call1(Core_kernel[455],v1);
                     return [1,[0,v0$0,[0,v1$0,0]]]}
                   var sexpifier=caml_call1(Core_kernel[513],_NQ_);
                   function comparator(a_077,b_078)
                    {function _NR_(a_079,b_080)
                      {var
                        t_082=a_079[2],
                        t_081=a_079[1],
                        t_084=b_080[2],
                        t_083=b_080[1],
                        n=caml_call2(Core_kernel[451],t_081,t_083);
                       return 0 === n?caml_call2(Core_kernel[451],t_082,t_084):n}
                     return caml_call3(Core_kernel[510],_NR_,a_077,b_078)}
                   return caml_call8
                           (Ppx_assert_lib_Runtime[3],
                            pos$29,
                            sexpifier,
                            comparator,
                            here,
                            message,
                            equal,
                            _NP_,
                            _NO_)})}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_iter_lots_of_random_sequences_f_fun_seque$0,
        0,
        cst_src_monad_sequence_unit_tests_ml$21,
        386,
        2,
        407,
        _Ny_);
      var _Nz_=S[11],_NA_=S[12];
      function _NB_(param)
       {return iter_lots_of_random_sequences
                (function(expect)
                  {var sequence2=caml_call2(M[8],expect,_jc_);
                   function _NK_(got)
                    {var
                      sexpifier=caml_call1(M[2],Core_kernel[455]),
                      equal=0,
                      message=0,
                      here=0;
                     function comparator(a_085,b_086)
                      {return caml_call3(M[1],Core_kernel[451],a_085,b_086)}
                     return caml_call8
                             (Ppx_assert_lib_Runtime[3],
                              pos$30,
                              sexpifier,
                              comparator,
                              here,
                              message,
                              equal,
                              expect,
                              got)}
                   var _NL_=caml_call1(S[11],sequence2);
                   return deferred_result
                           (caml_call2(include$20[4][3],_NL_,_NK_))})}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_iter_lots_of_random_sequences_f_fun_seque$1,
        0,
        cst_src_monad_sequence_unit_tests_ml$22,
        405,
        2,
        267,
        _NB_);
      function _NC_(param)
       {return iter_lots_of_random_sequences
                (function(sequence)
                  {function _ND_(acc,param){return acc + 1 | 0}
                   var length=caml_call3(M[4],sequence,0,_ND_);
                   function _NE_(acc,x)
                    {return caml_call2(Core_kernel_Int[109],acc,x)}
                   var max=caml_call3(M[4],sequence,0,_NE_);
                   function _NF_(param){return caml_call1(create$12,0)}
                   var ivars=caml_call2(Core_kernel_Array[36],length,_NF_);
                   function _NG_(i,param)
                    {return caml_check_bound(ivars,i)[i + 1]}
                   var
                    deferreds=caml_call2(M[9],sequence,_NG_),
                    done_waiting=caml_call1(S[12],deferreds);
                   if(0 !== length)
                    if(is_determined(done_waiting))
                     throw [0,Assert_failure,_nT_];
                   function _NH_(i,x)
                    {var _NJ_=x !== max?1:0;
                     return _NJ_?fill(caml_check_bound(ivars,i)[i + 1],0):_NJ_}
                   caml_call2(M[7],sequence,_NH_);
                   deferred_result(unit);
                   if(is_determined(done_waiting) === (0 === length?1:0))
                    {var
                      _NI_=
                       function(i,param)
                        {return fill_if_empty(caml_check_bound(ivars,i)[i + 1],0)};
                     caml_call2(M[7],sequence,_NI_);
                     deferred_result(unit);
                     if(is_determined(done_waiting))return 0;
                     throw [0,Assert_failure,_nR_]}
                   throw [0,Assert_failure,_nS_]})}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_iter_lots_of_random_sequences_f_fun_seque$2,
        0,
        cst_src_monad_sequence_unit_tests_ml$23,
        413,
        2,
        880,
        _NC_);
      return [0,
              _Nj_,
              _Nh_,
              _M$_,
              _Nb_,
              _Nd_,
              _Nf_,
              _Np_,
              _Nr_,
              _Nl_,
              _Nn_,
              _Nz_,
              _NA_,
              _MU_,
              _Nv_,
              _Nx_,
              _MV_,
              _MX_,
              _MZ_,
              _M1_,
              _M3_,
              _M5_,
              _M7_,
              _M9_]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$130);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Async_kernel_Monad_sequence_unit_tests=[0,Deferred$8,Make];
    caml_register_global
     (2693,
      Async_kernel_Monad_sequence_unit_tests,
      "Async_kernel__Monad_sequence_unit_tests");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_async_kernel$131);
    caml_call1(Expect_test_collector[4][1],cst_src_deferred_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$132,cst$55);
    var
     Array=0,
     List=0,
     Map=0,
     Memo=0,
     Option=0,
     Or_error=0,
     Queue=0,
     Result=0,
     Sequence=0;
    function _nU_(param)
     {Make
       ([0,
         Core_kernel_Array[11],
         Core_kernel_Array[13],
         Core_kernel_Array[55],
         Core_kernel_Array[20],
         Core_kernel_Array[36],
         Core_kernel_Array[19],
         Core_kernel_Array[53],
         Core_kernel_Array[48],
         Core_kernel_Array[54],
         Core_kernel_Array[79],
         Core_kernel_Array[80],
         Core_kernel_Array[69],
         Core_kernel_Array[70],
         Core_kernel_Array[61],
         Core_kernel_Array[62],
         Core_kernel_Array[27],
         Core_kernel_Array[91],
         Core_kernel_Array[28],
         Core_kernel_Array[93],
         Core_kernel_Array[23],
         Core_kernel_Array[72],
         Core_kernel_Array[24],
         Core_kernel_Array[71]],
        Async_kernel_Deferred_array);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst_Deferred_array_tests,
      0,
      cst_src_deferred_ml$0,
      13,
      0,
      150,
      _nU_);
    function _nV_(param)
     {Make
       ([0,
         Core_kernel_Sequence[2],
         Core_kernel_Sequence[3],
         Core_kernel_Sequence[21],
         Core_kernel_Sequence[8],
         Core_kernel_Sequence[75],
         Core_kernel_Sequence[7],
         Core_kernel_Sequence[22],
         Core_kernel_Sequence[32],
         Core_kernel_Sequence[50],
         Core_kernel_Sequence[52],
         Core_kernel_Sequence[51],
         Core_kernel_Sequence[76],
         Core_kernel_Sequence[77],
         Core_kernel_Sequence[63],
         Core_kernel_Sequence[64],
         Core_kernel_Sequence[15],
         Core_kernel_Sequence[25],
         Core_kernel_Sequence[16],
         Core_kernel_Sequence[26],
         Core_kernel_Sequence[11],
         Core_kernel_Sequence[23],
         Core_kernel_Sequence[12],
         Core_kernel_Sequence[60]],
        Async_kernel_Deferred_sequence);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst_Deferred_sequence_tests,
      0,
      cst_src_deferred_ml$1,
      20,
      0,
      159,
      _nV_);
    function _nW_(param)
     {var
       sexp_of_t=Core_kernel_Queue[11],
       iter=Core_kernel_Queue[15],
       fold=Core_kernel_Queue[16],
       exists=Core_kernel_Queue[19],
       for_all=Core_kernel_Queue[20],
       find=Core_kernel_Queue[23],
       find_map=Core_kernel_Queue[24],
       to_list=Core_kernel_Queue[25],
       foldi=Core_kernel_Queue[29],
       iteri=Core_kernel_Queue[30],
       existsi=Core_kernel_Queue[31],
       for_alli=Core_kernel_Queue[32],
       findi=Core_kernel_Queue[34],
       find_mapi=Core_kernel_Queue[35],
       init=Core_kernel_Queue[39],
       map=Core_kernel_Queue[48],
       mapi=Core_kernel_Queue[49],
       filter_map=Core_kernel_Queue[52],
       filter_mapi=Core_kernel_Queue[53],
       filter=Core_kernel_Queue[54],
       filteri=Core_kernel_Queue[55],
       _MQ_=Core_kernel_Queue[50],
       _MR_=Core_kernel_Queue[51];
      function compare(cmp,t1,t2)
       {var _MS_=caml_call1(to_list,t2),_MT_=caml_call1(to_list,t1);
        return caml_call3(Core_kernel_List[12],cmp,_MT_,_MS_)}
      function concat_map(t,f)
       {return caml_call2
                (_MQ_,
                 t,
                 function(x){return caml_call1(to_list,caml_call1(f,x))})}
      function concat_mapi(t,f)
       {return caml_call2
                (_MR_,
                 t,
                 function(i,x){return caml_call1(to_list,caml_call2(f,i,x))})}
      Make
       ([0,
         compare,
         sexp_of_t,
         foldi,
         fold,
         init,
         iter,
         iteri,
         map,
         mapi,
         filter,
         filteri,
         filter_map,
         filter_mapi,
         concat_map,
         concat_mapi,
         find,
         findi,
         find_map,
         find_mapi,
         exists,
         existsi,
         for_all,
         for_alli],
        Async_kernel_Deferred_queue);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst_Deferred_queue_tests,
      0,
      cst_src_deferred_ml$2,
      27,
      0,
      428,
      _nW_);
    function _nX_(param)
     {Make
       ([0,
         Core_kernel_List[12],
         Core_kernel_List[15],
         Core_kernel_List[106],
         Core_kernel_List[20],
         Core_kernel_List[128],
         Core_kernel_List[19],
         Core_kernel_List[105],
         Core_kernel_List[84],
         Core_kernel_List[103],
         Core_kernel_List[64],
         Core_kernel_List[66],
         Core_kernel_List[131],
         Core_kernel_List[132],
         Core_kernel_List[89],
         Core_kernel_List[90],
         Core_kernel_List[26],
         Core_kernel_List[78],
         Core_kernel_List[27],
         Core_kernel_List[81],
         Core_kernel_List[23],
         Core_kernel_List[61],
         Core_kernel_List[24],
         Core_kernel_List[58]],
        Async_kernel_Deferred_list);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst_Deferred_list_tests,
      0,
      cst_src_deferred_ml$3,
      40,
      0,
      147,
      _nX_);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$133);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     _nY_=[0,Infix[1],Infix[2],Infix[3]],
     Async_kernel_Deferred=
      [0,
       sexp_of_t$33,
       invariant$9,
       create$13,
       upon$1,
       peek$0,
       value_exn$0,
       is_determined,
       _i9_,
       _i8_,
       M[3],
       bind$0,
       return$0,
       map$12,
       join,
       ignore_m,
       all_ignore,
       include$20,
       _nY_,
       unit,
       ignore_m,
       never,
       both$0,
       all$0,
       all_ignore,
       any,
       any_unit,
       don_t_wait_for,
       Choice,
       choice,
       enabled,
       choose,
       for$0,
       repeat_until_finished,
       forever,
       ok,
       Array,
       List,
       Map,
       Memo,
       Queue,
       Sequence,
       Option,
       Or_error,
       Result];
    caml_register_global(2694,Async_kernel_Deferred,"Async_kernel__Deferred");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_async_kernel$134);
    caml_call1(Expect_test_collector[4][1],cst_src_throttle_debug_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$135,cst$56);
    function Debug$0(Throttle)
     {var Debug=caml_call1(Core_kernel_Debug[5],[0]);
      Debug[2][1] = 0;
      var Deferred=0;
      function debug(x)
       {function _ML_(_MP_){return 0}
        function _MM_(_MO_){return 0}
        var _MN_=caml_call2(Throttle[2][2],_MM_,_ML_);
        return caml_call3(Debug[3],_MN_,cst_Throttle,x)}
      var
       T2=Throttle[2],
       sexp_of_t=Throttle[3],
       sexp_of_outcome=Throttle[7],
       capacity_available=Throttle[16],
       cleaned=Throttle[20],
       create=Throttle[5],
       create_with=Throttle[6],
       invariant=Throttle[4],
       is_dead=Throttle[18],
       max_concurrent_jobs=Throttle[13],
       num_jobs_running=Throttle[14],
       num_jobs_waiting_to_start=Throttle[15],
       prior_jobs_done=Throttle[12];
      function enqueue(t,f)
       {function _MG_(param){return caml_call2(Throttle[9],t,f)}
        function _MH_(param){return _nZ_}
        function _MI_(_MK_){return sexp_of_t$33(_MH_,_MK_)}
        var _MJ_=Core_kernel[598];
        return caml_call5(debug(cst_enqueue),[0,t,0],0,_MJ_,_MI_,_MG_)}
      function enqueue$0(t,f)
       {function _MB_(param){return caml_call2(Throttle[8],t,f)}
        var _MC_=caml_call1(sexp_of_outcome,function(param){return _n0_});
        function _MD_(_MF_){return sexp_of_t$33(_MC_,_MF_)}
        var _ME_=Core_kernel[598];
        return caml_call5(debug(cst_enqueue$0),[0,t,0],0,_ME_,_MD_,_MB_)}
      function kill(t)
       {function _My_(param){return caml_call1(Throttle[17],t)}
        var _Mz_=Core_kernel[598],_MA_=Core_kernel[598];
        return caml_call5(debug(cst_kill),[0,t,0],0,_MA_,_Mz_,_My_)}
      function at_kill(t,f)
       {function _Mv_(param){return caml_call2(Throttle[19],t,f)}
        var _Mw_=Core_kernel[598],_Mx_=Core_kernel[598];
        return caml_call5(debug(cst_at_kill),[0,t,0],0,_Mx_,_Mw_,_Mv_)}
      var
       monad_sequence_how=Throttle[10],
       monad_sequence_how2=Throttle[11],
       Sequencer=Throttle[21];
      return [0,
              Deferred,
              T2,
              sexp_of_t,
              invariant,
              create,
              create_with,
              sexp_of_outcome,
              enqueue$0,
              enqueue,
              monad_sequence_how,
              monad_sequence_how2,
              prior_jobs_done,
              max_concurrent_jobs,
              num_jobs_running,
              num_jobs_waiting_to_start,
              capacity_available,
              kill,
              is_dead,
              at_kill,
              cleaned,
              Sequencer]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$136);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Async_kernel_Throttle_debug=[0,Debug$0];
    caml_register_global
     (2695,Async_kernel_Throttle_debug,"Async_kernel__Throttle_debug");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_async_kernel$137);
    caml_call1(Expect_test_collector[4][1],cst_src_throttle_unit_tests_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$138,cst$57);
    var
     Throttle=Debug$0(Async_kernel_Throttle),
     _n2_=Throttle[3],
     _n6_=Throttle[5],
     _n7_=Throttle[8],
     _n8_=Throttle[18],
     _n9_=Throttle[13],
     Deferred$9=0,
     _n1_=Throttle[7],
     _n3_=Throttle[4],
     _n4_=Throttle[10],
     _n5_=Throttle[11];
    function _n__(param)
     {try {caml_call2(_n6_,0,0);var _Mt_=0;return _Mt_}catch(_Mu_){return 1}}
    caml_call8
     (Ppx_inline_test_lib_Runtime[4],
      Inline_test_config,
      cst_try_ignore_create_continue_on_error_false,
      0,
      cst_src_throttle_unit_tests_ml$0,
      32,
      0,
      120,
      _n__);
    function _n$_(param)
     {var t=caml_call2(_n6_,0,1),i=[0,0];
      function _Ms_(param){i[1]++;return caml_call1(_jc_,0)}
      caml_call2(Throttle[9],t,_Ms_);
      if(0 === i[1])
       {stabilize$0(0);if(1 === i[1])return 0;throw [0,Assert_failure,_oa_]}
      throw [0,Assert_failure,_ob_]}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_assert_i_0_stabilize_assert_i,
      0,
      cst_src_throttle_unit_tests_ml$1,
      40,
      0,
      230,
      _n$_);
    function _oc_(param)
     {var t=caml_call2(_n6_,0,1);
      if(1 === caml_call1(_n9_,t))
       {if(caml_call1(_n8_,t))throw [0,Assert_failure,_od_];
        var
         d1=
          caml_call2
           (_n7_,
            t,
            function(param)
             {var
               _Mr_=
                caml_call1
                 (Sexplib0_Sexp_conv[7],cst_src_throttle_unit_tests_ml_54_51);
              return caml_call1(Core_kernel[364],_Mr_)}),
         d2=caml_call2(_n7_,t,function(param){throw [0,Assert_failure,_oe_]});
        stabilize$0(0);
        if(0 === caml_call1(Throttle[15],t))
         {if(caml_call1(_n8_,t))
           {var match=peek$0(d1);
            if(match)
             {var _Mo_=match[1];
              if(typeof _Mo_ === "number")
               var switch$0=0;
              else
               if(-387916264 === _Mo_[1])
                var _Mp_=1,switch$0=1;
               else
                var switch$0=0}
            else
             var switch$0=0;
            if(! switch$0)var _Mp_=0;
            if(_Mp_)
             {var match$0=peek$0(d2);
              if(match$0)
               if(-216426513 === match$0[1])
                var _Mq_=1,switch$1=1;
               else
                var switch$1=0;
              else
               var switch$1=0;
              if(! switch$1)var _Mq_=0;
              if(_Mq_)return 0;
              throw [0,Assert_failure,_of_]}
            throw [0,Assert_failure,_og_]}
          throw [0,Assert_failure,_oh_]}
        throw [0,Assert_failure,_oi_]}
      throw [0,Assert_failure,_oj_]}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_assert_max_concurrent_jobs_t_1_assert,
      0,
      cst_src_throttle_unit_tests_ml$2,
      49,
      0,
      541,
      _oc_);
    function _ok_(param)
     {var
       t=caml_call2(_n6_,1,1),
       d1=
        caml_call2
         (_n7_,
          t,
          function(param)
           {var
             _Mn_=
              caml_call1
               (Sexplib0_Sexp_conv[7],cst_src_throttle_unit_tests_ml_66_51);
            return caml_call1(Core_kernel[364],_Mn_)}),
       d2=caml_call2(_n7_,t,function(param){return caml_call1(_jc_,13)});
      stabilize$0(0);
      if(caml_call1(_n8_,t))throw [0,Assert_failure,_ol_];
      var match=peek$0(d1);
      if(match)
       {var _Mj_=match[1];
        if(typeof _Mj_ === "number")
         var switch$0=0;
        else
         if(-387916264 === _Mj_[1])var _Mk_=1,switch$0=1;else var switch$0=0}
      else
       var switch$0=0;
      if(! switch$0)var _Mk_=0;
      if(_Mk_)
       {var match$0=peek$0(d2);
        if(match$0)
         {var _Ml_=match$0[1];
          if(typeof _Ml_ === "number")
           var switch$1=0;
          else
           if(17724 === _Ml_[1])
            if(13 === _Ml_[2])var _Mm_=1,switch$1=1;else var switch$1=0;
           else
            var switch$1=0}
        else
         var switch$1=0;
        if(! switch$1)var _Mm_=0;
        if(_Mm_)return 0;
        throw [0,Assert_failure,_om_]}
      throw [0,Assert_failure,_on_]}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_stabilize_assert_not_is_dead_t_asser,
      0,
      cst_src_throttle_unit_tests_ml$3,
      63,
      0,
      432,
      _ok_);
    var _oo_=Throttle[9];
    function _op_(param)
     {var t=caml_call2(_n6_,0,2);
      if(2 === caml_call1(_n9_,t))
       {var r=[0,0],i=0;
        for(;;)
         {caml_call2
           (_oo_,
            t,
            function(i)
              {return function(param)
                {r[1] = [0,i,r[1]];return caml_call1(_jc_,0)}}
             (i));
          var _Mh_=i + 1 | 0;
          if(99 !== i){var i=_Mh_;continue}
          stabilize$0(0);
          var
           _Me_=function(_Mi_){return _Mi_},
           _Mf_=caml_call2(Core_kernel_List[128],100,_Me_),
           _Mg_=caml_call1(Core_kernel_List[47],_Mf_);
          if(caml_equal(r[1],_Mg_))return 0;
          throw [0,Assert_failure,_oq_]}}
      throw [0,Assert_failure,_or_]}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_assert_max_concurrent_jobs_t_2_let_r,
      0,
      cst_src_throttle_unit_tests_ml$4,
      76,
      0,
      374,
      _op_);
    var _os_=Throttle[14],_ot_=Throttle[15];
    function _ou_(param)
     {var t=caml_call2(_n6_,0,2);
      if(0 === caml_call1(_ot_,t))
       {var
         add_job=
          function(param)
           {var ivar=caml_call1(create$12,0);
            caml_call2(_oo_,t,function(param){return ivar});
            return ivar},
         i1=add_job(0),
         _Mc_=caml_call1(_os_,t);
        if(1 === (caml_call1(_ot_,t) + _Mc_ | 0))
         {stabilize$0(0);
          if(0 === caml_call1(_ot_,t))
           {if(1 === caml_call1(_os_,t))
             {add_job(0);
              var _Md_=caml_call1(_os_,t);
              if(2 === (caml_call1(_ot_,t) + _Md_ | 0))
               {stabilize$0(0);
                if(0 === caml_call1(_ot_,t))
                 {if(2 === caml_call1(_os_,t))
                   {add_job(0);
                    if(1 === caml_call1(_ot_,t))
                     {if(2 === caml_call1(_os_,t))
                       {stabilize$0(0);
                        if(1 === caml_call1(_ot_,t))
                         {if(2 === caml_call1(_os_,t))
                           {fill(i1,0);
                            stabilize$0(0);
                            if(0 === caml_call1(_ot_,t))
                             {if(2 === caml_call1(_os_,t))return 0;
                              throw [0,Assert_failure,_ov_]}
                            throw [0,Assert_failure,_ow_]}
                          throw [0,Assert_failure,_ox_]}
                        throw [0,Assert_failure,_oy_]}
                      throw [0,Assert_failure,_oz_]}
                    throw [0,Assert_failure,_oA_]}
                  throw [0,Assert_failure,_oB_]}
                throw [0,Assert_failure,_oC_]}
              throw [0,Assert_failure,_oD_]}
            throw [0,Assert_failure,_oE_]}
          throw [0,Assert_failure,_oF_]}
        throw [0,Assert_failure,_oG_]}
      throw [0,Assert_failure,_oH_]}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_assert_num_jobs_waiting_to_start_t_0,
      0,
      cst_src_throttle_unit_tests_ml$5,
      91,
      0,
      939,
      _ou_);
    var _oI_=Throttle[16];
    function _oJ_(param)
     {var t=caml_call2(_n6_,0,2),r=caml_call1(_oI_,t);
      stabilize$0(0);
      var _L__=peek$0(r);
      if(caml_call1(Core_kernel_Option[47],_L__))
       {var i1=caml_call1(create$12,0);
        caml_call2(_oo_,t,function(param){return i1});
        var r$0=caml_call1(_oI_,t);
        stabilize$0(0);
        var _L$_=peek$0(r$0);
        if(caml_call1(Core_kernel_Option[47],_L$_))
         {var i2=caml_call1(create$12,0);
          caml_call2(_oo_,t,function(param){return i2});
          var r$1=caml_call1(_oI_,t);
          stabilize$0(0);
          var _Ma_=peek$0(r$1);
          if(caml_call1(Core_kernel_Option[46],_Ma_))
           {fill(i1,0);
            stabilize$0(0);
            var _Mb_=peek$0(r$1);
            if(caml_call1(Core_kernel_Option[47],_Mb_))return 0;
            throw [0,Assert_failure,_oK_]}
          throw [0,Assert_failure,_oL_]}
        throw [0,Assert_failure,_oM_]}
      throw [0,Assert_failure,_oN_]}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_stabilize_assert_Option_is_some_Deferre,
      0,
      cst_src_throttle_unit_tests_ml$6,
      123,
      0,
      617,
      _oJ_);
    var _oO_=Throttle[6],_oP_=Throttle[12];
    function _oQ_(param)
     {function _LV_(num_jobs)
       {function _LW_(max_concurrent_jobs)
         {function _LX_(param){return [0,0]}
          var
           resources=
            caml_call2(Core_kernel_List[128],max_concurrent_jobs,_LX_),
           max_observed_concurrent_jobs=[0,0],
           num_concurrent_jobs=[0,0],
           job_starts=[0,0],
           t=caml_call2(_oO_,0,resources);
          if(caml_call1(Throttle[13],t) === max_concurrent_jobs)
           {var d=caml_call1(_oP_,t);
            stabilize$0(0);
            if(is_determined(d))
             {var
               continue$0=caml_call1(create$12,0),
               jobs=[0,0],
               _LZ_=num_jobs - 1 | 0,
               _LY_=0;
              if(! (_LZ_ < 0))
               {var i=_LY_;
                for(;;)
                 {var
                   job=
                    caml_call2
                     (_oo_,
                      t,
                      function(i)
                        {return function(r)
                          {if(r[1])throw [0,Assert_failure,_oZ_];
                           r[1] = 1;
                           job_starts[1] = [0,i,job_starts[1]];
                           num_concurrent_jobs[1]++;
                           max_observed_concurrent_jobs[1]
                           =
                           caml_call2
                            (Core_kernel[167],
                             max_observed_concurrent_jobs[1],
                             num_concurrent_jobs[1]);
                           if(num_concurrent_jobs[1] <= max_concurrent_jobs)
                            {var
                              _L9_=
                               function(param)
                                {num_concurrent_jobs[1] += -1;r[1] = 0;return 0};
                             return caml_call2(include$20[4][3],continue$0,_L9_)}
                           throw [0,Assert_failure,_o0_]}}
                       (i));
                  jobs[1] = [0,job,jobs[1]];
                  var _L6_=i + 1 | 0;
                  if(_LZ_ !== i){var i=_L6_;continue}
                  break}}
              var
               all_done=caml_call1(_oP_,t),
               jobs$0=jobs[1],
               jobs_finished=all_ignore(jobs$0);
              stabilize$0(0);
              if(is_determined(all_done))throw [0,Assert_failure,_oR_];
              var
               num_initial_jobs=
                caml_call2(Core_kernel[166],num_jobs,max_concurrent_jobs);
              if(num_concurrent_jobs[1] === num_initial_jobs)
               {if
                 (caml_call1(Core_kernel_List[17],job_starts[1])
                  ===
                  num_initial_jobs)
                 {if(1 === max_concurrent_jobs)
                   {var
                     _L0_=function(_L8_){return _L8_},
                     _L1_=caml_call2(Core_kernel_List[128],num_initial_jobs,_L0_);
                    if(! caml_equal(job_starts[1],_L1_))
                     throw [0,Assert_failure,_oW_]}
                  fill(continue$0,0);
                  stabilize$0(0);
                  if(is_determined(all_done))
                   {var
                     _L2_=
                      caml_call2(Core_kernel[166],num_jobs,max_concurrent_jobs);
                    if(max_observed_concurrent_jobs[1] === _L2_)
                     {if(is_determined(jobs_finished))
                       {var _L3_=1 === max_concurrent_jobs?1:0;
                        if(_L3_)
                         {var
                           _L4_=function(_L7_){return _L7_},
                           _L5_=caml_call2(Core_kernel_List[128],num_jobs,_L4_);
                          if
                           (caml_equal
                             (caml_call1(Core_kernel_List[47],job_starts[1]),_L5_))
                           return 0;
                          throw [0,Assert_failure,_oS_]}
                        return _L3_}
                      throw [0,Assert_failure,_oT_]}
                    throw [0,Assert_failure,_oU_]}
                  throw [0,Assert_failure,_oV_]}
                throw [0,Assert_failure,_oX_]}
              throw [0,Assert_failure,_oY_]}
            throw [0,Assert_failure,_o1_]}
          throw [0,Assert_failure,_o2_]}
        return caml_call2(Core_kernel_List[19],_o3_,_LW_)}
      return caml_call2(Core_kernel_List[19],_o4_,_LV_)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_List_iter_1_10_100_1000_f_fun_num_jo,
      0,
      cst_src_throttle_unit_tests_ml$7,
      146,
      0,
      2142,
      _oQ_);
    var _o5_=Throttle[19],_o6_=Throttle[20];
    function _o7_(param)
     {function test(num_resources,num_jobs_before_fail,num_jobs_after_fail)
       {function _LG_(param){return [0,1]}
        var
         resources=caml_call2(Core_kernel_List[128],num_resources,_LG_),
         t=caml_call2(_oO_,0,resources),
         continue_at_kill=caml_call1(create$12,0),
         num_at_kill_started=[0,0],
         num_jobs_run=[0,0];
        try
         {caml_call2
           (_o5_,
            t,
            function(resource)
             {num_at_kill_started[1]++;
              function _LU_(param){resource[1] = 0;return 0}
              return caml_call2(include$20[4][3],continue_at_kill,_LU_)});
          var
           continue_jobs=caml_call1(create$12,0),
           enqueue=
            function(num_jobs)
             {function _LS_(param)
               {return caml_call2
                        (_n7_,
                         t,
                         function(param)
                          {function _LT_(param){num_jobs_run[1]++;return 0}
                           return caml_call2(include$20[4][3],continue_jobs,_LT_)})}
              return all$0(caml_call2(Core_kernel_List[128],num_jobs,_LS_))},
           before_fail=enqueue(num_jobs_before_fail),
           fail=
            caml_call2
             (_n7_,
              t,
              function(param)
               {var
                 _LR_=
                  caml_call1
                   (Sexplib0_Sexp_conv[7],
                    cst_src_throttle_unit_tests_ml_220_56);
                return caml_call1(Core_kernel[364],_LR_)}),
           after_fail=enqueue(num_jobs_after_fail),
           cleaned=caml_call1(_o6_,t),
           is_cleaned=function(param){return is_determined(cleaned)};
          stabilize$0(0);
          if(is_cleaned(0))throw [0,Assert_failure,_pc_];
          var
           _LO_=
            caml_call2
             (Core_kernel_Int[109],
              0,
              (num_resources - 1 | 0)
              -
              (num_jobs_before_fail + num_jobs_after_fail | 0)
              |
              0);
          if(_LO_ <= num_at_kill_started[1])
           {fill(continue_jobs,0);
            stabilize$0(0);
            if(is_cleaned(0))throw [0,Assert_failure,_pd_];
            if(is_determined(before_fail))
             {if(is_determined(fail))
               {if(is_determined(after_fail))
                 {if(num_at_kill_started[1] === num_resources)
                   {fill(continue_at_kill,0);
                    stabilize$0(0);
                    if(is_cleaned(0))
                     {var _LP_=function(r){return 1 - r[1]};
                      if(caml_call2(Core_kernel_List[24],resources,_LP_))
                       {caml_call1(Throttle[17],t);
                        if(is_cleaned(0)){var _LQ_=0;return _LQ_}
                        throw [0,Assert_failure,_pe_]}
                      throw [0,Assert_failure,_pf_]}
                    throw [0,Assert_failure,_pg_]}
                  throw [0,Assert_failure,_ph_]}
                throw [0,Assert_failure,_pi_]}
              throw [0,Assert_failure,_pj_]}
            throw [0,Assert_failure,_pk_]}
          throw [0,Assert_failure,_pl_]}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          var
           _LH_=
            [0,
             [1,
              [0,
               _o8_,
               [0,
                caml_call2
                 (_n2_,caml_call1(Core_kernel[583],Core_kernel[410]),t),
                0]]],
             0],
           _LI_=
            [0,
             [1,
              [0,
               _o9_,
               [0,
                caml_call2
                 (Core_kernel[583],Core_kernel[455],num_at_kill_started),
                0]]],
             _LH_],
           _LJ_=
            [0,
             [1,
              [0,_o__,[0,caml_call1(Core_kernel[455],num_jobs_after_fail),0]]],
             _LI_],
           _LK_=
            [0,
             [1,
              [0,_o$_,[0,caml_call1(Core_kernel[455],num_jobs_before_fail),0]]],
             _LJ_],
           _LL_=
            [0,
             [1,[0,_pa_,[0,caml_call1(Core_kernel[455],num_resources),0]]],
             _LK_],
           _LM_=[0,[1,[0,_pb_,[0,caml_call1(Core_kernel[614],exn),0]]],_LL_],
           _LN_=[1,[0,caml_call1(Sexplib0_Sexp_conv[7],cst_failure),_LM_]];
          return caml_call1(Core_kernel[364],_LN_)}}
      var num_resources=1;
      for(;;)
       {var _LA_=num_resources + 1 | 0,_Lz_=0;
        if(! (_LA_ < 0))
         {var num_jobs_before_fail=_Lz_;
          for(;;)
           {var _LD_=num_resources + 1 | 0,_LC_=0;
            if(! (_LD_ < 0))
             {var num_jobs_after_fail=_LC_;
              for(;;)
               {test(num_resources,num_jobs_before_fail,num_jobs_after_fail);
                var _LF_=num_jobs_after_fail + 1 | 0;
                if(_LD_ !== num_jobs_after_fail)
                 {var num_jobs_after_fail=_LF_;continue}
                break}}
            var _LE_=num_jobs_before_fail + 1 | 0;
            if(_LA_ !== num_jobs_before_fail)
             {var num_jobs_before_fail=_LE_;continue}
            break}}
        var _LB_=num_resources + 1 | 0;
        if(3 !== num_resources){var num_resources=_LB_;continue}
        return 0}}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_for_num_resources_1_to_3_do_for_num_jobs,
      0,
      cst_src_throttle_unit_tests_ml$8,
      199,
      0,
      2796,
      _o7_);
    function _pm_(param)
     {var
       t=caml_call2(_n6_,0,1),
       monitor=create$16(0,0,0,0),
       cleanup_ran=[0,0],
       got_error=[0,0];
      function _Lx_(param){got_error[1] = 1;return 0}
      iter$12(detach_and_get_error_stream(monitor),_Lx_);
      caml_call3
       (_lD_,
        [0,monitor],
        0,
        function(param)
         {return caml_call2
                  (_o5_,
                   t,
                   function(param)
                    {cleanup_ran[1] = 1;
                     var
                      _Ly_=
                       caml_call1
                        (Sexplib0_Sexp_conv[7],
                         cst_src_throttle_unit_tests_ml_280_64);
                     return caml_call1(Core_kernel[364],_Ly_)})});
      var c=caml_call1(_o6_,t);
      caml_call1(Throttle[17],t);
      stabilize$0(0);
      if(cleanup_ran[1])
       {if(got_error[1])
         {if(is_determined(c))throw [0,Assert_failure,_pn_];return 0}
        throw [0,Assert_failure,_po_]}
      throw [0,Assert_failure,_pp_]}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_Stream_iter_Monitor_detach_and_get_error_str,
      0,
      cst_src_throttle_unit_tests_ml$9,
      273,
      0,
      529,
      _pm_);
    var _pq_=Throttle[17];
    function _pr_(param)
     {var
       t=caml_call2(_n6_,0,1),
       started=caml_call1(create$12,0),
       finished=caml_call1(create$12,0),
       enqueue_result=
        caml_call2(_n7_,t,function(param){fill(started,0);return finished});
      function _Lv_(param)
       {caml_call1(_pq_,t);
        fill(finished,0);
        function _Lw_(param)
         {if(typeof param !== "number")
           if(17724 <= param[1])return caml_call1(_jc_,0);
          throw [0,Assert_failure,_ps_]}
        return caml_call2(include$20[4][2],enqueue_result,_Lw_)}
      var d=caml_call2(include$20[4][2],started,_Lv_);
      stabilize$0(0);
      if(is_determined(d))return 0;
      throw [0,Assert_failure,_pt_]}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_stabilize_assert_Deferred_is_determined_d,
      0,
      cst_src_throttle_unit_tests_ml$10,
      292,
      0,
      511,
      _pr_);
    function _pu_(param)
     {var t=caml_call2(_n6_,0,1);
      caml_call1(_pq_,t);
      var
       r=[0,1],
       d=
        caml_call2(_n7_,t,function(param){r[1] = 0;return caml_call1(_jc_,0)});
      stabilize$0(0);
      if(caml_equal(peek$0(d),_pv_))
       {if(r[1])return 0;throw [0,Assert_failure,_pw_]}
      throw [0,Assert_failure,_px_]}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_kill_t_let_r_ref_true_in_let_d_enqueue,
      0,
      cst_src_throttle_unit_tests_ml$11,
      312,
      0,
      247,
      _pu_);
    function _py_(param)
     {var seq=caml_call2(Throttle[21][2],0,0);
      function loop(n)
       {return 0 === n
                ?caml_call1(_jc_,0)
                :caml_call2
                  (_oo_,
                   seq,
                   function(param)
                    {if(5 <= depth(current(0)))throw [0,Assert_failure,_pz_];
                     loop(n - 1 | 0);
                     return caml_call1(_jc_,0)})}
      var d=loop(100);
      stabilize$0(0);
      if(caml_equal(peek$0(d),_pA_))return 0;
      throw [0,Assert_failure,_pB_]}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_stabilize_assert_Deferred_peek_d_So,
      0,
      cst_src_throttle_unit_tests_ml$12,
      322,
      0,
      404,
      _py_);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$139);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Async_kernel_Throttle_unit_tests=
      [0,
       Deferred$9,
       Throttle[2],
       _n2_,
       _n3_,
       _n6_,
       _oO_,
       _n1_,
       _n7_,
       _oo_,
       _n4_,
       _n5_,
       _oP_,
       _n9_,
       _os_,
       _ot_,
       _oI_,
       _pq_,
       _n8_,
       _o5_,
       _o6_,
       Throttle[21]];
    caml_register_global
     (2696,
      Async_kernel_Throttle_unit_tests,
      "Async_kernel__Throttle_unit_tests");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_async_kernel$140);
    caml_call1(Expect_test_collector[4][1],cst_src_clock_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$141,cst$58);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$142);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Async_kernel_Clock_intf=[0,0];
    caml_register_global
     (2697,Async_kernel_Clock_intf,"Async_kernel__Clock_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_async_kernel$143);
    caml_call1(Expect_test_collector[4][1],cst_src_clock_ns_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$144,cst$59);
    function time_source$1(param){return t$5(0)[14]}
    function after$3(span){return after$1(time_source$1(0),span)}
    function at$5(time){return at$3(time_source$1(0),time)}
    function at_varying_intervals$0(stop,compute_span)
     {return at_varying_intervals(stop,time_source$1(0),compute_span)}
    function at_intervals$1(start,stop,interval)
     {return at_intervals$0(start,stop,time_source$1(0),interval)}
    function every$1(start,stop,continue_on_error,finished,span,f)
     {return every
              (start,stop,continue_on_error,finished,time_source$1(0),span,f)}
    function every$2(start,stop,continue_on_error,span,f)
     {return every$0(start,stop,continue_on_error,time_source$1(0),span,f)}
    function run_after$2(span,f,a)
     {return run_after$0(time_source$1(0),span,f,a)}
    function run_at$2(time,f,a){return run_at$0(time_source$1(0),time,f,a)}
    function run_at_intervals$2(start,stop,continue_on_error,interval,f)
     {return run_at_intervals$1
              (start,stop,continue_on_error,time_source$1(0),interval,f)}
    function run_at_intervals$3(start,stop,continue_on_error,interval,f)
     {return run_at_intervals$0
              (start,stop,continue_on_error,time_source$1(0),interval,f)}
    function with_timeout$0(span,d)
     {return with_timeout(time_source$1(0),span,d)}
    var
     sexp_of_t$48=include$25[1],
     sexp_of_t_unit$0=include$25[2],
     invariant$17=include$25[3],
     scheduled_at$1=include$25[4],
     Status$2=include$25[5],
     status$3=include$25[6],
     Abort_result$1=include$25[9],
     abort$2=include$25[10],
     abort_exn$1=include$25[11],
     abort_if_possible$1=include$25[12],
     Fired$0=include$25[13],
     fired$1=include$25[14],
     Reschedule_result$0=include$25[15],
     reschedule_at$0=include$25[16],
     reschedule_after$0=include$25[17],
     _pC_=include$25[7],
     _pD_=include$25[8],
     _pE_=include$25[18],
     _pF_=include$25[19];
    function after$4(span){return caml_call2(_pF_,time_source$1(0),span)}
    function run_after$3(span,f,a)
     {return caml_call4(_pD_,time_source$1(0),span,f,a)}
    function at$6(time){return caml_call2(_pE_,time_source$1(0),time)}
    function run_at$3(time,f,z)
     {return caml_call4(_pC_,time_source$1(0),time,f,z)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$145);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Async_kernel_Clock_ns=
      [0,
       run_at$2,
       run_after$2,
       at$5,
       after$3,
       with_timeout$0,
       [0,
        sexp_of_t$48,
        sexp_of_t_unit$0,
        invariant$17,
        scheduled_at$1,
        Status$2,
        status$3,
        run_at$3,
        run_after$3,
        Abort_result$1,
        abort$2,
        abort_exn$1,
        abort_if_possible$1,
        Fired$0,
        fired$1,
        Reschedule_result$0,
        reschedule_at$0,
        reschedule_after$0,
        at$6,
        after$4],
       at_varying_intervals$0,
       at_intervals$1,
       every$1,
       every$2,
       run_at_intervals$3,
       run_at_intervals$2];
    caml_register_global(2698,Async_kernel_Clock_ns,"Async_kernel__Clock_ns");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_async_kernel$146);
    caml_call1
     (Expect_test_collector[4][1],cst_src_require_explicit_time_source_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$147,cst$60);
    var
     _pG_=Async_kernel_Clock_ns[4],
     _pH_=Async_kernel_Clock_ns[3],
     _pI_=Async_kernel_Clock_ns[10],
     _pJ_=Async_kernel_Clock_ns[5];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$148);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Async_kernel_Require_explicit_time_source=
      [0,
       Async_kernel_Clock_ns,
       [0,
        _a_,
        _b_,
        _c_,
        _d_,
        _e_,
        _f_,
        _g_,
        _h_,
        _i_,
        _j_,
        _k_,
        _l_,
        _m_,
        _n_,
        _o_,
        _p_,
        _q_,
        _r_,
        _s_,
        _t_,
        _u_,
        _v_,
        _w_,
        _x_,
        _y_,
        _z_,
        _B_,
        _C_,
        _D_,
        _E_,
        _F_,
        _G_,
        _H_,
        _I_,
        _J_,
        _K_,
        _L_,
        _M_,
        _N_,
        _O_,
        _P_,
        _Q_,
        _R_,
        after,
        _A_],
       [0,
        Deferred$5,
        sexp_of_t$30,
        t$5,
        invariant$7,
        current_execution_context$1,
        with_execution_context,
        set_execution_context,
        enqueue$0,
        create_job,
        enqueue_job,
        free_job,
        main_execution_context$1,
        run_cycle,
        stabilize$0,
        has_upcoming_event,
        next_upcoming_event,
        next_upcoming_event_exn,
        event_precision,
        uncaught_exn$0,
        uncaught_exn_unwrapped,
        num_pending_jobs,
        num_jobs_run$1,
        map_cycle_times,
        cycle_num_jobs,
        cycle_count$1,
        max_num_jobs_per_priority_per_cycle$4,
        set_max_num_jobs_per_priority_per_cycle$0,
        set_check_access$0,
        check_access$1,
        check_invariants$4,
        set_check_invariants$0,
        set_record_backtraces$0,
        long_cycles,
        can_run_a_job$0,
        create_alarm,
        add_finalizer,
        add_finalizer_exn,
        add_finalizer_last,
        add_finalizer_last_exn,
        set_thread_safe_external_job_hook$0,
        set_job_queued_hook$0,
        set_event_added_hook$0,
        set_on_start_of_cycle$0,
        set_on_end_of_cycle$0,
        thread_safe_enqueue_external_job,
        force_current_cycle_to_end,
        _lC_,
        _lD_,
        _lE_,
        _lF_,
        _lG_,
        _lI_,
        _lJ_,
        _lH_,
        find_local$0,
        with_local$0,
        make_async_unusable,
        reset_in_forked_process,
        yield$3,
        yield_every,
        yield_until_no_jobs_remain$1,
        _lR_,
        For_bench,
        cycle_start$1],
       _pH_,
       _pG_,
       _pI_,
       _pJ_];
    caml_register_global
     (2699,
      Async_kernel_Require_explicit_time_source,
      "Async_kernel__Require_explicit_time_source");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_async_kernel$149);
    caml_call1(Expect_test_collector[4][1],cst_src_pipe_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$150,cst$61);
    var show_debug_messages=[0,0],check_invariant=[0,0];
    function sexp_of_t$49(param){return 17724 <= param?_pK_:_pL_}
    function equal$2(x_003,x_004)
     {if(caml_call2(Ppx_compare_lib[1],x_003,x_004))
       var match=0;
      else
       {if(17724 <= x_003)
         if(17724 === x_004)var match=0,switch$0=1;else var switch$0=0;
        else
         if(-402004920 === x_004)var match=0,switch$0=1;else var switch$0=0;
        if(! switch$0)var match=runtime.caml_int_compare(x_003,x_004)}
      return 0 === match?1:0}
    function combine$0(l)
     {function _Lt_(l)
       {var match=caml_call3(Core_kernel_List[16],l,-402004920,equal$2);
        return 0 === match?17724:-402004920}
      var _Lu_=all$0(l);
      return caml_call2(include$20[4][3],_Lu_,_Lt_)}
    function downstream_flushed(r){return r[3]}
    function values_read(r){return r[2]}
    function set_values_read(r,v){r[2] = v;return 0}
    function pipe_id(r){return r[1]}
    function _pM_(r,v){return [0,r[1],r[2],v]}
    var
     _pN_=0,
     downstream_flushed$0=
      [0,
       [0,
        function(param){return 0},
        cst_downstream_flushed,
        _pN_,
        downstream_flushed,
        _pM_]];
    function _pO_(r,v){return [0,r[1],v,r[3]]}
    var
     _pP_=[0,set_values_read],
     values_read$0=
      [0,[0,function(param){return 0},cst_values_read,_pP_,values_read,_pO_]];
    function _pQ_(r,v){return [0,v,r[2],r[3]]}
    var
     _pR_=0,
     pipe_id$0=[0,[0,function(param){return 0},cst_pipe_id,_pR_,pipe_id,_pQ_]];
    function iter$20(pipe_id_fun,values_read_fun,downstream_flushed_fun)
     {caml_call1(pipe_id_fun,pipe_id$0);
      caml_call1(values_read_fun,values_read$0);
      return caml_call1(downstream_flushed_fun,downstream_flushed$0)}
    function sexp_of_t$50(param)
     {var v_pipe_id=param[1],v_values_read=param[2],bnds=0;
      function _Lr_(_Ls_){return 0}
      var
       arg=caml_call1(Sexplib0_Sexp_conv[24],_Lr_),
       bnds$0=[0,[1,[0,_pS_,[0,arg,0]]],bnds];
      if(typeof v_values_read === "number")
       var arg$0=_pT_;
      else
       var
        v0=v_values_read[2],
        arg$0=[1,[0,_pW_,[0,sexp_of_t$32(Core_kernel[598],v0),0]]];
      var
       bnds$1=[0,[1,[0,_pU_,[0,arg$0,0]]],bnds$0],
       arg$1=caml_call1(Core_kernel[455],v_pipe_id),
       bnds$2=[0,[1,[0,_pV_,[0,arg$1,0]]],bnds$1];
      return [1,bnds$2]}
    function invariant$18(t)
     {try
       {var
         _Lm_=function(_Lq_){return 0},
         _Ln_=
          function(field)
           {var param=caml_call2(Base_Field[3],field,t);
            if(typeof param === "number")return 0;
            var ivar=param[2];
            if(is_empty(ivar))return 0;
            throw [0,Assert_failure,_pZ_]},
         _Lo_=iter$20(function(_Lp_){return 0},_Ln_,_Lm_);
        return _Lo_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        var
         _Lj_=[0,[1,[0,_pX_,[0,sexp_of_t$50(t),0]]],0],
         _Lk_=[0,[1,[0,_pY_,[0,caml_call1(Core_kernel[614],exn),0]]],_Lj_],
         _Ll_=
          [1,
           [0,
            caml_call1
             (Sexplib0_Sexp_conv[7],cst_Pipe_Consumer_invariant_failed),
            _Lk_]];
        return caml_call1(Core_kernel[364],_Ll_)}}
    function start(t)
     {return typeof t[2] === "number"
              ?(t[2] = [0,-122467239,caml_call1(create$12,0)],0)
              :0}
    function values_sent_downstream(t)
     {var _Li_=t[2];
      if(typeof _Li_ === "number")return 0;
      var ivar=_Li_[2];
      fill(ivar,0);
      t[2] = -758792467;
      return 0}
    function values_sent_downstream_and_flushed(t)
     {var _Lg_=t[2];
      if(typeof _Lg_ === "number")return caml_call1(t[3],0);
      var when_sent_downstream=_Lg_[2];
      function _Lh_(param){return caml_call1(t[3],0)}
      return caml_call2(include$20[4][2],when_sent_downstream,_Lh_)}
    function consumer(r){return r[2]}
    function wants(r){return r[1]}
    function _p9_(r,v){return [0,r[1],v]}
    var
     _p__=0,
     consumer$0=
      [0,[0,function(param){return 0},cst_consumer,_p__,consumer,_p9_]];
    function _p$_(r,v){return [0,v,r[2]]}
    var
     _qa_=0,
     wants$0=[0,[0,function(param){return 0},cst_wants,_qa_,wants,_p$_]];
    function iter$21(wants_fun,consumer_fun)
     {caml_call1(wants_fun,wants$0);
      return caml_call1(consumer_fun,consumer$0)}
    function sexp_of_t$51(of_a,param)
     {var
       v_consumer=param[2],
       v_wants=param[1],
       arg=caml_call2(Core_kernel[542],sexp_of_t$50,v_consumer),
       bnds=[0,[1,[0,_qb_,[0,arg,0]]],0];
      switch(v_wants[0])
       {case 0:
         var
          v0=v_wants[1],
          v0$0=
           sexp_of_t$32(function(param){return 3456156 <= param?_p0_:_p1_},v0),
          arg$0=[1,[0,_p2_,[0,v0$0,0]]];
         break;
        case 1:
         var
          v0$1=v_wants[1],
          v0$2=
           sexp_of_t$32
            (function(param)
              {if(typeof param === "number")return _p3_;
               var v0=param[2];
               return [1,[0,_p4_,[0,caml_call1(of_a,v0),0]]]},
             v0$1),
          arg$0=[1,[0,_p5_,[0,v0$2,0]]];
         break;
        default:
         var
          v1=v_wants[2],
          v0$3=v_wants[1],
          v0$4=caml_call1(Core_kernel[455],v0$3),
          v1$0=
           sexp_of_t$32
            (function(param)
              {if(typeof param === "number")return _p6_;
               var v0=param[2];
               return [1,
                       [0,_p7_,[0,caml_call2(Core_kernel_Queue[11],of_a,v0),0]]]},
             v1),
          arg$0=[1,[0,_p8_,[0,v0$4,[0,v1$0,0]]]]}
      var bnds$0=[0,[1,[0,_qc_,[0,arg$0,0]]],bnds];
      return [1,bnds$0]}
    function invariant$19(t)
     {try
       {var
         check=
          function(f,field)
           {return caml_call1(f,caml_call2(Base_Field[3],field,t))},
         _La_=
          function(param)
           {if(param){var consumer=param[1];return invariant$18(consumer)}
            return 0},
         _Lb_=function(_Lf_){return check(_La_,_Lf_)},
         _Lc_=
          function(param)
           {if(2 === param[0])
             {var i=param[1];if(0 < i)return 0;throw [0,Assert_failure,_qg_]}
            return 0},
         _Ld_=iter$21(function(_Le_){return check(_Lc_,_Le_)},_Lb_);
        return _Ld_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        var
         _K7_=0,
         _K8_=0,
         _K9_=
          [0,
           [1,[0,_qe_,[0,sexp_of_t$51(function(param){return _qd_},t),_K8_]]],
           _K7_],
         _K__=[0,[1,[0,_qf_,[0,caml_call1(Core_kernel[614],exn),0]]],_K9_],
         _K$_=
          [1,
           [0,
            caml_call1
             (Sexplib0_Sexp_conv[7],cst_Pipe_Blocked_read_invariant_failed),
            _K__]];
        return caml_call1(Core_kernel[364],_K$_)}}
    function fill_with_eof(t)
     {var _K6_=t[1];
      switch(_K6_[0])
       {case 0:var i=_K6_[1];return fill(i,3456156);
        case 1:var i$0=_K6_[1];return fill(i$0,3456156);
        default:var i$1=_K6_[2];return fill(i$1,3456156)}}
    function fill_when_num_values_read(r){return r[1]}
    function sexp_of_t$52(param)
     {var
       v_ready=param[2],
       v_fill_when_num_values_read=param[1],
       bnds=0,
       arg=
        sexp_of_t$32(function(param){return 17724 <= param?_qh_:_qi_},v_ready),
       bnds$0=[0,[1,[0,_qj_,[0,arg,0]]],bnds],
       arg$0=caml_call1(Core_kernel[455],v_fill_when_num_values_read),
       bnds$1=[0,[1,[0,_qk_,[0,arg$0,0]]],bnds$0];
      return [1,bnds$1]}
    function fill$2(t,v){return fill(t[2],v)}
    function upstream_flusheds(r){return r[11]}
    function consumers(r){return r[10]}
    function set_consumers(r,v){r[10] = v;return 0}
    function read_closed(r){return r[9]}
    function _ql_(r){return r[8]}
    function blocked_reads(r){return r[7]}
    function blocked_flushes(r){return r[6]}
    function num_values_read(r){return r[5]}
    function set_num_values_read(r,v){r[5] = v;return 0}
    function _qm_(r){return r[4]}
    function set_pushback(r,v){r[4] = v;return 0}
    function size_budget(r){return r[3]}
    function set_size_budget(r,v){r[3] = v;return 0}
    function buffer(r){return r[2]}
    function set_buffer(r,v){r[2] = v;return 0}
    function id$1(r){return r[1]}
    function _qn_(r,v)
     {return [0,r[1],r[2],r[3],r[4],r[5],r[6],r[7],r[8],r[9],r[10],v]}
    var
     _qo_=0,
     upstream_flusheds$0=
      [0,
       [0,
        function(param){return 0},
        cst_upstream_flusheds,
        _qo_,
        upstream_flusheds,
        _qn_]];
    function _qp_(r,v)
     {return [0,r[1],r[2],r[3],r[4],r[5],r[6],r[7],r[8],r[9],v,r[11]]}
    var
     _qq_=[0,set_consumers],
     consumers$0=
      [0,[0,function(param){return 0},cst_consumers,_qq_,consumers,_qp_]];
    function _qr_(r,v)
     {return [0,r[1],r[2],r[3],r[4],r[5],r[6],r[7],r[8],v,r[10],r[11]]}
    var
     _qs_=0,
     read_closed$0=
      [0,[0,function(param){return 0},cst_read_closed,_qs_,read_closed,_qr_]];
    function _qt_(r,v)
     {return [0,r[1],r[2],r[3],r[4],r[5],r[6],r[7],v,r[9],r[10],r[11]]}
    var
     _qu_=0,
     closed$0=[0,[0,function(param){return 0},cst_closed,_qu_,_ql_,_qt_]];
    function _qv_(r,v)
     {return [0,r[1],r[2],r[3],r[4],r[5],r[6],v,r[8],r[9],r[10],r[11]]}
    var
     _qw_=0,
     blocked_reads$0=
      [0,
       [0,function(param){return 0},cst_blocked_reads,_qw_,blocked_reads,_qv_]];
    function _qx_(r,v)
     {return [0,r[1],r[2],r[3],r[4],r[5],v,r[7],r[8],r[9],r[10],r[11]]}
    var
     _qy_=0,
     blocked_flushes$0=
      [0,
       [0,
        function(param){return 0},
        cst_blocked_flushes,
        _qy_,
        blocked_flushes,
        _qx_]];
    function _qz_(r,v)
     {return [0,r[1],r[2],r[3],r[4],v,r[6],r[7],r[8],r[9],r[10],r[11]]}
    var
     _qA_=[0,set_num_values_read],
     num_values_read$0=
      [0,
       [0,
        function(param){return 0},
        cst_num_values_read,
        _qA_,
        num_values_read,
        _qz_]];
    function _qB_(r,v)
     {return [0,r[1],r[2],r[3],v,r[5],r[6],r[7],r[8],r[9],r[10],r[11]]}
    var
     _qC_=[0,set_pushback],
     pushback=[0,[0,function(param){return 0},cst_pushback,_qC_,_qm_,_qB_]];
    function _qD_(r,v)
     {return [0,r[1],r[2],v,r[4],r[5],r[6],r[7],r[8],r[9],r[10],r[11]]}
    var
     _qE_=[0,set_size_budget],
     size_budget$0=
      [0,[0,function(param){return 0},cst_size_budget,_qE_,size_budget,_qD_]];
    function _qF_(r,v)
     {return [0,r[1],v,r[3],r[4],r[5],r[6],r[7],r[8],r[9],r[10],r[11]]}
    var
     _qG_=[0,set_buffer],
     buffer$0=[0,[0,function(param){return 0},cst_buffer,_qG_,buffer,_qF_]];
    function _qH_(r,v)
     {return [0,v,r[2],r[3],r[4],r[5],r[6],r[7],r[8],r[9],r[10],r[11]]}
    var _qI_=0,id$2=[0,[0,function(param){return 0},cst_id$1,_qI_,id$1,_qH_]];
    function iter$22
     (id_fun,
      buffer_fun,
      size_budget_fun,
      pushback_fun,
      num_values_read_fun,
      blocked_flushes_fun,
      blocked_reads_fun,
      closed_fun,
      read_closed_fun,
      consumers_fun,
      upstream_flusheds_fun)
     {caml_call1(id_fun,id$2);
      caml_call1(buffer_fun,buffer$0);
      caml_call1(size_budget_fun,size_budget$0);
      caml_call1(pushback_fun,pushback);
      caml_call1(num_values_read_fun,num_values_read$0);
      caml_call1(blocked_flushes_fun,blocked_flushes$0);
      caml_call1(blocked_reads_fun,blocked_reads$0);
      caml_call1(closed_fun,closed$0);
      caml_call1(read_closed_fun,read_closed$0);
      caml_call1(consumers_fun,consumers$0);
      return caml_call1(upstream_flusheds_fun,upstream_flusheds$0)}
    function sexp_of_pipe(of_a,of_phantom,param)
     {var
       v_id=param[1],
       v_buffer=param[2],
       v_size_budget=param[3],
       v_pushback=param[4],
       v_num_values_read=param[5],
       v_read_closed=param[9],
       v_closed=param[8],
       v_blocked_reads=param[7],
       v_blocked_flushes=param[6],
       v_consumers=param[10],
       v_upstream_flusheds=param[11],
       bnds=0;
      function _K1_(f)
       {function _K4_(_K5_){return 0}
        return caml_call1(Sexplib0_Sexp_conv[24],_K4_)}
      var
       arg=caml_call2(Core_kernel_Bag[3],_K1_,v_upstream_flusheds),
       bnds$0=[0,[1,[0,_qJ_,[0,arg,0]]],bnds],
       arg$0=caml_call2(Core_kernel[513],sexp_of_t$50,v_consumers),
       bnds$1=[0,[1,[0,_qK_,[0,arg$0,0]]],bnds$0],
       arg$1=sexp_of_t$32(Core_kernel[598],v_read_closed),
       bnds$2=[0,[1,[0,_qL_,[0,arg$1,0]]],bnds$1],
       arg$2=sexp_of_t$32(Core_kernel[598],v_closed),
       bnds$3=[0,[1,[0,_qM_,[0,arg$2,0]]],bnds$2];
      function _K2_(_K3_){return sexp_of_t$51(of_a,_K3_)}
      var
       arg$3=caml_call2(Core_kernel_Queue[11],_K2_,v_blocked_reads),
       bnds$4=[0,[1,[0,_qN_,[0,arg$3,0]]],bnds$3],
       arg$4=caml_call2(Core_kernel_Queue[11],sexp_of_t$52,v_blocked_flushes),
       bnds$5=[0,[1,[0,_qO_,[0,arg$4,0]]],bnds$4],
       arg$5=caml_call1(Core_kernel[455],v_num_values_read),
       bnds$6=[0,[1,[0,_qP_,[0,arg$5,0]]],bnds$5],
       arg$6=sexp_of_t$32(Core_kernel[598],v_pushback),
       bnds$7=[0,[1,[0,_qQ_,[0,arg$6,0]]],bnds$6],
       arg$7=caml_call1(Core_kernel[455],v_size_budget),
       bnds$8=[0,[1,[0,_qR_,[0,arg$7,0]]],bnds$7],
       arg$8=caml_call2(Core_kernel_Queue[11],of_a,v_buffer),
       bnds$9=[0,[1,[0,_qS_,[0,arg$8,0]]],bnds$8],
       arg$9=caml_call1(Core_kernel[455],v_id),
       bnds$10=[0,[1,[0,_qT_,[0,arg$9,0]]],bnds$9];
      return [1,bnds$10]}
    function hash(t){return caml_call1(Core_kernel_Hashtbl[1],t[1])}
    function equal$3(t1,t2){return caml_call2(Core_kernel[359],t1,t2)}
    function compare$0(t1,t2)
     {return caml_call2(Core_kernel_Int[107],t1[1],t2[1])}
    function is_closed$0(t){return is_full(t[8])}
    function is_read_closed(t){return is_full(t[9])}
    function closed$1(t){return t[8]}
    function pushback$0(t){return t[4]}
    function length$2(t){return caml_call1(Core_kernel_Queue[13],t[2])}
    function is_empty$1(t){return 0 === length$2(t)?1:0}
    function invariant$20(t)
     {try
       {var
         check=
          function(f,field)
           {return caml_call1(f,caml_call2(Base_Field[3],field,t))},
         _Kn_=function(_K0_){return 0},
         _Ko_=
          function(l)
           {function _KZ_(consumer)
             {invariant$18(consumer);
              if(consumer[1] === t[1])return 0;
              throw [0,Assert_failure,_qY_]}
            return caml_call2(Core_kernel_List[19],l,_KZ_)},
         _Kp_=function(_KY_){return check(_Ko_,_KY_)},
         _Kq_=function(_KX_){return 0},
         _Kr_=function(_KW_){return 0},
         _Ks_=
          function(blocked_reads)
           {if(1 - is_empty$1(t))
             if(! caml_call1(Core_kernel_Queue[14],blocked_reads))
              throw [0,Assert_failure,_q1_];
            function _KS_(read)
             {invariant$19(read);
              var _KU_=read[1];
              switch(_KU_[0])
               {case 0:var i=_KU_[1],_KV_=is_empty(i);break;
                case 1:var i$0=_KU_[1],_KV_=is_empty(i$0);break;
                default:var i$1=_KU_[2],_KV_=is_empty(i$1)}
              if(_KV_)return 0;
              throw [0,Assert_failure,_qZ_]}
            caml_call2(Core_kernel_Queue[15],blocked_reads,_KS_);
            var _KT_=is_closed$0(t);
            if(_KT_)
             {if(caml_call1(Core_kernel_Queue[14],blocked_reads))return 0;
              throw [0,Assert_failure,_q0_]}
            return _KT_},
         _Kt_=function(_KR_){return check(_Ks_,_KR_)},
         _Ku_=
          function(blocked_flushes)
           {function _KM_(f)
             {if(t[5] < f[1])return 0;throw [0,Assert_failure,_q2_]}
            caml_call2(Core_kernel_Queue[15],blocked_flushes,_KM_);
            var
             _KN_=Core_kernel_Int[107],
             _KO_=caml_call1(Core_kernel_Queue[25],blocked_flushes),
             _KP_=
              caml_call2(Core_kernel_List[84],_KO_,fill_when_num_values_read);
            if(caml_call2(Core_kernel_List[147],_KP_,_KN_))
             {var _KQ_=is_empty$1(t);
              if(_KQ_)
               {if(caml_call1(Core_kernel_Queue[14],blocked_flushes))return 0;
                throw [0,Assert_failure,_q3_]}
              return _KQ_}
            throw [0,Assert_failure,_q4_]},
         _Kv_=function(_KL_){return check(_Ku_,_KL_)},
         _Kw_=function(_KK_){return 0},
         _Kx_=
          function(pushback)
           {var
             _KH_=t[3],
             _KI_=length$2(t) <= _KH_?1:0,
             _KJ_=_KI_ || is_closed$0(t);
            if(is_full(pushback) === _KJ_)return 0;
            throw [0,Assert_failure,_q5_]},
         _Ky_=function(_KG_){return check(_Kx_,_KG_)},
         _Kz_=
          function(size_budget)
           {if(0 <= size_budget)return 0;throw [0,Assert_failure,_q6_]},
         _KA_=function(_KF_){return check(_Kz_,_KF_)},
         _KB_=function(_KE_){return 0},
         _KC_=
          iter$22
           (function(_KD_){return 0},
            _KB_,
            _KA_,
            _Ky_,
            _Kw_,
            _Kv_,
            _Kt_,
            _Kr_,
            _Kq_,
            _Kp_,
            _Kn_);
        return _KC_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        var
         _Kh_=0,
         _Ki_=0,
         _Kj_=function(param){return _qU_},
         _Kk_=
          [0,
           [1,
            [0,
             _qW_,
             [0,sexp_of_pipe(function(param){return _qV_},_Kj_,t),_Ki_]]],
           _Kh_],
         _Kl_=[0,[1,[0,_qX_,[0,caml_call1(Core_kernel[614],exn),0]]],_Kk_],
         _Km_=
          [1,
           [0,
            caml_call1(Sexplib0_Sexp_conv[7],cst_Pipe_invariant_failed),
            _Kl_]];
        return caml_call1(Core_kernel[364],_Km_)}}
    function sexp_of_phantom(v){throw [0,Assert_failure,_q7_]}
    function sexp_of_t$53(of_a,v){return sexp_of_pipe(of_a,sexp_of_phantom,v)}
    function sexp_of_phantom$0(v){throw [0,Assert_failure,_q8_]}
    function sexp_of_t$54(of_a,v)
     {return sexp_of_pipe(of_a,sexp_of_phantom$0,v)}
    var id_ref=[0,0];
    function create$21(param)
     {id_ref[1]++;
      var
       _Ka_=caml_call1(Core_kernel_Bag[22],0),
       _Kb_=caml_call1(create$12,0),
       _Kc_=caml_call1(create$12,0),
       _Kd_=caml_call2(Core_kernel_Queue[60],0,0),
       _Ke_=caml_call2(Core_kernel_Queue[60],0,0),
       _Kf_=caml_call1(create$12,0),
       _Kg_=caml_call2(Core_kernel_Queue[60],0,0),
       t=[0,id_ref[1],_Kg_,0,_Kf_,0,_Ke_,_Kd_,_Kc_,_Kb_,0,_Ka_];
      fill(t[4],0);
      if(check_invariant[1])invariant$20(t);
      return [0,t,t]}
    function update_pushback(t)
     {var _J9_=t[3];
      if(! (length$2(t) <= _J9_))
       if(! is_closed$0(t))
        {var
          _J__=is_full(t[4]),
          _J$_=_J__?(t[4] = caml_call1(create$12,0),0):_J__;
         return _J$_}
      return fill_if_empty(t[4],0)}
    function close(t)
     {if(show_debug_messages[1])
       {var
         _J5_=function(param){return _q9_},
         _J6_=function(param){return _q__};
        caml_call3
         (eprints,
          cst_close,
          t,
          function(_J8_){return sexp_of_pipe(_J6_,_J5_,_J8_)})}
      if(check_invariant[1])invariant$20(t);
      var _J7_=1 - is_closed$0(t);
      if(_J7_)
       {fill(t[8],0);
        if(is_empty$1(t))
         {caml_call2(Core_kernel_Queue[15],t[7],fill_with_eof);
          caml_call1(Core_kernel_Queue[46],t[7])}
        return update_pushback(t)}
      return _J7_}
    function close_read(t)
     {if(show_debug_messages[1])
       {var
         _J0_=function(param){return _q$_},
         _J1_=function(param){return _ra_};
        caml_call3
         (eprints,
          cst_close_read,
          t,
          function(_J4_){return sexp_of_pipe(_J1_,_J0_,_J4_)})}
      if(check_invariant[1])invariant$20(t);
      var _J2_=1 - is_read_closed(t);
      if(_J2_)
       {fill(t[9],0);
        var _J3_=function(flush){return fill$2(flush,-402004920)};
        caml_call2(Core_kernel_Queue[15],t[6],_J3_);
        caml_call1(Core_kernel_Queue[46],t[6]);
        caml_call1(Core_kernel_Queue[46],t[2]);
        update_pushback(t);
        return close(t)}
      return _J2_}
    function create_reader(close_on_exception,f)
     {var match=create$21(0),w=match[2],r=match[1];
      if(close_on_exception)
       {var _JY_=function(param){close(w);return caml_call1(_jc_,0)};
        protect(0,0,0,function(param){return caml_call1(f,w)},_JY_)}
      else
       {var _JZ_=function(param){return close(w)};
        upon$1(caml_call1(f,w),_JZ_)}
      return r}
    function init$4(f){return create_reader(1,f)}
    function create_writer(f)
     {var match=create$21(0),w=match[2],r=match[1];
      function _JX_(param){close_read(r);return caml_call1(_jc_,0)}
      protect(0,0,0,function(param){return caml_call1(f,r)},_JX_);
      return w}
    function values_were_read(t,consumer)
     {caml_call2(Core_kernel_Option[18],consumer,start);
      for(;;)
       {var match=caml_call1(Core_kernel_Queue[44],t[6]);
        if(match)
         {var flush=match[1],_JV_=flush[1] <= t[5]?1:0;
          if(_JV_)
           {caml_call1(Core_kernel_Queue[43],t[6]);
            if(consumer)
             {var
               consumer$0=consumer[1],
               _JW_=
                function(flush)
                  {return function(flush_result)
                    {return fill$2(flush,flush_result)}}
                 (flush);
              upon$1(values_sent_downstream_and_flushed(consumer$0),_JW_)}
            else
             fill$2(flush,17724);
            continue}
          return _JV_}
        return 0}}
    function consume_one(t,consumer)
     {if(1 <= length$2(t))
       {var result=caml_call1(Core_kernel_Queue[43],t[2]);
        t[5] = t[5] + 1 | 0;
        values_were_read(t,consumer);
        update_pushback(t);
        return result}
      throw [0,Assert_failure,_rb_]}
    function consume(t,max_queue_length,consumer)
     {if(0 <= max_queue_length)
       {if(length$2(t) <= max_queue_length)
         {var result=t[2];
          t[2] = caml_call2(Core_kernel_Queue[60],0,0);
          var _JU_=caml_call1(Core_kernel_Queue[13],result);
          t[5] = t[5] + _JU_ | 0;
          values_were_read(t,consumer);
          update_pushback(t);
          return result}
        t[5] = t[5] + max_queue_length | 0;
        values_were_read(t,consumer);
        var result$0=caml_call2(Core_kernel_Queue[60],[0,max_queue_length],0);
        caml_call4(Core_kernel_Queue[63],t[2],result$0,[0,max_queue_length],0);
        update_pushback(t);
        return result$0}
      throw [0,Assert_failure,_rc_]}
    function set_size_budget$0(t,size_budget)
     {if(size_budget < 0)
       {var
         _JS_=
          [0,[1,[0,_rd_,[0,caml_call1(Core_kernel[455],size_budget),0]]],0],
         _JT_=
          [1,
           [0,caml_call1(Sexplib0_Sexp_conv[7],cst_negative_size_budget),_JS_]];
        caml_call1(Core_kernel[364],_JT_)}
      t[3] = size_budget;
      return update_pushback(t)}
    function start_write(t)
     {if(show_debug_messages[1])
       {var
         _JJ_=function(param){return _re_},
         _JK_=function(param){return _rf_};
        caml_call3
         (eprints,
          cst_write,
          t,
          function(_JR_){return sexp_of_pipe(_JK_,_JJ_,_JR_)})}
      if(check_invariant[1])invariant$20(t);
      var _JL_=is_closed$0(t);
      if(_JL_)
       {var
         _JM_=0,
         _JN_=0,
         _JO_=function(param){return _rg_},
         _JP_=
          [0,
           [1,
            [0,
             _ri_,
             [0,sexp_of_pipe(function(param){return _rh_},_JO_,t),_JN_]]],
           _JM_],
         _JQ_=
          [1,
           [0,caml_call1(Sexplib0_Sexp_conv[7],cst_write_to_closed_pipe),_JP_]];
        return caml_call1(Core_kernel[364],_JQ_)}
      return _JL_}
    function finish_write(t)
     {for(;;)
       {if(! caml_call1(Core_kernel_Queue[14],t[7]))
         if(! is_empty$1(t))
          {var
            blocked_read=caml_call1(Core_kernel_Queue[43],t[7]),
            consumer=blocked_read[2],
            _JI_=blocked_read[1];
           switch(_JI_[0])
            {case 0:var ivar=_JI_[1];fill(ivar,17724);break;
             case 1:
              var ivar$0=_JI_[1];
              fill(ivar$0,[0,17724,consume_one(t,consumer)]);
              break;
             default:
              var ivar$1=_JI_[2],max_queue_length=_JI_[1];
              fill(ivar$1,[0,17724,consume(t,max_queue_length,consumer)])}
           continue}
        return update_pushback(t)}}
    function transfer_in_without_pushback(t,from)
     {start_write(t);
      caml_call4(Core_kernel_Queue[63],from,t[2],0,0);
      return finish_write(t)}
    function transfer_in(t,from)
     {transfer_in_without_pushback(t,from);return t[4]}
    function write(t,q){return transfer_in(t,q)}
    function write_without_pushback(t,value)
     {start_write(t);
      caml_call2(Core_kernel_Queue[40],t[2],value);
      return finish_write(t)}
    function write$0(t,value){write_without_pushback(t,value);return t[4]}
    function write_when_ready(t,f)
     {function _JH_(param)
       {return is_closed$0(t)
                ?-1025106484
                :[0,
                  17724,
                  caml_call1
                   (f,function(x){return write_without_pushback(t,x)})]}
      return caml_call2(include$20[4][3],t[4],_JH_)}
    function write_if_open(t,x)
     {return is_closed$0(t)?caml_call1(_jc_,0):write$0(t,x)}
    function write_without_pushback_if_open(t,x)
     {var _JG_=1 - is_closed$0(t);
      return _JG_?write_without_pushback(t,x):_JG_}
    function ensure_consumer_matches(consumer,t)
     {if(consumer)
       {var consumer$0=consumer[1],_JA_=t[1] !== consumer$0[1]?1:0;
        if(_JA_)
         {var
           _JB_=0,
           _JC_=0,
           _JD_=
            [0,
             [1,
              [0,_rk_,[0,sexp_of_t$53(function(param){return _rj_},t),_JC_]]],
             _JB_],
           _JE_=[0,[1,[0,_rl_,[0,sexp_of_t$50(consumer$0),0]]],_JD_],
           _JF_=
            [1,
             [0,
              caml_call1
               (Sexplib0_Sexp_conv[7],
                cst_Attempt_to_use_consumer_with_wrong_pipe),
              _JE_]];
          return caml_call1(Core_kernel[364],_JF_)}
        return _JA_}
      return 0}
    function start_read(consumer,t,label)
     {if(show_debug_messages[1])
       {var
         _Jx_=function(param){return _rm_},
         _Jy_=function(param){return _rn_};
        caml_call3
         (eprints,label,t,function(_Jz_){return sexp_of_pipe(_Jy_,_Jx_,_Jz_)})}
      if(check_invariant[1])invariant$20(t);
      return ensure_consumer_matches(consumer,t)}
    function gen_read_now(consumer,t,consume)
     {start_read(consumer,t,cst_read_now);
      if(is_empty$1(t))return is_closed$0(t)?3456156:-445537353;
      if(caml_call1(Core_kernel_Queue[14],t[7]))
       return [0,17724,caml_call2(consume,t,consumer)];
      throw [0,Assert_failure,_ro_]}
    function get_max_queue_length(max_queue_length)
     {if(max_queue_length)
       {var max_queue_length$0=max_queue_length[1];
        if(max_queue_length$0 <= 0)
         {var
           _Jv_=
            [0,
             [1,
              [0,_rp_,[0,caml_call1(Core_kernel[455],max_queue_length$0),0]]],
             0],
           _Jw_=
            [1,
             [0,caml_call1(Sexplib0_Sexp_conv[7],cst_max_queue_length_0),_Jv_]];
          caml_call1(Core_kernel[364],_Jw_)}
        return max_queue_length$0}
      return Core_kernel_Int[61]}
    function read_now(consumer,max_queue_length,t)
     {var max_queue_length$0=get_max_queue_length(max_queue_length);
      return gen_read_now
              (consumer,
               t,
               function(t,consumer)
                {return consume(t,max_queue_length$0,consumer)})}
    function read_now$0(consumer,t)
     {return gen_read_now(consumer,t,consume_one)}
    function read_now_at_most(consumer,t,num_values)
     {return read_now(consumer,[0,num_values],t)}
    function peek$1(t){return caml_call1(Core_kernel_Queue[44],t[2])}
    function clear$0(t){read_now(0,0,t);return 0}
    function read(consumer,max_queue_length,t)
     {var max_queue_length$0=get_max_queue_length(max_queue_length);
      start_read(consumer,t,cst_read);
      var r=read_now(consumer,[0,max_queue_length$0],t);
      if(typeof r === "number")
       if(! (3456156 <= r))
        return create$13
                (function(ivar)
                  {return caml_call2
                           (Core_kernel_Queue[40],
                            t[7],
                            [0,[2,max_queue_length$0,ivar],consumer])});
      return caml_call1(_jc_,r)}
    function read$0(consumer,t)
     {start_read(consumer,t,cst_read$0);
      if(is_empty$1(t))
       return is_closed$0(t)
               ?caml_call1(_jc_,3456156)
               :create$13
                 (function(ivar)
                   {return caml_call2
                            (Core_kernel_Queue[40],t[7],[0,[1,ivar],consumer])});
      if(caml_call1(Core_kernel_Queue[14],t[7]))
       return caml_call1(_jc_,[0,17724,consume_one(t,consumer)]);
      throw [0,Assert_failure,_rq_]}
    function read_at_most(consumer,t,num_values)
     {return read(consumer,[0,num_values],t)}
    function values_available(t)
     {start_read(0,t,cst_values_available);
      return is_empty$1(t)
              ?is_closed$0(t)
                ?caml_call1(_jc_,3456156)
                :create$13
                  (function(ivar)
                    {return caml_call2
                             (Core_kernel_Queue[40],t[7],[0,[0,ivar],0])})
              :caml_call1(_jc_,17724)}
    function read_choice(t)
     {function _Ju_(param){return read_now$0(0,t)}
      return [0,values_available(t),_Ju_]}
    function read_choice_single_consumer_exn(t,here)
     {function _Jq_(x)
       {if(typeof x === "number")
         if(! (3456156 <= x))
          {var
            _Js_=
             [0,
              [1,
               [0,
                _rr_,
                [0,caml_call1(Core_kernel_Source_code_position[1],here),0]]],
              0],
            _Jt_=
             [1,
              [0,
               caml_call1
                (Sexplib0_Sexp_conv[7],
                 cst_Pipe_read_choice_single_consumer_exn_choice_was_enabled_but_pipe_is_empty_this_is_likely_due_to_a_race_condition_with_one_or_more_other_consumers),
               _Js_]];
           return caml_call1(Core_kernel[364],_Jt_)}
        return x}
      var _Jr_=read_choice(t);
      return caml_call2(Choice[1],_Jr_,_Jq_)}
    function read_exactly(consumer,t,num_values)
     {start_read(consumer,t,cst_read_exactly);
      if(num_values <= 0)
       {var
         _Jm_=[0,[1,[0,_rs_,[0,caml_call1(Core_kernel[455],num_values),0]]],0],
         _Jn_=
          [1,
           [0,
            caml_call1
             (Sexplib0_Sexp_conv[7],cst_Pipe_read_exactly_got_num_values_0),
            _Jm_]];
        caml_call1(Core_kernel[364],_Jn_)}
      return create$13
              (function(finish)
                {var result=caml_call2(Core_kernel_Queue[60],0,0);
                 function loop(param)
                  {var already_read=caml_call1(Core_kernel_Queue[13],result);
                   if(already_read <= num_values)
                    {if(already_read === num_values)
                      return fill(finish,[0,-876407060,result]);
                     var
                      _Jo_=
                       function(param)
                        {if(typeof param === "number")
                          {var _Jp_=0 === already_read?3456156:[0,287952037,result];
                           return fill(finish,_Jp_)}
                         var q=param[2];
                         caml_call4(Core_kernel_Queue[63],q,result,0,0);
                         return loop(0)};
                     return caml_call2
                             (_ja_,
                              read(consumer,[0,num_values - already_read | 0],t),
                              _Jo_)}
                   throw [0,Assert_failure,_rt_]}
                 return loop(0)})}
    function downstream_flushed$1(t)
     {return is_empty$1(t)
              ?caml_call1(Core_kernel_List[18],t[10])
                ?caml_call1(_jc_,17724)
                :combine$0
                  (caml_call2
                    (Core_kernel_List[84],
                     t[10],
                     values_sent_downstream_and_flushed))
              :create$13
                (function(ready)
                  {var _Jl_=length$2(t);
                   return caml_call2
                           (Core_kernel_Queue[40],t[6],[0,t[5] + _Jl_ | 0,ready])})}
    function upstream_flushed(t)
     {if(caml_call1(Core_kernel_Bag[6],t[11]))return downstream_flushed$1(t);
      function _Jj_(f){return caml_call1(f,0)}
      var _Jk_=caml_call1(Core_kernel_Bag[17],t[11]);
      return combine$0(caml_call2(Core_kernel_List[84],_Jk_,_Jj_))}
    function add_consumer(t,downstream_flushed)
     {var consumer=[0,t[1],-758792467,downstream_flushed];
      t[10] = [0,consumer,t[10]];
      return consumer}
    function fold_gen(read_now,consumer,t,init,f)
     {if(check_invariant[1])invariant$20(t);
      ensure_consumer_matches(consumer,t);
      return create$13
              (function(finished)
                {function _Jh_(param)
                  {function loop(b)
                    {var match=caml_call2(read_now,consumer,t);
                     if(typeof match === "number")
                      {if(3456156 <= match)return fill(finished,b);
                       var _Ji_=function(param){return loop(b)};
                       return caml_call2(_ja_,values_available(t),_Ji_)}
                     var v=match[2];
                     return caml_call3(f,b,v,loop)}
                   return loop(init)}
                 return caml_call2(_ja_,caml_call1(_jc_,0),_Jh_)})}
    function fold$20(consumer,max_queue_length,t,init,f)
     {function _Je_(b,q,loop){return caml_call2(_ja_,caml_call2(f,b,q),loop)}
      return fold_gen
              (function(_Jf_)
                {return function(_Jg_)
                  {return read_now(_Jf_,max_queue_length,_Jg_)}},
               consumer,
               t,
               init,
               _Je_)}
    function fold$21(consumer,t,init,f)
     {return fold_gen
              (read_now$0,
               consumer,
               t,
               init,
               function(b,a,loop)
                {return caml_call2(_ja_,caml_call2(f,b,a),loop)})}
    function fold_without_pushback(consumer,t,init,f)
     {return fold_gen
              (read_now$0,
               consumer,
               t,
               init,
               function(b,a,loop){return caml_call1(loop,caml_call2(f,b,a))})}
    function with_error_to_current_monitor(opt,f,a)
     {if(opt)
       var sth=opt[1],continue_on_error=sth;
      else
       var continue_on_error=0;
      if(continue_on_error)
       {var
         _Jb_=
          function(param)
           {if(0 === param[0])return 0;
            var exn=param[1],_Jd_=extract_exn(exn);
            return send_exn(current(0),0,_Jd_)},
         _Jc_=try_with(0,0,0,0,0,0,function(param){return caml_call1(f,a)});
        return caml_call2(include$20[4][3],_Jc_,_Jb_)}
      return caml_call1(f,a)}
    function iter$23(consumer,continue_on_error,max_queue_length,t,f)
     {return fold$20
              (consumer,
               max_queue_length,
               t,
               0,
               function(param,q)
                {return with_error_to_current_monitor(continue_on_error,f,q)})}
    function iter$24(consumer,continue_on_error,t,f)
     {return fold_gen
              (read_now$0,
               consumer,
               t,
               0,
               function(param,a,loop)
                {function _Ja_(param){return caml_call1(loop,0)}
                 return caml_call2
                         (_ja_,
                          with_error_to_current_monitor(continue_on_error,f,a),
                          _Ja_)})}
    function iter_without_pushback(consumer,opt,max_iterations_per_job,t,f)
     {if(opt)
       var sth=opt[1],continue_on_error=sth;
      else
       var continue_on_error=0;
      ensure_consumer_matches(consumer,t);
      if(max_iterations_per_job)
       {var max_iterations_per_job$0=max_iterations_per_job[1];
        if(max_iterations_per_job$0 <= 0)
         {var
           _I6_=
            [0,
             [1,
              [0,
               _ru_,
               [0,caml_call1(Core_kernel[455],max_iterations_per_job$0),0]]],
             0],
           _I7_=
            [1,
             [0,
              caml_call1
               (Sexplib0_Sexp_conv[7],
                cst_iter_without_pushback_got_non_positive_max_iterations_per_job),
              _I6_]];
          caml_call1(Core_kernel[364],_I7_)}
        var max_iterations_per_job$1=max_iterations_per_job$0}
      else
       var max_iterations_per_job$1=Core_kernel_Int[61];
      var
       f$0=
        continue_on_error
         ?function(a)
           {try
             {var _I$_=caml_call1(f,a);return _I$_}
            catch(exn)
             {exn = caml_wrap_exception(exn);
              return send_exn(current(0),0,exn)}}
         :f;
      return create$13
              (function(finished)
                {function _I8_(param)
                  {function start(param)
                    {var remaining=max_iterations_per_job$1;
                     for(;;)
                      {if(0 === remaining)
                        {var _I9_=function(param){return start(0)};
                         return caml_call2(_ja_,caml_call1(_jc_,0),_I9_)}
                       var match=read_now$0(consumer,t);
                       if(typeof match === "number")
                        {if(3456156 <= match)return fill(finished,0);
                         var _I__=function(param){return start(0)};
                         return caml_call2(_ja_,values_available(t),_I__)}
                       var a=match[2];
                       caml_call1(f$0,a);
                       var remaining$0=remaining - 1 | 0,remaining=remaining$0;
                       continue}}
                   return start(0)}
                 return caml_call2(_ja_,caml_call1(_jc_,0),_I8_)})}
    function drain(t)
     {return iter$23(0,0,0,t,function(param){return caml_call1(_jc_,0)})}
    function drain_and_count(t)
     {return fold$20
              (0,
               0,
               t,
               0,
               function(sum,q)
                {return caml_call1
                         (_jc_,sum + caml_call1(Core_kernel_Queue[13],q) | 0)})}
    function read_all(input)
     {var result=caml_call2(Core_kernel_Queue[60],0,0);
      function _I4_(param){return result}
      var
       _I5_=
        iter$23
         (0,
          0,
          0,
          input,
          function(q)
           {caml_call4(Core_kernel_Queue[63],q,result,0,0);
            return caml_call1(_jc_,0)});
      return caml_call2(include$20[4][3],_I5_,_I4_)}
    function to_list$12(r)
     {var _I3_=Core_kernel_Queue[25];return caml_call2(_je_,read_all(r),_I3_)}
    function to_stream_deprecated(t)
     {return create$18
              (function(tail)
                {function _I2_(param){return close_exn(tail)}
                 return caml_call2
                         (_ja_,
                          iter_without_pushback
                           (0,0,0,t,function(x){return extend(tail,x)}),
                          _I2_)})}
    function of_stream_deprecated(s)
     {var
       match=create$21(0),
       w=match[2],
       r=match[1],
       q=caml_call2(Core_kernel_Queue[60],0,0);
      function transfer(param)
       {var _I1_=1 - caml_call1(Core_kernel_Queue[14],q);
        return _I1_?(write(w,q),0):_I1_}
      function loop$0(counter,s)
       {if(is_closed$0(w))throw [0,Assert_failure,_rv_];
        var next_deferred=caml_call1(_jG_,s),match=peek$0(next_deferred);
        if(match)
         {var next=match[1];
          if(counter < 50)
           {var counter$0=counter + 1 | 0;return loop_next$0(counter$0,next)}
          return caml_trampoline_return(loop_next$0,[0,next])}
        transfer(0);
        return upon$1(next_deferred,check_closed_loop_next)}
      function loop_next$0(counter,param)
       {if(param)
         {var s=param[2],x=param[1];
          caml_call2(Core_kernel_Queue[40],q,x);
          if(counter < 50)
           {var counter$0=counter + 1 | 0;return loop$0(counter$0,s)}
          return caml_trampoline_return(loop$0,[0,s])}
        transfer(0);
        return close(w)}
      function loop(s){return caml_trampoline(loop$0(0,s))}
      function loop_next(param){return caml_trampoline(loop_next$0(0,param))}
      function check_closed_loop_next(next)
       {var _I0_=1 - is_closed$0(w);return _I0_?loop_next(next):_I0_}
      loop(s);
      return r}
    function transfer_gen(read_now,write,input,output,f)
     {if(check_invariant[1]){invariant$20(input);invariant$20(output)}
      function upstream_flushed$0(param){return upstream_flushed(input)}
      var
       _IQ_=caml_call2(Core_kernel_Bag[23],output[11],upstream_flushed$0),
       consumer=
        add_consumer
         (input,function(param){return downstream_flushed$1(output)});
      function _IR_(param)
       {caml_call2(Core_kernel_Bag[25],output[11],_IQ_);
        return caml_call1(_jc_,0)}
      return protect
              (0,
               0,
               0,
               function(param)
                {return create$13
                         (function(result)
                           {function _IS_(param)
                             {function output_closed(param)
                               {close_read(input);return fill(result,0)}
                              function loop(param)
                               {if(is_closed$0(output))return output_closed(0);
                                var match=caml_call2(read_now,[0,consumer],input);
                                if(typeof match === "number")
                                 {if(3456156 <= match)return fill(result,0);
                                  var
                                   _IT_=function(param){return loop(0)},
                                   _IU_=0,
                                   _IV_=function(_IZ_){return 0},
                                   _IW_=[0,[0,output[8],_IV_],_IU_],
                                   _IX_=function(_IY_){return 0};
                                  return caml_call2
                                          (_ja_,
                                           choose([0,[0,values_available(input),_IX_],_IW_]),
                                           _IT_)}
                                var x=match[2];
                                return caml_call2(f,x,continue$0)}
                              function continue$0(y)
                               {if(is_closed$0(output))return output_closed(0);
                                var pushback=caml_call2(write,output,y);
                                values_sent_downstream(consumer);
                                return caml_call2
                                        (_ja_,pushback,function(param){return loop(0)})}
                              return loop(0)}
                            return caml_call2(_ja_,caml_call1(_jc_,0),_IS_)})},
               _IR_)}
    function transfer(max_queue_length,input,output,f)
     {function _IN_(q,k){return caml_call2(_ja_,caml_call1(f,q),k)}
      return transfer_gen
              (function(_IO_)
                {return function(_IP_)
                  {return read_now(_IO_,max_queue_length,_IP_)}},
               write,
               input,
               output,
               _IN_)}
    function transfer$0(input,output,f)
     {return transfer_gen
              (read_now$0,
               write$0,
               input,
               output,
               function(a,k){return caml_call1(k,caml_call1(f,a))})}
    function transfer_id(max_queue_length,input,output)
     {function _IK_(q,k){return caml_call1(k,q)}
      return transfer_gen
              (function(_IL_)
                {return function(_IM_)
                  {return read_now(_IL_,max_queue_length,_IM_)}},
               write,
               input,
               output,
               _IK_)}
    function map_gen(read,write,input,f)
     {var match=create$21(0),output=match[2],result=match[1];
      function _IJ_(param){return close(output)}
      upon$1(transfer_gen(read,write,input,output,f),_IJ_);
      return result}
    function map$27(max_queue_length,input,f)
     {function _IG_(q,k){return caml_call2(_ja_,caml_call1(f,q),k)}
      return map_gen
              (function(_IH_)
                {return function(_II_)
                  {return read_now(_IH_,max_queue_length,_II_)}},
               write,
               input,
               _IG_)}
    function map$28(input,f)
     {return map_gen
              (read_now$0,
               write$0,
               input,
               function(a,k){return caml_call1(k,caml_call1(f,a))})}
    function filter_map$5(max_queue_length,input,f)
     {return map$27
              (max_queue_length,
               input,
               function(q)
                {return caml_call3(Async_kernel_Deferred_queue[20],0,q,f)})}
    function filter_map$6(max_queue_length,input,f)
     {function _IC_(q,k)
       {function _IF_(x){return is_read_closed(input)?0:caml_call1(f,x)}
        return caml_call1(k,caml_call2(Core_kernel_Queue[52],q,_IF_))}
      return map_gen
              (function(_ID_)
                {return function(_IE_)
                  {return read_now(_ID_,max_queue_length,_IE_)}},
               write,
               input,
               _IC_)}
    function fold_filter_map(max_queue_length,input,init,f)
     {var accum=[0,init];
      return filter_map$6
              (max_queue_length,
               input,
               function(x)
                {var match=caml_call2(f,accum[1],x),x$0=match[2],a=match[1];
                 accum[1] = a;
                 return x$0})}
    function fold_map(max_queue_length,input,init,f)
     {return fold_filter_map
              (max_queue_length,
               input,
               init,
               function(accum,a)
                {var match=caml_call2(f,accum,a),b=match[2],accum$0=match[1];
                 return [0,accum$0,[0,b]]})}
    function filter$5(input,f)
     {return filter_map$6(0,input,function(x){return caml_call1(f,x)?[0,x]:0})}
    function of_list$0(l)
     {var match=create$21(0),writer=match[2],reader=match[1];
      write(writer,caml_call1(Core_kernel_Queue[37],l));
      close(writer);
      return reader}
    function singleton(x)
     {var match=create$21(0),writer=match[2],reader=match[1];
      write_without_pushback(writer,x);
      close(writer);
      return reader}
    function unfold$0(s,f)
     {function _Iz_(d,f)
       {var match=peek$0(d);
        if(match){var x=match[1];return caml_call1(f,x)}
        return caml_call2(_jd_,d,f)}
      return create_reader
              (0,
               function(writer)
                {function loop(s)
                  {function _IA_(param)
                    {if(param)
                      {var match=param[1],s=match[2],a=match[1];
                       if(is_closed$0(writer))return caml_call1(_jc_,0);
                       var _IB_=function(param){return loop(s)};
                       return _Iz_(write$0(writer,a),_IB_)}
                     return caml_call1(_jc_,0)}
                   return _Iz_(caml_call1(f,s),_IA_)}
                 return loop(s)})}
    function of_sequence(sequence)
     {return create_reader
              (0,
               function(writer)
                {function loop(sequence$1)
                  {if(! is_closed$0(writer))
                    if(! caml_call1(Core_kernel_Sequence[6],sequence$1))
                     {start_write(writer);
                      var
                       _Ix_=length$2(writer),
                       i$1=(1 + writer[3] | 0) - _Ix_ | 0,
                       sequence=sequence$1,
                       i=i$1;
                      for(;;)
                       {if(0 < i)
                         {var match=caml_call1(Core_kernel_Sequence[40],sequence);
                          if(match)
                           {var match$0=match[1],sequence$0=match$0[2],a=match$0[1];
                            caml_call2(Core_kernel_Queue[40],writer[2],a);
                            var i$0=i - 1 | 0,sequence=sequence$0,i=i$0;
                            continue}}
                        finish_write(writer);
                        var _Iy_=function(param){return loop(sequence)};
                        return caml_call2(include$20[4][2],writer[4],_Iy_)}}
                   return caml_call1(_jc_,0)}
                 return loop(sequence)})}
    function to_sequence(t)
     {function _Iw_(param)
       {var match=read_now$0(0,t);
        if(typeof match === "number")
         return 3456156 <= match?0:[0,[0,[1,values_available(t)],0]];
        var a=match[2];
        return [0,[0,[0,a],0]]}
      return caml_call2(Core_kernel_Sequence[43],0,_Iw_)}
    function interleave_pipe(inputs)
     {var
       match=create$21(0),
       output_writer=match[2],
       output=match[1],
       num_pipes_remaining=[0,1];
      function decr_num_pipes_remaining(param)
       {num_pipes_remaining[1] += -1;
        var _Iv_=0 === num_pipes_remaining[1]?1:0;
        return _Iv_?close(output_writer):_Iv_}
      function _Ir_(param){return decr_num_pipes_remaining(0)}
      var
       _Is_=
        iter_without_pushback
         (0,
          0,
          0,
          inputs,
          function(input)
           {num_pipes_remaining[1]++;
            function _It_(param){return decr_num_pipes_remaining(0)}
            var _Iu_=transfer_id(0,input,output_writer);
            caml_call2(include$20[4][3],_Iu_,_It_);
            return 0});
      caml_call2(include$20[4][3],_Is_,_Ir_);
      return output}
    function interleave$0(inputs)
     {if(check_invariant[1])
       caml_call2(Core_kernel_List[19],inputs,invariant$20);
      return interleave_pipe(of_list$0(inputs))}
    function merge$0(inputs,cmp)
     {var match=create$21(0),w=match[2],r=match[1];
      function _Ig_(param)
       {return caml_call2(Core_kernel_List[19],inputs,close_read)}
      upon$1(w[8],_Ig_);
      var _Ih_=0;
      function _Ii_(param,_Iq_)
       {var a2=_Iq_[1],a1=param[1];return caml_call2(cmp,a1,a2)}
      var heap=caml_call3(Core_kernel_Heap[19],0,_Ii_,_Ih_);
      function handle_read(input,eof_or_ok)
       {if(typeof eof_or_ok === "number")return 0;
        var v=eof_or_ok[2];
        return caml_call2(Core_kernel_Heap[24],heap,[0,v,input])}
      function pop_heap_and_loop(param)
       {for(;;)
         {var match=caml_call1(Core_kernel_Heap[26],heap);
          if(match)
           {var
             match$0=match[1],
             input=match$0[2],
             v=match$0[1],
             _Im_=1 - is_closed$0(w);
            if(_Im_)
             {write_without_pushback(w,v);
              if(0 === caml_call1(Core_kernel_Heap[3],heap))
               {var _In_=function(param){return close(w)};
                return upon$1(transfer_id(0,input,w),_In_)}
              var x=read_now$0(0,input);
              if(typeof x === "number")
               if(! (3456156 <= x))
                {var
                  _Io_=
                   function(param)
                    {function _Ip_(x)
                      {handle_read(input,x);return pop_heap_and_loop(0)}
                     return caml_call2(_ja_,read$0(0,input),_Ip_)};
                 return caml_call2(_ja_,w[4],_Io_)}
              handle_read(input,x);
              continue}
            return _Im_}
          return close(w)}}
      function _Ij_(input)
       {function _Ik_(x){return handle_read(input,x)}
        var _Il_=read$0(0,input);
        return caml_call2(include$20[4][3],_Il_,_Ik_)}
      var
       initial_push=
        caml_call3(Async_kernel_Deferred_list[14],0,inputs,_Ij_);
      upon$1(initial_push,pop_heap_and_loop);
      return r}
    function concat$2(inputs)
     {var match=create$21(0),w=match[2],r=match[1];
      function _Ie_(param){return close(w)}
      function _If_(input){return transfer_id(0,input,w)}
      upon$1(caml_call3(Async_kernel_Deferred_list[14],0,inputs,_If_),_Ie_);
      return r}
    function _rw_(param)
     {check_invariant[1] = 1;
      show_debug_messages[1] = 0;
      function read_result(d)
       {var _Ic_=peek$0(d),_Id_=caml_call4(Core_kernel_Option[52],0,0,0,_Ic_);
        return caml_call1(Core_kernel_Queue[25],_Id_)}
      function _FR_(param)
       {function _H8_(l)
         {var reader=of_list$0(l);
          function _Ib_(q)
           {if(caml_equal(caml_call1(Core_kernel_Queue[25],q),l))return 0;
            throw [0,Assert_failure,_rx_]}
          return upon$1(read_all(reader),_Ib_)}
        function _H9_(i)
         {function _H$_(_Ia_){return _Ia_}
          return caml_call2(Core_kernel_List[128],i,_H$_)}
        var _H__=caml_call2(Core_kernel_List[128],10,_H9_);
        caml_call2(Core_kernel_List[19],_H__,_H8_);
        return stabilize$0(0)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_List_iter_List_init_10_f_fun_i_List_ini,
        0,
        cst_src_pipe_ml$0,
        1154,
        4,
        234,
        _FR_);
      function _FS_(param)
       {var reader=singleton(0);
        function _H7_(q)
         {if(caml_equal(caml_call1(Core_kernel_Queue[25],q),_ry_))return 0;
          throw [0,Assert_failure,_rz_]}
        upon$1(read_all(reader),_H7_);
        return stabilize$0(0)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_upon_read_all_reader_fun_q_assert_Q_t,
        0,
        cst_src_pipe_ml$1,
        1162,
        4,
        142,
        _FS_);
      function _FT_(param)
       {var match=create$21(0),writer=match[2],reader=match[1];
        if(is_closed$0(writer))throw [0,Assert_failure,_rA_];
        close(writer);
        if(is_determined(reader[8]))
         {if(is_closed$0(reader))
           {if(is_closed$0(writer))return 0;throw [0,Assert_failure,_rB_]}
          throw [0,Assert_failure,_rC_]}
        throw [0,Assert_failure,_rD_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_assert_not_is_closed_writer_close_writer,
        0,
        cst_src_pipe_ml$2,
        1169,
        4,
        242,
        _FT_);
      function _FU_(param)
       {var match=create$21(0),writer=match[2],reader=match[1];
        if(is_closed$0(writer))throw [0,Assert_failure,_rE_];
        close_read(reader);
        if(is_determined(reader[8]))
         {if(is_closed$0(reader))
           {if(is_closed$0(writer))return 0;throw [0,Assert_failure,_rF_]}
          throw [0,Assert_failure,_rG_]}
        throw [0,Assert_failure,_rH_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_assert_not_is_closed_writer_close_read_r,
        0,
        cst_src_pipe_ml$3,
        1178,
        4,
        247,
        _FU_);
      function _FV_(param)
       {function check_read(read)
         {var
           match=create$21(0),
           writer=match[2],
           reader=match[1],
           d=caml_call1(read,reader);
          if(0 === peek$0(d))
           {close(writer);
            stabilize$0(0);
            if(caml_equal(peek$0(d),_rI_))
             {var d$0=caml_call1(read,reader);
              stabilize$0(0);
              if(caml_equal(peek$0(d$0),_rJ_))return 0;
              throw [0,Assert_failure,_rK_]}
            throw [0,Assert_failure,_rL_]}
          throw [0,Assert_failure,_rM_]}
        check_read(function(eta){return read(0,0,eta)});
        check_read(function(eta){return read$0(0,eta)});
        check_read(function(reader){return read(0,_rN_,reader)});
        check_read(function(reader){return read_exactly(0,reader,1)});
        return check_read(values_available)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_check_read_read_check_read_read_check_read,
        0,
        cst_src_pipe_ml$4,
        1187,
        4,
        579,
        _FV_);
      function _FW_(param)
       {function check_read(read,get_values)
         {var match=create$21(0),writer=match[2],reader=match[1];
          write$0(writer,13);
          close(writer);
          var d=caml_call1(read,reader);
          stabilize$0(0);
          var match$0=peek$0(d);
          if(match$0)
           {var z=match$0[1];
            if(caml_equal(_rO_,caml_call1(get_values,z)))return 0;
            throw [0,Assert_failure,_rP_]}
          throw [0,Assert_failure,_rQ_]}
        function _H2_(param)
         {if(typeof param !== "number")
           if(17724 === param[1])
            {var q=param[2];return caml_call1(Core_kernel_Queue[25],q)}
          throw [0,Assert_failure,_rR_]}
        check_read(function(eta){return read(0,0,eta)},_H2_);
        function _H3_(param)
         {if(typeof param !== "number")
           if(17724 === param[1]){var a=param[2];return [0,a,0]}
          throw [0,Assert_failure,_rS_]}
        check_read(function(eta){return read$0(0,eta)},_H3_);
        function _H4_(param)
         {if(typeof param !== "number")
           if(17724 === param[1])
            {var q=param[2];return caml_call1(Core_kernel_Queue[25],q)}
          throw [0,Assert_failure,_rT_]}
        check_read(function(r){return read(0,_rU_,r)},_H4_);
        function _H5_(param)
         {if(typeof param !== "number")
           if(-876407060 === param[1])
            {var q=param[2];return caml_call1(Core_kernel_Queue[25],q)}
          throw [0,Assert_failure,_rV_]}
        check_read(function(r){return read_exactly(0,r,1)},_H5_);
        function _H6_(param)
         {if(typeof param !== "number")
           if(17724 === param[1])
            {var q=param[2];return caml_call1(Core_kernel_Queue[25],q)}
          throw [0,Assert_failure,_rW_]}
        check_read(function(r){return caml_call1(_jc_,read_now(0,0,r))},_H6_);
        return check_read(read_all,Core_kernel_Queue[25])}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_check_read_read_function_Ok_q_Q_to_li,
        0,
        cst_src_pipe_ml$5,
        1206,
        4,
        878,
        _FW_);
      function _FX_(param)
       {var
         match=create$21(0),
         writer=match[2],
         reader=match[1],
         f1=downstream_flushed$1(writer);
        write$0(writer,13);
        var f2=downstream_flushed$1(writer);
        close_read(reader);
        stabilize$0(0);
        if(caml_equal(peek$0(f1),_rX_))
         {if(caml_equal(peek$0(f2),_rY_))return 0;
          throw [0,Assert_failure,_rZ_]}
        throw [0,Assert_failure,_r0_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_don_t_wait_for_write_writer_13_let_f2_d,
        0,
        cst_src_pipe_ml$6,
        1228,
        4,
        334,
        _FX_);
      function _FY_(param)
       {var reader=create_reader(0,function(param){return never(0)});
        stabilize$0(0);
        if(is_closed$0(reader))throw [0,Assert_failure,_r1_];
        var _H1_=peek$1(reader);
        if(caml_call1(Core_kernel_Option[46],_H1_))return 0;
        throw [0,Assert_failure,_r2_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_not_is_closed_reader,
        0,
        cst_src_pipe_ml$7,
        1241,
        4,
        215,
        _FY_);
      function _FZ_(param)
       {var
         reader=
          create_reader
           (0,
            function(writer)
             {write_without_pushback(writer,0);return caml_call1(_jc_,0)});
        stabilize$0(0);
        if(is_closed$0(reader))
         {var _H0_=peek$1(reader);
          if(caml_call1(Core_kernel_Option[47],_H0_))return 0;
          throw [0,Assert_failure,_r3_]}
        throw [0,Assert_failure,_r4_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_is_closed_reader_asse,
        0,
        cst_src_pipe_ml$8,
        1248,
        4,
        256,
        _FZ_);
      function _F0_(param)
       {var
         finish=caml_call1(create$12,0),
         reader=
          create_reader
           (0,
            function(writer){write_without_pushback(writer,0);return finish});
        stabilize$0(0);
        if(is_closed$0(reader))throw [0,Assert_failure,_r5_];
        var _HZ_=peek$1(reader);
        if(caml_call1(Core_kernel_Option[47],_HZ_))
         {fill(finish,0);
          var d=to_list$12(reader);
          stabilize$0(0);
          if(is_closed$0(reader))
           {if(caml_equal(peek$0(d),_r6_))return 0;
            throw [0,Assert_failure,_r7_]}
          throw [0,Assert_failure,_r8_]}
        throw [0,Assert_failure,_r9_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_not_is_closed_reader$0,
        0,
        cst_src_pipe_ml$9,
        1257,
        4,
        470,
        _F0_);
      function _F1_(param)
       {var max=0;
        for(;;)
         {var
           list=
            to_list$12
             (unfold$0
               (0,
                function(max)
                  {return function(n)
                    {return max <= n
                             ?caml_call1(_jc_,0)
                             :caml_call1(_jc_,[0,[0,n,n + 1 | 0]])}}
                 (max)));
          stabilize$0(0);
          var
           got=peek$0(list),
           _HU_=function(_HY_){return _HY_},
           expect=[0,caml_call2(Core_kernel_List[128],max,_HU_)],
           _HV_=caml_call1(Core_kernel[513],Core_kernel[455]),
           sexpifier=caml_call1(Core_kernel[542],_HV_),
           equal=0,
           message=0,
           here=0,
           comparator=
            function(a_007,b_008)
             {function _HX_(a_009,b_010)
               {return caml_call3
                        (Core_kernel[510],Core_kernel[451],a_009,b_010)}
              return caml_call3(Core_kernel[539],_HX_,a_007,b_008)};
          caml_call8
           (Ppx_assert_lib_Runtime[3],
            pos$31,
            sexpifier,
            comparator,
            here,
            message,
            equal,
            expect,
            got);
          var _HW_=max + 1 | 0;
          if(5 !== max){var max=_HW_;continue}
          return 0}}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_for_max_0_to_5_do_let_list_unfold,
        0,
        cst_src_pipe_ml$10,
        1273,
        4,
        388,
        _F1_);
      function _F2_(param)
       {var
         monitor=create$16(0,0,0,0),
         errors=detach_and_get_error_stream(monitor),
         _HO_=
          caml_call3
           (_lE_,
            [0,monitor],
            0,
            function(param)
             {return create_reader
                      (0,
                       function(writer)
                        {function _HQ_(param)
                          {write_without_pushback(writer,0);
                           var
                            _HS_=
                             [0,
                              caml_call1(Sexplib0_Sexp_conv[7],cst_src_pipe_ml_1297_37),
                              0],
                            _HT_=[1,[0,caml_call1(Sexplib0_Sexp_conv[7],cst_fail),_HS_]];
                           return caml_call1(Core_kernel[364],_HT_)}
                         var _HR_=yield$3(t$5(0));
                         return caml_call2(include$20[4][2],_HR_,_HQ_)})}),
         reader=caml_call4(Core_kernel_Option[52],0,0,_r__,_HO_);
        stabilize$0(0);
        if(is_closed$0(reader))throw [0,Assert_failure,_r$_];
        if(caml_equal(read_now$0(0,reader),_sa_))
         {stabilize$0(0);
          if(is_closed$0(reader))throw [0,Assert_failure,_sb_];
          if(-445537353 === read_now$0(0,reader))
           {var match=peek$0(caml_call1(_jG_,errors));
            if(match)if(match[1])return 0;
            var
             _HP_=
              caml_call1(Sexplib0_Sexp_conv[7],cst_expected_exn_to_bubble_up);
            return caml_call1(Core_kernel[364],_HP_)}
          throw [0,Assert_failure,_sc_]}
        throw [0,Assert_failure,_sd_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_create_reader_close_on_exception_false,
        0,
        cst_src_pipe_ml$11,
        1289,
        4,
        889,
        _F2_);
      function _F3_(param)
       {var
         monitor=create$16(0,0,0,0),
         errors=detach_and_get_error_stream(monitor),
         _HI_=
          caml_call3
           (_lE_,
            [0,monitor],
            0,
            function(param)
             {return create_reader
                      (1,
                       function(writer)
                        {function _HK_(param)
                          {write_without_pushback(writer,0);
                           var
                            _HM_=
                             [0,
                              caml_call1(Sexplib0_Sexp_conv[7],cst_src_pipe_ml_1319_37),
                              0],
                            _HN_=
                             [1,[0,caml_call1(Sexplib0_Sexp_conv[7],cst_fail$0),_HM_]];
                           return caml_call1(Core_kernel[364],_HN_)}
                         var _HL_=yield$3(t$5(0));
                         return caml_call2(include$20[4][2],_HL_,_HK_)})}),
         reader=caml_call4(Core_kernel_Option[52],0,0,_se_,_HI_);
        stabilize$0(0);
        if(is_closed$0(reader))
         {if(caml_equal(read_now$0(0,reader),_sf_))
           {stabilize$0(0);
            if(3456156 === read_now$0(0,reader))
             {var match=peek$0(caml_call1(_jG_,errors));
              if(match)if(match[1])return 0;
              var
               _HJ_=
                caml_call1
                 (Sexplib0_Sexp_conv[7],cst_expected_exn_to_bubble_up$0);
              return caml_call1(Core_kernel[364],_HJ_)}
            throw [0,Assert_failure,_sg_]}
          throw [0,Assert_failure,_sh_]}
        throw [0,Assert_failure,_si_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_create_reader_close_on_exception_true,
        0,
        cst_src_pipe_ml$12,
        1311,
        4,
        964,
        _F3_);
      function _F4_(param)
       {var
         writer=
          create_writer
           (function(reader)
             {function _HG_(param)
               {if(caml_equal(read_now$0(0,reader),_sj_))
                 return caml_call1(_jc_,0);
                throw [0,Assert_failure,_sk_]}
              var _HH_=yield$3(t$5(0));
              return caml_call2(include$20[4][2],_HH_,_HG_)});
        if(is_closed$0(writer))throw [0,Assert_failure,_sl_];
        write_without_pushback(writer,0);
        write_without_pushback(writer,0);
        write_without_pushback(writer,0);
        stabilize$0(0);
        if(is_closed$0(writer))
         {var _HF_=peek$1(writer);
          if(caml_call1(Core_kernel_Option[46],_HF_))return 0;
          throw [0,Assert_failure,_sm_]}
        throw [0,Assert_failure,_sn_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_assert_not_is_closed_writer_write_withou,
        0,
        cst_src_pipe_ml$13,
        1338,
        4,
        460,
        _F4_);
      function _F5_(param)
       {var match=create$21(0),writer=match[2],p=write$0(writer,0);
        close(writer);
        stabilize$0(0);
        if(caml_equal(peek$0(p),_so_))return 0;
        throw [0,Assert_failure,_sp_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_close_writer_stabilize_assert_Deferred,
        0,
        cst_src_pipe_ml$14,
        1356,
        4,
        172,
        _F5_);
      function _F6_(param)
       {var
         match=create$21(0),
         writer=match[2],
         reader=match[1],
         p=write$0(writer,0);
        close_read(reader);
        stabilize$0(0);
        if(caml_equal(peek$0(p),_sq_))return 0;
        throw [0,Assert_failure,_sr_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_close_read_reader_stabilize_assert_Def,
        0,
        cst_src_pipe_ml$15,
        1364,
        4,
        182,
        _F6_);
      function _F7_(param)
       {var
         match=create$21(0),
         writer=match[2],
         reader=match[1],
         p=write$0(writer,0);
        stabilize$0(0);
        if(0 === peek$0(p))
         {read_now(0,0,reader);
          stabilize$0(0);
          if(caml_equal(peek$0(p),_ss_))return 0;
          throw [0,Assert_failure,_st_]}
        throw [0,Assert_failure,_su_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_Deferred_peek_p_Non,
        0,
        cst_src_pipe_ml$16,
        1372,
        4,
        300,
        _F7_);
      function _F8_(param)
       {var
         match=create$21(0),
         writer=match[2],
         reader=match[1],
         p=write$0(writer,0);
        write$0(writer,0);
        if(2 === length$2(writer))
         {stabilize$0(0);
          if(0 === peek$0(p))
           {read$0(0,reader);
            stabilize$0(0);
            if(1 === length$2(writer))
             {if(0 === peek$0(p))
               {read$0(0,reader);
                stabilize$0(0);
                if(0 === length$2(writer))
                 {if(caml_equal(peek$0(p),_sv_))return 0;
                  throw [0,Assert_failure,_sw_]}
                throw [0,Assert_failure,_sx_]}
              throw [0,Assert_failure,_sy_]}
            throw [0,Assert_failure,_sz_]}
          throw [0,Assert_failure,_sA_]}
        throw [0,Assert_failure,_sB_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_assert_length_writer_2_stabilize_a,
        0,
        cst_src_pipe_ml$17,
        1382,
        4,
        514,
        _F8_);
      function _F9_(param)
       {var match=create$21(0),writer=match[2],reader=match[1];
        close(writer);
        var d=read_all(reader);
        stabilize$0(0);
        if(0 === read_result(d))return 0;
        throw [0,Assert_failure,_sC_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_close_writer_let_d_read_all_reader_in_sta,
        0,
        cst_src_pipe_ml$18,
        1402,
        4,
        170,
        _F9_);
      function _F__(param)
       {var match=create$21(0),writer=match[2],reader=match[1];
        write$0(writer,13);
        close(writer);
        var d=read_all(reader);
        stabilize$0(0);
        if(caml_equal(read_result(d),_sD_))return 0;
        throw [0,Assert_failure,_sE_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_don_t_wait_for_write_writer_13_close_write,
        0,
        cst_src_pipe_ml$19,
        1410,
        4,
        214,
        _F__);
      function _F$_(param)
       {var match=create$21(0),writer=match[2],reader=match[1];
        write(writer,caml_call1(Core_kernel_Queue[37],_sF_));
        close(writer);
        function _HD_(param)
         {if(typeof param === "number")throw [0,Assert_failure,_sG_];
          var q=param[2];
          return q}
        var _HE_=read(0,_sH_,reader),d=caml_call2(include$20[4][3],_HE_,_HD_);
        stabilize$0(0);
        if(caml_equal(read_result(d),_sI_))return 0;
        throw [0,Assert_failure,_sJ_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_don_t_wait_for_write_writer_Q_of_list_12,
        0,
        cst_src_pipe_ml$20,
        1421,
        4,
        341,
        _F$_);
      function _Ga_(param)
       {var match=create$21(0),writer=match[2],reader=match[1];
        write(writer,caml_call1(Core_kernel_Queue[37],_sK_));
        close(writer);
        function _HB_(param)
         {if(typeof param === "number")throw [0,Assert_failure,_sL_];
          var q=param[2];
          return q}
        var _HC_=read(0,_sM_,reader),d=caml_call2(include$20[4][3],_HC_,_HB_);
        stabilize$0(0);
        if(caml_equal(read_result(d),_sN_))return 0;
        throw [0,Assert_failure,_sO_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_don_t_wait_for_write_writer_Q_of_list_12$0,
        0,
        cst_src_pipe_ml$21,
        1434,
        4,
        345,
        _Ga_);
      function _Gb_(param)
       {var
         match=create$21(0),
         writer=match[2],
         reader=match[1],
         p=write(writer,caml_call1(Core_kernel_Queue[37],l));
        clear$0(reader);
        stabilize$0(0);
        if(caml_equal(peek$0(p),_sP_))
         {if(0 === length$2(reader))
           {write(writer,caml_call1(Core_kernel_Queue[37],l));
            close(writer);
            var d=read_all(reader);
            stabilize$0(0);
            if(caml_equal(read_result(d),l))return 0;
            throw [0,Assert_failure,_sQ_]}
          throw [0,Assert_failure,_sR_]}
        throw [0,Assert_failure,_sS_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_clear_reader_stabilize_assert_Deferred,
        0,
        cst_src_pipe_ml$22,
        1449,
        4,
        410,
        _Gb_);
      function _Gc_(param)
       {var
         match=create$21(0),
         writer=match[2],
         reader=match[1],
         reader$0=map$28(reader,function(x){return x + 13 | 0});
        write(writer,caml_call1(Core_kernel_Queue[37],_sT_));
        function _Hz_(param)
         {if(typeof param !== "number")
           if(! (287952037 <= param[1]))
            {var q=param[2];close_read(reader$0);return q}
          throw [0,Assert_failure,_sU_]}
        var
         _HA_=read_exactly(0,reader$0,2),
         d=caml_call2(include$20[4][3],_HA_,_Hz_);
        stabilize$0(0);
        if(is_closed$0(writer))
         {if(caml_equal(read_result(d),_sV_))return 0;
          throw [0,Assert_failure,_sW_]}
        throw [0,Assert_failure,_sX_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_don_t_wait_for_write_writer_Q_of_list_1,
        0,
        cst_src_pipe_ml$23,
        1466,
        4,
        441,
        _Gc_);
      function _Gd_(param)
       {var tail=create$15(0),pipe=of_stream_deprecated(tail[1]);
        stabilize$0(0);
        if(0 === length$2(pipe))
         {extend(tail,13);
          stabilize$0(0);
          if(1 === length$2(pipe))
           {extend(tail,14);
            extend(tail,15);
            stabilize$0(0);
            if(3 === length$2(pipe))
             {var d=read_all(pipe);
              close_exn(tail);
              stabilize$0(0);
              if(caml_equal(read_result(d),_sY_))return 0;
              throw [0,Assert_failure,_sZ_]}
            throw [0,Assert_failure,_s0_]}
          throw [0,Assert_failure,_s1_]}
        throw [0,Assert_failure,_s2_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_length_pipe_0_Tai,
        0,
        cst_src_pipe_ml$24,
        1482,
        4,
        478,
        _Gd_);
      function _Ge_(param)
       {var i=0;
        for(;;)
         {var
           _Hu_=function(_Hy_){return _Hy_},
           data=caml_call2(Core_kernel_List[128],i,_Hu_),
           sequence=caml_call1(Core_kernel_Sequence[103],data),
           pipe=of_sequence(sequence),
           data_roundtripped=to_list$12(pipe);
          stabilize$0(0);
          var
           got=peek$0(data_roundtripped),
           expect=[0,data],
           _Hv_=caml_call1(Core_kernel[513],Core_kernel[455]),
           sexpifier=caml_call1(Core_kernel[542],_Hv_),
           equal=0,
           message=0,
           here=0,
           comparator=
            function(a_013,b_014)
             {function _Hx_(a_015,b_016)
               {return caml_call3
                        (Core_kernel[510],Core_kernel[451],a_015,b_016)}
              return caml_call3(Core_kernel[539],_Hx_,a_013,b_014)};
          caml_call8
           (Ppx_assert_lib_Runtime[3],
            pos$32,
            sexpifier,
            comparator,
            here,
            message,
            equal,
            expect,
            got);
          if(is_closed$0(pipe))
           {var _Hw_=i + 1 | 0;if(5 !== i){var i=_Hw_;continue}return 0}
          throw [0,Assert_failure,_s3_]}}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_for_i_0_to_5_do_let_data_List_init_i_f,
        0,
        cst_src_pipe_ml$25,
        1502,
        4,
        389,
        _Ge_);
      function _Gf_(param)
       {function _Ht_(i){return [0,[0,i,i + 1 | 0]]}
        var
         sequence=caml_call2(Core_kernel_Sequence[43],0,_Ht_),
         pipe=of_sequence(sequence);
        stabilize$0(0);
        if(is_closed$0(pipe))throw [0,Assert_failure,_s4_];
        var got=read_now$0(0,pipe),equal=0,message=0,here=0;
        function sexpifier(param)
         {if(typeof param === "number")return 3456156 <= param?_s5_:_s6_;
          var v0=param[2];
          return [1,[0,_s7_,[0,caml_call1(Core_kernel[455],v0),0]]]}
        function comparator(a_019,b_020)
         {if(caml_call2(Ppx_compare_lib[1],a_019,b_020))return 0;
          if(typeof a_019 === "number")
           {if(3456156 <= a_019)
             {if(3456156 === b_020)return 0}
            else
             if(-445537353 === b_020)return 0}
          else
           if(typeof b_020 !== "number")
            if(17724 === b_020[1])
             {var right_022=b_020[2],left_021=a_019[2];
              return caml_call2(Core_kernel[451],left_021,right_022)}
          return caml_compare(a_019,b_020)}
        caml_call8
         (Ppx_assert_lib_Runtime[3],
          pos$33,
          sexpifier,
          comparator,
          here,
          message,
          equal,
          expect,
          got);
        stabilize$0(0);
        if(is_closed$0(pipe))throw [0,Assert_failure,_s8_];
        var got$0=read_now$0(0,pipe),equal$0=0,message$0=0,here$0=0;
        function sexpifier$0(param)
         {if(typeof param === "number")return 3456156 <= param?_s9_:_s__;
          var v0=param[2];
          return [1,[0,_s$_,[0,caml_call1(Core_kernel[455],v0),0]]]}
        function comparator$0(a_023,b_024)
         {if(caml_call2(Ppx_compare_lib[1],a_023,b_024))return 0;
          if(typeof a_023 === "number")
           {if(3456156 <= a_023)
             {if(3456156 === b_024)return 0}
            else
             if(-445537353 === b_024)return 0}
          else
           if(typeof b_024 !== "number")
            if(17724 === b_024[1])
             {var right_026=b_024[2],left_025=a_023[2];
              return caml_call2(Core_kernel[451],left_025,right_026)}
          return caml_compare(a_023,b_024)}
        caml_call8
         (Ppx_assert_lib_Runtime[3],
          pos$34,
          sexpifier$0,
          comparator$0,
          here$0,
          message$0,
          equal$0,
          expect$0,
          got$0);
        close_read(pipe);
        stabilize$0(0);
        if(is_closed$0(pipe))return 0;
        throw [0,Assert_failure,_ta_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_closing_the_pipe_produced_by_of_sequence_early,
        0,
        cst_src_pipe_ml$26,
        1514,
        4,
        594,
        _Gf_);
      function _Gg_(param)
       {var r=of_list$0(expect$1);
        function _Hq_(param)
         {if(0 === param[0]){var v=param[1];return v}
          throw [0,Assert_failure,_tb_]}
        var
         _Hr_=to_sequence(r),
         _Hs_=caml_call1(Core_kernel_Sequence[17],_Hr_),
         got=caml_call2(Core_kernel_List[84],_Hs_,_Hq_),
         sexpifier=caml_call1(Core_kernel[513],Core_kernel[455]),
         equal=0,
         message=0,
         here=0;
        function comparator(a_027,b_028)
         {return caml_call3(Core_kernel[510],Core_kernel[451],a_027,b_028)}
        return caml_call8
                (Ppx_assert_lib_Runtime[3],
                 pos$35,
                 sexpifier,
                 comparator,
                 here,
                 message,
                 equal,
                 expect$1,
                 got)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_to_sequence_produces_immediate_values_when_available,
        0,
        cst_src_pipe_ml$27,
        1533,
        4,
        362,
        _Gg_);
      function _Gh_(param)
       {var match=create$21(0),w=match[2],r=match[1];
        write_without_pushback(w,1);
        var
         _Hn_=to_sequence(r),
         _Ho_=caml_call1(Core_kernel_Sequence[40],_Hn_),
         match$0=caml_call4(Core_kernel_Option[52],0,0,0,_Ho_),
         seq=match$0[2],
         v=match$0[1];
        if(caml_equal(v,_tc_))
         {var
           _Hp_=caml_call1(Core_kernel_Sequence[40],seq),
           match$1=caml_call4(Core_kernel_Option[52],0,0,0,_Hp_),
           seq$0=match$1[2],
           d=match$1[1];
          if(0 === d[0])throw [0,Assert_failure,_td_];
          var match$2=caml_call1(Core_kernel_Sequence[40],seq$0);
          if(match$2)if(0 !== match$2[1][1][0])return 0;
          throw [0,Assert_failure,_te_]}
        throw [0,Assert_failure,_tf_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_to_sequence_produces_deferred_values_when_it_should_block,
        0,
        cst_src_pipe_ml$28,
        1545,
        4,
        603,
        _Gh_);
      function _Gi_(param)
       {var t=interleave$0(0),d=read_all(t);
        stabilize$0(0);
        if(0 === read_result(d))return 0;
        throw [0,Assert_failure,_tg_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_read_result_d,
        0,
        cst_src_pipe_ml$29,
        1563,
        4,
        134,
        _Gi_);
      function _Gj_(param)
       {var t=interleave$0([0,of_list$0(l$0),0]),d=read_all(t);
        stabilize$0(0);
        if(caml_equal(read_result(d),l$0))return 0;
        throw [0,Assert_failure,_th_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_read_result_d_l,
        0,
        cst_src_pipe_ml$30,
        1570,
        4,
        173,
        _Gj_);
      function _Gk_(param)
       {var
         _Hk_=[0,of_list$0(l$1),0],
         t=interleave$0([0,of_list$0(l$1),_Hk_]),
         d=read_all(t);
        stabilize$0(0);
        var
         _Hl_=2 * caml_call1(Core_kernel_List[17],l$1) | 0,
         _Hm_=read_result(d);
        if(caml_call1(Core_kernel_List[17],_Hm_) === _Hl_)return 0;
        throw [0,Assert_failure,_ti_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_List_length_read_resu,
        0,
        cst_src_pipe_ml$31,
        1578,
        4,
        214,
        _Gk_);
      function _Gl_(param)
       {var match=create$21(0),w=match[2],r=match[1],t=interleave_pipe(r);
        close(w);
        var d=read_all(t);
        stabilize$0(0);
        if(0 === read_result(d))return 0;
        throw [0,Assert_failure,_tj_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_close_w_let_d_read_all_t_in_stabilize,
        0,
        cst_src_pipe_ml$32,
        1588,
        4,
        183,
        _Gl_);
      function _Gm_(param)
       {var match=create$21(0),w=match[2],r=match[1],t=interleave_pipe(r);
        write_without_pushback(w,of_list$0(_tk_));
        stabilize$0(0);
        write_without_pushback(w,of_list$0(_tl_));
        close(w);
        var d=read_all(t);
        stabilize$0(0);
        if(caml_equal(read_result(d),_tm_))return 0;
        throw [0,Assert_failure,_tn_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_write_without_pushback_w_of_list_1_2_3,
        0,
        cst_src_pipe_ml$33,
        1597,
        4,
        329,
        _Gm_);
      function _Gn_(param)
       {var match=create$21(0),w=match[2],r=match[1],t=interleave_pipe(r);
        write_without_pushback(w,of_list$0(_to_));
        write_without_pushback(w,of_list$0(_tp_));
        stabilize$0(0);
        var match$0=read_now(0,0,t);
        if(typeof match$0 === "number")throw [0,Assert_failure,_tq_];
        var q=match$0[2];
        if(6 === caml_call1(Core_kernel_Queue[13],q))
         {write_without_pushback(w,of_list$0(_tr_));
          close(w);
          var d=read_all(t);
          stabilize$0(0);
          if(caml_equal(read_result(d),_ts_))return 0;
          throw [0,Assert_failure,_tt_]}
        throw [0,Assert_failure,_tu_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_write_without_pushback_w_of_list_1_2_3$0,
        0,
        cst_src_pipe_ml$34,
        1609,
        4,
        522,
        _Gn_);
      function _Go_(param)
       {var
         match=create$21(0),
         outer_w=match[2],
         outer_r=match[1],
         t=interleave_pipe(outer_r),
         match$0=create$21(0),
         inner_w=match$0[2],
         inner_r=match$0[1];
        stabilize$0(0);
        if(is_closed$0(t))throw [0,Assert_failure,_tv_];
        write_without_pushback(outer_w,inner_r);
        stabilize$0(0);
        if(is_closed$0(t))throw [0,Assert_failure,_tw_];
        close(outer_w);
        if(is_closed$0(t))throw [0,Assert_failure,_tx_];
        write_without_pushback(inner_w,13);
        stabilize$0(0);
        var match$1=read_now(0,0,t);
        if(typeof match$1 === "number")throw [0,Assert_failure,_ty_];
        var q=match$1[2];
        if(caml_equal(caml_call1(Core_kernel_Queue[25],q),_tz_))
         {close(inner_w);
          stabilize$0(0);
          var match$2=read_now(0,0,t);
          if(typeof match$2 === "number")if(3456156 <= match$2)return 0;
          throw [0,Assert_failure,_tA_]}
        throw [0,Assert_failure,_tB_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_not_is_closed_t_wri,
        0,
        cst_src_pipe_ml$35,
        1627,
        4,
        775,
        _Go_);
      function _Gp_(param)
       {var cmp=Core_kernel_Int[107];
        function _G6_(lists)
         {function _G7_(list)
           {return caml_call2(Core_kernel_List[71],cmp,list)}
          var
           lists$0=caml_call2(Core_kernel_List[84],lists,_G7_),
           _G8_=caml_call1(Core_kernel_List[140],lists$0),
           expected_result=caml_call2(Core_kernel_List[71],cmp,_G8_);
          function _G9_(transfer_by)
           {function _G__(param){return create$21(0)}
            var pipes=caml_call2(Core_kernel_List[84],lists$0,_G__);
            function _G$_(_Hj_){return _Hj_[1]}
            var
             merged_pipe=
              merge$0(caml_call2(Core_kernel_List[84],pipes,_G$_),cmp);
            function _Ha_(list,param)
             {var writer=param[2];
              function loop(index,param)
               {var index$0=index,param$0=param;
                for(;;)
                 {if(param$0)
                   {var tail=param$0[2],a=param$0[1];
                    write_without_pushback(writer,a);
                    if(0 < runtime.caml_mod(index$0,transfer_by))
                     {var index$1=index$0 + 1 | 0,index$0=index$1,param$0=tail;
                      continue}
                    var
                     _Hh_=
                      function(param)
                       {function _Hi_(param){return loop(index$0 + 1 | 0,tail)}
                        return caml_call2(_ja_,merged_pipe[4],_Hi_)};
                    return caml_call2(_ja_,writer[4],_Hh_)}
                  return close(writer)}}
              return loop(1,list)}
            caml_call3(Core_kernel_List[52],lists$0,pipes,_Ha_);
            function _Hb_(actual_result)
             {var _Hd_=1 - caml_equal(actual_result,expected_result);
              if(_Hd_)
               {var
                 _He_=
                  [0,
                   [1,
                    [0,
                     _tC_,
                     [0,
                      caml_call2
                       (Core_kernel[513],Core_kernel[455],expected_result),
                      0]]],
                   0],
                 _Hf_=
                  [0,
                   [1,
                    [0,
                     _tD_,
                     [0,
                      caml_call2(Core_kernel[513],Core_kernel[455],actual_result),
                      0]]],
                   _He_],
                 _Hg_=
                  [1,[0,caml_call1(Sexplib0_Sexp_conv[7],cst_mismatch),_Hf_]];
                return caml_call1(Core_kernel[364],_Hg_)}
              return _Hd_}
            var _Hc_=to_list$12(merged_pipe);
            return caml_call2(include$20[4][3],_Hc_,_Hb_)}
          return caml_call3(Async_kernel_Deferred_list[14],0,transfer_by,_G9_)}
        var finished=caml_call3(Async_kernel_Deferred_list[14],0,cases,_G6_);
        stabilize$0(0);
        if(is_determined(finished))return 0;
        throw [0,Assert_failure,_tE_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_Deferred_is_determined,
        0,
        cst_src_pipe_ml$36,
        1653,
        4,
        2016,
        _Gp_);
      function _Gq_(param)
       {var match=create$21(0),w=match[2],r=match[1];
        write_without_pushback(w,1);
        var t=merge$0([0,r,0],Core_kernel_Int[107]);
        close_read(t);
        stabilize$0(0);
        if(is_closed$0(w))return 0;
        throw [0,Assert_failure,_tF_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_write_without_pushback_w_1_let_t_merge_r,
        0,
        cst_src_pipe_ml$37,
        1703,
        4,
        265,
        _Gq_);
      function _Gr_(param)
       {var r=[0,0],t=of_list$0(l$2),iter_finished=[0,0];
        function _G4_(param){iter_finished[1] = 1;return 0}
        upon$1
         (iter$23
           (0,
            0,
            0,
            t,
            function(q)
             {function _G5_(i){r[1] = r[1] + i | 0;return 0}
              caml_call2(Core_kernel_Queue[15],q,_G5_);
              return caml_call1(_jc_,0)}),
          _G4_);
        stabilize$0(0);
        if(6 === r[1])
         {if(iter_finished[1])return 0;throw [0,Assert_failure,_tG_]}
        throw [0,Assert_failure,_tH_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_upon_iter_t_f_fun_q_Queue_iter,
        0,
        cst_src_pipe_ml$38,
        1714,
        4,
        338,
        _Gr_);
      function _Gs_(param)
       {var count=[0,0],match=create$21(0),w=match[2],r=match[1];
        write_without_pushback(w,13);
        var iter_finished=[0,0];
        try_with
         (0,
          0,
          0,
          0,
          0,
          0,
          function(param)
           {var
             finished=
              iter$23
               (0,
                0,
                0,
                r,
                function(q)
                 {function _G2_(i)
                   {if(17 === i)
                     {var
                       _G3_=
                        caml_call1(Sexplib0_Sexp_conv[7],cst_src_pipe_ml_1736_50);
                      return caml_call1(Core_kernel[364],_G3_)}
                    count[1] = count[1] + i | 0;
                    return 0}
                  caml_call2(Core_kernel_Queue[15],q,_G2_);
                  return caml_call1(_jc_,0)});
            upon$1(finished,function(param){iter_finished[1] = 1;return 0});
            return finished});
        stabilize$0(0);
        write_without_pushback(w,17);
        stabilize$0(0);
        if(13 === count[1])
         {if(iter_finished[1])throw [0,Assert_failure,_tI_];return 0}
        throw [0,Assert_failure,_tJ_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_write_without_pushback_w_13_let_iter_finish,
        0,
        cst_src_pipe_ml$39,
        1726,
        4,
        679,
        _Gs_);
      var I_is_17=[248,cst_I_is_17,caml_fresh_oo_id(0)];
      function _Gt_(param)
       {var count=[0,0],match=create$21(0),w=match[2],r=match[1];
        write_without_pushback(w,13);
        var
         iter_finished=[0,0],
         try_with_finished=
          try_with
           (0,
            0,
            0,
            0,
            0,
            0,
            function(param)
             {var
               finished=
                iter$23
                 (0,
                  _tK_,
                  0,
                  r,
                  function(q)
                   {function _G1_(i)
                     {if(17 === i)throw I_is_17;
                      count[1] = count[1] + i | 0;
                      return 0}
                    caml_call2(Core_kernel_Queue[15],q,_G1_);
                    return caml_call1(_jc_,0)});
              upon$1(finished,function(param){iter_finished[1] = 1;return 0});
              return finished});
        if(is_determined(try_with_finished))throw [0,Assert_failure,_tL_];
        stabilize$0(0);
        if(iter_finished[1])throw [0,Assert_failure,_tM_];
        write_without_pushback(w,17);
        stabilize$0(0);
        var match$0=peek$0(try_with_finished);
        if(match$0)
         {var _G0_=match$0[1];
          if(0 !== _G0_[0])
           {var e=_G0_[1];
            if(caml_equal(extract_exn(e),I_is_17))
             {if(iter_finished[1])throw [0,Assert_failure,_tO_];
              write_without_pushback(w,19);
              stabilize$0(0);
              if(32 === count[1])
               {if(iter_finished[1])throw [0,Assert_failure,_tP_];
                close(w);
                stabilize$0(0);
                if(iter_finished[1])return 0;
                throw [0,Assert_failure,_tQ_]}
              throw [0,Assert_failure,_tR_]}
            throw [0,Assert_failure,_tS_]}}
        throw [0,Assert_failure,_tN_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_write_without_pushback_w_13_let_iter_finish$0,
        0,
        cst_src_pipe_ml$40,
        1750,
        4,
        1150,
        _Gt_);
      function _Gu_(param)
       {var r=[0,0],t=of_list$0(l$3),iter_finished=[0,0];
        function _GZ_(param){iter_finished[1] = 1;return 0}
        upon$1
         (iter$24
           (0,0,t,function(i){r[1] = r[1] + i | 0;return caml_call1(_jc_,0)}),
          _GZ_);
        stabilize$0(0);
        if(6 === r[1])
         {if(iter_finished[1])return 0;throw [0,Assert_failure,_tT_]}
        throw [0,Assert_failure,_tU_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_upon_iter_t_f_fun_i_r_r_i_re,
        0,
        cst_src_pipe_ml$41,
        1788,
        4,
        310,
        _Gu_);
      function _Gv_(param)
       {var r=[0,0],t=of_list$0(l$4),iter_finished=[0,0];
        try_with
         (0,
          0,
          0,
          0,
          0,
          0,
          function(param)
           {var
             finished=
              iter$24
               (0,
                0,
                t,
                function(i)
                 {if(17 === i)
                   {var
                     _GY_=
                      caml_call1(Sexplib0_Sexp_conv[7],cst_src_pipe_ml_1809_48);
                    caml_call1(Core_kernel[364],_GY_)}
                  else
                   r[1] = r[1] + i | 0;
                  return caml_call1(_jc_,0)});
            upon$1(finished,function(param){iter_finished[1] = 1;return 0});
            return finished});
        stabilize$0(0);
        if(13 === r[1])
         {if(iter_finished[1])throw [0,Assert_failure,_tV_];return 0}
        throw [0,Assert_failure,_tW_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_ignore_Monitor_try_with_fun,
        0,
        cst_src_pipe_ml$42,
        1800,
        4,
        553,
        _Gv_);
      function _Gw_(param)
       {var r=[0,0],t=of_list$0(l$5),iter_finished=[0,0];
        try_with
         (0,
          0,
          0,
          0,
          0,
          0,
          function(param)
           {var
             finished=
              iter$24
               (0,
                _tX_,
                t,
                function(i)
                 {if(2 === i)
                   {var
                     _GX_=
                      caml_call1(Sexplib0_Sexp_conv[7],cst_src_pipe_ml_1829_47);
                    caml_call1(Core_kernel[364],_GX_)}
                  else
                   r[1] = r[1] + i | 0;
                  return caml_call1(_jc_,0)});
            upon$1(finished,function(param){iter_finished[1] = 1;return 0});
            return finished});
        stabilize$0(0);
        if(4 === r[1])
         {if(iter_finished[1])return 0;throw [0,Assert_failure,_tY_]}
        throw [0,Assert_failure,_tZ_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_ignore_Monitor_try_with_fun$0,
        0,
        cst_src_pipe_ml$43,
        1820,
        4,
        570,
        _Gw_);
      function _Gx_(param)
       {var r=[0,0],t=of_list$0(l$6),iter_finished=[0,0];
        function _GW_(param){iter_finished[1] = 1;return 0}
        upon$1
         (iter_without_pushback
           (0,0,0,t,function(i){r[1] = r[1] + i | 0;return 0}),
          _GW_);
        stabilize$0(0);
        if(6 === r[1])
         {if(iter_finished[1])return 0;throw [0,Assert_failure,_t0_]}
        throw [0,Assert_failure,_t1_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_upon_iter_without_pushback_t_f_fun_i_r,
        0,
        cst_src_pipe_ml$44,
        1842,
        4,
        316,
        _Gx_);
      function _Gy_(param)
       {var r=[0,0],t=of_list$0(l$7),iter_finished=[0,0];
        try_with
         (0,
          0,
          0,
          0,
          0,
          0,
          function(param)
           {var
             finished=
              iter_without_pushback
               (0,
                0,
                0,
                t,
                function(i)
                 {if(17 === i)
                   {var
                     _GV_=
                      caml_call1(Sexplib0_Sexp_conv[7],cst_src_pipe_ml_1863_48);
                    return caml_call1(Core_kernel[364],_GV_)}
                  r[1] = r[1] + i | 0;
                  return 0});
            upon$1(finished,function(param){iter_finished[1] = 1;return 0});
            return finished});
        stabilize$0(0);
        if(13 === r[1])
         {if(iter_finished[1])throw [0,Assert_failure,_t2_];return 0}
        throw [0,Assert_failure,_t3_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_ignore_Monitor_try_with_fun$1,
        0,
        cst_src_pipe_ml$45,
        1854,
        4,
        545,
        _Gy_);
      function _Gz_(param)
       {var r=[0,0],t=of_list$0(l$8),iter_finished=[0,0];
        try_with
         (0,
          0,
          0,
          0,
          0,
          0,
          function(param)
           {var
             finished=
              iter_without_pushback
               (0,
                _t4_,
                0,
                t,
                function(i)
                 {if(2 === i)
                   {var
                     _GU_=
                      caml_call1(Sexplib0_Sexp_conv[7],cst_src_pipe_ml_1882_47);
                    return caml_call1(Core_kernel[364],_GU_)}
                  r[1] = r[1] + i | 0;
                  return 0});
            upon$1(finished,function(param){iter_finished[1] = 1;return 0});
            return finished});
        stabilize$0(0);
        if(4 === r[1])
         {if(iter_finished[1])return 0;throw [0,Assert_failure,_t5_]}
        throw [0,Assert_failure,_t6_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_ignore_Monitor_try_with_fun$2,
        0,
        cst_src_pipe_ml$46,
        1873,
        4,
        562,
        _Gz_);
      function _GA_(param)
       {function flushed(f)
         {var match=peek$0(f);
          if(match)if(17724 === match[1])return 1;
          return 0}
        var match=create$21(0),w=match[2],r=match[1];
        if(caml_equal(peek$0(downstream_flushed$1(w)),_t7_))
         {var
           flushed_downstream=[0,caml_call1(_jc_,17724)],
           consumer=
            add_consumer(r,function(param){return flushed_downstream[1]}),
           f1=downstream_flushed$1(w);
          stabilize$0(0);
          if(caml_equal(peek$0(f1),_t8_))
           {write_without_pushback(w,0);
            var f2=downstream_flushed$1(w);
            if(caml_equal(peek$0(read$0([0,consumer],r)),_t9_))
             {var f3=downstream_flushed$1(w);
              if(flushed(f2))throw [0,Assert_failure,_t__];
              if(flushed(f3))throw [0,Assert_failure,_t$_];
              values_sent_downstream(consumer);
              var flushed_downstream_ivar=caml_call1(create$12,0);
              flushed_downstream[1] = flushed_downstream_ivar;
              var f4=downstream_flushed$1(w);
              stabilize$0(0);
              var f5=downstream_flushed$1(w);
              if(flushed(f2))throw [0,Assert_failure,_ua_];
              if(flushed(f3))throw [0,Assert_failure,_ub_];
              if(flushed(f4))throw [0,Assert_failure,_uc_];
              if(flushed(f5))throw [0,Assert_failure,_ud_];
              fill(flushed_downstream_ivar,17724);
              var f6=downstream_flushed$1(w);
              write_without_pushback(w,0);
              var f7=downstream_flushed$1(w);
              stabilize$0(0);
              if(flushed(f2))
               {if(flushed(f3))
                 {if(flushed(f4))
                   {if(flushed(f5))
                     {if(flushed(f6))
                       {if(flushed(f7))throw [0,Assert_failure,_ue_];return 0}
                      throw [0,Assert_failure,_uf_]}
                    throw [0,Assert_failure,_ug_]}
                  throw [0,Assert_failure,_uh_]}
                throw [0,Assert_failure,_ui_]}
              throw [0,Assert_failure,_uj_]}
            throw [0,Assert_failure,_uk_]}
          throw [0,Assert_failure,_ul_]}
        throw [0,Assert_failure,_um_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_assert_Deferred_peek_downstream_flushed_w,
        0,
        cst_src_pipe_ml$47,
        1893,
        4,
        1426,
        _GA_);
      function _GB_(param)
       {function flushed(f)
         {var match=peek$0(f);
          if(match)if(17724 === match[1])return 1;
          return 0}
        var
         match=create$21(0),
         w=match[2],
         r=match[1],
         r$0=map$28(r,function(_GT_){return _GT_}),
         f1=downstream_flushed$1(r$0);
        stabilize$0(0);
        if(caml_equal(peek$0(f1),_un_))
         {write_without_pushback(w,0);
          var f2=downstream_flushed$1(w),f3=upstream_flushed(r$0);
          stabilize$0(0);
          if(is_empty$1(w))
           {if(is_empty$1(r$0))throw [0,Assert_failure,_uo_];
            if(flushed(f2))throw [0,Assert_failure,_up_];
            if(flushed(f3))throw [0,Assert_failure,_uq_];
            var f4=downstream_flushed$1(w),f5=upstream_flushed(r$0);
            if(caml_equal(peek$0(read$0(0,r$0)),_ur_))
             {var f6=downstream_flushed$1(w),f7=upstream_flushed(r$0);
              write_without_pushback(w,0);
              var f8=downstream_flushed$1(w),f9=upstream_flushed(r$0);
              stabilize$0(0);
              if(flushed(f2))
               {if(flushed(f3))
                 {if(flushed(f4))
                   {if(flushed(f5))
                     {if(flushed(f6))
                       {if(flushed(f7))
                         {if(flushed(f8))throw [0,Assert_failure,_us_];
                          if(flushed(f9))throw [0,Assert_failure,_ut_];
                          return 0}
                        throw [0,Assert_failure,_uu_]}
                      throw [0,Assert_failure,_uv_]}
                    throw [0,Assert_failure,_uw_]}
                  throw [0,Assert_failure,_ux_]}
                throw [0,Assert_failure,_uy_]}
              throw [0,Assert_failure,_uz_]}
            throw [0,Assert_failure,_uA_]}
          throw [0,Assert_failure,_uB_]}
        throw [0,Assert_failure,_uC_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_Deferred_peek_f1_S,
        0,
        cst_src_pipe_ml$48,
        1931,
        4,
        1092,
        _GB_);
      function _GC_(param)
       {var match=create$21(0),w1=match[2],r1=match[1],finalized2=[0,0];
        function is_finalized(param)
         {caml_gc_major(0);caml_gc_major(0);return finalized2[1]}
        var match$0=create$21(0),w2=match$0[2],r2=match$0[1];
        function _GS_(param){finalized2[1] = 1;return 0}
        caml_call2(include$26[9][2],w2,_GS_);
        transfer_id(0,r2,w1);
        stabilize$0(0);
        if(is_finalized(0))throw [0,Assert_failure,_uD_];
        close(w2);
        stabilize$0(0);
        if(is_finalized(0))return caml_call1(include$26[5],r1);
        throw [0,Assert_failure,_uE_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_after_transfer_finishes_the_upstream_pipe_can_be_GCed,
        _uF_,
        cst_src_pipe_ml$49,
        1965,
        4,
        531,
        _GC_);
      function _GD_(param)
       {var
         match=create$21(0),
         r1=match[1],
         match$0=create$21(0),
         r2=match$0[1],
         _GP_=caml_call1(_jc_,17724),
         consumer=add_consumer(r1,caml_call1(Core_kernel[343],_GP_));
        function _GQ_(param){return read_now$0([0,consumer],r2)}
        var _GR_=caml_call1(Core_kernel_Result[43],_GQ_);
        if(caml_call1(Core_kernel_Result[28],_GR_))return 0;
        throw [0,Assert_failure,_uG_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_assert_Result_is_error_Result_try_with_fun,
        0,
        cst_src_pipe_ml$50,
        1981,
        4,
        251,
        _GD_);
      function _GE_(param)
       {var i=[0,0],r=of_list$0(_uH_);
        fold$21
         (0,
          r,
          0,
          function(param,_GO_){i[1]++;close_read(r);return caml_call1(_jc_,0)});
        stabilize$0(0);
        if(1 === i[1])return 0;
        throw [0,Assert_failure,_uI_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_don_t_wait_for_fold_r_init_f_fun,
        0,
        cst_src_pipe_ml$51,
        1989,
        4,
        212,
        _GE_);
      function _GF_(param)
       {var i=[0,0],r=of_list$0(_uJ_);
        fold_without_pushback
         (0,r,0,function(param,_GN_){i[1]++;return close_read(r)});
        stabilize$0(0);
        if(1 === i[1])return 0;
        throw [0,Assert_failure,_uK_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_don_t_wait_for_fold_without_pushback_r_in,
        0,
        cst_src_pipe_ml$52,
        1997,
        4,
        218,
        _GF_);
      function _GG_(param)
       {var i=[0,0],r=of_list$0(_uL_);
        iter$24
         (0,
          0,
          r,
          function(param){i[1]++;close_read(r);return caml_call1(_jc_,0)});
        stabilize$0(0);
        if(1 === i[1])return 0;
        throw [0,Assert_failure,_uM_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_don_t_wait_for_iter_r_f_fun_incr_i,
        0,
        cst_src_pipe_ml$53,
        2005,
        4,
        200,
        _GG_);
      function _GH_(param)
       {var i=[0,0],r=of_list$0(_uN_);
        iter_without_pushback
         (0,0,0,r,function(param){i[1]++;return close_read(r)});
        stabilize$0(0);
        if(1 === i[1])return 0;
        throw [0,Assert_failure,_uO_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_don_t_wait_for_iter_without_pushback_r_f_f,
        0,
        cst_src_pipe_ml$54,
        2013,
        4,
        206,
        _GH_);
      function _GI_(param)
       {var r=of_list$0(_uP_),match=create$21(0),w2=match[2],r2=match[1];
        function _GM_(param)
         {if(is_closed$0(w2))throw [0,Assert_failure,_uQ_];return close(w2)}
        upon$1(transfer$0(r,w2,function(param){return close_read(r)}),_GM_);
        var res=to_list$12(r2);
        stabilize$0(0);
        if(caml_equal(peek$0(res),_uR_))return 0;
        throw [0,Assert_failure,_uS_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_upon_transfer_r_w2_f_fun_close_read,
        0,
        cst_src_pipe_ml$55,
        2021,
        4,
        308,
        _GI_);
      function _GJ_(param)
       {var
         r=of_list$0(_uT_),
         res=to_list$12(map$28(r,function(param){return close_read(r)}));
        stabilize$0(0);
        if(caml_equal(peek$0(res),_uU_))return 0;
        throw [0,Assert_failure,_uV_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_Deferred_peek_res,
        0,
        cst_src_pipe_ml$56,
        2032,
        4,
        187,
        _GJ_);
      function _GK_(param)
       {var
         r=of_list$0(_uW_),
         res=
          to_list$12
           (filter_map$6(0,r,function(param){close_read(r);return _uX_}));
        stabilize$0(0);
        if(caml_equal(peek$0(res),_uY_))return 0;
        throw [0,Assert_failure,_uZ_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_Deferred_peek_res$0,
        0,
        cst_src_pipe_ml$57,
        2039,
        4,
        203,
        _GK_);
      function _GL_(param)
       {var
         r=of_list$0(_u0_),
         res=to_list$12(filter$5(r,function(param){close_read(r);return 1}));
        stabilize$0(0);
        if(caml_equal(peek$0(res),_u1_))return 0;
        throw [0,Assert_failure,_u2_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_Deferred_peek_res$1,
        0,
        cst_src_pipe_ml$58,
        2046,
        4,
        196,
        _GL_);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst$62,
      0,
      cst_src_pipe_ml$59,
      1143,
      0,
      28609,
      _rw_);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$151);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Async_kernel_Pipe=
      [0,
       sexp_of_pipe,
       sexp_of_pipe,
       [0,sexp_of_t$54,invariant$20],
       [0,sexp_of_t$53,invariant$20],
       create_reader,
       create_writer,
       init$4,
       create$21,
       of_list$0,
       singleton,
       unfold$0,
       of_sequence,
       to_sequence,
       close,
       close_read,
       is_closed$0,
       closed$1,
       [0,sexp_of_t$49],
       upstream_flushed,
       downstream_flushed$1,
       [0,values_sent_downstream],
       add_consumer,
       length$2,
       is_empty$1,
       pushback$0,
       write$0,
       write_without_pushback,
       transfer_in,
       transfer_in_without_pushback,
       write_when_ready,
       write_if_open,
       write_without_pushback_if_open,
       read,
       read$0,
       read_at_most,
       read_exactly,
       read_now,
       read_now$0,
       read_now_at_most,
       peek$1,
       clear$0,
       read_all,
       values_available,
       read_choice,
       read_choice_single_consumer_exn,
       fold$20,
       fold$21,
       fold_without_pushback,
       iter$23,
       iter$24,
       iter_without_pushback,
       transfer,
       transfer$0,
       transfer_id,
       map$27,
       map$28,
       fold_map,
       fold_map,
       filter_map$5,
       filter_map$6,
       fold_filter_map,
       fold_filter_map,
       filter$5,
       interleave$0,
       interleave_pipe,
       merge$0,
       concat$2,
       to_stream_deprecated,
       of_stream_deprecated,
       drain,
       drain_and_count,
       to_list$12,
       hash,
       equal$3,
       compare$0,
       size_budget,
       set_size_budget$0,
       show_debug_messages,
       check_invariant];
    caml_register_global(2702,Async_kernel_Pipe,"Async_kernel__Pipe");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_async_kernel$152);
    caml_call1
     (Expect_test_collector[4][1],cst_src_persistent_connection_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$153,cst$63);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$154);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Async_kernel_Persistent_connection_intf=[0];
    caml_register_global
     (2703,
      Async_kernel_Persistent_connection_intf,
      "Async_kernel__Persistent_connection_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_async_kernel$155);
    caml_call1(Expect_test_collector[4][1],cst_src_persistent_connection_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$156,cst$64);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$157);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Async_kernel_Persistent_connection=
      [0,
       function(Conn)
        {var sexp_of_address=Conn[1][1];
         function sexp_of_t(param)
          {if(typeof param === "number")
            return 0 === param?_u3_:_u4_;
           else
            switch(param[0])
             {case 0:
               var v0=param[1],v0$0=caml_call1(sexp_of_address,v0);
               return [1,[0,_u5_,[0,v0$0,0]]];
              case 1:
               var v0$1=param[1],v0$2=caml_call1(Core_kernel_Error[5],v0$1);
               return [1,[0,_u6_,[0,v0$2,0]]];
              default:
               var v0$3=param[1],v0$4=caml_call1(Sexplib0_Sexp_conv[23],v0$3);
               return [1,[0,_u7_,[0,v0$4,0]]]}}
         function log_level(param)
          {if(typeof param !== "number" && 1 === param[0])return 106380200;
           return 815031438}
         function handle_event(t$0,t)
          {var on_event=t$0[5][2];return caml_call1(on_event,t)}
         function create(server_name,opt,_Fq_,connect,get_address)
          {if(opt)
            var sth=opt[1],on_event=sth;
           else
            var on_event=function(param){return unit};
           if(_Fq_)
            var sth$0=_Fq_[1],retry_delay=sth$0;
           else
            var
             _Ft_=caml_call1(Core_kernel_Time_ns[1][45],10),
             retry_delay=caml_call1(Core_kernel[343],_Ft_);
           var event_handler=[0,server_name,on_event];
           function retry_delay$0(param)
            {var
              _FP_=caml_call1(retry_delay,0),
              span=caml_call1(Core_kernel_Time_ns[1][52],_FP_),
              distance=caml_call1(Base_Random[9],span * 0.3),
              wait=
               caml_call1(Base_Random[15],0)?span + distance:span - distance,
              _FQ_=caml_call1(Core_kernel_Time_ns[1][45],wait);
             return caml_call1(Async_kernel_Clock_ns[4],_FQ_)}
           var
            _Fr_=caml_call1(create$12,0),
            _Fs_=caml_call1(create$12,0),
            t=
             [0,
              get_address,
              connect,
              retry_delay$0,
              caml_call1(create$12,0),
              event_handler,
              _Fs_,
              _Fr_];
           repeat_until_finished
            (0,
             function(param)
              {function _Fu_(param)
                {var
                  ready_to_retry_connecting=caml_call1(t[3],0),
                  previous_address=[0,0],
                  previous_error=[0,0];
                 function _Fv_(maybe_conn)
                  {fill(t[4],maybe_conn);
                   if(typeof maybe_conn === "number")
                    return caml_call1(_jc_,_u8_);
                   var conn=maybe_conn[2];
                   function _FJ_(param)
                    {function _FK_(param)
                      {t[4] = caml_call1(create$12,0);
                       function _FL_(param)
                        {var _FM_=0;
                         function _FN_(param){fill(t[4],-400989606);return _u9_}
                         var _FO_=[0,[0,t[6],_FN_],_FM_];
                         return choose
                                 ([0,
                                   [0,ready_to_retry_connecting,function(param){return _u__}],
                                   _FO_])}
                       return caml_call2(_jd_,handle_event(t,1),_FL_)}
                     return caml_call2(_jd_,caml_call1(Conn[4],conn),_FK_)}
                   return caml_call2(_jd_,handle_event(t,[2,conn]),_FJ_)}
                 function loop(param)
                  {if(is_full(t[6]))return caml_call1(_jc_,-400989606);
                   function _Fx_(param)
                    {if(0 === param[0])
                      {var conn=param[1];return caml_call1(_jc_,[0,17724,conn])}
                     var err=param[1],_FD_=previous_error[1];
                     if(_FD_)
                      var
                       previous_err=_FD_[1],
                       to_sexp=
                        function(e)
                         {var _FI_=extract_exn(caml_call1(Core_kernel_Error[20],e));
                          return caml_call1(Base_Exn[1],_FI_)},
                       _FB_=to_sexp(previous_err),
                       _FC_=to_sexp(err),
                       same_as_previous_error=
                        caml_call2(Core_kernel_Sexp[18],_FC_,_FB_);
                     else
                      var same_as_previous_error=0;
                     previous_error[1] = [0,err];
                     function _FE_(param)
                      {function _FG_(param){return loop(0)}
                       var _FH_=[0,t[6],0];
                       return caml_call2
                               (_jd_,any([0,caml_call1(t[3],0),_FH_]),_FG_)}
                     var
                      _FF_=
                       same_as_previous_error?unit:handle_event(t,[1,err]);
                     return caml_call2(_jd_,_FF_,_FE_)}
                   function _Fw_(param)
                    {if(0 === param[0])
                      {var addr=param[1],_Fy_=previous_address[1];
                       if(_Fy_)
                        var
                         previous_address$0=_Fy_[1],
                         same_as_previous_address=
                          caml_call2(Conn[1][2],addr,previous_address$0);
                       else
                        var same_as_previous_address=0;
                       previous_address[1] = [0,addr];
                       var
                        _Fz_=function(param){return caml_call1(t[2],addr)},
                        _FA_=same_as_previous_address?unit:handle_event(t,[0,addr]);
                       return caml_call2(_jd_,_FA_,_Fz_)}
                     var e=param[1];
                     return caml_call1(_jc_,[1,e])}
                   return caml_call2
                           (_jd_,caml_call2(_jd_,caml_call1(t[1],0),_Fw_),_Fx_)}
                 return caml_call2(_jd_,loop(0),_Fv_)}
               return caml_call2(_jd_,handle_event(t,0),_Fu_)});
           return t}
         function connected(t)
          {function loop(param)
            {var _Fo_=t[4],match=peek$0(_Fo_);
             if(match)
              {var _Fp_=match[1];
               if(typeof _Fp_ === "number")return never(0);
               var conn=_Fp_[2];
               return caml_call1(Conn[3],conn)
                       ?caml_call2(_jd_,caml_call1(Conn[4],conn),loop)
                       :caml_call1(_jc_,conn)}
             return caml_call2
                     (_jd_,
                      _Fo_,
                      function(param)
                       {if(typeof param === "number")return never(0);
                        var conn=param[2];
                        return caml_call1(_jc_,conn)})}
           return loop(0)}
         function current_connection(t)
          {var match=peek$0(t[4]);
           if(match)
            {var _Fn_=match[1];
             if(typeof _Fn_ !== "number"){var conn=_Fn_[2];return [0,conn]}}
           return 0}
         function close_finished(t){return t[7]}
         function is_closed(t){return is_full(t[6])}
         function close(t)
          {if(is_full(t[6]))return t[7];
           fill(t[6],0);
           function _Fk_(conn_opt)
            {function _Fl_(param){return fill(t[7],0)}
             if(typeof conn_opt === "number")
              var _Fm_=unit;
             else
              var conn=conn_opt[2],_Fm_=caml_call1(Conn[2],conn);
             return caml_call2(_je_,_Fm_,_Fl_)}
           return caml_call2(_jd_,t[4],_Fk_)}
         return [0,
                 [0,sexp_of_t,log_level],
                 create,
                 connected,
                 current_connection,
                 close,
                 is_closed,
                 close_finished]}];
    caml_register_global
     (2705,
      Async_kernel_Persistent_connection,
      "Async_kernel__Persistent_connection");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_async_kernel$158);
    caml_call1(Expect_test_collector[4][1],cst_src_mvar_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$159,cst$65);
    function _u$_(r){return r[3]}
    function set_value_available(r,v){r[3] = v;return 0}
    function taken(r){return r[2]}
    function current_value(r){return r[1]}
    function _va_(r,v){return [0,r[1],r[2],v]}
    var
     _vb_=[0,set_value_available],
     value_available=
      [0,[0,function(param){return 0},cst_value_available,_vb_,_u$_,_va_]];
    function _vc_(r,v){return [0,r[1],v,r[3]]}
    var
     _vd_=0,
     taken$0=[0,[0,function(param){return 0},cst_taken,_vd_,taken,_vc_]];
    function _ve_(r,v){return [0,v,r[2],r[3]]}
    var
     _vf_=0,
     current_value$0=
      [0,
       [0,function(param){return 0},cst_current_value,_vf_,current_value,_ve_]];
    function value_available$0(t){return t[3]}
    function is_empty$2(t){return caml_call1(Core_kernel_Moption[5],t[1])}
    function invariant$21(invariant_a,param,t)
     {function _Fe_(param)
       {function check(f){return caml_call2(include$11[2],t,f)}
        var
         value_available_fun=
          check
           (function(value_available)
             {var
               got=is_full(value_available),
               expect=caml_call1(Core_kernel_Moption[6],t[1]),
               sexpifier=Core_kernel[410],
               comparator=Core_kernel[406];
              return caml_call8
                      (Ppx_assert_lib_Runtime[3],
                       pos$36,
                       sexpifier,
                       comparator,
                       0,
                       0,
                       0,
                       expect,
                       got)});
        function _Fg_(_Fj_){return 0}
        var
         _Fh_=Core_kernel_Unit[4],
         taken_fun=check(function(_Fi_){return invariant$12(_Fh_,_Fg_,_Fi_)}),
         current_value_fun=
          check(caml_call1(Core_kernel_Moption[2],invariant_a));
        caml_call1(current_value_fun,current_value$0);
        caml_call1(taken_fun,taken$0);
        return caml_call1(value_available_fun,value_available)}
      function of_a(param){return _vj_}
      function _Ff_(param)
       {var
         v_taken=param[2],
         v_current_value=param[1],
         v_value_available=param[3],
         arg=sexp_of_t$32(Core_kernel[598],v_value_available),
         bnds=[0,[1,[0,_vg_,[0,arg,0]]],0],
         arg$0=sexp_of_t$37(Core_kernel[598],Core_kernel[315],v_taken),
         bnds$0=[0,[1,[0,_vh_,[0,arg$0,0]]],bnds],
         arg$1=caml_call2(Core_kernel_Moption[1],of_a,v_current_value),
         bnds$1=[0,[1,[0,_vi_,[0,arg$1,0]]],bnds$0];
        return [1,bnds$1]}
      return caml_call4(include$11[1],_vk_,t,_Ff_,_Fe_)}
    function peek$2(t){return caml_call1(Core_kernel_Moption[7],t[1])}
    function peek_exn(t)
     {if(is_empty$2(t))
       {var
         _Fd_=
          caml_call1
           (Sexplib0_Sexp_conv[7],cst_Mvar_peek_exn_called_on_empty_mvar);
        caml_call1(Core_kernel[364],_Fd_)}
      return caml_call1(Core_kernel_Moption[8],t[1])}
    function sexp_of_t$55(sexp_of_a,param,t)
     {var _Fc_=peek$2(t);return caml_call2(Core_kernel[542],sexp_of_a,_Fc_)}
    function sexp_of_t$56(of_a,v)
     {return sexp_of_t$55(of_a,Core_kernel[315],v)}
    function invariant$22(invariant_a,t)
     {return invariant$21(invariant_a,function(_Fb_){return 0},t)}
    var Read_write$1=[0,sexp_of_t$56,invariant$22];
    function sexp_of_t$57(of_a,v)
     {return sexp_of_t$55(of_a,Core_kernel[284],v)}
    function invariant$23(invariant_a,t)
     {return invariant$21(invariant_a,function(_Fa_){return 0},t)}
    var Read_only=[0,sexp_of_t$57,invariant$23];
    function read_only$1(t){return t}
    function write_only(t){return t}
    function create$22(param)
     {var _E__=caml_call1(create$12,0),_E$_=caml_call1(_jW_,0);
      return [0,caml_call1(Core_kernel_Moption[4],0),_E$_,_E__]}
    function take_nonempty(t)
     {if(is_empty$2(t))throw [0,Assert_failure,_vl_];
      var r=caml_call1(Core_kernel_Moption[8],t[1]);
      caml_call1(Core_kernel_Moption[11],t[1]);
      broadcast(t[2],0);
      t[3] = caml_call1(create$12,0);
      return r}
    function take_now_exn(t)
     {if(is_empty$2(t))
       {var
         _E9_=
          caml_call1
           (Sexplib0_Sexp_conv[7],cst_Mvar_take_exn_called_on_empty_mvar);
        caml_call1(Core_kernel[364],_E9_)}
      return take_nonempty(t)}
    function take_now(t){return is_empty$2(t)?0:[0,take_nonempty(t)]}
    function take(t)
     {if(is_empty$2(t))
       {var _E8_=function(param){return take(t)};
        return caml_call2(include$20[4][2],t[3],_E8_)}
      return caml_call1(_jc_,take_nonempty(t))}
    function set$0(t,v)
     {caml_call2(Core_kernel_Moption[12],t[1],v);return fill_if_empty(t[3],0)}
    function update$0(t,f){return set$0(t,caml_call1(f,peek$2(t)))}
    function update_exn(t,f){return set$0(t,caml_call1(f,peek_exn(t)))}
    function taken$1(t){return wait(t[2])}
    function put(t,v)
     {if(is_empty$2(t)){set$0(t,v);return caml_call1(_jc_,0)}
      function _E6_(param){return put(t,v)}
      var _E7_=taken$1(t);
      return caml_call2(include$20[4][2],_E7_,_E6_)}
    function pipe_when_ready(t)
     {var match=create$21(0),w=match[2],r=match[1];
      function loop(param)
       {function _E3_(param)
         {if(is_closed$0(w))return caml_call1(_jc_,0);
          var match=take_now(t);
          if(match)
           {var
             x=match[1],
             _E4_=function(param){return loop(0)},
             _E5_=write$0(w,x);
            return caml_call2(include$20[4][2],_E5_,_E4_)}
          return loop(0)}
        return caml_call2(include$20[4][2],t[3],_E3_)}
      loop(0);
      return r}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$160);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Async_kernel_Mvar=
      [0,
       sexp_of_t$55,
       Read_write$1,
       Read_only,
       create$22,
       is_empty$2,
       put,
       set$0,
       update$0,
       update_exn,
       read_only$1,
       write_only,
       value_available$0,
       take,
       take_now,
       take_now_exn,
       taken$1,
       peek$2,
       peek_exn,
       pipe_when_ready];
    caml_register_global(2707,Async_kernel_Mvar,"Async_kernel__Mvar");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_async_kernel$161);
    caml_call1(Expect_test_collector[4][1],cst_src_limiter_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$162,cst$66);
    function sexp_of_t$58(of_a,param)
     {if(typeof param === "number")
       return _vm_;
      else
       {if(0 === param[0])
         {var v0=param[1],v0$0=caml_call1(of_a,v0);
          return [1,[0,_vn_,[0,v0$0,0]]]}
        var v0$1=param[1],v0$2=caml_call1(Core_kernel[614],v0$1);
        return [1,[0,_vo_,[0,v0$2,0]]]}}
    var Outcome=[0,sexp_of_t$58];
    function sexp_of_limiter(param)
     {var
       v_continue_on_error=param[1],
       v_is_dead=param[2],
       v_hopper_filled=param[3],
       v_throttle_queue=param[5],
       v_limiter=param[4],
       arg=caml_call1(Sexplib0_Sexp_conv[23],v_throttle_queue),
       bnds=[0,[1,[0,_vp_,[0,arg,0]]],0],
       arg$0=caml_call1(Core_kernel_Limiter[1],v_limiter),
       bnds$0=[0,[1,[0,_vq_,[0,arg$0,0]]],bnds],
       _E0_=Core_kernel[598];
      function _E1_(_E2_){return sexp_of_t$32(_E0_,_E2_)}
      var
       arg$1=caml_call2(Core_kernel[542],_E1_,v_hopper_filled),
       bnds$1=[0,[1,[0,_vr_,[0,arg$1,0]]],bnds$0],
       arg$2=caml_call1(Core_kernel[410],v_is_dead),
       bnds$2=[0,[1,[0,_vs_,[0,arg$2,0]]],bnds$1],
       arg$3=caml_call1(Core_kernel[410],v_continue_on_error),
       bnds$3=[0,[1,[0,_vt_,[0,arg$3,0]]],bnds$2];
      return [1,bnds$3]}
    function jlimiter(t){return t[4]}
    function cycle_start$2(param){return t$5(0)[10]}
    function create_exn
     (hopper_to_bucket_rate_per_sec,
      bucket_limit,
      in_flight_limit,
      initial_bucket_level,
      initial_hopper_level,
      continue_on_error)
     {var
       _EZ_=cycle_start$2(0),
       limiter=
        caml_call6
         (Core_kernel_Limiter[17][1],
          _EZ_,
          hopper_to_bucket_rate_per_sec,
          bucket_limit,
          in_flight_limit,
          initial_bucket_level,
          initial_hopper_level),
       throttle_queue=caml_call2(Core_kernel_Queue[60],0,0);
      return [0,continue_on_error,0,0,limiter,throttle_queue]}
    function is_dead$2(t){return t[2]}
    function kill_job(param)
     {if(0 === param[0])
       {var monitor=param[1];
        return send_exn(monitor,_vu_,[0,Failure,cst_Limiter_killed])}
      var i=param[3];
      return fill_if_empty(i,0)}
    function kill$0(t)
     {var _EX_=1 - t[2];
      if(_EX_)
       {t[2] = 1;
        var _EY_=function(param){var job=param[2];return kill_job(job)};
        return caml_call2(Core_kernel_Queue[15],t[5],_EY_)}
      return _EX_}
    function return_to_hopper(t,now,amount)
     {var _EW_=t[3];
      if(_EW_){var i=_EW_[1];fill(i,0);t[3] = 0}
      return caml_call3(Core_kernel_Limiter[17][4],t[4],now,amount)}
    function run_job_now(t,job,return_after)
     {if(t[2])return kill_job(job);
      if(0 === job[0])
       {var v=job[3],f=job[2],monitor=job[1];
        try
         {caml_call1(f,v)}
        catch(e){e = caml_wrap_exception(e);send_exn(monitor,_vv_,e)}
        return return_to_hopper(t,cycle_start$2(0),return_after)}
      var i=job[3],v$0=job[2],f$0=job[1];
      function _EU_(res)
       {return_to_hopper(t,cycle_start$2(0),return_after);
        if(0 === res[0]){var v=res[1];return fill_if_empty(i,[0,v])}
        var e=res[1];
        fill_if_empty(i,[1,e]);
        var _EV_=1 - t[1];
        return _EV_?kill$0(t):_EV_}
      return caml_call2
              (_ja_,
               try_with
                (0,0,0,0,0,0,function(param){return caml_call1(f$0,v$0)}),
               _EU_)}
    function fail_job(t,job,k)
     {function _ET_(s)
       {function f(param){return caml_call1(Core_kernel[164],s)}
        if(0 === job[0])
         var monitor=job[1],job$0=[0,monitor,f,0];
        else
         var i=job[3],job$0=[1,f,0,i];
        return run_job_now(t,job$0,0)}
      return caml_call2(Core_kernel[357],_ET_,k)}
    function run_throttled_jobs_until_empty(t)
     {for(;;)
       {if(0 === caml_call1(Core_kernel_Queue[13],t[5]))return 0;
        var
         match=caml_call1(Core_kernel_Queue[45],t[5]),
         job=match[2],
         amount=match[1],
         now=cycle_start$2(0),
         match$0=caml_call3(Core_kernel_Limiter[17][3],t[4],now,amount);
        switch(match$0)
         {case 0:
           caml_call1(Core_kernel_Queue[43],t[5]);
           run_job_now(t,job,amount);
           continue;
          case 1:
           var match$1=caml_call3(Core_kernel_Limiter[17][2],t[4],now,amount);
           if(typeof match$1 === "number")
            {if(0 === match$1)
              {var _EL_=caml_call1(Core_kernel_Limiter[10],t[4]);
               caml_call2(fail_job(t,job,_vw_),amount,_EL_);
               continue}
             var
              _EM_=function(param){return run_throttled_jobs_until_empty(t)},
              _EK_=t[3];
             if(_EK_)
              var i=_EK_[1],_EN_=i;
             else
              {var i$0=caml_call1(create$12,0);t[3] = [0,i$0];var _EN_=i$0}
             return caml_call2(_ja_,_EN_,_EM_)}
           var
            expected_fill_time=match$1[1],
            _EO_=event_precision(t$5(0)),
            _EP_=cycle_start$2(0),
            min_fill_time=caml_call2(Core_kernel_Time_ns[29],_EP_,_EO_),
            _EQ_=function(param){return run_throttled_jobs_until_empty(t)},
            _ER_=
             caml_call2
              (Core_kernel_Time_ns[23],expected_fill_time,min_fill_time);
           return caml_call2
                   (_ja_,caml_call1(Async_kernel_Clock_ns[3],_ER_),_EQ_);
          default:
           var _ES_=caml_call1(Core_kernel_Limiter[10],t[4]);
           caml_call2(fail_job(t,job,_vx_),amount,_ES_);
           continue}}}
    function enqueue_job_and_maybe_start_queue_runner
     (t,amount,job,allow_immediate_run)
     {var bucket_limit=caml_call1(Core_kernel_Limiter[10],t[4]);
      if(bucket_limit < amount)
       caml_call2(fail_job(t,job,_vy_),amount,bucket_limit);
      if(t[2])return kill_job(job);
      if(0 < caml_call1(Core_kernel_Queue[13],t[5]))
       return caml_call2(Core_kernel_Queue[40],t[5],[0,amount,job]);
      var
       now=cycle_start$2(0),
       match=caml_call3(Core_kernel_Limiter[17][3],t[4],now,amount);
      switch(match)
       {case 0:
         if(allow_immediate_run)return run_job_now(t,job,amount);
         var _EJ_=function(t){return run_job_now(t,job,amount)};
         return enqueue$0(t$5(0),main_execution_context$1,_EJ_,t);
        case 1:
         caml_call2(Core_kernel_Queue[40],t[5],[0,amount,job]);
         return run_throttled_jobs_until_empty(t);
        default:return caml_call2(fail_job(t,job,_vz_),amount,bucket_limit)}}
    function enqueue_exn(t,opt,amount,f,v)
     {if(opt)
       var sth=opt[1],allow_immediate_run=sth;
      else
       var allow_immediate_run=0;
      return enqueue_job_and_maybe_start_queue_runner
              (t,amount,[0,current(0),f,v],allow_immediate_run)}
    function enqueue$5(t,amount,f,v)
     {return create$13
              (function(i)
                {try
                  {var
                    _EI_=
                     enqueue_job_and_maybe_start_queue_runner
                      (t,amount,[1,f,v,i],0);
                   return _EI_}
                 catch(e){e = caml_wrap_exception(e);return fill(i,[1,e])}})}
    function cost_of_jobs_waiting_to_start(t)
     {function _EH_(sum,param){var cost=param[1];return cost + sum | 0}
      return caml_call3(Core_kernel_Queue[16],t[5],0,_EH_)}
    function to_limiter(t){return t}
    function create_exn$0
     (bucket_limit,fill_rate,continue_on_error,in_flight_limit,opt,param)
     {if(opt)
       var sth=opt[1],initial_burst_size=sth;
      else
       var initial_burst_size=0;
      if(in_flight_limit)
       var limit=in_flight_limit[1],in_flight_limit$0=[0,limit];
      else
       var in_flight_limit$0=0;
      return create_exn
              ([0,fill_rate],
               bucket_limit,
               in_flight_limit$0,
               initial_burst_size,
               0,
               continue_on_error)}
    function create_exn$1
     (concurrent_jobs_target,
      continue_on_error,
      burst_size,
      sustained_rate_per_sec,
      param)
     {if(concurrent_jobs_target < 1)
       caml_call3(Core_kernel[347],_vA_,concurrent_jobs_target,0);
      if(sustained_rate_per_sec)
       var
        rate=sustained_rate_per_sec[1],
        hopper_to_bucket_rate_per_sec=[0,rate];
      else
       var hopper_to_bucket_rate_per_sec=0;
      if(burst_size)
       var burst_size$0=burst_size[1],bucket_limit=burst_size$0;
      else
       var bucket_limit=concurrent_jobs_target;
      return create_exn
              (hopper_to_bucket_rate_per_sec,
               bucket_limit,
               [0,concurrent_jobs_target],
               bucket_limit,
               _vB_,
               continue_on_error)}
    function enqueue$6(t,allow_immediate_run,f,v)
     {return enqueue_exn(t,allow_immediate_run,1,f,v)}
    function enqueue$7(t,f,v){return enqueue$5(t,1,f,v)}
    function concurrent_jobs_target(t)
     {return caml_call1(Core_kernel_Limiter[10],t[4])}
    function num_jobs_waiting_to_start$0(t)
     {return caml_call1(Core_kernel_Queue[13],t[5])}
    function num_jobs_running$1(t)
     {var _EG_=t$5(0)[10];
      return caml_call2(Core_kernel_Limiter[13],t[4],_EG_)}
    function create$23(opt,burst_size,sustained_rate_per_sec,param)
     {if(opt)
       var sth=opt[1],continue_on_error=sth;
      else
       var continue_on_error=0;
      return create_exn$1
              (1,continue_on_error,burst_size,sustained_rate_per_sec,0)}
    function sexp_of_t$59(of_a,param)
     {var
       v_resources=param[2],
       v_throttle=param[1],
       arg=caml_call2(Core_kernel_Queue[11],of_a,v_resources),
       bnds=[0,[1,[0,_vC_,[0,arg,0]]],0],
       arg$0=sexp_of_limiter(v_throttle),
       bnds$0=[0,[1,[0,_vD_,[0,arg$0,0]]],bnds];
      return [1,bnds$0]}
    function create_exn$2
     (resources,continue_on_error,burst_size,sustained_rate_per_sec,param)
     {var
       resources$0=caml_call1(Core_kernel_Queue[37],resources),
       max_concurrent_jobs=caml_call1(Core_kernel_Queue[13],resources$0),
       throttle=
        create_exn$1
         (max_concurrent_jobs,
          continue_on_error,
          burst_size,
          sustained_rate_per_sec,
          0);
      return [0,throttle,resources$0]}
    function enqueue_exn$0(t,allow_immediate_run,f$0)
     {function f(param)
       {var v=caml_call1(Core_kernel_Queue[43],t[2]);
        function _EE_(param){return caml_call2(Core_kernel_Queue[40],t[2],v)}
        function _EF_(param){return caml_call1(f$0,v)}
        return caml_call2(Core_kernel[362],_EF_,_EE_)}
      return enqueue$6(t[1],allow_immediate_run,f,0)}
    function enqueue$8(t,f)
     {function f$0(param)
       {var v=caml_call1(Core_kernel_Queue[43],t[2]);
        function _ED_(param)
         {caml_call2(Core_kernel_Queue[40],t[2],v);return unit}
        return protect(0,0,0,function(param){return caml_call1(f,v)},_ED_)}
      return enqueue$7(t[1],f$0,0)}
    function max_concurrent_jobs$1(t){return concurrent_jobs_target(t[1])}
    function to_limiter$0(t){return t[1]}
    function kill$1(t){return kill$0(t[1])}
    function is_dead$3(t){return t[1][2]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$163);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Async_kernel_Limiter=
      [0,
       Outcome,
       sexp_of_limiter,
       sexp_of_limiter,
       [0,
        sexp_of_limiter,
        create_exn$0,
        enqueue_exn,
        enqueue$5,
        kill$0,
        is_dead$2,
        to_limiter],
       [0,
        sexp_of_limiter,
        create_exn$1,
        concurrent_jobs_target,
        num_jobs_waiting_to_start$0,
        num_jobs_running$1,
        enqueue$6,
        enqueue$7,
        kill$0,
        is_dead$2,
        to_limiter],
       [0,
        sexp_of_limiter,
        create$23,
        enqueue$6,
        enqueue$7,
        num_jobs_waiting_to_start$0,
        kill$0,
        is_dead$2,
        to_limiter],
       [0,
        sexp_of_t$59,
        create_exn$2,
        max_concurrent_jobs$1,
        enqueue_exn$0,
        enqueue$8,
        kill$1,
        is_dead$3,
        to_limiter$0],
       [0,kill$0,is_dead$2,cost_of_jobs_waiting_to_start,jlimiter]];
    caml_register_global(2709,Async_kernel_Limiter,"Async_kernel__Limiter");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_async_kernel$164);
    caml_call1(Expect_test_collector[4][1],cst_src_lazy_deferred_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$165,cst$67);
    function create$24(f)
     {var start=caml_call1(create$12,0);
      function _EC_(param){return try_with_or_error(0,0,0,0,f)}
      return [0,start,caml_call2(include$20[4][2],start,_EC_)]}
    function wait$0(t){return t[2]}
    function wait_exn(t){return caml_call2(_je_,t[2],Core_kernel[358])}
    function force(t){fill_if_empty(t[1],0);return t[2]}
    function force_exn(t)
     {var _EB_=Core_kernel[358];return caml_call2(_je_,force(t),_EB_)}
    function return$5(a)
     {return create$24(function(param){return caml_call1(_jc_,a)})}
    function bind$5(t,f)
     {return create$24
              (function(param)
                {function _Ez_(a){return force_exn(caml_call1(f,a))}
                 var _EA_=force_exn(t);
                 return caml_call2(include$20[4][2],_EA_,_Ez_)})}
    var
     map$29=
      [0,
       -198771759,
       function(t,f)
        {return create$24
                 (function(param){return caml_call2(_je_,force_exn(t),f)})}],
     include$30=caml_call1(Base_Monad[1],[0,bind$5,return$5,map$29]),
     _vH_=include$30[4],
     _vE_=include$30[1],
     _vF_=include$30[2],
     _vG_=include$30[3],
     _vI_=include$30[5],
     _vJ_=include$30[6],
     _vK_=include$30[7],
     _vL_=include$30[8],
     _vM_=include$30[9],
     _vN_=include$30[10],
     _vO_=include$30[11],
     _vP_=include$30[12];
    function bind$6(t,f)
     {return caml_call2
              (_vH_,
               t,
               function(a)
                {return create$24(function(param){return caml_call1(f,a)})})}
    function is_forced(t){return is_full(t[1])}
    function is_determined$0(t){return is_determined(t[2])}
    function peek$3(t){return peek$0(t[2])}
    function peek_exn$0(t)
     {var _Ex_=Core_kernel[358],_Ey_=peek$3(t);
      return caml_call2(Core_kernel_Option[39],_Ey_,_Ex_)}
    function _vQ_(param)
     {function _Ek_(param)
       {var def=create$24(return$0);
        stabilize$0(0);
        var consumer=def[2];
        stabilize$0(0);
        if(is_determined(consumer))throw [0,Assert_failure,_vR_];
        if(is_forced(def))throw [0,Assert_failure,_vS_];
        if(is_determined$0(def))throw [0,Assert_failure,_vT_];
        return 0}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_let_consumer_wait_def_in_st,
        0,
        cst_src_lazy_deferred_ml$0,
        60,
        4,
        263,
        _Ek_);
      function _El_(param)
       {var def=create$24(return$0);
        stabilize$0(0);
        var opt=peek$3(def);
        stabilize$0(0);
        if(0 === opt)
         {if(is_forced(def))throw [0,Assert_failure,_vU_];
          if(is_determined$0(def))throw [0,Assert_failure,_vV_];
          return 0}
        throw [0,Assert_failure,_vW_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_let_opt_peek_def_in_stabili,
        0,
        cst_src_lazy_deferred_ml$1,
        70,
        4,
        231,
        _El_);
      function _Em_(param)
       {var def=create$24(return$0);
        stabilize$0(0);
        var consumer=force(def);
        stabilize$0(0);
        if(is_determined(consumer))
         {if(is_determined$0(def))
           {if(is_forced(def))return 0;throw [0,Assert_failure,_vX_]}
          throw [0,Assert_failure,_vY_]}
        throw [0,Assert_failure,_vZ_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_let_consumer_force_def_in_s,
        0,
        cst_src_lazy_deferred_ml$2,
        80,
        4,
        246,
        _Em_);
      function _En_(param)
       {var def=create$24(return$0);
        stabilize$0(0);
        var consumer=def[2];
        stabilize$0(0);
        if(is_determined(consumer))throw [0,Assert_failure,_v0_];
        if(0 === peek$3(def))
         {if(is_forced(def))throw [0,Assert_failure,_v1_];
          var consumer2=force(def);
          stabilize$0(0);
          if(0 === peek$3(def))throw [0,Assert_failure,_v2_];
          if(is_determined(consumer))
           {if(is_determined(consumer2))
             {if(is_forced(def))return 0;throw [0,Assert_failure,_v3_]}
            throw [0,Assert_failure,_v4_]}
          throw [0,Assert_failure,_v5_]}
        throw [0,Assert_failure,_v6_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_let_consumer_wait_def_in_st$0,
        0,
        cst_src_lazy_deferred_ml$3,
        90,
        4,
        469,
        _En_);
      function determined(def,value)
       {var match=peek$0(def);
        if(match){var v=match[1];return caml_equal(value,v)}
        return 0}
      function make_bind_test(make,final$0)
       {var def1=create$24(return$0),def2=caml_call1(make,def1);
        stabilize$0(0);
        if(is_forced(def1))throw [0,Assert_failure,_v7_];
        if(is_forced(def2))throw [0,Assert_failure,_v8_];
        var consumer1=wait_exn(def1),consumer2=wait_exn(def2);
        stabilize$0(0);
        if(is_determined(consumer1))throw [0,Assert_failure,_v9_];
        if(is_determined(consumer2))throw [0,Assert_failure,_v__];
        var force1=force_exn(def1);
        stabilize$0(0);
        if(determined(consumer1,0))
         {if(determined(force1,0))
           {if(is_determined(consumer2))throw [0,Assert_failure,_v$_];
            var force2=force_exn(def2);
            stabilize$0(0);
            if(determined(force2,final$0))return 0;
            throw [0,Assert_failure,_wa_]}
          throw [0,Assert_failure,_wb_]}
        throw [0,Assert_failure,_wc_]}
      function _Eo_(param)
       {function make(def1)
         {return bind$6(def1,function(param){return return$0(final$0)})}
        return make_bind_test(make,final$0)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_make_bind_test_make_final,
        0,
        cst_src_lazy_deferred_ml$4,
        134,
        4,
        164,
        _Eo_);
      function _Ep_(param)
       {function make(def1)
         {return caml_call2
                  (_vH_,
                   def1,
                   function(param)
                    {return create$24
                             (function(param){return return$0(cst_foo$11)})})}
        return make_bind_test(make,final$1)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_make_bind_test_make_final$0,
        0,
        cst_src_lazy_deferred_ml$5,
        142,
        4,
        185,
        _Ep_);
      var E_for_test=[248,cst_E_for_test,caml_fresh_oo_id(0)];
      function determined_as_E_for_test(def)
       {var match=peek$0(def);
        if(match)
         {var _Eu_=match[1];
          if(0 !== _Eu_[0])
           {var
             err=_Eu_[1],
             _Ev_=caml_call1(Base_Exn[9],E_for_test),
             _Ew_=caml_call1(Core_kernel_Error[7],err);
            return caml_call2(Core_kernel_String[52],_Ew_,_Ev_)}}
        return 0}
      function _Eq_(param)
       {var def=create$24(function(param){throw E_for_test});
        stabilize$0(0);
        if(is_determined$0(def))throw [0,Assert_failure,_wd_];
        var def$0=force(def);
        stabilize$0(0);
        if(determined_as_E_for_test(def$0))return 0;
        throw [0,Assert_failure,_we_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_not_is_determined_def,
        0,
        cst_src_lazy_deferred_ml$6,
        159,
        4,
        226,
        _Eq_);
      function _Er_(param)
       {var
         def=create$24(function(param){return return$0(cst_foo$12)}),
         def$0=caml_call2(_vH_,def,function(param){throw E_for_test});
        stabilize$0(0);
        if(is_determined$0(def$0))throw [0,Assert_failure,_wf_];
        var def$1=force(def$0);
        stabilize$0(0);
        if(determined_as_E_for_test(def$1))return 0;
        throw [0,Assert_failure,_wg_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_not_is_determined_def$0,
        0,
        cst_src_lazy_deferred_ml$7,
        168,
        4,
        291,
        _Er_);
      function _Es_(param)
       {var def=create$24(function(param){throw E_for_test});
        stabilize$0(0);
        if(is_determined$0(def))throw [0,Assert_failure,_wh_];
        var
         def$0=
          try_with_or_error(0,0,0,_wi_,function(param){return force_exn(def)});
        stabilize$0(0);
        if(determined_as_E_for_test(def$0))return 0;
        throw [0,Assert_failure,_wj_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_not_is_determined_def$1,
        0,
        cst_src_lazy_deferred_ml$8,
        178,
        4,
        286,
        _Es_);
      function _Et_(param)
       {var
         def=create$24(function(param){return return$0(cst_foo$13)}),
         def$0=caml_call2(_vH_,def,function(param){throw E_for_test});
        stabilize$0(0);
        if(is_determined$0(def$0))throw [0,Assert_failure,_wk_];
        var
         def$1=
          try_with_or_error
           (0,0,0,_wl_,function(param){return force_exn(def$0)});
        stabilize$0(0);
        if(determined_as_E_for_test(def$1))return 0;
        throw [0,Assert_failure,_wm_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_not_is_determined_def$2,
        0,
        cst_src_lazy_deferred_ml$9,
        187,
        4,
        351,
        _Et_);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst$68,
      0,
      cst_src_lazy_deferred_ml$10,
      55,
      0,
      4015,
      _vQ_);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$166);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Async_kernel_Lazy_deferred=
      [0,
       create$24,
       force,
       force_exn,
       wait$0,
       wait_exn,
       _vE_,
       _vF_,
       _vG_,
       _vH_,
       _vI_,
       _vJ_,
       _vK_,
       _vL_,
       _vM_,
       _vN_,
       _vO_,
       _vP_,
       bind$6,
       peek$3,
       peek_exn$0,
       is_determined$0,
       is_forced];
    caml_register_global
     (2710,Async_kernel_Lazy_deferred,"Async_kernel__Lazy_deferred");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_async_kernel$167);
    caml_call1(Expect_test_collector[4][1],cst_src_eager_deferred0_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$168,cst$69);
    function bind$7(t,f)
     {return is_determined(t)
              ?caml_call1(f,value_exn$0(t))
              :caml_call2(bind$0,t,f)}
    var
     map$30=
      [0,
       -198771759,
       function(t,f)
        {return is_determined(t)
                 ?return$0(caml_call1(f,value_exn$0(t)))
                 :caml_call2(map$12,t,f)}],
     T$0=[0,sexp_of_t$33,return$0,bind$7,map$30],
     sexp_of_t$60=T$0[1],
     include$31=caml_call1(Base_Monad[1],[0,T$0[3],T$0[2],T$0[4]]),
     _wn_=include$31[1],
     _wo_=include$31[2],
     Monad_infix$1=include$31[3],
     bind$8=include$31[4],
     return$6=include$31[5],
     map$31=include$31[6],
     join$1=include$31[7],
     ignore_m$1=include$31[8],
     all$7=include$31[9],
     Let_syntax=include$31[12];
    function upon$2(t,f)
     {return is_determined(t)?caml_call1(f,value_exn$0(t)):upon$1(t,f)}
    function both$2(t1,t2)
     {return create$13
              (function(result)
                {return upon$2
                         (t1,
                          function(a1)
                           {return upon$2
                                    (t2,function(a2){return fill(result,[0,a1,a2])})})})}
    function ok$0(t)
     {return is_determined(t)?caml_call1(return$6,[0,value_exn$0(t)]):ok(t)}
    function ignore(t){return is_determined(t)?unit:caml_call1(ignore_m,t)}
    function any$0(ts)
     {var match=caml_call2(Core_kernel_List[26],ts,is_determined);
      if(match){var x=match[1];return caml_call1(return$6,value_exn$0(x))}
      return any(ts)}
    function any_unit$0(ts)
     {return caml_call2(Core_kernel_List[23],ts,is_determined)
              ?unit
              :any_unit(ts)}
    var Infix$0=[0,Monad_infix$1[1],Monad_infix$1[2],upon$2];
    function repeat_until_finished$0(state,f)
     {return create$13
              (function(finished)
                {function loop(state)
                  {function _Ei_(param)
                    {if(990972795 <= param[1])
                      {var state=param[2];return loop(state)}
                     var result=param[2];
                     return fill(finished,result)}
                   var _Ej_=caml_call1(f,state);
                   return caml_call2(Infix$0[3],_Ej_,_Ei_)}
                 return loop(state)})}
    function foldi$4(t,init,f)
     {return create$13
              (function(result)
                {function loop(t,i,b)
                  {if(t)
                    {var
                      xs=t[2],
                      x=t[1],
                      _Eg_=function(b){return loop(xs,i + 1 | 0,b)},
                      _Eh_=caml_call3(f,i,b,x);
                     return caml_call2(Infix$0[3],_Eh_,_Eg_)}
                   return fill(result,b)}
                 return loop(t,0,init)})}
    function fold$22(t,init,f)
     {return foldi$4(t,init,function(param,a,x){return caml_call2(f,a,x)})}
    function seqmapi$1(t,f)
     {var
       _Ec_=Core_kernel_List[47],
       _Ed_=
        foldi$4
         (t,
          0,
          function(i,bs,a)
           {function _Ee_(b){return [0,b,bs]}
            var _Ef_=caml_call2(f,i,a);
            return caml_call2(Let_syntax[4][3],_Ef_,_Ee_)});
      return caml_call2(Let_syntax[3],_Ed_,_Ec_)}
    function all$8(ds){return seqmapi$1(ds,function(param,x){return x})}
    function all_unit$4(ds)
     {return ignore(fold$22(ds,0,function(param,d){return d}))}
    function iteri$5(opt,t,f)
     {if(opt)var sth=opt[1],how=sth;else var how=-686623969;
      if(typeof how === "number")
       if(! (-676829465 <= how))
        return foldi$4(t,0,function(i,param,x){return caml_call2(f,i,x)});
      var
       _Ea_=caml_call2(Async_kernel_Throttle[11],[0,how],f),
       _Eb_=caml_call1(Core_kernel[368],_Ea_);
      return all_unit$4(caml_call2(Core_kernel_List[103],t,_Eb_))}
    function mapi$5(opt,t,f)
     {if(opt)var sth=opt[1],how=sth;else var how=-686623969;
      if(typeof how === "number")
       if(! (-676829465 <= how))return seqmapi$1(t,f);
      var
       _D__=caml_call2(Async_kernel_Throttle[11],[0,how],f),
       _D$_=caml_call1(Core_kernel[368],_D__);
      return all$8(caml_call2(Core_kernel_List[103],t,_D$_))}
    function filteri$5(how,t,f)
     {function _D6_(bools)
       {function _D8_(ac,x,b){return b?[0,x,ac]:ac}
        var _D9_=caml_call4(Core_kernel_List[56],t,bools,0,_D8_);
        return caml_call1(Core_kernel_List[47],_D9_)}
      var _D7_=mapi$5(how,t,f);
      return caml_call2(Let_syntax[4][3],_D7_,_D6_)}
    function filter_mapi$5(how,t,f)
     {var _D4_=Core_kernel_List[133],_D5_=mapi$5(how,t,f);
      return caml_call2(Let_syntax[3],_D5_,_D4_)}
    function concat_mapi$4(how,t,f)
     {var _D2_=Core_kernel_List[140],_D3_=mapi$5(how,t,f);
      return caml_call2(Let_syntax[3],_D3_,_D2_)}
    function find_mapi$4(t,f)
     {function find_mapi(t,f,i)
       {if(t)
         {var
           tl=t[2],
           hd=t[1],
           _D0_=
            function(some)
             {return some
                      ?caml_call1(Let_syntax[1],some)
                      :find_mapi(tl,f,i + 1 | 0)},
           _D1_=caml_call2(f,i,hd);
          return caml_call2(Let_syntax[4][2],_D1_,_D0_)}
        return caml_call1(Let_syntax[1],0)}
      return find_mapi(t,f,0)}
    function findi$4(t,f)
     {return find_mapi$4
              (t,
               function(i,elt)
                {function _DY_(b){return b?[0,[0,i,elt]]:0}
                 var _DZ_=caml_call2(f,i,elt);
                 return caml_call2(Let_syntax[4][3],_DZ_,_DY_)})}
    function find$5(t,f)
     {return find_mapi$4
              (t,
               function(param,elt)
                {function _DW_(param){return 0 === param?0:[0,elt]}
                 var _DX_=caml_call1(f,elt);
                 return caml_call2(Let_syntax[4][3],_DX_,_DW_)})}
    function existsi$4(t,f)
     {function _DS_(param){return param?1:0}
      var
       _DT_=
        find_mapi$4
         (t,
          function(i,elt)
           {function _DU_(b){return b?_wp_:0}
            var _DV_=caml_call2(f,i,elt);
            return caml_call2(Let_syntax[4][3],_DV_,_DU_)});
      return caml_call2(Let_syntax[4][3],_DT_,_DS_)}
    function for_alli$4(t,f)
     {function _DO_(param){return param?0:1}
      var
       _DP_=
        find_mapi$4
         (t,
          function(i,elt)
           {function _DQ_(b){return b?0:_wq_}
            var _DR_=caml_call2(f,i,elt);
            return caml_call2(Let_syntax[4][3],_DR_,_DQ_)});
      return caml_call2(Let_syntax[4][3],_DP_,_DO_)}
    function iter$25(how,t,f)
     {return iteri$5(how,t,function(param,a){return caml_call1(f,a)})}
    function map$32(how,t,f)
     {return mapi$5(how,t,function(param,a){return caml_call1(f,a)})}
    function filter$6(how,t,f)
     {return filteri$5(how,t,function(param,a){return caml_call1(f,a)})}
    function filter_map$7(how,t,f)
     {return filter_mapi$5(how,t,function(param,a){return caml_call1(f,a)})}
    function concat_map$4(how,t,f)
     {return concat_mapi$4(how,t,function(param,a){return caml_call1(f,a)})}
    function find_map$4(t,f)
     {return find_mapi$4(t,function(param,a){return caml_call1(f,a)})}
    function exists$16(t,f)
     {return existsi$4(t,function(param,a){return caml_call1(f,a)})}
    function for_all$16(t,f)
     {return for_alli$4(t,function(param,a){return caml_call1(f,a)})}
    function init$5(how,n,f)
     {function _DM_(_DN_){return _DN_}
      return map$32(how,caml_call2(Core_kernel_List[128],n,_DM_),f)}
    var
     List$0=
      [0,
       foldi$4,
       fold$22,
       seqmapi$1,
       all$8,
       all_unit$4,
       iteri$5,
       mapi$5,
       filteri$5,
       filter_mapi$5,
       concat_mapi$4,
       find_mapi$4,
       findi$4,
       find$5,
       existsi$4,
       for_alli$4,
       iter$25,
       map$32,
       filter$6,
       filter_map$7,
       concat_map$4,
       find_map$4,
       exists$16,
       for_all$16,
       init$5],
     _wr_=List$0[5];
    function _ws_(param)
     {var
       sexp_of_t=Core_kernel_List[15],
       iter=Core_kernel_List[19],
       fold=Core_kernel_List[20],
       exists=Core_kernel_List[23],
       for_all=Core_kernel_List[24],
       find=Core_kernel_List[26],
       find_map=Core_kernel_List[27],
       for_alli=Core_kernel_List[58],
       existsi=Core_kernel_List[61],
       filter=Core_kernel_List[64],
       filteri=Core_kernel_List[66],
       findi=Core_kernel_List[78],
       find_mapi=Core_kernel_List[81],
       map=Core_kernel_List[84],
       concat_map=Core_kernel_List[89],
       concat_mapi=Core_kernel_List[90],
       mapi=Core_kernel_List[103],
       iteri=Core_kernel_List[105],
       init=Core_kernel_List[128],
       filter_map=Core_kernel_List[131],
       filter_mapi=Core_kernel_List[132],
       _DJ_=
        [0,
         List$0[1],
         List$0[2],
         List$0[13],
         List$0[12],
         List$0[21],
         List$0[11],
         List$0[22],
         List$0[14],
         List$0[23],
         List$0[15],
         List$0[4],
         List$0[5],
         List$0[24],
         List$0[16],
         List$0[6],
         List$0[17],
         List$0[7],
         List$0[18],
         List$0[8],
         List$0[19],
         List$0[9],
         List$0[20],
         List$0[10]],
       _DK_=Core_kernel_List[12],
       _DL_=Core_kernel_List[106];
      function compare(cmp,t1,t2){return caml_call3(_DK_,cmp,t1,t2)}
      function foldi(t,init,f){return caml_call3(_DL_,t,init,f)}
      Make
       ([0,
         compare,
         sexp_of_t,
         foldi,
         fold,
         init,
         iter,
         iteri,
         map,
         mapi,
         filter,
         filteri,
         filter_map,
         filter_mapi,
         concat_map,
         concat_mapi,
         find,
         findi,
         find_map,
         find_mapi,
         exists,
         existsi,
         for_all,
         for_alli],
        _DJ_);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst_Eager_deferred_list_tests,
      0,
      cst_src_eager_deferred0_ml$0,
      191,
      0,
      292,
      _ws_);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$169);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     include$32=
      [0,
       T$0,
       sexp_of_t$60,
       _wn_,
       _wo_,
       Monad_infix$1,
       bind$8,
       return$6,
       map$31,
       join$1,
       ignore_m$1,
       all$7,
       Let_syntax,
       create$13,
       don_t_wait_for,
       invariant$9,
       is_determined,
       never,
       peek$0,
       unit,
       value_exn$0,
       upon$2,
       both$2,
       ok$0,
       ignore,
       any$0,
       any_unit$0,
       Infix$0,
       repeat_until_finished$0,
       List$0,
       _wr_,
       _wr_];
    caml_register_global(2711,include$32,"Async_kernel__Eager_deferred0");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_async_kernel$170);
    caml_call1(Expect_test_collector[4][1],cst_src_eager_deferred_result_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$171,cst$70);
    var T$1=[0],Deferred$10=0;
    function combine$1(t1,t2,ok,err)
     {function _DH_(param)
       {var t2=param[2],t1=param[1];
        return caml_call4(Core_kernel_Result[38],t1,t2,ok,err)}
      var _DI_=caml_call2(Let_syntax[4][4],t1,t2);
      return caml_call2(Let_syntax[4][3],_DI_,_DH_)}
    function return$7(a){return caml_call1(return$6,[0,a])}
    function bind$9(t,f)
     {return caml_call2
              (bind$8,
               t,
               function(error)
                {if(0 === error[0]){var a=error[1];return caml_call1(f,a)}
                 return caml_call1(return$6,error)})}
    var
     map$33=
      [0,
       -198771759,
       function(t,f)
        {return caml_call2
                 (map$31,
                  t,
                  function(r){return caml_call2(Core_kernel_Result[36],r,f)})}],
     include$33=caml_call1(Base_Monad[2],[0,bind$9,map$33,return$7]),
     _wt_=include$33[1],
     _wu_=include$33[2],
     Monad_infix$2=include$33[4],
     bind$10=include$33[5],
     return$8=include$33[6],
     _ww_=include$33[7],
     join$2=include$33[8],
     ignore_m$2=include$33[9],
     _wv_=include$33[3],
     _wx_=include$33[10],
     _wy_=include$33[11],
     _wz_=include$33[12];
    function map_error$0(t,f)
     {return caml_call2
              (map$31,
               t,
               function(r){return caml_call2(Core_kernel_Result[37],r,f)})}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$172);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Async_kernel_Eager_deferred_result=
      [0,
       Deferred$10,
       T$1,
       combine$1,
       _wt_,
       _wu_,
       _wv_,
       Monad_infix$2,
       bind$10,
       return$8,
       _ww_,
       join$2,
       ignore_m$2,
       _wx_,
       _wy_,
       _wz_,
       ignore_m$2,
       map_error$0];
    caml_register_global
     (2712,
      Async_kernel_Eager_deferred_result,
      "Async_kernel__Eager_deferred_result");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_async_kernel$173);
    caml_call1(Expect_test_collector[4][1],cst_src_eager_deferred_or_error_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$174,cst$71);
    function try_with$2(_DE_,_DD_,_DC_,_DB_)
     {return function(_DF_,_DG_)
       {return try_with(_DE_,_DD_,_DC_,_DB_,_wA_,_DF_,_DG_)}}
    function apply$1(f,x)
     {function _DA_(e1,e2)
       {return caml_call2(Core_kernel_Error[18],0,[0,e1,[0,e2,0]])}
      return combine$1(f,x,function(f,x){return caml_call1(f,x)},_DA_)}
    var
     map$34=[0,-198771759,_ww_],
     include$34=caml_call1(Base_Applicative[4],[0,return$8,apply$1,map$34]),
     return$9=include$34[1],
     map$35=include$34[3],
     all$9=include$34[6],
     all_unit$5=include$34[7],
     all_ignore$1=include$34[8],
     both$3=include$34[9],
     _wC_=Monad_infix$2[2],
     Open_on_rhs$1=[0],
     _wB_=Monad_infix$2[1];
    function fail$0(error)
     {return caml_call1(return$6,caml_call1(Core_kernel_Result[25],error))}
    function ok_exn$0(t){return caml_call2(map$31,t,Core_kernel_Or_error[40])}
    function of_exn$0(exn)
     {return caml_call1(return$6,caml_call2(Core_kernel_Or_error[41],0,exn))}
    function of_exn_result$0(t)
     {return caml_call2(map$31,t,Core_kernel_Or_error[42])}
    function error$1(msg,v,sexp_of)
     {return caml_call1
              (return$6,caml_call4(Core_kernel_Or_error[43],0,msg,v,sexp_of))}
    function error_s$0(sexp)
     {return caml_call1(return$6,caml_call1(Core_kernel_Or_error[44],sexp))}
    function error_string$0(msg)
     {return caml_call1(return$6,caml_call1(Core_kernel_Or_error[45],msg))}
    function errorf$0(format)
     {return caml_call2(Core_kernel[357],error_string$0,format)}
    function tag$0(t,tag)
     {var _Dy_=Core_kernel_Or_error[47];
      return caml_call2
              (map$31,t,function(_Dz_){return caml_call2(_Dy_,_Dz_,tag)})}
    function tag_arg$0(t,message,a,sexp_of_a)
     {return caml_call2
              (map$31,
               t,
               function(t)
                {return caml_call4
                         (Core_kernel_Or_error[48],t,message,a,sexp_of_a)})}
    function unimplemented$0(msg)
     {return caml_call1(return$6,caml_call1(Core_kernel_Or_error[49],msg))}
    function combine_errors$0(l)
     {var _Dx_=Core_kernel_Or_error[53];
      return caml_call2(map$31,caml_call1(all$7,l),_Dx_)}
    function combine_errors_unit$0(l)
     {var _Dw_=Core_kernel_Or_error[54];
      return caml_call2(map$31,caml_call1(all$7,l),_Dw_)}
    function find_map_ok$0(l,f)
     {return repeat_until_finished$0
              ([0,l,0],
               function(param)
                {var errors=param[2],l=param[1];
                 if(l)
                  {var
                    tl=l[2],
                    hd=l[1],
                    _Du_=
                     function(param)
                      {if(0 === param[0])
                        {var result=param[1];return [0,-289386606,[0,result]]}
                       var current_error=param[1];
                       return [0,990972795,[0,tl,[0,current_error,errors]]]};
                   return caml_call2(map$31,caml_call1(f,hd),_Du_)}
                 var
                  _Dv_=caml_call1(Core_kernel_List[47],errors),
                  errors$0=caml_call2(Core_kernel_Error[18],0,_Dv_);
                 return caml_call1(return$6,[0,-289386606,[1,errors$0]])})}
    var ok_unit$0=caml_call1(return$9,0);
    function try_with$3(extract_exn,here,name,f)
     {function _Dt_(ok)
       {if(0 === ok[0])return ok;
        var exn=ok[1];
        return [1,caml_call2(Core_kernel_Error[19],0,exn)]}
      return caml_call2
              (map$31,
               caml_call2(try_with$2(here,0,name,extract_exn),0,f),
               _Dt_)}
    function try_with_join$0(extract_exn,here,name,f)
     {var _Ds_=Core_kernel_Or_error[27];
      return caml_call2(map$31,try_with$3(extract_exn,here,name,f),_Ds_)}
    function foldi$5(list,acc,f)
     {function loop(i,acc,param)
       {if(param)
         {var
           tl=param[2],
           hd=param[1],
           _Dr_=function(acc){return loop(i + 1 | 0,acc,tl)};
          return caml_call2(bind$10,caml_call3(f,i,acc,hd),_Dr_)}
        return caml_call1(return$9,acc)}
      return loop(0,acc,list)}
    function mapi$6(opt,t,f)
     {if(opt)var sth=opt[1],how=sth;else var how=-686623969;
      if(typeof how === "number")
       if(! (-676829465 <= how))
        {var _Dn_=Core_kernel_List[47];
         return caml_call2
                 (_wC_,
                  foldi$5
                   (t,
                    0,
                    function(i,bs,a)
                     {function _Dq_(b){return [0,b,bs]}
                      return caml_call2(map$35,caml_call2(f,i,a),_Dq_)}),
                  _Dn_)}
      var
       _Do_=caml_call2(Async_kernel_Throttle[11],[0,how],f),
       _Dp_=caml_call1(Core_kernel[368],_Do_);
      return caml_call1(all$9,caml_call2(Core_kernel_List[103],t,_Dp_))}
    function filter_mapi$6(how,t,f)
     {var _Dm_=Core_kernel_List[133];
      return caml_call2(_wC_,mapi$6(how,t,f),_Dm_)}
    function concat_mapi$5(how,t,f)
     {var _Dl_=Core_kernel_List[140];
      return caml_call2(_wC_,mapi$6(how,t,f),_Dl_)}
    function filteri$6(how,t,f)
     {return filter_mapi$6
              (how,
               t,
               function(i,x)
                {function _Dk_(b){return b?[0,x]:0}
                 return caml_call2(map$35,caml_call2(f,i,x),_Dk_)})}
    function find_mapi$5(t,f)
     {function find_mapi(t,f,i)
       {if(t)
         {var
           tl=t[2],
           hd=t[1],
           _Dj_=
            function(some)
             {return some?caml_call1(return$9,some):find_mapi(tl,f,i + 1 | 0)};
          return caml_call2(bind$10,caml_call2(f,i,hd),_Dj_)}
        return caml_call1(return$9,0)}
      return find_mapi(t,f,0)}
    function findi$5(t,f)
     {return find_mapi$5
              (t,
               function(i,elt)
                {function _Di_(b){return b?[0,[0,i,elt]]:0}
                 return caml_call2(map$35,caml_call2(f,i,elt),_Di_)})}
    function find$6(t,f)
     {return find_mapi$5
              (t,
               function(param,elt)
                {function _Dh_(b){return b?[0,elt]:0}
                 return caml_call2(map$35,caml_call1(f,elt),_Dh_)})}
    function existsi$5(t,f)
     {function _Df_(param){return param?1:0}
      return caml_call2
              (map$35,
               find_mapi$5
                (t,
                 function(i,elt)
                  {function _Dg_(b){return b?_wD_:0}
                   return caml_call2(map$35,caml_call2(f,i,elt),_Dg_)}),
               _Df_)}
    function for_alli$5(t,f)
     {function _Dd_(param){return param?0:1}
      return caml_call2
              (map$35,
               find_mapi$5
                (t,
                 function(i,elt)
                  {function _De_(b){return b?0:_wE_}
                   return caml_call2(map$35,caml_call2(f,i,elt),_De_)}),
               _Dd_)}
    function iter$26(how$0,t,f)
     {function f$0(param,a){return caml_call1(f,a)}
      if(how$0)var sth=how$0[1],how=sth;else var how=-686623969;
      if(typeof how === "number")
       if(! (-676829465 <= how))
        return foldi$5(t,0,function(i,param,x){return f$0(i,x)});
      var
       _Db_=caml_call2(Async_kernel_Throttle[11],[0,how],f$0),
       _Dc_=caml_call1(Core_kernel[368],_Db_);
      return caml_call1(all_unit$5,caml_call2(Core_kernel_List[103],t,_Dc_))}
    function map$36(how,t,f)
     {return mapi$6(how,t,function(param,a){return caml_call1(f,a)})}
    function find_map$5(t,f)
     {return find_mapi$5(t,function(param,a){return caml_call1(f,a)})}
    function exists$17(t,f)
     {return existsi$5(t,function(param,a){return caml_call1(f,a)})}
    function for_all$17(t,f)
     {return for_alli$5(t,function(param,a){return caml_call1(f,a)})}
    function _wF_(param)
     {var tasks=caml_call2(Core_kernel_Queue[60],0,0);
      function return$0(a)
       {var ivar=caml_call1(create$12,0);
        function task(param){return fill(ivar,[0,a])}
        caml_call2(Core_kernel_Queue[40],tasks,task);
        return ivar}
      function stabilize(param)
       {a:
        for(;;)
         for(;;)
          {var match=caml_call1(Core_kernel_Queue[42],tasks);
           if(match){var task=match[1];caml_call1(task,0);continue}
           stabilize$0(0);
           var _Da_=1 - caml_call1(Core_kernel_Queue[14],tasks);
           if(_Da_)continue a;
           return _Da_}}
      function determined(def,value)
       {var match=peek$0(def);
        if(match)
         {var _C$_=match[1];
          if(0 === _C$_[0]){var v=_C$_[1];return caml_equal(value,v)}}
        return 0}
      function _BO_(param)
       {var def=return$0(123);
        stabilize(0);
        if(determined(def,123))return 0;
        throw [0,Assert_failure,_wG_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_determined_def_123$0,
        0,
        cst_src_eager_deferred_or_error_ml$0,
        236,
        4,
        105,
        _BO_);
      function _BP_(param)
       {var def=never(0);
        stabilize(0);
        if(0 === peek$0(def))return 0;
        throw [0,Assert_failure,_wH_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_Deferred_peek_def_None$0,
        0,
        cst_src_eager_deferred_or_error_ml$1,
        242,
        4,
        109,
        _BP_);
      function _BQ_(param)
       {var
         def=
          foldi$5
           (t$6,
            init$6,
            function(param,acc,value)
             {var _C__=caml_call1(Core_kernel_Int[98],value);
              return return$0(caml_call2(Core_kernel[178],acc,_C__))});
        stabilize(0);
        if(determined(def,cst_012$0))return 0;
        throw [0,Assert_failure,_wI_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_determined_def_012$0,
        0,
        cst_src_eager_deferred_or_error_ml$2,
        248,
        4,
        213,
        _BQ_);
      function _BR_(param)
       {function f(value){return return$0(caml_call1(Core_kernel[182],value))}
        var n=3,how=0;
        function _C8_(_C9_){return _C9_}
        var def=map$36(how,caml_call2(Core_kernel_List[128],n,_C8_),f);
        stabilize(0);
        if(determined(def,_wJ_))return 0;
        throw [0,Assert_failure,_wK_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_determined_def_0_1$0,
        0,
        cst_src_eager_deferred_or_error_ml$3,
        257,
        4,
        172,
        _BR_);
      function _BS_(param)
       {var r=[0,0],n=3;
        function _C7_(value){r[1] = r[1] + value | 0;return return$0(0)}
        var
         def=
          iter$26(0,caml_call2(Core_kernel_List[128],n,Core_kernel[352]),_C7_);
        stabilize(0);
        if(determined(def,0))
         {if(r[1] === 3)return 0;throw [0,Assert_failure,_wL_]}
        throw [0,Assert_failure,_wM_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_determined_def_ass$0,
        0,
        cst_src_eager_deferred_or_error_ml$4,
        263,
        4,
        277,
        _BS_);
      function _BT_(param)
       {var
         def=
          map$36(0,_wN_,function(value){return return$0(value + 1 | 0)});
        stabilize(0);
        if(determined(def,_wO_))return 0;
        throw [0,Assert_failure,_wP_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_determined_def_1_2_3$0,
        0,
        cst_src_eager_deferred_or_error_ml$5,
        275,
        4,
        192,
        _BT_);
      function _BU_(param)
       {var
         def=
          mapi$6
           (0,
            _wQ_,
            function(i,value){return return$0((i * 10 | 0) + value | 0)});
        stabilize(0);
        if(determined(def,_wR_))return 0;
        throw [0,Assert_failure,_wS_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_determined_def_2_11_20$0,
        0,
        cst_src_eager_deferred_or_error_ml$6,
        284,
        4,
        201,
        _BU_);
      function _BV_(param)
       {var
         how=0,
         def=
          filteri$6
           (how,
            t$7,
            function(param,value){return return$0(0 === (value % 2 | 0)?1:0)});
        stabilize(0);
        if(determined(def,_wT_))return 0;
        throw [0,Assert_failure,_wU_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_determined_def_0_2_4$0,
        0,
        cst_src_eager_deferred_or_error_ml$7,
        293,
        4,
        208,
        _BV_);
      function _BW_(param)
       {var
         def=
          filteri$6(0,_wV_,function(i,value){return return$0(value < i?1:0)});
        stabilize(0);
        if(determined(def,_wW_))return 0;
        throw [0,Assert_failure,_wX_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_determined_def_1_0$0,
        0,
        cst_src_eager_deferred_or_error_ml$8,
        302,
        4,
        201,
        _BW_);
      function _BX_(param)
       {var
         how=0,
         def=
          filter_mapi$6
           (how,
            t$8,
            function(param,value)
             {var _C6_=0 === (value % 2 | 0)?[0,value + 1 | 0]:0;
              return return$0(_C6_)});
        stabilize(0);
        if(determined(def,_wY_))return 0;
        throw [0,Assert_failure,_wZ_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_determined_def_1_3_5$0,
        0,
        cst_src_eager_deferred_or_error_ml$9,
        311,
        4,
        277,
        _BX_);
      function _BY_(param)
       {var
         def=
          filter_mapi$6
           (0,
            _w0_,
            function(i,value)
             {var _C5_=value < i?[0,[0,i,value]]:0;return return$0(_C5_)});
        stabilize(0);
        if(determined(def,_w1_))return 0;
        throw [0,Assert_failure,_w2_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_determined_def_3_1$0,
        0,
        cst_src_eager_deferred_or_error_ml$10,
        322,
        4,
        275,
        _BY_);
      function _BZ_(param)
       {var
         how=0,
         def=
          concat_mapi$5
           (how,
            t$9,
            function(param,value)
             {function _C3_(_C4_){return _C4_}
              return return$0
                      (caml_call2(Core_kernel_List[128],4 - value | 0,_C3_))});
        stabilize(0);
        if(determined(def,_w3_))return 0;
        throw [0,Assert_failure,_w4_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_determined_def_0_1_2$2,
        0,
        cst_src_eager_deferred_or_error_ml$11,
        333,
        4,
        280,
        _BZ_);
      function _B0_(param)
       {var
         def=
          concat_mapi$5
           (0,
            _w5_,
            function(i,value)
             {function _C2_(j){return i + j | 0}
              return return$0(caml_call2(Core_kernel_List[128],value,_C2_))});
        stabilize(0);
        if(determined(def,_w6_))return 0;
        throw [0,Assert_failure,_w7_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_determined_def_0_1_2$3,
        0,
        cst_src_eager_deferred_or_error_ml$12,
        344,
        4,
        288,
        _B0_);
      function _B1_(param)
       {var
         def=
          foldi$5
           (_w8_,
            cst$72,
            function(i,acc,value)
             {var
               _CZ_=caml_call1(Core_kernel_Int[98],i + 3 | 0),
               _C0_=caml_call1(Core_kernel_Int[98],value),
               _C1_=caml_call2(Core_kernel[178],_C0_,_CZ_);
              return return$0(caml_call2(Core_kernel[178],acc,_C1_))});
        stabilize(0);
        if(determined(def,cst_031425$0))return 0;
        throw [0,Assert_failure,_w9_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_determined_def_031425$0,
        0,
        cst_src_eager_deferred_or_error_ml$13,
        355,
        4,
        241,
        _B1_);
      function _B2_(param)
       {function _CY_(i){return return$0(i)}
        var
         list=caml_call2(Core_kernel_List[128],3,_CY_),
         def=caml_call1(all$9,list);
        stabilize(0);
        if(determined(def,_w__))return 0;
        throw [0,Assert_failure,_w$_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_determined_def_0_1_2$4,
        0,
        cst_src_eager_deferred_or_error_ml$14,
        364,
        4,
        176,
        _B2_);
      function _B3_(param)
       {var
         def=
          find$6(_xa_,function(value){return return$0(3 === value?1:0)});
        stabilize(0);
        if(determined(def,_xb_))return 0;
        throw [0,Assert_failure,_xc_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_determined_def_Some_3$1,
        0,
        cst_src_eager_deferred_or_error_ml$15,
        371,
        4,
        222,
        _B3_);
      function _B4_(param)
       {var
         def=
          find$6(_xd_,function(value){return return$0(5 === value?1:0)});
        stabilize(0);
        if(determined(def,0))return 0;
        throw [0,Assert_failure,_xe_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_determined_def_None$3,
        0,
        cst_src_eager_deferred_or_error_ml$16,
        382,
        4,
        218,
        _B4_);
      function _B5_(param)
       {var
         def=
          findi$5(_xf_,function(i,value){return return$0(value < i?1:0)});
        stabilize(0);
        if(determined(def,_xg_))return 0;
        throw [0,Assert_failure,_xh_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_determined_def_Some_3$2,
        0,
        cst_src_eager_deferred_or_error_ml$17,
        393,
        4,
        229,
        _B5_);
      function _B6_(param)
       {var
         def=
          findi$5
           (_xi_,
            function(i,value){return return$0(5 === (i + value | 0)?1:0)});
        stabilize(0);
        if(determined(def,0))return 0;
        throw [0,Assert_failure,_xj_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_determined_def_None$4,
        0,
        cst_src_eager_deferred_or_error_ml$18,
        404,
        4,
        225,
        _B6_);
      function _B7_(param)
       {var
         def=
          find_map$5
           (_xk_,
            function(value)
             {var _CX_=3 === value?[0,value + 1 | 0]:0;return return$0(_CX_)});
        stabilize(0);
        if(determined(def,_xl_))return 0;
        throw [0,Assert_failure,_xm_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_determined_def_Some_4$0,
        0,
        cst_src_eager_deferred_or_error_ml$19,
        415,
        4,
        264,
        _B7_);
      function _B8_(param)
       {var
         def=
          find_map$5
           (_xn_,
            function(value)
             {var _CW_=5 === value?[0,value + 1 | 0]:0;return return$0(_CW_)});
        stabilize(0);
        if(determined(def,0))return 0;
        throw [0,Assert_failure,_xo_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_determined_def_None$5,
        0,
        cst_src_eager_deferred_or_error_ml$20,
        426,
        4,
        260,
        _B8_);
      function _B9_(param)
       {var
         def=
          find_mapi$5
           (_xp_,
            function(i,value)
             {var _CV_=3 === value?[0,[0,i,value + 1 | 0]]:0;
              return return$0(_CV_)});
        stabilize(0);
        if(determined(def,_xq_))return 0;
        throw [0,Assert_failure,_xr_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_determined_def_Some_1$0,
        0,
        cst_src_eager_deferred_or_error_ml$21,
        437,
        4,
        273,
        _B9_);
      function _B__(param)
       {var
         def=
          find_mapi$5
           (_xs_,
            function(i,value)
             {var _CU_=5 === value?[0,[0,i,value + 1 | 0]]:0;
              return return$0(_CU_)});
        stabilize(0);
        if(determined(def,0))return 0;
        throw [0,Assert_failure,_xt_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_determined_def_None$6,
        0,
        cst_src_eager_deferred_or_error_ml$22,
        448,
        4,
        265,
        _B__);
      function _B$_(param)
       {var
         def=
          exists$17(_xu_,function(value){return return$0(3 === value?1:0)});
        stabilize(0);
        if(determined(def,1))return 0;
        throw [0,Assert_failure,_xv_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_determined_def_true$3,
        0,
        cst_src_eager_deferred_or_error_ml$23,
        459,
        4,
        220,
        _B$_);
      function _Ca_(param)
       {var
         def=
          exists$17(_xw_,function(value){return return$0(5 === value?1:0)});
        stabilize(0);
        if(determined(def,0))return 0;
        throw [0,Assert_failure,_xx_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_determined_def_false$3,
        0,
        cst_src_eager_deferred_or_error_ml$24,
        470,
        4,
        221,
        _Ca_);
      function _Cb_(param)
       {var
         def=
          existsi$5(_xy_,function(i,value){return return$0(value < i?1:0)});
        stabilize(0);
        if(determined(def,1))return 0;
        throw [0,Assert_failure,_xz_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_determined_def_true$4,
        0,
        cst_src_eager_deferred_or_error_ml$25,
        481,
        4,
        223,
        _Cb_);
      function _Cc_(param)
       {var
         def=
          existsi$5
           (_xA_,
            function(i,value){return return$0(5 === (i + value | 0)?1:0)});
        stabilize(0);
        if(determined(def,0))return 0;
        throw [0,Assert_failure,_xB_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_determined_def_false$4,
        0,
        cst_src_eager_deferred_or_error_ml$26,
        492,
        4,
        228,
        _Cc_);
      function _Cd_(param)
       {var
         def=
          for_all$17(_xC_,function(value){return return$0(3 !== value?1:0)});
        stabilize(0);
        if(determined(def,0))return 0;
        throw [0,Assert_failure,_xD_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_determined_def_false$5,
        0,
        cst_src_eager_deferred_or_error_ml$27,
        503,
        4,
        223,
        _Cd_);
      function _Ce_(param)
       {var
         def=
          for_all$17(_xE_,function(value){return return$0(5 !== value?1:0)});
        stabilize(0);
        if(determined(def,1))return 0;
        throw [0,Assert_failure,_xF_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_determined_def_true$5,
        0,
        cst_src_eager_deferred_or_error_ml$28,
        514,
        4,
        222,
        _Ce_);
      function _Cf_(param)
       {var
         def=
          for_alli$5(_xG_,function(i,value){return return$0(i <= value?1:0)});
        stabilize(0);
        if(determined(def,0))return 0;
        throw [0,Assert_failure,_xH_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_determined_def_false$6,
        0,
        cst_src_eager_deferred_or_error_ml$29,
        525,
        4,
        226,
        _Cf_);
      function _Cg_(param)
       {var
         def=
          for_alli$5
           (_xI_,
            function(i,value){return return$0(5 !== (i + value | 0)?1:0)});
        stabilize(0);
        if(determined(def,1))return 0;
        throw [0,Assert_failure,_xJ_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_determined_def_true$6,
        0,
        cst_src_eager_deferred_or_error_ml$30,
        536,
        4,
        229,
        _Cg_);
      function _Ch_(param)
       {function f(param)
         {return caml_call1
                  (return$6,[1,caml_call1(Core_kernel_Error[10],cst_error$0)])}
        var def=try_with$3(0,0,0,function(param){return iter$26(0,_xK_,f)});
        stabilize(0);
        var match=peek$0(def);
        if(match)
         {var _CT_=match[1];if(0 === _CT_[0])if(0 !== _CT_[1][0])return 1}
        return 0}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_stabilize_match_Deferred_peek_def_with$1,
        0,
        cst_src_eager_deferred_or_error_ml$31,
        548,
        4,
        255,
        _Ch_);
      function _Ci_(param)
       {function f(param){throw Caml[141]}
        var def=try_with$3(0,0,0,function(param){return iter$26(0,_xL_,f)});
        stabilize(0);
        var match=peek$0(def);
        if(match)if(0 !== match[1][0])return 1;
        return 0}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_stabilize_match_Deferred_peek_def_with$2,
        0,
        cst_src_eager_deferred_or_error_ml$32,
        557,
        4,
        221,
        _Ci_);
      var err=caml_call1(Core_kernel_Error[10],cst_foo$14);
      function eq(deferred,expected)
       {stabilize(0);
        var _CN_=peek$0(deferred);
        if(_CN_)
         {var _CO_=_CN_[1];
          if(0 !== _CO_[0])
           {var _CQ_=_CO_[1];
            if(0 === expected[0])return 1;
            var
             expected$0=expected[1],
             got=caml_call1(Core_kernel_Error[7],_CQ_),
             expected$1=caml_call1(Core_kernel_Error[7],expected$0),
             _CR_=caml_call2(Core_kernel_String[112],expected$1,got),
             _CS_=_CR_ || (caml_call3(Core_kernel[344],_xM_,expected$1,got),0);
            return _CS_}
          var _CP_=_CO_[1];
          if(0 === expected[0]){var x=expected[1];return caml_equal(_CP_,x)}}
        return 0}
      function _Cj_(param){return eq(fail$0(err),[1,err])}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_eq_fail_err_Error_err$0,
        0,
        cst_src_eager_deferred_or_error_ml$33,
        589,
        4,
        48,
        _Cj_);
      function _Ck_(param)
       {var deferred=ok_exn$0(return$0(1));
        stabilize(0);
        var expected=1;
        function _CJ_(got){return caml_equal(got,expected)}
        var _CK_=peek$0(deferred);
        if(caml_call3(Core_kernel_Option[48],_CK_,0,_CJ_))
         {var
           _CL_=function(param){return ok_exn$0(fail$0(err))},
           rv=caml_call2(try_with$2(0,0,0,0),0,_CL_);
          stabilize(0);
          var match=peek$0(rv);
          if(match)
           if(0 === match[1][0])var switch$0=0;else var _CM_=1,switch$0=1;
          else
           var switch$0=0;
          if(! switch$0)var _CM_=0;
          if(_CM_)return 0;
          throw [0,Assert_failure,_xN_]}
        throw [0,Assert_failure,_xO_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_assert_eq_ok_exn_return_1_1_assert$0,
        0,
        cst_src_eager_deferred_or_error_ml$34,
        593,
        4,
        259,
        _Ck_);
      function _Cl_(param)
       {var
         _CI_=
          caml_call2(Core_kernel_Or_error[41],0,[0,Failure,cst_foo$15]);
        return eq(of_exn$0([0,Failure,cst_foo$16]),_CI_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_eq_of_exn_Failure_foo_Or_error_of_exn$0,
        0,
        cst_src_eager_deferred_or_error_ml$35,
        603,
        4,
        84,
        _Cl_);
      function _Cm_(param)
       {if(eq(of_exn_result$0(return$0(1)),_xP_))
         {var
           exn_result=[1,[0,Failure,cst_foo$17]],
           _CH_=caml_call1(Core_kernel_Or_error[42],exn_result);
          if(eq(of_exn_result$0(caml_call1(return$6,exn_result)),_CH_))
           return 0;
          throw [0,Assert_failure,_xQ_]}
        throw [0,Assert_failure,_xR_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_assert_eq_of_exn_result_return_1_Ok_1$0,
        0,
        cst_src_eager_deferred_or_error_ml$36,
        607,
        4,
        237,
        _Cm_);
      function _Cn_(param)
       {var
         _CG_=
          caml_call4
           (Core_kernel_Or_error[43],
            0,
            cst_foo$18,
            cst_bar$1,
            Core_kernel_String[106]);
        return eq(error$1(cst_foo$19,cst_bar$2,Core_kernel_String[106]),_CG_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_eq_error_foo_bar_String_sexp_of_t_Or$0,
        0,
        cst_src_eager_deferred_or_error_ml$37,
        614,
        4,
        108,
        _Cn_);
      function _Co_(param)
       {var _CF_=caml_call1(Core_kernel_Or_error[45],cst_foo$20);
        return eq(error_string$0(cst_foo$21),_CF_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_eq_error_string_foo_Or_error_error_strin$0,
        0,
        cst_src_eager_deferred_or_error_ml$38,
        618,
        4,
        76,
        _Co_);
      function _Cp_(param)
       {var _CE_=caml_call1(Core_kernel_Or_error[49],cst_foo$22);
        return eq(unimplemented$0(cst_foo$23),_CE_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_eq_unimplemented_foo_Or_error_unimplemen$0,
        0,
        cst_src_eager_deferred_or_error_ml$39,
        622,
        4,
        78,
        _Cp_);
      function check(deferred_f,immediate_f)
       {function check(l)
         {function _CB_(param){return 0 === param?fail$0(err):return$0(0)}
          var deferred_l=caml_call2(Core_kernel_List[84],l,_CB_);
          function _CC_(param){return 0 === param?[1,err]:_xS_}
          var
           immediate_l=caml_call2(Core_kernel_List[84],l,_CC_),
           _CD_=caml_call1(immediate_f,immediate_l);
          if(eq(caml_call1(deferred_f,deferred_l),_CD_))return 0;
          throw [0,Assert_failure,_xT_]}
        check(_xU_);
        check(0);
        check(_xV_);
        return check(_xW_)}
      function _Cq_(param)
       {return check(combine_errors$0,Core_kernel_Or_error[53])}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_check_combine_errors_Or_error_combine_errors$0,
        0,
        cst_src_eager_deferred_or_error_ml$40,
        638,
        4,
        72,
        _Cq_);
      function _Cr_(param)
       {return check(combine_errors_unit$0,Core_kernel_Or_error[54])}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_check_combine_errors_unit_Or_error_combine_er$0,
        0,
        cst_src_eager_deferred_or_error_ml$41,
        642,
        4,
        82,
        _Cr_);
      function _Cs_(param){return eq(ok_unit$0,_xX_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_eq_ok_unit_Ok$0,
        0,
        cst_src_eager_deferred_or_error_ml$42,
        646,
        4,
        41,
        _Cs_);
      function _Ct_(param)
       {var rv=never(0);
        stabilize(0);
        var _CA_=peek$0(rv);
        return caml_call1(Core_kernel_Option[46],_CA_)}
      caml_call8
       (Ppx_inline_test_lib_Runtime[4],
        Inline_test_config,
        cst_stabilize_Option_is_none_Deferred_peek_rv$0,
        0,
        cst_src_eager_deferred_or_error_ml$43,
        650,
        4,
        103,
        _Ct_);
      function expect_failure_with_prefix(prefix,deferred)
       {stabilize(0);
        var match=peek$0(deferred);
        if(match)
         {var _Cz_=match[1];
          if(0 !== _Cz_[0])
           {var err=_Cz_[1],s=caml_call1(Core_kernel_Error[7],err);
            return caml_call2(Core_kernel_String[57],s,prefix)
                    ?1
                    :(caml_call3(Core_kernel[344],_xY_,prefix,s),0)}}
        return 0}
      function _Cu_(param)
       {if
         (eq
           (try_with$3(0,0,0,function(param){return caml_call1(return$6,1)}),
            _xZ_))
         {if
           (expect_failure_with_prefix
             (cst_monitor_ml_Error_foo$1,
              try_with$3
               (0,
                0,
                0,
                function(param)
                 {var _Cy_=caml_call1(Sexplib0_Sexp_conv[7],cst_foo$24);
                  return caml_call1(Core_kernel[364],_Cy_)})))
           return 0;
          throw [0,Assert_failure,_x0_]}
        throw [0,Assert_failure,_x1_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_assert_eq_try_with_fun_Deferred_retu$0,
        0,
        cst_src_eager_deferred_or_error_ml$44,
        669,
        4,
        227,
        _Cu_);
      function _Cv_(param)
       {if
         (eq(try_with_join$0(0,0,0,function(param){return return$0(1)}),_x2_))
         {var _Cw_=[1,err];
          if
           (eq
             (try_with_join$0(0,0,0,function(param){return fail$0(err)}),_Cw_))
           {if
             (expect_failure_with_prefix
               (cst_monitor_ml_Error_foo$2,
                try_with$3
                 (0,
                  0,
                  0,
                  function(param)
                   {var _Cx_=caml_call1(Sexplib0_Sexp_conv[7],cst_foo$25);
                    return caml_call1(Core_kernel[364],_Cx_)})))
             return 0;
            throw [0,Assert_failure,_x3_]}
          throw [0,Assert_failure,_x4_]}
        throw [0,Assert_failure,_x5_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_assert_eq_try_with_join_fun_return_1$0,
        0,
        cst_src_eager_deferred_or_error_ml$45,
        675,
        4,
        291,
        _Cv_);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst$73,
      0,
      cst_src_eager_deferred_or_error_ml$46,
      195,
      0,
      12023,
      _wF_);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$175);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Async_kernel_Eager_deferred_or_error=
      [0,
       _wt_,
       _wu_,
       Monad_infix$2,
       bind$10,
       return$9,
       map$35,
       join$2,
       ignore_m$2,
       all$9,
       all_unit$5,
       all_ignore$1,
       [0,return$9,_wB_,_wC_,[0,return$9,bind$10,map$35,both$3,Open_on_rhs$1]],
       fail$0,
       ok_unit$0,
       ignore_m$2,
       ok_exn$0,
       of_exn$0,
       of_exn_result$0,
       error$1,
       error_s$0,
       error_string$0,
       errorf$0,
       tag$0,
       tag_arg$0,
       unimplemented$0,
       find_map_ok$0,
       try_with$3,
       try_with_join$0];
    caml_register_global
     (2713,
      Async_kernel_Eager_deferred_or_error,
      "Async_kernel__Eager_deferred_or_error");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_async_kernel$176);
    caml_call1(Expect_test_collector[4][1],cst_src_eager_deferred_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$177,cst$74);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$178);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     List$1=
      [0,
       List$0[1],
       List$0[2],
       List$0[13],
       List$0[12],
       List$0[21],
       List$0[11],
       List$0[22],
       List$0[14],
       List$0[23],
       List$0[15],
       List$0[4],
       List$0[5],
       List$0[24],
       List$0[16],
       List$0[6],
       List$0[17],
       List$0[7],
       List$0[18],
       List$0[8],
       List$0[19],
       List$0[9],
       List$0[20],
       List$0[10]],
     include$35=
      [0,
       invariant$9,
       _wn_,
       _wo_,
       Monad_infix$1,
       bind$8,
       return$6,
       map$31,
       join$1,
       ignore_m$1,
       all$7,
       _wr_,
       _wr_,
       Let_syntax,
       Infix$0,
       any$0,
       any_unit$0,
       both$2,
       create$13,
       don_t_wait_for,
       ignore,
       is_determined,
       never,
       ok$0,
       peek$0,
       unit,
       upon$2,
       value_exn$0,
       repeat_until_finished$0,
       List$1,
       0];
    caml_register_global(2714,include$35,"Async_kernel__Eager_deferred");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_async_kernel$179);
    caml_call1(Expect_test_collector[4][1],cst_src_deferred_unit_tests_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$180,cst$75);
    var Or_error$0=0;
    function _x6_(param)
     {function test(f)
       {var t=caml_call1(f,0);
        stabilize$0(0);
        var _BM_=1 - is_determined(t);
        if(_BM_)
         {var
           _BN_=
            caml_call1(Sexplib0_Sexp_conv[7],cst_unit_test_didn_t_finish);
          return caml_call1(Core_kernel[364],_BN_)}
        return _BM_}
      function _Bv_(param)
       {return test
                (function(param)
                  {function _BD_(f)
                    {var match=caml_call1(f,0);
                     if(match)
                      if(13 === match[1])
                       {var _BL_=match[2];
                        if(_BL_)if(14 === _BL_[1])if(! _BL_[2])return 0}
                     throw [0,Assert_failure,_x7_]}
                   var _BE_=0;
                   function _BF_(_BK_){return _BK_}
                   var _BG_=[0,[0,caml_call1(include$20[1],14),_BF_],_BE_];
                   function _BH_(_BJ_){return _BJ_}
                   var
                    _BI_=
                     enabled([0,[0,caml_call1(include$20[1],13),_BH_],_BG_]);
                   return caml_call2(include$20[4][3],_BI_,_BD_)})}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_fun_map_let_f_e,
        0,
        cst_src_deferred_unit_tests_ml$0,
        15,
        4,
        287,
        _Bv_);
      function _Bw_(param)
       {return test
                (function(param)
                  {var t1=caml_call1(create$12,0),t2=caml_call1(create$12,0);
                   function _Bx_(got)
                    {var sexpifier=Core_kernel[455],comparator=Core_kernel[451];
                     return caml_call8
                             (Ppx_assert_lib_Runtime[3],
                              pos$37,
                              sexpifier,
                              comparator,
                              0,
                              0,
                              0,
                              13,
                              got)}
                   var
                    _By_=0,
                    _Bz_=[0,[0,t2,function(_BC_){return _BC_}],_By_],
                    _BA_=choose([0,[0,t1,function(_BB_){return _BB_}],_Bz_]),
                    t=caml_call2(include$20[4][3],_BA_,_Bx_);
                   fill(t2,14);
                   fill(t1,13);
                   return t})}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_test_fun_let_t1_Ivar_create,
        0,
        cst_src_deferred_unit_tests_ml$1,
        26,
        4,
        493,
        _Bw_);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst$76,
      0,
      cst_src_deferred_unit_tests_ml$2,
      3,
      0,
      1071,
      _x6_);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$181);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Async_kernel_Deferred_unit_tests=[0];
    caml_register_global
     (2715,
      Async_kernel_Deferred_unit_tests,
      "Async_kernel__Deferred_unit_tests");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_async_kernel$182);
    caml_call1
     (Expect_test_collector[4][1],cst_src_deferred_sequence_unit_tests_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$183,cst$77);
    var numbers=caml_call5(Core_kernel_Sequence[74],0,0,0,1,100);
    function assert_sequences_equal(s1,s2)
     {var _Bu_=caml_call1(Core_kernel_Sequence[17],s2);
      if(caml_equal(caml_call1(Core_kernel_Sequence[17],s1),_Bu_))return 0;
      throw [0,Assert_failure,_x8_]}
    function deferred_result(d)
     {var deferred_result=[0,0];
      upon$1(d,function(v){deferred_result[1] = [0,v];return 0});
      stabilize$0(0);
      return caml_call4(Core_kernel_Option[52],0,0,0,deferred_result[1])}
    var _x9_=Async_kernel_Deferred_sequence[2];
    function _x__(param)
     {var init=0;
      function f(acc,v){return v + acc | 0}
      function _Bt_(acc,v){return caml_call1(_jc_,v + acc | 0)}
      var
       deferred_acc=
        deferred_result
         (caml_call3(Async_kernel_Deferred_sequence[2],numbers,init,_Bt_));
      if(caml_call3(Core_kernel_Sequence[8],numbers,init,f) === deferred_acc)
       return 0;
      throw [0,Assert_failure,_x$_]}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_assert_Sequence_fold_numbers_init_f_de,
      0,
      cst_src_deferred_sequence_unit_tests_ml$0,
      24,
      0,
      245,
      _x__);
    var _ya_=Async_kernel_Deferred_sequence[1];
    function _yb_(param)
     {var init=0;
      function f(i,acc,v){return i + acc | 0}
      function _Bs_(i,acc,v){return caml_call1(_jc_,i + acc | 0)}
      var
       deferred_acc=
        deferred_result
         (caml_call3(Async_kernel_Deferred_sequence[1],numbers,init,_Bs_));
      if(caml_call3(Core_kernel_Sequence[21],numbers,init,f) === deferred_acc)
       return 0;
      throw [0,Assert_failure,_yc_]}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_assert_Sequence_foldi_numbers_init_f_d,
      0,
      cst_src_deferred_sequence_unit_tests_ml$1,
      36,
      0,
      254,
      _yb_);
    var _yd_=Async_kernel_Deferred_sequence[18];
    function _ye_(param)
     {function f(i){return 0 === caml_call2(Core_kernel[337],i,2)?1:0}
      function _Br_(i){return caml_call1(_jc_,f(i))}
      var
       deferred_result$0=
        deferred_result
         (caml_call3(Async_kernel_Deferred_sequence[18],0,numbers,_Br_));
      return assert_sequences_equal
              (caml_call2(Core_kernel_Sequence[52],numbers,f),
               deferred_result$0)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_assert_sequences_equal_Sequence_filter_numbe,
      0,
      cst_src_deferred_sequence_unit_tests_ml$2,
      48,
      0,
      229,
      _ye_);
    var _yf_=Async_kernel_Deferred_sequence[19];
    function _yg_(param)
     {function f(i,j)
       {var _Bq_=0 === caml_call2(Core_kernel[337],j,3)?1:0;
        return (0 === caml_call2(Core_kernel[337],i,2)?1:0) === _Bq_?1:0}
      function _Bp_(i,j){return caml_call1(_jc_,f(i,j))}
      var
       deferred_result$0=
        deferred_result
         (caml_call3(Async_kernel_Deferred_sequence[19],0,numbers,_Bp_));
      return assert_sequences_equal
              (caml_call2(Core_kernel_Sequence[51],numbers,f),
               deferred_result$0)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_assert_sequences_equal_Sequence_filteri_numb,
      0,
      cst_src_deferred_sequence_unit_tests_ml$3,
      59,
      0,
      253,
      _yg_);
    var _yh_=Async_kernel_Deferred_sequence[20];
    function _yi_(param)
     {function f(i){return 0 === caml_call2(Core_kernel[337],i,2)?[0,i]:0}
      function _Bo_(i){return caml_call1(_jc_,f(i))}
      var
       deferred_result$0=
        deferred_result
         (caml_call3(Async_kernel_Deferred_sequence[20],0,numbers,_Bo_));
      return assert_sequences_equal
              (caml_call2(Core_kernel_Sequence[76],numbers,f),
               deferred_result$0)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_assert_sequences_equal_Sequence_filter_map_n,
      0,
      cst_src_deferred_sequence_unit_tests_ml$4,
      70,
      0,
      264,
      _yi_);
    var _yj_=Async_kernel_Deferred_sequence[21];
    function _yk_(param)
     {function f(i,j)
       {var _Bn_=0 === caml_call2(Core_kernel[337],j,3)?1:0;
        return (0 === caml_call2(Core_kernel[337],i,2)?1:0) === _Bn_?[0,j]:0}
      function _Bm_(i,j){return caml_call1(_jc_,f(i,j))}
      var
       deferred_result$0=
        deferred_result
         (caml_call3(Async_kernel_Deferred_sequence[21],0,numbers,_Bm_));
      return assert_sequences_equal
              (caml_call2(Core_kernel_Sequence[77],numbers,f),
               deferred_result$0)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_assert_sequences_equal_Sequence_filter_mapi,
      0,
      cst_src_deferred_sequence_unit_tests_ml$5,
      81,
      0,
      288,
      _yk_);
    var _yl_=Async_kernel_Deferred_sequence[22];
    function _ym_(param)
     {function f(i)
       {function _Bl_(j){return i + j | 0}
        return caml_call2(Core_kernel_Sequence[75],i,_Bl_)}
      function _Bk_(i){return caml_call1(_jc_,f(i))}
      var
       deferred_result$0=
        deferred_result
         (caml_call3(Async_kernel_Deferred_sequence[22],0,numbers,_Bk_));
      return assert_sequences_equal
              (caml_call2(Core_kernel_Sequence[63],numbers,f),
               deferred_result$0)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_assert_sequences_equal_Sequence_concat_map_n,
      0,
      cst_src_deferred_sequence_unit_tests_ml$6,
      92,
      0,
      263,
      _ym_);
    var _yn_=Async_kernel_Deferred_sequence[23];
    function _yo_(param)
     {function f(i,j)
       {function _Bj_(k){return ((100 * i | 0) + (10 * j | 0) | 0) + k | 0}
        return caml_call2(Core_kernel_Sequence[75],j,_Bj_)}
      function _Bi_(i,j){return caml_call1(_jc_,f(i,j))}
      var
       deferred_result$0=
        deferred_result
         (caml_call3(Async_kernel_Deferred_sequence[23],0,numbers,_Bi_));
      return assert_sequences_equal
              (caml_call2(Core_kernel_Sequence[64],numbers,f),
               deferred_result$0)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_assert_sequences_equal_Sequence_concat_mapi,
      0,
      cst_src_deferred_sequence_unit_tests_ml$7,
      103,
      0,
      286,
      _yo_);
    var _yp_=Async_kernel_Deferred_sequence[16];
    function _yq_(param)
     {function f(i){return i * 2 | 0}
      function _Bg_(i){return caml_call1(_jc_,i * 2 | 0)}
      var
       serial_result=
        deferred_result
         (caml_call3(Async_kernel_Deferred_sequence[16],_yr_,numbers,_Bg_));
      function _Bh_(i){return caml_call1(_jc_,i * 2 | 0)}
      var
       parallel_result=
        deferred_result
         (caml_call3(Async_kernel_Deferred_sequence[16],_ys_,numbers,_Bh_));
      assert_sequences_equal
       (caml_call2(Core_kernel_Sequence[32],numbers,f),serial_result);
      return assert_sequences_equal
              (caml_call2(Core_kernel_Sequence[32],numbers,f),parallel_result)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_assert_sequences_equal_Sequence_map_numbers,
      0,
      cst_src_deferred_sequence_unit_tests_ml$8,
      114,
      0,
      431,
      _yq_);
    var _yt_=Async_kernel_Deferred_sequence[17];
    function _yu_(param)
     {function f(i,j)
       {return caml_call2(Core_kernel[337],i,3) + (j * 2 | 0) | 0}
      function _Be_(i,j){return caml_call1(_jc_,f(i,j))}
      var
       serial_result=
        deferred_result
         (caml_call3(Async_kernel_Deferred_sequence[17],_yv_,numbers,_Be_));
      function _Bf_(i,j){return caml_call1(_jc_,f(i,j))}
      var
       parallel_result=
        deferred_result
         (caml_call3(Async_kernel_Deferred_sequence[17],_yw_,numbers,_Bf_));
      assert_sequences_equal
       (caml_call2(Core_kernel_Sequence[50],numbers,f),serial_result);
      return assert_sequences_equal
              (caml_call2(Core_kernel_Sequence[50],numbers,f),parallel_result)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_assert_sequences_equal_Sequence_mapi_numbers,
      0,
      cst_src_deferred_sequence_unit_tests_ml$9,
      130,
      0,
      453,
      _yu_);
    var _yx_=Async_kernel_Deferred_sequence[14];
    function _yy_(param)
     {var side_effect=[0,0];
      function _Bc_(param){side_effect[1]++;return caml_call1(_jc_,0)}
      deferred_result
       (caml_call3(Async_kernel_Deferred_sequence[14],0,numbers,_Bc_));
      if(0 === side_effect[1])throw [0,Assert_failure,_yz_];
      function _Bd_(param){side_effect[1] += -1;return 0}
      caml_call2(Core_kernel_Sequence[7],numbers,_Bd_);
      if(0 === side_effect[1])return 0;
      throw [0,Assert_failure,_yA_]}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_deferred_result_Deferred_Sequence_iter_num,
      0,
      cst_src_deferred_sequence_unit_tests_ml$10,
      146,
      0,
      272,
      _yy_);
    var _yB_=Async_kernel_Deferred_sequence[15];
    function _yC_(param)
     {var side_effect=[0,0];
      function _Ba_(i,param)
       {side_effect[1] = side_effect[1] + i | 0;return caml_call1(_jc_,0)}
      deferred_result
       (caml_call3(Async_kernel_Deferred_sequence[15],0,numbers,_Ba_));
      if(0 === side_effect[1])throw [0,Assert_failure,_yD_];
      function _Bb_(i,param){side_effect[1] = side_effect[1] - i | 0;return 0}
      caml_call2(Core_kernel_Sequence[22],numbers,_Bb_);
      if(0 === side_effect[1])return 0;
      throw [0,Assert_failure,_yE_]}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_deferred_result_Deferred_Sequence_iteri_nu,
      0,
      cst_src_deferred_sequence_unit_tests_ml$11,
      159,
      0,
      308,
      _yC_);
    var
     _yF_=Async_kernel_Deferred_sequence[11],
     _yG_=Async_kernel_Deferred_sequence[12],
     _yH_=Async_kernel_Deferred_sequence[3],
     _yI_=Async_kernel_Deferred_sequence[4],
     _yJ_=Async_kernel_Deferred_sequence[5],
     _yK_=Async_kernel_Deferred_sequence[6],
     _yL_=Async_kernel_Deferred_sequence[9],
     _yM_=Async_kernel_Deferred_sequence[7],
     _yN_=Async_kernel_Deferred_sequence[10],
     _yO_=Async_kernel_Deferred_sequence[8],
     _yP_=Async_kernel_Deferred_sequence[13];
    function _yQ_(param)
     {var n=0;
      for(;;)
       {var
         got=
          deferred_result
           (caml_call1(_yF_,caml_call2(Core_kernel_Sequence[75],n,_jc_))),
         _As_=function(_A$_){return _A$_},
         expect=caml_call2(Core_kernel_Sequence[75],n,_As_),
         sexpifier=caml_call1(Core_kernel_Sequence[3],Core_kernel[455]),
         equal=0,
         message=0,
         here=0,
         comparator=
          function(a_001,b_002)
           {return caml_call3
                    (Core_kernel_Sequence[2],Core_kernel[451],a_001,b_002)};
        caml_call8
         (Ppx_assert_lib_Runtime[3],
          pos$38,
          sexpifier,
          comparator,
          here,
          message,
          equal,
          expect,
          got);
        var
         _At_=function(param){return caml_call1(_jc_,0)},
         got$0=
          deferred_result
           (caml_call1(_yG_,caml_call2(Core_kernel_Sequence[75],n,_At_))),
         sexpifier$0=Core_kernel[598],
         comparator$0=Core_kernel[594];
        caml_call8
         (Ppx_assert_lib_Runtime[3],
          pos$39,
          sexpifier$0,
          comparator$0,
          0,
          0,
          0,
          0,
          got$0);
        var
         _Au_=
          function(n)
            {return function(i){return caml_call1(_jc_,i === (n - 1 | 0)?1:0)}}
           (n),
         _Av_=function(_A__){return _A__},
         got$1=
          deferred_result
           (caml_call2(_yH_,caml_call2(Core_kernel_Sequence[75],n,_Av_),_Au_)),
         _Aw_=0 === n?0:[0,n - 1 | 0],
         sexpifier$1=caml_call1(Core_kernel[542],Core_kernel[455]),
         equal$0=0,
         message$0=0,
         here$0=0,
         comparator$1=
          function(a_007,b_008)
           {return caml_call3(Core_kernel[539],Core_kernel[451],a_007,b_008)};
        caml_call8
         (Ppx_assert_lib_Runtime[3],
          pos$40,
          sexpifier$1,
          comparator$1,
          here$0,
          message$0,
          equal$0,
          _Aw_,
          got$1);
        var
         _Ax_=
          function(n)
            {return function(i,j)
              {return caml_call1(_jc_,n <= (i + j | 0)?1:0)}}
           (n),
         _Ay_=function(_A9_){return _A9_},
         got$2=
          deferred_result
           (caml_call2(_yI_,caml_call2(Core_kernel_Sequence[75],n,_Ay_),_Ax_)),
         _Az_=1 < n?[0,[0,n - (n / 2 | 0) | 0,n - (n / 2 | 0) | 0]]:0,
         equal$1=0,
         message$1=0,
         here$1=0,
         _AA_=
          function(param)
           {var
             v1=param[2],
             v0=param[1],
             v0$0=caml_call1(Core_kernel[455],v0),
             v1$0=caml_call1(Core_kernel[455],v1);
            return [1,[0,v0$0,[0,v1$0,0]]]},
         sexpifier$2=caml_call1(Core_kernel[542],_AA_),
         comparator$2=
          function(a_011,b_012)
           {function _A8_(a_013,b_014)
             {var
               t_016=a_013[2],
               t_015=a_013[1],
               t_018=b_014[2],
               t_017=b_014[1],
               n=caml_call2(Core_kernel[451],t_015,t_017);
              return 0 === n?caml_call2(Core_kernel[451],t_016,t_018):n}
            return caml_call3(Core_kernel[539],_A8_,a_011,b_012)};
        caml_call8
         (Ppx_assert_lib_Runtime[3],
          pos$41,
          sexpifier$2,
          comparator$2,
          here$1,
          message$1,
          equal$1,
          _Az_,
          got$2);
        var
         _AB_=
          function(n)
            {return function(i)
              {var _A7_=i === (n - 1 | 0)?_yR_:0;return caml_call1(_jc_,_A7_)}}
           (n),
         _AC_=function(_A6_){return _A6_},
         got$3=
          deferred_result
           (caml_call2(_yJ_,caml_call2(Core_kernel_Sequence[75],n,_AC_),_AB_)),
         _AD_=0 === n?0:_yS_,
         sexpifier$3=caml_call1(Core_kernel[542],Core_kernel[557]),
         equal$2=0,
         message$2=0,
         here$2=0,
         comparator$3=
          function(a_019,b_020)
           {return caml_call3(Core_kernel[539],Core_kernel[553],a_019,b_020)};
        caml_call8
         (Ppx_assert_lib_Runtime[3],
          pos$42,
          sexpifier$3,
          comparator$3,
          here$2,
          message$2,
          equal$2,
          _AD_,
          got$3);
        var
         _AE_=
          function(n)
            {return function(i,j)
              {var _A5_=(i + j | 0) === n?[0,j]:0;
               return caml_call1(_jc_,_A5_)}}
           (n),
         _AF_=function(_A4_){return _A4_},
         got$4=
          deferred_result
           (caml_call2(_yK_,caml_call2(Core_kernel_Sequence[75],n,_AF_),_AE_));
        if(0 === n)
         var switch$0=0;
        else
         if(1 === caml_call2(Core_kernel[337],n,2))
          var switch$0=0;
         else
          var _AG_=[0,n / 2 | 0],switch$0=1;
        if(! switch$0)var _AG_=0;
        var
         sexpifier$4=caml_call1(Core_kernel[542],Core_kernel[455]),
         equal$3=0,
         message$3=0,
         here$3=0,
         comparator$4=
          function(a_023,b_024)
           {return caml_call3(Core_kernel[539],Core_kernel[451],a_023,b_024)};
        caml_call8
         (Ppx_assert_lib_Runtime[3],
          pos$43,
          sexpifier$4,
          comparator$4,
          here$3,
          message$3,
          equal$3,
          _AG_,
          got$4);
        var
         _AH_=function(i){return caml_call1(_jc_,i < 2?1:0)},
         _AI_=function(_A3_){return _A3_},
         got$5=
          deferred_result
           (caml_call2(_yL_,caml_call2(Core_kernel_Sequence[75],n,_AI_),_AH_)),
         expect$0=n <= 2?1:0,
         sexpifier$5=Core_kernel[410],
         comparator$5=Core_kernel[406];
        caml_call8
         (Ppx_assert_lib_Runtime[3],
          pos$44,
          sexpifier$5,
          comparator$5,
          0,
          0,
          0,
          expect$0,
          got$5);
        var
         _AJ_=
          function(i)
           {return caml_call1(_jc_,2 === caml_call2(Core_kernel[337],i,3)?1:0)},
         _AK_=function(_A2_){return _A2_},
         got$6=
          deferred_result
           (caml_call2(_yM_,caml_call2(Core_kernel_Sequence[75],n,_AK_),_AJ_)),
         expect$1=3 <= n?1:0,
         sexpifier$6=Core_kernel[410],
         comparator$6=Core_kernel[406];
        caml_call8
         (Ppx_assert_lib_Runtime[3],
          pos$45,
          sexpifier$6,
          comparator$6,
          0,
          0,
          0,
          expect$1,
          got$6);
        var
         _AL_=
          function(n)
            {return function(i,j)
              {return caml_call1(_jc_,(i + j | 0) !== n?1:0)}}
           (n),
         _AM_=function(_A1_){return _A1_},
         got$7=
          deferred_result
           (caml_call2(_yN_,caml_call2(Core_kernel_Sequence[75],n,_AM_),_AL_)),
         _AN_=0 === n?1:0,
         _AO_=_AN_ || (1 === caml_call2(Core_kernel[337],n,2)?1:0),
         sexpifier$7=Core_kernel[410],
         comparator$7=Core_kernel[406];
        caml_call8
         (Ppx_assert_lib_Runtime[3],
          pos$46,
          sexpifier$7,
          comparator$7,
          0,
          0,
          0,
          _AO_,
          got$7);
        var
         _AP_=
          function(n)
            {return function(i,j)
              {return caml_call1(_jc_,(i + j | 0) === n?1:0)}}
           (n),
         _AQ_=function(_A0_){return _A0_},
         got$8=
          deferred_result
           (caml_call2(_yO_,caml_call2(Core_kernel_Sequence[75],n,_AQ_),_AP_)),
         _AR_=0 !== n?1:0,
         _AS_=_AR_?0 === caml_call2(Core_kernel[337],n,2)?1:0:_AR_,
         sexpifier$8=Core_kernel[410],
         comparator$8=Core_kernel[406];
        caml_call8
         (Ppx_assert_lib_Runtime[3],
          pos$47,
          sexpifier$8,
          comparator$8,
          0,
          0,
          0,
          _AS_,
          got$8);
        var
         got$9=deferred_result(caml_call3(_yP_,0,n,_jc_)),
         _AT_=function(_AZ_){return _AZ_},
         expect$2=caml_call2(Core_kernel_Sequence[75],n,_AT_),
         sexpifier$9=caml_call1(Core_kernel_Sequence[3],Core_kernel[455]),
         equal$4=0,
         message$4=0,
         here$4=0,
         comparator$9=
          function(a_035,b_036)
           {return caml_call3
                    (Core_kernel_Sequence[2],Core_kernel[451],a_035,b_036)};
        caml_call8
         (Ppx_assert_lib_Runtime[3],
          pos$48,
          sexpifier$9,
          comparator$9,
          here$4,
          message$4,
          equal$4,
          expect$2,
          got$9);
        var
         _AU_=function(i){return caml_call1(_jc_,i - 1 | 0)},
         _AV_=function(_AY_){return _AY_},
         got$10=
          deferred_result
           (caml_call3
             (_yp_,0,caml_call2(Core_kernel_Sequence[75],n,_AV_),_AU_)),
         _AW_=function(i){return i - 1 | 0},
         expect$3=caml_call2(Core_kernel_Sequence[75],n,_AW_),
         sexpifier$10=caml_call1(Core_kernel_Sequence[3],Core_kernel[455]),
         equal$5=0,
         message$5=0,
         here$5=0,
         comparator$10=
          function(a_039,b_040)
           {return caml_call3
                    (Core_kernel_Sequence[2],Core_kernel[451],a_039,b_040)};
        caml_call8
         (Ppx_assert_lib_Runtime[3],
          pos$49,
          sexpifier$10,
          comparator$10,
          here$5,
          message$5,
          equal$5,
          expect$3,
          got$10);
        var _AX_=n + 1 | 0;
        if(5 !== n){var n=_AX_;continue}
        return 0}}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_for_n_0_to_5_do_test_result_int_Seque,
      0,
      cst_src_deferred_sequence_unit_tests_ml$12,
      182,
      0,
      1977,
      _yQ_);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$184);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Async_kernel_Deferred_sequence_unit_tests=
      [0,
       _ya_,
       _x9_,
       _yH_,
       _yI_,
       _yJ_,
       _yK_,
       _yM_,
       _yO_,
       _yL_,
       _yN_,
       _yF_,
       _yG_,
       _yP_,
       _yx_,
       _yB_,
       _yp_,
       _yt_,
       _yd_,
       _yf_,
       _yh_,
       _yj_,
       _yl_,
       _yn_];
    caml_register_global
     (2716,
      Async_kernel_Deferred_sequence_unit_tests,
      "Async_kernel__Deferred_sequence_unit_tests");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_async_kernel$185);
    caml_call1(Expect_test_collector[4][1],cst_src_async_quickcheck_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$186,cst$78);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$187);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Async_kernel_Async_quickcheck_intf=[0];
    caml_register_global
     (2717,
      Async_kernel_Async_quickcheck_intf,
      "Async_kernel__Async_quickcheck_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_async_kernel$188);
    caml_call1(Expect_test_collector[4][1],cst_src_async_quickcheck_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$189,cst$79);
    var Generator=0,Observer=0,Shrinker=0;
    function Configure(Config)
     {var
       include=caml_call1(Core_kernel_Quickcheck[19],Config),
       default_seed=include[1],
       default_sizes=include[2],
       default_trial_count=include[3],
       default_can_generate_trial_count=include[4],
       default_shrink_attempts=include[5],
       random_value=include[6],
       iter=include[7],
       test=include[8],
       test_or_error=include[9],
       test_can_generate=include[10],
       test_distinct_values=include[11],
       random_sequence=include[12];
      function async_test(seed,opt,sexp_of,gen,f)
       {if(opt)var sth=opt[1],trials=sth;else var trials=default_trial_count;
        if(sexp_of)
         var
          sexp_of_arg=sexp_of[1],
          f_with_sexp=
           function(x)
            {function _Ap_(param)
              {if(0 === param[0])return 0;
               var
                e=param[1],
                _Ar_=
                 caml_call4
                  (Core_kernel_Error[17],e,cst_random_input,x,sexp_of_arg);
               return caml_call1(Core_kernel_Error[23],_Ar_)}
             var
              _Aq_=
               try_with$1(0,0,0,function(param){return caml_call1(f,x)});
             return caml_call2(_nY_[2],_Aq_,_Ap_)};
        else
         var f_with_sexp=f;
        function _Al_(param,x,k)
         {var _Ao_=caml_call1(f_with_sexp,x);
          return caml_call2(_nY_[1],_Ao_,k)}
        var
         _Am_=caml_call3(random_sequence,seed,0,gen),
         _An_=caml_call2(Core_kernel_Sequence[80],_Am_,trials);
        return caml_call4(Core_kernel_Sequence[99],_An_,0,_Al_,return$0)}
      return [0,
              default_seed,
              default_sizes,
              default_trial_count,
              default_can_generate_trial_count,
              default_shrink_attempts,
              random_value,
              iter,
              test,
              test_or_error,
              test_can_generate,
              test_distinct_values,
              random_sequence,
              async_test]}
    var
     include$36=
      Configure
       ([0,
         Core_kernel_Quickcheck[7],
         Core_kernel_Quickcheck[8],
         Core_kernel_Quickcheck[9],
         Core_kernel_Quickcheck[10],
         Core_kernel_Quickcheck[11]]),
     _yT_=include$36[1],
     _yU_=include$36[2],
     _yV_=include$36[3],
     _yW_=include$36[4],
     _yX_=include$36[5],
     _yY_=include$36[6],
     _yZ_=include$36[7],
     _y0_=include$36[8],
     _y1_=include$36[9],
     _y2_=include$36[10],
     _y3_=include$36[11],
     _y4_=include$36[12],
     _y5_=include$36[13];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$190);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Async_kernel_Async_quickcheck=
      [0,
       Generator,
       Observer,
       Shrinker,
       _yT_,
       _yU_,
       _yV_,
       _yW_,
       _yX_,
       _yY_,
       _yZ_,
       _y0_,
       _y1_,
       _y2_,
       _y3_,
       _y4_,
       _y5_,
       Configure];
    caml_register_global
     (2719,Async_kernel_Async_quickcheck,"Async_kernel__Async_quickcheck");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_async_kernel$191);
    caml_call1(Expect_test_collector[4][1],cst_src_async_condition_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$192,cst$80);
    function sexp_of_t$61(of_a,param)
     {var v_waits=param[1],bnds=0;
      function _Aj_(_Ak_){return sexp_of_t$32(of_a,_Ak_)}
      var
       arg=caml_call2(Core_kernel_Queue[11],_Aj_,v_waits),
       bnds$0=[0,[1,[0,_y6_,[0,arg,0]]],bnds];
      return [1,bnds$0]}
    function create$25(param)
     {return [0,caml_call2(Core_kernel_Queue[60],0,0)]}
    function wait$1(t)
     {return create$13
              (function(ivar)
                {return caml_call2(Core_kernel_Queue[40],t[1],ivar)})}
    function signal(t,a)
     {function _Ah_(ivar){return fill(ivar,a)}
      var _Ai_=caml_call1(Core_kernel_Queue[42],t[1]);
      return caml_call2(Core_kernel_Option[18],_Ai_,_Ah_)}
    function broadcast$0(t,a)
     {function _Ag_(ivar){return fill(ivar,a)}
      caml_call2(Core_kernel_Queue[15],t[1],_Ag_);
      return caml_call1(Core_kernel_Queue[46],t[1])}
    function _y7_(param)
     {function _z0_(param)
       {var cond=create$25(0),consumer=wait$1(cond);
        if(is_determined(consumer))throw [0,Assert_failure,_y8_];
        stabilize$0(0);
        if(is_determined(consumer))throw [0,Assert_failure,_y9_];
        signal(cond,0);
        stabilize$0(0);
        if(is_determined(consumer))return 0;
        throw [0,Assert_failure,_y__]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_assert_not_Deferred_is_determined_consumer,
        0,
        cst_src_async_condition_ml$0,
        27,
        4,
        300,
        _z0_);
      function _z1_(param)
       {var cond=create$25(0);
        signal(cond,0);
        var consumer=wait$1(cond),consumer2=wait$1(cond);
        if(is_determined(consumer))throw [0,Assert_failure,_y$_];
        stabilize$0(0);
        if(is_determined(consumer))throw [0,Assert_failure,_za_];
        signal(cond,0);
        stabilize$0(0);
        if(is_determined(consumer))
         {if(is_determined(consumer2))throw [0,Assert_failure,_zb_];return 0}
        throw [0,Assert_failure,_zc_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_signal_cond_let_consumer_wait_cond_in,
        0,
        cst_src_async_condition_ml$1,
        38,
        4,
        412,
        _z1_);
      function _z2_(param)
       {var cond=create$25(0),n=10;
        function _Aa_(param){return wait$1(cond)}
        var consumers=caml_call2(Core_kernel_Array[36],n,_Aa_);
        stabilize$0(0);
        function _Ab_(consumer)
         {if(is_determined(consumer))throw [0,Assert_failure,_zd_];return 0}
        caml_call2(Core_kernel_Array[19],consumers,_Ab_);
        signal(cond,0);
        stabilize$0(0);
        if(is_determined(caml_check_bound(consumers,0)[1]))
         {var i$1=1;
          for(;;)
           {if(is_determined(caml_check_bound(consumers,i$1)[i$1 + 1]))
             throw [0,Assert_failure,_zg_];
            var _Af_=i$1 + 1 | 0;
            if(9 !== i$1){var i$1=_Af_;continue}
            var for$0=1;
            for(;;)
             {signal(cond,0);
              var _Ae_=for$0 + 1 | 0;
              if(5 !== for$0){var for$0=_Ae_;continue}
              stabilize$0(0);
              var i$0=1;
              for(;;)
               {if(is_determined(caml_check_bound(consumers,i$0)[i$0 + 1]))
                 {var _Ad_=i$0 + 1 | 0;
                  if(5 !== i$0){var i$0=_Ad_;continue}
                  var i=6;
                  for(;;)
                   {if(is_determined(caml_check_bound(consumers,i)[i + 1]))
                     throw [0,Assert_failure,_ze_];
                    var _Ac_=i + 1 | 0;
                    if(9 !== i){var i=_Ac_;continue}
                    return 0}}
                throw [0,Assert_failure,_zf_]}}}}
        throw [0,Assert_failure,_zh_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_Array_iter_consumers_f_fun,
        0,
        cst_src_async_condition_ml$2,
        52,
        4,
        732,
        _z2_);
      function determined(def,value)
       {var match=peek$0(def);
        if(match){var v=match[1];return caml_equal(value,v)}
        return 0}
      function _z3_(param)
       {var cond=create$25(0),n=10;
        function _z9_(param){return wait$1(cond)}
        var consumers=caml_call2(Core_kernel_Array[36],n,_z9_);
        stabilize$0(0);
        function _z__(consumer)
         {if(is_determined(consumer))throw [0,Assert_failure,_zi_];return 0}
        caml_call2(Core_kernel_Array[19],consumers,_z__);
        broadcast$0(cond,cst_foo$26);
        stabilize$0(0);
        var i=0;
        for(;;)
         {if(determined(caml_check_bound(consumers,i)[i + 1],cst_foo$27))
           {var _z$_=i + 1 | 0;if(9 !== i){var i=_z$_;continue}return 0}
          throw [0,Assert_failure,_zj_]}}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_Array_iter_consumers_f_fun$0,
        0,
        cst_src_async_condition_ml$3,
        82,
        4,
        392,
        _z3_);
      function _z4_(param)
       {var cond=create$25(0),n=10;
        function _z5_(param){return wait$1(cond)}
        var consumers=caml_call2(Core_kernel_Array[36],n,_z5_);
        stabilize$0(0);
        function _z6_(consumer)
         {if(is_determined(consumer))throw [0,Assert_failure,_zk_];return 0}
        caml_call2(Core_kernel_Array[19],consumers,_z6_);
        var i$0=0;
        for(;;)
         {signal(cond,i$0);
          var _z8_=i$0 + 1 | 0;
          if(9 !== i$0){var i$0=_z8_;continue}
          stabilize$0(0);
          var i=0;
          for(;;)
           {if(determined(caml_check_bound(consumers,i)[i + 1],i))
             {var _z7_=i + 1 | 0;if(9 !== i){var i=_z7_;continue}return 0}
            throw [0,Assert_failure,_zl_]}}}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_Array_iter_consumers_f_fun$1,
        0,
        cst_src_async_condition_ml$4,
        96,
        4,
        424,
        _z4_);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst$81,
      0,
      cst_src_async_condition_ml$5,
      22,
      0,
      2534,
      _y7_);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$193);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Async_kernel_Async_condition=
      [0,sexp_of_t$61,create$25,signal,broadcast$0,wait$1];
    caml_register_global
     (2720,Async_kernel_Async_condition,"Async_kernel__Async_condition");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_async_kernel$194);
    caml_call1(Expect_test_collector[4][1],cst_src_async_gc_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$195,cst$82);
    var
     Stat=include$26[1],
     Control=include$26[2],
     print_stat=include$26[3],
     allocated_bytes=include$26[4],
     keep_alive=include$26[5],
     tune=include$26[6],
     Allocation_policy=include$26[7],
     disable_compaction=include$26[8];
    function add_finalizer$0(heap_block,f)
     {return add_finalizer(t$5(0),heap_block,f)}
    function add_finalizer_exn$0(heap_block,f)
     {return add_finalizer_exn(t$5(0),heap_block,f)}
    function add_finalizer_last$0(heap_block,f)
     {return add_finalizer_last(t$5(0),heap_block,f)}
    function add_finalizer_last_exn$0(heap_block,f)
     {return add_finalizer_last_exn(t$5(0),heap_block,f)}
    var sexp_of_t$62=include$26[9][6][1];
    function create$26(f){return create_alarm(t$5(0),f)}
    var delete$0=include$26[9][6][3];
    function _zm_(param)
     {function stabilize(param)
       {runtime.caml_gc_full_major(0);return stabilize$0(0)}
      function _zY_(param)
       {var x=[0,0],r=[0,13];
        add_finalizer_exn$0(x,function(z){r[1] = z[1];return 0});
        stabilize(0);
        if(13 === r[1])
         {x[1] = 17;
          stabilize(0);
          if(17 === r[1])return 0;
          throw [0,Assert_failure,_zn_]}
        throw [0,Assert_failure,_zo_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_add_finalizer_exn_x_fun_z_r_z_sta,
        0,
        cst_src_async_gc_ml$0,
        36,
        4,
        216,
        _zY_);
      function _zZ_(param)
       {var r=[0,0],alarm=create$26(function(param){r[1] = 1;return 0});
        stabilize(0);
        if(r[1])
         {r[1] = 0;
          stabilize(0);
          if(r[1])
           {caml_call1(delete$0,alarm);
            r[1] = 0;
            stabilize(0);
            if(r[1])throw [0,Assert_failure,_zp_];
            return 0}
          throw [0,Assert_failure,_zq_]}
        throw [0,Assert_failure,_zr_]}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_stabilize_assert_r_r_false_stabil,
        0,
        cst_src_async_gc_ml$1,
        47,
        4,
        282,
        _zZ_);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst$83,
      _zs_,
      cst_src_async_gc_ml$2,
      28,
      0,
      681,
      _zm_);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$196);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Async_kernel_Async_gc=
      [0,
       Stat,
       Control,
       print_stat,
       allocated_bytes,
       keep_alive,
       tune,
       Allocation_policy,
       disable_compaction,
       add_finalizer$0,
       add_finalizer_exn$0,
       add_finalizer_last$0,
       add_finalizer_last_exn$0,
       [0,sexp_of_t$62,create$26,delete$0]];
    caml_register_global(2721,Async_kernel_Async_gc,"Async_kernel__Async_gc");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_async_kernel$197);
    caml_call1(Expect_test_collector[4][1],cst_src_async_invariant_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$198,cst$84);
    var Async=[0];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$199);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Async_kernel_Async_invariant_intf=[0,Async];
    caml_register_global
     (2722,
      Async_kernel_Async_invariant_intf,
      "Async_kernel__Async_invariant_intf");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_async_kernel$200);
    caml_call1(Expect_test_collector[4][1],cst_src_async_invariant_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$201,cst$85);
    var _zt_=include$11[1],_zu_=include$11[2];
    function invariant$24(here,t,sexp_of_t,f)
     {function _zS_(param)
       {if(0 === param[0])return 0;
        var
         exn=param[1],
         _zU_=[0,caml_call1(sexp_of_t,t),0],
         _zV_=[0,[1,[0,_zv_,[0,caml_call1(Core_kernel[614],exn),0]]],_zU_],
         _zW_=[0,caml_call1(Core_kernel_Source_code_position[1],here),_zV_],
         _zX_=
          [1,[0,caml_call1(Sexplib0_Sexp_conv[7],cst_invariant_failed),_zW_]];
        return caml_call1(Core_kernel[364],_zX_)}
      var _zT_=try_with(0,0,0,_zw_,0,0,f);
      return caml_call2(include$20[4][3],_zT_,_zS_)}
    function check_field(t,f,wait_for_previous,field)
     {function _zL_(param)
       {function _zM_(param)
         {if(0 === param[0])return 0;
          var
           exn=param[1],
           _zO_=[0,[1,[0,_zx_,[0,caml_call1(Core_kernel[614],exn),0]]],0],
           _zP_=caml_call1(Base_Field[2],field),
           _zQ_=[0,[1,[0,_zy_,[0,caml_call1(Core_kernel[557],_zP_),0]]],_zO_],
           _zR_=
            [1,
             [0,caml_call1(Sexplib0_Sexp_conv[7],cst_problem_with_field),_zQ_]];
          return caml_call1(Core_kernel[364],_zR_)}
        var
         _zN_=
          try_with
           (0,
            0,
            0,
            _zz_,
            0,
            0,
            function(param)
             {return caml_call1(f,caml_call2(Base_Field[3],field,t))});
        return caml_call2(include$20[4][3],_zN_,_zM_)}
      return caml_call2(include$20[4][2],wait_for_previous,_zL_)}
    var Async$0=[0,invariant$24,check_field];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$202);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var Async_kernel_Async_invariant=[0,_zt_,_zu_,Async$0];
    caml_register_global
     (2723,Async_kernel_Async_invariant,"Async_kernel__Async_invariant");
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][1],cst_async_kernel$203);
    caml_call1(Expect_test_collector[4][1],cst_src_async_kernel_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_async_kernel$204,cst$86);
    var
     Deferred$12=
      [0,
       invariant$9,
       _wn_,
       _wo_,
       Monad_infix$1,
       bind$8,
       return$6,
       map$31,
       join$1,
       ignore_m$1,
       all$7,
       _wr_,
       _wr_,
       Let_syntax,
       Infix$0,
       any$0,
       any_unit$0,
       both$2,
       create$13,
       don_t_wait_for,
       ignore,
       is_determined,
       never,
       ok$0,
       peek$0,
       unit,
       upon$2,
       value_exn$0,
       repeat_until_finished$0,
       List$1,
       Or_error$0],
     return$10=Let_syntax[1],
     Let_syntax$0=Let_syntax[4],
     Use_eager_deferred=
      [0,
       Deferred$12,
       return$10,
       Let_syntax[2],
       Let_syntax[3],
       Let_syntax$0,
       upon$2,
       Infix$0[3]],
     after$5=Async_kernel_Clock_ns[4],
     at$7=Async_kernel_Clock_ns[3],
     every$3=Async_kernel_Clock_ns[10],
     with_timeout$1=Async_kernel_Clock_ns[5],
     return$11=include$20[1],
     Let_syntax$1=include$20[4],
     Async_kernel_private=[0,0,0,0,0],
     Limiter_in_this_directory=0,
     Async_kernel_config=0,
     Async_kernel_persistent_connection=0,
     Async_kernel_require_explicit_time_source=0,
     Async_kernel_scheduler=0,
     Bvar$1=0,
     Clock_ns=0,
     Condition=0,
     Deferred$11=0,
     Eager_deferred=0,
     Execution_context$0=0,
     Gc=0,
     Invariant=0,
     Ivar$1=0,
     Quickcheck=0,
     Lazy_deferred=0,
     Limiter=0,
     Monad_sequence=0,
     Monitor$0=0,
     Mvar=0,
     Pipe=0,
     Priority=0,
     Sequencer$0=0,
     Stream$0=0,
     Synchronous_time_source$0=0,
     Tail$0=0,
     Throttle$0=0,
     Time_source$0=0,
     _zA_=_nY_[3],
     _zB_=include$20[2],
     _zC_=include$20[3];
    function _zD_(param)
     {var expect=runtime.core_kernel_gc_minor_words(0);
      caml_call1(return$11,0);
      return$0(0);
      caml_call1(include$20[1],0);
      caml_call1(include$20[4][1],0);
      var
       got=runtime.core_kernel_gc_minor_words(0),
       sexpifier=Core_kernel[455],
       comparator=Core_kernel[451];
      return caml_call8
              (Ppx_assert_lib_Runtime[3],
               pos$50,
               sexpifier,
               comparator,
               0,
               0,
               0,
               expect,
               got)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_return_does_not_allocate,
      0,
      cst_src_async_kernel_ml$0,
      106,
      0,
      356,
      _zD_);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_async_kernel$205);
    caml_call1(Expect_test_collector[4][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumulator[1][2],0);
    var
     Async_kernel$0=
      [0,
       Limiter_in_this_directory,
       Async_kernel_config,
       Async_kernel_persistent_connection,
       Async_kernel_require_explicit_time_source,
       Async_kernel_scheduler,
       Bvar$1,
       Clock_ns,
       Condition,
       Deferred$11,
       Eager_deferred,
       Execution_context$0,
       Gc,
       Invariant,
       Ivar$1,
       Quickcheck,
       Lazy_deferred,
       Limiter,
       Monad_sequence,
       Monitor$0,
       Mvar,
       Pipe,
       Priority,
       Sequencer$0,
       Stream$0,
       Synchronous_time_source$0,
       Tail$0,
       Throttle$0,
       Time_source$0,
       Use_eager_deferred,
       after$5,
       at$7,
       catch$0,
       choice,
       choose,
       don_t_wait_for,
       every$3,
       never,
       _lG_,
       _lF_,
       try_with,
       upon$1,
       with_timeout$1,
       _lD_,
       _lC_,
       _zA_,
       _l7_,
       _l8_,
       return$11,
       _zB_,
       _zC_,
       Let_syntax$1,
       Async_kernel_private];
    caml_register_global(2724,Async_kernel$0,"Async_kernel");
    return}
  (function(){return this}()));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJhc3luY19rZXJuZWwuY21hLmpzIiwic291cmNlUm9vdCI6IiIsIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0kiLCJzb3VyY2VzIjpbXSwic291cmNlc0NvbnRlbnQiOltdfQ==
